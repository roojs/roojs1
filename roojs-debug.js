/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 




// for old browsers
window["undefined"] = window["undefined"];

/**
 * @class Roo
 * Roo core utilities and functions.
 * @static
 */
var Roo = {}; 
/**
 * Copies all the properties of config to obj.
 * @param {Object} obj The receiver of the properties
 * @param {Object} config The source of the properties
 * @param {Object} defaults A different object that will also be applied for default values
 * @return {Object} returns obj
 * @member Roo apply
 */

 
Roo.apply = function(o, c, defaults){
    if(defaults){
        // no "this" reference for friendly out of scope calls
        Roo.apply(o, defaults);
    }
    if(o && c && typeof c == 'object'){
        for(var p in c){
            o[p] = c[p];
        }
    }
    return o;
};


(function(){
    var idSeed = 0;
    var ua = navigator.userAgent.toLowerCase();

    var isStrict = document.compatMode == "CSS1Compat",
        isOpera = ua.indexOf("opera") > -1,
        isSafari = (/webkit|khtml/).test(ua),
        isFirefox = ua.indexOf("firefox") > -1,
        isIE = ua.indexOf("msie") > -1,
        isIE7 = ua.indexOf("msie 7") > -1,
        isIE11 = /trident.*rv\:11\./.test(ua),
        isEdge = ua.indexOf("edge") > -1,
        isGecko = !isSafari && ua.indexOf("gecko") > -1,
        isBorderBox = isIE && !isStrict,
        isWindows = (ua.indexOf("windows") != -1 || ua.indexOf("win32") != -1),
        isMac = (ua.indexOf("macintosh") != -1 || ua.indexOf("mac os x") != -1),
        isLinux = (ua.indexOf("linux") != -1),
        isSecure = window.location.href.toLowerCase().indexOf("https") === 0,
        isIOS = /iphone|ipad/.test(ua),
        isAndroid = /android/.test(ua),
        isTouch =  (function() {
            try {
                if (ua.indexOf('chrome') != -1 && ua.indexOf('android') == -1) {
                    window.addEventListener('touchstart', function __set_has_touch__ () {
                        Roo.isTouch = true;
                        window.removeEventListener('touchstart', __set_has_touch__);
                    });
                    return false; // no touch on chrome!?
                }
                document.createEvent("TouchEvent");  
                return true;  
            } catch (e) {  
                return false;  
            } 
            
        })();
    // remove css image flicker
	if(isIE && !isIE7){
        try{
            document.execCommand("BackgroundImageCache", false, true);
        }catch(e){}
    }
    
    Roo.apply(Roo, {
        /**
         * True if the browser is in strict mode
         * @type Boolean
         */
        isStrict : isStrict,
        /**
         * True if the page is running over SSL
         * @type Boolean
         */
        isSecure : isSecure,
        /**
         * True when the document is fully initialized and ready for action
         * @type Boolean
         */
        isReady : false,
        /**
         * Turn on debugging output (currently only the factory uses this)
         * @type Boolean
         */
        
        debug: false,

        /**
         * True to automatically uncache orphaned Roo.Elements periodically (defaults to true)
         * @type Boolean
         */
        enableGarbageCollector : true,

        /**
         * True to automatically purge event listeners after uncaching an element (defaults to false).
         * Note: this only happens if enableGarbageCollector is true.
         * @type Boolean
         */
        enableListenerCollection:false,

        /**
         * URL to a blank file used by Roo when in secure mode for iframe src and onReady src to prevent
         * the IE insecure content warning (defaults to javascript:false).
         * @type String
         */
        SSL_SECURE_URL : "javascript:false",

        /**
         * URL to a 1x1 transparent gif image used by Roo to create inline icons with CSS background images. (Defaults to
         * "http://Roojs.com/s.gif" and you should change this to a URL on your server).
         * @type String
         */
        BLANK_IMAGE_URL : "http:/"+"/localhost/s.gif",

        emptyFn : function(){},
        
        /**
         * Copies all the properties of config to obj if they don't already exist.
         * @param {Object} obj The receiver of the properties
         * @param {Object} config The source of the properties
         * @return {Object} returns obj
         */
        applyIf : function(o, c){
            if(o && c){
                for(var p in c){
                    if(typeof o[p] == "undefined"){ o[p] = c[p]; }
                }
            }
            return o;
        },

        /**
         * Applies event listeners to elements by selectors when the document is ready.
         * The event name is specified with an @ suffix.
<pre><code>
Roo.addBehaviors({
   // add a listener for click on all anchors in element with id foo
   '#foo a@click' : function(e, t){
       // do something
   },

   // add the same listener to multiple selectors (separated by comma BEFORE the @)
   '#foo a, #bar span.some-class@mouseover' : function(){
       // do something
   }
});
</code></pre>
         * @param {Object} obj The list of behaviors to apply
         */
        addBehaviors : function(o){
            if(!Roo.isReady){
                Roo.onReady(function(){
                    Roo.addBehaviors(o);
                });
                return;
            }
            var cache = {}; // simple cache for applying multiple behaviors to same selector does query multiple times
            for(var b in o){
                var parts = b.split('@');
                if(parts[1]){ // for Object prototype breakers
                    var s = parts[0];
                    if(!cache[s]){
                        cache[s] = Roo.select(s);
                    }
                    cache[s].on(parts[1], o[b]);
                }
            }
            cache = null;
        },

        /**
         * Generates unique ids. If the element already has an id, it is unchanged
         * @param {String/HTMLElement/Element} el (optional) The element to generate an id for
         * @param {String} prefix (optional) Id prefix (defaults "Roo-gen")
         * @return {String} The generated Id.
         */
        id : function(el, prefix){
            prefix = prefix || "roo-gen";
            el = Roo.getDom(el);
            var id = prefix + (++idSeed);
            return el ? (el.id ? el.id : (el.id = id)) : id;
        },
         
       
        /**
         * Extends one class with another class and optionally overrides members with the passed literal. This class
         * also adds the function "override()" to the class that can be used to override
         * members on an instance.
         * @param {Object} subclass The class inheriting the functionality
         * @param {Object} superclass The class being extended
         * @param {Object} overrides (optional) A literal with members
         * @method extend
         */
        extend : function(){
            // inline overrides
            var io = function(o){
                for(var m in o){
                    this[m] = o[m];
                }
            };
            return function(sb, sp, overrides){
                if(typeof sp == 'object'){ // eg. prototype, rather than function constructor..
                    overrides = sp;
                    sp = sb;
                    sb = function(){sp.apply(this, arguments);};
                }
                var F = function(){}, sbp, spp = sp.prototype;
                F.prototype = spp;
                sbp = sb.prototype = new F();
                sbp.constructor=sb;
                sb.superclass=spp;
                
                if(spp.constructor == Object.prototype.constructor){
                    spp.constructor=sp;
                   
                }
                
                sb.override = function(o){
                    Roo.override(sb, o);
                };
                sbp.override = io;
                Roo.override(sb, overrides);
                return sb;
            };
        }(),

        /**
         * Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.
         * Usage:<pre><code>
Roo.override(MyClass, {
    newMethod1: function(){
        // etc.
    },
    newMethod2: function(foo){
        // etc.
    }
});
 </code></pre>
         * @param {Object} origclass The class to override
         * @param {Object} overrides The list of functions to add to origClass.  This should be specified as an object literal
         * containing one or more methods.
         * @method override
         */
        override : function(origclass, overrides){
            if(overrides){
                var p = origclass.prototype;
                for(var method in overrides){
                    p[method] = overrides[method];
                }
            }
        },
        /**
         * Creates namespaces to be used for scoping variables and classes so that they are not global.  Usage:
         * <pre><code>
Roo.namespace('Company', 'Company.data');
Company.Widget = function() { ... }
Company.data.CustomStore = function(config) { ... }
</code></pre>
         * @param {String} namespace1
         * @param {String} namespace2
         * @param {String} etc
         * @method namespace
         */
        namespace : function(){
            var a=arguments, o=null, i, j, d, rt;
            for (i=0; i<a.length; ++i) {
                d=a[i].split(".");
                rt = d[0];
                
				if (typeof(window != 'undefined')) {
					if (typeof(window[rt]) == "undefined"){
						window[rt] = {};
					}
					o = window[rt];
				
				} else {
					/** eval:var:o */
					eval('if (typeof ' + rt + ' == "undefined"){' + rt + ' = {};} o = ' + rt + ';');
				}
				
				
                
                for (j=1; j<d.length; ++j) {
                    o[d[j]]=o[d[j]] || {};
                    o=o[d[j]];
                }
            }
        },
        /**
         * Creates namespaces to be used for scoping variables and classes so that they are not global.  Usage:
         * <pre><code>
Roo.factory({ xns: Roo.data, xtype : 'Store', .....});
Roo.factory(conf, Roo.data);
</code></pre>
         * @param {String} classname
         * @param {String} namespace (optional)
         * @method factory
         */
         
        factory : function(c, ns)
        {
            // no xtype, no ns or c.xns - or forced off by c.xns
            if (!c.xtype   || (!ns && !c.xns) ||  (c.xns === false)) { // not enough info...
                return c;
            }
            ns = c.xns ? c.xns : ns; // if c.xns is set, then use that..
            if (c.constructor == ns[c.xtype]) {// already created...
                return c;
            }
            if (ns[c.xtype]) {
                if (Roo.debug) { Roo.log("Roo.Factory(" + c.xtype + ")"); }
                var ret = new ns[c.xtype](c);
                ret.xns = false;
                return ret;
            }
            c.xns = false; // prevent recursion..
            return c;
        },
         /**
         * Logs to console if it can.
         *
         * @param {String|Object} string
         * @method log
         */
        log : function(s)
        {
            if ((typeof(console) == 'undefined') || (typeof(console.log) == 'undefined')) {
                return; // alerT?
            }
            
            console.log(s);
        },
        /**
         * Takes an object and converts it to an encoded URL. e.g. Roo.urlEncode({foo: 1, bar: 2}); would return "foo=1&bar=2".  Optionally, property values can be arrays, instead of keys and the resulting string that's returned will contain a name/value pair for each array value.
         * @param {Object} o
         * @return {String}
         */
        urlEncode : function(o){
            if(!o){
                return "";
            }
            var buf = [];
            for(var key in o){
                var ov = o[key], k = Roo.encodeURIComponent(key);
                var type = typeof ov;
                if(type == 'undefined'){
                    buf.push(k, "=&");
                }else if(type != "function" && type != "object"){
                    buf.push(k, "=", Roo.encodeURIComponent(ov), "&");
                }else if(ov instanceof Array){
                    if (ov.length) {
	                    for(var i = 0, len = ov.length; i < len; i++) {
	                        buf.push(k, "=", Roo.encodeURIComponent(ov[i] === undefined ? '' : ov[i]), "&");
	                    }
	                } else {
	                    buf.push(k, "=&");
	                }
                }
            }
            buf.pop();
            return buf.join("");
        },
         /**
         * Safe version of encodeURIComponent
         * @param {String} data 
         * @return {String} 
         */
        
        encodeURIComponent : function (data)
        {
            try {
                return encodeURIComponent(data);
            } catch(e) {} // should be an uri encode error.
            
            if (data == '' || data == null){
               return '';
            }
            // http://stackoverflow.com/questions/2596483/unicode-and-uri-encoding-decoding-and-escaping-in-javascript
            function nibble_to_hex(nibble){
                var chars = '0123456789ABCDEF';
                return chars.charAt(nibble);
            }
            data = data.toString();
            var buffer = '';
            for(var i=0; i<data.length; i++){
                var c = data.charCodeAt(i);
                var bs = new Array();
                if (c > 0x10000){
                        // 4 bytes
                    bs[0] = 0xF0 | ((c & 0x1C0000) >>> 18);
                    bs[1] = 0x80 | ((c & 0x3F000) >>> 12);
                    bs[2] = 0x80 | ((c & 0xFC0) >>> 6);
                    bs[3] = 0x80 | (c & 0x3F);
                }else if (c > 0x800){
                         // 3 bytes
                    bs[0] = 0xE0 | ((c & 0xF000) >>> 12);
                    bs[1] = 0x80 | ((c & 0xFC0) >>> 6);
                    bs[2] = 0x80 | (c & 0x3F);
                }else if (c > 0x80){
                       // 2 bytes
                    bs[0] = 0xC0 | ((c & 0x7C0) >>> 6);
                    bs[1] = 0x80 | (c & 0x3F);
                }else{
                        // 1 byte
                    bs[0] = c;
                }
                for(var j=0; j<bs.length; j++){
                    var b = bs[j];
                    var hex = nibble_to_hex((b & 0xF0) >>> 4) 
                            + nibble_to_hex(b &0x0F);
                    buffer += '%'+hex;
               }
            }
            return buffer;    
             
        },

        /**
         * Takes an encoded URL and and converts it to an object. e.g. Roo.urlDecode("foo=1&bar=2"); would return {foo: 1, bar: 2} or Roo.urlDecode("foo=1&bar=2&bar=3&bar=4", true); would return {foo: 1, bar: [2, 3, 4]}.
         * @param {String} string
         * @param {Boolean} overwrite (optional) Items of the same name will overwrite previous values instead of creating an an array (Defaults to false).
         * @return {Object} A literal with members
         */
        urlDecode : function(string, overwrite){
            if(!string || !string.length){
                return {};
            }
            var obj = {};
            var pairs = string.split('&');
            var pair, name, value;
            for(var i = 0, len = pairs.length; i < len; i++){
                pair = pairs[i].split('=');
                name = decodeURIComponent(pair[0]);
                value = decodeURIComponent(pair[1]);
                if(overwrite !== true){
                    if(typeof obj[name] == "undefined"){
                        obj[name] = value;
                    }else if(typeof obj[name] == "string"){
                        obj[name] = [obj[name]];
                        obj[name].push(value);
                    }else{
                        obj[name].push(value);
                    }
                }else{
                    obj[name] = value;
                }
            }
            return obj;
        },

        /**
         * Iterates an array calling the passed function with each item, stopping if your function returns false. If the
         * passed array is not really an array, your function is called once with it.
         * The supplied function is called with (Object item, Number index, Array allItems).
         * @param {Array/NodeList/Mixed} array
         * @param {Function} fn
         * @param {Object} scope
         */
        each : function(array, fn, scope){
            if(typeof array.length == "undefined" || typeof array == "string"){
                array = [array];
            }
            for(var i = 0, len = array.length; i < len; i++){
                if(fn.call(scope || array[i], array[i], i, array) === false){ return i; };
            }
        },

        // deprecated
        combine : function(){
            var as = arguments, l = as.length, r = [];
            for(var i = 0; i < l; i++){
                var a = as[i];
                if(a instanceof Array){
                    r = r.concat(a);
                }else if(a.length !== undefined && !a.substr){
                    r = r.concat(Array.prototype.slice.call(a, 0));
                }else{
                    r.push(a);
                }
            }
            return r;
        },

        /**
         * Escapes the passed string for use in a regular expression
         * @param {String} str
         * @return {String}
         */
        escapeRe : function(s) {
            return s.replace(/([.*+?^${}()|[\]\/\\])/g, "\\$1");
        },

        // internal (non-delayed, will get a return value..)
        callback : function(cb, scope, args, delay)
		{
            if(typeof cb != "function"){
				return false;
			}
			if(delay){
				cb.defer(delay, scope, args || []);
				return false
            }
			return cb.apply(scope, args || []);

        },

        /**
         * Return the dom node for the passed string (id), dom node, or Roo.Element
         * @param {String/HTMLElement/Roo.Element} el
         * @return HTMLElement
         */
        getDom : function(el){
            if(!el){
                return null;
            }
            return el.dom ? el.dom : (typeof el == 'string' ? document.getElementById(el) : el);
        },

        /**
        * Shorthand for {@link Roo.ComponentMgr#get}
        * @param {String} id
        * @return Roo.Component
        */
        getCmp : function(id){
            return Roo.ComponentMgr.get(id);
        },
         
        num : function(v, defaultValue){
            if(typeof v != 'number'){
                return defaultValue;
            }
            return v;
        },

        destroy : function(){
            for(var i = 0, a = arguments, len = a.length; i < len; i++) {
                var as = a[i];
                if(as){
                    if(as.dom){
                        as.removeAllListeners();
                        as.remove();
                        continue;
                    }
                    if(typeof as.purgeListeners == 'function'){
                        as.purgeListeners();
                    }
                    if(typeof as.destroy == 'function'){
                        as.destroy();
                    }
                }
            }
        },

        // inpired by a similar function in mootools library
        /**
         * Returns the type of object that is passed in. If the object passed in is null or undefined it
         * return false otherwise it returns one of the following values:<ul>
         * <li><b>string</b>: If the object passed is a string</li>
         * <li><b>number</b>: If the object passed is a number</li>
         * <li><b>boolean</b>: If the object passed is a boolean value</li>
         * <li><b>function</b>: If the object passed is a function reference</li>
         * <li><b>object</b>: If the object passed is an object</li>
         * <li><b>array</b>: If the object passed is an array</li>
         * <li><b>regexp</b>: If the object passed is a regular expression</li>
         * <li><b>element</b>: If the object passed is a DOM Element</li>
         * <li><b>nodelist</b>: If the object passed is a DOM NodeList</li>
         * <li><b>textnode</b>: If the object passed is a DOM text node and contains something other than whitespace</li>
         * <li><b>whitespace</b>: If the object passed is a DOM text node and contains only whitespace</li>
         * @param {Mixed} object
         * @return {String}
         */
        type : function(o){
            if(o === undefined || o === null){
                return false;
            }
            if(o.htmlElement){
                return 'element';
            }
            var t = typeof o;
            if(t == 'object' && o.nodeName) {
                switch(o.nodeType) {
                    case 1: return 'element';
                    case 3: return (/\S/).test(o.nodeValue) ? 'textnode' : 'whitespace';
                }
            }
            if(t == 'object' || t == 'function') {
                switch(o.constructor) {
                    case Array: return 'array';
                    case RegExp: return 'regexp';
                }
                if(typeof o.length == 'number' && typeof o.item == 'function') {
                    return 'nodelist';
                }
            }
            return t;
        },

        /**
         * Returns true if the passed value is null, undefined or an empty string (optional).
         * @param {Mixed} value The value to test
         * @param {Boolean} allowBlank (optional) Pass true if an empty string is not considered empty
         * @return {Boolean}
         */
        isEmpty : function(v, allowBlank){
            return v === null || v === undefined || (!allowBlank ? v === '' : false);
        },
        
        /** @type Boolean */
        isOpera : isOpera,
        /** @type Boolean */
        isSafari : isSafari,
        /** @type Boolean */
        isFirefox : isFirefox,
        /** @type Boolean */
        isIE : isIE,
        /** @type Boolean */
        isIE7 : isIE7,
        /** @type Boolean */
        isIE11 : isIE11,
        /** @type Boolean */
        isEdge : isEdge,
        /** @type Boolean */
        isGecko : isGecko,
        /** @type Boolean */
        isBorderBox : isBorderBox,
        /** @type Boolean */
        isWindows : isWindows,
        /** @type Boolean */
        isLinux : isLinux,
        /** @type Boolean */
        isMac : isMac,
        /** @type Boolean */
        isIOS : isIOS,
        /** @type Boolean */
        isAndroid : isAndroid,
        /** @type Boolean */
        isTouch : isTouch,

        /**
         * By default, Ext intelligently decides whether floating elements should be shimmed. If you are using flash,
         * you may want to set this to true.
         * @type Boolean
         */
        useShims : ((isIE && !isIE7) || (isGecko && isMac)),
        
        
                
        /**
         * Selects a single element as a Roo Element
         * This is about as close as you can get to jQuery's $('do crazy stuff')
         * @param {String} selector The selector/xpath query
         * @param {Node} root (optional) The start of the query (defaults to document).
         * @return {Roo.Element}
         */
        selectNode : function(selector, root) 
        {
            var node = Roo.DomQuery.selectNode(selector,root);
            return node ? Roo.get(node) : new Roo.Element(false);
        },
		/**
		 * Find the current bootstrap width Grid size
		 * Note xs is the default for smaller.. - this is currently used by grids to render correct columns
		 * @returns {String} (xs|sm|md|lg|xl)
		 */
		
		getGridSize : function()
		{
			var w = Roo.lib.Dom.getViewWidth();
			switch(true) {
				case w > 1200:
					return 'xl';
				case w > 992:
					return 'lg';
				case w > 768:
					return 'md';
				case w > 576:
					return 'sm';
				default:
					return 'xs'
			}
			
		} 
        
    });


})();

Roo.namespace("Roo", "Roo.util", "Roo.grid", "Roo.dd", "Roo.tree", "Roo.data",
                "Roo.form", "Roo.menu", "Roo.state", "Roo.lib", "Roo.layout",
                "Roo.app", "Roo.ux" 
               );
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

(function() {    
    // wrappedn so fnCleanup is not in global scope...
    if(Roo.isIE) {
        function fnCleanUp() {
            var p = Function.prototype;
            delete p.createSequence;
            delete p.defer;
            delete p.createDelegate;
            delete p.createCallback;
            delete p.createInterceptor;

            window.detachEvent("onunload", fnCleanUp);
        }
        window.attachEvent("onunload", fnCleanUp);
    }
})();


/**
 * @class Function
 * These functions are available on every Function object (any JavaScript function).
 */
Roo.apply(Function.prototype, {
     /**
     * Creates a callback that passes arguments[0], arguments[1], arguments[2], ...
     * Call directly on any function. Example: <code>myFunction.createCallback(myarg, myarg2)</code>
     * Will create a function that is bound to those 2 args.
     * @return {Function} The new function
    */
    createCallback : function(/*args...*/){
        // make args available, in function below
        var args = arguments;
        var method = this;
        return function() {
            return method.apply(window, args);
        };
    },

    /**
     * Creates a delegate (callback) that sets the scope to obj.
     * Call directly on any function. Example: <code>this.myFunction.createDelegate(this)</code>
     * Will create a function that is automatically scoped to this.
     * @param {Object} obj (optional) The object for which the scope is set
     * @param {Array} args (optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)
     * @param {Boolean/Number} appendArgs (optional) if True args are appended to call args instead of overriding,
     *                                             if a number the args are inserted at the specified position
     * @return {Function} The new function
     */
    createDelegate : function(obj, args, appendArgs){
        var method = this;
        return function() {
            var callArgs = args || arguments;
            if(appendArgs === true){
                callArgs = Array.prototype.slice.call(arguments, 0);
                callArgs = callArgs.concat(args);
            }else if(typeof appendArgs == "number"){
                callArgs = Array.prototype.slice.call(arguments, 0); // copy arguments first
                var applyArgs = [appendArgs, 0].concat(args); // create method call params
                Array.prototype.splice.apply(callArgs, applyArgs); // splice them in
            }
            return method.apply(obj || window, callArgs);
        };
    },

    /**
     * Calls this function after the number of millseconds specified.
     * @param {Number} millis The number of milliseconds for the setTimeout call (if 0 the function is executed immediately)
     * @param {Object} obj (optional) The object for which the scope is set
     * @param {Array} args (optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)
     * @param {Boolean/Number} appendArgs (optional) if True args are appended to call args instead of overriding,
     *                                             if a number the args are inserted at the specified position
     * @return {Number} The timeout id that can be used with clearTimeout
     */
    defer : function(millis, obj, args, appendArgs){
        var fn = this.createDelegate(obj, args, appendArgs);
        if(millis){
            return setTimeout(fn, millis);
        }
        fn();
        return 0;
    },
    /**
     * Create a combined function call sequence of the original function + the passed function.
     * The resulting function returns the results of the original function.
     * The passed fcn is called with the parameters of the original function
     * @param {Function} fcn The function to sequence
     * @param {Object} scope (optional) The scope of the passed fcn (Defaults to scope of original function or window)
     * @return {Function} The new function
     */
    createSequence : function(fcn, scope){
        if(typeof fcn != "function"){
            return this;
        }
        var method = this;
        return function() {
            var retval = method.apply(this || window, arguments);
            fcn.apply(scope || this || window, arguments);
            return retval;
        };
    },

    /**
     * Creates an interceptor function. The passed fcn is called before the original one. If it returns false, the original one is not called.
     * The resulting function returns the results of the original function.
     * The passed fcn is called with the parameters of the original function.
     * @addon
     * @param {Function} fcn The function to call before the original
     * @param {Object} scope (optional) The scope of the passed fcn (Defaults to scope of original function or window)
     * @return {Function} The new function
     */
    createInterceptor : function(fcn, scope){
        if(typeof fcn != "function"){
            return this;
        }
        var method = this;
        return function() {
            fcn.target = this;
            fcn.method = method;
            if(fcn.apply(scope || this || window, arguments) === false){
                return;
            }
            return method.apply(this || window, arguments);
        };
    }
});
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

Roo.applyIf(String, {
    
    /** @scope String */
    
    /**
     * Escapes the passed string for ' and \
     * @param {String} string The string to escape
     * @return {String} The escaped string
     * @static
     */
    escape : function(string) {
        return string.replace(/('|\\)/g, "\\$1");
    },

    /**
     * Pads the left side of a string with a specified character.  This is especially useful
     * for normalizing number and date strings.  Example usage:
     * <pre><code>
var s = String.leftPad('123', 5, '0');
// s now contains the string: '00123'
</code></pre>
     * @param {String} string The original string
     * @param {Number} size The total length of the output string
     * @param {String} char (optional) The character with which to pad the original string (defaults to empty string " ")
     * @return {String} The padded string
     * @static
     */
    leftPad : function (val, size, ch) {
        var result = new String(val);
        if(ch === null || ch === undefined || ch === '') {
            ch = " ";
        }
        while (result.length < size) {
            result = ch + result;
        }
        return result;
    },

    /**
     * Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each
     * token must be unique, and must increment in the format {0}, {1}, etc.  Example usage:
     * <pre><code>
var cls = 'my-class', text = 'Some text';
var s = String.format('<div class="{0}">{1}</div>', cls, text);
// s now contains the string: '<div class="my-class">Some text</div>'
</code></pre>
     * @param {String} string The tokenized string to be formatted
     * @param {String} value1 The value to replace token {0}
     * @param {String} value2 Etc...
     * @return {String} The formatted string
     * @static
     */
    format : function(format){
        var args = Array.prototype.slice.call(arguments, 1);
        return format.replace(/\{(\d+)\}/g, function(m, i){
            return Roo.util.Format.htmlEncode(args[i]);
        });
    }
  
    
});

/**
 * Utility function that allows you to easily switch a string between two alternating values.  The passed value
 * is compared to the current string, and if they are equal, the other value that was passed in is returned.  If
 * they are already different, the first value passed in is returned.  Note that this method returns the new value
 * but does not change the current string.
 * <pre><code>
// alternate sort directions
sort = sort.toggle('ASC', 'DESC');

// instead of conditional logic:
sort = (sort == 'ASC' ? 'DESC' : 'ASC');
</code></pre>
 * @param {String} value The value to compare to the current string
 * @param {String} other The new value to use if the string already equals the first value passed in
 * @return {String} The new value
 */
 
String.prototype.toggle = function(value, other){
    return this == value ? other : value;
};


/**
  * Remove invalid unicode characters from a string 
  *
  * @return {String} The clean string
  */
String.prototype.unicodeClean = function () {
    return this.replace(/[\s\S]/g,
        function(character) {
            if (character.charCodeAt()< 256) {
              return character;
           }
           try {
                encodeURIComponent(character);
           } catch(e) { 
              return '';
           }
           return character;
        }
    );
};
  

/**
  * Make the first letter of a string uppercase
  *
  * @return {String} The new string.
  */
String.prototype.toUpperCaseFirst = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};  
  
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

 /**
 * @class Number
 */
Roo.applyIf(Number.prototype, {
    /**
     * Checks whether or not the current number is within a desired range.  If the number is already within the
     * range it is returned, otherwise the min or max value is returned depending on which side of the range is
     * exceeded.  Note that this method returns the constrained value but does not change the current number.
     * @param {Number} min The minimum number in the range
     * @param {Number} max The maximum number in the range
     * @return {Number} The constrained value if outside the range, otherwise the current value
     */
    constrain : function(min, max){
        return Math.min(Math.max(this, min), max);
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 /**
 * @class Array
 */
Roo.applyIf(Array.prototype, {
    /**
     * 
     * Checks whether or not the specified object exists in the array.
     * @param {Object} o The object to check for
     * @return {Number} The index of o in the array (or -1 if it is not found)
     */
    indexOf : function(o){
       for (var i = 0, len = this.length; i < len; i++){
 	      if(this[i] == o) { return i; }
       }
 	   return -1;
    },

    /**
     * Removes the specified object from the array.  If the object is not found nothing happens.
     * @param {Object} o The object to remove
     */
    remove : function(o){
       var index = this.indexOf(o);
       if(index != -1){
           this.splice(index, 1);
       }
    },
    /**
     * Map (JS 1.6 compatibility)
     * @param {Function} function  to call
     */
    map : function(fun )
    {
        var len = this.length >>> 0;
        if (typeof fun != "function") {
            throw new TypeError();
        }
        var res = new Array(len);
        var thisp = arguments[1];
        for (var i = 0; i < len; i++)
        {
            if (i in this) {
                res[i] = fun.call(thisp, this[i], i, this);
            }
        }

        return res;
    },
    /**
     * equals
     * @param {Array} o The array to compare to
     * @returns {Boolean} true if the same
     */
    equals : function(b)
    {
            // https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript
        if (this === b) {
            return true;
        }
        if (b == null) {
            return false;
        }
        if (this.length !== b.length) {
            return false;
        }
          
        // sort?? a.sort().equals(b.sort());
          
        for (var i = 0; i < this.length; ++i) {
            if (this[i] !== b[i]) {
            return false;
            }
        }
        return true;
    } 
    
    
    
    
});

Roo.applyIf(Array, {
 /**
     * from
     * @static
     * @param {Array} o Or Array like object (eg. nodelist)
     * @returns {Array} 
     */
    from : function(o)
    {
        var ret= [];
    
        for (var i =0; i < o.length; i++) { 
            ret[i] = o[i];
        }
        return ret;
      
    }
});
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Date
 *
 * The date parsing and format syntax is a subset of
 * <a href="http://www.php.net/date">PHP's date() function</a>, and the formats that are
 * supported will provide results equivalent to their PHP versions.
 *
 * Following is the list of all currently supported formats:
 *<pre>
Sample date:
'Wed Jan 10 2007 15:05:01 GMT-0600 (Central Standard Time)'

Format  Output      Description
------  ----------  --------------------------------------------------------------
  d      10         Day of the month, 2 digits with leading zeros
  D      Wed        A textual representation of a day, three letters
  j      10         Day of the month without leading zeros
  l      Wednesday  A full textual representation of the day of the week
  S      th         English ordinal day of month suffix, 2 chars (use with j)
  w      3          Numeric representation of the day of the week
  z      9          The julian date, or day of the year (0-365)
  W      01         ISO-8601 2-digit week number of year, weeks starting on Monday (00-52)
  F      January    A full textual representation of the month
  m      01         Numeric representation of a month, with leading zeros
  M      Jan        Month name abbreviation, three letters
  n      1          Numeric representation of a month, without leading zeros
  t      31         Number of days in the given month
  L      0          Whether it's a leap year (1 if it is a leap year, else 0)
  Y      2007       A full numeric representation of a year, 4 digits
  y      07         A two digit representation of a year
  a      pm         Lowercase Ante meridiem and Post meridiem
  A      PM         Uppercase Ante meridiem and Post meridiem
  g      3          12-hour format of an hour without leading zeros
  G      15         24-hour format of an hour without leading zeros
  h      03         12-hour format of an hour with leading zeros
  H      15         24-hour format of an hour with leading zeros
  i      05         Minutes with leading zeros
  s      01         Seconds, with leading zeros
  O      -0600      Difference to Greenwich time (GMT) in hours (Allows +08, without minutes)
  P      -06:00     Difference to Greenwich time (GMT) with colon between hours and minutes
  T      CST        Timezone setting of the machine running the code
  Z      -21600     Timezone offset in seconds (negative if west of UTC, positive if east)
</pre>
 *
 * Example usage (note that you must escape format specifiers with '\\' to render them as character literals):
 * <pre><code>
var dt = new Date('1/10/2007 03:05:01 PM GMT-0600');
document.write(dt.format('Y-m-d'));                         //2007-01-10
document.write(dt.format('F j, Y, g:i a'));                 //January 10, 2007, 3:05 pm
document.write(dt.format('l, \\t\\he dS of F Y h:i:s A'));  //Wednesday, the 10th of January 2007 03:05:01 PM
 </code></pre>
 *
 * Here are some standard date/time patterns that you might find helpful.  They
 * are not part of the source of Date.js, but to use them you can simply copy this
 * block of code into any script that is included after Date.js and they will also become
 * globally available on the Date object.  Feel free to add or remove patterns as needed in your code.
 * <pre><code>
Date.patterns = {
    ISO8601Long:"Y-m-d H:i:s",
    ISO8601Short:"Y-m-d",
    ShortDate: "n/j/Y",
    LongDate: "l, F d, Y",
    FullDateTime: "l, F d, Y g:i:s A",
    MonthDay: "F d",
    ShortTime: "g:i A",
    LongTime: "g:i:s A",
    SortableDateTime: "Y-m-d\\TH:i:s",
    UniversalSortableDateTime: "Y-m-d H:i:sO",
    YearMonth: "F, Y"
};
</code></pre>
 *
 * Example usage:
 * <pre><code>
var dt = new Date();
document.write(dt.format(Date.patterns.ShortDate));
 </code></pre>
 */

/*
 * Most of the date-formatting functions below are the excellent work of Baron Schwartz.
 * They generate precompiled functions from date formats instead of parsing and
 * processing the pattern every time you format a date.  These functions are available
 * on every Date object (any javascript function).
 *
 * The original article and download are here:
 * http://www.xaprb.com/blog/2005/12/12/javascript-closures-for-runtime-efficiency/
 *
 */
 
 
 // was in core
/**
 Returns the number of milliseconds between this date and date
 @param {Date} date (optional) Defaults to now
 @param {String} interval (optional) Default Date.MILLI, A valid date interval enum value (eg. Date.DAY) 
 @return {Number} The diff in milliseconds or units of interval
 @member Date getElapsed
 */
Date.prototype.getElapsed = function(date, interval)
{
    date = date ||  new Date();
    var ret = Math.abs(date.getTime()-this.getTime());
    switch (interval) {
       
        case  Date.SECOND:
            return Math.floor(ret / (1000));
        case  Date.MINUTE:
            return Math.floor(ret / (1000*60));
        case  Date.HOUR:
            return Math.floor(ret / (1000*60*60));
        case  Date.DAY:
            return Math.floor(ret / (1000*60*60*24));
        case  Date.MONTH: // this does not give exact number...??
            return ((date.format("Y") - this.format("Y")) * 12) + (date.format("m") - this.format("m"));
        case  Date.YEAR: // this does not give exact number...??
            return (date.format("Y") - this.format("Y"));
       
        case  Date.MILLI:
        default:
            return ret;
    }
};
 
// was in date file..


// private
Date.parseFunctions = {count:0};
// private
Date.parseRegexes = [];
// private
Date.formatFunctions = {count:0};

// private
Date.formatParsed = {}
Date.prototype.dateFormat = function(format) {
    if (typeof(Date.formatParsed[format])  == 'undefined') {
        
          //  var funcName = "format" + Date.formatFunctions.count++;
          //Date.formatFunctions[format] = funcName;
          //var code = "Date.prototype." + funcName + " = function(){return ";
          // generate an array.. 
          var code = [];
          var special = false;
          var ch = '';
          for (var i = 0; i < format.length; ++i) {
              ch = format.charAt(i);
              if (!special && ch == "\\") {
                  special = true;
              }
              else if (special) {
                  special = false;
                  code.push([String.escape(ch)]);
              }
              else {
                  code.push(ch);
              }
          }
          Date.formatParsed[format] = code;
    }
    var ret = '';
    var ar =  Date.formatParsed[format];
    for(var i =0; i <ar.length; i++) {
        var c = ar[i];
    
      if (typeof(c) != 'string') {
        ret += c[0];
        continue;
      }
      ret += this.formatCodeToValue(c);
    }
    return ret;
 
};
Date.prototype.formatCodeToValue = function(character) {
    switch (character) {
    case "d":
        return String.leftPad(this.getDate(), 2, '0');
    case "D":
        return Date.dayNames[this.getDay()].substring(0, 3);
    case "j":
        return this.getDate();
    case "l":
        return Date.dayNames[this.getDay()];
    case "S":
        return this.getSuffix();
    case "w":
        return this.getDay();
    case "z":
        return this.getDayOfYear();
    case "W":
        return this.getWeekOfYear();
    case "F":
        return Date.monthNames[this.getMonth()];
    case "m":
        return String.leftPad(this.getMonth() + 1, 2, '0');
    case "M":
        return Date.monthNames[this.getMonth()].substring(0, 3);
    case "n":
        return (this.getMonth() + 1);
    case "t":
        return this.getDaysInMonth();
    case "L":
        return (this.isLeapYear() ? 1 : 0);
    case "Y":
        return this.getFullYear();
    case "y":
        return (this.getFullYear()+ "").substring(2, 4) ;
    case "a":
        return (this.getHours() < 12 ? 'am' : 'pm') ;
    case "A":
        return (this.getHours() < 12 ? 'AM' : 'PM') ;
    case "g":
        return ((this.getHours() % 12) ? this.getHours() % 12 : 12);
    case "G":
        return this.getHours();
    case "h":
        return String.leftPad((this.getHours() % 12) ? this.getHours() % 12 : 12, 2, '0');
    case "H":
        return String.leftPad(this.getHours(), 2, '0');
    case "i":
        return String.leftPad(this.getMinutes(), 2, '0');
    case "s":
        return String.leftPad(this.getSeconds(), 2, '0');
    case "O":
        return this.getGMTOffset();
    case "P":
    	return this.getGMTColonOffset();
    case "T":
        return this.getTimezone();
    case "Z":
        return (this.getTimezoneOffset() * -60);
    default:
        return String.escape(character);
    }
};

/**
 * Formats a date given the supplied format string
 * @param {String} format The format string
 * @return {String} The formatted date
 * @method
 */
Date.prototype.format = Date.prototype.dateFormat;

// private
 



/**
 * Parses the passed string using the specified format. Note that this function expects dates in normal calendar
 * format, meaning that months are 1-based (1 = January) and not zero-based like in JavaScript dates.  Any part of
 * the date format that is not specified will default to the current date value for that part.  Time parts can also
 * be specified, but default to 0.  Keep in mind that the input date string must precisely match the specified format
 * string or the parse operation will fail.
 * Example Usage:
<pre><code>
//dt = Fri May 25 2007 (current date)
var dt = new Date();

//dt = Thu May 25 2006 (today's month/day in 2006)
dt = Date.parseDate("2006", "Y");

//dt = Sun Jan 15 2006 (all date parts specified)
dt = Date.parseDate("2006-1-15", "Y-m-d");

//dt = Sun Jan 15 2006 15:20:01 GMT-0600 (CST)
dt = Date.parseDate("2006-1-15 3:20:01 PM", "Y-m-d h:i:s A" );
</code></pre>
 * @param {String} input The unparsed date as a string
 * @param {String} format The format the date is in
 * @return {Date} The parsed date
 * @static
 */
 

Date.parseDate = function(input, format) {
    
    var out = {
		y : -1,
		m : -1,
		d : -1,
		h : -1,
		i : -1,
		s : -1,
		o : false,
		z : false
		
	};
	var v;
    var d = new Date();
    out.y = d.getFullYear();
    out.m = d.getMonth();
    out.d = d.getDate();
    if (typeof(input) !== 'string') {
		input = input.toString();
	}
    if (typeof(Date.parseFuncData[format]) == 'undefined') {
			
		
		var regex = "";
		var funcs = [];
		 
		var special = false;
		var ch = '';
		for (var i = 0; i < format.length; ++i) {
			ch = format.charAt(i);
			if (!special && ch == "\\") {
				special = true;
			}
			else if (special) {
				special = false;
				regex += String.escape(ch);
 			}
			else {
        
				var obj = Date.formatCodeToRegex(ch, 0);
  
				regex += obj.s;
				if (obj.f !== false) {
					funcs.push(obj.f);
				}
			}
		}
		Date.parseFuncData[format] = {
			f : funcs ,
			re : new RegExp("^" + regex + "$")
		};
  }
	
	if (!input.match(Date.parseFuncData[format].re)) {
		return null;
	}
	
	input.replace(Date.parseFuncData[format].re, function(   ) {
			
	   var results = arguments;
	   Date.parseFuncData[format].f.forEach(function(v, i) {
		   
		   v(results[i+1], out);
   
	   });

	});
	
	

    if (out.y >= 0 && out.m >= 0 && out.d > 0 && out.h >= 0 && out.i >= 0 && out.s >= 0) {
		v = new Date(out.y, out.m, out.d, out.h, out.i, out.s);
		v.setFullYear(out.y);
	} else if (out.y >= 0 && out.m >= 0 && out.d > 0 && out.h >= 0 && out.i >= 0)  {
		v = new Date(out.y, out.m, out.d, out.h, out.i);
		v.setFullYear(out.y);
	} else if (out.y >= 0 && out.m >= 0 && out.d > 0 && out.h >= 0) {
		v = new Date(out.y, out.m, out.d, out.h);
		v.setFullYear(out.y);
	}else if (out.y >= 0 && out.m >= 0 && out.d > 0) {
		v = new Date(out.y, out.m, out.d);
		v.setFullYear(out.y);
	} else if (out.y >= 0 && out.m >= 0) {
		v = new Date(out.y, out.m);
		v.setFullYear(out.y);
	} else if (out.y >= 0) {
		v = new Date(out.y);
		v.setFullYear(out.y);
	}
	
	if (!v || (out.z === false && out.o === false)) {
	  return v;
	}
	if (out.z !== false) {
		return v.add(Date.SECOND, (v.getTimezoneOffset() * 60) + (out.z*1));
	}
	// out.o
	return v.add(Date.HOUR, (v.getGMTOffset() / 100) + (out.o / -100))  ; // reset to GMT, then add offset

 
};
Date.parseFuncData = {};

Date.formatCodeToRegex = function(character) {
    switch (character) {
    case "D":
        return {
	    f : function(result, out) {},
        s:"(Sun|Mon|Tue|Wed|Thu|Fri|Sat)"};
    case "j":
        return {
          f : function(result, out) {
            out.d = parseInt(result, 10);
          },
          s:"(\\d{1,2})"}; // day of month without leading zeroes,
    case "d":
        return {
			f : function(result, out) {
				out.d = parseInt(result, 10);
			},
            s:"(\\d{2})"}; // day of month with leading zeroes
    case "l":
        return {
			f : function(result, out) {},
            s:"(" + Date.dayNames.join("|") + ")"};
    case "S":
        return {
			f : function(result, out) {},
            s:"(st|nd|rd|th)"};
    case "w":
        return {
			f : false,             
            s:"\\d"};
    case "z":
        return { 
			f : function(result, out) {},
            s:"(\\d{1,3})"};
    case "W":
        return {
			f : function(result, out) {},
            s:"(\\d{2})"};
    case "F":
        return {
			f : function(result, out) {
				out.m = parseInt(Date.monthNumbers[result].substring(0, 3), 10);
			},
            s:"(" + Date.monthNames.join("|") + ")"};
    case "M":
        return {
            f : function(result, out) {
				out.m = parseInt(Date.monthNumbers[result], 10);
			},
            s:"(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)"};
    case "n":
        return {
			f : function(result, out) {
				out.m = parseInt(Date.monthNumbers[result], 10);
			},
            s:"(\\d{1,2})"}; // Numeric representation of a month, without leading zeros
    case "m":
        return {
			f : function(result, out) {
				out.m = Math.max(0,parseInt(result, 10) - 1);
			},
            s:"(\\d{2})"}; // Numeric representation of a month, with leading zeros
    case "t":
        return {
			f : false,
            s:"\\d{1,2}"};
    case "L":
        return {
			f : function(result, out) {},
            s:"(1|0)"};
    case "Y":
        return {
			f : function(result, out) {
				out.y =  parseInt(result, 10);
			},
            s:"(\\d{4})"};
    case "y":
        return {
			f : function(result, out) {
				var ty = parseInt(result, 10);
                out.y = ty > Date.y2kYear ? 1900 + ty : 2000 + ty;
			},
            s:"(\\d{1,2})"};
    case "a":
        return {
			f : function(result, out) {
				if (result == 'am') {
					if (out.h == 12) { h = 0; }
                } else {
					if (out.h < 12) { out.h += 12; }
				}
			},	
            s:"(am|pm)"};
    case "A":
        return {
			f : function(result, out) {
				if (result == 'AM') {
					if (out.h == 12) { h = 0; }
                } else {
					if (out.h < 12) { out.h += 12; }
				}
			},	
            s:"(AM|PM)"};
    case "g":
    case "G":
        return {
			f : function(result, out) {
				out.h = parseInt(result,10);
			},	
			s:"(\\d{1,2})"}; // 12/24-hr format  format of an hour without leading zeroes
    case "h":
    case "H":
        return {
			f : function(result, out) {
				out.h = parseInt(result,10);
			},
            s:"(\\d{2})"}; //  12/24-hr format  format of an hour with leading zeroes
    case "i":
        return {
			f : function(result, out) {
				out.i = parseInt(result,10);
			},	
            s:"(\\d{2})"};
    case "s":
        return {
			f : function(result, out) {
				out.s = parseInt(result,10);
			},	
            s:"(\\d{2})"};
    case "O": 
        return {
			f : function(result, out) {
				out.o = result;
                var sn = out.o.substring(0,1);
                var hr = out.o.substring(1,3)*1 + Math.floor(out.o.substring(3,5) / 60); // get hours (performs minutes-to-hour conversion also)
                var mn = out.o.substring(3,5) % 60; // get minutes
                out.o = ((-12 <= (hr*60 + mn)/60) && ((hr*60 + mn)/60 <= 14))? // -12hrs <= GMT offset <= 14hrs
                    (sn + String.leftPad(hr, 2, 0) + String.leftPad(mn, 2, 0)) : null;
			},	
			
            s:"([+\-]\\d{2,4})"
		};
    
    
    case "P":   //xx:yy
    	return {
			f : function(result, out) { 
				out.o = result;
				var sn = out.o.substring(0,1);
				var hr = out.o.substring(1,3)*1 + Math.floor(out.o.substring(4,6) / 60);
				var mn = out.o.substring(4,6) % 60;
       
				out.o = ((-12 <= (hr*60 + mn)/60) && ((hr*60 + mn)/60 <= 14))?
    	                (sn + String.leftPad(hr, 2, 0) + String.leftPad(mn, 2, 0)) : null;
			},
            s:"([+\-]\\d{2}:\\d{2})"
		};
    
	case "T": // note it's just ignored..
        return {
			f : function(result, out) {},
            s:"([A-Z]{1,4})"}; // timezone abbrev. may be between 1 - 4 chars
    case "Z":
        return {
			f : function(result, out) {
				out.z = result; // -43200 <= UTC offset <= 50400
                out.z = (-43200 <= out.z*1 && out.z*1 <= 50400)? out.z : null;
			},
            s:"([+\-]?\\d{1,5})"
		}; // leading '+' sign is optional for UTC offset
    default:
        return {
			f : false,
            s: String.escape(character)
		};
    }
};
/**
 * Get the timezone abbreviation of the current date (equivalent to the format specifier 'T').
 * @return {String} The abbreviated timezone name (e.g. 'CST')
 */
Date.prototype.getTimezone = function() {
    return this.toString().replace(/^.*? ([A-Z]{1,4})[\-+][0-9]{4} .*$/, "$1");
};

/**
 * Get the offset from GMT of the current date (equivalent to the format specifier 'O').
 * @return {String} The 4-character offset string prefixed with + or - (e.g. '-0600')
 */
Date.prototype.getGMTOffset = function() {
    return (this.getTimezoneOffset() > 0 ? "-" : "+")
        + String.leftPad(Math.abs(Math.floor(this.getTimezoneOffset() / 60)), 2, "0")
        + String.leftPad(this.getTimezoneOffset() % 60, 2, "0");
};

/**
 * Get the offset from GMT of the current date (equivalent to the format specifier 'P').
 * @return {String} 2-characters representing hours and 2-characters representing minutes
 * seperated by a colon and prefixed with + or - (e.g. '-06:00')
 */
Date.prototype.getGMTColonOffset = function() {
	return (this.getTimezoneOffset() > 0 ? "-" : "+")
		+ String.leftPad(Math.abs(Math.floor(this.getTimezoneOffset() / 60)), 2, "0")
		+ ":"
		+ String.leftPad(this.getTimezoneOffset() %60, 2, "0");
}

/**
 * Get the numeric day number of the year, adjusted for leap year.
 * @return {Number} 0 through 364 (365 in leap years)
 */
Date.prototype.getDayOfYear = function() {
    var num = 0;
    Date.daysInMonth[1] = this.isLeapYear() ? 29 : 28;
    for (var i = 0; i < this.getMonth(); ++i) {
        num += Date.daysInMonth[i];
    }
    return num + this.getDate() - 1;
};

/**
 * Get the string representation of the numeric week number of the year
 * (equivalent to the format specifier 'W').
 * @return {String} '00' through '52'
 */
Date.prototype.getWeekOfYear = function() {
    // Skip to Thursday of this week
    var now = this.getDayOfYear() + (4 - this.getDay());
    // Find the first Thursday of the year
    var jan1 = new Date(this.getFullYear(), 0, 1);
    var then = (7 - jan1.getDay() + 4);
    return String.leftPad(((now - then) / 7) + 1, 2, "0");
};

/**
 * Whether or not the current date is in a leap year.
 * @return {Boolean} True if the current date is in a leap year, else false
 */
Date.prototype.isLeapYear = function() {
    var year = this.getFullYear();
    return ((year & 3) == 0 && (year % 100 || (year % 400 == 0 && year)));
};

/**
 * Get the first day of the current month, adjusted for leap year.  The returned value
 * is the numeric day index within the week (0-6) which can be used in conjunction with
 * the {@link #monthNames} array to retrieve the textual day name.
 * Example:
 *<pre><code>
var dt = new Date('1/10/2007');
document.write(Date.dayNames[dt.getFirstDayOfMonth()]); //output: 'Monday'
</code></pre>
 * @return {Number} The day number (0-6)
 */
Date.prototype.getFirstDayOfMonth = function() {
    var day = (this.getDay() - (this.getDate() - 1)) % 7;
    return (day < 0) ? (day + 7) : day;
};

/**
 * Get the last day of the current month, adjusted for leap year.  The returned value
 * is the numeric day index within the week (0-6) which can be used in conjunction with
 * the {@link #monthNames} array to retrieve the textual day name.
 * Example:
 *<pre><code>
var dt = new Date('1/10/2007');
document.write(Date.dayNames[dt.getLastDayOfMonth()]); //output: 'Wednesday'
</code></pre>
 * @return {Number} The day number (0-6)
 */
Date.prototype.getLastDayOfMonth = function() {
    var day = (this.getDay() + (Date.daysInMonth[this.getMonth()] - this.getDate())) % 7;
    return (day < 0) ? (day + 7) : day;
};


/**
 * Get the first date of this date's month
 * @return {Date}
 */
Date.prototype.getFirstDateOfMonth = function() {
    return new Date(this.getFullYear(), this.getMonth(), 1);
};

/**
 * Get the last date of this date's month
 * @return {Date}
 */
Date.prototype.getLastDateOfMonth = function() {
    return new Date(this.getFullYear(), this.getMonth(), this.getDaysInMonth());
};
/**
 * Get the number of days in the current month, adjusted for leap year.
 * @return {Number} The number of days in the month
 */
Date.prototype.getDaysInMonth = function() {
    Date.daysInMonth[1] = this.isLeapYear() ? 29 : 28;
    return Date.daysInMonth[this.getMonth()];
};

/**
 * Get the English ordinal suffix of the current day (equivalent to the format specifier 'S').
 * @return {String} 'st, 'nd', 'rd' or 'th'
 */
Date.prototype.getSuffix = function() {
    switch (this.getDate()) {
        case 1:
        case 21:
        case 31:
            return "st";
        case 2:
        case 22:
            return "nd";
        case 3:
        case 23:
            return "rd";
        default:
            return "th";
    }
};

// private
Date.daysInMonth = [31,28,31,30,31,30,31,31,30,31,30,31];

/**
 * An array of textual month names.
 * Override these values for international dates, for example...
 * Date.monthNames = ['JanInYourLang', 'FebInYourLang', ...];
 * @type Array
 * @static
 */
Date.monthNames =
   ["January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"];

/**
 * An array of textual day names.
 * Override these values for international dates, for example...
 * Date.dayNames = ['SundayInYourLang', 'MondayInYourLang', ...];
 * @type Array
 * @static
 */
Date.dayNames =
   ["Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"];

// private
Date.y2kYear = 50;
// private
Date.monthNumbers = {
    Jan:0,
    Feb:1,
    Mar:2,
    Apr:3,
    May:4,
    Jun:5,
    Jul:6,
    Aug:7,
    Sep:8,
    Oct:9,
    Nov:10,
    Dec:11};

/**
 * Creates and returns a new Date instance with the exact same date value as the called instance.
 * Dates are copied and passed by reference, so if a copied date variable is modified later, the original
 * variable will also be changed.  When the intention is to create a new variable that will not
 * modify the original instance, you should create a clone.
 *
 * Example of correctly cloning a date:
 * <pre><code>
//wrong way:
var orig = new Date('10/1/2006');
var copy = orig;
copy.setDate(5);
document.write(orig);  //returns 'Thu Oct 05 2006'!

//correct way:
var orig = new Date('10/1/2006');
var copy = orig.clone();
copy.setDate(5);
document.write(orig);  //returns 'Thu Oct 01 2006'
</code></pre>
 * @return {Date} The new Date instance
 */
Date.prototype.clone = function() {
	return new Date(this.getTime());
};

/**
 * Clears any time information from this date
 @param {Boolean} clone true to create a clone of this date, clear the time and return it
 @return {Date} this or the clone
 */
Date.prototype.clearTime = function(clone){
    if(clone){
        return this.clone().clearTime();
    }
    this.setHours(0);
    this.setMinutes(0);
    this.setSeconds(0);
    this.setMilliseconds(0);
    return this;
};

// private
// safari setMonth is broken -- check that this is only donw once...
if(Roo.isSafari && typeof(Date.brokenSetMonth) == 'undefined'){
    Date.brokenSetMonth = Date.prototype.setMonth;
	Date.prototype.setMonth = function(num){
		if(num <= -1){
			var n = Math.ceil(-num);
			var back_year = Math.ceil(n/12);
			var month = (n % 12) ? 12 - n % 12 : 0 ;
			this.setFullYear(this.getFullYear() - back_year);
			return Date.brokenSetMonth.call(this, month);
		} else {
			return Date.brokenSetMonth.apply(this, arguments);
		}
	};
}

/** Date interval constant 
* @static 
* @type String */
Date.MILLI = "ms";
/** Date interval constant 
* @static 
* @type String */
Date.SECOND = "s";
/** Date interval constant 
* @static 
* @type String */
Date.MINUTE = "mi";
/** Date interval constant 
* @static 
* @type String */
Date.HOUR = "h";
/** Date interval constant 
* @static 
* @type String */
Date.DAY = "d";
/** Date interval constant 
* @static 
* @type String */
Date.MONTH = "mo";
/** Date interval constant 
* @static 
* @type String */
Date.YEAR = "y";

/**
 * Provides a convenient method of performing basic date arithmetic.  This method
 * does not modify the Date instance being called - it creates and returns
 * a new Date instance containing the resulting date value.
 *
 * Examples:
 * <pre><code>
//Basic usage:
var dt = new Date('10/29/2006').add(Date.DAY, 5);
document.write(dt); //returns 'Fri Oct 06 2006 00:00:00'

//Negative values will subtract correctly:
var dt2 = new Date('10/1/2006').add(Date.DAY, -5);
document.write(dt2); //returns 'Tue Sep 26 2006 00:00:00'

//You can even chain several calls together in one line!
var dt3 = new Date('10/1/2006').add(Date.DAY, 5).add(Date.HOUR, 8).add(Date.MINUTE, -30);
document.write(dt3); //returns 'Fri Oct 06 2006 07:30:00'
 </code></pre>
 *
 * @param {String} interval   A valid date interval enum value
 * @param {Number} value      The amount to add to the current date
 * @return {Date} The new Date instance
 */
Date.prototype.add = function(interval, value){
  var d = this.clone();
  if (!interval || value === 0) { return d; }
  switch(interval.toLowerCase()){
    case Date.MILLI:
      d.setMilliseconds(this.getMilliseconds() + value);
      break;
    case Date.SECOND:
      d.setSeconds(this.getSeconds() + value);
      break;
    case Date.MINUTE:
      d.setMinutes(this.getMinutes() + value);
      break;
    case Date.HOUR:
      d.setHours(this.getHours() + value);
      break;
    case Date.DAY:
      d.setDate(this.getDate() + value);
      break;
    case Date.MONTH:
      var day = this.getDate();
      if(day > 28){
          day = Math.min(day, this.getFirstDateOfMonth().add('mo', value).getLastDateOfMonth().getDate());
      }
      d.setDate(day);
      d.setMonth(this.getMonth() + value);
      break;
    case Date.YEAR:
      d.setFullYear(this.getFullYear() + value);
      break;
  }
  return d;
};
/**
 * @class Roo.lib.Dom
 * @licence LGPL
 * @static
 * 
 * Dom utils (from YIU afaik)
 *
 * 
 **/
Roo.lib.Dom = {
    /**
     * Get the view width
     * @param {Boolean} full True will get the full document, otherwise it's the view width
     * @return {Number} The width
     */
     
    getViewWidth : function(full) {
        return full ? this.getDocumentWidth() : this.getViewportWidth();
    },
    /**
     * Get the view height
     * @param {Boolean} full True will get the full document, otherwise it's the view height
     * @return {Number} The height
     */
    getViewHeight : function(full) {
        return full ? this.getDocumentHeight() : this.getViewportHeight();
    },
    /**
     * Get the Full Document height 
     * @return {Number} The height
     */
    getDocumentHeight: function() {
        var scrollHeight = (document.compatMode != "CSS1Compat") ? document.body.scrollHeight : document.documentElement.scrollHeight;
        return Math.max(scrollHeight, this.getViewportHeight());
    },
    /**
     * Get the Full Document width
     * @return {Number} The width
     */
    getDocumentWidth: function() {
        var scrollWidth = (document.compatMode != "CSS1Compat") ? document.body.scrollWidth : document.documentElement.scrollWidth;
        return Math.max(scrollWidth, this.getViewportWidth());
    },
    /**
     * Get the Window Viewport height
     * @return {Number} The height
     */
    getViewportHeight: function() {
        var height = self.innerHeight;
        var mode = document.compatMode;

        if ((mode || Roo.isIE) && !Roo.isOpera) {
            height = (mode == "CSS1Compat") ?
                     document.documentElement.clientHeight :
                     document.body.clientHeight;
        }

        return height;
    },
    /**
     * Get the Window Viewport width
     * @return {Number} The width
     */
    getViewportWidth: function() {
        var width = self.innerWidth;
        var mode = document.compatMode;

        if (mode || Roo.isIE) {
            width = (mode == "CSS1Compat") ?
                    document.documentElement.clientWidth :
                    document.body.clientWidth;
        }
        return width;
    },

    isAncestor : function(p, c) {
        p = Roo.getDom(p);
        c = Roo.getDom(c);
        if (!p || !c) {
            return false;
        }

        if (p.contains && !Roo.isSafari) {
            return p.contains(c);
        } else if (p.compareDocumentPosition) {
            return !!(p.compareDocumentPosition(c) & 16);
        } else {
            var parent = c.parentNode;
            while (parent) {
                if (parent == p) {
                    return true;
                }
                else if (!parent.tagName || parent.tagName.toUpperCase() == "HTML") {
                    return false;
                }
                parent = parent.parentNode;
            }
            return false;
        }
    },

    getRegion : function(el) {
        return Roo.lib.Region.getRegion(el);
    },

    getY : function(el) {
        return this.getXY(el)[1];
    },

    getX : function(el) {
        return this.getXY(el)[0];
    },

    getXY : function(el) {
        var p, pe, b, scroll, bd = document.body;
        el = Roo.getDom(el);
        var fly = Roo.lib.AnimBase.fly;
        if (el.getBoundingClientRect) {
            b = el.getBoundingClientRect();
            scroll = fly(document).getScroll();
            return [b.left + scroll.left, b.top + scroll.top];
        }
        var x = 0, y = 0;

        p = el;

        var hasAbsolute = fly(el).getStyle("position") == "absolute";

        while (p) {

            x += p.offsetLeft;
            y += p.offsetTop;

            if (!hasAbsolute && fly(p).getStyle("position") == "absolute") {
                hasAbsolute = true;
            }

            if (Roo.isGecko) {
                pe = fly(p);

                var bt = parseInt(pe.getStyle("borderTopWidth"), 10) || 0;
                var bl = parseInt(pe.getStyle("borderLeftWidth"), 10) || 0;


                x += bl;
                y += bt;


                if (p != el && pe.getStyle('overflow') != 'visible') {
                    x += bl;
                    y += bt;
                }
            }
            p = p.offsetParent;
        }

        if (Roo.isSafari && hasAbsolute) {
            x -= bd.offsetLeft;
            y -= bd.offsetTop;
        }

        if (Roo.isGecko && !hasAbsolute) {
            var dbd = fly(bd);
            x += parseInt(dbd.getStyle("borderLeftWidth"), 10) || 0;
            y += parseInt(dbd.getStyle("borderTopWidth"), 10) || 0;
        }

        p = el.parentNode;
        while (p && p != bd) {
            if (!Roo.isOpera || (p.tagName != 'TR' && fly(p).getStyle("display") != "inline")) {
                x -= p.scrollLeft;
                y -= p.scrollTop;
            }
            p = p.parentNode;
        }
        return [x, y];
    },
 
  


    setXY : function(el, xy) {
        el = Roo.fly(el, '_setXY');
        el.position();
        var pts = el.translatePoints(xy);
        if (xy[0] !== false) {
            el.dom.style.left = pts.left + "px";
        }
        if (xy[1] !== false) {
            el.dom.style.top = pts.top + "px";
        }
    },

    setX : function(el, x) {
        this.setXY(el, [x, false]);
    },

    setY : function(el, y) {
        this.setXY(el, [false, y]);
    }
};
/*
 * Portions of this file are based on pieces of Yahoo User Interface Library
 * Copyright (c) 2007, Yahoo! Inc. All rights reserved.
 * YUI licensed under the BSD License:
 * http://developer.yahoo.net/yui/license.txt
 * <script type="text/javascript">
 *
 */

Roo.lib.Event = function() {
    var loadComplete = false;
    var listeners = [];
    var unloadListeners = [];
    var retryCount = 0;
    var onAvailStack = [];
    var counter = 0;
    var lastError = null;

    return {
        POLL_RETRYS: 200,
        POLL_INTERVAL: 20,
        EL: 0,
        TYPE: 1,
        FN: 2,
        WFN: 3,
        OBJ: 3,
        ADJ_SCOPE: 4,
        _interval: null,

        startInterval: function() {
            if (!this._interval) {
                var self = this;
                var callback = function() {
                    self._tryPreloadAttach();
                };
                this._interval = setInterval(callback, this.POLL_INTERVAL);

            }
        },

        onAvailable: function(p_id, p_fn, p_obj, p_override) {
            onAvailStack.push({ id:         p_id,
                fn:         p_fn,
                obj:        p_obj,
                override:   p_override,
                checkReady: false    });

            retryCount = this.POLL_RETRYS;
            this.startInterval();
        },


        addListener: function(el, eventName, fn) {
            el = Roo.getDom(el);
            if (!el || !fn) {
                return false;
            }

            if ("unload" == eventName) {
                unloadListeners[unloadListeners.length] =
                [el, eventName, fn];
                return true;
            }

            var wrappedFn = function(e) {
                return fn(Roo.lib.Event.getEvent(e));
            };

            var li = [el, eventName, fn, wrappedFn];

            var index = listeners.length;
            listeners[index] = li;

            this.doAdd(el, eventName, wrappedFn, false);
            return true;

        },


        removeListener: function(el, eventName, fn) {
            var i, len;

            el = Roo.getDom(el);

            if(!fn) {
                return this.purgeElement(el, false, eventName);
            }


            if ("unload" == eventName) {

                for (i = 0,len = unloadListeners.length; i < len; i++) {
                    var li = unloadListeners[i];
                    if (li &&
                        li[0] == el &&
                        li[1] == eventName &&
                        li[2] == fn) {
                        unloadListeners.splice(i, 1);
                        return true;
                    }
                }

                return false;
            }

            var cacheItem = null;


            var index = arguments[3];

            if ("undefined" == typeof index) {
                index = this._getCacheIndex(el, eventName, fn);
            }

            if (index >= 0) {
                cacheItem = listeners[index];
            }

            if (!el || !cacheItem) {
                return false;
            }

            this.doRemove(el, eventName, cacheItem[this.WFN], false);

            delete listeners[index][this.WFN];
            delete listeners[index][this.FN];
            listeners.splice(index, 1);

            return true;

        },


        getTarget: function(ev, resolveTextNode) {
            ev = ev.browserEvent || ev;
            ev = ev.touches ? (ev.touches[0] || ev.changedTouches[0] || ev )  : ev;
            var t = ev.target || ev.srcElement;
            return this.resolveTextNode(t);
        },


        resolveTextNode: function(node) {
            if (Roo.isSafari && node && 3 == node.nodeType) {
                return node.parentNode;
            } else {
                return node;
            }
        },


        getPageX: function(ev) {
            ev = ev.browserEvent || ev;
            ev = ev.touches ? (ev.touches[0] || ev.changedTouches[0] || ev )  : ev;
            var x = ev.pageX;
            if (!x && 0 !== x) {
                x = ev.clientX || 0;

                if (Roo.isIE) {
                    x += this.getScroll()[1];
                }
            }

            return x;
        },


        getPageY: function(ev) {
            ev = ev.browserEvent || ev;
            ev = ev.touches ? (ev.touches[0] || ev.changedTouches[0] || ev )  : ev;
            var y = ev.pageY;
            if (!y && 0 !== y) {
                y = ev.clientY || 0;

                if (Roo.isIE) {
                    y += this.getScroll()[0];
                }
            }


            return y;
        },


        getXY: function(ev) {
            ev = ev.browserEvent || ev;
            ev = ev.touches ? (ev.touches[0] || ev.changedTouches[0] || ev )  : ev;
            return [this.getPageX(ev), this.getPageY(ev)];
        },


        getRelatedTarget: function(ev) {
            ev = ev.browserEvent || ev;
            ev = ev.touches ? (ev.touches[0] || ev.changedTouches[0] || ev )  : ev;
            var t = ev.relatedTarget;
            if (!t) {
                if (ev.type == "mouseout") {
                    t = ev.toElement;
                } else if (ev.type == "mouseover") {
                    t = ev.fromElement;
                }
            }

            return this.resolveTextNode(t);
        },


        getTime: function(ev) {
            ev = ev.browserEvent || ev;
            ev = ev.touches ? (ev.touches[0] || ev.changedTouches[0] || ev )  : ev;
            if (!ev.time) {
                var t = new Date().getTime();
                try {
                    ev.time = t;
                } catch(ex) {
                    this.lastError = ex;
                    return t;
                }
            }

            return ev.time;
        },


        stopEvent: function(ev) {
            this.stopPropagation(ev);
            this.preventDefault(ev);
        },


        stopPropagation: function(ev) {
            ev = ev.browserEvent || ev;
            if (ev.stopPropagation) {
                ev.stopPropagation();
            } else {
                ev.cancelBubble = true;
            }
        },


        preventDefault: function(ev) {
            ev = ev.browserEvent || ev;
            if(ev.preventDefault) {
                ev.preventDefault();
            } else {
                ev.returnValue = false;
            }
        },


        getEvent: function(e) {
            var ev = e || window.event;
            if (!ev) {
                var c = this.getEvent.caller;
                while (c) {
                    ev = c.arguments[0];
                    if (ev && Event == ev.constructor) {
                        break;
                    }
                    c = c.caller;
                }
            }
            return ev;
        },


        getCharCode: function(ev) {
            ev = ev.browserEvent || ev;
            return ev.charCode || ev.keyCode || 0;
        },


        _getCacheIndex: function(el, eventName, fn) {
            for (var i = 0,len = listeners.length; i < len; ++i) {
                var li = listeners[i];
                if (li &&
                    li[this.FN] == fn &&
                    li[this.EL] == el &&
                    li[this.TYPE] == eventName) {
                    return i;
                }
            }

            return -1;
        },


        elCache: {},


        getEl: function(id) {
            return document.getElementById(id);
        },


        clearCache: function() {
        },


        _load: function(e) {
            loadComplete = true;
            var EU = Roo.lib.Event;


            if (Roo.isIE) {
                EU.doRemove(window, "load", EU._load);
            }
        },


        _tryPreloadAttach: function() {

            if (this.locked) {
                return false;
            }

            this.locked = true;


            var tryAgain = !loadComplete;
            if (!tryAgain) {
                tryAgain = (retryCount > 0);
            }


            var notAvail = [];
            for (var i = 0,len = onAvailStack.length; i < len; ++i) {
                var item = onAvailStack[i];
                if (item) {
                    var el = this.getEl(item.id);

                    if (el) {
                        if (!item.checkReady ||
                            loadComplete ||
                            el.nextSibling ||
                            (document && document.body)) {

                            var scope = el;
                            if (item.override) {
                                if (item.override === true) {
                                    scope = item.obj;
                                } else {
                                    scope = item.override;
                                }
                            }
                            item.fn.call(scope, item.obj);
                            onAvailStack[i] = null;
                        }
                    } else {
                        notAvail.push(item);
                    }
                }
            }

            retryCount = (notAvail.length === 0) ? 0 : retryCount - 1;

            if (tryAgain) {

                this.startInterval();
            } else {
                clearInterval(this._interval);
                this._interval = null;
            }

            this.locked = false;

            return true;

        },


        purgeElement: function(el, recurse, eventName) {
            var elListeners = this.getListeners(el, eventName);
            if (elListeners) {
                for (var i = 0,len = elListeners.length; i < len; ++i) {
                    var l = elListeners[i];
                    this.removeListener(el, l.type, l.fn);
                }
            }

            if (recurse && el && el.childNodes) {
                for (i = 0,len = el.childNodes.length; i < len; ++i) {
                    this.purgeElement(el.childNodes[i], recurse, eventName);
                }
            }
        },


        getListeners: function(el, eventName) {
            var results = [], searchLists;
            if (!eventName) {
                searchLists = [listeners, unloadListeners];
            } else if (eventName == "unload") {
                searchLists = [unloadListeners];
            } else {
                searchLists = [listeners];
            }

            for (var j = 0; j < searchLists.length; ++j) {
                var searchList = searchLists[j];
                if (searchList && searchList.length > 0) {
                    for (var i = 0,len = searchList.length; i < len; ++i) {
                        var l = searchList[i];
                        if (l && l[this.EL] === el &&
                            (!eventName || eventName === l[this.TYPE])) {
                            results.push({
                                type:   l[this.TYPE],
                                fn:     l[this.FN],
                                obj:    l[this.OBJ],
                                adjust: l[this.ADJ_SCOPE],
                                index:  i
                            });
                        }
                    }
                }
            }

            return (results.length) ? results : null;
        },


        _unload: function(e) {

            var EU = Roo.lib.Event, i, j, l, len, index;

            for (i = 0,len = unloadListeners.length; i < len; ++i) {
                l = unloadListeners[i];
                if (l) {
                    var scope = window;
                    if (l[EU.ADJ_SCOPE]) {
                        if (l[EU.ADJ_SCOPE] === true) {
                            scope = l[EU.OBJ];
                        } else {
                            scope = l[EU.ADJ_SCOPE];
                        }
                    }
                    l[EU.FN].call(scope, EU.getEvent(e), l[EU.OBJ]);
                    unloadListeners[i] = null;
                    l = null;
                    scope = null;
                }
            }

            unloadListeners = null;

            if (listeners && listeners.length > 0) {
                j = listeners.length;
                while (j) {
                    index = j - 1;
                    l = listeners[index];
                    if (l) {
                        EU.removeListener(l[EU.EL], l[EU.TYPE],
                                l[EU.FN], index);
                    }
                    j = j - 1;
                }
                l = null;

                EU.clearCache();
            }

            EU.doRemove(window, "unload", EU._unload);

        },


        getScroll: function() {
            var dd = document.documentElement, db = document.body;
            if (dd && (dd.scrollTop || dd.scrollLeft)) {
                return [dd.scrollTop, dd.scrollLeft];
            } else if (db) {
                return [db.scrollTop, db.scrollLeft];
            } else {
                return [0, 0];
            }
        },


        doAdd: function () {
            if (window.addEventListener) {
                return function(el, eventName, fn, capture) {
                    el.addEventListener(eventName, fn, (capture));
                };
            } else if (window.attachEvent) {
                return function(el, eventName, fn, capture) {
                    el.attachEvent("on" + eventName, fn);
                };
            } else {
                return function() {
                };
            }
        }(),


        doRemove: function() {
            if (window.removeEventListener) {
                return function (el, eventName, fn, capture) {
                    el.removeEventListener(eventName, fn, (capture));
                };
            } else if (window.detachEvent) {
                return function (el, eventName, fn) {
                    el.detachEvent("on" + eventName, fn);
                };
            } else {
                return function() {
                };
            }
        }()
    };
    
}();
(function() {     
   
    var E = Roo.lib.Event;
    E.on = E.addListener;
    E.un = E.removeListener;

    if (document && document.body) {
        E._load();
    } else {
        E.doAdd(window, "load", E._load);
    }
    E.doAdd(window, "unload", E._unload);
    E._tryPreloadAttach();
})();

 

(function() {
    /**
     * @class Roo.lib.Ajax
     *
     * provide a simple Ajax request utility functions
     * 
     * Portions of this file are based on pieces of Yahoo User Interface Library
    * Copyright (c) 2007, Yahoo! Inc. All rights reserved.
    * YUI licensed under the BSD License:
    * http://developer.yahoo.net/yui/license.txt
    * <script type="text/javascript">
    *
     *
     */
    Roo.lib.Ajax = {
        /**
         * @static 
         */
        request : function(method, uri, cb, data, options) {
            if(options){
                var hs = options.headers;
                if(hs){
                    for(var h in hs){
                        if(hs.hasOwnProperty(h)){
                            this.initHeader(h, hs[h], false);
                        }
                    }
                }
                if(options.xmlData){
                    this.initHeader('Content-Type', 'text/xml', false);
                    method = 'POST';
                    data = options.xmlData;
                }
            }

            return this.asyncRequest(method, uri, cb, data);
        },
        /**
         * serialize a form
         *
         * @static
         * @param {DomForm} form element
         * @return {String} urlencode form output.
         */
        serializeForm : function(form, include_disabled) {
            
            include_disabled = typeof(include_disabled) == 'undefined' ? false : include_disabled;

            if(typeof form == 'string') {
                form = (document.getElementById(form) || document.forms[form]);
            }

            var el, name, val, disabled, data = '', hasSubmit = false;
            for (var i = 0; i < form.elements.length; i++) {
                el = form.elements[i];
                disabled = include_disabled ? false : form.elements[i].disabled;
                name = form.elements[i].name;
                val = form.elements[i].value;

                if (!disabled && name){
                    switch (el.type)
                            {
                        case 'select-one':
                        case 'select-multiple':
                            for (var j = 0; j < el.options.length; j++) {
                                if (el.options[j].selected) {
                                    if (Roo.isIE) {
                                        data += Roo.encodeURIComponent(name) + '=' + Roo.encodeURIComponent(el.options[j].attributes['value'].specified ? el.options[j].value : el.options[j].text) + '&';
                                    }
                                    else {
                                        data += Roo.encodeURIComponent(name) + '=' + Roo.encodeURIComponent(el.options[j].hasAttribute('value') ? el.options[j].value : el.options[j].text) + '&';
                                    }
                                }
                            }
                            break;
                        case 'radio':
                        case 'checkbox':
                            if (el.checked) {
                                data += Roo.encodeURIComponent(name) + '=' + Roo.encodeURIComponent(val) + '&';
                            }
                            break;
                        case 'file':

                        case undefined:

                        case 'reset':

                        case 'button':

                            break;
                        case 'submit':
                            if(hasSubmit == false) {
                                data += Roo.encodeURIComponent(name) + '=' + Roo.encodeURIComponent(val) + '&';
                                hasSubmit = true;
                            }
                            break;
                        default:
                            data += Roo.encodeURIComponent(name) + '=' + Roo.encodeURIComponent(val) + '&';
                            break;
                    }
                }
            }
            data = data.substr(0, data.length - 1);
            return data;
        },

        headers:{},

        hasHeaders:false,

        useDefaultHeader:true,

        defaultPostHeader:'application/x-www-form-urlencoded',

        useDefaultXhrHeader:true,

        defaultXhrHeader:'XMLHttpRequest',

        hasDefaultHeaders:true,

        defaultHeaders:{},

        poll:{},

        timeout:{},

        pollInterval:50,

        transactionId:0,

        setProgId:function(id)
        {
            this.activeX.unshift(id);
        },

        setDefaultPostHeader:function(b)
        {
            this.useDefaultHeader = b;
        },

        setDefaultXhrHeader:function(b)
        {
            this.useDefaultXhrHeader = b;
        },

        setPollingInterval:function(i)
        {
            if (typeof i == 'number' && isFinite(i)) {
                this.pollInterval = i;
            }
        },

        createXhrObject:function(transactionId)
        {
            var obj,http;
            try
            {

                http = new XMLHttpRequest();

                obj = { conn:http, tId:transactionId };
            }
            catch(e)
            {
                for (var i = 0; i < this.activeX.length; ++i) {
                    try
                    {

                        http = new ActiveXObject(this.activeX[i]);

                        obj = { conn:http, tId:transactionId };
                        break;
                    }
                    catch(e) {
                    }
                }
            }
            finally
            {
                return obj;
            }
        },

        getConnectionObject:function()
        {
            var o;
            var tId = this.transactionId;

            try
            {
                o = this.createXhrObject(tId);
                if (o) {
                    this.transactionId++;
                }
            }
            catch(e) {
            }
            finally
            {
                return o;
            }
        },

        asyncRequest:function(method, uri, callback, postData)
        {
            var o = this.getConnectionObject();

            if (!o) {
                return null;
            }
            else {
                o.conn.open(method, uri, true);

                if (this.useDefaultXhrHeader) {
                    if (!this.defaultHeaders['X-Requested-With']) {
                        this.initHeader('X-Requested-With', this.defaultXhrHeader, true);
                    }
                }

                if(postData && this.useDefaultHeader){
                    this.initHeader('Content-Type', this.defaultPostHeader);
                }

                 if (this.hasDefaultHeaders || this.hasHeaders) {
                    this.setHeader(o);
                }

                this.handleReadyState(o, callback);
                o.conn.send(postData || null);

                return o;
            }
        },

        handleReadyState:function(o, callback)
        {
            var oConn = this;

            if (callback && callback.timeout) {
                
                this.timeout[o.tId] = window.setTimeout(function() {
                    oConn.abort(o, callback, true);
                }, callback.timeout);
            }

            this.poll[o.tId] = window.setInterval(
                    function() {
                        if (o.conn && o.conn.readyState == 4) {
                            window.clearInterval(oConn.poll[o.tId]);
                            delete oConn.poll[o.tId];

                            if(callback && callback.timeout) {
                                window.clearTimeout(oConn.timeout[o.tId]);
                                delete oConn.timeout[o.tId];
                            }

                            oConn.handleTransactionResponse(o, callback);
                        }
                    }
                    , this.pollInterval);
        },

        handleTransactionResponse:function(o, callback, isAbort)
        {

            if (!callback) {
                this.releaseObject(o);
                return;
            }

            var httpStatus, responseObject;

            try
            {
                if (o.conn.status !== undefined && o.conn.status != 0) {
                    httpStatus = o.conn.status;
                }
                else {
                    httpStatus = 13030;
                }
            }
            catch(e) {


                httpStatus = 13030;
            }

            if (httpStatus >= 200 && httpStatus < 300) {
                responseObject = this.createResponseObject(o, callback.argument);
                if (callback.success) {
                    if (!callback.scope) {
                        callback.success(responseObject);
                    }
                    else {


                        callback.success.apply(callback.scope, [responseObject]);
                    }
                }
            }
            else {
                switch (httpStatus) {

                    case 12002:
                    case 12029:
                    case 12030:
                    case 12031:
                    case 12152:
                    case 13030:
                        responseObject = this.createExceptionObject(o.tId, callback.argument, (isAbort ? isAbort : false));
                        if (callback.failure) {
                            if (!callback.scope) {
                                callback.failure(responseObject);
                            }
                            else {
                                callback.failure.apply(callback.scope, [responseObject]);
                            }
                        }
                        break;
                    default:
                        responseObject = this.createResponseObject(o, callback.argument);
                        if (callback.failure) {
                            if (!callback.scope) {
                                callback.failure(responseObject);
                            }
                            else {
                                callback.failure.apply(callback.scope, [responseObject]);
                            }
                        }
                }
            }

            this.releaseObject(o);
            responseObject = null;
        },

        createResponseObject:function(o, callbackArg)
        {
            var obj = {};
            var headerObj = {};

            try
            {
                var headerStr = o.conn.getAllResponseHeaders();
                var header = headerStr.split('\n');
                for (var i = 0; i < header.length; i++) {
                    var delimitPos = header[i].indexOf(':');
                    if (delimitPos != -1) {
                        headerObj[header[i].substring(0, delimitPos)] = header[i].substring(delimitPos + 2);
                    }
                }
            }
            catch(e) {
            }

            obj.tId = o.tId;
            obj.status = o.conn.status;
            obj.statusText = o.conn.statusText;
            obj.getResponseHeader = headerObj;
            obj.getAllResponseHeaders = headerStr;
            obj.responseText = o.conn.responseText;
            obj.responseXML = o.conn.responseXML;

            if (typeof callbackArg !== undefined) {
                obj.argument = callbackArg;
            }

            return obj;
        },

        createExceptionObject:function(tId, callbackArg, isAbort)
        {
            var COMM_CODE = 0;
            var COMM_ERROR = 'communication failure';
            var ABORT_CODE = -1;
            var ABORT_ERROR = 'transaction aborted';

            var obj = {};

            obj.tId = tId;
            if (isAbort) {
                obj.status = ABORT_CODE;
                obj.statusText = ABORT_ERROR;
            }
            else {
                obj.status = COMM_CODE;
                obj.statusText = COMM_ERROR;
            }

            if (callbackArg) {
                obj.argument = callbackArg;
            }

            return obj;
        },

        initHeader:function(label, value, isDefault)
        {
            var headerObj = (isDefault) ? this.defaultHeaders : this.headers;

            if (headerObj[label] === undefined) {
                headerObj[label] = value;
            }
            else {


                headerObj[label] = value + "," + headerObj[label];
            }

            if (isDefault) {
                this.hasDefaultHeaders = true;
            }
            else {
                this.hasHeaders = true;
            }
        },


        setHeader:function(o)
        {
            if (this.hasDefaultHeaders) {
                for (var prop in this.defaultHeaders) {
                    if (this.defaultHeaders.hasOwnProperty(prop)) {
                        o.conn.setRequestHeader(prop, this.defaultHeaders[prop]);
                    }
                }
            }

            if (this.hasHeaders) {
                for (var prop in this.headers) {
                    if (this.headers.hasOwnProperty(prop)) {
                        o.conn.setRequestHeader(prop, this.headers[prop]);
                    }
                }
                this.headers = {};
                this.hasHeaders = false;
            }
        },

        resetDefaultHeaders:function() {
            delete this.defaultHeaders;
            this.defaultHeaders = {};
            this.hasDefaultHeaders = false;
        },

        abort:function(o, callback, isTimeout)
        {
            if(this.isCallInProgress(o)) {
                o.conn.abort();
                window.clearInterval(this.poll[o.tId]);
                delete this.poll[o.tId];
                if (isTimeout) {
                    delete this.timeout[o.tId];
                }

                this.handleTransactionResponse(o, callback, true);

                return true;
            }
            else {
                return false;
            }
        },


        isCallInProgress:function(o)
        {
            if (o && o.conn) {
                return o.conn.readyState != 4 && o.conn.readyState != 0;
            }
            else {

                return false;
            }
        },


        releaseObject:function(o)
        {

            o.conn = null;

            o = null;
        },

        activeX:[
        'MSXML2.XMLHTTP.3.0',
        'MSXML2.XMLHTTP',
        'Microsoft.XMLHTTP'
        ]


    };
})();/*
 * Portions of this file are based on pieces of Yahoo User Interface Library
 * Copyright (c) 2007, Yahoo! Inc. All rights reserved.
 * YUI licensed under the BSD License:
 * http://developer.yahoo.net/yui/license.txt
 * <script type="text/javascript">
 *
 */

Roo.lib.Region = function(t, r, b, l) {
    this.top = t;
    this[1] = t;
    this.right = r;
    this.bottom = b;
    this.left = l;
    this[0] = l;
};


Roo.lib.Region.prototype = {
    contains : function(region) {
        return ( region.left >= this.left &&
                 region.right <= this.right &&
                 region.top >= this.top &&
                 region.bottom <= this.bottom    );

    },

    getArea : function() {
        return ( (this.bottom - this.top) * (this.right - this.left) );
    },

    intersect : function(region) {
        var t = Math.max(this.top, region.top);
        var r = Math.min(this.right, region.right);
        var b = Math.min(this.bottom, region.bottom);
        var l = Math.max(this.left, region.left);

        if (b >= t && r >= l) {
            return new Roo.lib.Region(t, r, b, l);
        } else {
            return null;
        }
    },
    union : function(region) {
        var t = Math.min(this.top, region.top);
        var r = Math.max(this.right, region.right);
        var b = Math.max(this.bottom, region.bottom);
        var l = Math.min(this.left, region.left);

        return new Roo.lib.Region(t, r, b, l);
    },

    adjust : function(t, l, b, r) {
        this.top += t;
        this.left += l;
        this.right += r;
        this.bottom += b;
        return this;
    }
};

Roo.lib.Region.getRegion = function(el) {
    var p = Roo.lib.Dom.getXY(el);

    var t = p[1];
    var r = p[0] + el.offsetWidth;
    var b = p[1] + el.offsetHeight;
    var l = p[0];

    return new Roo.lib.Region(t, r, b, l);
};
/*
 * Portions of this file are based on pieces of Yahoo User Interface Library
 * Copyright (c) 2007, Yahoo! Inc. All rights reserved.
 * YUI licensed under the BSD License:
 * http://developer.yahoo.net/yui/license.txt
 * <script type="text/javascript">
 *
 */
//@@dep Roo.lib.Region


Roo.lib.Point = function(x, y) {
    if (x instanceof Array) {
        y = x[1];
        x = x[0];
    }
    this.x = this.right = this.left = this[0] = x;
    this.y = this.top = this.bottom = this[1] = y;
};

Roo.lib.Point.prototype = new Roo.lib.Region();
/*
 * Portions of this file are based on pieces of Yahoo User Interface Library
 * Copyright (c) 2007, Yahoo! Inc. All rights reserved.
 * YUI licensed under the BSD License:
 * http://developer.yahoo.net/yui/license.txt
 * <script type="text/javascript">
 *
 */
 
(function() {   

    Roo.lib.Anim = {
        scroll : function(el, args, duration, easing, cb, scope) {
            this.run(el, args, duration, easing, cb, scope, Roo.lib.Scroll);
        },

        motion : function(el, args, duration, easing, cb, scope) {
            this.run(el, args, duration, easing, cb, scope, Roo.lib.Motion);
        },

        color : function(el, args, duration, easing, cb, scope) {
            this.run(el, args, duration, easing, cb, scope, Roo.lib.ColorAnim);
        },

        run : function(el, args, duration, easing, cb, scope, type) {
            type = type || Roo.lib.AnimBase;
            if (typeof easing == "string") {
                easing = Roo.lib.Easing[easing];
            }
            var anim = new type(el, args, duration, easing);
            anim.animateX(function() {
                Roo.callback(cb, scope);
            });
            return anim;
        }
    };
})();/*
 * Portions of this file are based on pieces of Yahoo User Interface Library
 * Copyright (c) 2007, Yahoo! Inc. All rights reserved.
 * YUI licensed under the BSD License:
 * http://developer.yahoo.net/yui/license.txt
 * <script type="text/javascript">
 *
 */

(function() {    
    var libFlyweight;
    
    function fly(el) {
        if (!libFlyweight) {
            libFlyweight = new Roo.Element.Flyweight();
        }
        libFlyweight.dom = el;
        return libFlyweight;
    }

    // since this uses fly! - it cant be in DOM (which does not have fly yet..)
    
   
    
    Roo.lib.AnimBase = function(el, attributes, duration, method) {
        if (el) {
            this.init(el, attributes, duration, method);
        }
    };

    Roo.lib.AnimBase.fly = fly;
    
    
    
    Roo.lib.AnimBase.prototype = {

        toString: function() {
            var el = this.getEl();
            var id = el.id || el.tagName;
            return ("Anim " + id);
        },

        patterns: {
            noNegatives:        /width|height|opacity|padding/i,
            offsetAttribute:  /^((width|height)|(top|left))$/,
            defaultUnit:        /width|height|top$|bottom$|left$|right$/i,
            offsetUnit:         /\d+(em|%|en|ex|pt|in|cm|mm|pc)$/i
        },


        doMethod: function(attr, start, end) {
            return this.method(this.currentFrame, start, end - start, this.totalFrames);
        },


        setAttribute: function(attr, val, unit) {
            if (this.patterns.noNegatives.test(attr)) {
                val = (val > 0) ? val : 0;
            }

            Roo.fly(this.getEl(), '_anim').setStyle(attr, val + unit);
        },


        getAttribute: function(attr) {
            var el = this.getEl();
            var val = fly(el).getStyle(attr);

            if (val !== 'auto' && !this.patterns.offsetUnit.test(val)) {
                return parseFloat(val);
            }

            var a = this.patterns.offsetAttribute.exec(attr) || [];
            var pos = !!( a[3] );
            var box = !!( a[2] );


            if (box || (fly(el).getStyle('position') == 'absolute' && pos)) {
                val = el['offset' + a[0].charAt(0).toUpperCase() + a[0].substr(1)];
            } else {
                val = 0;
            }

            return val;
        },


        getDefaultUnit: function(attr) {
            if (this.patterns.defaultUnit.test(attr)) {
                return 'px';
            }

            return '';
        },

        animateX : function(callback, scope) {
            var f = function() {
                this.onComplete.removeListener(f);
                if (typeof callback == "function") {
                    callback.call(scope || this, this);
                }
            };
            this.onComplete.addListener(f, this);
            this.animate();
        },


        setRuntimeAttribute: function(attr) {
            var start;
            var end;
            var attributes = this.attributes;

            this.runtimeAttributes[attr] = {};

            var isset = function(prop) {
                return (typeof prop !== 'undefined');
            };

            if (!isset(attributes[attr]['to']) && !isset(attributes[attr]['by'])) {
                return false;
            }

            start = ( isset(attributes[attr]['from']) ) ? attributes[attr]['from'] : this.getAttribute(attr);


            if (isset(attributes[attr]['to'])) {
                end = attributes[attr]['to'];
            } else if (isset(attributes[attr]['by'])) {
                if (start.constructor == Array) {
                    end = [];
                    for (var i = 0, len = start.length; i < len; ++i) {
                        end[i] = start[i] + attributes[attr]['by'][i];
                    }
                } else {
                    end = start + attributes[attr]['by'];
                }
            }

            this.runtimeAttributes[attr].start = start;
            this.runtimeAttributes[attr].end = end;


            this.runtimeAttributes[attr].unit = ( isset(attributes[attr].unit) ) ? attributes[attr]['unit'] : this.getDefaultUnit(attr);
        },


        init: function(el, attributes, duration, method) {

            var isAnimated = false;


            var startTime = null;


            var actualFrames = 0;


            el = Roo.getDom(el);


            this.attributes = attributes || {};


            this.duration = duration || 1;


            this.method = method || Roo.lib.Easing.easeNone;


            this.useSeconds = true;


            this.currentFrame = 0;


            this.totalFrames = Roo.lib.AnimMgr.fps;


            this.getEl = function() {
                return el;
            };


            this.isAnimated = function() {
                return isAnimated;
            };


            this.getStartTime = function() {
                return startTime;
            };

            this.runtimeAttributes = {};


            this.animate = function() {
                if (this.isAnimated()) {
                    return false;
                }

                this.currentFrame = 0;

                this.totalFrames = ( this.useSeconds ) ? Math.ceil(Roo.lib.AnimMgr.fps * this.duration) : this.duration;

                Roo.lib.AnimMgr.registerElement(this);
            };


            this.stop = function(finish) {
                if (finish) {
                    this.currentFrame = this.totalFrames;
                    this._onTween.fire();
                }
                Roo.lib.AnimMgr.stop(this);
            };

            var onStart = function() {
                this.onStart.fire();

                this.runtimeAttributes = {};
                for (var attr in this.attributes) {
                    this.setRuntimeAttribute(attr);
                }

                isAnimated = true;
                actualFrames = 0;
                startTime = new Date();
            };


            var onTween = function() {
                var data = {
                    duration: new Date() - this.getStartTime(),
                    currentFrame: this.currentFrame
                };

                data.toString = function() {
                    return (
                            'duration: ' + data.duration +
                            ', currentFrame: ' + data.currentFrame
                            );
                };

                this.onTween.fire(data);

                var runtimeAttributes = this.runtimeAttributes;

                for (var attr in runtimeAttributes) {
                    this.setAttribute(attr, this.doMethod(attr, runtimeAttributes[attr].start, runtimeAttributes[attr].end), runtimeAttributes[attr].unit);
                }

                actualFrames += 1;
            };

            var onComplete = function() {
                var actual_duration = (new Date() - startTime) / 1000 ;

                var data = {
                    duration: actual_duration,
                    frames: actualFrames,
                    fps: actualFrames / actual_duration
                };

                data.toString = function() {
                    return (
                            'duration: ' + data.duration +
                            ', frames: ' + data.frames +
                            ', fps: ' + data.fps
                            );
                };

                isAnimated = false;
                actualFrames = 0;
                this.onComplete.fire(data);
            };


            this._onStart = new Roo.util.Event(this);
            this.onStart = new Roo.util.Event(this);
            this.onTween = new Roo.util.Event(this);
            this._onTween = new Roo.util.Event(this);
            this.onComplete = new Roo.util.Event(this);
            this._onComplete = new Roo.util.Event(this);
            this._onStart.addListener(onStart);
            this._onTween.addListener(onTween);
            this._onComplete.addListener(onComplete);
        }
    };
})();
/*
 * Portions of this file are based on pieces of Yahoo User Interface Library
 * Copyright (c) 2007, Yahoo! Inc. All rights reserved.
 * YUI licensed under the BSD License:
 * http://developer.yahoo.net/yui/license.txt
 * <script type="text/javascript">
 *
 */

Roo.lib.AnimMgr = new function() {

    var thread = null;


    var queue = [];


    var tweenCount = 0;


    this.fps = 1000;


    this.delay = 1;


    this.registerElement = function(tween) {
        queue[queue.length] = tween;
        tweenCount += 1;
        tween._onStart.fire();
        this.start();
    };


    this.unRegister = function(tween, index) {
        tween._onComplete.fire();
        index = index || getIndex(tween);
        if (index != -1) {
            queue.splice(index, 1);
        }

        tweenCount -= 1;
        if (tweenCount <= 0) {
            this.stop();
        }
    };


    this.start = function() {
        if (thread === null) {
            thread = setInterval(this.run, this.delay);
        }
    };


    this.stop = function(tween) {
        if (!tween) {
            clearInterval(thread);

            for (var i = 0, len = queue.length; i < len; ++i) {
                if (queue[0].isAnimated()) {
                    this.unRegister(queue[0], 0);
                }
            }

            queue = [];
            thread = null;
            tweenCount = 0;
        }
        else {
            this.unRegister(tween);
        }
    };


    this.run = function() {
        for (var i = 0, len = queue.length; i < len; ++i) {
            var tween = queue[i];
            if (!tween || !tween.isAnimated()) {
                continue;
            }

            if (tween.currentFrame < tween.totalFrames || tween.totalFrames === null)
            {
                tween.currentFrame += 1;

                if (tween.useSeconds) {
                    correctFrame(tween);
                }
                tween._onTween.fire();
            }
            else {
                Roo.lib.AnimMgr.stop(tween, i);
            }
        }
    };

    var getIndex = function(anim) {
        for (var i = 0, len = queue.length; i < len; ++i) {
            if (queue[i] == anim) {
                return i;
            }
        }
        return -1;
    };


    var correctFrame = function(tween) {
        var frames = tween.totalFrames;
        var frame = tween.currentFrame;
        var expected = (tween.currentFrame * tween.duration * 1000 / tween.totalFrames);
        var elapsed = (new Date() - tween.getStartTime());
        var tweak = 0;

        if (elapsed < tween.duration * 1000) {
            tweak = Math.round((elapsed / expected - 1) * tween.currentFrame);
        } else {
            tweak = frames - (frame + 1);
        }
        if (tweak > 0 && isFinite(tweak)) {
            if (tween.currentFrame + tweak >= frames) {
                tweak = frames - (frame + 1);
            }

            tween.currentFrame += tweak;
        }
    };
};

    /*
 * Portions of this file are based on pieces of Yahoo User Interface Library
 * Copyright (c) 2007, Yahoo! Inc. All rights reserved.
 * YUI licensed under the BSD License:
 * http://developer.yahoo.net/yui/license.txt
 * <script type="text/javascript">
 *
 */
Roo.lib.Bezier = new function() {

        this.getPosition = function(points, t) {
            var n = points.length;
            var tmp = [];

            for (var i = 0; i < n; ++i) {
                tmp[i] = [points[i][0], points[i][1]];
            }

            for (var j = 1; j < n; ++j) {
                for (i = 0; i < n - j; ++i) {
                    tmp[i][0] = (1 - t) * tmp[i][0] + t * tmp[parseInt(i + 1, 10)][0];
                    tmp[i][1] = (1 - t) * tmp[i][1] + t * tmp[parseInt(i + 1, 10)][1];
                }
            }

            return [ tmp[0][0], tmp[0][1] ];

        };
    }; 

/**
 * @class Roo.lib.Color
 * @constructor
 * An abstract Color implementation. Concrete Color implementations should use
 * an instance of this function as their prototype, and implement the getRGB and
 * getHSL functions. getRGB should return an object representing the RGB
 * components of this Color, with the red, green, and blue components in the
 * range [0,255] and the alpha component in the range [0,100]. getHSL should
 * return an object representing the HSL components of this Color, with the hue
 * component in the range [0,360), the saturation and lightness components in
 * the range [0,100], and the alpha component in the range [0,1].
 *
 *
 * Color.js
 *
 * Functions for Color handling and processing.
 *
 * http://www.safalra.com/web-design/javascript/Color-handling-and-processing/
 *
 * The author of this program, Safalra (Stephen Morley), irrevocably releases all
 * rights to this program, with the intention of it becoming part of the public
 * domain. Because this program is released into the public domain, it comes with
 * no warranty either expressed or implied, to the extent permitted by law.
 * 
 * For more free and public domain JavaScript code by the same author, visit:
 * http://www.safalra.com/web-design/javascript/
 * 
 */
Roo.lib.Color = function() { }


Roo.apply(Roo.lib.Color.prototype, {
  
  rgb : null,
  hsv : null,
  hsl : null,
  
  /**
   * getIntegerRGB
   * @return {Object} an object representing the RGBA components of this Color. The red,
   * green, and blue components are converted to integers in the range [0,255].
   * The alpha is a value in the range [0,1].
   */
  getIntegerRGB : function(){

    // get the RGB components of this Color
    var rgb = this.getRGB();

    // return the integer components
    return {
      'r' : Math.round(rgb.r),
      'g' : Math.round(rgb.g),
      'b' : Math.round(rgb.b),
      'a' : rgb.a
    };

  },

  /**
   * getPercentageRGB
   * @return {Object} an object representing the RGBA components of this Color. The red,
   * green, and blue components are converted to numbers in the range [0,100].
   * The alpha is a value in the range [0,1].
   */
  getPercentageRGB : function(){

    // get the RGB components of this Color
    var rgb = this.getRGB();

    // return the percentage components
    return {
      'r' : 100 * rgb.r / 255,
      'g' : 100 * rgb.g / 255,
      'b' : 100 * rgb.b / 255,
      'a' : rgb.a
    };

  },

  /**
   * getCSSHexadecimalRGB
   * @return {String} a string representing this Color as a CSS hexadecimal RGB Color
   * value - that is, a string of the form #RRGGBB where each of RR, GG, and BB
   * are two-digit hexadecimal numbers.
   */
  getCSSHexadecimalRGB : function()
  {

    // get the integer RGB components
    var rgb = this.getIntegerRGB();

    // determine the hexadecimal equivalents
    var r16 = rgb.r.toString(16);
    var g16 = rgb.g.toString(16);
    var b16 = rgb.b.toString(16);

    // return the CSS RGB Color value
    return '#'
        + (r16.length == 2 ? r16 : '0' + r16)
        + (g16.length == 2 ? g16 : '0' + g16)
        + (b16.length == 2 ? b16 : '0' + b16);

  },

  /**
   * getCSSIntegerRGB
   * @return {String} a string representing this Color as a CSS integer RGB Color
   * value - that is, a string of the form rgb(r,g,b) where each of r, g, and b
   * are integers in the range [0,255].
   */
  getCSSIntegerRGB : function(){

    // get the integer RGB components
    var rgb = this.getIntegerRGB();

    // return the CSS RGB Color value
    return 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';

  },

  /**
   * getCSSIntegerRGBA
   * @return {String} Returns a string representing this Color as a CSS integer RGBA Color
   * value - that is, a string of the form rgba(r,g,b,a) where each of r, g, and
   * b are integers in the range [0,255] and a is in the range [0,1].
   */
  getCSSIntegerRGBA : function(){

    // get the integer RGB components
    var rgb = this.getIntegerRGB();

    // return the CSS integer RGBA Color value
    return 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + rgb.a + ')';

  },

  /**
   * getCSSPercentageRGB
   * @return {String} a string representing this Color as a CSS percentage RGB Color
   * value - that is, a string of the form rgb(r%,g%,b%) where each of r, g, and
   * b are in the range [0,100].
   */
  getCSSPercentageRGB : function(){

    // get the percentage RGB components
    var rgb = this.getPercentageRGB();

    // return the CSS RGB Color value
    return 'rgb(' + rgb.r + '%,' + rgb.g + '%,' + rgb.b + '%)';

  },

  /**
   * getCSSPercentageRGBA
   * @return {String} a string representing this Color as a CSS percentage RGBA Color
   * value - that is, a string of the form rgba(r%,g%,b%,a) where each of r, g,
   * and b are in the range [0,100] and a is in the range [0,1].
   */
  getCSSPercentageRGBA : function(){

    // get the percentage RGB components
    var rgb = this.getPercentageRGB();

    // return the CSS percentage RGBA Color value
    return 'rgb(' + rgb.r + '%,' + rgb.g + '%,' + rgb.b + '%,' + rgb.a + ')';

  },

  /**
   * getCSSHSL
   * @return {String} a string representing this Color as a CSS HSL Color value - that
   * is, a string of the form hsl(h,s%,l%) where h is in the range [0,100] and
   * s and l are in the range [0,100].
   */
  getCSSHSL : function(){

    // get the HSL components
    var hsl = this.getHSL();

    // return the CSS HSL Color value
    return 'hsl(' + hsl.h + ',' + hsl.s + '%,' + hsl.l + '%)';

  },

  /**
   * getCSSHSLA
   * @return {String} a string representing this Color as a CSS HSLA Color value - that
   * is, a string of the form hsla(h,s%,l%,a) where h is in the range [0,100],
   * s and l are in the range [0,100], and a is in the range [0,1].
   */
  getCSSHSLA : function(){

    // get the HSL components
    var hsl = this.getHSL();

    // return the CSS HSL Color value
    return 'hsl(' + hsl.h + ',' + hsl.s + '%,' + hsl.l + '%,' + hsl.a + ')';

  },

  /**
   * Sets the Color of the specified node to this Color. This functions sets
   * the CSS 'color' property for the node. The parameter is:
   * 
   * @param {DomElement} node - the node whose Color should be set
   */
  setNodeColor : function(node){

    // set the Color of the node
    node.style.color = this.getCSSHexadecimalRGB();

  },

  /**
   * Sets the background Color of the specified node to this Color. This
   * functions sets the CSS 'background-color' property for the node. The
   * parameter is:
   *
   * @param {DomElement} node - the node whose background Color should be set
   */
  setNodeBackgroundColor : function(node){

    // set the background Color of the node
    node.style.backgroundColor = this.getCSSHexadecimalRGB();

  },
  // convert between formats..
  toRGB: function()
  {
    var r = this.getIntegerRGB();
    return new Roo.lib.RGBColor(r.r,r.g,r.b,r.a);
    
  },
  toHSL : function()
  {
     var hsl = this.getHSL();
  // return the CSS HSL Color value
    return new Roo.lib.HSLColor(hsl.h,  hsl.s, hsl.l ,  hsl.a );
    
  },
  
  toHSV : function()
  {
    var rgb = this.toRGB();
    var hsv = rgb.getHSV();
   // return the CSS HSL Color value
    return new Roo.lib.HSVColor(hsv.h,  hsv.s, hsv.v ,  hsv.a );
    
  },
  
  // modify  v = 0 ... 1 (eg. 0.5)
  saturate : function(v)
  {
      var rgb = this.toRGB();
      var hsv = rgb.getHSV();
      return new Roo.lib.HSVColor(hsv.h,  hsv.s * v, hsv.v ,  hsv.a );
      
  
  },
  
   
  /**
   * getRGB
   * @return {Object} the RGB and alpha components of this Color as an object with r,
   * g, b, and a properties. r, g, and b are in the range [0,255] and a is in
   * the range [0,1].
   */
  getRGB: function(){
   
    // return the RGB components
    return {
      'r' : this.rgb.r,
      'g' : this.rgb.g,
      'b' : this.rgb.b,
      'a' : this.alpha
    };

  },

  /**
   * getHSV
   * @return {Object} the HSV and alpha components of this Color as an object with h,
   * s, v, and a properties. h is in the range [0,360), s and v are in the range
   * [0,100], and a is in the range [0,1].
   */
  getHSV : function()
  {
    
    // calculate the HSV components if necessary
    if (this.hsv == null) {
      this.calculateHSV();
    }

    // return the HSV components
    return {
      'h' : this.hsv.h,
      's' : this.hsv.s,
      'v' : this.hsv.v,
      'a' : this.alpha
    };

  },

  /**
   * getHSL
   * @return {Object} the HSL and alpha components of this Color as an object with h,
   * s, l, and a properties. h is in the range [0,360), s and l are in the range
   * [0,100], and a is in the range [0,1].
   */
  getHSL : function(){
    
     
    // calculate the HSV components if necessary
    if (this.hsl == null) { this.calculateHSL(); }

    // return the HSL components
    return {
      'h' : this.hsl.h,
      's' : this.hsl.s,
      'l' : this.hsl.l,
      'a' : this.alpha
    };

  }
  

});


/**
 * @class Roo.lib.RGBColor
 * @extends Roo.lib.Color
 * Creates a Color specified in the RGB Color space, with an optional alpha
 * component. The parameters are:
 * @constructor
 * 

 * @param {Number} r - the red component, clipped to the range [0,255]
 * @param {Number} g - the green component, clipped to the range [0,255]
 * @param {Number} b - the blue component, clipped to the range [0,255]
 * @param {Number} a - the alpha component, clipped to the range [0,1] - this parameter is
 *     optional and defaults to 1
 */
Roo.lib.RGBColor = function (r, g, b, a){

  // store the alpha component after clipping it if necessary
  this.alpha = (a === undefined ? 1 : Math.max(0, Math.min(1, a)));

  // store the RGB components after clipping them if necessary
  this.rgb =
      {
        'r' : Math.max(0, Math.min(255, r)),
        'g' : Math.max(0, Math.min(255, g)),
        'b' : Math.max(0, Math.min(255, b))
      };

  // initialise the HSV and HSL components to null
  

  /* 
   * //private returns the HSV or HSL hue component of this RGBColor. The hue is in the
   * range [0,360). The parameters are:
   *
   * maximum - the maximum of the RGB component values
   * range   - the range of the RGB component values
   */
   

}
// this does an 'exteds'
Roo.extend(Roo.lib.RGBColor, Roo.lib.Color, {

  
    getHue  : function(maximum, range)
    {
      var rgb = this.rgb;
       
      // check whether the range is zero
      if (range == 0){
  
        // set the hue to zero (any hue is acceptable as the Color is grey)
        var hue = 0;
  
      }else{
  
        // determine which of the components has the highest value and set the hue
        switch (maximum){
  
          // red has the highest value
          case rgb.r:
            var hue = (rgb.g - rgb.b) / range * 60;
            if (hue < 0) { hue += 360; }
            break;
  
          // green has the highest value
          case rgb.g:
            var hue = (rgb.b - rgb.r) / range * 60 + 120;
            break;
  
          // blue has the highest value
          case rgb.b:
            var hue = (rgb.r - rgb.g) / range * 60 + 240;
            break;
  
        }
  
      }
  
      // return the hue
      return hue;
  
    },

  /* //private Calculates and stores the HSV components of this RGBColor so that they can
   * be returned be the getHSV function.
   */
   calculateHSV : function(){
    var rgb = this.rgb;
    // get the maximum and range of the RGB component values
    var maximum = Math.max(rgb.r, rgb.g, rgb.b);
    var range   = maximum - Math.min(rgb.r, rgb.g, rgb.b);

    // store the HSV components
    this.hsv =
        {
          'h' : this.getHue(maximum, range),
          's' : (maximum == 0 ? 0 : 100 * range / maximum),
          'v' : maximum / 2.55
        };

  },

  /* //private Calculates and stores the HSL components of this RGBColor so that they can
   * be returned be the getHSL function.
   */
   calculateHSL : function(){
    var rgb = this.rgb;
    // get the maximum and range of the RGB component values
    var maximum = Math.max(rgb.r, rgb.g, rgb.b);
    var range   = maximum - Math.min(rgb.r, rgb.g, rgb.b);

    // determine the lightness in the range [0,1]
    var l = maximum / 255 - range / 510;

    // store the HSL components
    this.hsl =
        {
          'h' : this.getHue(maximum, range),
          's' : (range == 0 ? 0 : range / 2.55 / (l < 0.5 ? l * 2 : 2 - l * 2)),
          'l' : 100 * l
        };

  }

});

/**
 * @class Roo.lib.HSVColor
 * @extends Roo.lib.Color
 * Creates a Color specified in the HSV Color space, with an optional alpha
 * component. The parameters are:
 * @constructor
 *
 * @param {Number} h - the hue component, wrapped to the range [0,360)
 * @param {Number} s - the saturation component, clipped to the range [0,100]
 * @param {Number} v - the value component, clipped to the range [0,100]
 * @param {Number} a - the alpha component, clipped to the range [0,1] - this parameter is
 *     optional and defaults to 1
 */
Roo.lib.HSVColor = function (h, s, v, a){

  // store the alpha component after clipping it if necessary
  this.alpha = (a === undefined ? 1 : Math.max(0, Math.min(1, a)));

  // store the HSV components after clipping or wrapping them if necessary
  this.hsv =
      {
        'h' : (h % 360 + 360) % 360,
        's' : Math.max(0, Math.min(100, s)),
        'v' : Math.max(0, Math.min(100, v))
      };

  // initialise the RGB and HSL components to null
  this.rgb = null;
  this.hsl = null;
}

Roo.extend(Roo.lib.HSVColor, Roo.lib.Color, {
  /* Calculates and stores the RGB components of this HSVColor so that they can
   * be returned be the getRGB function.
   */
  calculateRGB: function ()
  {
    var hsv = this.hsv;
    // check whether the saturation is zero
    if (hsv.s == 0){

      // set the Color to the appropriate shade of grey
      var r = hsv.v;
      var g = hsv.v;
      var b = hsv.v;

    }else{

      // set some temporary values
      var f  = hsv.h / 60 - Math.floor(hsv.h / 60);
      var p  = hsv.v * (1 - hsv.s / 100);
      var q  = hsv.v * (1 - hsv.s / 100 * f);
      var t  = hsv.v * (1 - hsv.s / 100 * (1 - f));

      // set the RGB Color components to their temporary values
      switch (Math.floor(hsv.h / 60)){
        case 0: var r = hsv.v; var g = t; var b = p; break;
        case 1: var r = q; var g = hsv.v; var b = p; break;
        case 2: var r = p; var g = hsv.v; var b = t; break;
        case 3: var r = p; var g = q; var b = hsv.v; break;
        case 4: var r = t; var g = p; var b = hsv.v; break;
        case 5: var r = hsv.v; var g = p; var b = q; break;
      }

    }

    // store the RGB components
    this.rgb =
        {
          'r' : r * 2.55,
          'g' : g * 2.55,
          'b' : b * 2.55
        };

  },

  /* Calculates and stores the HSL components of this HSVColor so that they can
   * be returned be the getHSL function.
   */
  calculateHSL : function (){

    var hsv = this.hsv;
    // determine the lightness in the range [0,100]
    var l = (2 - hsv.s / 100) * hsv.v / 2;

    // store the HSL components
    this.hsl =
        {
          'h' : hsv.h,
          's' : hsv.s * hsv.v / (l < 50 ? l * 2 : 200 - l * 2),
          'l' : l
        };

    // correct a division-by-zero error
    if (isNaN(hsl.s)) { hsl.s = 0; }

  } 
 

});
 

/**
 * @class Roo.lib.HSLColor
 * @extends Roo.lib.Color
 *
 * @constructor
 * Creates a Color specified in the HSL Color space, with an optional alpha
 * component. The parameters are:
 *
 * @param {Number} h - the hue component, wrapped to the range [0,360)
 * @param {Number} s - the saturation component, clipped to the range [0,100]
 * @param {Number} l - the lightness component, clipped to the range [0,100]
 * @param {Number} a - the alpha component, clipped to the range [0,1] - this parameter is
 *     optional and defaults to 1
 */

Roo.lib.HSLColor = function(h, s, l, a){

  // store the alpha component after clipping it if necessary
  this.alpha = (a === undefined ? 1 : Math.max(0, Math.min(1, a)));

  // store the HSL components after clipping or wrapping them if necessary
  this.hsl =
      {
        'h' : (h % 360 + 360) % 360,
        's' : Math.max(0, Math.min(100, s)),
        'l' : Math.max(0, Math.min(100, l))
      };

  // initialise the RGB and HSV components to null
}

Roo.extend(Roo.lib.HSLColor, Roo.lib.Color, {

  /* Calculates and stores the RGB components of this HSLColor so that they can
   * be returned be the getRGB function.
   */
  calculateRGB: function (){

    // check whether the saturation is zero
    if (this.hsl.s == 0){

      // store the RGB components representing the appropriate shade of grey
      this.rgb =
          {
            'r' : this.hsl.l * 2.55,
            'g' : this.hsl.l * 2.55,
            'b' : this.hsl.l * 2.55
          };

    }else{

      // set some temporary values
      var p = this.hsl.l < 50
            ? this.hsl.l * (1 + hsl.s / 100)
            : this.hsl.l + hsl.s - hsl.l * hsl.s / 100;
      var q = 2 * hsl.l - p;

      // initialise the RGB components
      this.rgb =
          {
            'r' : (h + 120) / 60 % 6,
            'g' : h / 60,
            'b' : (h + 240) / 60 % 6
          };

      // loop over the RGB components
      for (var key in this.rgb){

        // ensure that the property is not inherited from the root object
        if (this.rgb.hasOwnProperty(key)){

          // set the component to its value in the range [0,100]
          if (this.rgb[key] < 1){
            this.rgb[key] = q + (p - q) * this.rgb[key];
          }else if (this.rgb[key] < 3){
            this.rgb[key] = p;
          }else if (this.rgb[key] < 4){
            this.rgb[key] = q + (p - q) * (4 - this.rgb[key]);
          }else{
            this.rgb[key] = q;
          }

          // set the component to its value in the range [0,255]
          this.rgb[key] *= 2.55;

        }

      }

    }

  },

  /* Calculates and stores the HSV components of this HSLColor so that they can
   * be returned be the getHSL function.
   */
   calculateHSV : function(){

    // set a temporary value
    var t = this.hsl.s * (this.hsl.l < 50 ? this.hsl.l : 100 - this.hsl.l) / 100;

    // store the HSV components
    this.hsv =
        {
          'h' : this.hsl.h,
          's' : 200 * t / (this.hsl.l + t),
          'v' : t + this.hsl.l
        };

    // correct a division-by-zero error
    if (isNaN(this.hsv.s)) { this.hsv.s = 0; }

  }
 

});
/*
 * Portions of this file are based on pieces of Yahoo User Interface Library
 * Copyright (c) 2007, Yahoo! Inc. All rights reserved.
 * YUI licensed under the BSD License:
 * http://developer.yahoo.net/yui/license.txt
 * <script type="text/javascript">
 *
 */
(function() {

    Roo.lib.ColorAnim = function(el, attributes, duration, method) {
        Roo.lib.ColorAnim.superclass.constructor.call(this, el, attributes, duration, method);
    };

    Roo.extend(Roo.lib.ColorAnim, Roo.lib.AnimBase);

    var fly = Roo.lib.AnimBase.fly;
    var Y = Roo.lib;
    var superclass = Y.ColorAnim.superclass;
    var proto = Y.ColorAnim.prototype;

    proto.toString = function() {
        var el = this.getEl();
        var id = el.id || el.tagName;
        return ("ColorAnim " + id);
    };

    proto.patterns.color = /color$/i;
    proto.patterns.rgb = /^rgb\(([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\)$/i;
    proto.patterns.hex = /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i;
    proto.patterns.hex3 = /^#?([0-9A-F]{1})([0-9A-F]{1})([0-9A-F]{1})$/i;
    proto.patterns.transparent = /^transparent|rgba\(0, 0, 0, 0\)$/;


    proto.parseColor = function(s) {
        if (s.length == 3) {
            return s;
        }

        var c = this.patterns.hex.exec(s);
        if (c && c.length == 4) {
            return [ parseInt(c[1], 16), parseInt(c[2], 16), parseInt(c[3], 16) ];
        }

        c = this.patterns.rgb.exec(s);
        if (c && c.length == 4) {
            return [ parseInt(c[1], 10), parseInt(c[2], 10), parseInt(c[3], 10) ];
        }

        c = this.patterns.hex3.exec(s);
        if (c && c.length == 4) {
            return [ parseInt(c[1] + c[1], 16), parseInt(c[2] + c[2], 16), parseInt(c[3] + c[3], 16) ];
        }

        return null;
    };
    // since this uses fly! - it cant be in ColorAnim (which does not have fly yet..)
    proto.getAttribute = function(attr) {
        var el = this.getEl();
        if (this.patterns.color.test(attr)) {
            var val = fly(el).getStyle(attr);

            if (this.patterns.transparent.test(val)) {
                var parent = el.parentNode;
                val = fly(parent).getStyle(attr);

                while (parent && this.patterns.transparent.test(val)) {
                    parent = parent.parentNode;
                    val = fly(parent).getStyle(attr);
                    if (parent.tagName.toUpperCase() == 'HTML') {
                        val = '#fff';
                    }
                }
            }
        } else {
            val = superclass.getAttribute.call(this, attr);
        }

        return val;
    };
    proto.getAttribute = function(attr) {
        var el = this.getEl();
        if (this.patterns.color.test(attr)) {
            var val = fly(el).getStyle(attr);

            if (this.patterns.transparent.test(val)) {
                var parent = el.parentNode;
                val = fly(parent).getStyle(attr);

                while (parent && this.patterns.transparent.test(val)) {
                    parent = parent.parentNode;
                    val = fly(parent).getStyle(attr);
                    if (parent.tagName.toUpperCase() == 'HTML') {
                        val = '#fff';
                    }
                }
            }
        } else {
            val = superclass.getAttribute.call(this, attr);
        }

        return val;
    };

    proto.doMethod = function(attr, start, end) {
        var val;

        if (this.patterns.color.test(attr)) {
            val = [];
            for (var i = 0, len = start.length; i < len; ++i) {
                val[i] = superclass.doMethod.call(this, attr, start[i], end[i]);
            }

            val = 'rgb(' + Math.floor(val[0]) + ',' + Math.floor(val[1]) + ',' + Math.floor(val[2]) + ')';
        }
        else {
            val = superclass.doMethod.call(this, attr, start, end);
        }

        return val;
    };

    proto.setRuntimeAttribute = function(attr) {
        superclass.setRuntimeAttribute.call(this, attr);

        if (this.patterns.color.test(attr)) {
            var attributes = this.attributes;
            var start = this.parseColor(this.runtimeAttributes[attr].start);
            var end = this.parseColor(this.runtimeAttributes[attr].end);

            if (typeof attributes[attr]['to'] === 'undefined' && typeof attributes[attr]['by'] !== 'undefined') {
                end = this.parseColor(attributes[attr].by);

                for (var i = 0, len = start.length; i < len; ++i) {
                    end[i] = start[i] + end[i];
                }
            }

            this.runtimeAttributes[attr].start = start;
            this.runtimeAttributes[attr].end = end;
        }
    };
})();

/*
 * Portions of this file are based on pieces of Yahoo User Interface Library
 * Copyright (c) 2007, Yahoo! Inc. All rights reserved.
 * YUI licensed under the BSD License:
 * http://developer.yahoo.net/yui/license.txt
 * <script type="text/javascript">
 *
 */
Roo.lib.Easing = {


    easeNone: function (t, b, c, d) {
        return c * t / d + b;
    },


    easeIn: function (t, b, c, d) {
        return c * (t /= d) * t + b;
    },


    easeOut: function (t, b, c, d) {
        return -c * (t /= d) * (t - 2) + b;
    },


    easeBoth: function (t, b, c, d) {
        if ((t /= d / 2) < 1) {
            return c / 2 * t * t + b;
        }

        return -c / 2 * ((--t) * (t - 2) - 1) + b;
    },


    easeInStrong: function (t, b, c, d) {
        return c * (t /= d) * t * t * t + b;
    },


    easeOutStrong: function (t, b, c, d) {
        return -c * ((t = t / d - 1) * t * t * t - 1) + b;
    },


    easeBothStrong: function (t, b, c, d) {
        if ((t /= d / 2) < 1) {
            return c / 2 * t * t * t * t + b;
        }

        return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
    },



    elasticIn: function (t, b, c, d, a, p) {
        if (t == 0) {
            return b;
        }
        if ((t /= d) == 1) {
            return b + c;
        }
        if (!p) {
            p = d * .3;
        }

        if (!a || a < Math.abs(c)) {
            a = c;
            var s = p / 4;
        }
        else {
            var s = p / (2 * Math.PI) * Math.asin(c / a);
        }

        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
    },


    elasticOut: function (t, b, c, d, a, p) {
        if (t == 0) {
            return b;
        }
        if ((t /= d) == 1) {
            return b + c;
        }
        if (!p) {
            p = d * .3;
        }

        if (!a || a < Math.abs(c)) {
            a = c;
            var s = p / 4;
        }
        else {
            var s = p / (2 * Math.PI) * Math.asin(c / a);
        }

        return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
    },


    elasticBoth: function (t, b, c, d, a, p) {
        if (t == 0) {
            return b;
        }

        if ((t /= d / 2) == 2) {
            return b + c;
        }

        if (!p) {
            p = d * (.3 * 1.5);
        }

        if (!a || a < Math.abs(c)) {
            a = c;
            var s = p / 4;
        }
        else {
            var s = p / (2 * Math.PI) * Math.asin(c / a);
        }

        if (t < 1) {
            return -.5 * (a * Math.pow(2, 10 * (t -= 1)) *
                          Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
        }
        return a * Math.pow(2, -10 * (t -= 1)) *
               Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
    },



    backIn: function (t, b, c, d, s) {
        if (typeof s == 'undefined') {
            s = 1.70158;
        }
        return c * (t /= d) * t * ((s + 1) * t - s) + b;
    },


    backOut: function (t, b, c, d, s) {
        if (typeof s == 'undefined') {
            s = 1.70158;
        }
        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
    },


    backBoth: function (t, b, c, d, s) {
        if (typeof s == 'undefined') {
            s = 1.70158;
        }

        if ((t /= d / 2 ) < 1) {
            return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;
        }
        return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;
    },


    bounceIn: function (t, b, c, d) {
        return c - Roo.lib.Easing.bounceOut(d - t, 0, c, d) + b;
    },


    bounceOut: function (t, b, c, d) {
        if ((t /= d) < (1 / 2.75)) {
            return c * (7.5625 * t * t) + b;
        } else if (t < (2 / 2.75)) {
            return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;
        } else if (t < (2.5 / 2.75)) {
            return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;
        }
        return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;
    },


    bounceBoth: function (t, b, c, d) {
        if (t < d / 2) {
            return Roo.lib.Easing.bounceIn(t * 2, 0, c, d) * .5 + b;
        }
        return Roo.lib.Easing.bounceOut(t * 2 - d, 0, c, d) * .5 + c * .5 + b;
    }
};/*
 * Portions of this file are based on pieces of Yahoo User Interface Library
 * Copyright (c) 2007, Yahoo! Inc. All rights reserved.
 * YUI licensed under the BSD License:
 * http://developer.yahoo.net/yui/license.txt
 * <script type="text/javascript">
 *
 */
    (function() {
        Roo.lib.Motion = function(el, attributes, duration, method) {
            if (el) {
                Roo.lib.Motion.superclass.constructor.call(this, el, attributes, duration, method);
            }
        };

        Roo.extend(Roo.lib.Motion, Roo.lib.ColorAnim);


        var Y = Roo.lib;
        var superclass = Y.Motion.superclass;
        var proto = Y.Motion.prototype;

        proto.toString = function() {
            var el = this.getEl();
            var id = el.id || el.tagName;
            return ("Motion " + id);
        };

        proto.patterns.points = /^points$/i;

        proto.setAttribute = function(attr, val, unit) {
            if (this.patterns.points.test(attr)) {
                unit = unit || 'px';
                superclass.setAttribute.call(this, 'left', val[0], unit);
                superclass.setAttribute.call(this, 'top', val[1], unit);
            } else {
                superclass.setAttribute.call(this, attr, val, unit);
            }
        };

        proto.getAttribute = function(attr) {
            if (this.patterns.points.test(attr)) {
                var val = [
                        superclass.getAttribute.call(this, 'left'),
                        superclass.getAttribute.call(this, 'top')
                        ];
            } else {
                val = superclass.getAttribute.call(this, attr);
            }

            return val;
        };

        proto.doMethod = function(attr, start, end) {
            var val = null;

            if (this.patterns.points.test(attr)) {
                var t = this.method(this.currentFrame, 0, 100, this.totalFrames) / 100;
                val = Y.Bezier.getPosition(this.runtimeAttributes[attr], t);
            } else {
                val = superclass.doMethod.call(this, attr, start, end);
            }
            return val;
        };

        proto.setRuntimeAttribute = function(attr) {
            if (this.patterns.points.test(attr)) {
                var el = this.getEl();
                var attributes = this.attributes;
                var start;
                var control = attributes['points']['control'] || [];
                var end;
                var i, len;

                if (control.length > 0 && !(control[0] instanceof Array)) {
                    control = [control];
                } else {
                    var tmp = [];
                    for (i = 0,len = control.length; i < len; ++i) {
                        tmp[i] = control[i];
                    }
                    control = tmp;
                }

                Roo.fly(el).position();

                if (isset(attributes['points']['from'])) {
                    Roo.lib.Dom.setXY(el, attributes['points']['from']);
                }
                else {
                    Roo.lib.Dom.setXY(el, Roo.lib.Dom.getXY(el));
                }

                start = this.getAttribute('points');


                if (isset(attributes['points']['to'])) {
                    end = translateValues.call(this, attributes['points']['to'], start);

                    var pageXY = Roo.lib.Dom.getXY(this.getEl());
                    for (i = 0,len = control.length; i < len; ++i) {
                        control[i] = translateValues.call(this, control[i], start);
                    }


                } else if (isset(attributes['points']['by'])) {
                    end = [ start[0] + attributes['points']['by'][0], start[1] + attributes['points']['by'][1] ];

                    for (i = 0,len = control.length; i < len; ++i) {
                        control[i] = [ start[0] + control[i][0], start[1] + control[i][1] ];
                    }
                }

                this.runtimeAttributes[attr] = [start];

                if (control.length > 0) {
                    this.runtimeAttributes[attr] = this.runtimeAttributes[attr].concat(control);
                }

                this.runtimeAttributes[attr][this.runtimeAttributes[attr].length] = end;
            }
            else {
                superclass.setRuntimeAttribute.call(this, attr);
            }
        };

        var translateValues = function(val, start) {
            var pageXY = Roo.lib.Dom.getXY(this.getEl());
            val = [ val[0] - pageXY[0] + start[0], val[1] - pageXY[1] + start[1] ];

            return val;
        };

        var isset = function(prop) {
            return (typeof prop !== 'undefined');
        };
    })();
/*
 * Portions of this file are based on pieces of Yahoo User Interface Library
 * Copyright (c) 2007, Yahoo! Inc. All rights reserved.
 * YUI licensed under the BSD License:
 * http://developer.yahoo.net/yui/license.txt
 * <script type="text/javascript">
 *
 */
    (function() {
        Roo.lib.Scroll = function(el, attributes, duration, method) {
            if (el) {
                Roo.lib.Scroll.superclass.constructor.call(this, el, attributes, duration, method);
            }
        };

        Roo.extend(Roo.lib.Scroll, Roo.lib.ColorAnim);


        var Y = Roo.lib;
        var superclass = Y.Scroll.superclass;
        var proto = Y.Scroll.prototype;

        proto.toString = function() {
            var el = this.getEl();
            var id = el.id || el.tagName;
            return ("Scroll " + id);
        };

        proto.doMethod = function(attr, start, end) {
            var val = null;

            if (attr == 'scroll') {
                val = [
                        this.method(this.currentFrame, start[0], end[0] - start[0], this.totalFrames),
                        this.method(this.currentFrame, start[1], end[1] - start[1], this.totalFrames)
                        ];

            } else {
                val = superclass.doMethod.call(this, attr, start, end);
            }
            return val;
        };

        proto.getAttribute = function(attr) {
            var val = null;
            var el = this.getEl();

            if (attr == 'scroll') {
                val = [ el.scrollLeft, el.scrollTop ];
            } else {
                val = superclass.getAttribute.call(this, attr);
            }

            return val;
        };

        proto.setAttribute = function(attr, val, unit) {
            var el = this.getEl();

            if (attr == 'scroll') {
                el.scrollLeft = val[0];
                el.scrollTop = val[1];
            } else {
                superclass.setAttribute.call(this, attr, val, unit);
            }
        };
    })();
/**
 * Originally based of this code... - refactored for Roo...
 * https://github.com/aaalsaleh/undo-manager
 
 * undo-manager.js
 * @author  Abdulrahman Alsaleh 
 * @copyright 2015 Abdulrahman Alsaleh 
 * @license  MIT License (c) 
 *
 * Hackily modifyed by alan@roojs.com
 *
 *
 *  
 *
 *  TOTALLY UNTESTED...
 *
 *  Documentation to be done....
 */
 

/**
* @class Roo.lib.UndoManager
* An undo manager implementation in JavaScript. It follows the W3C UndoManager and DOM Transaction
* Draft and the undocumented and disabled Mozilla Firefox's UndoManager implementation.

 * Usage:
 * <pre><code>


editor.undoManager = new Roo.lib.UndoManager(1000, editor);
 
</code></pre>

* For more information see this blog post with examples:
*  <a href="http://www.cnitblog.com/seeyeah/archive/2011/12/30/38728.html/">DomHelper
     - Create Elements using DOM, HTML fragments and Templates</a>. 
* @constructor
* @param {Number} limit how far back to go ... use 1000?
* @param {Object} scope usually use document..
*/

Roo.lib.UndoManager = function (limit, undoScopeHost)
{
    this.stack = [];
    this.limit = limit;
    this.scope = undoScopeHost;
    this.fireEvent = typeof CustomEvent != 'undefined' && undoScopeHost && undoScopeHost.dispatchEvent;
    if (this.fireEvent) {
        this.bindEvents();
    }
    this.reset();
    
};
        
Roo.lib.UndoManager.prototype = {
    
    limit : false,
    stack : false,
    scope :  false,
    fireEvent : false,
    position : 0,
    length : 0,
    
    
     /**
     * To push and execute a transaction, the method undoManager.transact
     * must be called by passing a transaction object as the first argument, and a merge
     * flag as the second argument. A transaction object has the following properties:
     *
     * Usage:
<pre><code>
undoManager.transact({
    label: 'Typing',
    execute: function() { ... },
    undo: function() { ... },
    // redo same as execute
    redo: function() { this.execute(); }
}, false);

// merge transaction
undoManager.transact({
    label: 'Typing',
    execute: function() { ... },  // this will be run...
    undo: function() { ... }, // what to do when undo is run.
    // redo same as execute
    redo: function() { this.execute(); }
}, true); 
</code></pre> 
     *
     * 
     * @param {Object} transaction The transaction to add to the stack.
     * @return {String} The HTML fragment
     */
    
    
    transact : function (transaction, merge)
    {
        if (arguments.length < 2) {
            throw new TypeError('Not enough arguments to UndoManager.transact.');
        }

        transaction.execute();

        this.stack.splice(0, this.position);
        if (merge && this.length) {
            this.stack[0].push(transaction);
        } else {
            this.stack.unshift([transaction]);
        }
    
        this.position = 0;

        if (this.limit && this.stack.length > this.limit) {
            this.length = this.stack.length = this.limit;
        } else {
            this.length = this.stack.length;
        }

        if (this.fireEvent) {
            this.scope.dispatchEvent(
                new CustomEvent('DOMTransaction', {
                    detail: {
                        transactions: this.stack[0].slice()
                    },
                    bubbles: true,
                    cancelable: false
                })
            );
        }
        
        //Roo.log("transaction: pos:" + this.position + " len: " + this.length + " slen:" + this.stack.length);
      
        
    },

    undo : function ()
    {
        //Roo.log("undo: pos:" + this.position + " len: " + this.length + " slen:" + this.stack.length);
        
        if (this.position < this.length) {
            for (var i = this.stack[this.position].length - 1; i >= 0; i--) {
                this.stack[this.position][i].undo();
            }
            this.position++;

            if (this.fireEvent) {
                this.scope.dispatchEvent(
                    new CustomEvent('undo', {
                        detail: {
                            transactions: this.stack[this.position - 1].slice()
                        },
                        bubbles: true,
                        cancelable: false
                    })
                );
            }
        }
    },

    redo : function ()
    {
        if (this.position > 0) {
            for (var i = 0, n = this.stack[this.position - 1].length; i < n; i++) {
                this.stack[this.position - 1][i].redo();
            }
            this.position--;

            if (this.fireEvent) {
                this.scope.dispatchEvent(
                    new CustomEvent('redo', {
                        detail: {
                            transactions: this.stack[this.position].slice()
                        },
                        bubbles: true,
                        cancelable: false
                    })
                );
            }
        }
    },

    item : function (index)
    {
        if (index >= 0 && index < this.length) {
            return this.stack[index].slice();
        }
        return null;
    },

    clearUndo : function () {
        this.stack.length = this.length = this.position;
    },

    clearRedo : function () {
        this.stack.splice(0, this.position);
        this.position = 0;
        this.length = this.stack.length;
    },
    /**
     * Reset the undo - probaly done on load to clear all history.
     */
    reset : function()
    {
        this.stack = [];
        this.position = 0;
        this.length = 0;
        this.current_html = this.scope.innerHTML;
        if (this.timer !== false) {
            clearTimeout(this.timer);
        }
        this.timer = false;
        this.merge = false;
        this.addEvent();
        
    },
    current_html : '',
    timer : false,
    merge : false,
    
    
    // this will handle the undo/redo on the element.?
    bindEvents : function()
    {
        var el  = this.scope;
        el.undoManager = this;
        
        
        this.scope.addEventListener('keydown', function(e) {
            if ((e.ctrlKey || e.metaKey) && e.keyCode === 90) {
                if (e.shiftKey) {
                    el.undoManager.redo(); // Ctrl/Command + Shift + Z
                } else {
                    el.undoManager.undo(); // Ctrl/Command + Z
                }
        
                e.preventDefault();
            }
        });
        /// ignore keyup..
        this.scope.addEventListener('keyup', function(e) {
            if ((e.ctrlKey || e.metaKey) && e.keyCode === 90) {
                e.preventDefault();
            }
        });
        
        
        
        var t = this;
        
        el.addEventListener('input', function(e) {
            if(el.innerHTML == t.current_html) {
                return;
            }
            // only record events every second.
            if (t.timer !== false) {
               clearTimeout(t.timer);
               t.timer = false;
            }
            t.timer = setTimeout(function() { t.merge = false; }, 1000);
            
            t.addEvent(t.merge);
            t.merge = true; // ignore changes happening every second..
        });
	},
    /**
     * Manually add an event.
     * Normall called without arguements - and it will just get added to the stack.
     * 
     */
    
    addEvent : function(merge)
    {
        //Roo.log("undomanager +" + (merge ? 'Y':'n'));
        // not sure if this should clear the timer 
        merge = typeof(merge) == 'undefined' ? false : merge; 
        
        this.scope.undoManager.transact({
            scope : this.scope,
            oldHTML: this.current_html,
            newHTML: this.scope.innerHTML,
            // nothing to execute (content already changed when input is fired)
            execute: function() { },
            undo: function() {
                this.scope.innerHTML = this.current_html = this.oldHTML;
            },
            redo: function() {
                this.scope.innerHTML = this.current_html = this.newHTML;
            }
        }, false); //merge);
        
        this.merge = merge;
        
        this.current_html = this.scope.innerHTML;
    }
    
    
     
    
    
    
};
/**
 * @class Roo.lib.Range
 * @constructor
 * This is a toolkit, normally used to copy features into a Dom Range element
 * Roo.lib.Range.wrap(x);
 *
 *
 *
 */
Roo.lib.Range = function() { };

/**
 * Wrap a Dom Range object, to give it new features...
 * @static
 * @param {Range} the range to wrap
 */
Roo.lib.Range.wrap = function(r) {
    return Roo.apply(r, Roo.lib.Range.prototype);
};
/**
 * find a parent node eg. LI / OL
 * @param {string|Array} node name or array of nodenames
 * @return {DomElement|false}
 */
Roo.apply(Roo.lib.Range.prototype,
{
    
    closest : function(str)
    {
        if (typeof(str) != 'string') {
            // assume it's a array.
            for(var i = 0;i < str.length;i++) {
                var r = this.closest(str[i]);
                if (r !== false) {
                    return r;
                }
                
            }
            return false;
        }
        str = str.toLowerCase();
        var n = this.commonAncestorContainer; // might not be a node
        while (n.nodeType != 1) {
            n = n.parentNode;
        }
        
        if (n.nodeName.toLowerCase() == str ) {
            return n;
        }
        if (n.nodeName.toLowerCase() == 'body') {
            return false;
        }
            
        return n.closest(str) || false;
        
    },
    cloneRange : function()
    {
        return Roo.lib.Range.wrap(Range.prototype.cloneRange.call(this));
    }
});/**
 * @class Roo.lib.Selection
 * @constructor
 * This is a toolkit, normally used to copy features into a Dom Selection element
 * Roo.lib.Selection.wrap(x);
 *
 *
 *
 */
Roo.lib.Selection = function() { };

/**
 * Wrap a Dom Range object, to give it new features...
 * @static
 * @param {Range} the range to wrap
 */
Roo.lib.Selection.wrap = function(r, doc) {
    Roo.apply(r, Roo.lib.Selection.prototype);
    r.ownerDocument = doc; // usefull so we dont have to keep referening to it.
    return r;
};
/**
 * find a parent node eg. LI / OL
 * @param {string|Array} node name or array of nodenames
 * @return {DomElement|false}
 */
Roo.apply(Roo.lib.Selection.prototype,
{
    /**
     * the owner document
     */
    ownerDocument : false,
    
    getRangeAt : function(n)
    {
        return Roo.lib.Range.wrap(Selection.prototype.getRangeAt.call(this,n));
    },
    
    /**
     * insert node at selection 
     * @param {DomElement|string} node
     * @param {string} cursor (after|in|none) where to place the cursor after inserting.
     */
    insertNode: function(node, cursor)
    {
        if (typeof(node) == 'string') {
            node = this.ownerDocument.createElement(node);
            if (cursor == 'in') {
                node.innerHTML = '&nbsp;';
            }
        }
        
        var range = this.getRangeAt(0);
        
        if (this.type != 'Caret') {
            range.deleteContents();
        }
        var sn = node.childNodes[0]; // select the contents.

        
        
        range.insertNode(node);
        if (cursor == 'after') {
            node.insertAdjacentHTML('afterend', '&nbsp;');
            sn = node.nextSibling;
        }
        
        if (cursor == 'none') {
            return;
        }
        
        this.cursorText(sn);
    },
    
    cursorText : function(n)
    {
       
        //var range = this.getRangeAt(0);
        range = Roo.lib.Range.wrap(new Range());
        //range.selectNode(n);
        
        var ix = Array.from(n.parentNode.childNodes).indexOf(n);
        range.setStart(n.parentNode,ix);
        range.setEnd(n.parentNode,ix+1);
        //range.collapse(false);
         
        this.removeAllRanges();
        this.addRange(range);
        
        Roo.log([n, range, this,this.baseOffset,this.extentOffset, this.type]);
    },
    cursorAfter : function(n)
    {
        if (!n.nextSibling || n.nextSibling.nodeValue != '&nbsp;') {
            n.insertAdjacentHTML('afterend', '&nbsp;');
        }
        this.cursorText (n.nextSibling);
    }
        
    
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */


// nasty IE9 hack - what a pile of crap that is..

 if (typeof Range != "undefined" && typeof Range.prototype.createContextualFragment == "undefined") {
    Range.prototype.createContextualFragment = function (html) {
        var doc = window.document;
        var container = doc.createElement("div");
        container.innerHTML = html;
        var frag = doc.createDocumentFragment(), n;
        while ((n = container.firstChild)) {
            frag.appendChild(n);
        }
        return frag;
    };
}

/**
 * @class Roo.DomHelper
 * Utility class for working with DOM and/or Templates. It transparently supports using HTML fragments or DOM.
 * For more information see <a href="http://web.archive.org/web/20071221063734/http://www.jackslocum.com/blog/2006/10/06/domhelper-create-elements-using-dom-html-fragments-or-templates/">this blog post with examples</a>.
 * @static
 */
Roo.DomHelper = function(){
    var tempTableEl = null;
    var emptyTags = /^(?:br|frame|hr|img|input|link|meta|range|spacer|wbr|area|param|col)$/i;
    var tableRe = /^table|tbody|tr|td$/i;
    var xmlns = {};
    // build as innerHTML where available
    /** @ignore */
    var createHtml = function(o){
        if(typeof o == 'string'){
            return o;
        }
        var b = "";
        if(!o.tag){
            o.tag = "div";
        }
        b += "<" + o.tag;
        for(var attr in o){
            if(attr == "tag" || attr == "children" || attr == "cn" || attr == "html" || typeof o[attr] == "function") { continue; }
            if(attr == "style"){
                var s = o["style"];
                if(typeof s == "function"){
                    s = s.call();
                }
                if(typeof s == "string"){
                    b += ' style="' + s + '"';
                }else if(typeof s == "object"){
                    b += ' style="';
                    for(var key in s){
                        if(typeof s[key] != "function"){
                            b += key + ":" + s[key] + ";";
                        }
                    }
                    b += '"';
                }
            }else{
                if(attr == "cls"){
                    b += ' class="' + o["cls"] + '"';
                }else if(attr == "htmlFor"){
                    b += ' for="' + o["htmlFor"] + '"';
                }else{
                    b += " " + attr + '="' + o[attr] + '"';
                }
            }
        }
        if(emptyTags.test(o.tag)){
            b += "/>";
        }else{
            b += ">";
            var cn = o.children || o.cn;
            if(cn){
                //http://bugs.kde.org/show_bug.cgi?id=71506
                if((cn instanceof Array) || (Roo.isSafari && typeof(cn.join) == "function")){
                    for(var i = 0, len = cn.length; i < len; i++) {
                        b += createHtml(cn[i], b);
                    }
                }else{
                    b += createHtml(cn, b);
                }
            }
            if(o.html){
                b += o.html;
            }
            b += "</" + o.tag + ">";
        }
        return b;
    };

    // build as dom
    /** @ignore */
    var createDom = function(o, parentNode){
         
        // defininition craeted..
        var ns = false;
        if (o.ns && o.ns != 'html') {
               
            if (o.xmlns && typeof(xmlns[o.ns]) == 'undefined') {
                xmlns[o.ns] = o.xmlns;
                ns = o.xmlns;
            }
            if (typeof(xmlns[o.ns]) == 'undefined') {
                console.log("Trying to create namespace element " + o.ns + ", however no xmlns was sent to builder previously");
            }
            ns = xmlns[o.ns];
        }
        
        
        if (typeof(o) == 'string') {
            return parentNode.appendChild(document.createTextNode(o));
        }
        o.tag = o.tag || 'div';
        if (o.ns && Roo.isIE) {
            ns = false;
            o.tag = o.ns + ':' + o.tag;
            
        }
        var el = ns ? document.createElementNS( ns, o.tag||'div') :  document.createElement(o.tag||'div');
        var useSet = el.setAttribute ? true : false; // In IE some elements don't have setAttribute
        for(var attr in o){
            
            if(attr == "tag" || attr == "ns" ||attr == "xmlns" ||attr == "children" || attr == "cn" || attr == "html" || 
                    attr == "style" || typeof o[attr] == "function") { continue; }
                    
            if(attr=="cls" && Roo.isIE){
                el.className = o["cls"];
            }else{
                if(useSet) { el.setAttribute(attr=="cls" ? 'class' : attr, o[attr]);}
                else { 
                    el[attr] = o[attr];
                }
            }
        }
        Roo.DomHelper.applyStyles(el, o.style);
        var cn = o.children || o.cn;
        if(cn){
            //http://bugs.kde.org/show_bug.cgi?id=71506
             if((cn instanceof Array) || (Roo.isSafari && typeof(cn.join) == "function")){
                for(var i = 0, len = cn.length; i < len; i++) {
                    createDom(cn[i], el);
                }
            }else{
                createDom(cn, el);
            }
        }
        if(o.html){
            el.innerHTML = o.html;
        }
        if(parentNode){
           parentNode.appendChild(el);
        }
        return el;
    };

    var ieTable = function(depth, s, h, e){
        tempTableEl.innerHTML = [s, h, e].join('');
        var i = -1, el = tempTableEl;
        while(++i < depth && el.firstChild){
            el = el.firstChild;
        }
        return el;
    };

    // kill repeat to save bytes
    var ts = '<table>',
        te = '</table>',
        tbs = ts+'<tbody>',
        tbe = '</tbody>'+te,
        trs = tbs + '<tr>',
        tre = '</tr>'+tbe;

    /**
     * @ignore
     * Nasty code for IE's broken table implementation
     */
    var insertIntoTable = function(tag, where, el, html){
        if(!tempTableEl){
            tempTableEl = document.createElement('div');
        }
        var node;
        var before = null;
        if(tag == 'td'){
            if(where == 'afterbegin' || where == 'beforeend'){ // INTO a TD
                return;
            }
            if(where == 'beforebegin'){
                before = el;
                el = el.parentNode;
            } else{
                before = el.nextSibling;
                el = el.parentNode;
            }
            node = ieTable(4, trs, html, tre);
        }
        else if(tag == 'tr'){
            if(where == 'beforebegin'){
                before = el;
                el = el.parentNode;
                node = ieTable(3, tbs, html, tbe);
            } else if(where == 'afterend'){
                before = el.nextSibling;
                el = el.parentNode;
                node = ieTable(3, tbs, html, tbe);
            } else{ // INTO a TR
                if(where == 'afterbegin'){
                    before = el.firstChild;
                }
                node = ieTable(4, trs, html, tre);
            }
        } else if(tag == 'tbody'){
            if(where == 'beforebegin'){
                before = el;
                el = el.parentNode;
                node = ieTable(2, ts, html, te);
            } else if(where == 'afterend'){
                before = el.nextSibling;
                el = el.parentNode;
                node = ieTable(2, ts, html, te);
            } else{
                if(where == 'afterbegin'){
                    before = el.firstChild;
                }
                node = ieTable(3, tbs, html, tbe);
            }
        } else{ // TABLE
            if(where == 'beforebegin' || where == 'afterend'){ // OUTSIDE the table
                return;
            }
            if(where == 'afterbegin'){
                before = el.firstChild;
            }
            node = ieTable(2, ts, html, te);
        }
        el.insertBefore(node, before);
        return node;
    };
    
    // this is a bit like the react update code...
    // 
    
    var updateNode = function(from, to)
    {
        // should we handle non-standard elements?
        Roo.log(["UpdateNode" , from, to]);
        if (from.nodeType != to.nodeType) {
            Roo.log(["ReplaceChild - mismatch notType" , to, from ]);
            from.parentNode.replaceChild(to, from);
        }
        
        if (from.nodeType == 3) {
            // assume it's text?!
            if (from.data == to.data) {
                return;
            }
            from.data = to.data;
            return;
        }
        if (!from.parentNode) {
            // not sure why this is happening?
            return;
        }
        // assume 'to' doesnt have '1/3 nodetypes!
        // not sure why, by from, parent node might not exist?
        if (from.nodeType !=1 || from.tagName != to.tagName) {
            Roo.log(["ReplaceChild" , from, to ]);
            
            from.parentNode.replaceChild(to, from);
            return;
        }
        // compare attributes
        var ar = Array.from(from.attributes);
        for(var i = 0; i< ar.length;i++) {
            if (to.hasAttribute(ar[i].name)) {
                continue;
            }
            if (ar[i].name == 'id') { // always keep ids?
               continue;
            }
            //if (ar[i].name == 'style') {
            //   throw "style removed?";
            //}
            Roo.log("removeAttribute" + ar[i].name);
            from.removeAttribute(ar[i].name);
        }
        ar = to.attributes;
        for(var i = 0; i< ar.length;i++) {
            if (from.getAttribute(ar[i].name) == to.getAttribute(ar[i].name)) {
                Roo.log("skipAttribute " + ar[i].name  + '=' + to.getAttribute(ar[i].name));
                continue;
            }
            Roo.log("updateAttribute " + ar[i].name + '=>' + to.getAttribute(ar[i].name));
            from.setAttribute(ar[i].name, to.getAttribute(ar[i].name));
        }
        // children
        var far = Array.from(from.childNodes);
        var tar = Array.from(to.childNodes);
        // if the lengths are different.. then it's probably a editable content change, rather than
        // a change of the block definition..
        
        // this did notwork , as our rebuilt nodes did not include ID's so did not match at all.
         /*if (from.innerHTML == to.innerHTML) {
            return;
        }
        if (far.length != tar.length) {
            from.innerHTML = to.innerHTML;
            return;
        }
        */
        
        for(var i = 0; i < Math.max(tar.length, far.length); i++) {
            if (i >= far.length) {
                from.appendChild(tar[i]);
                Roo.log(["add", tar[i]]);
                
            } else if ( i  >= tar.length) {
                from.removeChild(far[i]);
                Roo.log(["remove", far[i]]);
            } else {
                
                updateNode(far[i], tar[i]);
            }    
        }
        
        
        
        
    };
    
    

    return {
        /** True to force the use of DOM instead of html fragments @type Boolean */
        useDom : false,
    
        /**
         * Returns the markup for the passed Element(s) config
         * @param {Object} o The Dom object spec (and children)
         * @return {String}
         */
        markup : function(o){
            return createHtml(o);
        },
    
        /**
         * Applies a style specification to an element
         * @param {String/HTMLElement} el The element to apply styles to
         * @param {String/Object/Function} styles A style specification string eg "width:100px", or object in the form {width:"100px"}, or
         * a function which returns such a specification.
         */
        applyStyles : function(el, styles){
            if(styles){
               el = Roo.fly(el);
               if(typeof styles == "string"){
                   var re = /\s?([a-z\-]*)\:\s?([^;]*);?/gi;
                   var matches;
                   while ((matches = re.exec(styles)) != null){
                       el.setStyle(matches[1], matches[2]);
                   }
               }else if (typeof styles == "object"){
                   for (var style in styles){
                      el.setStyle(style, styles[style]);
                   }
               }else if (typeof styles == "function"){
                    Roo.DomHelper.applyStyles(el, styles.call());
               }
            }
        },
    
        /**
         * Inserts an HTML fragment into the Dom
         * @param {String} where Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd.
         * @param {HTMLElement} el The context element
         * @param {String} html The HTML fragmenet
         * @return {HTMLElement} The new node
         */
        insertHtml : function(where, el, html){
            where = where.toLowerCase();
            if(el.insertAdjacentHTML){
                if(tableRe.test(el.tagName)){
                    var rs;
                    if(rs = insertIntoTable(el.tagName.toLowerCase(), where, el, html)){
                        return rs;
                    }
                }
                switch(where){
                    case "beforebegin":
                        el.insertAdjacentHTML('BeforeBegin', html);
                        return el.previousSibling;
                    case "afterbegin":
                        el.insertAdjacentHTML('AfterBegin', html);
                        return el.firstChild;
                    case "beforeend":
                        el.insertAdjacentHTML('BeforeEnd', html);
                        return el.lastChild;
                    case "afterend":
                        el.insertAdjacentHTML('AfterEnd', html);
                        return el.nextSibling;
                }
                throw 'Illegal insertion point -> "' + where + '"';
            }
            var range = el.ownerDocument.createRange();
            var frag;
            switch(where){
                 case "beforebegin":
                    range.setStartBefore(el);
                    frag = range.createContextualFragment(html);
                    el.parentNode.insertBefore(frag, el);
                    return el.previousSibling;
                 case "afterbegin":
                    if(el.firstChild){
                        range.setStartBefore(el.firstChild);
                        frag = range.createContextualFragment(html);
                        el.insertBefore(frag, el.firstChild);
                        return el.firstChild;
                    }else{
                        el.innerHTML = html;
                        return el.firstChild;
                    }
                case "beforeend":
                    if(el.lastChild){
                        range.setStartAfter(el.lastChild);
                        frag = range.createContextualFragment(html);
                        el.appendChild(frag);
                        return el.lastChild;
                    }else{
                        el.innerHTML = html;
                        return el.lastChild;
                    }
                case "afterend":
                    range.setStartAfter(el);
                    frag = range.createContextualFragment(html);
                    el.parentNode.insertBefore(frag, el.nextSibling);
                    return el.nextSibling;
                }
                throw 'Illegal insertion point -> "' + where + '"';
        },
    
        /**
         * Creates new Dom element(s) and inserts them before el
         * @param {String/HTMLElement/Element} el The context element
         * @param {Object/String} o The Dom object spec (and children) or raw HTML blob
         * @param {Boolean} returnElement (optional) true to return a Roo.Element
         * @return {HTMLElement/Roo.Element} The new node
         */
        insertBefore : function(el, o, returnElement){
            return this.doInsert(el, o, returnElement, "beforeBegin");
        },
    
        /**
         * Creates new Dom element(s) and inserts them after el
         * @param {String/HTMLElement/Element} el The context element
         * @param {Object} o The Dom object spec (and children)
         * @param {Boolean} returnElement (optional) true to return a Roo.Element
         * @return {HTMLElement/Roo.Element} The new node
         */
        insertAfter : function(el, o, returnElement){
            return this.doInsert(el, o, returnElement, "afterEnd", "nextSibling");
        },
    
        /**
         * Creates new Dom element(s) and inserts them as the first child of el
         * @param {String/HTMLElement/Element} el The context element
         * @param {Object/String} o The Dom object spec (and children) or raw HTML blob
         * @param {Boolean} returnElement (optional) true to return a Roo.Element
         * @return {HTMLElement/Roo.Element} The new node
         */
        insertFirst : function(el, o, returnElement){
            return this.doInsert(el, o, returnElement, "afterBegin");
        },
    
        // private
        doInsert : function(el, o, returnElement, pos, sibling){
            el = Roo.getDom(el);
            var newNode;
            if(this.useDom || o.ns){
                newNode = createDom(o, null);
                el.parentNode.insertBefore(newNode, sibling ? el[sibling] : el);
            }else{
                var html = createHtml(o);
                newNode = this.insertHtml(pos, el, html);
            }
            return returnElement ? Roo.get(newNode, true) : newNode;
        },
    
        /**
         * Creates new Dom element(s) and appends them to el
         * @param {String/HTMLElement/Element} el The context element
         * @param {Object/String} o The Dom object spec (and children) or raw HTML blob
         * @param {Boolean} returnElement (optional) true to return a Roo.Element
         * @return {HTMLElement/Roo.Element} The new node
         */
        append : function(el, o, returnElement){
            el = Roo.getDom(el);
            var newNode;
            if(this.useDom || o.ns){
                newNode = createDom(o, null);
                el.appendChild(newNode);
            }else{
                var html = createHtml(o);
                newNode = this.insertHtml("beforeEnd", el, html);
            }
            return returnElement ? Roo.get(newNode, true) : newNode;
        },
    
        /**
         * Creates new Dom element(s) and overwrites the contents of el with them
         * @param {String/HTMLElement/Element} el The context element
         * @param {Object/String} o The Dom object spec (and children) or raw HTML blob
         * @param {Boolean} returnElement (optional) true to return a Roo.Element
         * @return {HTMLElement/Roo.Element} The new node
         */
        overwrite : function(el, o, returnElement)
        {
            el = Roo.getDom(el);
            if (o.ns) {
              
                while (el.childNodes.length) {
                    el.removeChild(el.firstChild);
                }
                createDom(o, el);
            } else {
                el.innerHTML = createHtml(o);   
            }
            
            return returnElement ? Roo.get(el.firstChild, true) : el.firstChild;
        },
    
        /**
         * Creates a new Roo.DomHelper.Template from the Dom object spec
         * @param {Object} o The Dom object spec (and children)
         * @return {Roo.DomHelper.Template} The new template
         */
        createTemplate : function(o){
            var html = createHtml(o);
            return new Roo.Template(html);
        },
         /**
         * Updates the first element with the spec from the o (replacing if necessary)
         * This iterates through the children, and updates attributes / children etc..
         * @param {String/HTMLElement/Element} el The context element
         * @param {Object/String} o The Dom object spec (and children) or raw HTML blob
         */
        
        update : function(el, o)
        {
            updateNode(Roo.getDom(el), createDom(o));
            
        }
        
        
    };
}();
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
* @class Roo.Template
* Represents an HTML fragment template. Templates can be precompiled for greater performance.
* For a list of available format functions, see {@link Roo.util.Format}.<br />
* Usage:
<pre><code>
var t = new Roo.Template({
    html :  '&lt;div name="{id}"&gt;' + 
        '&lt;span class="{cls}"&gt;{name:trim} {someval:this.myformat}{value:ellipsis(10)}&lt;/span&gt;' +
        '&lt;/div&gt;',
    myformat: function (value, allValues) {
        return 'XX' + value;
    }
});
t.append('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});
</code></pre>
* For more information see this blog post with examples:
*  <a href="http://www.cnitblog.com/seeyeah/archive/2011/12/30/38728.html/">DomHelper
     - Create Elements using DOM, HTML fragments and Templates</a>. 
* @constructor
* @param {Object} cfg - Configuration object.
*/
Roo.Template = function(cfg){
    // BC!
    if(cfg instanceof Array){
        cfg = cfg.join("");
    }else if(arguments.length > 1){
        cfg = Array.prototype.join.call(arguments, "");
    }
    
    
    if (typeof(cfg) == 'object') {
        Roo.apply(this,cfg)
    } else {
        // bc
        this.html = cfg;
    }
    if (this.url) {
        this.load();
    }
    
};
Roo.Template.prototype = {
    
    /**
     * @cfg {Function} onLoad Called after the template has been loaded and complied (usually from a remove source)
     */
    onLoad : false,
    
    
    /**
     * @cfg {String} url  The Url to load the template from. beware if you are loading from a url, the data may not be ready if you use it instantly..
     *                    it should be fixed so that template is observable...
     */
    url : false,
    /**
     * @cfg {String} html  The HTML fragment or an array of fragments to join("") or multiple arguments to join("")
     */
    html : '',
    
    
    compiled : false,
    loaded : false,
    /**
     * Returns an HTML fragment of this template with the specified values applied.
     * @param {Object} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
     * @return {String} The HTML fragment
     */
    
   
    
    applyTemplate : function(values){
        //Roo.log(["applyTemplate", values]);
        try {
           
            if(this.compiled){
                return this.compiled(values);
            }
            var useF = this.disableFormats !== true;
            var fm = Roo.util.Format, tpl = this;
            var fn = function(m, name, format, args){
                if(format && useF){
                    if(format.substr(0, 5) == "this."){
                        return tpl.call(format.substr(5), values[name], values);
                    }else{
                        if(args){
                            // quoted values are required for strings in compiled templates, 
                            // but for non compiled we need to strip them
                            // quoted reversed for jsmin
                            var re = /^\s*['"](.*)["']\s*$/;
                            args = args.split(',');
                            for(var i = 0, len = args.length; i < len; i++){
                                args[i] = args[i].replace(re, "$1");
                            }
                            args = [values[name]].concat(args);
                        }else{
                            args = [values[name]];
                        }
                        return fm[format].apply(fm, args);
                    }
                }else{
                    return values[name] !== undefined ? values[name] : "";
                }
            };
            return this.html.replace(this.re, fn);
        } catch (e) {
            Roo.log(e);
            throw e;
        }
         
    },
    
    loading : false,
      
    load : function ()
    {
         
        if (this.loading) {
            return;
        }
        var _t = this;
        
        this.loading = true;
        this.compiled = false;
        
        var cx = new Roo.data.Connection();
        cx.request({
            url : this.url,
            method : 'GET',
            success : function (response) {
                _t.loading = false;
                _t.url = false;
                
                _t.set(response.responseText,true);
                _t.loaded = true;
                if (_t.onLoad) {
                    _t.onLoad();
                }
             },
            failure : function(response) {
                Roo.log("Template failed to load from " + _t.url);
                _t.loading = false;
            }
        });
    },

    /**
     * Sets the HTML used as the template and optionally compiles it.
     * @param {String} html
     * @param {Boolean} compile (optional) True to compile the template (defaults to undefined)
     * @return {Roo.Template} this
     */
    set : function(html, compile){
        this.html = html;
        this.compiled = false;
        if(compile){
            this.compile();
        }
        return this;
    },
    
    /**
     * True to disable format functions (defaults to false)
     * @type Boolean
     */
    disableFormats : false,
    
    /**
    * The regular expression used to match template variables 
    * @type RegExp
    * @property 
    */
    re : /\{([\w-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g,
    
    /**
     * Compiles the template into an internal function, eliminating the RegEx overhead.
     * @return {Roo.Template} this
     */
    compile : function(){
        var fm = Roo.util.Format;
        var useF = this.disableFormats !== true;
        var sep = Roo.isGecko ? "+" : ",";
        var fn = function(m, name, format, args){
            if(format && useF){
                args = args ? ',' + args : "";
                if(format.substr(0, 5) != "this."){
                    format = "fm." + format + '(';
                }else{
                    format = 'this.call("'+ format.substr(5) + '", ';
                    args = ", values";
                }
            }else{
                args= ''; format = "(values['" + name + "'] == undefined ? '' : ";
            }
            return "'"+ sep + format + "values['" + name + "']" + args + ")"+sep+"'";
        };
        var body;
        // branched to use + in gecko and [].join() in others
        if(Roo.isGecko){
            body = "this.compiled = function(values){ return '" +
                   this.html.replace(/\\/g, '\\\\').replace(/(\r\n|\n)/g, '\\n').replace(/'/g, "\\'").replace(this.re, fn) +
                    "';};";
        }else{
            body = ["this.compiled = function(values){ return ['"];
            body.push(this.html.replace(/\\/g, '\\\\').replace(/(\r\n|\n)/g, '\\n').replace(/'/g, "\\'").replace(this.re, fn));
            body.push("'].join('');};");
            body = body.join('');
        }
        /**
         * eval:var:values
         * eval:var:fm
         */
        try {
            eval(body);
        } catch(e) {
            Roo.log(e); // probably eval not allowed.
        }
        return this;
    },
    
    // private function used to call members
    call : function(fnName, value, allValues){
        return this[fnName](value, allValues);
    },
    
    /**
     * Applies the supplied values to the template and inserts the new node(s) as the first child of el.
     * @param {String/HTMLElement/Roo.Element} el The context element
     * @param {Object} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
     * @param {Boolean} returnElement (optional) true to return a Roo.Element (defaults to undefined)
     * @return {HTMLElement/Roo.Element} The new node or Element
     */
    insertFirst: function(el, values, returnElement){
        return this.doInsert('afterBegin', el, values, returnElement);
    },

    /**
     * Applies the supplied values to the template and inserts the new node(s) before el.
     * @param {String/HTMLElement/Roo.Element} el The context element
     * @param {Object} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
     * @param {Boolean} returnElement (optional) true to return a Roo.Element (defaults to undefined)
     * @return {HTMLElement/Roo.Element} The new node or Element
     */
    insertBefore: function(el, values, returnElement){
        return this.doInsert('beforeBegin', el, values, returnElement);
    },

    /**
     * Applies the supplied values to the template and inserts the new node(s) after el.
     * @param {String/HTMLElement/Roo.Element} el The context element
     * @param {Object} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
     * @param {Boolean} returnElement (optional) true to return a Roo.Element (defaults to undefined)
     * @return {HTMLElement/Roo.Element} The new node or Element
     */
    insertAfter : function(el, values, returnElement){
        return this.doInsert('afterEnd', el, values, returnElement);
    },
    
    /**
     * Applies the supplied values to the template and appends the new node(s) to el.
     * @param {String/HTMLElement/Roo.Element} el The context element
     * @param {Object} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
     * @param {Boolean} returnElement (optional) true to return a Roo.Element (defaults to undefined)
     * @return {HTMLElement/Roo.Element} The new node or Element
     */
    append : function(el, values, returnElement){
        return this.doInsert('beforeEnd', el, values, returnElement);
    },

    doInsert : function(where, el, values, returnEl){
        el = Roo.getDom(el);
        var newNode = Roo.DomHelper.insertHtml(where, el, this.applyTemplate(values));
        return returnEl ? Roo.get(newNode, true) : newNode;
    },

    /**
     * Applies the supplied values to the template and overwrites the content of el with the new node(s).
     * @param {String/HTMLElement/Roo.Element} el The context element
     * @param {Object} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
     * @param {Boolean} returnElement (optional) true to return a Roo.Element (defaults to undefined)
     * @return {HTMLElement/Roo.Element} The new node or Element
     */
    overwrite : function(el, values, returnElement){
        el = Roo.getDom(el);
        el.innerHTML = this.applyTemplate(values);
        return returnElement ? Roo.get(el.firstChild, true) : el.firstChild;
    }
};
/**
 * Alias for {@link #applyTemplate}
 * @method
 */
Roo.Template.prototype.apply = Roo.Template.prototype.applyTemplate;

// backwards compat
Roo.DomHelper.Template = Roo.Template;

/**
 * Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.
 * @param {String/HTMLElement} el A DOM element or its id
 * @returns {Roo.Template} The created template
 * @static
 */
Roo.Template.from = function(el){
    el = Roo.getDom(el);
    return new Roo.Template(el.value || el.innerHTML);
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/*
 * This is code is also distributed under MIT license for use
 * with jQuery and prototype JavaScript libraries.
 */
/**
 * @class Roo.DomQuery
Provides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes and matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).
<p>
DomQuery supports most of the <a href="http://www.w3.org/TR/2005/WD-css3-selectors-20051215/">CSS3 selectors spec</a>, along with some custom selectors and basic XPath.</p>

<p>
All selectors, attribute filters and pseudos below can be combined infinitely in any order. For example "div.foo:nth-child(odd)[@foo=bar].bar:first" would be a perfectly valid selector. Node filters are processed in the order in which they appear, which allows you to optimize your queries for your document structure.
</p>
<h4>Element Selectors:</h4>
<ul class="list">
    <li> <b>*</b> any element</li>
    <li> <b>E</b> an element with the tag E</li>
    <li> <b>E F</b> All descendent elements of E that have the tag F</li>
    <li> <b>E > F</b> or <b>E/F</b> all direct children elements of E that have the tag F</li>
    <li> <b>E + F</b> all elements with the tag F that are immediately preceded by an element with the tag E</li>
    <li> <b>E ~ F</b> all elements with the tag F that are preceded by a sibling element with the tag E</li>
</ul>
<h4>Attribute Selectors:</h4>
<p>The use of @ and quotes are optional. For example, div[@foo='bar'] is also a valid attribute selector.</p>
<ul class="list">
    <li> <b>E[foo]</b> has an attribute "foo"</li>
    <li> <b>E[foo=bar]</b> has an attribute "foo" that equals "bar"</li>
    <li> <b>E[foo^=bar]</b> has an attribute "foo" that starts with "bar"</li>
    <li> <b>E[foo$=bar]</b> has an attribute "foo" that ends with "bar"</li>
    <li> <b>E[foo*=bar]</b> has an attribute "foo" that contains the substring "bar"</li>
    <li> <b>E[foo%=2]</b> has an attribute "foo" that is evenly divisible by 2</li>
    <li> <b>E[foo!=bar]</b> has an attribute "foo" that does not equal "bar"</li>
</ul>
<h4>Pseudo Classes:</h4>
<ul class="list">
    <li> <b>E:first-child</b> E is the first child of its parent</li>
    <li> <b>E:last-child</b> E is the last child of its parent</li>
    <li> <b>E:nth-child(<i>n</i>)</b> E is the <i>n</i>th child of its parent (1 based as per the spec)</li>
    <li> <b>E:nth-child(odd)</b> E is an odd child of its parent</li>
    <li> <b>E:nth-child(even)</b> E is an even child of its parent</li>
    <li> <b>E:only-child</b> E is the only child of its parent</li>
    <li> <b>E:checked</b> E is an element that is has a checked attribute that is true (e.g. a radio or checkbox) </li>
    <li> <b>E:first</b> the first E in the resultset</li>
    <li> <b>E:last</b> the last E in the resultset</li>
    <li> <b>E:nth(<i>n</i>)</b> the <i>n</i>th E in the resultset (1 based)</li>
    <li> <b>E:odd</b> shortcut for :nth-child(odd)</li>
    <li> <b>E:even</b> shortcut for :nth-child(even)</li>
    <li> <b>E:contains(foo)</b> E's innerHTML contains the substring "foo"</li>
    <li> <b>E:nodeValue(foo)</b> E contains a textNode with a nodeValue that equals "foo"</li>
    <li> <b>E:not(S)</b> an E element that does not match simple selector S</li>
    <li> <b>E:has(S)</b> an E element that has a descendent that matches simple selector S</li>
    <li> <b>E:next(S)</b> an E element whose next sibling matches simple selector S</li>
    <li> <b>E:prev(S)</b> an E element whose previous sibling matches simple selector S</li>
</ul>
<h4>CSS Value Selectors:</h4>
<ul class="list">
    <li> <b>E{display=none}</b> css value "display" that equals "none"</li>
    <li> <b>E{display^=none}</b> css value "display" that starts with "none"</li>
    <li> <b>E{display$=none}</b> css value "display" that ends with "none"</li>
    <li> <b>E{display*=none}</b> css value "display" that contains the substring "none"</li>
    <li> <b>E{display%=2}</b> css value "display" that is evenly divisible by 2</li>
    <li> <b>E{display!=none}</b> css value "display" that does not equal "none"</li>
</ul>
 * @static
 */
Roo.DomQuery = function(){
    var cache = {}, simpleCache = {}, valueCache = {};
    var nonSpace = /\S/;
    var trimRe = /^\s+|\s+$/g;
    var tplRe = /\{(\d+)\}/g;
    var modeRe = /^(\s?[\/>+~]\s?|\s|$)/;
    var tagTokenRe = /^(#)?([\w-\*]+)/;
    var nthRe = /(\d*)n\+?(\d*)/, nthRe2 = /\D/;

    function child(p, index){
        var i = 0;
        var n = p.firstChild;
        while(n){
            if(n.nodeType == 1){
               if(++i == index){
                   return n;
               }
            }
            n = n.nextSibling;
        }
        return null;
    };

    function next(n){
        while((n = n.nextSibling) && n.nodeType != 1);
        return n;
    };

    function prev(n){
        while((n = n.previousSibling) && n.nodeType != 1);
        return n;
    };

    function children(d){
        var n = d.firstChild, ni = -1;
 	    while(n){
 	        var nx = n.nextSibling;
 	        if(n.nodeType == 3 && !nonSpace.test(n.nodeValue)){
 	            d.removeChild(n);
 	        }else{
 	            n.nodeIndex = ++ni;
 	        }
 	        n = nx;
 	    }
 	    return this;
 	};

    

    
     

    function concat(a, b){
        if(b.slice){
            return a.concat(b);
        }
        for(var i = 0, l = b.length; i < l; i++){
            a[a.length] = b[i];
        }
        return a;
    }

   
   

    


    // This is for IE MSXML which does not support expandos.
    // IE runs the same speed using setAttribute, however FF slows way down
    // and Safari completely fails so they need to continue to use expandos.
    var isIE = window.ActiveXObject ? true : false;

    // this eval is stop the compressor from
    // renaming the variable to something shorter
    
    /** eval:var:batch */
    var batch = 30803; 

    var key = 30803;

    function nodupIEXml(cs){
        var d = ++key;
        cs[0].setAttribute("_nodup", d);
        var r = [cs[0]];
        for(var i = 1, len = cs.length; i < len; i++){
            var c = cs[i];
            if(!c.getAttribute("_nodup") != d){
                c.setAttribute("_nodup", d);
                r[r.length] = c;
            }
        }
        for(var i = 0, len = cs.length; i < len; i++){
            cs[i].removeAttribute("_nodup");
        }
        return r;
    }

   
    function quickDiffIEXml(c1, c2){
        var d = ++key;
        for(var i = 0, len = c1.length; i < len; i++){
            c1[i].setAttribute("_qdiff", d);
        }
        var r = [];
        for(var i = 0, len = c2.length; i < len; i++){
            if(c2[i].getAttribute("_qdiff") != d){
                r[r.length] = c2[i];
            }
        }
        for(var i = 0, len = c1.length; i < len; i++){
           c1[i].removeAttribute("_qdiff");
        }
        return r;
    }

    function quickDiff(c1, c2){
        var len1 = c1.length;
        if(!len1){
            return c2;
        }
        if(isIE && c1[0].selectSingleNode){
            return quickDiffIEXml(c1, c2);
        }
        var d = ++key;
        for(var i = 0; i < len1; i++){
            c1[i]._qdiff = d;
        }
        var r = [];
        for(var i = 0, len = c2.length; i < len; i++){
            if(c2[i]._qdiff != d){
                r[r.length] = c2[i];
            }
        }
        return r;
    }
	
	function quickId(ns, mode, root, id)
	{
		if(ns == root){
		   var d = root.ownerDocument || root;
		   return d.getElementById(id);
		}
		ns =  getNodes(ns, mode, "*");
		return Roo.DomQuery.byId(ns, null, id);
	}
	function getNodes(ns, mode, tagName)
	{
		var result = [], ri = -1, cs;
		if(!ns){
			return result;
		}
		tagName = tagName || "*";
		if(typeof ns.getElementsByTagName != "undefined"){
			ns = [ns];
		}
		if(!mode){
			for(var i = 0, ni; ni = ns[i]; i++){
				cs = ni.getElementsByTagName(tagName);
				for(var j = 0, ci; ci = cs[j]; j++){
					result[++ri] = ci;
				}
			}
		}else if(mode == "/" || mode == ">"){
			var utag = tagName.toUpperCase();
			for(var i = 0, ni, cn; ni = ns[i]; i++){
				cn = ni.children || ni.childNodes;
				for(var j = 0, cj; cj = cn[j]; j++){
					if(cj.nodeName == utag || cj.nodeName == tagName  || tagName == '*'){
						result[++ri] = cj;
					}
				}
			}
		}else if(mode == "+"){
			var utag = tagName.toUpperCase();
			for(var i = 0, n; n = ns[i]; i++){
				while((n = n.nextSibling) && n.nodeType != 1);
				if(n && (n.nodeName == utag || n.nodeName == tagName || tagName == '*')){
					result[++ri] = n;
				}
			}
		}else if(mode == "~"){
			for(var i = 0, n; n = ns[i]; i++){
				while((n = n.nextSibling) && (n.nodeType != 1 || (tagName == '*' || n.tagName.toLowerCase()!=tagName)));
				if(n){
					result[++ri] = n;
				}
			}
		}
		return result;
	}
	function byId (cs, attr, id)
	{
		if(cs.tagName || cs == document){
			cs = [cs];
		}
		if(!id){
			return cs;
		}
		var r = [], ri = -1;
		for(var i = 0,ci; ci = cs[i]; i++){
			if(ci && ci.id == id){
				r[++ri] = ci;
				return r;
			}
		}
		return r;
	}
	
	
	function byTag(cs, tagName)
	{
		if(cs.tagName || cs == document){
			cs = [cs];
		}
		if(!tagName){
			return cs;
		}
		var r = [], ri = -1;
		tagName = tagName.toLowerCase();
		for(var i = 0, ci; ci = cs[i]; i++){
			if(ci.nodeType == 1 && ci.tagName.toLowerCase()==tagName){
				r[++ri] = ci;
			}
		}
		return r;
	}

	
	
	function byClassName(c, a, v)
	{
		if(!v){
			return c;
		}
		var r = [], ri = -1, cn;
		for(var i = 0, ci; ci = c[i]; i++){
		
		
			if((' '+
		( (ci instanceof SVGElement) ? ci.className.baseVal : ci.className)
		 +' ').indexOf(v) != -1){
				r[++ri] = ci;
			}
		}
		return r;
	}
	function byAttribute(cs, attr, value, op, custom)
	{
		var r = [], ri = -1, st = custom=="{";
		var f = Roo.DomQuery.operators[op];
		for(var i = 0, ci; ci = cs[i]; i++){
			var a;
			if(st){
				a = Roo.DomQuery.getStyle(ci, attr);
			}
			else if(attr == "class" || attr == "className"){
				a = (ci instanceof SVGElement) ? ci.className.baseVal : ci.className;
			}else if(attr == "for"){
				a = ci.htmlFor;
			}else if(attr == "href"){
				a = ci.getAttribute("href", 2);
			}else{
				a = ci.getAttribute(attr);
			}
			if((f && f(a, value)) || (!f && a)){
				r[++ri] = ci;
			}
		}
		return r;
	}
	
	
	function nodup(cs)
	{
		if(!cs){
			return [];
		}
		var len = cs.length, c, i, r = cs, cj, ri = -1;
		if(!len || typeof cs.nodeType != "undefined" || len == 1){
			return cs;
		}
		if(isIE && typeof cs[0].selectSingleNode != "undefined"){
			return nodupIEXml(cs);
		}
		var d = ++key;
		cs[0]._nodup = d;
		for(i = 1; c = cs[i]; i++){
			if(c._nodup != d){
				c._nodup = d;
			}else{
				r = [];
				for(var j = 0; j < i; j++){
					r[++ri] = cs[j];
				}
				for(j = i+1; cj = cs[j]; j++){
					if(cj._nodup != d){
						cj._nodup = d;
						r[++ri] = cj;
					}
				}
				return r;
			}
		}
		return r;
	}
	
	// enable a generic call to all of the above functions.
	
	var cmdcall = {
		quickId : function(n, root, mode, arg) {
			return quickId(n, mode, root, arg);
		},
		getNodes: function(n, root, mode, arg) {
			return getNodes(n, mode, arg)
		},
		byId: function(n, root, mode, arg) {
			return byId(n, null, arg);
		},
		byTag: function(n, root, mode, arg) {
			return byTag(n, arg);
		},
		byClassName: function(n, root, mode, arg) {
			return  byClassName(n, null, " " + arg[1] + " ");
		},
		byPseudo: function(n, root, mode, arg) {
			return byPseudo(n, arg[1], arg[2]);
		},
		byAttribute: function(n, root, mode, arg) {
           return byAttribute(n, arg[2], arg[4], arg[3], arg[1]);
		},
        byIdAr: function(n, root, mode, arg) {
            return byId(n, null, arg[1]);
        }
 	};
   
	function byPseudo (cs, name, value)
	{
		return Roo.DomQuery.pseudos[name](cs, value);
	}
	
    function runFn(root, cmds)
	{
		 
		var mode;
		++Roo.DomQuery.batch;
		var n = root || document;
		for(var i = 0; i < cmds.length;i++) {
			var cmd = cmds[i];
			if (typeof(cmd) == "string") {
				mode = cmd;
				continue;
			}
			if (cmd == "attrValue") {
				return {
					firstChild:{
						nodeValue: Roo.DomQuery.attrValue(n, cmd[1][1])
					}
				};
			}
			n = cmdcall[cmd[0]](n, root,  mode,  cmd[1]);
		}
		return  nodup(n);
		
	}
	
	 

    return {
        getStyle : function(el, name){
            return Roo.fly(el).getStyle(name);
        },
		
		
		
		
        /**
         * Compiles a selector/xpath query into a reusable function. The returned function
         * takes one parameter "root" (optional), which is the context node from where the query should start.
         * @param {String} selector The selector/xpath query
         * @param {String} type (optional) Either "select" (the default) or "simple" for a simple selector match
         * @return {Function}
         */
        compile : function(path, type)
		{
            type = type || "select";
        
			var cmdar = [];
            var q = path, mode, lq;
            var tk = Roo.DomQuery.matchers;
            var tklen = tk.length;
            var mm;

            // accept leading mode switch
            var lmode = q.match(modeRe);
            if(lmode && lmode[1]){
                cmdar.push(lmode[1].replace(trimRe, ""));
                q = q.replace(lmode[1], "");
            }
            // strip leading slashes
            while(path.substr(0, 1)=="/"){
                path = path.substr(1);
            }

            while(q && lq != q){
                lq = q;
                var tm = q.match(tagTokenRe);
                if(type == "select"){
                    if(tm){
                        if(tm[1] == "#"){
                			cmdar.push([ "quickId" , tm[2] ]);
                        }else{
                			cmdar.push([ "getNodes" , tm[2] ]);
                        }
                        q = q.replace(tm[0], "");
                    }else if(q.substr(0, 1) != '@'){
                		cmdar.push([ "getNodes" , "*" ]);
                    }
                }else{
                    if(tm){
                        if(tm[1] == "#"){
                			cmdar.push([ "byId" , tm[2] ]);
                        }else{
                			cmdar.push([ "byTag", tm[2] ]);
                        }
                        q = q.replace(tm[0], "");
                    }
                }
                while(!(mm = q.match(modeRe))){
                    var matched = false;
                    for(var j = 0; j < tklen; j++){
                        var t = tk[j];
                        var m = q.match(t.re);
                        if(m){
                			cmdar.push([ t.method, m]);
				            q = q.replace(m[0], "");
                            matched = true;
                            break;
                        }
                    }
                    // prevent infinite loop on bad selector
                    if(!matched){
                        throw 'Error parsing selector, parsing failed at "' + q + '"';
                    }
                }
                if(mm[1]){
                	cmdar.push(mm[1].replace(trimRe, ""));
                    q = q.replace(mm[1], "");
                }
            }
 			return runFn.createDelegate(null, [ cmdar ], true);
			
        },

        /**
         * Selects a group of elements.
         * @param {String} selector The selector/xpath query (can be a comma separated list of selectors)
         * @param {Node} root (optional) The start of the query (defaults to document).
         * @return {Array}
         */
        select : function(path, root, type){
            if(!root || root == document){
                root = document;
            }
            if(typeof root == "string"){
                root = document.getElementById(root);
            }
            var paths = path.split(",");
            var results = [];
            for(var i = 0, len = paths.length; i < len; i++){
                var p = paths[i].replace(trimRe, "");
                if(!cache[p]){
                    cache[p] = Roo.DomQuery.compile(p);
                    if(!cache[p]){
                        throw p + " is not a valid selector";
                    }
                }
                var result = cache[p](root);
                if(result && result != document){
                    results = results.concat(result);
                }
            }
            if(paths.length > 1){
                return  nodup(results);
            }
            return results;
        },

        /**
         * Selects a single element.
         * @param {String} selector The selector/xpath query
         * @param {Node} root (optional) The start of the query (defaults to document).
         * @return {Element}
         */
        selectNode : function(path, root){
            return Roo.DomQuery.select(path, root)[0];
        },

        /**
         * Selects the value of a node, optionally replacing null with the defaultValue.
         * @param {String} selector The selector/xpath query
         * @param {Node} root (optional) The start of the query (defaults to document).
         * @param {String} defaultValue
         */
        selectValue : function(path, root, defaultValue){
            path = path.replace(trimRe, "");
            if(!valueCache[path]){
                valueCache[path] = Roo.DomQuery.compile(path, "select");
            }
            var n = valueCache[path](root);
            n = n[0] ? n[0] : n;
            var v = (n && n.firstChild ? n.firstChild.nodeValue : null);
            return ((v === null||v === undefined||v==='') ? defaultValue : v);
        },

        /**
         * Selects the value of a node, parsing integers and floats.
         * @param {String} selector The selector/xpath query
         * @param {Node} root (optional) The start of the query (defaults to document).
         * @param {Number} defaultValue
         * @return {Number}
         */
        selectNumber : function(path, root, defaultValue){
            var v = Roo.DomQuery.selectValue(path, root, defaultValue || 0);
            return parseFloat(v);
        },

        /**
         * Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)
         * @param {String/HTMLElement/Array} el An element id, element or array of elements
         * @param {String} selector The simple selector to test
         * @return {Boolean}
         */
        is : function(el, ss){
            if(typeof el == "string"){
                el = document.getElementById(el);
            }
            var isArray = (el instanceof Array);
            var result = Roo.DomQuery.filter(isArray ? el : [el], ss);
            return isArray ? (result.length == el.length) : (result.length > 0);
        },

        /**
         * Filters an array of elements to only include matches of a simple selector (e.g. div.some-class or span:first-child)
         * @param {Array} el An array of elements to filter
         * @param {String} selector The simple selector to test
         * @param {Boolean} nonMatches If true, it returns the elements that DON'T match
         * the selector instead of the ones that match
         * @return {Array}
         */
        filter : function(els, ss, nonMatches){
            ss = ss.replace(trimRe, "");
            if(!simpleCache[ss]){
                simpleCache[ss] = Roo.DomQuery.compile(ss, "simple");
            }
            var result = simpleCache[ss](els);
            return nonMatches ? quickDiff(result, els) : result;
        },

        /**
         * Collection of matching regular expressions and code snippets.
         */
        matchers : [
			{
                re: /^\.([\w-]+)/,
 				method : 'byClassName'
            }, {
                re: /^\:([\w-]+)(?:\(((?:[^\s>\/]*|.*?))\))?/,
 				method : 'byPseudo'
            },{
                re: /^(?:([\[\{])(?:@)?([\w-]+)\s?(?:(=|.=)\s?['"]?(.*?)["']?)?[\]\}])/,
 				method: 'byAttribute'
            }, {
                re: /^#([\w-]+)/,
              //  select: 'n = Roo.DomQuery.byId(n, null, "{1}");',
				method: 'byIdAr'
            },{
                re: /^@([\w-]+)/,
                //select: 'return {firstChild:{nodeValue:Roo.DomQuery.attrValue(n, "{1}")}};',
				method : 'attrValue'
            }
        ],

        /**
         * Collection of operator comparison functions. The default operators are =, !=, ^=, $=, *=, %=, |= and ~=.
         * New operators can be added as long as the match the format <i>c</i>= where <i>c</i> is any character other than space, &gt; &lt;.
         */
        operators : {
            "=" : function(a, v){
                return a == v;
            },
            "!=" : function(a, v){
                return a != v;
            },
            "^=" : function(a, v){
                return a && a.substr(0, v.length) == v;
            },
            "$=" : function(a, v){
                return a && a.substr(a.length-v.length) == v;
            },
            "*=" : function(a, v){
                return a && a.indexOf(v) !== -1;
            },
            "%=" : function(a, v){
                return (a % v) == 0;
            },
            "|=" : function(a, v){
                return a && (a == v || a.substr(0, v.length+1) == v+'-');
            },
            "~=" : function(a, v){
                return a && (' '+a+' ').indexOf(' '+v+' ') != -1;
            }
        },

        /**
         * Collection of "pseudo class" processors. Each processor is passed the current nodeset (array)
         * and the argument (if any) supplied in the selector.
         */
        pseudos : {
            "first-child" : function(c){
                var r = [], ri = -1, n;
                for(var i = 0, ci; ci = n = c[i]; i++){
                    while((n = n.previousSibling) && n.nodeType != 1);
                    if(!n){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "last-child" : function(c){
                var r = [], ri = -1, n;
                for(var i = 0, ci; ci = n = c[i]; i++){
                    while((n = n.nextSibling) && n.nodeType != 1);
                    if(!n){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "nth-child" : function(c, a) {
                var r = [], ri = -1;
                var m = nthRe.exec(a == "even" && "2n" || a == "odd" && "2n+1" || !nthRe2.test(a) && "n+" + a || a);
                var f = (m[1] || 1) - 0, l = m[2] - 0;
                for(var i = 0, n; n = c[i]; i++){
                    var pn = n.parentNode;
                    if (batch != pn._batch) {
                        var j = 0;
                        for(var cn = pn.firstChild; cn; cn = cn.nextSibling){
                            if(cn.nodeType == 1){
                               cn.nodeIndex = ++j;
                            }
                        }
                        pn._batch = batch;
                    }
                    if (f == 1) {
                        if (l == 0 || n.nodeIndex == l){
                            r[++ri] = n;
                        }
                    } else if ((n.nodeIndex + l) % f == 0){
                        r[++ri] = n;
                    }
                }

                return r;
            },

            "only-child" : function(c){
                var r = [], ri = -1;;
                for(var i = 0, ci; ci = c[i]; i++){
                    if(!prev(ci) && !next(ci)){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "empty" : function(c){
                var r = [], ri = -1;
                for(var i = 0, ci; ci = c[i]; i++){
                    var cns = ci.childNodes, j = 0, cn, empty = true;
                    while(cn = cns[j]){
                        ++j;
                        if(cn.nodeType == 1 || cn.nodeType == 3){
                            empty = false;
                            break;
                        }
                    }
                    if(empty){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "contains" : function(c, v){
                var r = [], ri = -1;
                for(var i = 0, ci; ci = c[i]; i++){
                    if((ci.textContent||ci.innerText||'').indexOf(v) != -1){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "nodeValue" : function(c, v){
                var r = [], ri = -1;
                for(var i = 0, ci; ci = c[i]; i++){
                    if(ci.firstChild && ci.firstChild.nodeValue == v){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "checked" : function(c){
                var r = [], ri = -1;
                for(var i = 0, ci; ci = c[i]; i++){
                    if(ci.checked == true){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "not" : function(c, ss){
                return Roo.DomQuery.filter(c, ss, true);
            },

            "odd" : function(c){
                return this["nth-child"](c, "odd");
            },

            "even" : function(c){
                return this["nth-child"](c, "even");
            },

            "nth" : function(c, a){
                return c[a-1] || [];
            },

            "first" : function(c){
                return c[0] || [];
            },

            "last" : function(c){
                return c[c.length-1] || [];
            },

            "has" : function(c, ss){
                var s = Roo.DomQuery.select;
                var r = [], ri = -1;
                for(var i = 0, ci; ci = c[i]; i++){
                    if(s(ss, ci).length > 0){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "next" : function(c, ss){
                var is = Roo.DomQuery.is;
                var r = [], ri = -1;
                for(var i = 0, ci; ci = c[i]; i++){
                    var n = next(ci);
                    if(n && is(n, ss)){
                        r[++ri] = ci;
                    }
                }
                return r;
            },

            "prev" : function(c, ss){
                var is = Roo.DomQuery.is;
                var r = [], ri = -1;
                for(var i = 0, ci; ci = c[i]; i++){
                    var n = prev(ci);
                    if(n && is(n, ss)){
                        r[++ri] = ci;
                    }
                }
                return r;
            }
        },
		
		
		
		
		
		
		attrValue : function (n, attr)
		{
			if(!n.tagName && typeof n.length != "undefined"){
				n = n[0];
			}
			if(!n){
				return null;
			}
			if(attr == "for"){
				return n.htmlFor;
			}
			if(attr == "class" || attr == "className"){
			return (n instanceof SVGElement) ? n.className.baseVal : n.className;
			}
			return n.getAttribute(attr) || n[attr];
	
		}


    };
}();

/**
 * Selects an array of DOM nodes by CSS/XPath selector. Shorthand of {@link Roo.DomQuery#select}
 * @param {String} path The selector/xpath query
 * @param {Node} root (optional) The start of the query (defaults to document).
 * @return {Array}
 * @member Roo
 * @method query
 */
Roo.query = Roo.DomQuery.select;/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.util.Observable
 * Base class that provides a common interface for publishing events. Subclasses are expected to
 * to have a property "events" with all the events defined.<br>
 * For example:
 * <pre><code>
 Employee = function(name){
    this.name = name;
    this.addEvents({
        "fired" : true,
        "quit" : true
    });
 }
 Roo.extend(Employee, Roo.util.Observable);
</code></pre>
 * @param {Object} config properties to use (incuding events / listeners)
 */

Roo.util.Observable = function(cfg){
    
    cfg = cfg|| {};
    this.addEvents(cfg.events || {});
    if (cfg.events) {
        delete cfg.events; // make sure
    }
     
    Roo.apply(this, cfg);
    
    if(this.listeners){
        this.on(this.listeners);
        delete this.listeners;
    }
};
Roo.util.Observable.prototype = {
    /** 
 * @cfg {Object} listeners  list of events and functions to call for this object, 
 * For example :
 * <pre><code>
    listeners :  { 
       'click' : function(e) {
           ..... 
        } ,
        .... 
    } 
  </code></pre>
 */
    
    
    /**
     * Fires the specified event with the passed parameters (minus the event name).
     * @param {String} eventName
     * @param {Object...} args Variable number of parameters are passed to handlers
     * @return {Boolean} returns false if any of the handlers return false otherwise it returns true
     */
    fireEvent : function(){
        var ce = this.events[arguments[0].toLowerCase()];
        if(typeof ce == "object"){
            return ce.fire.apply(ce, Array.prototype.slice.call(arguments, 1));
        }else{
            return true;
        }
    },

    // private
    filterOptRe : /^(?:scope|delay|buffer|single)$/,

    /**
     * Appends an event handler to this component
     * @param {String}   eventName The type of event to listen for
     * @param {Function} handler The method the event invokes
     * @param {Object}   scope (optional) The scope in which to execute the handler
     * function. The handler function's "this" context.
     * @param {Object}   options (optional) An object containing handler configuration
     * properties. This may contain any of the following properties:<ul>
     * <li>scope {Object} The scope in which to execute the handler function. The handler function's "this" context.</li>
     * <li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>
     * <li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>
     * <li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed
     * by the specified number of milliseconds. If the event fires again within that time, the original
     * handler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>
     * </ul><br>
     * <p>
     * <b>Combining Options</b><br>
     * Using the options argument, it is possible to combine different types of listeners:<br>
     * <br>
     * A normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)
		<pre><code>
		el.on('click', this.onClick, this, {
 			single: true,
    		delay: 100,
    		forumId: 4
		});
		</code></pre>
     * <p>
     * <b>Attaching multiple handlers in 1 call</b><br>
     * The method also allows for a single argument to be passed which is a config object containing properties
     * which specify multiple handlers.
     * <pre><code>
		el.on({
			'click': {
        		fn: this.onClick,
        		scope: this,
        		delay: 100
    		}, 
    		'mouseover': {
        		fn: this.onMouseOver,
        		scope: this
    		},
    		'mouseout': {
        		fn: this.onMouseOut,
        		scope: this
    		}
		});
		</code></pre>
     * <p>
     * Or a shorthand syntax which passes the same scope object to all handlers:
     	<pre><code>
		el.on({
			'click': this.onClick,
    		'mouseover': this.onMouseOver,
    		'mouseout': this.onMouseOut,
    		scope: this
		});
		</code></pre>
     */
    addListener : function(eventName, fn, scope, o){
        if(typeof eventName == "object"){
            o = eventName;
            for(var e in o){
                if(this.filterOptRe.test(e)){
                    continue;
                }
                if(typeof o[e] == "function"){
                    // shared options
                    this.addListener(e, o[e], o.scope,  o);
                }else{
                    // individual options
                    this.addListener(e, o[e].fn, o[e].scope, o[e]);
                }
            }
            return;
        }
        o = (!o || typeof o == "boolean") ? {} : o;
        eventName = eventName.toLowerCase();
        var ce = this.events[eventName] || true;
        if(typeof ce == "boolean"){
            ce = new Roo.util.Event(this, eventName);
            this.events[eventName] = ce;
        }
        ce.addListener(fn, scope, o);
    },

    /**
     * Removes a listener
     * @param {String}   eventName     The type of event to listen for
     * @param {Function} handler        The handler to remove
     * @param {Object}   scope  (optional) The scope (this object) for the handler
     */
    removeListener : function(eventName, fn, scope){
        var ce = this.events[eventName.toLowerCase()];
        if(typeof ce == "object"){
            ce.removeListener(fn, scope);
        }
    },

    /**
     * Removes all listeners for this object
     */
    purgeListeners : function(){
        for(var evt in this.events){
            if(typeof this.events[evt] == "object"){
                 this.events[evt].clearListeners();
            }
        }
    },

    relayEvents : function(o, events){
        var createHandler = function(ename){
            return function(){
		 
                return this.fireEvent.apply(this, Roo.combine(ename, Array.prototype.slice.call(arguments, 0)));
            };
        };
        for(var i = 0, len = events.length; i < len; i++){
            var ename = events[i];
            if(!this.events[ename]){
		this.events[ename] = true;
	    };
            o.on(ename, createHandler(ename), this);
        }
    },

    /**
     * Used to define events on this Observable
     * @param {Object} object The object with the events defined
     */
    addEvents : function(o){
        if(!this.events){
            this.events = {};
        }
        Roo.applyIf(this.events, o);
    },

    /**
     * Checks to see if this object has any listeners for a specified event
     * @param {String} eventName The name of the event to check for
     * @return {Boolean} True if the event is being listened for, else false
     */
    hasListener : function(eventName){
        var e = this.events[eventName];
        return typeof e == "object" && e.listeners.length > 0;
    }
};
/**
 * Appends an event handler to this element (shorthand for addListener)
 * @param {String}   eventName     The type of event to listen for
 * @param {Function} handler        The method the event invokes
 * @param {Object}   scope (optional) The scope in which to execute the handler
 * function. The handler function's "this" context.
 * @param {Object}   options  (optional)
 * @method
 */
Roo.util.Observable.prototype.on = Roo.util.Observable.prototype.addListener;
/**
 * Removes a listener (shorthand for removeListener)
 * @param {String}   eventName     The type of event to listen for
 * @param {Function} handler        The handler to remove
 * @param {Object}   scope  (optional) The scope (this object) for the handler
 * @method
 */
Roo.util.Observable.prototype.un = Roo.util.Observable.prototype.removeListener;

/**
 * Starts capture on the specified Observable. All events will be passed
 * to the supplied function with the event name + standard signature of the event
 * <b>before</b> the event is fired. If the supplied function returns false,
 * the event will not fire.
 * @param {Observable} o The Observable to capture
 * @param {Function} fn The function to call
 * @param {Object} scope (optional) The scope (this object) for the fn
 * @static
 */
Roo.util.Observable.capture = function(o, fn, scope){
    o.fireEvent = o.fireEvent.createInterceptor(fn, scope);
};

/**
 * Removes <b>all</b> added captures from the Observable.
 * @param {Observable} o The Observable to release
 * @static
 */
Roo.util.Observable.releaseCapture = function(o){
    o.fireEvent = Roo.util.Observable.prototype.fireEvent;
};

(function(){

    var createBuffered = function(h, o, scope){
        var task = new Roo.util.DelayedTask();
        return function(){
            task.delay(o.buffer, h, scope, Array.prototype.slice.call(arguments, 0));
        };
    };

    var createSingle = function(h, e, fn, scope){
        return function(){
            e.removeListener(fn, scope);
            return h.apply(scope, arguments);
        };
    };

    var createDelayed = function(h, o, scope){
        return function(){
            var args = Array.prototype.slice.call(arguments, 0);
            setTimeout(function(){
                h.apply(scope, args);
            }, o.delay || 10);
        };
    };

    Roo.util.Event = function(obj, name){
        this.name = name;
        this.obj = obj;
        this.listeners = [];
    };

    Roo.util.Event.prototype = {
        addListener : function(fn, scope, options){
            var o = options || {};
            scope = scope || this.obj;
            if(!this.isListening(fn, scope)){
                var l = {fn: fn, scope: scope, options: o};
                var h = fn;
                if(o.delay){
                    h = createDelayed(h, o, scope);
                }
                if(o.single){
                    h = createSingle(h, this, fn, scope);
                }
                if(o.buffer){
                    h = createBuffered(h, o, scope);
                }
                l.fireFn = h;
                if(!this.firing){ // if we are currently firing this event, don't disturb the listener loop
                    this.listeners.push(l);
                }else{
                    this.listeners = this.listeners.slice(0);
                    this.listeners.push(l);
                }
            }
        },

        findListener : function(fn, scope){
            scope = scope || this.obj;
            var ls = this.listeners;
            for(var i = 0, len = ls.length; i < len; i++){
                var l = ls[i];
                if(l.fn == fn && l.scope == scope){
                    return i;
                }
            }
            return -1;
        },

        isListening : function(fn, scope){
            return this.findListener(fn, scope) != -1;
        },

        removeListener : function(fn, scope){
            var index;
            if((index = this.findListener(fn, scope)) != -1){
                if(!this.firing){
                    this.listeners.splice(index, 1);
                }else{
                    this.listeners = this.listeners.slice(0);
                    this.listeners.splice(index, 1);
                }
                return true;
            }
            return false;
        },

        clearListeners : function(){
            this.listeners = [];
        },

        fire : function(){
            var ls = this.listeners, scope, len = ls.length;
            if(len > 0){
                this.firing = true;
		var args = Array.prototype.slice.call(arguments, 0);                
                for(var i = 0; i < len; i++){
		    var l = ls[i];
                    if(l.fireFn.apply(l.scope||this.obj||window, args) === false){
                        this.firing = false;
                        return false;
                    }
                }
                this.firing = false;
            }
            return true;
        }
    };
})();/*
 * RooJS Library 
 * Copyright(c) 2007-2017, Roo J Solutions Ltd
 *
 * Licence LGPL 
 *
 */
 
/**
 * @class Roo.Document
 * @extends Roo.util.Observable
 * This is a convience class to wrap up the main document loading code.. , rather than adding Roo.onReady(......)
 * 
 * @param {Object} config the methods and properties of the 'base' class for the application.
 * 
 *  Generic Page handler - implement this to start your app..
 * 
 * eg.
 *  MyProject = new Roo.Document({
        events : {
            'load' : true // your events..
        },
        listeners : {
            'ready' : function() {
                // fired on Roo.onReady()
            }
        }
 * 
 */
Roo.Document = function(cfg) {
     
    this.addEvents({ 
        'ready' : true
    });
    Roo.util.Observable.call(this,cfg);
    
    var _this = this;
    
    Roo.onReady(function() {
        _this.fireEvent('ready');
    },null,false);
    
    
}

Roo.extend(Roo.Document, Roo.util.Observable, {});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.EventManager
 * Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides 
 * several useful events directly.
 * See {@link Roo.EventObject} for more details on normalized event objects.
 * @static
 */
Roo.EventManager = function(){
    var docReadyEvent, docReadyProcId, docReadyState = false;
    var resizeEvent, resizeTask, textEvent, textSize;
    var E = Roo.lib.Event;
    var D = Roo.lib.Dom;

    
    

    var fireDocReady = function(){
        if(!docReadyState){
            docReadyState = true;
            Roo.isReady = true;
            if(docReadyProcId){
                clearInterval(docReadyProcId);
            }
            if(Roo.isGecko || Roo.isOpera) {
                document.removeEventListener("DOMContentLoaded", fireDocReady, false);
            }
            if(Roo.isIE){
                var defer = document.getElementById("ie-deferred-loader");
                if(defer){
                    defer.onreadystatechange = null;
                    defer.parentNode.removeChild(defer);
                }
            }
            if(docReadyEvent){
                docReadyEvent.fire();
                docReadyEvent.clearListeners();
            }
        }
    };
    
    var initDocReady = function(){
        docReadyEvent = new Roo.util.Event();
        if(Roo.isGecko || Roo.isOpera) {
            document.addEventListener("DOMContentLoaded", fireDocReady, false);
        }else if(Roo.isIE){
            document.write("<s"+'cript id="ie-deferred-loader" defer="defer" src="/'+'/:"></s'+"cript>");
            var defer = document.getElementById("ie-deferred-loader");
            defer.onreadystatechange = function(){
                if(this.readyState == "complete"){
                    fireDocReady();
                }
            };
        }else if(Roo.isSafari){ 
            docReadyProcId = setInterval(function(){
                var rs = document.readyState;
                if(rs == "complete") {
                    fireDocReady();     
                 }
            }, 10);
        }
        // no matter what, make sure it fires on load
        E.on(window, "load", fireDocReady);
    };

    var createBuffered = function(h, o){
        var task = new Roo.util.DelayedTask(h);
        return function(e){
            // create new event object impl so new events don't wipe out properties
            e = new Roo.EventObjectImpl(e);
            task.delay(o.buffer, h, null, [e]);
        };
    };

    var createSingle = function(h, el, ename, fn){
        return function(e){
            Roo.EventManager.removeListener(el, ename, fn);
            h(e);
        };
    };

    var createDelayed = function(h, o){
        return function(e){
            // create new event object impl so new events don't wipe out properties
            e = new Roo.EventObjectImpl(e);
            setTimeout(function(){
                h(e);
            }, o.delay || 10);
        };
    };
    var transitionEndVal = false;
    
    var transitionEnd = function()
    {
        if (transitionEndVal) {
            return transitionEndVal;
        }
        var el = document.createElement('div');

        var transEndEventNames = {
            WebkitTransition : 'webkitTransitionEnd',
            MozTransition    : 'transitionend',
            OTransition      : 'oTransitionEnd otransitionend',
            transition       : 'transitionend'
        };
    
        for (var name in transEndEventNames) {
            if (el.style[name] !== undefined) {
                transitionEndVal = transEndEventNames[name];
                return  transitionEndVal ;
            }
        }
    }
    
  

    var listen = function(element, ename, opt, fn, scope)
    {
        var o = (!opt || typeof opt == "boolean") ? {} : opt;
        fn = fn || o.fn; scope = scope || o.scope;
        var el = Roo.getDom(element);
        
        
        if(!el){
            throw "Error listening for \"" + ename + '\". Element "' + element + '" doesn\'t exist.';
        }
        
        if (ename == 'transitionend') {
            ename = transitionEnd();
        }
        var h = function(e){
            e = Roo.EventObject.setEvent(e);
            var t;
            if(o.delegate){
                t = e.getTarget(o.delegate, el);
                if(!t){
                    return;
                }
            }else{
                t = e.target;
            }
            if(o.stopEvent === true){
                e.stopEvent();
            }
            if(o.preventDefault === true){
               e.preventDefault();
            }
            if(o.stopPropagation === true){
                e.stopPropagation();
            }

            if(o.normalized === false){
                e = e.browserEvent;
            }

            fn.call(scope || el, e, t, o);
        };
        if(o.delay){
            h = createDelayed(h, o);
        }
        if(o.single){
            h = createSingle(h, el, ename, fn);
        }
        if(o.buffer){
            h = createBuffered(h, o);
        }
        
        fn._handlers = fn._handlers || [];
        
        
        fn._handlers.push([Roo.id(el), ename, h]);
        
        
         
        E.on(el, ename, h); // this adds the actuall listener to the object..
        
        
        if(ename == "mousewheel" && el.addEventListener){ // workaround for jQuery
            el.addEventListener("DOMMouseScroll", h, false);
            E.on(window, 'unload', function(){
                el.removeEventListener("DOMMouseScroll", h, false);
            });
        }
        if(ename == "mousedown" && el == document){ // fix stopped mousedowns on the document
            Roo.EventManager.stoppedMouseDownEvent.addListener(h);
        }
        return h;
    };

    var stopListening = function(el, ename, fn){
        var id = Roo.id(el), hds = fn._handlers, hd = fn;
        if(hds){
            for(var i = 0, len = hds.length; i < len; i++){
                var h = hds[i];
                if(h[0] == id && h[1] == ename){
                    hd = h[2];
                    hds.splice(i, 1);
                    break;
                }
            }
        }
        E.un(el, ename, hd);
        el = Roo.getDom(el);
        if(ename == "mousewheel" && el.addEventListener){
            el.removeEventListener("DOMMouseScroll", hd, false);
        }
        if(ename == "mousedown" && el == document){ // fix stopped mousedowns on the document
            Roo.EventManager.stoppedMouseDownEvent.removeListener(hd);
        }
    };

    var propRe = /^(?:scope|delay|buffer|single|stopEvent|preventDefault|stopPropagation|normalized|args|delegate)$/;
    
    var pub = {
        
        
        /** 
         * Fix for doc tools
         * @scope Roo.EventManager
         */
        
        
        /** 
         * This is no longer needed and is deprecated. Places a simple wrapper around an event handler to override the browser event
         * object with a Roo.EventObject
         * @param {Function} fn        The method the event invokes
         * @param {Object}   scope    An object that becomes the scope of the handler
         * @param {boolean}  override If true, the obj passed in becomes
         *                             the execution scope of the listener
         * @return {Function} The wrapped function
         * @deprecated
         */
        wrap : function(fn, scope, override){
            return function(e){
                Roo.EventObject.setEvent(e);
                fn.call(override ? scope || window : window, Roo.EventObject, scope);
            };
        },
        
        /**
     * Appends an event handler to an element (shorthand for addListener)
     * @param {String/HTMLElement}   element        The html element or id to assign the
     * @param {String}   eventName The type of event to listen for
     * @param {Function} handler The method the event invokes
     * @param {Object}   scope (optional) The scope in which to execute the handler
     * function. The handler function's "this" context.
     * @param {Object}   options (optional) An object containing handler configuration
     * properties. This may contain any of the following properties:<ul>
     * <li>scope {Object} The scope in which to execute the handler function. The handler function's "this" context.</li>
     * <li>delegate {String} A simple selector to filter the target or look for a descendant of the target</li>
     * <li>stopEvent {Boolean} True to stop the event. That is stop propagation, and prevent the default action.</li>
     * <li>preventDefault {Boolean} True to prevent the default action</li>
     * <li>stopPropagation {Boolean} True to prevent event propagation</li>
     * <li>normalized {Boolean} False to pass a browser event to the handler function instead of an Roo.EventObject</li>
     * <li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>
     * <li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>
     * <li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed
     * by the specified number of milliseconds. If the event fires again within that time, the original
     * handler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>
     * </ul><br>
     * <p>
     * <b>Combining Options</b><br>
     * Using the options argument, it is possible to combine different types of listeners:<br>
     * <br>
     * A normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)<div style="margin: 5px 20px 20px;">
     * Code:<pre><code>
el.on('click', this.onClick, this, {
    single: true,
    delay: 100,
    stopEvent : true,
    forumId: 4
});</code></pre>
     * <p>
     * <b>Attaching multiple handlers in 1 call</b><br>
      * The method also allows for a single argument to be passed which is a config object containing properties
     * which specify multiple handlers.
     * <p>
     * Code:<pre><code>
el.on({
    'click' : {
        fn: this.onClick
        scope: this,
        delay: 100
    },
    'mouseover' : {
        fn: this.onMouseOver
        scope: this
    },
    'mouseout' : {
        fn: this.onMouseOut
        scope: this
    }
});</code></pre>
     * <p>
     * Or a shorthand syntax:<br>
     * Code:<pre><code>
el.on({
    'click' : this.onClick,
    'mouseover' : this.onMouseOver,
    'mouseout' : this.onMouseOut
    scope: this
});</code></pre>
     */
        addListener : function(element, eventName, fn, scope, options){
            if(typeof eventName == "object"){
                var o = eventName;
                for(var e in o){
                    if(propRe.test(e)){
                        continue;
                    }
                    if(typeof o[e] == "function"){
                        // shared options
                        listen(element, e, o, o[e], o.scope);
                    }else{
                        // individual options
                        listen(element, e, o[e]);
                    }
                }
                return;
            }
            return listen(element, eventName, options, fn, scope);
        },
        
        /**
         * Removes an event handler
         *
         * @param {String/HTMLElement}   element        The id or html element to remove the 
         *                             event from
         * @param {String}   eventName     The type of event
         * @param {Function} fn
         * @return {Boolean} True if a listener was actually removed
         */
        removeListener : function(element, eventName, fn){
            return stopListening(element, eventName, fn);
        },
        
        /**
         * Fires when the document is ready (before onload and before images are loaded). Can be 
         * accessed shorthanded Roo.onReady().
         * @param {Function} fn        The method the event invokes
         * @param {Object}   scope    An  object that becomes the scope of the handler
         * @param {boolean}  options
         */
        onDocumentReady : function(fn, scope, options){
            if(docReadyState){ // if it already fired
                docReadyEvent.addListener(fn, scope, options);
                docReadyEvent.fire();
                docReadyEvent.clearListeners();
                return;
            }
            if(!docReadyEvent){
                initDocReady();
            }
            docReadyEvent.addListener(fn, scope, options);
        },
        
        /**
         * Fires when the window is resized and provides resize event buffering (50 milliseconds), passes new viewport width and height to handlers.
         * @param {Function} fn        The method the event invokes
         * @param {Object}   scope    An object that becomes the scope of the handler
         * @param {boolean}  options
         */
        onWindowResize : function(fn, scope, options)
        {
            if(!resizeEvent){
                resizeEvent = new Roo.util.Event();
                resizeTask = new Roo.util.DelayedTask(function(){
                    resizeEvent.fire(D.getViewWidth(), D.getViewHeight());
                });
                E.on(window, "resize", function()
                {
                    if (Roo.isIE) {
                        resizeTask.delay(50);
                    } else {
                        resizeEvent.fire(D.getViewWidth(), D.getViewHeight());
                    }
                });
            }
            resizeEvent.addListener(fn, scope, options);
        },

        /**
         * Fires when the user changes the active text size. Handler gets called with 2 params, the old size and the new size.
         * @param {Function} fn        The method the event invokes
         * @param {Object}   scope    An object that becomes the scope of the handler
         * @param {boolean}  options
         */
        onTextResize : function(fn, scope, options){
            if(!textEvent){
                textEvent = new Roo.util.Event();
                var textEl = new Roo.Element(document.createElement('div'));
                textEl.dom.className = 'x-text-resize';
                textEl.dom.innerHTML = 'X';
                textEl.appendTo(document.body);
                textSize = textEl.dom.offsetHeight;
                setInterval(function(){
                    if(textEl.dom.offsetHeight != textSize){
                        textEvent.fire(textSize, textSize = textEl.dom.offsetHeight);
                    }
                }, this.textResizeInterval);
            }
            textEvent.addListener(fn, scope, options);
        },

        /**
         * Removes the passed window resize listener.
         * @param {Function} fn        The method the event invokes
         * @param {Object}   scope    The scope of handler
         */
        removeResizeListener : function(fn, scope){
            if(resizeEvent){
                resizeEvent.removeListener(fn, scope);
            }
        },

        // private
        fireResize : function(){
            if(resizeEvent){
                resizeEvent.fire(D.getViewWidth(), D.getViewHeight());
            }   
        },
        /**
         * Url used for onDocumentReady with using SSL (defaults to Roo.SSL_SECURE_URL)
         */
        ieDeferSrc : false,
        /**
         * The frequency, in milliseconds, to check for text resize events (defaults to 50)
         */
        textResizeInterval : 50
    };
    
    /**
     * Fix for doc tools
     * @scopeAlias pub=Roo.EventManager
     */
    
     /**
     * Appends an event handler to an element (shorthand for addListener)
     * @param {String/HTMLElement}   element        The html element or id to assign the
     * @param {String}   eventName The type of event to listen for
     * @param {Function} handler The method the event invokes
     * @param {Object}   scope (optional) The scope in which to execute the handler
     * function. The handler function's "this" context.
     * @param {Object}   options (optional) An object containing handler configuration
     * properties. This may contain any of the following properties:<ul>
     * <li>scope {Object} The scope in which to execute the handler function. The handler function's "this" context.</li>
     * <li>delegate {String} A simple selector to filter the target or look for a descendant of the target</li>
     * <li>stopEvent {Boolean} True to stop the event. That is stop propagation, and prevent the default action.</li>
     * <li>preventDefault {Boolean} True to prevent the default action</li>
     * <li>stopPropagation {Boolean} True to prevent event propagation</li>
     * <li>normalized {Boolean} False to pass a browser event to the handler function instead of an Roo.EventObject</li>
     * <li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>
     * <li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>
     * <li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed
     * by the specified number of milliseconds. If the event fires again within that time, the original
     * handler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>
     * </ul><br>
     * <p>
     * <b>Combining Options</b><br>
     * Using the options argument, it is possible to combine different types of listeners:<br>
     * <br>
     * A normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)<div style="margin: 5px 20px 20px;">
     * Code:<pre><code>
el.on('click', this.onClick, this, {
    single: true,
    delay: 100,
    stopEvent : true,
    forumId: 4
});</code></pre>
     * <p>
     * <b>Attaching multiple handlers in 1 call</b><br>
      * The method also allows for a single argument to be passed which is a config object containing properties
     * which specify multiple handlers.
     * <p>
     * Code:<pre><code>
el.on({
    'click' : {
        fn: this.onClick
        scope: this,
        delay: 100
    },
    'mouseover' : {
        fn: this.onMouseOver
        scope: this
    },
    'mouseout' : {
        fn: this.onMouseOut
        scope: this
    }
});</code></pre>
     * <p>
     * Or a shorthand syntax:<br>
     * Code:<pre><code>
el.on({
    'click' : this.onClick,
    'mouseover' : this.onMouseOver,
    'mouseout' : this.onMouseOut
    scope: this
});</code></pre>
     */
    pub.on = pub.addListener;
    pub.un = pub.removeListener;

    pub.stoppedMouseDownEvent = new Roo.util.Event();
    return pub;
}();
/**
  * Fires when the document is ready (before onload and before images are loaded).  Shorthand of {@link Roo.EventManager#onDocumentReady}.
  * @param {Function} fn        The method the event invokes
  * @param {Object}   scope    An  object that becomes the scope of the handler
  * @param {boolean}  override If true, the obj passed in becomes
  *                             the execution scope of the listener
  * @member Roo
  * @method onReady
 */
Roo.onReady = Roo.EventManager.onDocumentReady;

Roo.onReady(function(){
    var bd = Roo.get(document.body);
    if(!bd){ return; }

    var cls = [
            Roo.isIE ? "roo-ie"
            : Roo.isIE11 ? "roo-ie11"
            : Roo.isEdge ? "roo-edge"
            : Roo.isGecko ? "roo-gecko"
            : Roo.isOpera ? "roo-opera"
            : Roo.isSafari ? "roo-safari" : ""];

    if(Roo.isMac){
        cls.push("roo-mac");
    }
    if(Roo.isLinux){
        cls.push("roo-linux");
    }
    if(Roo.isIOS){
        cls.push("roo-ios");
    }
    if(Roo.isTouch){
        cls.push("roo-touch");
    }
    if(Roo.isBorderBox){
        cls.push('roo-border-box');
    }
    if(Roo.isStrict){ // add to the parent to allow for selectors like ".ext-strict .ext-ie"
        
        var p = bd.dom.parentNode;
        if(p){
            p.className += ' roo-strict';
        }
         
    }
    bd.addClass(cls.join(' '));
});

/**
 * @class Roo.EventObject
 * EventObject exposes the Yahoo! UI Event functionality directly on the object
 * passed to your event handler. It exists mostly for convenience. It also fixes the annoying null checks automatically to cleanup your code 
 * Example:
 * <pre><code>
 function handleClick(e){ // e is not a standard event object, it is a Roo.EventObject
    e.preventDefault();
    var target = e.getTarget();
    ...
 }
 var myDiv = Roo.get("myDiv");
 myDiv.on("click", handleClick);
 //or
 Roo.EventManager.on("myDiv", 'click', handleClick);
 Roo.EventManager.addListener("myDiv", 'click', handleClick);
 </code></pre>
 * @static
 */
Roo.EventObject = function(){
    
    var E = Roo.lib.Event;
    
    // safari keypress events for special keys return bad keycodes
    var safariKeys = {
        63234 : 37, // left
        63235 : 39, // right
        63232 : 38, // up
        63233 : 40, // down
        63276 : 33, // page up
        63277 : 34, // page down
        63272 : 46, // delete
        63273 : 36, // home
        63275 : 35  // end
    };

    // normalize button clicks
    var btnMap = Roo.isIE ? {1:0,4:1,2:2} :
                (Roo.isSafari ? {1:0,2:1,3:2} : {0:0,1:1,2:2});

    Roo.EventObjectImpl = function(e){
        if(e){
            this.setEvent(e.browserEvent || e);
        }
    };
    Roo.EventObjectImpl.prototype = {
        /**
         * Used to fix doc tools.
         * @scope Roo.EventObject.prototype
         */
            

        
        
        /** The normal browser event */
        browserEvent : null,
        /** The button pressed in a mouse event */
        button : -1,
        /** True if the shift key was down during the event */
        shiftKey : false,
        /** True if the control key was down during the event */
        ctrlKey : false,
        /** True if the alt key was down during the event */
        altKey : false,

        /** Key constant 
        * @type Number */
        BACKSPACE : 8,
        /** Key constant 
        * @type Number */
        TAB : 9,
        /** Key constant 
        * @type Number */
        RETURN : 13,
        /** Key constant 
        * @type Number */
        ENTER : 13,
        /** Key constant 
        * @type Number */
        SHIFT : 16,
        /** Key constant 
        * @type Number */
        CONTROL : 17,
        /** Key constant 
        * @type Number */
        ESC : 27,
        /** Key constant 
        * @type Number */
        SPACE : 32,
        /** Key constant 
        * @type Number */
        PAGEUP : 33,
        /** Key constant 
        * @type Number */
        PAGEDOWN : 34,
        /** Key constant 
        * @type Number */
        END : 35,
        /** Key constant 
        * @type Number */
        HOME : 36,
        /** Key constant 
        * @type Number */
        LEFT : 37,
        /** Key constant 
        * @type Number */
        UP : 38,
        /** Key constant 
        * @type Number */
        RIGHT : 39,
        /** Key constant 
        * @type Number */
        DOWN : 40,
        /** Key constant 
        * @type Number */
        DELETE : 46,
        /** Key constant 
        * @type Number */
        F5 : 116,

           /** @private */
        setEvent : function(e){
            if(e == this || (e && e.browserEvent)){ // already wrapped
                return e;
            }
            this.browserEvent = e;
            if(e){
                // normalize buttons
                this.button = e.button ? btnMap[e.button] : (e.which ? e.which-1 : -1);
                if(e.type == 'click' && this.button == -1){
                    this.button = 0;
                }
                this.type = e.type;
                this.shiftKey = e.shiftKey;
                // mac metaKey behaves like ctrlKey
                this.ctrlKey = e.ctrlKey || e.metaKey;
                this.altKey = e.altKey;
                // in getKey these will be normalized for the mac
                this.keyCode = e.keyCode;
                // keyup warnings on firefox.
                this.charCode = (e.type == 'keyup' || e.type == 'keydown') ? 0 : e.charCode;
                // cache the target for the delayed and or buffered events
                this.target = E.getTarget(e);
                // same for XY
                this.xy = E.getXY(e);
            }else{
                this.button = -1;
                this.shiftKey = false;
                this.ctrlKey = false;
                this.altKey = false;
                this.keyCode = 0;
                this.charCode =0;
                this.target = null;
                this.xy = [0, 0];
            }
            return this;
        },

        /**
         * Stop the event (preventDefault and stopPropagation)
         */
        stopEvent : function(){
            if(this.browserEvent){
                if(this.browserEvent.type == 'mousedown'){
                    Roo.EventManager.stoppedMouseDownEvent.fire(this);
                }
                E.stopEvent(this.browserEvent);
            }
        },

        /**
         * Prevents the browsers default handling of the event.
         */
        preventDefault : function(){
            if(this.browserEvent){
                E.preventDefault(this.browserEvent);
            }
        },

        /** @private */
        isNavKeyPress : function(){
            var k = this.keyCode;
            k = Roo.isSafari ? (safariKeys[k] || k) : k;
            return (k >= 33 && k <= 40) || k == this.RETURN || k == this.TAB || k == this.ESC;
        },

        isSpecialKey : function(){
            var k = this.keyCode;
            return (this.type == 'keypress' && this.ctrlKey) || k == 9 || k == 13  || k == 40 || k == 27 ||
            (k == 16) || (k == 17) ||
            (k >= 18 && k <= 20) ||
            (k >= 33 && k <= 35) ||
            (k >= 36 && k <= 39) ||
            (k >= 44 && k <= 45);
        },
        /**
         * Cancels bubbling of the event.
         */
        stopPropagation : function(){
            if(this.browserEvent){
                if(this.type == 'mousedown'){
                    Roo.EventManager.stoppedMouseDownEvent.fire(this);
                }
                E.stopPropagation(this.browserEvent);
            }
        },

        /**
         * Gets the key code for the event.
         * @return {Number}
         */
        getCharCode : function(){
            return this.charCode || this.keyCode;
        },

        /**
         * Returns a normalized keyCode for the event.
         * @return {Number} The key code
         */
        getKey : function(){
            var k = this.keyCode || this.charCode;
            return Roo.isSafari ? (safariKeys[k] || k) : k;
        },

        /**
         * Gets the x coordinate of the event.
         * @return {Number}
         */
        getPageX : function(){
            return this.xy[0];
        },

        /**
         * Gets the y coordinate of the event.
         * @return {Number}
         */
        getPageY : function(){
            return this.xy[1];
        },

        /**
         * Gets the time of the event.
         * @return {Number}
         */
        getTime : function(){
            if(this.browserEvent){
                return E.getTime(this.browserEvent);
            }
            return null;
        },

        /**
         * Gets the page coordinates of the event.
         * @return {Array} The xy values like [x, y]
         */
        getXY : function(){
            return this.xy;
        },

        /**
         * Gets the target for the event.
         * @param {String} selector (optional) A simple selector to filter the target or look for an ancestor of the target
         * @param {Number/String/HTMLElement/Element} maxDepth (optional) The max depth to
                search as a number or element (defaults to 10 || document.body)
         * @param {Boolean} returnEl (optional) True to return a Roo.Element object instead of DOM node
         * @return {HTMLelement}
         */
        getTarget : function(selector, maxDepth, returnEl){
            return selector ? Roo.fly(this.target).findParent(selector, maxDepth, returnEl) : this.target;
        },
        /**
         * Gets the related target.
         * @return {HTMLElement}
         */
        getRelatedTarget : function(){
            if(this.browserEvent){
                return E.getRelatedTarget(this.browserEvent);
            }
            return null;
        },

        /**
         * Normalizes mouse wheel delta across browsers
         * @return {Number} The delta
         */
        getWheelDelta : function(){
            var e = this.browserEvent;
            var delta = 0;
            if(e.wheelDelta){ /* IE/Opera. */
                delta = e.wheelDelta/120;
            }else if(e.detail){ /* Mozilla case. */
                delta = -e.detail/3;
            }
            return delta;
        },

        /**
         * Returns true if the control, meta, shift or alt key was pressed during this event.
         * @return {Boolean}
         */
        hasModifier : function(){
            return !!((this.ctrlKey || this.altKey) || this.shiftKey);
        },

        /**
         * Returns true if the target of this event equals el or is a child of el
         * @param {String/HTMLElement/Element} el
         * @param {Boolean} related (optional) true to test if the related target is within el instead of the target
         * @return {Boolean}
         */
        within : function(el, related){
            var t = this[related ? "getRelatedTarget" : "getTarget"]();
            return t && Roo.fly(el).contains(t);
        },

        getPoint : function(){
            return new Roo.lib.Point(this.xy[0], this.xy[1]);
        }
    };

    return new Roo.EventObjectImpl();
}();
            
    /*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

 
// was in Composite Element!??!?!
 
(function(){
    var D = Roo.lib.Dom;
    var E = Roo.lib.Event;
    var A = Roo.lib.Anim;

    // local style camelizing for speed
    var propCache = {};
    var camelRe = /(-[a-z])/gi;
    var camelFn = function(m, a){ return a.charAt(1).toUpperCase(); };
    var view = document.defaultView;

/**
 * @class Roo.Element
 * Represents an Element in the DOM.<br><br>
 * Usage:<br>
<pre><code>
var el = Roo.get("my-div");

// or with getEl
var el = getEl("my-div");

// or with a DOM element
var el = Roo.get(myDivElement);
</code></pre>
 * Using Roo.get() or getEl() instead of calling the constructor directly ensures you get the same object
 * each call instead of constructing a new one.<br><br>
 * <b>Animations</b><br />
 * Many of the functions for manipulating an element have an optional "animate" parameter. The animate parameter
 * should either be a boolean (true) or an object literal with animation options. The animation options are:
<pre>
Option    Default   Description
--------- --------  ---------------------------------------------
duration  .35       The duration of the animation in seconds
easing    easeOut   The YUI easing method
callback  none      A function to execute when the anim completes
scope     this      The scope (this) of the callback function
</pre>
* Also, the Anim object being used for the animation will be set on your options object as "anim", which allows you to stop or
* manipulate the animation. Here's an example:
<pre><code>
var el = Roo.get("my-div");

// no animation
el.setWidth(100);

// default animation
el.setWidth(100, true);

// animation with some options set
el.setWidth(100, {
    duration: 1,
    callback: this.foo,
    scope: this
});

// using the "anim" property to get the Anim object
var opt = {
    duration: 1,
    callback: this.foo,
    scope: this
};
el.setWidth(100, opt);
...
if(opt.anim.isAnimated()){
    opt.anim.stop();
}
</code></pre>
* <b> Composite (Collections of) Elements</b><br />
 * For working with collections of Elements, see <a href="Roo.CompositeElement.html">Roo.CompositeElement</a>
 * @constructor Create a new Element directly.
 * @param {String/HTMLElement} element
 * @param {Boolean} forceNew (optional) By default the constructor checks to see if there is already an instance of this element in the cache and if there is it returns the same instance. This will skip that check (useful for extending this class).
 */
    Roo.Element = function(element, forceNew)
    {
        var dom = typeof element == "string" ?
                document.getElementById(element) : element;
        
        this.listeners = {};
        
        if(!dom){ // invalid id/element
            return null;
        }
        var id = dom.id;
        if(forceNew !== true && id && Roo.Element.cache[id]){ // element object already exists
            return Roo.Element.cache[id];
        }

        /**
         * The DOM element
         * @type HTMLElement
         */
        this.dom = dom;

        /**
         * The DOM element ID
         * @type String
         */
        this.id = id || Roo.id(dom);
        
        return this; // assumed for cctor?
    };

    var El = Roo.Element;

    El.prototype = {
        /**
         * The element's default display mode  (defaults to "") 
         * @type String
         */
        originalDisplay : "",

        
        // note this is overridden in BS version..
        visibilityMode : 1, 
        /**
         * The default unit to append to CSS values where a unit isn't provided (defaults to px).
         * @type String
         */
        defaultUnit : "px",
        
        /**
         * Sets the element's visibility mode. When setVisible() is called it
         * will use this to determine whether to set the visibility or the display property.
         * @param visMode Element.VISIBILITY or Element.DISPLAY
         * @return {Roo.Element} this
         */
        setVisibilityMode : function(visMode){
            this.visibilityMode = visMode;
            return this;
        },
        /**
         * Convenience method for setVisibilityMode(Element.DISPLAY)
         * @param {String} display (optional) What to set display to when visible
         * @return {Roo.Element} this
         */
        enableDisplayMode : function(display){
            this.setVisibilityMode(El.DISPLAY);
            if(typeof display != "undefined") { this.originalDisplay = display; }
            return this;
        },

        /**
         * Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
         * @param {String} selector The simple selector to test
         * @param {Number/String/HTMLElement/Element} maxDepth (optional) The max depth to
                search as a number or element (defaults to 10 || document.body)
         * @param {Boolean} returnEl (optional) True to return a Roo.Element object instead of DOM node
         * @return {HTMLElement} The matching DOM node (or null if no match was found)
         */
        findParent : function(simpleSelector, maxDepth, returnEl){
            var p = this.dom, b = document.body, depth = 0, dq = Roo.DomQuery, stopEl;
            maxDepth = maxDepth || 50;
            if(typeof maxDepth != "number"){
                stopEl = Roo.getDom(maxDepth);
                maxDepth = 10;
            }
            while(p && p.nodeType == 1 && depth < maxDepth && p != b && p != stopEl){
                if(dq.is(p, simpleSelector)){
                    return returnEl ? Roo.get(p) : p;
                }
                depth++;
                p = p.parentNode;
            }
            return null;
        },


        /**
         * Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)
         * @param {String} selector The simple selector to test
         * @param {Number/String/HTMLElement/Element} maxDepth (optional) The max depth to
                search as a number or element (defaults to 10 || document.body)
         * @param {Boolean} returnEl (optional) True to return a Roo.Element object instead of DOM node
         * @return {HTMLElement} The matching DOM node (or null if no match was found)
         */
        findParentNode : function(simpleSelector, maxDepth, returnEl){
            var p = Roo.fly(this.dom.parentNode, '_internal');
            return p ? p.findParent(simpleSelector, maxDepth, returnEl) : null;
        },
        
        /**
         * Looks at  the scrollable parent element
         */
        findScrollableParent : function()
        {
            var overflowRegex = /(auto|scroll)/;
            
            if(this.getStyle('position') === 'fixed'){
                return Roo.isAndroid ? Roo.get(document.documentElement) : Roo.get(document.body);
            }
            
            var excludeStaticParent = this.getStyle('position') === "absolute";
            
            for (var parent = this; (parent = Roo.get(parent.dom.parentNode));){
                
                if (excludeStaticParent && parent.getStyle('position') === "static") {
                    continue;
                }
                
                if (overflowRegex.test(parent.getStyle('overflow') + parent.getStyle('overflow-x') + parent.getStyle('overflow-y'))){
                    return parent;
                }
                
                if(parent.dom.nodeName.toLowerCase() == 'body'){
                    return Roo.isAndroid ? Roo.get(document.documentElement) : Roo.get(document.body);
                }
            }
            
            return Roo.isAndroid ? Roo.get(document.documentElement) : Roo.get(document.body);
        },

        /**
         * Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).
         * This is a shortcut for findParentNode() that always returns an Roo.Element.
         * @param {String} selector The simple selector to test
         * @param {Number/String/HTMLElement/Element} maxDepth (optional) The max depth to
                search as a number or element (defaults to 10 || document.body)
         * @return {Roo.Element} The matching DOM node (or null if no match was found)
         */
        up : function(simpleSelector, maxDepth){
            return this.findParentNode(simpleSelector, maxDepth, true);
        },



        /**
         * Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)
         * @param {String} selector The simple selector to test
         * @return {Boolean} True if this element matches the selector, else false
         */
        is : function(simpleSelector){
            return Roo.DomQuery.is(this.dom, simpleSelector);
        },

        /**
         * Perform animation on this element.
         * @param {Object} args The YUI animation control args
         * @param {Float} duration (optional) How long the animation lasts in seconds (defaults to .35)
         * @param {Function} onComplete (optional) Function to call when animation completes
         * @param {String} easing (optional) Easing method to use (defaults to 'easeOut')
         * @param {String} animType (optional) 'run' is the default. Can also be 'color', 'motion', or 'scroll'
         * @return {Roo.Element} this
         */
        animate : function(args, duration, onComplete, easing, animType){
            this.anim(args, {duration: duration, callback: onComplete, easing: easing}, animType);
            return this;
        },

        /*
         * @private Internal animation call
         */
        anim : function(args, opt, animType, defaultDur, defaultEase, cb){
            animType = animType || 'run';
            opt = opt || {};
            var anim = Roo.lib.Anim[animType](
                this.dom, args,
                (opt.duration || defaultDur) || .35,
                (opt.easing || defaultEase) || 'easeOut',
                function(){
                    Roo.callback(cb, this);
                    Roo.callback(opt.callback, opt.scope || this, [this, opt]);
                },
                this
            );
            opt.anim = anim;
            return anim;
        },

        // private legacy anim prep
        preanim : function(a, i){
            return !a[i] ? false : (typeof a[i] == "object" ? a[i]: {duration: a[i+1], callback: a[i+2], easing: a[i+3]});
        },

        /**
         * Removes worthless text nodes
         * @param {Boolean} forceReclean (optional) By default the element
         * keeps track if it has been cleaned already so
         * you can call this over and over. However, if you update the element and
         * need to force a reclean, you can pass true.
         */
        clean : function(forceReclean){
            if(this.isCleaned && forceReclean !== true){
                return this;
            }
            var ns = /\S/;
            var d = this.dom, n = d.firstChild, ni = -1;
            while(n){
                var nx = n.nextSibling;
                if(n.nodeType == 3 && !ns.test(n.nodeValue)){
                    d.removeChild(n);
                }else{
                    n.nodeIndex = ++ni;
                }
                n = nx;
            }
            this.isCleaned = true;
            return this;
        },

        // private
        calcOffsetsTo : function(el){
            el = Roo.get(el);
            var d = el.dom;
            var restorePos = false;
            if(el.getStyle('position') == 'static'){
                el.position('relative');
                restorePos = true;
            }
            var x = 0, y =0;
            var op = this.dom;
            while(op && op != d && op.tagName != 'HTML'){
                x+= op.offsetLeft;
                y+= op.offsetTop;
                op = op.offsetParent;
            }
            if(restorePos){
                el.position('static');
            }
            return [x, y];
        },

        /**
         * Scrolls this element into view within the passed container.
         * @param {String/HTMLElement/Element} container (optional) The container element to scroll (defaults to document.body)
         * @param {Boolean} hscroll (optional) False to disable horizontal scroll (defaults to true)
         * @return {Roo.Element} this
         */
        scrollIntoView : function(container, hscroll){
            var c = Roo.getDom(container) || document.body;
            var el = this.dom;

            var o = this.calcOffsetsTo(c),
                l = o[0],
                t = o[1],
                b = t+el.offsetHeight,
                r = l+el.offsetWidth;

            var ch = c.clientHeight;
            var ct = parseInt(c.scrollTop, 10);
            var cl = parseInt(c.scrollLeft, 10);
            var cb = ct + ch;
            var cr = cl + c.clientWidth;

            if(t < ct){
                c.scrollTop = t;
            }else if(b > cb){
                c.scrollTop = b-ch;
            }

            if(hscroll !== false){
                if(l < cl){
                    c.scrollLeft = l;
                }else if(r > cr){
                    c.scrollLeft = r-c.clientWidth;
                }
            }
            return this;
        },

        // private
        scrollChildIntoView : function(child, hscroll){
            Roo.fly(child, '_scrollChildIntoView').scrollIntoView(this, hscroll);
        },

        /**
         * Measures the element's content height and updates height to match. Note: this function uses setTimeout so
         * the new height may not be available immediately.
         * @param {Boolean} animate (optional) Animate the transition (defaults to false)
         * @param {Float} duration (optional) Length of the animation in seconds (defaults to .35)
         * @param {Function} onComplete (optional) Function to call when animation completes
         * @param {String} easing (optional) Easing method to use (defaults to easeOut)
         * @return {Roo.Element} this
         */
        autoHeight : function(animate, duration, onComplete, easing){
            var oldHeight = this.getHeight();
            this.clip();
            this.setHeight(1); // force clipping
            setTimeout(function(){
                var height = parseInt(this.dom.scrollHeight, 10); // parseInt for Safari
                if(!animate){
                    this.setHeight(height);
                    this.unclip();
                    if(typeof onComplete == "function"){
                        onComplete();
                    }
                }else{
                    this.setHeight(oldHeight); // restore original height
                    this.setHeight(height, animate, duration, function(){
                        this.unclip();
                        if(typeof onComplete == "function") { onComplete(); }
                    }.createDelegate(this), easing);
                }
            }.createDelegate(this), 0);
            return this;
        },

        /**
         * Returns true if this element is an ancestor of the passed element
         * @param {HTMLElement/String} el The element to check
         * @return {Boolean} True if this element is an ancestor of el, else false
         */
        contains : function(el){
            if(!el){return false;}
            return D.isAncestor(this.dom, el.dom ? el.dom : el);
        },

        /**
         * Checks whether the element is currently visible using both visibility and display properties.
         * @param {Boolean} deep (optional) True to walk the dom and see if parent elements are hidden (defaults to false)
         * @return {Boolean} True if the element is currently visible, else false
         */
        isVisible : function(deep) {
            var vis = !(this.getStyle("visibility") == "hidden" || this.getStyle("display") == "none");
            if(deep !== true || !vis){
                return vis;
            }
            var p = this.dom.parentNode;
            while(p && p.tagName.toLowerCase() != "body"){
                if(!Roo.fly(p, '_isVisible').isVisible()){
                    return false;
                }
                p = p.parentNode;
            }
            return true;
        },

        /**
         * Creates a {@link Roo.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id).
         * @param {String} selector The CSS selector
         * @param {Boolean} unique (optional) True to create a unique Roo.Element for each child (defaults to false, which creates a single shared flyweight object)
         * @return {CompositeElement/CompositeElementLite} The composite element
         */
        select : function(selector, unique){
            return El.select(selector, unique, this.dom);
        },

        /**
         * Selects child nodes based on the passed CSS selector (the selector should not contain an id).
         * @param {String} selector The CSS selector
         * @return {Array} An array of the matched nodes
         */
        query : function(selector, unique){
            return Roo.DomQuery.select(selector, this.dom);
        },

        /**
         * Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).
         * @param {String} selector The CSS selector
         * @param {Boolean} returnDom (optional) True to return the DOM node instead of Roo.Element (defaults to false)
         * @return {HTMLElement/Roo.Element} The child Roo.Element (or DOM node if returnDom = true)
         */
        child : function(selector, returnDom){
            var n = Roo.DomQuery.selectNode(selector, this.dom);
            return returnDom ? n : Roo.get(n);
        },

        /**
         * Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).
         * @param {String} selector The CSS selector
         * @param {Boolean} returnDom (optional) True to return the DOM node instead of Roo.Element (defaults to false)
         * @return {HTMLElement/Roo.Element} The child Roo.Element (or DOM node if returnDom = true)
         */
        down : function(selector, returnDom){
            var n = Roo.DomQuery.selectNode(" > " + selector, this.dom);
            return returnDom ? n : Roo.get(n);
        },

        /**
         * Initializes a {@link Roo.dd.DD} drag drop object for this element.
         * @param {String} group The group the DD object is member of
         * @param {Object} config The DD config object
         * @param {Object} overrides An object containing methods to override/implement on the DD object
         * @return {Roo.dd.DD} The DD object
         */
        initDD : function(group, config, overrides){
            var dd = new Roo.dd.DD(Roo.id(this.dom), group, config);
            return Roo.apply(dd, overrides);
        },

        /**
         * Initializes a {@link Roo.dd.DDProxy} object for this element.
         * @param {String} group The group the DDProxy object is member of
         * @param {Object} config The DDProxy config object
         * @param {Object} overrides An object containing methods to override/implement on the DDProxy object
         * @return {Roo.dd.DDProxy} The DDProxy object
         */
        initDDProxy : function(group, config, overrides){
            var dd = new Roo.dd.DDProxy(Roo.id(this.dom), group, config);
            return Roo.apply(dd, overrides);
        },

        /**
         * Initializes a {@link Roo.dd.DDTarget} object for this element.
         * @param {String} group The group the DDTarget object is member of
         * @param {Object} config The DDTarget config object
         * @param {Object} overrides An object containing methods to override/implement on the DDTarget object
         * @return {Roo.dd.DDTarget} The DDTarget object
         */
        initDDTarget : function(group, config, overrides){
            var dd = new Roo.dd.DDTarget(Roo.id(this.dom), group, config);
            return Roo.apply(dd, overrides);
        },

        /**
         * Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use
         * the display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property.
         * @param {Boolean} visible Whether the element is visible
         * @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
         * @return {Roo.Element} this
         */
         setVisible : function(visible, animate){
            if(!animate || !A){
                if(this.visibilityMode == El.DISPLAY){
                    this.setDisplayed(visible);
                }else{
                    this.fixDisplay();
                    this.dom.style.visibility = visible ? "visible" : "hidden";
                }
            }else{
                // closure for composites
                var dom = this.dom;
                var visMode = this.visibilityMode;
                if(visible){
                    this.setOpacity(.01);
                    this.setVisible(true);
                }
                this.anim({opacity: { to: (visible?1:0) }},
                      this.preanim(arguments, 1),
                      null, .35, 'easeIn', function(){
                         if(!visible){
                             if(visMode == El.DISPLAY){
                                 dom.style.display = "none";
                             }else{
                                 dom.style.visibility = "hidden";
                             }
                             Roo.get(dom).setOpacity(1);
                         }
                     });
            }
            return this;
        },

        /**
         * Returns true if display is not "none"
         * @return {Boolean}
         */
        isDisplayed : function() {
            return this.getStyle("display") != "none";
        },

        /**
         * Toggles the element's visibility or display, depending on visibility mode.
         * @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
         * @return {Roo.Element} this
         */
        toggle : function(animate){
            this.setVisible(!this.isVisible(), this.preanim(arguments, 0));
            return this;
        },

        /**
         * Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true.
         * @param {Boolean} value Boolean value to display the element using its default display, or a string to set the display directly
         * @return {Roo.Element} this
         */
        setDisplayed : function(value) {
            if(typeof value == "boolean"){
               value = value ? this.originalDisplay : "none";
            }
            this.setStyle("display", value);
            return this;
        },

        /**
         * Tries to focus the element. Any exceptions are caught and ignored.
         * @return {Roo.Element} this
         */
        focus : function() {
            try{
                this.dom.focus();
            }catch(e){}
            return this;
        },

        /**
         * Tries to blur the element. Any exceptions are caught and ignored.
         * @return {Roo.Element} this
         */
        blur : function() {
            try{
                this.dom.blur();
            }catch(e){}
            return this;
        },

        /**
         * Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out.
         * @param {String/Array} className The CSS class to add, or an array of classes
         * @return {Roo.Element} this
         */
        addClass : function(className){
            if(className instanceof Array){
                for(var i = 0, len = className.length; i < len; i++) {
                    this.addClass(className[i]);
                }
            }else{
                if(className && !this.hasClass(className)){
                    if (this.dom instanceof SVGElement) {
                        this.dom.className.baseVal =this.dom.className.baseVal  + " " + className;
                    } else {
                        this.dom.className = this.dom.className + " " + className;
                    }
                }
            }
            return this;
        },

        /**
         * Adds one or more CSS classes to this element and removes the same class(es) from all siblings.
         * @param {String/Array} className The CSS class to add, or an array of classes
         * @return {Roo.Element} this
         */
        radioClass : function(className){
            var siblings = this.dom.parentNode.childNodes;
            for(var i = 0; i < siblings.length; i++) {
                var s = siblings[i];
                if(s.nodeType == 1){
                    Roo.get(s).removeClass(className);
                }
            }
            this.addClass(className);
            return this;
        },

        /**
         * Removes one or more CSS classes from the element.
         * @param {String/Array} className The CSS class to remove, or an array of classes
         * @return {Roo.Element} this
         */
        removeClass : function(className){
            
            var cn = this.dom instanceof SVGElement ? this.dom.className.baseVal : this.dom.className;
            if(!className || !cn){
                return this;
            }
            if(className instanceof Array){
                for(var i = 0, len = className.length; i < len; i++) {
                    this.removeClass(className[i]);
                }
            }else{
                if(this.hasClass(className)){
                    var re = this.classReCache[className];
                    if (!re) {
                       re = new RegExp('(?:^|\\s+)' + className + '(?:\\s+|$)', "g");
                       this.classReCache[className] = re;
                    }
                    if (this.dom instanceof SVGElement) {
                        this.dom.className.baseVal = cn.replace(re, " ");
                    } else {
                        this.dom.className = cn.replace(re, " ");
                    }
                }
            }
            return this;
        },

        // private
        classReCache: {},

        /**
         * Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).
         * @param {String} className The CSS class to toggle
         * @return {Roo.Element} this
         */
        toggleClass : function(className){
            if(this.hasClass(className)){
                this.removeClass(className);
            }else{
                this.addClass(className);
            }
            return this;
        },

        /**
         * Checks if the specified CSS class exists on this element's DOM node.
         * @param {String} className The CSS class to check for
         * @return {Boolean} True if the class exists, else false
         */
        hasClass : function(className){
            if (this.dom instanceof SVGElement) {
                return className && (' '+this.dom.className.baseVal +' ').indexOf(' '+className+' ') != -1; 
            } 
            return className && (' '+this.dom.className+' ').indexOf(' '+className+' ') != -1;
        },

        /**
         * Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added.
         * @param {String} oldClassName The CSS class to replace
         * @param {String} newClassName The replacement CSS class
         * @return {Roo.Element} this
         */
        replaceClass : function(oldClassName, newClassName){
            this.removeClass(oldClassName);
            this.addClass(newClassName);
            return this;
        },

        /**
         * Returns an object with properties matching the styles requested.
         * For example, el.getStyles('color', 'font-size', 'width') might return
         * {'color': '#FFFFFF', 'font-size': '13px', 'width': '100px'}.
         * @param {String} style1 A style name
         * @param {String} style2 A style name
         * @param {String} etc.
         * @return {Object} The style object
         */
        getStyles : function(){
            var a = arguments, len = a.length, r = {};
            for(var i = 0; i < len; i++){
                r[a[i]] = this.getStyle(a[i]);
            }
            return r;
        },

        /**
         * Normalizes currentStyle and computedStyle. This is not YUI getStyle, it is an optimised version.
         * @param {String} property The style property whose value is returned.
         * @return {String} The current value of the style property for this element.
         */
        getStyle : function(){
            return view && view.getComputedStyle ?
                function(prop){
                    var el = this.dom, v, cs, camel;
                    if(prop == 'float'){
                        prop = "cssFloat";
                    }
                    if(el.style && (v = el.style[prop])){
                        return v;
                    }
                    if(cs = view.getComputedStyle(el, "")){
                        if(!(camel = propCache[prop])){
                            camel = propCache[prop] = prop.replace(camelRe, camelFn);
                        }
                        return cs[camel];
                    }
                    return null;
                } :
                function(prop){
                    var el = this.dom, v, cs, camel;
                    if(prop == 'opacity'){
                        if(typeof el.style.filter == 'string'){
                            var m = el.style.filter.match(/alpha\(opacity=(.*)\)/i);
                            if(m){
                                var fv = parseFloat(m[1]);
                                if(!isNaN(fv)){
                                    return fv ? fv / 100 : 0;
                                }
                            }
                        }
                        return 1;
                    }else if(prop == 'float'){
                        prop = "styleFloat";
                    }
                    if(!(camel = propCache[prop])){
                        camel = propCache[prop] = prop.replace(camelRe, camelFn);
                    }
                    if(v = el.style[camel]){
                        return v;
                    }
                    if(cs = el.currentStyle){
                        return cs[camel];
                    }
                    return null;
                };
        }(),

        /**
         * Wrapper for setting style properties, also takes single object parameter of multiple styles.
         * @param {String/Object} property The style property to be set, or an object of multiple styles.
         * @param {String} value (optional) The value to apply to the given property, or null if an object was passed.
         * @return {Roo.Element} this
         */
        setStyle : function(prop, value){
            if(typeof prop == "string"){
                
                if (prop == 'float') {
                    this.setStyle(Roo.isIE ? 'styleFloat'  : 'cssFloat', value);
                    return this;
                }
                
                var camel;
                if(!(camel = propCache[prop])){
                    camel = propCache[prop] = prop.replace(camelRe, camelFn);
                }
                
                if(camel == 'opacity') {
                    this.setOpacity(value);
                }else{
                    this.dom.style[camel] = value;
                }
            }else{
                for(var style in prop){
                    if(typeof prop[style] != "function"){
                       this.setStyle(style, prop[style]);
                    }
                }
            }
            return this;
        },

        /**
         * More flexible version of {@link #setStyle} for setting style properties.
         * @param {String/Object/Function} styles A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or
         * a function which returns such a specification.
         * @return {Roo.Element} this
         */
        applyStyles : function(style){
            Roo.DomHelper.applyStyles(this.dom, style);
            return this;
        },

        /**
          * Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
          * @return {Number} The X position of the element
          */
        getX : function(){
            return D.getX(this.dom);
        },

        /**
          * Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
          * @return {Number} The Y position of the element
          */
        getY : function(){
            return D.getY(this.dom);
        },

        /**
          * Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
          * @return {Array} The XY position of the element
          */
        getXY : function(){
            return D.getXY(this.dom);
        },

        /**
         * Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
         * @param {Number} The X position of the element
         * @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
         * @return {Roo.Element} this
         */
        setX : function(x, animate){
            if(!animate || !A){
                D.setX(this.dom, x);
            }else{
                this.setXY([x, this.getY()], this.preanim(arguments, 1));
            }
            return this;
        },

        /**
         * Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
         * @param {Number} The Y position of the element
         * @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
         * @return {Roo.Element} this
         */
        setY : function(y, animate){
            if(!animate || !A){
                D.setY(this.dom, y);
            }else{
                this.setXY([this.getX(), y], this.preanim(arguments, 1));
            }
            return this;
        },

        /**
         * Sets the element's left position directly using CSS style (instead of {@link #setX}).
         * @param {String} left The left CSS property value
         * @return {Roo.Element} this
         */
        setLeft : function(left){
            this.setStyle("left", this.addUnits(left));
            return this;
        },

        /**
         * Sets the element's top position directly using CSS style (instead of {@link #setY}).
         * @param {String} top The top CSS property value
         * @return {Roo.Element} this
         */
        setTop : function(top){
            this.setStyle("top", this.addUnits(top));
            return this;
        },

        /**
         * Sets the element's CSS right style.
         * @param {String} right The right CSS property value
         * @return {Roo.Element} this
         */
        setRight : function(right){
            this.setStyle("right", this.addUnits(right));
            return this;
        },

        /**
         * Sets the element's CSS bottom style.
         * @param {String} bottom The bottom CSS property value
         * @return {Roo.Element} this
         */
        setBottom : function(bottom){
            this.setStyle("bottom", this.addUnits(bottom));
            return this;
        },

        /**
         * Sets the position of the element in page coordinates, regardless of how the element is positioned.
         * The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
         * @param {Array} pos Contains X & Y [x, y] values for new position (coordinates are page-based)
         * @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
         * @return {Roo.Element} this
         */
        setXY : function(pos, animate){
            if(!animate || !A){
                D.setXY(this.dom, pos);
            }else{
                this.anim({points: {to: pos}}, this.preanim(arguments, 1), 'motion');
            }
            return this;
        },

        /**
         * Sets the position of the element in page coordinates, regardless of how the element is positioned.
         * The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
         * @param {Number} x X value for new position (coordinates are page-based)
         * @param {Number} y Y value for new position (coordinates are page-based)
         * @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
         * @return {Roo.Element} this
         */
        setLocation : function(x, y, animate){
            this.setXY([x, y], this.preanim(arguments, 2));
            return this;
        },

        /**
         * Sets the position of the element in page coordinates, regardless of how the element is positioned.
         * The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
         * @param {Number} x X value for new position (coordinates are page-based)
         * @param {Number} y Y value for new position (coordinates are page-based)
         * @param {Boolean/Object} animate (optional) True for the default animation, or a standard Element animation config object
         * @return {Roo.Element} this
         */
        moveTo : function(x, y, animate){
            this.setXY([x, y], this.preanim(arguments, 2));
            return this;
        },

        /**
         * Returns the region of the given element.
         * The element must be part of the DOM tree to have a region (display:none or elements not appended return false).
         * @return {Region} A Roo.lib.Region containing "top, left, bottom, right" member data.
         */
        getRegion : function(){
            return D.getRegion(this.dom);
        },

        /**
         * Returns the offset height of the element
         * @param {Boolean} contentHeight (optional) true to get the height minus borders and padding
         * @return {Number} The element's height
         */
        getHeight : function(contentHeight){
            var h = this.dom.offsetHeight || 0;
            return contentHeight !== true ? h : h-this.getBorderWidth("tb")-this.getPadding("tb");
        },

        /**
         * Returns the offset width of the element
         * @param {Boolean} contentWidth (optional) true to get the width minus borders and padding
         * @return {Number} The element's width
         */
        getWidth : function(contentWidth){
            var w = this.dom.offsetWidth || 0;
            return contentWidth !== true ? w : w-this.getBorderWidth("lr")-this.getPadding("lr");
        },

        /**
         * Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders
         * when needed to simulate offsetHeight when offsets aren't available. This may not work on display:none elements
         * if a height has not been set using CSS.
         * @return {Number}
         */
        getComputedHeight : function(){
            var h = Math.max(this.dom.offsetHeight, this.dom.clientHeight);
            if(!h){
                h = parseInt(this.getStyle('height'), 10) || 0;
                if(!this.isBorderBox()){
                    h += this.getFrameWidth('tb');
                }
            }
            return h;
        },

        /**
         * Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders
         * when needed to simulate offsetWidth when offsets aren't available. This may not work on display:none elements
         * if a width has not been set using CSS.
         * @return {Number}
         */
        getComputedWidth : function(){
            var w = Math.max(this.dom.offsetWidth, this.dom.clientWidth);
            if(!w){
                w = parseInt(this.getStyle('width'), 10) || 0;
                if(!this.isBorderBox()){
                    w += this.getFrameWidth('lr');
                }
            }
            return w;
        },

        /**
         * Returns the size of the element.
         * @param {Boolean} contentSize (optional) true to get the width/size minus borders and padding
         * @return {Object} An object containing the element's size {width: (element width), height: (element height)}
         */
        getSize : function(contentSize){
            return {width: this.getWidth(contentSize), height: this.getHeight(contentSize)};
        },

        /**
         * Returns the width and height of the viewport.
         * @return {Object} An object containing the viewport's size {width: (viewport width), height: (viewport height)}
         */
        getViewSize : function(){
            var d = this.dom, doc = document, aw = 0, ah = 0;
            if(d == doc || d == doc.body){
                return {width : D.getViewWidth(), height: D.getViewHeight()};
            }else{
                return {
                    width : d.clientWidth,
                    height: d.clientHeight
                };
            }
        },

        /**
         * Returns the value of the "value" attribute
         * @param {Boolean} asNumber true to parse the value as a number
         * @return {String/Number}
         */
        getValue : function(asNumber){
            return asNumber ? parseInt(this.dom.value, 10) : this.dom.value;
        },

        // private
        adjustWidth : function(width){
            if(typeof width == "number"){
                if(this.autoBoxAdjust && !this.isBorderBox()){
                   width -= (this.getBorderWidth("lr") + this.getPadding("lr"));
                }
                if(width < 0){
                    width = 0;
                }
            }
            return width;
        },

        // private
        adjustHeight : function(height){
            if(typeof height == "number"){
               if(this.autoBoxAdjust && !this.isBorderBox()){
                   height -= (this.getBorderWidth("tb") + this.getPadding("tb"));
               }
               if(height < 0){
                   height = 0;
               }
            }
            return height;
        },

        /**
         * Set the width of the element
         * @param {Number} width The new width
         * @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
         * @return {Roo.Element} this
         */
        setWidth : function(width, animate){
            width = this.adjustWidth(width);
            if(!animate || !A){
                this.dom.style.width = this.addUnits(width);
            }else{
                this.anim({width: {to: width}}, this.preanim(arguments, 1));
            }
            return this;
        },

        /**
         * Set the height of the element
         * @param {Number} height The new height
         * @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
         * @return {Roo.Element} this
         */
         setHeight : function(height, animate){
            height = this.adjustHeight(height);
            if(!animate || !A){
                this.dom.style.height = this.addUnits(height);
            }else{
                this.anim({height: {to: height}}, this.preanim(arguments, 1));
            }
            return this;
        },

        /**
         * Set the size of the element. If animation is true, both width an height will be animated concurrently.
         * @param {Number} width The new width
         * @param {Number} height The new height
         * @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
         * @return {Roo.Element} this
         */
         setSize : function(width, height, animate){
            if(typeof width == "object"){ // in case of object from getSize()
                height = width.height; width = width.width;
            }
            width = this.adjustWidth(width); height = this.adjustHeight(height);
            if(!animate || !A){
                this.dom.style.width = this.addUnits(width);
                this.dom.style.height = this.addUnits(height);
            }else{
                this.anim({width: {to: width}, height: {to: height}}, this.preanim(arguments, 2));
            }
            return this;
        },

        /**
         * Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently.
         * @param {Number} x X value for new position (coordinates are page-based)
         * @param {Number} y Y value for new position (coordinates are page-based)
         * @param {Number} width The new width
         * @param {Number} height The new height
         * @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
         * @return {Roo.Element} this
         */
        setBounds : function(x, y, width, height, animate){
            if(!animate || !A){
                this.setSize(width, height);
                this.setLocation(x, y);
            }else{
                width = this.adjustWidth(width); height = this.adjustHeight(height);
                this.anim({points: {to: [x, y]}, width: {to: width}, height: {to: height}},
                              this.preanim(arguments, 4), 'motion');
            }
            return this;
        },

        /**
         * Sets the element's position and size the the specified region. If animation is true then width, height, x and y will be animated concurrently.
         * @param {Roo.lib.Region} region The region to fill
         * @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
         * @return {Roo.Element} this
         */
        setRegion : function(region, animate){
            this.setBounds(region.left, region.top, region.right-region.left, region.bottom-region.top, this.preanim(arguments, 1));
            return this;
        },

        /**
         * Appends an event handler
         *
         * @param {String}   eventName     The type of event to append
         * @param {Function} fn        The method the event invokes
         * @param {Object} scope       (optional) The scope (this object) of the fn
         * @param {Object}   options   (optional)An object with standard {@link Roo.EventManager#addListener} options
         */
        addListener : function(eventName, fn, scope, options)
        {
            if (eventName == 'dblclick') { // doublclick (touchstart) - faked on touch.
                this.addListener('touchstart', this.onTapHandler, this);
            }
            
            // we need to handle a special case where dom element is a svg element.
            // in this case we do not actua
            if (!this.dom) {
                return;
            }
            
            if (this.dom instanceof SVGElement && !(this.dom instanceof SVGSVGElement)) {
                if (typeof(this.listeners[eventName]) == 'undefined') {
                    this.listeners[eventName] =  new Roo.util.Event(this, eventName);
                }
                this.listeners[eventName].addListener(fn, scope, options);
                return;
            }
            
                
            Roo.EventManager.on(this.dom,  eventName, fn, scope || this, options);
            
            
        },
        tapedTwice : false,
        onTapHandler : function(event)
        {
            if(!this.tapedTwice) {
                this.tapedTwice = true;
                var s = this;
                setTimeout( function() {
                    s.tapedTwice = false;
                }, 300 );
                return;
            }
            event.preventDefault();
            var revent = new MouseEvent('dblclick',  {
                view: window,
                bubbles: true,
                cancelable: true
            });
             
            this.dom.dispatchEvent(revent);
            //action on double tap goes below
             
        }, 
 
        /**
         * Removes an event handler from this element
         * @param {String} eventName the type of event to remove
         * @param {Function} fn the method the event invokes
         * @param {Function} scope (needed for svg fake listeners)
         * @return {Roo.Element} this
         */
        removeListener : function(eventName, fn, scope){
            Roo.EventManager.removeListener(this.dom,  eventName, fn);
            if (typeof(this.listeners) == 'undefined'  || typeof(this.listeners[eventName]) == 'undefined') {
                return this;
            }
            this.listeners[eventName].removeListener(fn, scope);
            return this;
        },

        /**
         * Removes all previous added listeners from this element
         * @return {Roo.Element} this
         */
        removeAllListeners : function(){
            E.purgeElement(this.dom);
            this.listeners = {};
            return this;
        },

        relayEvent : function(eventName, observable){
            this.on(eventName, function(e){
                observable.fireEvent(eventName, e);
            });
        },

        
        /**
         * Set the opacity of the element
         * @param {Float} opacity The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc
         * @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
         * @return {Roo.Element} this
         */
         setOpacity : function(opacity, animate){
            if(!animate || !A){
                var s = this.dom.style;
                if(Roo.isIE){
                    s.zoom = 1;
                    s.filter = (s.filter || '').replace(/alpha\([^\)]*\)/gi,"") +
                               (opacity == 1 ? "" : "alpha(opacity=" + opacity * 100 + ")");
                }else{
                    s.opacity = opacity;
                }
            }else{
                this.anim({opacity: {to: opacity}}, this.preanim(arguments, 1), null, .35, 'easeIn');
            }
            return this;
        },

        /**
         * Gets the left X coordinate
         * @param {Boolean} local True to get the local css position instead of page coordinate
         * @return {Number}
         */
        getLeft : function(local){
            if(!local){
                return this.getX();
            }else{
                return parseInt(this.getStyle("left"), 10) || 0;
            }
        },

        /**
         * Gets the right X coordinate of the element (element X position + element width)
         * @param {Boolean} local True to get the local css position instead of page coordinate
         * @return {Number}
         */
        getRight : function(local){
            if(!local){
                return this.getX() + this.getWidth();
            }else{
                return (this.getLeft(true) + this.getWidth()) || 0;
            }
        },

        /**
         * Gets the top Y coordinate
         * @param {Boolean} local True to get the local css position instead of page coordinate
         * @return {Number}
         */
        getTop : function(local) {
            if(!local){
                return this.getY();
            }else{
                return parseInt(this.getStyle("top"), 10) || 0;
            }
        },

        /**
         * Gets the bottom Y coordinate of the element (element Y position + element height)
         * @param {Boolean} local True to get the local css position instead of page coordinate
         * @return {Number}
         */
        getBottom : function(local){
            if(!local){
                return this.getY() + this.getHeight();
            }else{
                return (this.getTop(true) + this.getHeight()) || 0;
            }
        },

        /**
        * Initializes positioning on this element. If a desired position is not passed, it will make the
        * the element positioned relative IF it is not already positioned.
        * @param {String} pos (optional) Positioning to use "relative", "absolute" or "fixed"
        * @param {Number} zIndex (optional) The zIndex to apply
        * @param {Number} x (optional) Set the page X position
        * @param {Number} y (optional) Set the page Y position
        */
        position : function(pos, zIndex, x, y){
            if(!pos){
               if(this.getStyle('position') == 'static'){
                   this.setStyle('position', 'relative');
               }
            }else{
                this.setStyle("position", pos);
            }
            if(zIndex){
                this.setStyle("z-index", zIndex);
            }
            if(x !== undefined && y !== undefined){
                this.setXY([x, y]);
            }else if(x !== undefined){
                this.setX(x);
            }else if(y !== undefined){
                this.setY(y);
            }
        },

        /**
        * Clear positioning back to the default when the document was loaded
        * @param {String} value (optional) The value to use for the left,right,top,bottom, defaults to '' (empty string). You could use 'auto'.
        * @return {Roo.Element} this
         */
        clearPositioning : function(value){
            value = value ||'';
            this.setStyle({
                "left": value,
                "right": value,
                "top": value,
                "bottom": value,
                "z-index": "",
                "position" : "static"
            });
            return this;
        },

        /**
        * Gets an object with all CSS positioning properties. Useful along with setPostioning to get
        * snapshot before performing an update and then restoring the element.
        * @return {Object}
        */
        getPositioning : function(){
            var l = this.getStyle("left");
            var t = this.getStyle("top");
            return {
                "position" : this.getStyle("position"),
                "left" : l,
                "right" : l ? "" : this.getStyle("right"),
                "top" : t,
                "bottom" : t ? "" : this.getStyle("bottom"),
                "z-index" : this.getStyle("z-index")
            };
        },

        /**
         * Gets the width of the border(s) for the specified side(s)
         * @param {String} side Can be t, l, r, b or any combination of those to add multiple values. For example,
         * passing lr would get the border (l)eft width + the border (r)ight width.
         * @return {Number} The width of the sides passed added together
         */
        getBorderWidth : function(side){
            return this.addStyles(side, El.borders);
        },

        /**
         * Gets the width of the padding(s) for the specified side(s)
         * @param {String} side Can be t, l, r, b or any combination of those to add multiple values. For example,
         * passing lr would get the padding (l)eft + the padding (r)ight.
         * @return {Number} The padding of the sides passed added together
         */
        getPadding : function(side){
            return this.addStyles(side, El.paddings);
        },

        /**
        * Set positioning with an object returned by getPositioning().
        * @param {Object} posCfg
        * @return {Roo.Element} this
         */
        setPositioning : function(pc){
            this.applyStyles(pc);
            if(pc.right == "auto"){
                this.dom.style.right = "";
            }
            if(pc.bottom == "auto"){
                this.dom.style.bottom = "";
            }
            return this;
        },

        // private
        fixDisplay : function(){
            if(this.getStyle("display") == "none"){
                this.setStyle("visibility", "hidden");
                this.setStyle("display", this.originalDisplay); // first try reverting to default
                if(this.getStyle("display") == "none"){ // if that fails, default to block
                    this.setStyle("display", "block");
                }
            }
        },

        /**
         * Quick set left and top adding default units
         * @param {String} left The left CSS property value
         * @param {String} top The top CSS property value
         * @return {Roo.Element} this
         */
         setLeftTop : function(left, top){
            this.dom.style.left = this.addUnits(left);
            this.dom.style.top = this.addUnits(top);
            return this;
        },

        /**
         * Move this element relative to its current position.
         * @param {String} direction Possible values are: "l","left" - "r","right" - "t","top","up" - "b","bottom","down".
         * @param {Number} distance How far to move the element in pixels
         * @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
         * @return {Roo.Element} this
         */
         move : function(direction, distance, animate){
            var xy = this.getXY();
            direction = direction.toLowerCase();
            switch(direction){
                case "l":
                case "left":
                    this.moveTo(xy[0]-distance, xy[1], this.preanim(arguments, 2));
                    break;
               case "r":
               case "right":
                    this.moveTo(xy[0]+distance, xy[1], this.preanim(arguments, 2));
                    break;
               case "t":
               case "top":
               case "up":
                    this.moveTo(xy[0], xy[1]-distance, this.preanim(arguments, 2));
                    break;
               case "b":
               case "bottom":
               case "down":
                    this.moveTo(xy[0], xy[1]+distance, this.preanim(arguments, 2));
                    break;
            }
            return this;
        },

        /**
         *  Store the current overflow setting and clip overflow on the element - use {@link #unclip} to remove
         * @return {Roo.Element} this
         */
        clip : function(){
            if(!this.isClipped){
               this.isClipped = true;
               this.originalClip = {
                   "o": this.getStyle("overflow"),
                   "x": this.getStyle("overflow-x"),
                   "y": this.getStyle("overflow-y")
               };
               this.setStyle("overflow", "hidden");
               this.setStyle("overflow-x", "hidden");
               this.setStyle("overflow-y", "hidden");
            }
            return this;
        },

        /**
         *  Return clipping (overflow) to original clipping before clip() was called
         * @return {Roo.Element} this
         */
        unclip : function(){
            if(this.isClipped){
                this.isClipped = false;
                var o = this.originalClip;
                if(o.o){this.setStyle("overflow", o.o);}
                if(o.x){this.setStyle("overflow-x", o.x);}
                if(o.y){this.setStyle("overflow-y", o.y);}
            }
            return this;
        },


        /**
         * Gets the x,y coordinates specified by the anchor position on the element.
         * @param {String} anchor (optional) The specified anchor position (defaults to "c").  See {@link #alignTo} for details on supported anchor positions.
         * @param {Object} size (optional) An object containing the size to use for calculating anchor position
         *                       {width: (target width), height: (target height)} (defaults to the element's current size)
         * @param {Boolean} local (optional) True to get the local (element top/left-relative) anchor position instead of page coordinates
         * @return {Array} [x, y] An array containing the element's x and y coordinates
         */
        getAnchorXY : function(anchor, local, s){
            //Passing a different size is useful for pre-calculating anchors,
            //especially for anchored animations that change the el size.

            var w, h, vp = false;
            if(!s){
                var d = this.dom;
                if(d == document.body || d == document){
                    vp = true;
                    w = D.getViewWidth(); h = D.getViewHeight();
                }else{
                    w = this.getWidth(); h = this.getHeight();
                }
            }else{
                w = s.width;  h = s.height;
            }
            var x = 0, y = 0, r = Math.round;
            switch((anchor || "tl").toLowerCase()){
                case "c":
                    x = r(w*.5);
                    y = r(h*.5);
                break;
                case "t":
                    x = r(w*.5);
                    y = 0;
                break;
                case "l":
                    x = 0;
                    y = r(h*.5);
                break;
                case "r":
                    x = w;
                    y = r(h*.5);
                break;
                case "b":
                    x = r(w*.5);
                    y = h;
                break;
                case "tl":
                    x = 0;
                    y = 0;
                break;
                case "bl":
                    x = 0;
                    y = h;
                break;
                case "br":
                    x = w;
                    y = h;
                break;
                case "tr":
                    x = w;
                    y = 0;
                break;
            }
            if(local === true){
                return [x, y];
            }
            if(vp){
                var sc = this.getScroll();
                return [x + sc.left, y + sc.top];
            }
            //Add the element's offset xy
            var o = this.getXY();
            return [x+o[0], y+o[1]];
        },

        /**
         * Gets the x,y coordinates to align this element with another element. See {@link #alignTo} for more info on the
         * supported position values.
         * @param {String/HTMLElement/Roo.Element} element The element to align to.
         * @param {String} position The position to align to.
         * @param {Array} offsets (optional) Offset the positioning by [x, y]
         * @return {Array} [x, y]
         */
        getAlignToXY : function(el, p, o)
        {
            el = Roo.get(el);
            var d = this.dom;
            if(!el.dom){
                throw "Element.alignTo with an element that doesn't exist";
            }
            var c = false; //constrain to viewport
            var p1 = "", p2 = "";
            o = o || [0,0];

            if(!p){
                p = "tl-bl";
            }else if(p == "?"){
                p = "tl-bl?";
            }else if(p.indexOf("-") == -1){
                p = "tl-" + p;
            }
            p = p.toLowerCase();
            var m = p.match(/^([a-z]+)-([a-z]+)(\?)?$/);
            if(!m){
               throw "Element.alignTo with an invalid alignment " + p;
            }
            p1 = m[1]; p2 = m[2]; c = !!m[3];

            //Subtract the aligned el's internal xy from the target's offset xy
            //plus custom offset to get the aligned el's new offset xy
            var a1 = this.getAnchorXY(p1, true);
            var a2 = el.getAnchorXY(p2, false);
            var x = a2[0] - a1[0] + o[0];
            var y = a2[1] - a1[1] + o[1];
            if(c){
                //constrain the aligned el to viewport if necessary
                var w = this.getWidth(), h = this.getHeight(), r = el.getRegion();
                // 5px of margin for ie
                var dw = D.getViewWidth()-5, dh = D.getViewHeight()-5;

                //If we are at a viewport boundary and the aligned el is anchored on a target border that is
                //perpendicular to the vp border, allow the aligned el to slide on that border,
                //otherwise swap the aligned el to the opposite border of the target.
                var p1y = p1.charAt(0), p1x = p1.charAt(p1.length-1);
               var p2y = p2.charAt(0), p2x = p2.charAt(p2.length-1);
               var swapY = ((p1y=="t" && p2y=="b") || (p1y=="b" && p2y=="t")  );
               var swapX = ((p1x=="r" && p2x=="l") || (p1x=="l" && p2x=="r"));

               var doc = document;
               var scrollX = (doc.documentElement.scrollLeft || doc.body.scrollLeft || 0)+5;
               var scrollY = (doc.documentElement.scrollTop || doc.body.scrollTop || 0)+5;

               if((x+w) > dw + scrollX){
                    x = swapX ? r.left-w : dw+scrollX-w;
                }
               if(x < scrollX){
                   x = swapX ? r.right : scrollX;
               }
               if((y+h) > dh + scrollY){
                    y = swapY ? r.top-h : dh+scrollY-h;
                }
               if (y < scrollY){
                   y = swapY ? r.bottom : scrollY;
               }
            }
            return [x,y];
        },

        // private
        getConstrainToXY : function(){
            var os = {top:0, left:0, bottom:0, right: 0};

            return function(el, local, offsets, proposedXY){
                el = Roo.get(el);
                offsets = offsets ? Roo.applyIf(offsets, os) : os;

                var vw, vh, vx = 0, vy = 0;
                if(el.dom == document.body || el.dom == document){
                    vw = Roo.lib.Dom.getViewWidth();
                    vh = Roo.lib.Dom.getViewHeight();
                }else{
                    vw = el.dom.clientWidth;
                    vh = el.dom.clientHeight;
                    if(!local){
                        var vxy = el.getXY();
                        vx = vxy[0];
                        vy = vxy[1];
                    }
                }

                var s = el.getScroll();

                vx += offsets.left + s.left;
                vy += offsets.top + s.top;

                vw -= offsets.right;
                vh -= offsets.bottom;

                var vr = vx+vw;
                var vb = vy+vh;

                var xy = proposedXY || (!local ? this.getXY() : [this.getLeft(true), this.getTop(true)]);
                var x = xy[0], y = xy[1];
                var w = this.dom.offsetWidth, h = this.dom.offsetHeight;

                // only move it if it needs it
                var moved = false;

                // first validate right/bottom
                if((x + w) > vr){
                    x = vr - w;
                    moved = true;
                }
                if((y + h) > vb){
                    y = vb - h;
                    moved = true;
                }
                // then make sure top/left isn't negative
                if(x < vx){
                    x = vx;
                    moved = true;
                }
                if(y < vy){
                    y = vy;
                    moved = true;
                }
                return moved ? [x, y] : false;
            };
        }(),

        // private
        adjustForConstraints : function(xy, parent, offsets){
            return this.getConstrainToXY(parent || document, false, offsets, xy) ||  xy;
        },

        /**
         * Aligns this element with another element relative to the specified anchor points. If the other element is the
         * document it aligns it to the viewport.
         * The position parameter is optional, and can be specified in any one of the following formats:
         * <ul>
         *   <li><b>Blank</b>: Defaults to aligning the element's top-left corner to the target's bottom-left corner ("tl-bl").</li>
         *   <li><b>One anchor (deprecated)</b>: The passed anchor position is used as the target element's anchor point.
         *       The element being aligned will position its top-left corner (tl) to that point.  <i>This method has been
         *       deprecated in favor of the newer two anchor syntax below</i>.</li>
         *   <li><b>Two anchors</b>: If two values from the table below are passed separated by a dash, the first value is used as the
         *       element's anchor point, and the second value is used as the target's anchor point.</li>
         * </ul>
         * In addition to the anchor points, the position parameter also supports the "?" character.  If "?" is passed at the end of
         * the position string, the element will attempt to align as specified, but the position will be adjusted to constrain to
         * the viewport if necessary.  Note that the element being aligned might be swapped to align to a different position than
         * that specified in order to enforce the viewport constraints.
         * Following are all of the supported anchor positions:
    <pre>
    Value  Description
    -----  -----------------------------
    tl     The top left corner (default)
    t      The center of the top edge
    tr     The top right corner
    l      The center of the left edge
    c      In the center of the element
    r      The center of the right edge
    bl     The bottom left corner
    b      The center of the bottom edge
    br     The bottom right corner
    </pre>
    Example Usage:
    <pre><code>
    // align el to other-el using the default positioning ("tl-bl", non-constrained)
    el.alignTo("other-el");

    // align the top left corner of el with the top right corner of other-el (constrained to viewport)
    el.alignTo("other-el", "tr?");

    // align the bottom right corner of el with the center left edge of other-el
    el.alignTo("other-el", "br-l?");

    // align the center of el with the bottom left corner of other-el and
    // adjust the x position by -6 pixels (and the y position by 0)
    el.alignTo("other-el", "c-bl", [-6, 0]);
    </code></pre>
         * @param {String/HTMLElement/Roo.Element} element The element to align to.
         * @param {String} position The position to align to.
         * @param {Array} offsets (optional) Offset the positioning by [x, y]
         * @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
         * @return {Roo.Element} this
         */
        alignTo : function(element, position, offsets, animate){
            var xy = this.getAlignToXY(element, position, offsets);
            this.setXY(xy, this.preanim(arguments, 3));
            return this;
        },

        /**
         * Anchors an element to another element and realigns it when the window is resized.
         * @param {String/HTMLElement/Roo.Element} element The element to align to.
         * @param {String} position The position to align to.
         * @param {Array} offsets (optional) Offset the positioning by [x, y]
         * @param {Boolean/Object} animate (optional) True for the default animation or a standard Element animation config object
         * @param {Boolean/Number} monitorScroll (optional) True to monitor body scroll and reposition. If this parameter
         * is a number, it is used as the buffer delay (defaults to 50ms).
         * @param {Function} callback The function to call after the animation finishes
         * @return {Roo.Element} this
         */
        anchorTo : function(el, alignment, offsets, animate, monitorScroll, callback){
            var action = function(){
                this.alignTo(el, alignment, offsets, animate);
                Roo.callback(callback, this);
            };
            Roo.EventManager.onWindowResize(action, this);
            var tm = typeof monitorScroll;
            if(tm != 'undefined'){
                Roo.EventManager.on(window, 'scroll', action, this,
                    {buffer: tm == 'number' ? monitorScroll : 50});
            }
            action.call(this); // align immediately
            return this;
        },
        /**
         * Clears any opacity settings from this element. Required in some cases for IE.
         * @return {Roo.Element} this
         */
        clearOpacity : function(){
            if (window.ActiveXObject) {
                if(typeof this.dom.style.filter == 'string' && (/alpha/i).test(this.dom.style.filter)){
                    this.dom.style.filter = "";
                }
            } else {
                this.dom.style.opacity = "";
                this.dom.style["-moz-opacity"] = "";
                this.dom.style["-khtml-opacity"] = "";
            }
            return this;
        },

        /**
         * Hide this element - Uses display mode to determine whether to use "display" or "visibility". See {@link #setVisible}.
         * @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
         * @return {Roo.Element} this
         */
        hide : function(animate){
            this.setVisible(false, this.preanim(arguments, 0));
            return this;
        },

        /**
        * Show this element - Uses display mode to determine whether to use "display" or "visibility". See {@link #setVisible}.
        * @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
         * @return {Roo.Element} this
         */
        show : function(animate){
            this.setVisible(true, this.preanim(arguments, 0));
            return this;
        },

        /**
         * @private Test if size has a unit, otherwise appends the default
         */
        addUnits : function(size){
            return Roo.Element.addUnits(size, this.defaultUnit);
        },

        /**
         * Temporarily enables offsets (width,height,x,y) for an element with display:none, use endMeasure() when done.
         * @return {Roo.Element} this
         */
        beginMeasure : function(){
            var el = this.dom;
            if(el.offsetWidth || el.offsetHeight){
                return this; // offsets work already
            }
            var changed = [];
            var p = this.dom, b = document.body; // start with this element
            while((!el.offsetWidth && !el.offsetHeight) && p && p.tagName && p != b){
                var pe = Roo.get(p);
                if(pe.getStyle('display') == 'none'){
                    changed.push({el: p, visibility: pe.getStyle("visibility")});
                    p.style.visibility = "hidden";
                    p.style.display = "block";
                }
                p = p.parentNode;
            }
            this._measureChanged = changed;
            return this;

        },

        /**
         * Restores displays to before beginMeasure was called
         * @return {Roo.Element} this
         */
        endMeasure : function(){
            var changed = this._measureChanged;
            if(changed){
                for(var i = 0, len = changed.length; i < len; i++) {
                    var r = changed[i];
                    r.el.style.visibility = r.visibility;
                    r.el.style.display = "none";
                }
                this._measureChanged = null;
            }
            return this;
        },

        /**
        * Update the innerHTML of this element, optionally searching for and processing scripts
        * @param {String} html The new HTML
        * @param {Boolean} loadScripts (optional) true to look for and process scripts
        * @param {Function} callback For async script loading you can be noticed when the update completes
        * @return {Roo.Element} this
         */
        update : function(html, loadScripts, callback){
            if(typeof html == "undefined"){
                html = "";
            }
            if(loadScripts !== true){
                this.dom.innerHTML = html;
                if(typeof callback == "function"){
                    callback();
                }
                return this;
            }
            var id = Roo.id();
            var dom = this.dom;

            html += '<span id="' + id + '"></span>';

            E.onAvailable(id, function(){
                var hd = document.getElementsByTagName("head")[0];
                var re = /(?:<script([^>]*)?>)((\n|\r|.)*?)(?:<\/script>)/ig;
                var srcRe = /\ssrc=([\'\"])(.*?)\1/i;
                var typeRe = /\stype=([\'\"])(.*?)\1/i;

                var match;
                while(match = re.exec(html)){
                    var attrs = match[1];
                    var srcMatch = attrs ? attrs.match(srcRe) : false;
                    if(srcMatch && srcMatch[2]){
                       var s = document.createElement("script");
                       s.src = srcMatch[2];
                       var typeMatch = attrs.match(typeRe);
                       if(typeMatch && typeMatch[2]){
                           s.type = typeMatch[2];
                       }
                       hd.appendChild(s);
                    }else if(match[2] && match[2].length > 0){
                        if(window.execScript) {
                           window.execScript(match[2]);
                        } else {
                            /**
                             * eval:var:id
                             * eval:var:dom
                             * eval:var:html
                             * 
                             */
                           window.eval(match[2]);
                        }
                    }
                }
                var el = document.getElementById(id);
                if(el){el.parentNode.removeChild(el);}
                if(typeof callback == "function"){
                    callback();
                }
            });
            dom.innerHTML = html.replace(/(?:<script.*?>)((\n|\r|.)*?)(?:<\/script>)/ig, "");
            return this;
        },

        /**
         * Direct access to the UpdateManager update() method (takes the same parameters).
         * @param {String/Function} url The url for this request or a function to call to get the url
         * @param {String/Object} params (optional) The parameters to pass as either a url encoded string "param1=1&amp;param2=2" or an object {param1: 1, param2: 2}
         * @param {Function} callback (optional) Callback when transaction is complete - called with signature (oElement, bSuccess)
         * @param {Boolean} discardUrl (optional) By default when you execute an update the defaultUrl is changed to the last used url. If true, it will not store the url.
         * @return {Roo.Element} this
         */
        load : function(){
            var um = this.getUpdateManager();
            um.update.apply(um, arguments);
            return this;
        },

        /**
        * Gets this element's UpdateManager
        * @return {Roo.UpdateManager} The UpdateManager
        */
        getUpdateManager : function(){
            if(!this.updateManager){
                this.updateManager = new Roo.UpdateManager(this);
            }
            return this.updateManager;
        },

        /**
         * Disables text selection for this element (normalized across browsers)
         * @return {Roo.Element} this
         */
        unselectable : function(){
            this.dom.unselectable = "on";
            this.swallowEvent("selectstart", true);
            this.applyStyles("-moz-user-select:none;-khtml-user-select:none;");
            this.addClass("x-unselectable");
            return this;
        },

        /**
        * Calculates the x, y to center this element on the screen
        * @return {Array} The x, y values [x, y]
        */
        getCenterXY : function(){
            return this.getAlignToXY(document, 'c-c');
        },

        /**
        * Centers the Element in either the viewport, or another Element.
        * @param {String/HTMLElement/Roo.Element} centerIn (optional) The element in which to center the element.
        */
        center : function(centerIn){
            this.alignTo(centerIn || document, 'c-c');
            return this;
        },

        /**
         * Tests various css rules/browsers to determine if this element uses a border box
         * @return {Boolean}
         */
        isBorderBox : function(){
            return noBoxAdjust[this.dom.tagName.toLowerCase()] || Roo.isBorderBox;
        },

        /**
         * Return a box {x, y, width, height} that can be used to set another elements
         * size/location to match this element.
         * @param {Boolean} contentBox (optional) If true a box for the content of the element is returned.
         * @param {Boolean} local (optional) If true the element's left and top are returned instead of page x/y.
         * @return {Object} box An object in the format {x, y, width, height}
         */
        getBox : function(contentBox, local){
            var xy;
            if(!local){
                xy = this.getXY();
            }else{
                var left = parseInt(this.getStyle("left"), 10) || 0;
                var top = parseInt(this.getStyle("top"), 10) || 0;
                xy = [left, top];
            }
            var el = this.dom, w = el.offsetWidth, h = el.offsetHeight, bx;
            if(!contentBox){
                bx = {x: xy[0], y: xy[1], 0: xy[0], 1: xy[1], width: w, height: h};
            }else{
                var l = this.getBorderWidth("l")+this.getPadding("l");
                var r = this.getBorderWidth("r")+this.getPadding("r");
                var t = this.getBorderWidth("t")+this.getPadding("t");
                var b = this.getBorderWidth("b")+this.getPadding("b");
                bx = {x: xy[0]+l, y: xy[1]+t, 0: xy[0]+l, 1: xy[1]+t, width: w-(l+r), height: h-(t+b)};
            }
            bx.right = bx.x + bx.width;
            bx.bottom = bx.y + bx.height;
            return bx;
        },

        /**
         * Returns the sum width of the padding and borders for the passed "sides". See getBorderWidth()
         for more information about the sides.
         * @param {String} sides
         * @return {Number}
         */
        getFrameWidth : function(sides, onlyContentBox){
            return onlyContentBox && Roo.isBorderBox ? 0 : (this.getPadding(sides) + this.getBorderWidth(sides));
        },

        /**
         * Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently.
         * @param {Object} box The box to fill {x, y, width, height}
         * @param {Boolean} adjust (optional) Whether to adjust for box-model issues automatically
         * @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
         * @return {Roo.Element} this
         */
        setBox : function(box, adjust, animate){
            var w = box.width, h = box.height;
            if((adjust && !this.autoBoxAdjust) && !this.isBorderBox()){
               w -= (this.getBorderWidth("lr") + this.getPadding("lr"));
               h -= (this.getBorderWidth("tb") + this.getPadding("tb"));
            }
            this.setBounds(box.x, box.y, w, h, this.preanim(arguments, 2));
            return this;
        },

        /**
         * Forces the browser to repaint this element
         * @return {Roo.Element} this
         */
         repaint : function(){
            var dom = this.dom;
            this.addClass("x-repaint");
            setTimeout(function(){
                Roo.get(dom).removeClass("x-repaint");
            }, 1);
            return this;
        },

        /**
         * Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,
         * then it returns the calculated width of the sides (see getPadding)
         * @param {String} sides (optional) Any combination of l, r, t, b to get the sum of those sides
         * @return {Object/Number}
         */
        getMargins : function(side){
            if(!side){
                return {
                    top: parseInt(this.getStyle("margin-top"), 10) || 0,
                    left: parseInt(this.getStyle("margin-left"), 10) || 0,
                    bottom: parseInt(this.getStyle("margin-bottom"), 10) || 0,
                    right: parseInt(this.getStyle("margin-right"), 10) || 0
                };
            }else{
                return this.addStyles(side, El.margins);
             }
        },

        // private
        addStyles : function(sides, styles){
            var val = 0, v, w;
            for(var i = 0, len = sides.length; i < len; i++){
                v = this.getStyle(styles[sides.charAt(i)]);
                if(v){
                     w = parseInt(v, 10);
                     if(w){ val += w; }
                }
            }
            return val;
        },

        /**
         * Creates a proxy element of this element
         * @param {String/Object} config The class name of the proxy element or a DomHelper config object
         * @param {String/HTMLElement} renderTo (optional) The element or element id to render the proxy to (defaults to document.body)
         * @param {Boolean} matchBox (optional) True to align and size the proxy to this element now (defaults to false)
         * @return {Roo.Element} The new proxy element
         */
        createProxy : function(config, renderTo, matchBox){
            if(renderTo){
                renderTo = Roo.getDom(renderTo);
            }else{
                renderTo = document.body;
            }
            config = typeof config == "object" ?
                config : {tag : "div", cls: config};
            var proxy = Roo.DomHelper.append(renderTo, config, true);
            if(matchBox){
               proxy.setBox(this.getBox());
            }
            return proxy;
        },

        /**
         * Puts a mask over this element to disable user interaction. Requires core.css.
         * This method can only be applied to elements which accept child nodes.
         * @param {String} msg (optional) A message to display in the mask
         * @param {String} msgCls (optional) A css class to apply to the msg element - use no-spinner to hide the spinner on bootstrap
         * @return {Element} The mask  element
         */
        mask : function(msg, msgCls)
        {
            if(this.getStyle("position") == "static" && this.dom.tagName !== 'BODY'){
                this.setStyle("position", "relative");
            }
            if(!this._mask){
                this._mask = Roo.DomHelper.append(this.dom, {cls:"roo-el-mask"}, true);
            }
            
            this.addClass("x-masked");
            this._mask.setDisplayed(true);
            
            // we wander
            var z = 0;
            var dom = this.dom;
            while (dom && dom.style) {
                if (!isNaN(parseInt(dom.style.zIndex))) {
                    z = Math.max(z, parseInt(dom.style.zIndex));
                }
                dom = dom.parentNode;
            }
            // if we are masking the body - then it hides everything..
            if (this.dom == document.body) {
                z = 1000000;
                this._mask.setWidth(Roo.lib.Dom.getDocumentWidth());
                this._mask.setHeight(Roo.lib.Dom.getDocumentHeight());
            }
           
            if(typeof msg == 'string'){
                if(!this._maskMsg){
                    this._maskMsg = Roo.DomHelper.append(this.dom, {
                        cls: "roo-el-mask-msg", 
                        cn: [
                            {
                                tag: 'i',
                                cls: 'fa fa-spinner fa-spin'
                            },
                            {
                                tag: 'div'
                            }   
                        ]
                    }, true);
                }
                var mm = this._maskMsg;
                mm.dom.className = msgCls ? "roo-el-mask-msg " + msgCls : "roo-el-mask-msg";
                if (mm.dom.lastChild) { // weird IE issue?
                    mm.dom.lastChild.innerHTML = msg;
                }
                mm.setDisplayed(true);
                mm.center(this);
                mm.setStyle('z-index', z + 102);
            }
            if(Roo.isIE && !(Roo.isIE7 && Roo.isStrict) && this.getStyle('height') == 'auto'){ // ie will not expand full height automatically
                this._mask.setHeight(this.getHeight());
            }
            this._mask.setStyle('z-index', z + 100);
            
            return this._mask;
        },

        /**
         * Removes a previously applied mask. If removeEl is true the mask overlay is destroyed, otherwise
         * it is cached for reuse.
         */
        unmask : function(removeEl){
            if(this._mask){
                if(removeEl === true){
                    this._mask.remove();
                    delete this._mask;
                    if(this._maskMsg){
                        this._maskMsg.remove();
                        delete this._maskMsg;
                    }
                }else{
                    this._mask.setDisplayed(false);
                    if(this._maskMsg){
                        this._maskMsg.setDisplayed(false);
                    }
                }
            }
            this.removeClass("x-masked");
        },

        /**
         * Returns true if this element is masked
         * @return {Boolean}
         */
        isMasked : function(){
            return this._mask && this._mask.isVisible();
        },

        /**
         * Creates an iframe shim for this element to keep selects and other windowed objects from
         * showing through.
         * @return {Roo.Element} The new shim element
         */
        createShim : function(){
            var el = document.createElement('iframe');
            el.frameBorder = 'no';
            el.className = 'roo-shim';
            if(Roo.isIE && Roo.isSecure){
                el.src = Roo.SSL_SECURE_URL;
            }
            var shim = Roo.get(this.dom.parentNode.insertBefore(el, this.dom));
            shim.autoBoxAdjust = false;
            return shim;
        },

        /**
         * Removes this element from the DOM and deletes it from the cache
         */
        remove : function(){
            if(this.dom.parentNode){
                this.dom.parentNode.removeChild(this.dom);
            }
            delete El.cache[this.dom.id];
        },

        /**
         * Sets up event handlers to add and remove a css class when the mouse is over this element
         * @param {String} className
         * @param {Boolean} preventFlicker (optional) If set to true, it prevents flickering by filtering
         * mouseout events for children elements
         * @return {Roo.Element} this
         */
        addClassOnOver : function(className, preventFlicker){
            this.on("mouseover", function(){
                Roo.fly(this, '_internal').addClass(className);
            }, this.dom);
            var removeFn = function(e){
                if(preventFlicker !== true || !e.within(this, true)){
                    Roo.fly(this, '_internal').removeClass(className);
                }
            };
            this.on("mouseout", removeFn, this.dom);
            return this;
        },

        /**
         * Sets up event handlers to add and remove a css class when this element has the focus
         * @param {String} className
         * @return {Roo.Element} this
         */
        addClassOnFocus : function(className){
            this.on("focus", function(){
                Roo.fly(this, '_internal').addClass(className);
            }, this.dom);
            this.on("blur", function(){
                Roo.fly(this, '_internal').removeClass(className);
            }, this.dom);
            return this;
        },
        /**
         * Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)
         * @param {String} className
         * @return {Roo.Element} this
         */
        addClassOnClick : function(className){
            var dom = this.dom;
            this.on("mousedown", function(){
                Roo.fly(dom, '_internal').addClass(className);
                var d = Roo.get(document);
                var fn = function(){
                    Roo.fly(dom, '_internal').removeClass(className);
                    d.removeListener("mouseup", fn);
                };
                d.on("mouseup", fn);
            });
            return this;
        },

        /**
         * Stops the specified event from bubbling and optionally prevents the default action
         * @param {String} eventName
         * @param {Boolean} preventDefault (optional) true to prevent the default action too
         * @return {Roo.Element} this
         */
        swallowEvent : function(eventName, preventDefault){
            var fn = function(e){
                e.stopPropagation();
                if(preventDefault){
                    e.preventDefault();
                }
            };
            if(eventName instanceof Array){
                for(var i = 0, len = eventName.length; i < len; i++){
                     this.on(eventName[i], fn);
                }
                return this;
            }
            this.on(eventName, fn);
            return this;
        },

        /**
         * @private
         */
        fitToParentDelegate : Roo.emptyFn, // keep a reference to the fitToParent delegate

        /**
         * Sizes this element to its parent element's dimensions performing
         * neccessary box adjustments.
         * @param {Boolean} monitorResize (optional) If true maintains the fit when the browser window is resized.
         * @param {String/HTMLElment/Element} targetParent (optional) The target parent, default to the parentNode.
         * @return {Roo.Element} this
         */
        fitToParent : function(monitorResize, targetParent) {
          Roo.EventManager.removeResizeListener(this.fitToParentDelegate); // always remove previous fitToParent delegate from onWindowResize
          this.fitToParentDelegate = Roo.emptyFn; // remove reference to previous delegate
          if (monitorResize === true && !this.dom.parentNode) { // check if this Element still exists
            return this;
          }
          var p = Roo.get(targetParent || this.dom.parentNode);
          this.setSize(p.getComputedWidth() - p.getFrameWidth('lr'), p.getComputedHeight() - p.getFrameWidth('tb'));
          if (monitorResize === true) {
            this.fitToParentDelegate = this.fitToParent.createDelegate(this, [true, targetParent]);
            Roo.EventManager.onWindowResize(this.fitToParentDelegate);
          }
          return this;
        },

        /**
         * Gets the next sibling, skipping text nodes
         * @return {HTMLElement} The next sibling or null
         */
        getNextSibling : function(){
            var n = this.dom.nextSibling;
            while(n && n.nodeType != 1){
                n = n.nextSibling;
            }
            return n;
        },

        /**
         * Gets the previous sibling, skipping text nodes
         * @return {HTMLElement} The previous sibling or null
         */
        getPrevSibling : function(){
            var n = this.dom.previousSibling;
            while(n && n.nodeType != 1){
                n = n.previousSibling;
            }
            return n;
        },


        /**
         * Appends the passed element(s) to this element
         * @param {String/HTMLElement/Array/Element/CompositeElement} el
         * @return {Roo.Element} this
         */
        appendChild: function(el){
            el = Roo.get(el);
            el.appendTo(this);
            return this;
        },

        /**
         * Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.
         * @param {Object} config DomHelper element config object.  If no tag is specified (e.g., {tag:'input'}) then a div will be
         * automatically generated with the specified attributes.
         * @param {HTMLElement} insertBefore (optional) a child element of this element
         * @param {Boolean} returnDom (optional) true to return the dom node instead of creating an Element
         * @return {Roo.Element} The new child element
         */
        createChild: function(config, insertBefore, returnDom){
            config = config || {tag:'div'};
            if(insertBefore){
                return Roo.DomHelper.insertBefore(insertBefore, config, returnDom !== true);
            }
            return Roo.DomHelper[!this.dom.firstChild ? 'overwrite' : 'append'](this.dom, config,  returnDom !== true);
        },

        /**
         * Appends this element to the passed element
         * @param {String/HTMLElement/Element} el The new parent element
         * @return {Roo.Element} this
         */
        appendTo: function(el){
            el = Roo.getDom(el);
            el.appendChild(this.dom);
            return this;
        },

        /**
         * Inserts this element before the passed element in the DOM
         * @param {String/HTMLElement/Element} el The element to insert before
         * @return {Roo.Element} this
         */
        insertBefore: function(el){
            el = Roo.getDom(el);
            el.parentNode.insertBefore(this.dom, el);
            return this;
        },

        /**
         * Inserts this element after the passed element in the DOM
         * @param {String/HTMLElement/Element} el The element to insert after
         * @return {Roo.Element} this
         */
        insertAfter: function(el){
            el = Roo.getDom(el);
            el.parentNode.insertBefore(this.dom, el.nextSibling);
            return this;
        },

        /**
         * Inserts (or creates) an element (or DomHelper config) as the first child of the this element
         * @param {String/HTMLElement/Element/Object} el The id or element to insert or a DomHelper config to create and insert
         * @return {Roo.Element} The new child
         */
        insertFirst: function(el, returnDom){
            el = el || {};
            if(typeof el == 'object' && !el.nodeType){ // dh config
                return this.createChild(el, this.dom.firstChild, returnDom);
            }else{
                el = Roo.getDom(el);
                this.dom.insertBefore(el, this.dom.firstChild);
                return !returnDom ? Roo.get(el) : el;
            }
        },

        /**
         * Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element
         * @param {String/HTMLElement/Element/Object} el The id or element to insert or a DomHelper config to create and insert
         * @param {String} where (optional) 'before' or 'after' defaults to before
         * @param {Boolean} returnDom (optional) True to return the raw DOM element instead of Roo.Element
         * @return {Roo.Element} the inserted Element
         */
        insertSibling: function(el, where, returnDom){
            where = where ? where.toLowerCase() : 'before';
            el = el || {};
            var rt, refNode = where == 'before' ? this.dom : this.dom.nextSibling;

            if(typeof el == 'object' && !el.nodeType){ // dh config
                if(where == 'after' && !this.dom.nextSibling){
                    rt = Roo.DomHelper.append(this.dom.parentNode, el, !returnDom);
                }else{
                    rt = Roo.DomHelper[where == 'after' ? 'insertAfter' : 'insertBefore'](this.dom, el, !returnDom);
                }

            }else{
                rt = this.dom.parentNode.insertBefore(Roo.getDom(el),
                            where == 'before' ? this.dom : this.dom.nextSibling);
                if(!returnDom){
                    rt = Roo.get(rt);
                }
            }
            return rt;
        },

        /**
         * Creates and wraps this element with another element
         * @param {Object} config (optional) DomHelper element config object for the wrapper element or null for an empty div
         * @param {Boolean} returnDom (optional) True to return the raw DOM element instead of Roo.Element
         * @return {HTMLElement/Element} The newly created wrapper element
         */
        wrap: function(config, returnDom){
            if(!config){
                config = {tag: "div"};
            }
            var newEl = Roo.DomHelper.insertBefore(this.dom, config, !returnDom);
            newEl.dom ? newEl.dom.appendChild(this.dom) : newEl.appendChild(this.dom);
            return newEl;
        },

        /**
         * Replaces the passed element with this element
         * @param {String/HTMLElement/Element} el The element to replace
         * @return {Roo.Element} this
         */
        replace: function(el){
            el = Roo.get(el);
            this.insertBefore(el);
            el.remove();
            return this;
        },

        /**
         * Inserts an html fragment into this element
         * @param {String} where Where to insert the html in relation to the this element - beforeBegin, afterBegin, beforeEnd, afterEnd.
         * @param {String} html The HTML fragment
         * @param {Boolean} returnEl True to return an Roo.Element
         * @return {HTMLElement/Roo.Element} The inserted node (or nearest related if more than 1 inserted)
         */
        insertHtml : function(where, html, returnEl){
            var el = Roo.DomHelper.insertHtml(where, this.dom, html);
            return returnEl ? Roo.get(el) : el;
        },

        /**
         * Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)
         * @param {Object} o The object with the attributes
         * @param {Boolean} useSet (optional) false to override the default setAttribute to use expandos.
         * @return {Roo.Element} this
         */
        set : function(o, useSet){
            var el = this.dom;
            useSet = typeof useSet == 'undefined' ? (el.setAttribute ? true : false) : useSet;
            for(var attr in o){
                if(attr == "style" || typeof o[attr] == "function")  { continue; }
                if(attr=="cls"){
                    el.className = o["cls"];
                }else{
                    if(useSet) {
                        el.setAttribute(attr, o[attr]);
                    } else {
                        el[attr] = o[attr];
                    }
                }
            }
            if(o.style){
                Roo.DomHelper.applyStyles(el, o.style);
            }
            return this;
        },

        /**
         * Convenience method for constructing a KeyMap
         * @param {Number/Array/Object/String} key Either a string with the keys to listen for, the numeric key code, array of key codes or an object with the following options:
         *                                  {key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}
         * @param {Function} fn The function to call
         * @param {Object} scope (optional) The scope of the function
         * @return {Roo.KeyMap} The KeyMap created
         */
        addKeyListener : function(key, fn, scope){
            var config;
            if(typeof key != "object" || key instanceof Array){
                config = {
                    key: key,
                    fn: fn,
                    scope: scope
                };
            }else{
                config = {
                    key : key.key,
                    shift : key.shift,
                    ctrl : key.ctrl,
                    alt : key.alt,
                    fn: fn,
                    scope: scope
                };
            }
            return new Roo.KeyMap(this, config);
        },

        /**
         * Creates a KeyMap for this element
         * @param {Object} config The KeyMap config. See {@link Roo.KeyMap} for more details
         * @return {Roo.KeyMap} The KeyMap created
         */
        addKeyMap : function(config){
            return new Roo.KeyMap(this, config);
        },

        /**
         * Returns true if this element is scrollable.
         * @return {Boolean}
         */
         isScrollable : function(){
            var dom = this.dom;
            return dom.scrollHeight > dom.clientHeight || dom.scrollWidth > dom.clientWidth;
        },

        /**
         * Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().
         * @param {String} side Either "left" for scrollLeft values or "top" for scrollTop values.
         * @param {Number} value The new scroll value
         * @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
         * @return {Element} this
         */

        scrollTo : function(side, value, animate){
            var prop = side.toLowerCase() == "left" ? "scrollLeft" : "scrollTop";
            if(!animate || !A){
                this.dom[prop] = value;
            }else{
                var to = prop == "scrollLeft" ? [value, this.dom.scrollTop] : [this.dom.scrollLeft, value];
                this.anim({scroll: {"to": to}}, this.preanim(arguments, 2), 'scroll');
            }
            return this;
        },

        /**
         * Scrolls this element the specified direction. Does bounds checking to make sure the scroll is
         * within this element's scrollable range.
         * @param {String} direction Possible values are: "l","left" - "r","right" - "t","top","up" - "b","bottom","down".
         * @param {Number} distance How far to scroll the element in pixels
         * @param {Boolean/Object} animate (optional) true for the default animation or a standard Element animation config object
         * @return {Boolean} Returns true if a scroll was triggered or false if the element
         * was scrolled as far as it could go.
         */
         scroll : function(direction, distance, animate){
             if(!this.isScrollable()){
                 return;
             }
             var el = this.dom;
             var l = el.scrollLeft, t = el.scrollTop;
             var w = el.scrollWidth, h = el.scrollHeight;
             var cw = el.clientWidth, ch = el.clientHeight;
             direction = direction.toLowerCase();
             var scrolled = false;
             var a = this.preanim(arguments, 2);
             switch(direction){
                 case "l":
                 case "left":
                     if(w - l > cw){
                         var v = Math.min(l + distance, w-cw);
                         this.scrollTo("left", v, a);
                         scrolled = true;
                     }
                     break;
                case "r":
                case "right":
                     if(l > 0){
                         var v = Math.max(l - distance, 0);
                         this.scrollTo("left", v, a);
                         scrolled = true;
                     }
                     break;
                case "t":
                case "top":
                case "up":
                     if(t > 0){
                         var v = Math.max(t - distance, 0);
                         this.scrollTo("top", v, a);
                         scrolled = true;
                     }
                     break;
                case "b":
                case "bottom":
                case "down":
                     if(h - t > ch){
                         var v = Math.min(t + distance, h-ch);
                         this.scrollTo("top", v, a);
                         scrolled = true;
                     }
                     break;
             }
             return scrolled;
        },

        /**
         * Translates the passed page coordinates into left/top css values for this element
         * @param {Number/Array} x The page x or an array containing [x, y]
         * @param {Number} y The page y
         * @return {Object} An object with left and top properties. e.g. {left: (value), top: (value)}
         */
        translatePoints : function(x, y){
            if(typeof x == 'object' || x instanceof Array){
                y = x[1]; x = x[0];
            }
            var p = this.getStyle('position');
            var o = this.getXY();

            var l = parseInt(this.getStyle('left'), 10);
            var t = parseInt(this.getStyle('top'), 10);

            if(isNaN(l)){
                l = (p == "relative") ? 0 : this.dom.offsetLeft;
            }
            if(isNaN(t)){
                t = (p == "relative") ? 0 : this.dom.offsetTop;
            }

            return {left: (x - o[0] + l), top: (y - o[1] + t)};
        },

        /**
         * Returns the current scroll position of the element.
         * @return {Object} An object containing the scroll position in the format {left: (scrollLeft), top: (scrollTop)}
         */
        getScroll : function(){
            var d = this.dom, doc = document;
            if(d == doc || d == doc.body){
                var l = window.pageXOffset || doc.documentElement.scrollLeft || doc.body.scrollLeft || 0;
                var t = window.pageYOffset || doc.documentElement.scrollTop || doc.body.scrollTop || 0;
                return {left: l, top: t};
            }else{
                return {left: d.scrollLeft, top: d.scrollTop};
            }
        },

        /**
         * Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values
         * are convert to standard 6 digit hex color.
         * @param {String} attr The css attribute
         * @param {String} defaultValue The default value to use when a valid color isn't found
         * @param {String} prefix (optional) defaults to #. Use an empty string when working with
         * YUI color anims.
         */
        getColor : function(attr, defaultValue, prefix){
            var v = this.getStyle(attr);
            if(!v || v == "transparent" || v == "inherit") {
                return defaultValue;
            }
            var color = typeof prefix == "undefined" ? "#" : prefix;
            if(v.substr(0, 4) == "rgb("){
                var rvs = v.slice(4, v.length -1).split(",");
                for(var i = 0; i < 3; i++){
                    var h = parseInt(rvs[i]).toString(16);
                    if(h < 16){
                        h = "0" + h;
                    }
                    color += h;
                }
            } else {
                if(v.substr(0, 1) == "#"){
                    if(v.length == 4) {
                        for(var i = 1; i < 4; i++){
                            var c = v.charAt(i);
                            color +=  c + c;
                        }
                    }else if(v.length == 7){
                        color += v.substr(1);
                    }
                }
            }
            return(color.length > 5 ? color.toLowerCase() : defaultValue);
        },

        /**
         * Wraps the specified element with a special markup/CSS block that renders by default as a gray container with a
         * gradient background, rounded corners and a 4-way shadow.
         * @param {String} class (optional) A base CSS class to apply to the containing wrapper element (defaults to 'x-box').
         * Note that there are a number of CSS rules that are dependent on this name to make the overall effect work,
         * so if you supply an alternate base class, make sure you also supply all of the necessary rules.
         * @return {Roo.Element} this
         */
        boxWrap : function(cls){
            cls = cls || 'x-box';
            var el = Roo.get(this.insertHtml('beforeBegin', String.format('<div class="{0}">'+El.boxMarkup+'</div>', cls)));
            el.child('.'+cls+'-mc').dom.appendChild(this.dom);
            return el;
        },

        /**
         * Returns the value of a namespaced attribute from the element's underlying DOM node.
         * @param {String} namespace The namespace in which to look for the attribute
         * @param {String} name The attribute name
         * @return {String} The attribute value
         */
        getAttributeNS : Roo.isIE ? function(ns, name){
            var d = this.dom;
            var type = typeof d[ns+":"+name];
            if(type != 'undefined' && type != 'unknown'){
                return d[ns+":"+name];
            }
            return d[name];
        } : function(ns, name){
            var d = this.dom;
            return d.getAttributeNS(ns, name) || d.getAttribute(ns+":"+name) || d.getAttribute(name) || d[name];
        },
        
        
        /**
         * Sets or Returns the value the dom attribute value
         * @param {String|Object} name The attribute name (or object to set multiple attributes)
         * @param {String} value (optional) The value to set the attribute to
         * @return {String} The attribute value
         */
        attr : function(name){
            if (arguments.length > 1) {
                this.dom.setAttribute(name, arguments[1]);
                return arguments[1];
            }
            if (typeof(name) == 'object') {
                for(var i in name) {
                    this.attr(i, name[i]);
                }
                return name;
            }
            
            
            if (!this.dom.hasAttribute(name)) {
                return undefined;
            }
            return this.dom.getAttribute(name);
        }
        
        
        
    };

    var ep = El.prototype;

    /**
     * Appends an event handler (Shorthand for addListener)
     * @param {String}   eventName     The type of event to append
     * @param {Function} fn        The method the event invokes
     * @param {Object} scope       (optional) The scope (this object) of the fn
     * @param {Object}   options   (optional)An object with standard {@link Roo.EventManager#addListener} options
     * @method
     */
    ep.on = ep.addListener;
        // backwards compat
    ep.mon = ep.addListener;

    /**
     * Removes an event handler from this element (shorthand for removeListener)
     * @param {String} eventName the type of event to remove
     * @param {Function} fn the method the event invokes
     * @return {Roo.Element} this
     * @method
     */
    ep.un = ep.removeListener;

    /**
     * true to automatically adjust width and height settings for box-model issues (default to true)
     */
    ep.autoBoxAdjust = true;

    // private
    El.unitPattern = /\d+(px|em|%|en|ex|pt|in|cm|mm|pc)$/i;

    // private
    El.addUnits = function(v, defaultUnit){
        if(v === "" || v == "auto"){
            return v;
        }
        if(v === undefined){
            return '';
        }
        if(typeof v == "number" || !El.unitPattern.test(v)){
            return v + (defaultUnit || 'px');
        }
        return v;
    };

    // special markup used throughout Roo when box wrapping elements
    El.boxMarkup = '<div class="{0}-tl"><div class="{0}-tr"><div class="{0}-tc"></div></div></div><div class="{0}-ml"><div class="{0}-mr"><div class="{0}-mc"></div></div></div><div class="{0}-bl"><div class="{0}-br"><div class="{0}-bc"></div></div></div>';
    /**
     * Visibility mode constant - Use visibility to hide element
     * @static
     * @type Number
     */
    El.VISIBILITY = 1;
    /**
     * Visibility mode constant - Use display to hide element
     * @static
     * @type Number
     */
    El.DISPLAY = 2;

    El.borders = {l: "border-left-width", r: "border-right-width", t: "border-top-width", b: "border-bottom-width"};
    El.paddings = {l: "padding-left", r: "padding-right", t: "padding-top", b: "padding-bottom"};
    El.margins = {l: "margin-left", r: "margin-right", t: "margin-top", b: "margin-bottom"};



    /**
     * @private
     */
    El.cache = {};

    var docEl;

    /**
     * Static method to retrieve Element objects. Uses simple caching to consistently return the same object.
     * Automatically fixes if an object was recreated with the same id via AJAX or DOM.
     * @param {String/HTMLElement/Element} el The id of the node, a DOM Node or an existing Element.
     * @return {Element} The Element object
     * @static
     */
    El.get = function(el){
        var ex, elm, id;
        if(!el){ return null; }
        if(typeof el == "string"){ // element id
            if(!(elm = document.getElementById(el))){
                return null;
            }
            if(ex = El.cache[el]){
                ex.dom = elm;
            }else{
                ex = El.cache[el] = new El(elm);
            }
            return ex;
        }else if(el.tagName){ // dom element
            if(!(id = el.id)){
                id = Roo.id(el);
            }
            if(ex = El.cache[id]){
                ex.dom = el;
            }else{
                ex = El.cache[id] = new El(el);
            }
            return ex;
        }else if(el instanceof El){
            if(el != docEl){
                el.dom = document.getElementById(el.id) || el.dom; // refresh dom element in case no longer valid,
                                                              // catch case where it hasn't been appended
                El.cache[el.id] = el; // in case it was created directly with Element(), let's cache it
            }
            return el;
        }else if(el.isComposite){
            return el;
        }else if(el instanceof Array){
            return El.select(el);
        }else if(el == document){
            // create a bogus element object representing the document object
            if(!docEl){
                var f = function(){};
                f.prototype = El.prototype;
                docEl = new f();
                docEl.dom = document;
            }
            return docEl;
        }
        return null;
    };

    // private
    El.uncache = function(el){
        for(var i = 0, a = arguments, len = a.length; i < len; i++) {
            if(a[i]){
                delete El.cache[a[i].id || a[i]];
            }
        }
    };

    // private
    // Garbage collection - uncache elements/purge listeners on orphaned elements
    // so we don't hold a reference and cause the browser to retain them
    El.garbageCollect = function(){
        if(!Roo.enableGarbageCollector){
            clearInterval(El.collectorThread);
            return;
        }
        for(var eid in El.cache){
            var el = El.cache[eid], d = el.dom;
            // -------------------------------------------------------
            // Determining what is garbage:
            // -------------------------------------------------------
            // !d
            // dom node is null, definitely garbage
            // -------------------------------------------------------
            // !d.parentNode
            // no parentNode == direct orphan, definitely garbage
            // -------------------------------------------------------
            // !d.offsetParent && !document.getElementById(eid)
            // display none elements have no offsetParent so we will
            // also try to look it up by it's id. However, check
            // offsetParent first so we don't do unneeded lookups.
            // This enables collection of elements that are not orphans
            // directly, but somewhere up the line they have an orphan
            // parent.
            // -------------------------------------------------------
            if(!d || !d.parentNode || (!d.offsetParent && !document.getElementById(eid))){
                delete El.cache[eid];
                if(d && Roo.enableListenerCollection){
                    E.purgeElement(d);
                }
            }
        }
    }
    El.collectorThreadId = setInterval(El.garbageCollect, 30000);


    // dom is optional
    El.Flyweight = function(dom){
        this.dom = dom;
    };
    El.Flyweight.prototype = El.prototype;

    El._flyweights = {};
    /**
     * Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
     * the dom node can be overwritten by other code.
     * @param {String/HTMLElement} el The dom node or id
     * @param {String} named (optional) Allows for creation of named reusable flyweights to
     *                                  prevent conflicts (e.g. internally Roo uses "_internal")
     * @static
     * @return {Element} The shared Element object
     */
    El.fly = function(el, named){
        named = named || '_global';
        el = Roo.getDom(el);
        if(!el){
            return null;
        }
        if(!El._flyweights[named]){
            El._flyweights[named] = new El.Flyweight();
        }
        El._flyweights[named].dom = el;
        return El._flyweights[named];
    };

    /**
     * Static method to retrieve Element objects. Uses simple caching to consistently return the same object.
     * Automatically fixes if an object was recreated with the same id via AJAX or DOM.
     * Shorthand of {@link Roo.Element#get}
     * @param {String/HTMLElement/Element} el The id of the node, a DOM Node or an existing Element.
     * @return {Element} The Element object
     * @member Roo
     * @method get
     */
    Roo.get = El.get;
    /**
     * Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
     * the dom node can be overwritten by other code.
     * Shorthand of {@link Roo.Element#fly}
     * @param {String/HTMLElement} el The dom node or id
     * @param {String} named (optional) Allows for creation of named reusable flyweights to
     *                                  prevent conflicts (e.g. internally Roo uses "_internal")
     * @static
     * @return {Element} The shared Element object
     * @member Roo
     * @method fly
     */
    Roo.fly = El.fly;

    // speedy lookup for elements never to box adjust
    var noBoxAdjust = Roo.isStrict ? {
        select:1
    } : {
        input:1, select:1, textarea:1
    };
    if(Roo.isIE || Roo.isGecko){
        noBoxAdjust['button'] = 1;
    }


    Roo.EventManager.on(window, 'unload', function(){
        delete El.cache;
        delete El._flyweights;
    });
})();




if(Roo.DomQuery){
    Roo.Element.selectorFunction = Roo.DomQuery.select;
}

Roo.Element.select = function(selector, unique, root){
    var els;
    if(typeof selector == "string"){
        els = Roo.Element.selectorFunction(selector, root);
    }else if(selector.length !== undefined){
        els = selector;
    }else{
        throw "Invalid selector";
    }
    if(unique === true){
        return new Roo.CompositeElement(els);
    }else{
        return new Roo.CompositeElementLite(els);
    }
};
/**
 * Selects elements based on the passed CSS selector to enable working on them as 1.
 * @param {String/Array} selector The CSS selector or an array of elements
 * @param {Boolean} unique (optional) true to create a unique Roo.Element for each element (defaults to a shared flyweight object)
 * @param {HTMLElement/String} root (optional) The root element of the query or id of the root
 * @return {CompositeElementLite/CompositeElement}
 * @member Roo
 * @method select
 */
Roo.select = Roo.Element.select;














/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */



//Notifies Element that fx methods are available
Roo.enableFx = true;

/**
 * @class Roo.Fx
 * <p>A class to provide basic animation and visual effects support.  <b>Note:</b> This class is automatically applied
 * to the {@link Roo.Element} interface when included, so all effects calls should be performed via Element.
 * Conversely, since the effects are not actually defined in Element, Roo.Fx <b>must</b> be included in order for the 
 * Element effects to work.</p><br/>
 *
 * <p>It is important to note that although the Fx methods and many non-Fx Element methods support "method chaining" in that
 * they return the Element object itself as the method return value, it is not always possible to mix the two in a single
 * method chain.  The Fx methods use an internal effects queue so that each effect can be properly timed and sequenced.
 * Non-Fx methods, on the other hand, have no such internal queueing and will always execute immediately.  For this reason,
 * while it may be possible to mix certain Fx and non-Fx method calls in a single chain, it may not always provide the
 * expected results and should be done with care.</p><br/>
 *
 * <p>Motion effects support 8-way anchoring, meaning that you can choose one of 8 different anchor points on the Element
 * that will serve as either the start or end point of the animation.  Following are all of the supported anchor positions:</p>
<pre>
Value  Description
-----  -----------------------------
tl     The top left corner
t      The center of the top edge
tr     The top right corner
l      The center of the left edge
r      The center of the right edge
bl     The bottom left corner
b      The center of the bottom edge
br     The bottom right corner
</pre>
 * <b>Although some Fx methods accept specific custom config parameters, the ones shown in the Config Options section
 * below are common options that can be passed to any Fx method.</b>
 * @cfg {Function} callback A function called when the effect is finished
 * @cfg {Object} scope The scope of the effect function
 * @cfg {String} easing A valid Easing value for the effect
 * @cfg {String} afterCls A css class to apply after the effect
 * @cfg {Number} duration The length of time (in seconds) that the effect should last
 * @cfg {Boolean} remove Whether the Element should be removed from the DOM and destroyed after the effect finishes
 * @cfg {Boolean} useDisplay Whether to use the <i>display</i> CSS property instead of <i>visibility</i> when hiding Elements (only applies to 
 * effects that end with the element being visually hidden, ignored otherwise)
 * @cfg {String/Object/Function} afterStyle A style specification string, e.g. "width:100px", or an object in the form {width:"100px"}, or
 * a function which returns such a specification that will be applied to the Element after the effect finishes
 * @cfg {Boolean} block Whether the effect should block other effects from queueing while it runs
 * @cfg {Boolean} concurrent Whether to allow subsequently-queued effects to run at the same time as the current effect, or to ensure that they run in sequence
 * @cfg {Boolean} stopFx Whether subsequent effects should be stopped and removed after the current effect finishes
 */
Roo.Fx = {
	/**
	 * Slides the element into view.  An anchor point can be optionally passed to set the point of
	 * origin for the slide effect.  This function automatically handles wrapping the element with
	 * a fixed-size container if needed.  See the Fx class overview for valid anchor point options.
	 * Usage:
	 *<pre><code>
// default: slide the element in from the top
el.slideIn();

// custom: slide the element in from the right with a 2-second duration
el.slideIn('r', { duration: 2 });

// common config options shown with default values
el.slideIn('t', {
    easing: 'easeOut',
    duration: .5
});
</code></pre>
	 * @param {String} anchor (optional) One of the valid Fx anchor positions (defaults to top: 't')
	 * @param {Object} options (optional) Object literal with any of the Fx config options
	 * @return {Roo.Element} The Element
	 */
    slideIn : function(anchor, o){
        var el = this.getFxEl();
        o = o || {};

        el.queueFx(o, function(){

            anchor = anchor || "t";

            // fix display to visibility
            this.fixDisplay();

            // restore values after effect
            var r = this.getFxRestore();
            var b = this.getBox();
            // fixed size for slide
            this.setSize(b);

            // wrap if needed
            var wrap = this.fxWrap(r.pos, o, "hidden");

            var st = this.dom.style;
            st.visibility = "visible";
            st.position = "absolute";

            // clear out temp styles after slide and unwrap
            var after = function(){
                el.fxUnwrap(wrap, r.pos, o);
                st.width = r.width;
                st.height = r.height;
                el.afterFx(o);
            };
            // time to calc the positions
            var a, pt = {to: [b.x, b.y]}, bw = {to: b.width}, bh = {to: b.height};

            switch(anchor.toLowerCase()){
                case "t":
                    wrap.setSize(b.width, 0);
                    st.left = st.bottom = "0";
                    a = {height: bh};
                break;
                case "l":
                    wrap.setSize(0, b.height);
                    st.right = st.top = "0";
                    a = {width: bw};
                break;
                case "r":
                    wrap.setSize(0, b.height);
                    wrap.setX(b.right);
                    st.left = st.top = "0";
                    a = {width: bw, points: pt};
                break;
                case "b":
                    wrap.setSize(b.width, 0);
                    wrap.setY(b.bottom);
                    st.left = st.top = "0";
                    a = {height: bh, points: pt};
                break;
                case "tl":
                    wrap.setSize(0, 0);
                    st.right = st.bottom = "0";
                    a = {width: bw, height: bh};
                break;
                case "bl":
                    wrap.setSize(0, 0);
                    wrap.setY(b.y+b.height);
                    st.right = st.top = "0";
                    a = {width: bw, height: bh, points: pt};
                break;
                case "br":
                    wrap.setSize(0, 0);
                    wrap.setXY([b.right, b.bottom]);
                    st.left = st.top = "0";
                    a = {width: bw, height: bh, points: pt};
                break;
                case "tr":
                    wrap.setSize(0, 0);
                    wrap.setX(b.x+b.width);
                    st.left = st.bottom = "0";
                    a = {width: bw, height: bh, points: pt};
                break;
            }
            this.dom.style.visibility = "visible";
            wrap.show();

            arguments.callee.anim = wrap.fxanim(a,
                o,
                'motion',
                .5,
                'easeOut', after);
        });
        return this;
    },
    
	/**
	 * Slides the element out of view.  An anchor point can be optionally passed to set the end point
	 * for the slide effect.  When the effect is completed, the element will be hidden (visibility = 
	 * 'hidden') but block elements will still take up space in the document.  The element must be removed
	 * from the DOM using the 'remove' config option if desired.  This function automatically handles 
	 * wrapping the element with a fixed-size container if needed.  See the Fx class overview for valid anchor point options.
	 * Usage:
	 *<pre><code>
// default: slide the element out to the top
el.slideOut();

// custom: slide the element out to the right with a 2-second duration
el.slideOut('r', { duration: 2 });

// common config options shown with default values
el.slideOut('t', {
    easing: 'easeOut',
    duration: .5,
    remove: false,
    useDisplay: false
});
</code></pre>
	 * @param {String} anchor (optional) One of the valid Fx anchor positions (defaults to top: 't')
	 * @param {Object} options (optional) Object literal with any of the Fx config options
	 * @return {Roo.Element} The Element
	 */
    slideOut : function(anchor, o){
        var el = this.getFxEl();
        o = o || {};

        el.queueFx(o, function(){

            anchor = anchor || "t";

            // restore values after effect
            var r = this.getFxRestore();
            
            var b = this.getBox();
            // fixed size for slide
            this.setSize(b);

            // wrap if needed
            var wrap = this.fxWrap(r.pos, o, "visible");

            var st = this.dom.style;
            st.visibility = "visible";
            st.position = "absolute";

            wrap.setSize(b);

            var after = function(){
                if(o.useDisplay){
                    el.setDisplayed(false);
                }else{
                    el.hide();
                }

                el.fxUnwrap(wrap, r.pos, o);

                st.width = r.width;
                st.height = r.height;

                el.afterFx(o);
            };

            var a, zero = {to: 0};
            switch(anchor.toLowerCase()){
                case "t":
                    st.left = st.bottom = "0";
                    a = {height: zero};
                break;
                case "l":
                    st.right = st.top = "0";
                    a = {width: zero};
                break;
                case "r":
                    st.left = st.top = "0";
                    a = {width: zero, points: {to:[b.right, b.y]}};
                break;
                case "b":
                    st.left = st.top = "0";
                    a = {height: zero, points: {to:[b.x, b.bottom]}};
                break;
                case "tl":
                    st.right = st.bottom = "0";
                    a = {width: zero, height: zero};
                break;
                case "bl":
                    st.right = st.top = "0";
                    a = {width: zero, height: zero, points: {to:[b.x, b.bottom]}};
                break;
                case "br":
                    st.left = st.top = "0";
                    a = {width: zero, height: zero, points: {to:[b.x+b.width, b.bottom]}};
                break;
                case "tr":
                    st.left = st.bottom = "0";
                    a = {width: zero, height: zero, points: {to:[b.right, b.y]}};
                break;
            }

            arguments.callee.anim = wrap.fxanim(a,
                o,
                'motion',
                .5,
                "easeOut", after);
        });
        return this;
    },

	/**
	 * Fades the element out while slowly expanding it in all directions.  When the effect is completed, the 
	 * element will be hidden (visibility = 'hidden') but block elements will still take up space in the document. 
	 * The element must be removed from the DOM using the 'remove' config option if desired.
	 * Usage:
	 *<pre><code>
// default
el.puff();

// common config options shown with default values
el.puff({
    easing: 'easeOut',
    duration: .5,
    remove: false,
    useDisplay: false
});
</code></pre>
	 * @param {Object} options (optional) Object literal with any of the Fx config options
	 * @return {Roo.Element} The Element
	 */
    puff : function(o){
        var el = this.getFxEl();
        o = o || {};

        el.queueFx(o, function(){
            this.clearOpacity();
            this.show();

            // restore values after effect
            var r = this.getFxRestore();
            var st = this.dom.style;

            var after = function(){
                if(o.useDisplay){
                    el.setDisplayed(false);
                }else{
                    el.hide();
                }

                el.clearOpacity();

                el.setPositioning(r.pos);
                st.width = r.width;
                st.height = r.height;
                st.fontSize = '';
                el.afterFx(o);
            };

            var width = this.getWidth();
            var height = this.getHeight();

            arguments.callee.anim = this.fxanim({
                    width : {to: this.adjustWidth(width * 2)},
                    height : {to: this.adjustHeight(height * 2)},
                    points : {by: [-(width * .5), -(height * .5)]},
                    opacity : {to: 0},
                    fontSize: {to:200, unit: "%"}
                },
                o,
                'motion',
                .5,
                "easeOut", after);
        });
        return this;
    },

	/**
	 * Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).
	 * When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still 
	 * take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired.
	 * Usage:
	 *<pre><code>
// default
el.switchOff();

// all config options shown with default values
el.switchOff({
    easing: 'easeIn',
    duration: .3,
    remove: false,
    useDisplay: false
});
</code></pre>
	 * @param {Object} options (optional) Object literal with any of the Fx config options
	 * @return {Roo.Element} The Element
	 */
    switchOff : function(o){
        var el = this.getFxEl();
        o = o || {};

        el.queueFx(o, function(){
            this.clearOpacity();
            this.clip();

            // restore values after effect
            var r = this.getFxRestore();
            var st = this.dom.style;

            var after = function(){
                if(o.useDisplay){
                    el.setDisplayed(false);
                }else{
                    el.hide();
                }

                el.clearOpacity();
                el.setPositioning(r.pos);
                st.width = r.width;
                st.height = r.height;

                el.afterFx(o);
            };

            this.fxanim({opacity:{to:0.3}}, null, null, .1, null, function(){
                this.clearOpacity();
                (function(){
                    this.fxanim({
                        height:{to:1},
                        points:{by:[0, this.getHeight() * .5]}
                    }, o, 'motion', 0.3, 'easeIn', after);
                }).defer(100, this);
            });
        });
        return this;
    },

    /**
     * Highlights the Element by setting a color (applies to the background-color by default, but can be
     * changed using the "attr" config option) and then fading back to the original color. If no original
     * color is available, you should provide the "endColor" config option which will be cleared after the animation.
     * Usage:
<pre><code>
// default: highlight background to yellow
el.highlight();

// custom: highlight foreground text to blue for 2 seconds
el.highlight("0000ff", { attr: 'color', duration: 2 });

// common config options shown with default values
el.highlight("ffff9c", {
    attr: "background-color", //can be any valid CSS property (attribute) that supports a color value
    endColor: (current color) or "ffffff",
    easing: 'easeIn',
    duration: 1
});
</code></pre>
     * @param {String} color (optional) The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c')
     * @param {Object} options (optional) Object literal with any of the Fx config options
     * @return {Roo.Element} The Element
     */	
    highlight : function(color, o){
        var el = this.getFxEl();
        o = o || {};

        el.queueFx(o, function(){
            color = color || "ffff9c";
            attr = o.attr || "backgroundColor";

            this.clearOpacity();
            this.show();

            var origColor = this.getColor(attr);
            var restoreColor = this.dom.style[attr];
            endColor = (o.endColor || origColor) || "ffffff";

            var after = function(){
                el.dom.style[attr] = restoreColor;
                el.afterFx(o);
            };

            var a = {};
            a[attr] = {from: color, to: endColor};
            arguments.callee.anim = this.fxanim(a,
                o,
                'color',
                1,
                'easeIn', after);
        });
        return this;
    },

   /**
    * Shows a ripple of exploding, attenuating borders to draw attention to an Element.
    * Usage:
<pre><code>
// default: a single light blue ripple
el.frame();

// custom: 3 red ripples lasting 3 seconds total
el.frame("ff0000", 3, { duration: 3 });

// common config options shown with default values
el.frame("C3DAF9", 1, {
    duration: 1 //duration of entire animation (not each individual ripple)
    // Note: Easing is not configurable and will be ignored if included
});
</code></pre>
    * @param {String} color (optional) The color of the border.  Should be a 6 char hex color without the leading # (defaults to light blue: 'C3DAF9').
    * @param {Number} count (optional) The number of ripples to display (defaults to 1)
    * @param {Object} options (optional) Object literal with any of the Fx config options
    * @return {Roo.Element} The Element
    */
    frame : function(color, count, o){
        var el = this.getFxEl();
        o = o || {};

        el.queueFx(o, function(){
            color = color || "#C3DAF9";
            if(color.length == 6){
                color = "#" + color;
            }
            count = count || 1;
            duration = o.duration || 1;
            this.show();

            var b = this.getBox();
            var animFn = function(){
                var proxy = this.createProxy({

                     style:{
                        visbility:"hidden",
                        position:"absolute",
                        "z-index":"35000", // yee haw
                        border:"0px solid " + color
                     }
                  });
                var scale = Roo.isBorderBox ? 2 : 1;
                proxy.animate({
                    top:{from:b.y, to:b.y - 20},
                    left:{from:b.x, to:b.x - 20},
                    borderWidth:{from:0, to:10},
                    opacity:{from:1, to:0},
                    height:{from:b.height, to:(b.height + (20*scale))},
                    width:{from:b.width, to:(b.width + (20*scale))}
                }, duration, function(){
                    proxy.remove();
                });
                if(--count > 0){
                     animFn.defer((duration/2)*1000, this);
                }else{
                    el.afterFx(o);
                }
            };
            animFn.call(this);
        });
        return this;
    },

   /**
    * Creates a pause before any subsequent queued effects begin.  If there are
    * no effects queued after the pause it will have no effect.
    * Usage:
<pre><code>
el.pause(1);
</code></pre>
    * @param {Number} seconds The length of time to pause (in seconds)
    * @return {Roo.Element} The Element
    */
    pause : function(seconds){
        var el = this.getFxEl();
        var o = {};

        el.queueFx(o, function(){
            setTimeout(function(){
                el.afterFx(o);
            }, seconds * 1000);
        });
        return this;
    },

   /**
    * Fade an element in (from transparent to opaque).  The ending opacity can be specified
    * using the "endOpacity" config option.
    * Usage:
<pre><code>
// default: fade in from opacity 0 to 100%
el.fadeIn();

// custom: fade in from opacity 0 to 75% over 2 seconds
el.fadeIn({ endOpacity: .75, duration: 2});

// common config options shown with default values
el.fadeIn({
    endOpacity: 1, //can be any value between 0 and 1 (e.g. .5)
    easing: 'easeOut',
    duration: .5
});
</code></pre>
    * @param {Object} options (optional) Object literal with any of the Fx config options
    * @return {Roo.Element} The Element
    */
    fadeIn : function(o){
        var el = this.getFxEl();
        o = o || {};
        el.queueFx(o, function(){
            this.setOpacity(0);
            this.fixDisplay();
            this.dom.style.visibility = 'visible';
            var to = o.endOpacity || 1;
            arguments.callee.anim = this.fxanim({opacity:{to:to}},
                o, null, .5, "easeOut", function(){
                if(to == 1){
                    this.clearOpacity();
                }
                el.afterFx(o);
            });
        });
        return this;
    },

   /**
    * Fade an element out (from opaque to transparent).  The ending opacity can be specified
    * using the "endOpacity" config option.
    * Usage:
<pre><code>
// default: fade out from the element's current opacity to 0
el.fadeOut();

// custom: fade out from the element's current opacity to 25% over 2 seconds
el.fadeOut({ endOpacity: .25, duration: 2});

// common config options shown with default values
el.fadeOut({
    endOpacity: 0, //can be any value between 0 and 1 (e.g. .5)
    easing: 'easeOut',
    duration: .5
    remove: false,
    useDisplay: false
});
</code></pre>
    * @param {Object} options (optional) Object literal with any of the Fx config options
    * @return {Roo.Element} The Element
    */
    fadeOut : function(o){
        var el = this.getFxEl();
        o = o || {};
        el.queueFx(o, function(){
            arguments.callee.anim = this.fxanim({opacity:{to:o.endOpacity || 0}},
                o, null, .5, "easeOut", function(){
                if(this.visibilityMode == Roo.Element.DISPLAY || o.useDisplay){
                     this.dom.style.display = "none";
                }else{
                     this.dom.style.visibility = "hidden";
                }
                this.clearOpacity();
                el.afterFx(o);
            });
        });
        return this;
    },

   /**
    * Animates the transition of an element's dimensions from a starting height/width
    * to an ending height/width.
    * Usage:
<pre><code>
// change height and width to 100x100 pixels
el.scale(100, 100);

// common config options shown with default values.  The height and width will default to
// the element's existing values if passed as null.
el.scale(
    [element's width],
    [element's height], {
    easing: 'easeOut',
    duration: .35
});
</code></pre>
    * @param {Number} width  The new width (pass undefined to keep the original width)
    * @param {Number} height  The new height (pass undefined to keep the original height)
    * @param {Object} options (optional) Object literal with any of the Fx config options
    * @return {Roo.Element} The Element
    */
    scale : function(w, h, o){
        this.shift(Roo.apply({}, o, {
            width: w,
            height: h
        }));
        return this;
    },

   /**
    * Animates the transition of any combination of an element's dimensions, xy position and/or opacity.
    * Any of these properties not specified in the config object will not be changed.  This effect 
    * requires that at least one new dimension, position or opacity setting must be passed in on
    * the config object in order for the function to have any effect.
    * Usage:
<pre><code>
// slide the element horizontally to x position 200 while changing the height and opacity
el.shift({ x: 200, height: 50, opacity: .8 });

// common config options shown with default values.
el.shift({
    width: [element's width],
    height: [element's height],
    x: [element's x position],
    y: [element's y position],
    opacity: [element's opacity],
    easing: 'easeOut',
    duration: .35
});
</code></pre>
    * @param {Object} options  Object literal with any of the Fx config options
    * @return {Roo.Element} The Element
    */
    shift : function(o){
        var el = this.getFxEl();
        o = o || {};
        el.queueFx(o, function(){
            var a = {}, w = o.width, h = o.height, x = o.x, y = o.y,  op = o.opacity;
            if(w !== undefined){
                a.width = {to: this.adjustWidth(w)};
            }
            if(h !== undefined){
                a.height = {to: this.adjustHeight(h)};
            }
            if(x !== undefined || y !== undefined){
                a.points = {to: [
                    x !== undefined ? x : this.getX(),
                    y !== undefined ? y : this.getY()
                ]};
            }
            if(op !== undefined){
                a.opacity = {to: op};
            }
            if(o.xy !== undefined){
                a.points = {to: o.xy};
            }
            arguments.callee.anim = this.fxanim(a,
                o, 'motion', .35, "easeOut", function(){
                el.afterFx(o);
            });
        });
        return this;
    },

	/**
	 * Slides the element while fading it out of view.  An anchor point can be optionally passed to set the 
	 * ending point of the effect.
	 * Usage:
	 *<pre><code>
// default: slide the element downward while fading out
el.ghost();

// custom: slide the element out to the right with a 2-second duration
el.ghost('r', { duration: 2 });

// common config options shown with default values
el.ghost('b', {
    easing: 'easeOut',
    duration: .5
    remove: false,
    useDisplay: false
});
</code></pre>
	 * @param {String} anchor (optional) One of the valid Fx anchor positions (defaults to bottom: 'b')
	 * @param {Object} options (optional) Object literal with any of the Fx config options
	 * @return {Roo.Element} The Element
	 */
    ghost : function(anchor, o){
        var el = this.getFxEl();
        o = o || {};

        el.queueFx(o, function(){
            anchor = anchor || "b";

            // restore values after effect
            var r = this.getFxRestore();
            var w = this.getWidth(),
                h = this.getHeight();

            var st = this.dom.style;

            var after = function(){
                if(o.useDisplay){
                    el.setDisplayed(false);
                }else{
                    el.hide();
                }

                el.clearOpacity();
                el.setPositioning(r.pos);
                st.width = r.width;
                st.height = r.height;

                el.afterFx(o);
            };

            var a = {opacity: {to: 0}, points: {}}, pt = a.points;
            switch(anchor.toLowerCase()){
                case "t":
                    pt.by = [0, -h];
                break;
                case "l":
                    pt.by = [-w, 0];
                break;
                case "r":
                    pt.by = [w, 0];
                break;
                case "b":
                    pt.by = [0, h];
                break;
                case "tl":
                    pt.by = [-w, -h];
                break;
                case "bl":
                    pt.by = [-w, h];
                break;
                case "br":
                    pt.by = [w, h];
                break;
                case "tr":
                    pt.by = [w, -h];
                break;
            }

            arguments.callee.anim = this.fxanim(a,
                o,
                'motion',
                .5,
                "easeOut", after);
        });
        return this;
    },

	/**
	 * Ensures that all effects queued after syncFx is called on the element are
	 * run concurrently.  This is the opposite of {@link #sequenceFx}.
	 * @return {Roo.Element} The Element
	 */
    syncFx : function(){
        this.fxDefaults = Roo.apply(this.fxDefaults || {}, {
            block : false,
            concurrent : true,
            stopFx : false
        });
        return this;
    },

	/**
	 * Ensures that all effects queued after sequenceFx is called on the element are
	 * run in sequence.  This is the opposite of {@link #syncFx}.
	 * @return {Roo.Element} The Element
	 */
    sequenceFx : function(){
        this.fxDefaults = Roo.apply(this.fxDefaults || {}, {
            block : false,
            concurrent : false,
            stopFx : false
        });
        return this;
    },

	/* @private */
    nextFx : function(){
        var ef = this.fxQueue[0];
        if(ef){
            ef.call(this);
        }
    },

	/**
	 * Returns true if the element has any effects actively running or queued, else returns false.
	 * @return {Boolean} True if element has active effects, else false
	 */
    hasActiveFx : function(){
        return this.fxQueue && this.fxQueue[0];
    },

	/**
	 * Stops any running effects and clears the element's internal effects queue if it contains
	 * any additional effects that haven't started yet.
	 * @return {Roo.Element} The Element
	 */
    stopFx : function(){
        if(this.hasActiveFx()){
            var cur = this.fxQueue[0];
            if(cur && cur.anim && cur.anim.isAnimated()){
                this.fxQueue = [cur]; // clear out others
                cur.anim.stop(true);
            }
        }
        return this;
    },

	/* @private */
    beforeFx : function(o){
        if(this.hasActiveFx() && !o.concurrent){
           if(o.stopFx){
               this.stopFx();
               return true;
           }
           return false;
        }
        return true;
    },

	/**
	 * Returns true if the element is currently blocking so that no other effect can be queued
	 * until this effect is finished, else returns false if blocking is not set.  This is commonly
	 * used to ensure that an effect initiated by a user action runs to completion prior to the
	 * same effect being restarted (e.g., firing only one effect even if the user clicks several times).
	 * @return {Boolean} True if blocking, else false
	 */
    hasFxBlock : function(){
        var q = this.fxQueue;
        return q && q[0] && q[0].block;
    },

	/* @private */
    queueFx : function(o, fn){
        if(!this.fxQueue){
            this.fxQueue = [];
        }
        if(!this.hasFxBlock()){
            Roo.applyIf(o, this.fxDefaults);
            if(!o.concurrent){
                var run = this.beforeFx(o);
                fn.block = o.block;
                this.fxQueue.push(fn);
                if(run){
                    this.nextFx();
                }
            }else{
                fn.call(this);
            }
        }
        return this;
    },

	/* @private */
    fxWrap : function(pos, o, vis){
        var wrap;
        if(!o.wrap || !(wrap = Roo.get(o.wrap))){
            var wrapXY;
            if(o.fixPosition){
                wrapXY = this.getXY();
            }
            var div = document.createElement("div");
            div.style.visibility = vis;
            wrap = Roo.get(this.dom.parentNode.insertBefore(div, this.dom));
            wrap.setPositioning(pos);
            if(wrap.getStyle("position") == "static"){
                wrap.position("relative");
            }
            this.clearPositioning('auto');
            wrap.clip();
            wrap.dom.appendChild(this.dom);
            if(wrapXY){
                wrap.setXY(wrapXY);
            }
        }
        return wrap;
    },

	/* @private */
    fxUnwrap : function(wrap, pos, o){
        this.clearPositioning();
        this.setPositioning(pos);
        if(!o.wrap){
            wrap.dom.parentNode.insertBefore(this.dom, wrap.dom);
            wrap.remove();
        }
    },

	/* @private */
    getFxRestore : function(){
        var st = this.dom.style;
        return {pos: this.getPositioning(), width: st.width, height : st.height};
    },

	/* @private */
    afterFx : function(o){
        if(o.afterStyle){
            this.applyStyles(o.afterStyle);
        }
        if(o.afterCls){
            this.addClass(o.afterCls);
        }
        if(o.remove === true){
            this.remove();
        }
        Roo.callback(o.callback, o.scope, [this]);
        if(!o.concurrent){
            this.fxQueue.shift();
            this.nextFx();
        }
    },

	/* @private */
    getFxEl : function(){ // support for composite element fx
        return Roo.get(this.dom);
    },

	/* @private */
    fxanim : function(args, opt, animType, defaultDur, defaultEase, cb){
        animType = animType || 'run';
        opt = opt || {};
        var anim = Roo.lib.Anim[animType](
            this.dom, args,
            (opt.duration || defaultDur) || .35,
            (opt.easing || defaultEase) || 'easeOut',
            function(){
                Roo.callback(cb, this);
            },
            this
        );
        opt.anim = anim;
        return anim;
    }
};

// backwords compat
Roo.Fx.resize = Roo.Fx.scale;

//When included, Roo.Fx is automatically applied to Element so that all basic
//effects are available directly via the Element API
Roo.apply(Roo.Element.prototype, Roo.Fx);/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */


/**
 * @class Roo.CompositeElement
 * Standard composite class. Creates a Roo.Element for every element in the collection.
 * <br><br>
 * <b>NOTE: Although they are not listed, this class supports all of the set/update methods of Roo.Element. All Roo.Element
 * actions will be performed on all the elements in this collection.</b>
 * <br><br>
 * All methods return <i>this</i> and can be chained.
 <pre><code>
 var els = Roo.select("#some-el div.some-class", true);
 // or select directly from an existing element
 var el = Roo.get('some-el');
 el.select('div.some-class', true);

 els.setWidth(100); // all elements become 100 width
 els.hide(true); // all elements fade out and hide
 // or
 els.setWidth(100).hide(true);
 </code></pre>
 */
Roo.CompositeElement = function(els){
    this.elements = [];
    this.addElements(els);
};
Roo.CompositeElement.prototype = {
    isComposite: true,
    addElements : function(els){
        if(!els) {
            return this;
        }
        if(typeof els == "string"){
            els = Roo.Element.selectorFunction(els);
        }
        var yels = this.elements;
        var index = yels.length-1;
        for(var i = 0, len = els.length; i < len; i++) {
        	yels[++index] = Roo.get(els[i]);
        }
        return this;
    },

    /**
    * Clears this composite and adds the elements returned by the passed selector.
    * @param {String/Array} els A string CSS selector, an array of elements or an element
    * @return {CompositeElement} this
    */
    fill : function(els){
        this.elements = [];
        this.add(els);
        return this;
    },

    /**
    * Filters this composite to only elements that match the passed selector.
    * @param {String} selector A string CSS selector
    * @param {Boolean} inverse return inverse filter (not matches)
    * @return {CompositeElement} this
    */
    filter : function(selector, inverse){
        var els = [];
        inverse = inverse || false;
        this.each(function(el){
            var match = inverse ? !el.is(selector) : el.is(selector);
            if(match){
                els[els.length] = el.dom;
            }
        });
        this.fill(els);
        return this;
    },

    invoke : function(fn, args){
        var els = this.elements;
        for(var i = 0, len = els.length; i < len; i++) {
        	Roo.Element.prototype[fn].apply(els[i], args);
        }
        return this;
    },
    /**
    * Adds elements to this composite.
    * @param {String/Array} els A string CSS selector, an array of elements or an element
    * @return {CompositeElement} this
    */
    add : function(els){
        if(typeof els == "string"){
            this.addElements(Roo.Element.selectorFunction(els));
        }else if(els.length !== undefined){
            this.addElements(els);
        }else{
            this.addElements([els]);
        }
        return this;
    },
    /**
    * Calls the passed function passing (el, this, index) for each element in this composite.
    * @param {Function} fn The function to call
    * @param {Object} scope (optional) The <i>this</i> object (defaults to the element)
    * @return {CompositeElement} this
    */
    each : function(fn, scope){
        var els = this.elements;
        for(var i = 0, len = els.length; i < len; i++){
            if(fn.call(scope || els[i], els[i], this, i) === false) {
                break;
            }
        }
        return this;
    },

    /**
     * Returns the Element object at the specified index
     * @param {Number} index
     * @return {Roo.Element}
     */
    item : function(index){
        return this.elements[index] || null;
    },

    /**
     * Returns the first Element
     * @return {Roo.Element}
     */
    first : function(){
        return this.item(0);
    },

    /**
     * Returns the last Element
     * @return {Roo.Element}
     */
    last : function(){
        return this.item(this.elements.length-1);
    },

    /**
     * Returns the number of elements in this composite
     * @return Number
     */
    getCount : function(){
        return this.elements.length;
    },

    /**
     * Returns true if this composite contains the passed element
     * @return Boolean
     */
    contains : function(el){
        return this.indexOf(el) !== -1;
    },

    /**
     * Returns true if this composite contains the passed element
     * @return Boolean
     */
    indexOf : function(el){
        return this.elements.indexOf(Roo.get(el));
    },


    /**
    * Removes the specified element(s).
    * @param {Mixed} el The id of an element, the Element itself, the index of the element in this composite
    * or an array of any of those.
    * @param {Boolean} removeDom (optional) True to also remove the element from the document
    * @return {CompositeElement} this
    */
    removeElement : function(el, removeDom){
        if(el instanceof Array){
            for(var i = 0, len = el.length; i < len; i++){
                this.removeElement(el[i]);
            }
            return this;
        }
        var index = typeof el == 'number' ? el : this.indexOf(el);
        if(index !== -1){
            if(removeDom){
                var d = this.elements[index];
                if(d.dom){
                    d.remove();
                }else{
                    d.parentNode.removeChild(d);
                }
            }
            this.elements.splice(index, 1);
        }
        return this;
    },

    /**
    * Replaces the specified element with the passed element.
    * @param {String/HTMLElement/Element/Number} el The id of an element, the Element itself, the index of the element in this composite
    * to replace.
    * @param {String/HTMLElement/Element} replacement The id of an element or the Element itself.
    * @param {Boolean} domReplace (Optional) True to remove and replace the element in the document too.
    * @return {CompositeElement} this
    */
    replaceElement : function(el, replacement, domReplace){
        var index = typeof el == 'number' ? el : this.indexOf(el);
        if(index !== -1){
            if(domReplace){
                this.elements[index].replaceWith(replacement);
            }else{
                this.elements.splice(index, 1, Roo.get(replacement))
            }
        }
        return this;
    },

    /**
     * Removes all elements.
     */
    clear : function(){
        this.elements = [];
    }
};
(function(){
    Roo.CompositeElement.createCall = function(proto, fnName){
        if(!proto[fnName]){
            proto[fnName] = function(){
                return this.invoke(fnName, arguments);
            };
        }
    };
    for(var fnName in Roo.Element.prototype){
        if(typeof Roo.Element.prototype[fnName] == "function"){
            Roo.CompositeElement.createCall(Roo.CompositeElement.prototype, fnName);
        }
    };
})();
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.CompositeElementLite
 * @extends Roo.CompositeElement
 * Flyweight composite class. Reuses the same Roo.Element for element operations.
 <pre><code>
 var els = Roo.select("#some-el div.some-class");
 // or select directly from an existing element
 var el = Roo.get('some-el');
 el.select('div.some-class');

 els.setWidth(100); // all elements become 100 width
 els.hide(true); // all elements fade out and hide
 // or
 els.setWidth(100).hide(true);
 </code></pre><br><br>
 * <b>NOTE: Although they are not listed, this class supports all of the set/update methods of Roo.Element. All Roo.Element
 * actions will be performed on all the elements in this collection.</b>
 */
Roo.CompositeElementLite = function(els){
    Roo.CompositeElementLite.superclass.constructor.call(this, els);
    this.el = new Roo.Element.Flyweight();
};
Roo.extend(Roo.CompositeElementLite, Roo.CompositeElement, {
    addElements : function(els){
        if(els){
            if(els instanceof Array){
                this.elements = this.elements.concat(els);
            }else{
                var yels = this.elements;
                var index = yels.length-1;
                for(var i = 0, len = els.length; i < len; i++) {
                    yels[++index] = els[i];
                }
            }
        }
        return this;
    },
    invoke : function(fn, args){
        var els = this.elements;
        var el = this.el;
        for(var i = 0, len = els.length; i < len; i++) {
            el.dom = els[i];
        	Roo.Element.prototype[fn].apply(el, args);
        }
        return this;
    },
    /**
     * Returns a flyweight Element of the dom element object at the specified index
     * @param {Number} index
     * @return {Roo.Element}
     */
    item : function(index){
        if(!this.elements[index]){
            return null;
        }
        this.el.dom = this.elements[index];
        return this.el;
    },

    // fixes scope with flyweight
    addListener : function(eventName, handler, scope, opt){
        var els = this.elements;
        for(var i = 0, len = els.length; i < len; i++) {
            Roo.EventManager.on(els[i], eventName, handler, scope || els[i], opt);
        }
        return this;
    },

    /**
    * Calls the passed function passing (el, this, index) for each element in this composite. <b>The element
    * passed is the flyweight (shared) Roo.Element instance, so if you require a
    * a reference to the dom node, use el.dom.</b>
    * @param {Function} fn The function to call
    * @param {Object} scope (optional) The <i>this</i> object (defaults to the element)
    * @return {CompositeElement} this
    */
    each : function(fn, scope){
        var els = this.elements;
        var el = this.el;
        for(var i = 0, len = els.length; i < len; i++){
            el.dom = els[i];
        	if(fn.call(scope || el, el, this, i) === false){
                break;
            }
        }
        return this;
    },

    indexOf : function(el){
        return this.elements.indexOf(Roo.getDom(el));
    },

    replaceElement : function(el, replacement, domReplace){
        var index = typeof el == 'number' ? el : this.indexOf(el);
        if(index !== -1){
            replacement = Roo.getDom(replacement);
            if(domReplace){
                var d = this.elements[index];
                d.parentNode.insertBefore(replacement, d);
                d.parentNode.removeChild(d);
            }
            this.elements.splice(index, 1, replacement);
        }
        return this;
    }
});
Roo.CompositeElementLite.prototype.on = Roo.CompositeElementLite.prototype.addListener;

/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

 

/**
 * @class Roo.data.Connection
 * @extends Roo.util.Observable
 * The class encapsulates a connection to the page's originating domain, allowing requests to be made
 * either to a configured URL, or to a URL specified at request time. 
 * 
 * Requests made by this class are asynchronous, and will return immediately. No data from
 * the server will be available to the statement immediately following the {@link #request} call.
 * To process returned data, use a callback in the request options object, or an event listener.
 * 
 * Note: If you are doing a file upload, you will not get a normal response object sent back to
 * your callback or event handler.  Since the upload is handled via in IFRAME, there is no XMLHttpRequest.
 * The response object is created using the innerHTML of the IFRAME's document as the responseText
 * property and, if present, the IFRAME's XML document as the responseXML property.
 * 
 * This means that a valid XML or HTML document must be returned. If JSON data is required, it is suggested
 * that it be placed either inside a &lt;textarea> in an HTML document and retrieved from the responseText
 * using a regex, or inside a CDATA section in an XML document and retrieved from the responseXML using
 * standard DOM methods.
 * @constructor
 * @param {Object} config a configuration object.
 */
Roo.data.Connection = function(config){
    Roo.apply(this, config);
    this.addEvents({
        /**
         * @event beforerequest
         * Fires before a network request is made to retrieve a data object.
         * @param {Connection} conn This Connection object.
         * @param {Object} options The options config object passed to the {@link #request} method.
         */
        "beforerequest" : true,
        /**
         * @event requestcomplete
         * Fires if the request was successfully completed.
         * @param {Connection} conn This Connection object.
         * @param {Object} response The XHR object containing the response data.
         * See {@link http://www.w3.org/TR/XMLHttpRequest/} for details.
         * @param {Object} options The options config object passed to the {@link #request} method.
         */
        "requestcomplete" : true,
        /**
         * @event requestexception
         * Fires if an error HTTP status was returned from the server.
         * See {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html} for details of HTTP status codes.
         * @param {Connection} conn This Connection object.
         * @param {Object} response The XHR object containing the response data.
         * See {@link http://www.w3.org/TR/XMLHttpRequest/} for details.
         * @param {Object} options The options config object passed to the {@link #request} method.
         */
        "requestexception" : true
    });
    Roo.data.Connection.superclass.constructor.call(this);
};

Roo.extend(Roo.data.Connection, Roo.util.Observable, {
    /**
     * @cfg {String} url (Optional) The default URL to be used for requests to the server. (defaults to undefined)
     */
    /**
     * @cfg {Object} extraParams (Optional) An object containing properties which are used as
     * extra parameters to each request made by this object. (defaults to undefined)
     */
    /**
     * @cfg {Object} defaultHeaders (Optional) An object containing request headers which are added
     *  to each request made by this object. (defaults to undefined)
     */
    /**
     * @cfg {String} method (Optional) The default HTTP method to be used for requests. (defaults to undefined; if not set but parms are present will use POST, otherwise GET)
     */
    /**
     * @cfg {Number} timeout (Optional) The timeout in milliseconds to be used for requests. (defaults to 30000)
     */
    timeout : 30000,
    /**
     * @cfg {Boolean} autoAbort (Optional) Whether this request should abort any pending requests. (defaults to false)
     * @type Boolean
     */
    autoAbort:false,

    /**
     * @cfg {Boolean} disableCaching (Optional) True to add a unique cache-buster param to GET requests. (defaults to true)
     * @type Boolean
     */
    disableCaching: true,

    /**
     * Sends an HTTP request to a remote server.
     * @param {Object} options An object which may contain the following properties:<ul>
     * <li><b>url</b> {String} (Optional) The URL to which to send the request. Defaults to configured URL</li>
     * <li><b>params</b> {Object/String/Function} (Optional) An object containing properties which are used as parameters to the
     * request, a url encoded string or a function to call to get either.</li>
     * <li><b>method</b> {String} (Optional) The HTTP method to use for the request. Defaults to the configured method, or
     * if no method was configured, "GET" if no parameters are being sent, and "POST" if parameters are being sent.</li>
     * <li><b>callback</b> {Function} (Optional) The function to be called upon receipt of the HTTP response.
     * The callback is called regardless of success or failure and is passed the following parameters:<ul>
     * <li>options {Object} The parameter to the request call.</li>
     * <li>success {Boolean} True if the request succeeded.</li>
     * <li>response {Object} The XMLHttpRequest object containing the response data.</li>
     * </ul></li>
     * <li><b>success</b> {Function} (Optional) The function to be called upon success of the request.
     * The callback is passed the following parameters:<ul>
     * <li>response {Object} The XMLHttpRequest object containing the response data.</li>
     * <li>options {Object} The parameter to the request call.</li>
     * </ul></li>
     * <li><b>failure</b> {Function} (Optional) The function to be called upon failure of the request.
     * The callback is passed the following parameters:<ul>
     * <li>response {Object} The XMLHttpRequest object containing the response data.</li>
     * <li>options {Object} The parameter to the request call.</li>
     * </ul></li>
     * <li><b>scope</b> {Object} (Optional) The scope in which to execute the callbacks: The "this" object
     * for the callback function. Defaults to the browser window.</li>
     * <li><b>form</b> {Object/String} (Optional) A form object or id to pull parameters from.</li>
     * <li><b>isUpload</b> {Boolean} (Optional) True if the form object is a file upload (will usually be automatically detected).</li>
     * <li><b>headers</b> {Object} (Optional) Request headers to set for the request.</li>
     * <li><b>xmlData</b> {Object} (Optional) XML document to use for the post. Note: This will be used instead of
     * params for the post data. Any params will be appended to the URL.</li>
     * <li><b>disableCaching</b> {Boolean} (Optional) True to add a unique cache-buster param to GET requests.</li>
     * </ul>
     * @return {Number} transactionId
     */
    request : function(o){
        if(this.fireEvent("beforerequest", this, o) !== false){
            var p = o.params;

            if(typeof p == "function"){
                p = p.call(o.scope||window, o);
            }
            if(typeof p == "object"){
                p = Roo.urlEncode(o.params);
            }
            if(this.extraParams){
                var extras = Roo.urlEncode(this.extraParams);
                p = p ? (p + '&' + extras) : extras;
            }

            var url = o.url || this.url;
            if(typeof url == 'function'){
                url = url.call(o.scope||window, o);
            }

            if(o.form){
                var form = Roo.getDom(o.form);
                url = url || form.action;

                var enctype = form.getAttribute("enctype");
                
                if (o.formData) {
                    return this.doFormDataUpload(o, url);
                }
                
                if(o.isUpload || (enctype && enctype.toLowerCase() == 'multipart/form-data')){
                    return this.doFormUpload(o, p, url);
                }
                var f = Roo.lib.Ajax.serializeForm(form);
                p = p ? (p + '&' + f) : f;
            }
            
            if (!o.form && o.formData) {
                o.formData = o.formData === true ? new FormData() : o.formData;
                for (var k in o.params) {
                    o.formData.append(k,o.params[k]);
                }
                    
                return this.doFormDataUpload(o, url);
            }
            

            var hs = o.headers;
            if(this.defaultHeaders){
                hs = Roo.apply(hs || {}, this.defaultHeaders);
                if(!o.headers){
                    o.headers = hs;
                }
            }

            var cb = {
                success: this.handleResponse,
                failure: this.handleFailure,
                scope: this,
                argument: {options: o},
                timeout : o.timeout || this.timeout
            };

            var method = o.method||this.method||(p ? "POST" : "GET");

            if(method == 'GET' && (this.disableCaching && o.disableCaching !== false) || o.disableCaching === true){
                url += (url.indexOf('?') != -1 ? '&' : '?') + '_dc=' + (new Date().getTime());
            }

            if(typeof o.autoAbort == 'boolean'){ // options gets top priority
                if(o.autoAbort){
                    this.abort();
                }
            }else if(this.autoAbort !== false){
                this.abort();
            }

            if((method == 'GET' && p) || o.xmlData){
                url += (url.indexOf('?') != -1 ? '&' : '?') + p;
                p = '';
            }
            Roo.lib.Ajax.useDefaultHeader = typeof(o.headers) == 'undefined' || typeof(o.headers['Content-Type']) == 'undefined';
            this.transId = Roo.lib.Ajax.request(method, url, cb, p, o);
            Roo.lib.Ajax.useDefaultHeader == true;
            return this.transId;
        }else{
            Roo.callback(o.callback, o.scope, [o, null, null]);
            return null;
        }
    },

    /**
     * Determine whether this object has a request outstanding.
     * @param {Number} transactionId (Optional) defaults to the last transaction
     * @return {Boolean} True if there is an outstanding request.
     */
    isLoading : function(transId){
        if(transId){
            return Roo.lib.Ajax.isCallInProgress(transId);
        }else{
            return this.transId ? true : false;
        }
    },

    /**
     * Aborts any outstanding request.
     * @param {Number} transactionId (Optional) defaults to the last transaction
     */
    abort : function(transId){
        if(transId || this.isLoading()){
            Roo.lib.Ajax.abort(transId || this.transId);
        }
    },

    // private
    handleResponse : function(response){
        this.transId = false;
        var options = response.argument.options;
        response.argument = options ? options.argument : null;
        this.fireEvent("requestcomplete", this, response, options);
        Roo.callback(options.success, options.scope, [response, options]);
        Roo.callback(options.callback, options.scope, [options, true, response]);
    },

    // private
    handleFailure : function(response, e){
        this.transId = false;
        var options = response.argument.options;
        response.argument = options ? options.argument : null;
        this.fireEvent("requestexception", this, response, options, e);
        Roo.callback(options.failure, options.scope, [response, options]);
        Roo.callback(options.callback, options.scope, [options, false, response]);
    },

    // private
    doFormUpload : function(o, ps, url){
        var id = Roo.id();
        var frame = document.createElement('iframe');
        frame.id = id;
        frame.name = id;
        frame.className = 'x-hidden';
        if(Roo.isIE){
            frame.src = Roo.SSL_SECURE_URL;
        }
        document.body.appendChild(frame);

        if(Roo.isIE){
           document.frames[id].name = id;
        }

        var form = Roo.getDom(o.form);
        form.target = id;
        form.method = 'POST';
        form.enctype = form.encoding = 'multipart/form-data';
        if(url){
            form.action = url;
        }

        var hiddens, hd;
        if(ps){ // add dynamic params
            hiddens = [];
            ps = Roo.urlDecode(ps, false);
            for(var k in ps){
                if(ps.hasOwnProperty(k)){
                    hd = document.createElement('input');
                    hd.type = 'hidden';
                    hd.name = k;
                    hd.value = ps[k];
                    form.appendChild(hd);
                    hiddens.push(hd);
                }
            }
        }

        function cb(){
            var r = {  // bogus response object
                responseText : '',
                responseXML : null
            };

            r.argument = o ? o.argument : null;

            try { //
                var doc;
                if(Roo.isIE){
                    doc = frame.contentWindow.document;
                }else {
                    doc = (frame.contentDocument || window.frames[id].document);
                }
                if(doc && doc.body){
                    r.responseText = doc.body.innerHTML;
                }
                if(doc && doc.XMLDocument){
                    r.responseXML = doc.XMLDocument;
                }else {
                    r.responseXML = doc;
                }
            }
            catch(e) {
                // ignore
            }

            Roo.EventManager.removeListener(frame, 'load', cb, this);

            this.fireEvent("requestcomplete", this, r, o);
            Roo.callback(o.success, o.scope, [r, o]);
            Roo.callback(o.callback, o.scope, [o, true, r]);

            setTimeout(function(){document.body.removeChild(frame);}, 100);
        }

        Roo.EventManager.on(frame, 'load', cb, this);
        form.submit();

        if(hiddens){ // remove dynamic params
            for(var i = 0, len = hiddens.length; i < len; i++){
                form.removeChild(hiddens[i]);
            }
        }
    },
    // this is a 'formdata version???'
    
    
    doFormDataUpload : function(o,  url)
    {
        var formData;
        if (o.form) {
            var form =  Roo.getDom(o.form);
            form.enctype = form.encoding = 'multipart/form-data';
            formData = o.formData === true ? new FormData(form) : o.formData;
        } else {
            formData = o.formData === true ? new FormData() : o.formData;
        }
        
      
        var cb = {
            success: this.handleResponse,
            failure: this.handleFailure,
            scope: this,
            argument: {options: o},
            timeout : o.timeout || this.timeout
        };
 
        if(typeof o.autoAbort == 'boolean'){ // options gets top priority
            if(o.autoAbort){
                this.abort();
            }
        }else if(this.autoAbort !== false){
            this.abort();
        }

        //Roo.lib.Ajax.defaultPostHeader = null;
        Roo.lib.Ajax.useDefaultHeader = false;
        this.transId = Roo.lib.Ajax.request( "POST", url, cb,  formData, o);
        Roo.lib.Ajax.useDefaultHeader = true;
 
         
    }
    
});
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * Global Ajax request class.
 * 
 * @class Roo.Ajax
 * @extends Roo.data.Connection
 * @static
 * 
 * @cfg {String} url  The default URL to be used for requests to the server. (defaults to undefined)
 * @cfg {Object} extraParams  An object containing properties which are used as extra parameters to each request made by this object. (defaults to undefined)
 * @cfg {Object} defaultHeaders  An object containing request headers which are added to each request made by this object. (defaults to undefined)
 * @cfg {String} method (Optional)  The default HTTP method to be used for requests. (defaults to undefined; if not set but parms are present will use POST, otherwise GET)
 * @cfg {Number} timeout (Optional) The timeout in milliseconds to be used for requests. (defaults to 30000)
 * @cfg {Boolean} autoAbort (Optional) Whether a new request should abort any pending requests. (defaults to false)
 * @cfg {Boolean} disableCaching (Optional)   True to add a unique cache-buster param to GET requests. (defaults to true)
 */
Roo.Ajax = new Roo.data.Connection({
    // fix up the docs
    /**
     * @scope Roo.Ajax
     * @type {Boolear} 
     */
    autoAbort : false,

    /**
     * Serialize the passed form into a url encoded string
     * @scope Roo.Ajax
     * @param {String/HTMLElement} form
     * @return {String}
     */
    serializeForm : function(form){
        return Roo.lib.Ajax.serializeForm(form);
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

 
/**
 * @class Roo.UpdateManager
 * @extends Roo.util.Observable
 * Provides AJAX-style update for Element object.<br><br>
 * Usage:<br>
 * <pre><code>
 * // Get it from a Roo.Element object
 * var el = Roo.get("foo");
 * var mgr = el.getUpdateManager();
 * mgr.update("http://myserver.com/index.php", "param1=1&amp;param2=2");
 * ...
 * mgr.formUpdate("myFormId", "http://myserver.com/index.php");
 * <br>
 * // or directly (returns the same UpdateManager instance)
 * var mgr = new Roo.UpdateManager("myElementId");
 * mgr.startAutoRefresh(60, "http://myserver.com/index.php");
 * mgr.on("update", myFcnNeedsToKnow);
 * <br>
   // short handed call directly from the element object
   Roo.get("foo").load({
        url: "bar.php",
        scripts:true,
        params: "for=bar",
        text: "Loading Foo..."
   });
 * </code></pre>
 * @constructor
 * Create new UpdateManager directly.
 * @param {String/HTMLElement/Roo.Element} el The element to update
 * @param {Boolean} forceNew (optional) By default the constructor checks to see if the passed element already has an UpdateManager and if it does it returns the same instance. This will skip that check (useful for extending this class).
 */
Roo.UpdateManager = function(el, forceNew){
    el = Roo.get(el);
    if(!forceNew && el.updateManager){
        return el.updateManager;
    }
    /**
     * The Element object
     * @type Roo.Element
     */
    this.el = el;
    /**
     * Cached url to use for refreshes. Overwritten every time update() is called unless "discardUrl" param is set to true.
     * @type String
     */
    this.defaultUrl = null;

    this.addEvents({
        /**
         * @event beforeupdate
         * Fired before an update is made, return false from your handler and the update is cancelled.
         * @param {Roo.Element} el
         * @param {String/Object/Function} url
         * @param {String/Object} params
         */
        "beforeupdate": true,
        /**
         * @event update
         * Fired after successful update is made.
         * @param {Roo.Element} el
         * @param {Object} oResponseObject The response Object
         */
        "update": true,
        /**
         * @event failure
         * Fired on update failure.
         * @param {Roo.Element} el
         * @param {Object} oResponseObject The response Object
         */
        "failure": true
    });
    var d = Roo.UpdateManager.defaults;
    /**
     * Blank page URL to use with SSL file uploads (Defaults to Roo.UpdateManager.defaults.sslBlankUrl or "about:blank").
     * @type String
     */
    this.sslBlankUrl = d.sslBlankUrl;
    /**
     * Whether to append unique parameter on get request to disable caching (Defaults to Roo.UpdateManager.defaults.disableCaching or false).
     * @type Boolean
     */
    this.disableCaching = d.disableCaching;
    /**
     * Text for loading indicator (Defaults to Roo.UpdateManager.defaults.indicatorText or '&lt;div class="loading-indicator"&gt;Loading...&lt;/div&gt;').
     * @type String
     */
    this.indicatorText = d.indicatorText;
    /**
     * Whether to show indicatorText when loading (Defaults to Roo.UpdateManager.defaults.showLoadIndicator or true).
     * @type String
     */
    this.showLoadIndicator = d.showLoadIndicator;
    /**
     * Timeout for requests or form posts in seconds (Defaults to Roo.UpdateManager.defaults.timeout or 30 seconds).
     * @type Number
     */
    this.timeout = d.timeout;

    /**
     * True to process scripts in the output (Defaults to Roo.UpdateManager.defaults.loadScripts (false)).
     * @type Boolean
     */
    this.loadScripts = d.loadScripts;

    /**
     * Transaction object of current executing transaction
     */
    this.transaction = null;

    /**
     * @private
     */
    this.autoRefreshProcId = null;
    /**
     * Delegate for refresh() prebound to "this", use myUpdater.refreshDelegate.createCallback(arg1, arg2) to bind arguments
     * @type Function
     */
    this.refreshDelegate = this.refresh.createDelegate(this);
    /**
     * Delegate for update() prebound to "this", use myUpdater.updateDelegate.createCallback(arg1, arg2) to bind arguments
     * @type Function
     */
    this.updateDelegate = this.update.createDelegate(this);
    /**
     * Delegate for formUpdate() prebound to "this", use myUpdater.formUpdateDelegate.createCallback(arg1, arg2) to bind arguments
     * @type Function
     */
    this.formUpdateDelegate = this.formUpdate.createDelegate(this);
    /**
     * @private
     */
    this.successDelegate = this.processSuccess.createDelegate(this);
    /**
     * @private
     */
    this.failureDelegate = this.processFailure.createDelegate(this);

    if(!this.renderer){
     /**
      * The renderer for this UpdateManager. Defaults to {@link Roo.UpdateManager.BasicRenderer}.
      */
    this.renderer = new Roo.UpdateManager.BasicRenderer();
    }
    
    Roo.UpdateManager.superclass.constructor.call(this);
};

Roo.extend(Roo.UpdateManager, Roo.util.Observable, {
    /**
     * Get the Element this UpdateManager is bound to
     * @return {Roo.Element} The element
     */
    getEl : function(){
        return this.el;
    },
    /**
     * Performs an async request, updating this element with the response. If params are specified it uses POST, otherwise it uses GET.
     * @param {Object/String/Function} url The url for this request or a function to call to get the url or a config object containing any of the following options:
<pre><code>
um.update({<br/>
    url: "your-url.php",<br/>
    params: {param1: "foo", param2: "bar"}, // or a URL encoded string<br/>
    callback: yourFunction,<br/>
    scope: yourObject, //(optional scope)  <br/>
    discardUrl: false, <br/>
    nocache: false,<br/>
    text: "Loading...",<br/>
    timeout: 30,<br/>
    scripts: false<br/>
});
</code></pre>
     * The only required property is url. The optional properties nocache, text and scripts
     * are shorthand for disableCaching, indicatorText and loadScripts and are used to set their associated property on this UpdateManager instance.
     * @param {String/Object} params (optional) The parameters to pass as either a url encoded string "param1=1&amp;param2=2" or an object {param1: 1, param2: 2}
     * @param {Function} callback (optional) Callback when transaction is complete - called with signature (oElement, bSuccess, oResponse)
     * @param {Boolean} discardUrl (optional) By default when you execute an update the defaultUrl is changed to the last used url. If true, it will not store the url.
     */
    update : function(url, params, callback, discardUrl){
        if(this.fireEvent("beforeupdate", this.el, url, params) !== false){
            var method = this.method,
                cfg;
            if(typeof url == "object"){ // must be config object
                cfg = url;
                url = cfg.url;
                params = params || cfg.params;
                callback = callback || cfg.callback;
                discardUrl = discardUrl || cfg.discardUrl;
                if(callback && cfg.scope){
                    callback = callback.createDelegate(cfg.scope);
                }
                if(typeof cfg.method != "undefined"){method = cfg.method;};
                if(typeof cfg.nocache != "undefined"){this.disableCaching = cfg.nocache;};
                if(typeof cfg.text != "undefined"){this.indicatorText = '<div class="loading-indicator">'+cfg.text+"</div>";};
                if(typeof cfg.scripts != "undefined"){this.loadScripts = cfg.scripts;};
                if(typeof cfg.timeout != "undefined"){this.timeout = cfg.timeout;};
            }
            this.showLoading();
            if(!discardUrl){
                this.defaultUrl = url;
            }
            if(typeof url == "function"){
                url = url.call(this);
            }

            method = method || (params ? "POST" : "GET");
            if(method == "GET"){
                url = this.prepareUrl(url);
            }

            var o = Roo.apply(cfg ||{}, {
                url : url,
                params: params,
                success: this.successDelegate,
                failure: this.failureDelegate,
                callback: undefined,
                timeout: (this.timeout*1000),
                argument: {"url": url, "form": null, "callback": callback, "params": params}
            });
            Roo.log("updated manager called with timeout of " + o.timeout);
            this.transaction = Roo.Ajax.request(o);
        }
    },

    /**
     * Performs an async form post, updating this element with the response. If the form has the attribute enctype="multipart/form-data", it assumes it's a file upload.
     * Uses this.sslBlankUrl for SSL file uploads to prevent IE security warning.
     * @param {String/HTMLElement} form The form Id or form element
     * @param {String} url (optional) The url to pass the form to. If omitted the action attribute on the form will be used.
     * @param {Boolean} reset (optional) Whether to try to reset the form after the update
     * @param {Function} callback (optional) Callback when transaction is complete - called with signature (oElement, bSuccess, oResponse)
     */
    formUpdate : function(form, url, reset, callback){
        if(this.fireEvent("beforeupdate", this.el, form, url) !== false){
            if(typeof url == "function"){
                url = url.call(this);
            }
            form = Roo.getDom(form);
            this.transaction = Roo.Ajax.request({
                form: form,
                url:url,
                success: this.successDelegate,
                failure: this.failureDelegate,
                timeout: (this.timeout*1000),
                argument: {"url": url, "form": form, "callback": callback, "reset": reset}
            });
            this.showLoading.defer(1, this);
        }
    },

    /**
     * Refresh the element with the last used url or defaultUrl. If there is no url, it returns immediately
     * @param {Function} callback (optional) Callback when transaction is complete - called with signature (oElement, bSuccess)
     */
    refresh : function(callback){
        if(this.defaultUrl == null){
            return;
        }
        this.update(this.defaultUrl, null, callback, true);
    },

    /**
     * Set this element to auto refresh.
     * @param {Number} interval How often to update (in seconds).
     * @param {String/Function} url (optional) The url for this request or a function to call to get the url (Defaults to the last used url)
     * @param {String/Object} params (optional) The parameters to pass as either a url encoded string "&param1=1&param2=2" or as an object {param1: 1, param2: 2}
     * @param {Function} callback (optional) Callback when transaction is complete - called with signature (oElement, bSuccess)
     * @param {Boolean} refreshNow (optional) Whether to execute the refresh now, or wait the interval
     */
    startAutoRefresh : function(interval, url, params, callback, refreshNow){
        if(refreshNow){
            this.update(url || this.defaultUrl, params, callback, true);
        }
        if(this.autoRefreshProcId){
            clearInterval(this.autoRefreshProcId);
        }
        this.autoRefreshProcId = setInterval(this.update.createDelegate(this, [url || this.defaultUrl, params, callback, true]), interval*1000);
    },

    /**
     * Stop auto refresh on this element.
     */
     stopAutoRefresh : function(){
        if(this.autoRefreshProcId){
            clearInterval(this.autoRefreshProcId);
            delete this.autoRefreshProcId;
        }
    },

    isAutoRefreshing : function(){
       return this.autoRefreshProcId ? true : false;
    },
    /**
     * Called to update the element to "Loading" state. Override to perform custom action.
     */
    showLoading : function(){
        if(this.showLoadIndicator){
            this.el.update(this.indicatorText);
        }
    },

    /**
     * Adds unique parameter to query string if disableCaching = true
     * @private
     */
    prepareUrl : function(url){
        if(this.disableCaching){
            var append = "_dc=" + (new Date().getTime());
            if(url.indexOf("?") !== -1){
                url += "&" + append;
            }else{
                url += "?" + append;
            }
        }
        return url;
    },

    /**
     * @private
     */
    processSuccess : function(response){
        this.transaction = null;
        if(response.argument.form && response.argument.reset){
            try{ // put in try/catch since some older FF releases had problems with this
                response.argument.form.reset();
            }catch(e){}
        }
        if(this.loadScripts){
            this.renderer.render(this.el, response, this,
                this.updateComplete.createDelegate(this, [response]));
        }else{
            this.renderer.render(this.el, response, this);
            this.updateComplete(response);
        }
    },

    updateComplete : function(response){
        this.fireEvent("update", this.el, response);
        if(typeof response.argument.callback == "function"){
            response.argument.callback(this.el, true, response);
        }
    },

    /**
     * @private
     */
    processFailure : function(response){
        this.transaction = null;
        this.fireEvent("failure", this.el, response);
        if(typeof response.argument.callback == "function"){
            response.argument.callback(this.el, false, response);
        }
    },

    /**
     * Set the content renderer for this UpdateManager. See {@link Roo.UpdateManager.BasicRenderer#render} for more details.
     * @param {Object} renderer The object implementing the render() method
     */
    setRenderer : function(renderer){
        this.renderer = renderer;
    },

    getRenderer : function(){
       return this.renderer;
    },

    /**
     * Set the defaultUrl used for updates
     * @param {String/Function} defaultUrl The url or a function to call to get the url
     */
    setDefaultUrl : function(defaultUrl){
        this.defaultUrl = defaultUrl;
    },

    /**
     * Aborts the executing transaction
     */
    abort : function(){
        if(this.transaction){
            Roo.Ajax.abort(this.transaction);
        }
    },

    /**
     * Returns true if an update is in progress
     * @return {Boolean}
     */
    isUpdating : function(){
        if(this.transaction){
            return Roo.Ajax.isLoading(this.transaction);
        }
        return false;
    }
});

/**
 * @class Roo.UpdateManager.defaults
 * @static (not really - but it helps the doc tool)
 * The defaults collection enables customizing the default properties of UpdateManager
 */
   Roo.UpdateManager.defaults = {
       /**
         * Timeout for requests or form posts in seconds (Defaults 30 seconds).
         * @type Number
         */
         timeout : 30,

         /**
         * True to process scripts by default (Defaults to false).
         * @type Boolean
         */
        loadScripts : false,

        /**
        * Blank page URL to use with SSL file uploads (Defaults to "javascript:false").
        * @type String
        */
        sslBlankUrl : (Roo.SSL_SECURE_URL || "javascript:false"),
        /**
         * Whether to append unique parameter on get request to disable caching (Defaults to false).
         * @type Boolean
         */
        disableCaching : false,
        /**
         * Whether to show indicatorText when loading (Defaults to true).
         * @type Boolean
         */
        showLoadIndicator : true,
        /**
         * Text for loading indicator (Defaults to '&lt;div class="loading-indicator"&gt;Loading...&lt;/div&gt;').
         * @type String
         */
        indicatorText : '<div class="loading-indicator">Loading...</div>'
   };

/**
 * Static convenience method. This method is deprecated in favor of el.load({url:'foo.php', ...}).
 *Usage:
 * <pre><code>Roo.UpdateManager.updateElement("my-div", "stuff.php");</code></pre>
 * @param {String/HTMLElement/Roo.Element} el The element to update
 * @param {String} url The url
 * @param {String/Object} params (optional) Url encoded param string or an object of name/value pairs
 * @param {Object} options (optional) A config object with any of the UpdateManager properties you want to set - for example: {disableCaching:true, indicatorText: "Loading data..."}
 * @static
 * @deprecated
 * @member Roo.UpdateManager
 */
Roo.UpdateManager.updateElement = function(el, url, params, options){
    var um = Roo.get(el, true).getUpdateManager();
    Roo.apply(um, options);
    um.update(url, params, options ? options.callback : null);
};
// alias for backwards compat
Roo.UpdateManager.update = Roo.UpdateManager.updateElement;
/**
 * @class Roo.UpdateManager.BasicRenderer
 * Default Content renderer. Updates the elements innerHTML with the responseText.
 */
Roo.UpdateManager.BasicRenderer = function(){};

Roo.UpdateManager.BasicRenderer.prototype = {
    /**
     * This is called when the transaction is completed and it's time to update the element - The BasicRenderer
     * updates the elements innerHTML with the responseText - To perform a custom render (i.e. XML or JSON processing),
     * create an object with a "render(el, response)" method and pass it to setRenderer on the UpdateManager.
     * @param {Roo.Element} el The element being rendered
     * @param {Object} response The YUI Connect response object
     * @param {UpdateManager} updateManager The calling update manager
     * @param {Function} callback A callback that will need to be called if loadScripts is true on the UpdateManager
     */
     render : function(el, response, updateManager, callback){
        el.update(response.responseText, updateManager.loadScripts, callback);
    }
};
/*
 * Based on:
 * Roo JS
 * (c)) Alan Knowles
 * Licence : LGPL
 */


/**
 * @class Roo.DomTemplate
 * @extends Roo.Template
 * An effort at a dom based template engine..
 *
 * Similar to XTemplate, except it uses dom parsing to create the template..
 *
 * Supported features:
 *
 *  Tags:

<pre><code>
      {a_variable} - output encoded.
      {a_variable.format:("Y-m-d")} - call a method on the variable
      {a_variable:raw} - unencoded output
      {a_variable:toFixed(1,2)} - Roo.util.Format."toFixed"
      {a_variable:this.method_on_template(...)} - call a method on the template object.
 
</code></pre>
 *  The tpl tag:
<pre><code>
        &lt;div roo-for="a_variable or condition.."&gt;&lt;/div&gt;
        &lt;div roo-if="a_variable or condition"&gt;&lt;/div&gt;
        &lt;div roo-exec="some javascript"&gt;&lt;/div&gt;
        &lt;div roo-name="named_template"&gt;&lt;/div&gt; 
  
</code></pre>
 *      
 */
Roo.DomTemplate = function()
{
     Roo.DomTemplate.superclass.constructor.apply(this, arguments);
     if (this.html) {
        this.compile();
     }
};


Roo.extend(Roo.DomTemplate, Roo.Template, {
    /**
     * id counter for sub templates.
     */
    id : 0,
    /**
     * flag to indicate if dom parser is inside a pre,
     * it will strip whitespace if not.
     */
    inPre : false,
    
    /**
     * The various sub templates
     */
    tpls : false,
    
    
    
    /**
     *
     * basic tag replacing syntax
     * WORD:WORD()
     *
     * // you can fake an object call by doing this
     *  x.t:(test,tesT) 
     * 
     */
    re : /(\{|\%7B)([\w-\.]+)(?:\:([\w\.]*)(?:\(([^)]*?)?\))?)?(\}|\%7D)/g,
    //re : /\{([\w-\.]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g,
    
    iterChild : function (node, method) {
        
        var oldPre = this.inPre;
        if (node.tagName == 'PRE') {
            this.inPre = true;
        }
        for( var i = 0; i < node.childNodes.length; i++) {
            method.call(this, node.childNodes[i]);
        }
        this.inPre = oldPre;
    },
    
    
    
    /**
     * compile the template
     *
     * This is not recursive, so I'm not sure how nested templates are really going to be handled..
     *
     */
    compile: function()
    {
        var s = this.html;
        
        // covert the html into DOM...
        var doc = false;
        var div =false;
        try {
            doc = document.implementation.createHTMLDocument("");
            doc.documentElement.innerHTML =   this.html  ;
            div = doc.documentElement;
        } catch (e) {
            // old IE... - nasty -- it causes all sorts of issues.. with
            // images getting pulled from server..
            div = document.createElement('div');
            div.innerHTML = this.html;
        }
        //doc.documentElement.innerHTML = htmlBody
         
        
        
        this.tpls = [];
        var _t = this;
        this.iterChild(div, function(n) {_t.compileNode(n, true); });
        
        var tpls = this.tpls;
        
        // create a top level template from the snippet..
        
        //Roo.log(div.innerHTML);
        
        var tpl = {
            uid : 'master',
            id : this.id++,
            attr : false,
            value : false,
            body : div.innerHTML,
            
            forCall : false,
            execCall : false,
            dom : div,
            isTop : true
            
        };
        tpls.unshift(tpl);
        
        
        // compile them...
        this.tpls = [];
        Roo.each(tpls, function(tp){
            this.compileTpl(tp);
            this.tpls[tp.id] = tp;
        }, this);
        
        this.master = tpls[0];
        return this;
        
        
    },
    
    compileNode : function(node, istop) {
        // test for
        //Roo.log(node);
        
        
        // skip anything not a tag..
        if (node.nodeType != 1) {
            if (node.nodeType == 3 && !this.inPre) {
                // reduce white space..
                node.nodeValue = node.nodeValue.replace(/\s+/g, ' '); 
                
            }
            return;
        }
        
        var tpl = {
            uid : false,
            id : false,
            attr : false,
            value : false,
            body : '',
            
            forCall : false,
            execCall : false,
            dom : false,
            isTop : istop
            
            
        };
        
        
        switch(true) {
            case (node.hasAttribute('roo-for')): tpl.attr = 'for'; break;
            case (node.hasAttribute('roo-if')): tpl.attr = 'if'; break;
            case (node.hasAttribute('roo-name')): tpl.attr = 'name'; break;
            case (node.hasAttribute('roo-exec')): tpl.attr = 'exec'; break;
            // no default..
        }
        
        
        if (!tpl.attr) {
            // just itterate children..
            this.iterChild(node,this.compileNode);
            return;
        }
        tpl.uid = this.id++;
        tpl.value = node.getAttribute('roo-' +  tpl.attr);
        node.removeAttribute('roo-'+ tpl.attr);
        if (tpl.attr != 'name') {
            var placeholder = document.createTextNode('{domtpl' + tpl.uid + '}');
            node.parentNode.replaceChild(placeholder,  node);
        } else {
            
            var placeholder =  document.createElement('span');
            placeholder.className = 'roo-tpl-' + tpl.value;
            node.parentNode.replaceChild(placeholder,  node);
        }
        
        // parent now sees '{domtplXXXX}
        this.iterChild(node,this.compileNode);
        
        // we should now have node body...
        var div = document.createElement('div');
        div.appendChild(node);
        tpl.dom = node;
        // this has the unfortunate side effect of converting tagged attributes
        // eg. href="{...}" into %7C...%7D
        // this has been fixed by searching for those combo's although it's a bit hacky..
        
        
        tpl.body = div.innerHTML;
        
        
         
        tpl.id = tpl.uid;
        switch(tpl.attr) {
            case 'for' :
                switch (tpl.value) {
                    case '.':  tpl.forCall = new Function('values', 'parent', 'with(values){ return values; }'); break;
                    case '..': tpl.forCall= new Function('values', 'parent', 'with(values){ return parent; }'); break;
                    default:   tpl.forCall= new Function('values', 'parent', 'with(values){ return '+tpl.value+'; }');
                }
                break;
            
            case 'exec':
                tpl.execCall = new Function('values', 'parent', 'with(values){ '+(Roo.util.Format.htmlDecode(tpl.value))+'; }');
                break;
            
            case 'if':     
                tpl.ifCall = new Function('values', 'parent', 'with(values){ return '+(Roo.util.Format.htmlDecode(tpl.value))+'; }');
                break;
            
            case 'name':
                tpl.id  = tpl.value; // replace non characters???
                break;
            
        }
        
        
        this.tpls.push(tpl);
        
        
        
    },
    
    
    
    
    /**
     * Compile a segment of the template into a 'sub-template'
     *
     * 
     * 
     *
     */
    compileTpl : function(tpl)
    {
        var fm = Roo.util.Format;
        var useF = this.disableFormats !== true;
        
        var sep = Roo.isGecko ? "+\n" : ",\n";
        
        var undef = function(str) {
            Roo.debug && Roo.log("Property not found :"  + str);
            return '';
        };
          
        //Roo.log(tpl.body);
        
        
        
        var fn = function(m, lbrace, name, format, args)
        {
            //Roo.log("ARGS");
            //Roo.log(arguments);
            args = args ? args.replace(/\\'/g,"'") : args;
            //["{TEST:(a,b,c)}", "TEST", "", "a,b,c", 0, "{TEST:(a,b,c)}"]
            if (typeof(format) == 'undefined') {
                format =  'htmlEncode'; 
            }
            if (format == 'raw' ) {
                format = false;
            }
            
            if(name.substr(0, 6) == 'domtpl'){
                return "'"+ sep +'this.applySubTemplate('+name.substr(6)+', values, parent)'+sep+"'";
            }
            
            // build an array of options to determine if value is undefined..
            
            // basically get 'xxxx.yyyy' then do
            // (typeof(xxxx) == 'undefined' || typeof(xxx.yyyy) == 'undefined') ?
            //    (function () { Roo.log("Property not found"); return ''; })() :
            //    ......
            
            var udef_ar = [];
            var lookfor = '';
            Roo.each(name.split('.'), function(st) {
                lookfor += (lookfor.length ? '.': '') + st;
                udef_ar.push(  "(typeof(" + lookfor + ") == 'undefined')"  );
            });
            
            var udef_st = '((' + udef_ar.join(" || ") +") ? undef('" + name + "') : "; // .. needs )
            
            
            if(format && useF){
                
                args = args ? ',' + args : "";
                 
                if(format.substr(0, 5) != "this."){
                    format = "fm." + format + '(';
                }else{
                    format = 'this.call("'+ format.substr(5) + '", ';
                    args = ", values";
                }
                
                return "'"+ sep +   udef_st   +    format + name + args + "))"+sep+"'";
            }
             
            if (args && args.length) {
                // called with xxyx.yuu:(test,test)
                // change to ()
                return "'"+ sep + udef_st  + name + '(' +  args + "))"+sep+"'";
            }
            // raw.. - :raw modifier..
            return "'"+ sep + udef_st  + name + ")"+sep+"'";
            
        };
        var body;
        // branched to use + in gecko and [].join() in others
        if(Roo.isGecko){
            body = "tpl.compiled = function(values, parent){  with(values) { return '" +
                   tpl.body.replace(/(\r\n|\n)/g, '\\n').replace(/'/g, "\\'").replace(this.re, fn) +
                    "';};};";
        }else{
            body = ["tpl.compiled = function(values, parent){  with (values) { return ['"];
            body.push(tpl.body.replace(/(\r\n|\n)/g,
                            '\\n').replace(/'/g, "\\'").replace(this.re, fn));
            body.push("'].join('');};};");
            body = body.join('');
        }
        
        Roo.debug && Roo.log(body.replace(/\\n/,'\n'));
       
        /** eval:var:tpl eval:var:fm eval:var:useF eval:var:undef  */
        eval(body);
        
        return this;
    },
     
    /**
     * same as applyTemplate, except it's done to one of the subTemplates
     * when using named templates, you can do:
     *
     * var str = pl.applySubTemplate('your-name', values);
     *
     * 
     * @param {Number} id of the template
     * @param {Object} values to apply to template
     * @param {Object} parent (normaly the instance of this object)
     */
    applySubTemplate : function(id, values, parent)
    {
        
        
        var t = this.tpls[id];
        
        
        try { 
            if(t.ifCall && !t.ifCall.call(this, values, parent)){
                Roo.debug && Roo.log('if call on ' + t.value + ' return false');
                return '';
            }
        } catch(e) {
            Roo.log('Xtemplate.applySubTemplate('+ id+ '): Exception thrown on roo-if="' + t.value + '" - ' + e.toString());
            Roo.log(values);
          
            return '';
        }
        try { 
            
            if(t.execCall && t.execCall.call(this, values, parent)){
                return '';
            }
        } catch(e) {
            Roo.log('Xtemplate.applySubTemplate('+ id+ '): Exception thrown on roo-for="' + t.value + '" - ' + e.toString());
            Roo.log(values);
            return '';
        }
        
        try {
            var vs = t.forCall ? t.forCall.call(this, values, parent) : values;
            parent = t.target ? values : parent;
            if(t.forCall && vs instanceof Array){
                var buf = [];
                for(var i = 0, len = vs.length; i < len; i++){
                    try {
                        buf[buf.length] = t.compiled.call(this, vs[i], parent);
                    } catch (e) {
                        Roo.log('Xtemplate.applySubTemplate('+ id+ '): Exception thrown on body="' + t.value + '" - ' + e.toString());
                        Roo.log(e.body);
                        //Roo.log(t.compiled);
                        Roo.log(vs[i]);
                    }   
                }
                return buf.join('');
            }
        } catch (e) {
            Roo.log('Xtemplate.applySubTemplate('+ id+ '): Exception thrown on roo-for="' + t.value + '" - ' + e.toString());
            Roo.log(values);
            return '';
        }
        try {
            return t.compiled.call(this, vs, parent);
        } catch (e) {
            Roo.log('Xtemplate.applySubTemplate('+ id+ '): Exception thrown on body="' + t.value + '" - ' + e.toString());
            Roo.log(e.body);
            //Roo.log(t.compiled);
            Roo.log(values);
            return '';
        }
    },

   

    applyTemplate : function(values){
        return this.master.compiled.call(this, values, {});
        //var s = this.subs;
    },

    apply : function(){
        return this.applyTemplate.apply(this, arguments);
    }

 });

Roo.DomTemplate.from = function(el){
    el = Roo.getDom(el);
    return new Roo.Domtemplate(el.value || el.innerHTML);
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.util.DelayedTask
 * Provides a convenient method of performing setTimeout where a new
 * timeout cancels the old timeout. An example would be performing validation on a keypress.
 * You can use this class to buffer
 * the keypress events for a certain number of milliseconds, and perform only if they stop
 * for that amount of time.
 * @constructor The parameters to this constructor serve as defaults and are not required.
 * @param {Function} fn (optional) The default function to timeout
 * @param {Object} scope (optional) The default scope of that timeout
 * @param {Array} args (optional) The default Array of arguments
 */
Roo.util.DelayedTask = function(fn, scope, args){
    var id = null, d, t;

    var call = function(){
        var now = new Date().getTime();
        if(now - t >= d){
            clearInterval(id);
            id = null;
            fn.apply(scope, args || []);
        }
    };
    /**
     * Cancels any pending timeout and queues a new one
     * @param {Number} delay The milliseconds to delay
     * @param {Function} newFn (optional) Overrides function passed to constructor
     * @param {Object} newScope (optional) Overrides scope passed to constructor
     * @param {Array} newArgs (optional) Overrides args passed to constructor
     */
    this.delay = function(delay, newFn, newScope, newArgs){
        if(id && delay != d){
            this.cancel();
        }
        d = delay;
        t = new Date().getTime();
        fn = newFn || fn;
        scope = newScope || scope;
        args = newArgs || args;
        if(!id){
            id = setInterval(call, d);
        }
    };

    /**
     * Cancel the last queued timeout
     */
    this.cancel = function(){
        if(id){
            clearInterval(id);
            id = null;
        }
    };
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.util.TaskRunner
 * Manage background tasks - not sure why this is better that setInterval?
 * @static
 *
 */
 
Roo.util.TaskRunner = function(interval){
    interval = interval || 10;
    var tasks = [], removeQueue = [];
    var id = 0;
    var running = false;

    var stopThread = function(){
        running = false;
        clearInterval(id);
        id = 0;
    };

    var startThread = function(){
        if(!running){
            running = true;
            id = setInterval(runTasks, interval);
        }
    };

    var removeTask = function(task){
        removeQueue.push(task);
        if(task.onStop){
            task.onStop();
        }
    };

    var runTasks = function(){
        if(removeQueue.length > 0){
            for(var i = 0, len = removeQueue.length; i < len; i++){
                tasks.remove(removeQueue[i]);
            }
            removeQueue = [];
            if(tasks.length < 1){
                stopThread();
                return;
            }
        }
        var now = new Date().getTime();
        for(var i = 0, len = tasks.length; i < len; ++i){
            var t = tasks[i];
            var itime = now - t.taskRunTime;
            if(t.interval <= itime){
                var rt = t.run.apply(t.scope || t, t.args || [++t.taskRunCount]);
                t.taskRunTime = now;
                if(rt === false || t.taskRunCount === t.repeat){
                    removeTask(t);
                    return;
                }
            }
            if(t.duration && t.duration <= (now - t.taskStartTime)){
                removeTask(t);
            }
        }
    };

    /**
     * Queues a new task.
     * @param {Object} task
     *
     * Task property : interval = how frequent to run.
     * Task object should implement
     * function run()
     * Task object may implement
     * function onStop()
     */
    this.start = function(task){
        tasks.push(task);
        task.taskStartTime = new Date().getTime();
        task.taskRunTime = 0;
        task.taskRunCount = 0;
        startThread();
        return task;
    };
    /**
     * Stop  new task.
     * @param {Object} task
     */
    this.stop = function(task){
        removeTask(task);
        return task;
    };
    /**
     * Stop all Tasks
     */
    this.stopAll = function(){
        stopThread();
        for(var i = 0, len = tasks.length; i < len; i++){
            if(tasks[i].onStop){
                tasks[i].onStop();
            }
        }
        tasks = [];
        removeQueue = [];
    };
};

Roo.TaskMgr = new Roo.util.TaskRunner();/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

 
/**
 * @class Roo.util.MixedCollection
 * @extends Roo.util.Observable
 * A Collection class that maintains both numeric indexes and keys and exposes events.
 * @constructor
 * @param {Boolean} allowFunctions True if the addAll function should add function references to the
 * collection (defaults to false)
 * @param {Function} keyFn A function that can accept an item of the type(s) stored in this MixedCollection
 * and return the key value for that item.  This is used when available to look up the key on items that
 * were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is
 * equivalent to providing an implementation for the {@link #getKey} method.
 */
Roo.util.MixedCollection = function(allowFunctions, keyFn){
    this.items = [];
    this.map = {};
    this.keys = [];
    this.length = 0;
    this.addEvents({
        /**
         * @event clear
         * Fires when the collection is cleared.
         */
        "clear" : true,
        /**
         * @event add
         * Fires when an item is added to the collection.
         * @param {Number} index The index at which the item was added.
         * @param {Object} o The item added.
         * @param {String} key The key associated with the added item.
         */
        "add" : true,
        /**
         * @event replace
         * Fires when an item is replaced in the collection.
         * @param {String} key he key associated with the new added.
         * @param {Object} old The item being replaced.
         * @param {Object} new The new item.
         */
        "replace" : true,
        /**
         * @event remove
         * Fires when an item is removed from the collection.
         * @param {Object} o The item being removed.
         * @param {String} key (optional) The key associated with the removed item.
         */
        "remove" : true,
        "sort" : true
    });
    this.allowFunctions = allowFunctions === true;
    if(keyFn){
        this.getKey = keyFn;
    }
    Roo.util.MixedCollection.superclass.constructor.call(this);
};

Roo.extend(Roo.util.MixedCollection, Roo.util.Observable, {
    allowFunctions : false,
    
/**
 * Adds an item to the collection.
 * @param {String} key The key to associate with the item
 * @param {Object} o The item to add.
 * @return {Object} The item added.
 */
    add : function(key, o){
        if(arguments.length == 1){
            o = arguments[0];
            key = this.getKey(o);
        }
        if(typeof key == "undefined" || key === null){
            this.length++;
            this.items.push(o);
            this.keys.push(null);
        }else{
            var old = this.map[key];
            if(old){
                return this.replace(key, o);
            }
            this.length++;
            this.items.push(o);
            this.map[key] = o;
            this.keys.push(key);
        }
        this.fireEvent("add", this.length-1, o, key);
        return o;
    },
       
/**
  * MixedCollection has a generic way to fetch keys if you implement getKey.
<pre><code>
// normal way
var mc = new Roo.util.MixedCollection();
mc.add(someEl.dom.id, someEl);
mc.add(otherEl.dom.id, otherEl);
//and so on

// using getKey
var mc = new Roo.util.MixedCollection();
mc.getKey = function(el){
   return el.dom.id;
};
mc.add(someEl);
mc.add(otherEl);

// or via the constructor
var mc = new Roo.util.MixedCollection(false, function(el){
   return el.dom.id;
});
mc.add(someEl);
mc.add(otherEl);
</code></pre>
 * @param o {Object} The item for which to find the key.
 * @return {Object} The key for the passed item.
 */
    getKey : function(o){
         return o.id; 
    },
   
/**
 * Replaces an item in the collection.
 * @param {String} key The key associated with the item to replace, or the item to replace.
 * @param o {Object} o (optional) If the first parameter passed was a key, the item to associate with that key.
 * @return {Object}  The new item.
 */
    replace : function(key, o){
        if(arguments.length == 1){
            o = arguments[0];
            key = this.getKey(o);
        }
        var old = this.item(key);
        if(typeof key == "undefined" || key === null || typeof old == "undefined"){
             return this.add(key, o);
        }
        var index = this.indexOfKey(key);
        this.items[index] = o;
        this.map[key] = o;
        this.fireEvent("replace", key, old, o);
        return o;
    },
   
/**
 * Adds all elements of an Array or an Object to the collection.
 * @param {Object/Array} objs An Object containing properties which will be added to the collection, or
 * an Array of values, each of which are added to the collection.
 */
    addAll : function(objs){
        if(arguments.length > 1 || objs instanceof Array){
            var args = arguments.length > 1 ? arguments : objs;
            for(var i = 0, len = args.length; i < len; i++){
                this.add(args[i]);
            }
        }else{
            for(var key in objs){
                if(this.allowFunctions || typeof objs[key] != "function"){
                    this.add(key, objs[key]);
                }
            }
        }
    },
   
/**
 * Executes the specified function once for every item in the collection, passing each
 * item as the first and only parameter. returning false from the function will stop the iteration.
 * @param {Function} fn The function to execute for each item.
 * @param {Object} scope (optional) The scope in which to execute the function.
 */
    each : function(fn, scope){
        var items = [].concat(this.items); // each safe for removal
        for(var i = 0, len = items.length; i < len; i++){
            if(fn.call(scope || items[i], items[i], i, len) === false){
                break;
            }
        }
    },
   
/**
 * Executes the specified function once for every key in the collection, passing each
 * key, and its associated item as the first two parameters.
 * @param {Function} fn The function to execute for each item.
 * @param {Object} scope (optional) The scope in which to execute the function.
 */
    eachKey : function(fn, scope){
        for(var i = 0, len = this.keys.length; i < len; i++){
            fn.call(scope || window, this.keys[i], this.items[i], i, len);
        }
    },
   
/**
 * Returns the first item in the collection which elicits a true return value from the
 * passed selection function.
 * @param {Function} fn The selection function to execute for each item.
 * @param {Object} scope (optional) The scope in which to execute the function.
 * @return {Object} The first item in the collection which returned true from the selection function.
 */
    find : function(fn, scope){
        for(var i = 0, len = this.items.length; i < len; i++){
            if(fn.call(scope || window, this.items[i], this.keys[i])){
                return this.items[i];
            }
        }
        return null;
    },
   
/**
 * Inserts an item at the specified index in the collection.
 * @param {Number} index The index to insert the item at.
 * @param {String} key The key to associate with the new item, or the item itself.
 * @param {Object} o  (optional) If the second parameter was a key, the new item.
 * @return {Object} The item inserted.
 */
    insert : function(index, key, o){
        if(arguments.length == 2){
            o = arguments[1];
            key = this.getKey(o);
        }
        if(index >= this.length){
            return this.add(key, o);
        }
        this.length++;
        this.items.splice(index, 0, o);
        if(typeof key != "undefined" && key != null){
            this.map[key] = o;
        }
        this.keys.splice(index, 0, key);
        this.fireEvent("add", index, o, key);
        return o;
    },
   
/**
 * Removed an item from the collection.
 * @param {Object} o The item to remove.
 * @return {Object} The item removed.
 */
    remove : function(o){
        return this.removeAt(this.indexOf(o));
    },
   
/**
 * Remove an item from a specified index in the collection.
 * @param {Number} index The index within the collection of the item to remove.
 */
    removeAt : function(index){
        if(index < this.length && index >= 0){
            this.length--;
            var o = this.items[index];
            this.items.splice(index, 1);
            var key = this.keys[index];
            if(typeof key != "undefined"){
                delete this.map[key];
            }
            this.keys.splice(index, 1);
            this.fireEvent("remove", o, key);
        }
    },
   
/**
 * Removed an item associated with the passed key fom the collection.
 * @param {String} key The key of the item to remove.
 */
    removeKey : function(key){
        return this.removeAt(this.indexOfKey(key));
    },
   
/**
 * Returns the number of items in the collection.
 * @return {Number} the number of items in the collection.
 */
    getCount : function(){
        return this.length; 
    },
   
/**
 * Returns index within the collection of the passed Object.
 * @param {Object} o The item to find the index of.
 * @return {Number} index of the item.
 */
    indexOf : function(o){
        if(!this.items.indexOf){
            for(var i = 0, len = this.items.length; i < len; i++){
                if(this.items[i] == o) {
                    return i;
                }
            }
            return -1;
        }else{
            return this.items.indexOf(o);
        }
    },
   
/**
 * Returns index within the collection of the passed key.
 * @param {String} key The key to find the index of.
 * @return {Number} index of the key.
 */
    indexOfKey : function(key){
        if(!this.keys.indexOf){
            for(var i = 0, len = this.keys.length; i < len; i++){
                if(this.keys[i] == key) {
                    return i;
                }
            }
            return -1;
        }else{
            return this.keys.indexOf(key);
        }
    },
   
/**
 * Returns the item associated with the passed key OR index. Key has priority over index.
 * @param {String/Number} key The key or index of the item.
 * @return {Object} The item associated with the passed key.
 */
    item : function(key){
        if (key === 'length') {
            return null;
        }
        var item = typeof this.map[key] != "undefined" ? this.map[key] : this.items[key];
        return typeof item != 'function' || this.allowFunctions ? item : null; // for prototype!
    },
    
/**
 * Returns the item at the specified index.
 * @param {Number} index The index of the item.
 * @return {Object}
 */
    itemAt : function(index){
        return this.items[index];
    },
    
/**
 * Returns the item associated with the passed key.
 * @param {String/Number} key The key of the item.
 * @return {Object} The item associated with the passed key.
 */
    key : function(key){
        return this.map[key];
    },
   
/**
 * Returns true if the collection contains the passed Object as an item.
 * @param {Object} o  The Object to look for in the collection.
 * @return {Boolean} True if the collection contains the Object as an item.
 */
    contains : function(o){
        return this.indexOf(o) != -1;
    },
   
/**
 * Returns true if the collection contains the passed Object as a key.
 * @param {String} key The key to look for in the collection.
 * @return {Boolean} True if the collection contains the Object as a key.
 */
    containsKey : function(key){
        return typeof this.map[key] != "undefined";
    },
   
/**
 * Removes all items from the collection.
 */
    clear : function(){
        this.length = 0;
        this.items = [];
        this.keys = [];
        this.map = {};
        this.fireEvent("clear");
    },
   
/**
 * Returns the first item in the collection.
 * @return {Object} the first item in the collection..
 */
    first : function(){
        return this.items[0]; 
    },
   
/**
 * Returns the last item in the collection.
 * @return {Object} the last item in the collection..
 */
    last : function(){
        return this.items[this.length-1];   
    },
    
    _sort : function(property, dir, fn){
        var dsc = String(dir).toUpperCase() == "DESC" ? -1 : 1;
        fn = fn || function(a, b){
            return a-b;
        };
        var c = [], k = this.keys, items = this.items;
        for(var i = 0, len = items.length; i < len; i++){
            c[c.length] = {key: k[i], value: items[i], index: i};
        }
        c.sort(function(a, b){
            var v = fn(a[property], b[property]) * dsc;
            if(v == 0){
                v = (a.index < b.index ? -1 : 1);
            }
            return v;
        });
        for(var i = 0, len = c.length; i < len; i++){
            items[i] = c[i].value;
            k[i] = c[i].key;
        }
        this.fireEvent("sort", this);
    },
    
    /**
     * Sorts this collection with the passed comparison function
     * @param {String} direction (optional) "ASC" or "DESC"
     * @param {Function} fn (optional) comparison function
     */
    sort : function(dir, fn){
        this._sort("value", dir, fn);
    },
    
    /**
     * Sorts this collection by keys
     * @param {String} direction (optional) "ASC" or "DESC"
     * @param {Function} fn (optional) a comparison function (defaults to case insensitive string)
     */
    keySort : function(dir, fn){
        this._sort("key", dir, fn || function(a, b){
            return String(a).toUpperCase()-String(b).toUpperCase();
        });
    },
    
    /**
     * Returns a range of items in this collection
     * @param {Number} startIndex (optional) defaults to 0
     * @param {Number} endIndex (optional) default to the last item
     * @return {Array} An array of items
     */
    getRange : function(start, end){
        var items = this.items;
        if(items.length < 1){
            return [];
        }
        start = start || 0;
        end = Math.min(typeof end == "undefined" ? this.length-1 : end, this.length-1);
        var r = [];
        if(start <= end){
            for(var i = start; i <= end; i++) {
        	    r[r.length] = items[i];
            }
        }else{
            for(var i = start; i >= end; i--) {
        	    r[r.length] = items[i];
            }
        }
        return r;
    },
        
    /**
     * Filter the <i>objects</i> in this collection by a specific property. 
     * Returns a new collection that has been filtered.
     * @param {String} property A property on your objects
     * @param {String/RegExp} value Either string that the property values 
     * should start with or a RegExp to test against the property
     * @return {MixedCollection} The new filtered collection
     */
    filter : function(property, value){
        if(!value.exec){ // not a regex
            value = String(value);
            if(value.length == 0){
                return this.clone();
            }
            value = new RegExp("^" + Roo.escapeRe(value), "i");
        }
        return this.filterBy(function(o){
            return o && value.test(o[property]);
        });
	},
    
    /**
     * Filter by a function. * Returns a new collection that has been filtered.
     * The passed function will be called with each 
     * object in the collection. If the function returns true, the value is included 
     * otherwise it is filtered.
     * @param {Function} fn The function to be called, it will receive the args o (the object), k (the key)
     * @param {Object} scope (optional) The scope of the function (defaults to this) 
     * @return {MixedCollection} The new filtered collection
     */
    filterBy : function(fn, scope){
        var r = new Roo.util.MixedCollection();
        r.getKey = this.getKey;
        var k = this.keys, it = this.items;
        for(var i = 0, len = it.length; i < len; i++){
            if(fn.call(scope||this, it[i], k[i])){
				r.add(k[i], it[i]);
			}
        }
        return r;
    },
    
    /**
     * Creates a duplicate of this collection
     * @return {MixedCollection}
     */
    clone : function(){
        var r = new Roo.util.MixedCollection();
        var k = this.keys, it = this.items;
        for(var i = 0, len = it.length; i < len; i++){
            r.add(k[i], it[i]);
        }
        r.getKey = this.getKey;
        return r;
    }
});
/**
 * Returns the item associated with the passed key or index.
 * @method
 * @param {String/Number} key The key or index of the item.
 * @return {Object} The item associated with the passed key.
 */
Roo.util.MixedCollection.prototype.get = Roo.util.MixedCollection.prototype.item;/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.util.JSON
 * Modified version of Douglas Crockford"s json.js that doesn"t
 * mess with the Object prototype 
 * http://www.json.org/js.html
 * @static
 */
Roo.util.JSON = new (function(){
    var useHasOwn = {}.hasOwnProperty ? true : false;
    
    // crashes Safari in some instances
    //var validRE = /^("(\\.|[^"\\\n\r])*?"|[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t])+?$/;
    
    var pad = function(n) {
        return n < 10 ? "0" + n : n;
    };
    
    var m = {
        "\b": '\\b',
        "\t": '\\t',
        "\n": '\\n',
        "\f": '\\f',
        "\r": '\\r',
        '"' : '\\"',
        "\\": '\\\\'
    };

    var encodeString = function(s){
        if (/["\\\x00-\x1f]/.test(s)) {
            return '"' + s.replace(/([\x00-\x1f\\"])/g, function(a, b) {
                var c = m[b];
                if(c){
                    return c;
                }
                c = b.charCodeAt();
                return "\\u00" +
                    Math.floor(c / 16).toString(16) +
                    (c % 16).toString(16);
            }) + '"';
        }
        return '"' + s + '"';
    };
    
    var encodeArray = function(o){
        var a = ["["], b, i, l = o.length, v;
            for (i = 0; i < l; i += 1) {
                v = o[i];
                switch (typeof v) {
                    case "undefined":
                    case "function":
                    case "unknown":
                        break;
                    default:
                        if (b) {
                            a.push(',');
                        }
                        a.push(v === null ? "null" : Roo.util.JSON.encode(v));
                        b = true;
                }
            }
            a.push("]");
            return a.join("");
    };
    
    var encodeDate = function(o){
        return '"' + o.getFullYear() + "-" +
                pad(o.getMonth() + 1) + "-" +
                pad(o.getDate()) + "T" +
                pad(o.getHours()) + ":" +
                pad(o.getMinutes()) + ":" +
                pad(o.getSeconds()) + '"';
    };
    
    /**
     * Encodes an Object, Array or other value
     * @param {Mixed} o The variable to encode
     * @return {String} The JSON string
     */
    this.encode = function(o)
    {
        // should this be extended to fully wrap stringify..
        
        if(typeof o == "undefined" || o === null){
            return "null";
        }else if(o instanceof Array){
            return encodeArray(o);
        }else if(o instanceof Date){
            return encodeDate(o);
        }else if(typeof o == "string"){
            return encodeString(o);
        }else if(typeof o == "number"){
            return isFinite(o) ? String(o) : "null";
        }else if(typeof o == "boolean"){
            return String(o);
        }else {
            var a = ["{"], b, i, v;
            for (i in o) {
                if(!useHasOwn || o.hasOwnProperty(i)) {
                    v = o[i];
                    switch (typeof v) {
                    case "undefined":
                    case "function":
                    case "unknown":
                        break;
                    default:
                        if(b){
                            a.push(',');
                        }
                        a.push(this.encode(i), ":",
                                v === null ? "null" : this.encode(v));
                        b = true;
                    }
                }
            }
            a.push("}");
            return a.join("");
        }
    };
    
    /**
     * Decodes (parses) a JSON string to an object. If the JSON is invalid, this function throws a SyntaxError.
     * @param {String} json The JSON string
     * @return {Object} The resulting object
     */
    this.decode = function(json){
        
        return  /** eval:var:json */ eval("(" + json + ')');
    };
})();
/** 
 * Shorthand for {@link Roo.util.JSON#encode}
 * @member Roo encode 
 * @method */
Roo.encode = typeof(JSON) != 'undefined' && JSON.stringify ? JSON.stringify : Roo.util.JSON.encode;
/** 
 * Shorthand for {@link Roo.util.JSON#decode}
 * @member Roo decode 
 * @method */
Roo.decode = typeof(JSON) != 'undefined' && JSON.parse ? JSON.parse : Roo.util.JSON.decode;
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.util.Format
 * Reusable data formatting functions
 * @static
 */
Roo.util.Format = function(){
    var trimRe = /^\s+|\s+$/g;
    return {
        /**
         * Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length
         * @param {String} value The string to truncate
         * @param {Number} length The maximum length to allow before truncating
         * @return {String} The converted text
         */
        ellipsis : function(value, len){
            if(value && value.length > len){
                return value.substr(0, len-3)+"...";
            }
            return value;
        },

        /**
         * Checks a reference and converts it to empty string if it is undefined
         * @param {Mixed} value Reference to check
         * @return {Mixed} Empty string if converted, otherwise the original value
         */
        undef : function(value){
            return typeof value != "undefined" ? value : "";
        },

        /**
         * Convert certain characters (&, <, >, and ') to their HTML character equivalents for literal display in web pages.
         * @param {String} value The string to encode
         * @return {String} The encoded text
         */
        htmlEncode : function(value){
            return !value ? value : String(value).replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
        },

        /**
         * Convert certain characters (&, <, >, and ') from their HTML character equivalents.
         * @param {String} value The string to decode
         * @return {String} The decoded text
         */
        htmlDecode : function(value){
            return !value ? value : String(value).replace(/&amp;/g, "&").replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, '"');
        },

        /**
         * Trims any whitespace from either side of a string
         * @param {String} value The text to trim
         * @return {String} The trimmed text
         */
        trim : function(value){
            return String(value).replace(trimRe, "");
        },

        /**
         * Returns a substring from within an original string
         * @param {String} value The original text
         * @param {Number} start The start index of the substring
         * @param {Number} length The length of the substring
         * @return {String} The substring
         */
        substr : function(value, start, length){
            return String(value).substr(start, length);
        },

        /**
         * Converts a string to all lower case letters
         * @param {String} value The text to convert
         * @return {String} The converted text
         */
        lowercase : function(value){
            return String(value).toLowerCase();
        },

        /**
         * Converts a string to all upper case letters
         * @param {String} value The text to convert
         * @return {String} The converted text
         */
        uppercase : function(value){
            return String(value).toUpperCase();
        },

        /**
         * Converts the first character only of a string to upper case
         * @param {String} value The text to convert
         * @return {String} The converted text
         */
        capitalize : function(value){
            return !value ? value : value.charAt(0).toUpperCase() + value.substr(1).toLowerCase();
        },

        // private
        call : function(value, fn){
            if(arguments.length > 2){
                var args = Array.prototype.slice.call(arguments, 2);
                args.unshift(value);
                 
                return /** eval:var:value */  eval(fn).apply(window, args);
            }else{
                /** eval:var:value */
                return /** eval:var:value */ eval(fn).call(window, value);
            }
        },

       
        /**
         * safer version of Math.toFixed..??/
         * @param {Number/String} value The numeric value to format
         * @param {Number/String} value Decimal places 
         * @return {String} The formatted currency string
         */
        toFixed : function(v, n)
        {
            // why not use to fixed - precision is buggered???
            if (!n) {
                return Math.round(v-0);
            }
            var fact = Math.pow(10,n+1);
            v = (Math.round((v-0)*fact))/fact;
            var z = (''+fact).substring(2);
            if (v == Math.floor(v)) {
                return Math.floor(v) + '.' + z;
            }
            
            // now just padd decimals..
            var ps = String(v).split('.');
            var fd = (ps[1] + z);
            var r = fd.substring(0,n); 
            var rm = fd.substring(n); 
            if (rm < 5) {
                return ps[0] + '.' + r;
            }
            r*=1; // turn it into a number;
            r++;
            if (String(r).length != n) {
                ps[0]*=1;
                ps[0]++;
                r = String(r).substring(1); // chop the end off.
            }
            
            return ps[0] + '.' + r;
             
        },
        
        /**
         * Format a number as US currency
         * @param {Number/String} value The numeric value to format
         * @return {String} The formatted currency string
         */
        usMoney : function(v){
            return '$' + Roo.util.Format.number(v);
        },
        
        /**
         * Format a number
         * eventually this should probably emulate php's number_format
         * @param {Number/String} value The numeric value to format
         * @param {Number} decimals number of decimal places
         * @param {String} delimiter for thousands (default comma)
         * @return {String} The formatted currency string
         */
        number : function(v, decimals, thousandsDelimiter)
        {
            // multiply and round.
            decimals = typeof(decimals) == 'undefined' ? 2 : decimals;
            thousandsDelimiter = typeof(thousandsDelimiter) == 'undefined' ? ',' : thousandsDelimiter;
            
            var mul = Math.pow(10, decimals);
            var zero = String(mul).substring(1);
            v = (Math.round((v-0)*mul))/mul;
            
            // if it's '0' number.. then
            
            //v = (v == Math.floor(v)) ? v + "." + zero : ((v*10 == Math.floor(v*10)) ? v + "0" : v);
            v = String(v);
            var ps = v.split('.');
            var whole = ps[0];
            
            var r = /(\d+)(\d{3})/;
            // add comma's
            
            if(thousandsDelimiter.length != 0) {
                whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, thousandsDelimiter );
            } 
            
            var sub = ps[1] ?
                    // has decimals..
                    (decimals ?  ('.'+ ps[1] + zero.substring(ps[1].length)) : '') :
                    // does not have decimals
                    (decimals ? ('.' + zero) : '');
            
            
            return whole + sub ;
        },
        
        /**
         * Parse a value into a formatted date using the specified format pattern.
         * @param {Mixed} value The value to format
         * @param {String} format (optional) Any valid date format string (defaults to 'm/d/Y')
         * @return {String} The formatted date string
         */
        date : function(v, format){
            if(!v){
                return "";
            }
            if(!(v instanceof Date)){
                v = new Date(Date.parse(v));
            }
            return v.dateFormat(format || Roo.util.Format.defaults.date);
        },

        /**
         * Returns a date rendering function that can be reused to apply a date format multiple times efficiently
         * @param {String} format Any valid date format string
         * @return {Function} The date formatting function
         */
        dateRenderer : function(format){
            return function(v){
                return Roo.util.Format.date(v, format);  
            };
        },

        // private
        stripTagsRE : /<\/?[^>]+>/gi,
        
        /**
         * Strips all HTML tags
         * @param {Mixed} value The text from which to strip tags
         * @return {String} The stripped text
         */
        stripTags : function(v){
            return !v ? v : String(v).replace(this.stripTagsRE, "");
        },
        
        /**
         * Size in Mb,Gb etc.
         * @param {Number} value The number to be formated
         * @param {number} decimals how many decimal places
         * @return {String} the formated string
         */
        size : function(value, decimals)
        {
            var sizes = ['b', 'k', 'M', 'G', 'T'];
            if (value == 0) {
                return 0;
            }
            var i = parseInt(Math.floor(Math.log(value) / Math.log(1024)));
            return Roo.util.Format.number(value/ Math.pow(1024, i) ,decimals)   + sizes[i];
        }
        
        
        
    };
}();
Roo.util.Format.defaults = {
    date : 'd/M/Y'
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */


 

/**
 * @class Roo.MasterTemplate
 * @extends Roo.Template
 * Provides a template that can have child templates. The syntax is:
<pre><code>
var t = new Roo.MasterTemplate(
	'&lt;select name="{name}"&gt;',
		'&lt;tpl name="options"&gt;&lt;option value="{value:trim}"&gt;{text:ellipsis(10)}&lt;/option&gt;&lt;/tpl&gt;',
	'&lt;/select&gt;'
);
t.add('options', {value: 'foo', text: 'bar'});
// or you can add multiple child elements in one shot
t.addAll('options', [
    {value: 'foo', text: 'bar'},
    {value: 'foo2', text: 'bar2'},
    {value: 'foo3', text: 'bar3'}
]);
// then append, applying the master template values
t.append('my-form', {name: 'my-select'});
</code></pre>
* A name attribute for the child template is not required if you have only one child
* template or you want to refer to them by index.
 */
Roo.MasterTemplate = function(){
    Roo.MasterTemplate.superclass.constructor.apply(this, arguments);
    this.originalHtml = this.html;
    var st = {};
    var m, re = this.subTemplateRe;
    re.lastIndex = 0;
    var subIndex = 0;
    while(m = re.exec(this.html)){
        var name = m[1], content = m[2];
        st[subIndex] = {
            name: name,
            index: subIndex,
            buffer: [],
            tpl : new Roo.Template(content)
        };
        if(name){
            st[name] = st[subIndex];
        }
        st[subIndex].tpl.compile();
        st[subIndex].tpl.call = this.call.createDelegate(this);
        subIndex++;
    }
    this.subCount = subIndex;
    this.subs = st;
};
Roo.extend(Roo.MasterTemplate, Roo.Template, {
    /**
    * The regular expression used to match sub templates
    * @type RegExp
    * @property
    */
    subTemplateRe : /<tpl(?:\sname="([\w-]+)")?>((?:.|\n)*?)<\/tpl>/gi,

    /**
     * Applies the passed values to a child template.
     * @param {String/Number} name (optional) The name or index of the child template
     * @param {Array/Object} values The values to be applied to the template
     * @return {MasterTemplate} this
     */
     add : function(name, values){
        if(arguments.length == 1){
            values = arguments[0];
            name = 0;
        }
        var s = this.subs[name];
        s.buffer[s.buffer.length] = s.tpl.apply(values);
        return this;
    },

    /**
     * Applies all the passed values to a child template.
     * @param {String/Number} name (optional) The name or index of the child template
     * @param {Array} values The values to be applied to the template, this should be an array of objects.
     * @param {Boolean} reset (optional) True to reset the template first
     * @return {MasterTemplate} this
     */
    fill : function(name, values, reset){
        var a = arguments;
        if(a.length == 1 || (a.length == 2 && typeof a[1] == "boolean")){
            values = a[0];
            name = 0;
            reset = a[1];
        }
        if(reset){
            this.reset();
        }
        for(var i = 0, len = values.length; i < len; i++){
            this.add(name, values[i]);
        }
        return this;
    },

    /**
     * Resets the template for reuse
     * @return {MasterTemplate} this
     */
     reset : function(){
        var s = this.subs;
        for(var i = 0; i < this.subCount; i++){
            s[i].buffer = [];
        }
        return this;
    },

    applyTemplate : function(values){
        var s = this.subs;
        var replaceIndex = -1;
        this.html = this.originalHtml.replace(this.subTemplateRe, function(m, name){
            return s[++replaceIndex].buffer.join("");
        });
        return Roo.MasterTemplate.superclass.applyTemplate.call(this, values);
    },

    apply : function(){
        return this.applyTemplate.apply(this, arguments);
    },

    compile : function(){return this;}
});

/**
 * Alias for fill().
 * @method
 */
Roo.MasterTemplate.prototype.addAll = Roo.MasterTemplate.prototype.fill;
 /**
 * Creates a template from the passed element's value (display:none textarea, preferred) or innerHTML. e.g.
 * var tpl = Roo.MasterTemplate.from('element-id');
 * @param {String/HTMLElement} el
 * @param {Object} config
 * @static
 */
Roo.MasterTemplate.from = function(el, config){
    el = Roo.getDom(el);
    return new Roo.MasterTemplate(el.value || el.innerHTML, config || '');
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

 
/**
 * @class Roo.util.CSS
 * Utility class for manipulating CSS rules
 * @static

 */
Roo.util.CSS = function(){
	var rules = null;
   	var doc = document;

    var camelRe = /(-[a-z])/gi;
    var camelFn = function(m, a){ return a.charAt(1).toUpperCase(); };

   return {
   /**
    * Very simple dynamic creation of stylesheets from a text blob of rules.  The text will wrapped in a style
    * tag and appended to the HEAD of the document.
    * @param {String|Object} cssText The text containing the css rules
    * @param {String} id An id to add to the stylesheet for later removal
    * @return {StyleSheet}
    */
    createStyleSheet : function(cssText, id){
        var ss;
        var head = doc.getElementsByTagName("head")[0];
        var nrules = doc.createElement("style");
        nrules.setAttribute("type", "text/css");
        if(id){
            nrules.setAttribute("id", id);
        }
        if (typeof(cssText) != 'string') {
            // support object maps..
            // not sure if this a good idea.. 
            // perhaps it should be merged with the general css handling
            // and handle js style props.
            var cssTextNew = [];
            for(var n in cssText) {
                var citems = [];
                for(var k in cssText[n]) {
                    citems.push( k + ' : ' +cssText[n][k] + ';' );
                }
                cssTextNew.push( n + ' { ' + citems.join(' ') + '} ');
                
            }
            cssText = cssTextNew.join("\n");
            
        }
       
       
       if(Roo.isIE){
           head.appendChild(nrules);
           ss = nrules.styleSheet;
           ss.cssText = cssText;
       }else{
           try{
                nrules.appendChild(doc.createTextNode(cssText));
           }catch(e){
               nrules.cssText = cssText; 
           }
           head.appendChild(nrules);
           ss = nrules.styleSheet ? nrules.styleSheet : (nrules.sheet || doc.styleSheets[doc.styleSheets.length-1]);
       }
       this.cacheStyleSheet(ss);
       return ss;
   },

   /**
    * Removes a style or link tag by id
    * @param {String} id The id of the tag
    */
   removeStyleSheet : function(id){
       var existing = doc.getElementById(id);
       if(existing){
           existing.parentNode.removeChild(existing);
       }
   },

   /**
    * Dynamically swaps an existing stylesheet reference for a new one
    * @param {String} id The id of an existing link tag to remove
    * @param {String} url The href of the new stylesheet to include
    */
   swapStyleSheet : function(id, url){
       this.removeStyleSheet(id);
       var ss = doc.createElement("link");
       ss.setAttribute("rel", "stylesheet");
       ss.setAttribute("type", "text/css");
       ss.setAttribute("id", id);
       ss.setAttribute("href", url);
       doc.getElementsByTagName("head")[0].appendChild(ss);
   },
   
   /**
    * Refresh the rule cache if you have dynamically added stylesheets
    * @return {Object} An object (hash) of rules indexed by selector
    */
   refreshCache : function(){
       return this.getRules(true);
   },

   // private
   cacheStyleSheet : function(stylesheet){
       if(!rules){
           rules = {};
       }
       try{// try catch for cross domain access issue
           var ssRules = stylesheet.cssRules || stylesheet.rules;
           for(var j = ssRules.length-1; j >= 0; --j){
               rules[ssRules[j].selectorText] = ssRules[j];
           }
       }catch(e){}
   },
   
   /**
    * Gets all css rules for the document
    * @param {Boolean} refreshCache true to refresh the internal cache
    * @return {Object} An object (hash) of rules indexed by selector
    */
   getRules : function(refreshCache){
   		if(rules == null || refreshCache){
   			rules = {};
   			var ds = doc.styleSheets;
   			for(var i =0, len = ds.length; i < len; i++){
   			    try{
    		        this.cacheStyleSheet(ds[i]);
    		    }catch(e){} 
	        }
   		}
   		return rules;
   	},
   	
   	/**
    * Gets an an individual CSS rule by selector(s)
    * @param {String/Array} selector The CSS selector or an array of selectors to try. The first selector that is found is returned.
    * @param {Boolean} refreshCache true to refresh the internal cache if you have recently updated any rules or added styles dynamically
    * @return {CSSRule} The CSS rule or null if one is not found
    */
   getRule : function(selector, refreshCache){
   		var rs = this.getRules(refreshCache);
   		if(!(selector instanceof Array)){
   		    return rs[selector];
   		}
   		for(var i = 0; i < selector.length; i++){
			if(rs[selector[i]]){
				return rs[selector[i]];
			}
		}
		return null;
   	},
   	
   	
   	/**
    * Updates a rule property
    * @param {String/Array} selector If it's an array it tries each selector until it finds one. Stops immediately once one is found.
    * @param {String} property The css property
    * @param {String} value The new value for the property
    * @return {Boolean} true If a rule was found and updated
    */
   updateRule : function(selector, property, value){
   		if(!(selector instanceof Array)){
   			var rule = this.getRule(selector);
   			if(rule){
   				rule.style[property.replace(camelRe, camelFn)] = value;
   				return true;
   			}
   		}else{
   			for(var i = 0; i < selector.length; i++){
   				if(this.updateRule(selector[i], property, value)){
   					return true;
   				}
   			}
   		}
   		return false;
   	}
   };	
}();/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

 

/**
 * @class Roo.util.ClickRepeater
 * @extends Roo.util.Observable
 * 
 * A wrapper class which can be applied to any element. Fires a "click" event while the
 * mouse is pressed. The interval between firings may be specified in the config but
 * defaults to 10 milliseconds.
 * 
 * Optionally, a CSS class may be applied to the element during the time it is pressed.
 * 
 * @cfg {String/HTMLElement/Element} el The element to act as a button.
 * @cfg {Number} delay The initial delay before the repeating event begins firing.
 * Similar to an autorepeat key delay.
 * @cfg {Number} interval The interval between firings of the "click" event. Default 10 ms.
 * @cfg {String} pressClass A CSS class name to be applied to the element while pressed.
 * @cfg {Boolean} accelerate True if autorepeating should start slowly and accelerate.
 *           "interval" and "delay" are ignored. "immediate" is honored.
 * @cfg {Boolean} preventDefault True to prevent the default click event
 * @cfg {Boolean} stopDefault True to stop the default click event
 * 
 * @history
 *     2007-02-02 jvs Original code contributed by Nige "Animal" White
 *     2007-02-02 jvs Renamed to ClickRepeater
 *   2007-02-03 jvs Modifications for FF Mac and Safari 
 *
 *  @constructor
 * @param {String/HTMLElement/Element} el The element to listen on
 * @param {Object} config
 **/
Roo.util.ClickRepeater = function(el, config)
{
    this.el = Roo.get(el);
    this.el.unselectable();

    Roo.apply(this, config);

    this.addEvents({
    /**
     * @event mousedown
     * Fires when the mouse button is depressed.
     * @param {Roo.util.ClickRepeater} this
     */
        "mousedown" : true,
    /**
     * @event click
     * Fires on a specified interval during the time the element is pressed.
     * @param {Roo.util.ClickRepeater} this
     */
        "click" : true,
    /**
     * @event mouseup
     * Fires when the mouse key is released.
     * @param {Roo.util.ClickRepeater} this
     */
        "mouseup" : true
    });

    this.el.on("mousedown", this.handleMouseDown, this);
    if(this.preventDefault || this.stopDefault){
        this.el.on("click", function(e){
            if(this.preventDefault){
                e.preventDefault();
            }
            if(this.stopDefault){
                e.stopEvent();
            }
        }, this);
    }

    // allow inline handler
    if(this.handler){
        this.on("click", this.handler,  this.scope || this);
    }

    Roo.util.ClickRepeater.superclass.constructor.call(this);
};

Roo.extend(Roo.util.ClickRepeater, Roo.util.Observable, {
    interval : 20,
    delay: 250,
    preventDefault : true,
    stopDefault : false,
    timer : 0,

    // private
    handleMouseDown : function(){
        clearTimeout(this.timer);
        this.el.blur();
        if(this.pressClass){
            this.el.addClass(this.pressClass);
        }
        this.mousedownTime = new Date();

        Roo.get(document).on("mouseup", this.handleMouseUp, this);
        this.el.on("mouseout", this.handleMouseOut, this);

        this.fireEvent("mousedown", this);
        this.fireEvent("click", this);
        
        this.timer = this.click.defer(this.delay || this.interval, this);
    },

    // private
    click : function(){
        this.fireEvent("click", this);
        this.timer = this.click.defer(this.getInterval(), this);
    },

    // private
    getInterval: function(){
        if(!this.accelerate){
            return this.interval;
        }
        var pressTime = this.mousedownTime.getElapsed();
        if(pressTime < 500){
            return 400;
        }else if(pressTime < 1700){
            return 320;
        }else if(pressTime < 2600){
            return 250;
        }else if(pressTime < 3500){
            return 180;
        }else if(pressTime < 4400){
            return 140;
        }else if(pressTime < 5300){
            return 80;
        }else if(pressTime < 6200){
            return 50;
        }else{
            return 10;
        }
    },

    // private
    handleMouseOut : function(){
        clearTimeout(this.timer);
        if(this.pressClass){
            this.el.removeClass(this.pressClass);
        }
        this.el.on("mouseover", this.handleMouseReturn, this);
    },

    // private
    handleMouseReturn : function(){
        this.el.un("mouseover", this.handleMouseReturn);
        if(this.pressClass){
            this.el.addClass(this.pressClass);
        }
        this.click();
    },

    // private
    handleMouseUp : function(){
        clearTimeout(this.timer);
        this.el.un("mouseover", this.handleMouseReturn);
        this.el.un("mouseout", this.handleMouseOut);
        Roo.get(document).un("mouseup", this.handleMouseUp);
        this.el.removeClass(this.pressClass);
        this.fireEvent("mouseup", this);
    }
});/**
 * @class Roo.util.Clipboard
 * @static
 * 
 * Clipboard UTILS
 * 
 **/
Roo.util.Clipboard = {
    /**
     * Writes a string to the clipboard - using the Clipboard API if https, otherwise using text area.
     * @param {String} text to copy to clipboard
     */
    write : function(text) {
        // navigator clipboard api needs a secure context (https)
        if (navigator.clipboard && window.isSecureContext) {
            // navigator clipboard api method'
            navigator.clipboard.writeText(text);
            return ;
        } 
        // text area method
        var ta = document.createElement("textarea");
        ta.value = text;
        // make the textarea out of viewport
        ta.style.position = "fixed";
        ta.style.left = "-999999px";
        ta.style.top = "-999999px";
        document.body.appendChild(ta);
        ta.focus();
        ta.select();
        document.execCommand('copy');
        (function() {
            ta.remove();
        }).defer(100);
        
    }
        
}
    /*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

 
/**
 * @class Roo.KeyNav
 * <p>Provides a convenient wrapper for normalized keyboard navigation.  KeyNav allows you to bind
 * navigation keys to function calls that will get called when the keys are pressed, providing an easy
 * way to implement custom navigation schemes for any UI component.</p>
 * <p>The following are all of the possible keys that can be implemented: enter, left, right, up, down, tab, esc,
 * pageUp, pageDown, del, home, end.  Usage:</p>
 <pre><code>
var nav = new Roo.KeyNav("my-element", {
    "left" : function(e){
        this.moveLeft(e.ctrlKey);
    },
    "right" : function(e){
        this.moveRight(e.ctrlKey);
    },
    "enter" : function(e){
        this.save();
    },
    scope : this
});
</code></pre>
 * @constructor
 * @param {String/HTMLElement/Roo.Element} el The element to bind to
 * @param {Object} config The config
 */
Roo.KeyNav = function(el, config){
    this.el = Roo.get(el);
    Roo.apply(this, config);
    if(!this.disabled){
        this.disabled = true;
        this.enable();
    }
};

Roo.KeyNav.prototype = {
    /**
     * @cfg {Boolean} disabled
     * True to disable this KeyNav instance (defaults to false)
     */
    disabled : false,
    /**
     * @cfg {String} defaultEventAction
     * The method to call on the {@link Roo.EventObject} after this KeyNav intercepts a key.  Valid values are
     * {@link Roo.EventObject#stopEvent}, {@link Roo.EventObject#preventDefault} and
     * {@link Roo.EventObject#stopPropagation} (defaults to 'stopEvent')
     */
    defaultEventAction: "stopEvent",
    /**
     * @cfg {Boolean} forceKeyDown
     * Handle the keydown event instead of keypress (defaults to false).  KeyNav automatically does this for IE since
     * IE does not propagate special keys on keypress, but setting this to true will force other browsers to also
     * handle keydown instead of keypress.
     */
    forceKeyDown : false,

    // private
    prepareEvent : function(e){
        var k = e.getKey();
        var h = this.keyToHandler[k];
        //if(h && this[h]){
        //    e.stopPropagation();
        //}
        if(Roo.isSafari && h && k >= 37 && k <= 40){
            e.stopEvent();
        }
    },

    // private
    relay : function(e){
        var k = e.getKey();
        var h = this.keyToHandler[k];
        if(h && this[h]){
            if(this.doRelay(e, this[h], h) !== true){
                e[this.defaultEventAction]();
            }
        }
    },

    // private
    doRelay : function(e, h, hname){
        return h.call(this.scope || this, e);
    },

    // possible handlers
    enter : false,
    left : false,
    right : false,
    up : false,
    down : false,
    tab : false,
    esc : false,
    pageUp : false,
    pageDown : false,
    del : false,
    home : false,
    end : false,

    // quick lookup hash
    keyToHandler : {
        37 : "left",
        39 : "right",
        38 : "up",
        40 : "down",
        33 : "pageUp",
        34 : "pageDown",
        46 : "del",
        36 : "home",
        35 : "end",
        13 : "enter",
        27 : "esc",
        9  : "tab"
    },

	/**
	 * Enable this KeyNav
	 */
	enable: function(){
		if(this.disabled){
            // ie won't do special keys on keypress, no one else will repeat keys with keydown
            // the EventObject will normalize Safari automatically
            if(this.forceKeyDown || Roo.isIE || Roo.isAir){
                this.el.on("keydown", this.relay,  this);
            }else{
                this.el.on("keydown", this.prepareEvent,  this);
                this.el.on("keypress", this.relay,  this);
            }
		    this.disabled = false;
		}
	},

	/**
	 * Disable this KeyNav
	 */
	disable: function(){
		if(!this.disabled){
		    if(this.forceKeyDown || Roo.isIE || Roo.isAir){
                this.el.un("keydown", this.relay);
            }else{
                this.el.un("keydown", this.prepareEvent);
                this.el.un("keypress", this.relay);
            }
		    this.disabled = true;
		}
	}
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

 
/**
 * @class Roo.KeyMap
 * Handles mapping keys to actions for an element. One key map can be used for multiple actions.
 * The constructor accepts the same config object as defined by {@link #addBinding}.
 * If you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key
 * combination it will call the function with this signature (if the match is a multi-key
 * combination the callback will still be called only once): (String key, Roo.EventObject e)
 * A KeyMap can also handle a string representation of keys.<br />
 * Usage:
 <pre><code>
// map one key by key code
var map = new Roo.KeyMap("my-element", {
    key: 13, // or Roo.EventObject.ENTER
    fn: myHandler,
    scope: myObject
});

// map multiple keys to one action by string
var map = new Roo.KeyMap("my-element", {
    key: "a\r\n\t",
    fn: myHandler,
    scope: myObject
});

// map multiple keys to multiple actions by strings and array of codes
var map = new Roo.KeyMap("my-element", [
    {
        key: [10,13],
        fn: function(){ alert("Return was pressed"); }
    }, {
        key: "abc",
        fn: function(){ alert('a, b or c was pressed'); }
    }, {
        key: "\t",
        ctrl:true,
        shift:true,
        fn: function(){ alert('Control + shift + tab was pressed.'); }
    }
]);
</code></pre>
 * <b>Note: A KeyMap starts enabled</b>
 * @constructor
 * @param {String/HTMLElement/Roo.Element} el The element to bind to
 * @param {Object} config The config (see {@link #addBinding})
 * @param {String} eventName (optional) The event to bind to (defaults to "keydown")
 */
Roo.KeyMap = function(el, config, eventName){
    this.el  = Roo.get(el);
    this.eventName = eventName || "keydown";
    this.bindings = [];
    if(config){
        this.addBinding(config);
    }
    this.enable();
};

Roo.KeyMap.prototype = {
    /**
     * True to stop the event from bubbling and prevent the default browser action if the
     * key was handled by the KeyMap (defaults to false)
     * @type Boolean
     */
    stopEvent : false,

    /**
     * Add a new binding to this KeyMap. The following config object properties are supported:
     * <pre>
Property    Type             Description
----------  ---------------  ----------------------------------------------------------------------
key         String/Array     A single keycode or an array of keycodes to handle
shift       Boolean          True to handle key only when shift is pressed (defaults to false)
ctrl        Boolean          True to handle key only when ctrl is pressed (defaults to false)
alt         Boolean          True to handle key only when alt is pressed (defaults to false)
fn          Function         The function to call when KeyMap finds the expected key combination
scope       Object           The scope of the callback function
</pre>
     *
     * Usage:
     * <pre><code>
// Create a KeyMap
var map = new Roo.KeyMap(document, {
    key: Roo.EventObject.ENTER,
    fn: handleKey,
    scope: this
});

//Add a new binding to the existing KeyMap later
map.addBinding({
    key: 'abc',
    shift: true,
    fn: handleKey,
    scope: this
});
</code></pre>
     * @param {Object/Array} config A single KeyMap config or an array of configs
     */
	addBinding : function(config){
        if(config instanceof Array){
            for(var i = 0, len = config.length; i < len; i++){
                this.addBinding(config[i]);
            }
            return;
        }
        var keyCode = config.key,
            shift = config.shift, 
            ctrl = config.ctrl, 
            alt = config.alt,
            fn = config.fn,
            scope = config.scope;
        if(typeof keyCode == "string"){
            var ks = [];
            var keyString = keyCode.toUpperCase();
            for(var j = 0, len = keyString.length; j < len; j++){
                ks.push(keyString.charCodeAt(j));
            }
            keyCode = ks;
        }
        var keyArray = keyCode instanceof Array;
        var handler = function(e){
            if((!shift || e.shiftKey) && (!ctrl || e.ctrlKey) &&  (!alt || e.altKey)){
                var k = e.getKey();
                if(keyArray){
                    for(var i = 0, len = keyCode.length; i < len; i++){
                        if(keyCode[i] == k){
                          if(this.stopEvent){
                              e.stopEvent();
                          }
                          fn.call(scope || window, k, e);
                          return;
                        }
                    }
                }else{
                    if(k == keyCode){
                        if(this.stopEvent){
                           e.stopEvent();
                        }
                        fn.call(scope || window, k, e);
                    }
                }
            }
        };
        this.bindings.push(handler);  
	},

    /**
     * Shorthand for adding a single key listener
     * @param {Number/Array/Object} key Either the numeric key code, array of key codes or an object with the
     * following options:
     * {key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}
     * @param {Function} fn The function to call
     * @param {Object} scope (optional) The scope of the function
     */
    on : function(key, fn, scope){
        var keyCode, shift, ctrl, alt;
        if(typeof key == "object" && !(key instanceof Array)){
            keyCode = key.key;
            shift = key.shift;
            ctrl = key.ctrl;
            alt = key.alt;
        }else{
            keyCode = key;
        }
        this.addBinding({
            key: keyCode,
            shift: shift,
            ctrl: ctrl,
            alt: alt,
            fn: fn,
            scope: scope
        })
    },

    // private
    handleKeyDown : function(e){
	    if(this.enabled){ //just in case
    	    var b = this.bindings;
    	    for(var i = 0, len = b.length; i < len; i++){
    	        b[i].call(this, e);
    	    }
	    }
	},
	
	/**
	 * Returns true if this KeyMap is enabled
	 * @return {Boolean} 
	 */
	isEnabled : function(){
	    return this.enabled;  
	},
	
	/**
	 * Enables this KeyMap
	 */
	enable: function(){
		if(!this.enabled){
		    this.el.on(this.eventName, this.handleKeyDown, this);
		    this.enabled = true;
		}
	},

	/**
	 * Disable this KeyMap
	 */
	disable: function(){
		if(this.enabled){
		    this.el.removeListener(this.eventName, this.handleKeyDown, this);
		    this.enabled = false;
		}
	}
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

 
/**
 * @class Roo.util.TextMetrics
 * Provides precise pixel measurements for blocks of text so that you can determine exactly how high and
 * wide, in pixels, a given block of text will be.
 * @static
 */
Roo.util.TextMetrics = function(){
    var shared;
    return {
        /**
         * Measures the size of the specified text
         * @param {String/HTMLElement} el The element, dom node or id from which to copy existing CSS styles
         * that can affect the size of the rendered text
         * @param {String} text The text to measure
         * @param {Number} fixedWidth (optional) If the text will be multiline, you have to set a fixed width
         * in order to accurately measure the text height
         * @return {Object} An object containing the text's size {width: (width), height: (height)}
         */
        measure : function(el, text, fixedWidth){
            if(!shared){
                shared = Roo.util.TextMetrics.Instance(el, fixedWidth);
            }
            shared.bind(el);
            shared.setFixedWidth(fixedWidth || 'auto');
            return shared.getSize(text);
        },

        /**
         * Return a unique TextMetrics instance that can be bound directly to an element and reused.  This reduces
         * the overhead of multiple calls to initialize the style properties on each measurement.
         * @param {String/HTMLElement} el The element, dom node or id that the instance will be bound to
         * @param {Number} fixedWidth (optional) If the text will be multiline, you have to set a fixed width
         * in order to accurately measure the text height
         * @return {Roo.util.TextMetrics.Instance} instance The new instance
         */
        createInstance : function(el, fixedWidth){
            return Roo.util.TextMetrics.Instance(el, fixedWidth);
        }
    };
}();

/**
 * @class Roo.util.TextMetrics.Instance
 * Instance of  TextMetrics Calcuation
 * @constructor
 * Create a new TextMetrics Instance
 * @param {Object} bindto
 * @param {Boolean} fixedWidth
 */

Roo.util.TextMetrics.Instance = function(bindTo, fixedWidth)
{
    var ml = new Roo.Element(document.createElement('div'));
    document.body.appendChild(ml.dom);
    ml.position('absolute');
    ml.setLeftTop(-1000, -1000);
    ml.hide();

    if(fixedWidth){
        ml.setWidth(fixedWidth);
    }
     
    var instance = {
        /**
         * Returns the size of the specified text based on the internal element's style and width properties
         * @param {String} text The text to measure
         * @return {Object} An object containing the text's size {width: (width), height: (height)}
         */
        getSize : function(text){
            ml.update(text);
            var s = ml.getSize();
            ml.update('');
            return s;
        },

        /**
         * Binds this TextMetrics instance to an element from which to copy existing CSS styles
         * that can affect the size of the rendered text
         * @param {String/HTMLElement} el The element, dom node or id
         */
        bind : function(el){
            ml.setStyle(
                Roo.fly(el).getStyles('font-size','font-style', 'font-weight', 'font-family','line-height')
            );
        },

        /**
         * Sets a fixed width on the internal measurement element.  If the text will be multiline, you have
         * to set a fixed width in order to accurately measure the text height.
         * @param {Number} width The width to set on the element
         */
        setFixedWidth : function(width){
            ml.setWidth(width);
        },

        /**
         * Returns the measured width of the specified text
         * @param {String} text The text to measure
         * @return {Number} width The width in pixels
         */
        getWidth : function(text){
            ml.dom.style.width = 'auto';
            return this.getSize(text).width;
        },

        /**
         * Returns the measured height of the specified text.  For multiline text, be sure to call
         * {@link #setFixedWidth} if necessary.
         * @param {String} text The text to measure
         * @return {Number} height The height in pixels
         */
        getHeight : function(text){
            return this.getSize(text).height;
        }
    };

    instance.bind(bindTo);

    return instance;
};

// backwards compat
Roo.Element.measureText = Roo.util.TextMetrics.measure;/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.state.Provider
 * Abstract base class for state provider implementations. This class provides methods
 * for encoding and decoding <b>typed</b> variables including dates and defines the 
 * Provider interface.
 */
Roo.state.Provider = function(){
    /**
     * @event statechange
     * Fires when a state change occurs.
     * @param {Provider} this This state provider
     * @param {String} key The state key which was changed
     * @param {String} value The encoded value for the state
     */
    this.addEvents({
        "statechange": true
    });
    this.state = {};
    Roo.state.Provider.superclass.constructor.call(this);
};
Roo.extend(Roo.state.Provider, Roo.util.Observable, {
    /**
     * Returns the current value for a key
     * @param {String} name The key name
     * @param {Mixed} defaultValue A default value to return if the key's value is not found
     * @return {Mixed} The state data
     */
    get : function(name, defaultValue){
        return typeof this.state[name] == "undefined" ?
            defaultValue : this.state[name];
    },
    
    /**
     * Clears a value from the state
     * @param {String} name The key name
     */
    clear : function(name){
        delete this.state[name];
        this.fireEvent("statechange", this, name, null);
    },
    
    /**
     * Sets the value for a key
     * @param {String} name The key name
     * @param {Mixed} value The value to set
     */
    set : function(name, value){
        this.state[name] = value;
        this.fireEvent("statechange", this, name, value);
    },
    
    /**
     * Decodes a string previously encoded with {@link #encodeValue}.
     * @param {String} value The value to decode
     * @return {Mixed} The decoded value
     */
    decodeValue : function(cookie){
        var re = /^(a|n|d|b|s|o)\:(.*)$/;
        var matches = re.exec(unescape(cookie));
        if(!matches || !matches[1]) {
            return; // non state cookie
        }
        var type = matches[1];
        var v = matches[2];
        switch(type){
            case "n":
                return parseFloat(v);
            case "d":
                return new Date(Date.parse(v));
            case "b":
                return (v == "1");
            case "a":
                var all = [];
                var values = v.split("^");
                for(var i = 0, len = values.length; i < len; i++){
                    all.push(this.decodeValue(values[i]));
                }
                return all;
           case "o":
                var all = {};
                var values = v.split("^");
                for(var i = 0, len = values.length; i < len; i++){
                    var kv = values[i].split("=");
                    all[kv[0]] = this.decodeValue(kv[1]);
                }
                return all;
           default:
                return v;
        }
    },
    
    /**
     * Encodes a value including type information.  Decode with {@link #decodeValue}.
     * @param {Mixed} value The value to encode
     * @return {String} The encoded value
     */
    encodeValue : function(v){
        var enc;
        if(typeof v == "number"){
            enc = "n:" + v;
        }else if(typeof v == "boolean"){
            enc = "b:" + (v ? "1" : "0");
        }else if(v instanceof Date){
            enc = "d:" + v.toGMTString();
        }else if(v instanceof Array){
            var flat = "";
            for(var i = 0, len = v.length; i < len; i++){
                flat += this.encodeValue(v[i]);
                if(i != len-1) {
                    flat += "^";
                }
            }
            enc = "a:" + flat;
        }else if(typeof v == "object"){
            var flat = "";
            for(var key in v){
                if(typeof v[key] != "function"){
                    flat += key + "=" + this.encodeValue(v[key]) + "^";
                }
            }
            enc = "o:" + flat.substring(0, flat.length-1);
        }else{
            enc = "s:" + v;
        }
        return escape(enc);        
    }
});

/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.state.Manager
 * This is the global state manager. By default all components that are "state aware" check this class
 * for state information if you don't pass them a custom state provider. In order for this class
 * to be useful, it must be initialized with a provider when your application initializes.
 <pre><code>
// in your initialization function
init : function(){
   Roo.state.Manager.setProvider(new Roo.state.CookieProvider());
   ...
   // supposed you have a {@link Roo.layout.Border}
   var layout = new Roo.layout.Border(...);
   layout.restoreState();
   // or a {Roo.BasicDialog}
   var dialog = new Roo.BasicDialog(...);
   dialog.restoreState();
 </code></pre>
 * @static
 */
Roo.state.Manager = function(){
    var provider = new Roo.state.Provider();
    
    return {
        /**
         * Configures the default state provider for your application
         * @param {Provider} stateProvider The state provider to set
         */
        setProvider : function(stateProvider){
            provider = stateProvider;
        },
        
        /**
         * Returns the current value for a key
         * @param {String} name The key name
         * @param {Mixed} defaultValue The default value to return if the key lookup does not match
         * @return {Mixed} The state data
         */
        get : function(key, defaultValue){
            return provider.get(key, defaultValue);
        },
        
        /**
         * Sets the value for a key
         * @param {String} name The key name
         * @param {Mixed} value The state data
         */
         set : function(key, value){
            provider.set(key, value);
        },
        
        /**
         * Clears a value from the state
         * @param {String} name The key name
         */
        clear : function(key){
            provider.clear(key);
        },
        
        /**
         * Gets the currently configured state provider
         * @return {Provider} The state provider
         */
        getProvider : function(){
            return provider;
        }
    };
}();
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.state.CookieProvider
 * @extends Roo.state.Provider
 * The default Provider implementation which saves state via cookies.
 * <br />Usage:
 <pre><code>
   var cp = new Roo.state.CookieProvider({
       path: "/cgi-bin/",
       expires: new Date(new Date().getTime()+(1000*60*60*24*30)); //30 days
       domain: "roojs.com"
   })
   Roo.state.Manager.setProvider(cp);
 </code></pre>
 * @cfg {String} path The path for which the cookie is active (defaults to root '/' which makes it active for all pages in the site)
 * @cfg {Date} expires The cookie expiration date (defaults to 7 days from now)
 * @cfg {String} domain The domain to save the cookie for.  Note that you cannot specify a different domain than
 * your page is on, but you can specify a sub-domain, or simply the domain itself like 'roojs.com' to include
 * all sub-domains if you need to access cookies across different sub-domains (defaults to null which uses the same
 * domain the page is running on including the 'www' like 'www.roojs.com')
 * @cfg {Boolean} secure True if the site is using SSL (defaults to false)
 * @constructor
 * Create a new CookieProvider
 * @param {Object} config The configuration object
 */
Roo.state.CookieProvider = function(config){
    Roo.state.CookieProvider.superclass.constructor.call(this);
    this.path = "/";
    this.expires = new Date(new Date().getTime()+(1000*60*60*24*7)); //7 days
    this.domain = null;
    this.secure = false;
    Roo.apply(this, config);
    this.state = this.readCookies();
};

Roo.extend(Roo.state.CookieProvider, Roo.state.Provider, {
    // private
    set : function(name, value){
        if(typeof value == "undefined" || value === null){
            this.clear(name);
            return;
        }
        this.setCookie(name, value);
        Roo.state.CookieProvider.superclass.set.call(this, name, value);
    },

    // private
    clear : function(name){
        this.clearCookie(name);
        Roo.state.CookieProvider.superclass.clear.call(this, name);
    },

    // private
    readCookies : function(){
        var cookies = {};
        var c = document.cookie + ";";
        var re = /\s?(.*?)=(.*?);/g;
    	var matches;
    	while((matches = re.exec(c)) != null){
            var name = matches[1];
            var value = matches[2];
            if(name && name.substring(0,3) == "ys-"){
                cookies[name.substr(3)] = this.decodeValue(value);
            }
        }
        return cookies;
    },

    // private
    setCookie : function(name, value){
        document.cookie = "ys-"+ name + "=" + this.encodeValue(value) +
           ((this.expires == null) ? "" : ("; expires=" + this.expires.toGMTString())) +
           ((this.path == null) ? "" : ("; path=" + this.path)) +
           ((this.domain == null) ? "" : ("; domain=" + this.domain)) +
           ((this.secure == true) ? "; secure" : "");
    },

    // private
    clearCookie : function(name){
        document.cookie = "ys-" + name + "=null; expires=Thu, 01-Jan-70 00:00:01 GMT" +
           ((this.path == null) ? "" : ("; path=" + this.path)) +
           ((this.domain == null) ? "" : ("; domain=" + this.domain)) +
           ((this.secure == true) ? "; secure" : "");
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.ComponentMgr
 * Provides a common registry of all components on a page so that they can be easily accessed by component id (see {@link Roo.getCmp}).
 * @static
 */
Roo.ComponentMgr = function(){
    var all = new Roo.util.MixedCollection();

    return {
        /**
         * Registers a component.
         * @param {Roo.Component} c The component
         */
        register : function(c){
            all.add(c);
        },

        /**
         * Unregisters a component.
         * @param {Roo.Component} c The component
         */
        unregister : function(c){
            all.remove(c);
        },

        /**
         * Returns a component by id
         * @param {String} id The component id
         */
        get : function(id){
            return all.get(id);
        },

        /**
         * Registers a function that will be called when a specified component is added to ComponentMgr
         * @param {String} id The component id
         * @param {Funtction} fn The callback function
         * @param {Object} scope The scope of the callback
         */
        onAvailable : function(id, fn, scope){
            all.on("add", function(index, o){
                if(o.id == id){
                    fn.call(scope || o, o);
                    all.un("add", fn, scope);
                }
            });
        }
    };
}();/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.Component
 * @extends Roo.util.Observable
 * Base class for all major Roo components.  All subclasses of Component can automatically participate in the standard
 * Roo component lifecycle of creation, rendering and destruction.  They also have automatic support for basic hide/show
 * and enable/disable behavior.  Component allows any subclass to be lazy-rendered into any {@link Roo.Container} and
 * to be automatically registered with the {@link Roo.ComponentMgr} so that it can be referenced at any time via {@link Roo.getCmp}.
 * All visual components (widgets) that require rendering into a layout should subclass Component.
 * @constructor
 * @param {Roo.Element/String/Object} config The configuration options.  If an element is passed, it is set as the internal
 * element and its id used as the component id.  If a string is passed, it is assumed to be the id of an existing element
 * and is used as the component id.  Otherwise, it is assumed to be a standard config object and is applied to the component.
 */
Roo.Component = function(config){
    config = config || {};
    if(config.tagName || config.dom || typeof config == "string"){ // element object
        config = {el: config, id: config.id || config};
    }
    this.initialConfig = config;

    Roo.apply(this, config);
    this.addEvents({
        /**
         * @event disable
         * Fires after the component is disabled.
	     * @param {Roo.Component} this
	     */
        disable : true,
        /**
         * @event enable
         * Fires after the component is enabled.
	     * @param {Roo.Component} this
	     */
        enable : true,
        /**
         * @event beforeshow
         * Fires before the component is shown.  Return false to stop the show.
	     * @param {Roo.Component} this
	     */
        beforeshow : true,
        /**
         * @event show
         * Fires after the component is shown.
	     * @param {Roo.Component} this
	     */
        show : true,
        /**
         * @event beforehide
         * Fires before the component is hidden. Return false to stop the hide.
	     * @param {Roo.Component} this
	     */
        beforehide : true,
        /**
         * @event hide
         * Fires after the component is hidden.
	     * @param {Roo.Component} this
	     */
        hide : true,
        /**
         * @event beforerender
         * Fires before the component is rendered. Return false to stop the render.
	     * @param {Roo.Component} this
	     */
        beforerender : true,
        /**
         * @event render
         * Fires after the component is rendered.
	     * @param {Roo.Component} this
	     */
        render : true,
        /**
         * @event beforedestroy
         * Fires before the component is destroyed. Return false to stop the destroy.
	     * @param {Roo.Component} this
	     */
        beforedestroy : true,
        /**
         * @event destroy
         * Fires after the component is destroyed.
	     * @param {Roo.Component} this
	     */
        destroy : true
    });
    if(!this.id){
        this.id = "roo-comp-" + (++Roo.Component.AUTO_ID);
    }
    Roo.ComponentMgr.register(this);
    Roo.Component.superclass.constructor.call(this);
    this.initComponent();
    if(this.renderTo){ // not supported by all components yet. use at your own risk!
        this.render(this.renderTo);
        delete this.renderTo;
    }
};

/** @private */
Roo.Component.AUTO_ID = 1000;

Roo.extend(Roo.Component, Roo.util.Observable, {
    /**
     * @scope Roo.Component.prototype
     * @type {Boolean}
     * true if this component is hidden. Read-only.
     */
    hidden : false,
    /**
     * @type {Boolean}
     * true if this component is disabled. Read-only.
     */
    disabled : false,
    /**
     * @type {Boolean}
     * true if this component has been rendered. Read-only.
     */
    rendered : false,
    
    /** @cfg {String} disableClass
     * CSS class added to the component when it is disabled (defaults to "x-item-disabled").
     */
    disabledClass : "x-item-disabled",
	/** @cfg {Boolean} allowDomMove
	 * Whether the component can move the Dom node when rendering (defaults to true).
	 */
    allowDomMove : true,
    /** @cfg {String} hideMode (display|visibility)
     * How this component should hidden. Supported values are
     * "visibility" (css visibility), "offsets" (negative offset position) and
     * "display" (css display) - defaults to "display".
     */
    hideMode: 'display',

    /** @private */
    ctype : "Roo.Component",

    /**
     * @cfg {String} actionMode 
     * which property holds the element that used for  hide() / show() / disable() / enable()
     * default is 'el' for forms you probably want to set this to fieldEl 
     */
    actionMode : "el",

	 /**
     * @cfg {String} style
     * css styles to add to component
     * eg. text-align:right;
     */
    style : false,
	
    /** @private */
    getActionEl : function(){
        return this[this.actionMode];
    },

    initComponent : Roo.emptyFn,
    /**
     * If this is a lazy rendering component, render it to its container element.
     * @param {String/HTMLElement/Element} container (optional) The element this component should be rendered into. If it is being applied to existing markup, this should be left off.
     */
    render : function(container, position){
        
        if(this.rendered){
            return this;
        }
        
        if(this.fireEvent("beforerender", this) === false){
            return false;
        }
        
        if(!container && this.el){
            this.el = Roo.get(this.el);
            container = this.el.dom.parentNode;
            this.allowDomMove = false;
        }
        this.container = Roo.get(container);
        this.rendered = true;
        if(position !== undefined){
            if(typeof position == 'number'){
                position = this.container.dom.childNodes[position];
            }else{
                position = Roo.getDom(position);
            }
        }
        this.onRender(this.container, position || null);
        if(this.cls){
            this.el.addClass(this.cls);
            delete this.cls;
        }
        if(this.style){
            this.el.applyStyles(this.style);
            delete this.style;
        }
        this.fireEvent("render", this);
        this.afterRender(this.container);
        if(this.hidden){
            this.hide();
        }
        if(this.disabled){
            this.disable();
        }

        return this;
        
    },

    /** @private */
    // default function is not really useful
    onRender : function(ct, position){
        if(this.el){
            this.el = Roo.get(this.el);
            if(this.allowDomMove !== false){
                ct.dom.insertBefore(this.el.dom, position);
            }
        }
    },

    /** @private */
    getAutoCreate : function(){
        var cfg = typeof this.autoCreate == "object" ?
                      this.autoCreate : Roo.apply({}, this.defaultAutoCreate);
        if(this.id && !cfg.id){
            cfg.id = this.id;
        }
        return cfg;
    },

    /** @private */
    afterRender : Roo.emptyFn,

    /**
     * Destroys this component by purging any event listeners, removing the component's element from the DOM,
     * removing the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.
     */
    destroy : function(){
        if(this.fireEvent("beforedestroy", this) !== false){
            this.purgeListeners();
            this.beforeDestroy();
            if(this.rendered){
                this.el.removeAllListeners();
                this.el.remove();
                if(this.actionMode == "container"){
                    this.container.remove();
                }
            }
            this.onDestroy();
            Roo.ComponentMgr.unregister(this);
            this.fireEvent("destroy", this);
        }
    },

	/** @private */
    beforeDestroy : function(){

    },

	/** @private */
	onDestroy : function(){

    },

    /**
     * Returns the underlying {@link Roo.Element}.
     * @return {Roo.Element} The element
     */
    getEl : function(){
        return this.el;
    },

    /**
     * Returns the id of this component.
     * @return {String}
     */
    getId : function(){
        return this.id;
    },

    /**
     * Try to focus this component.
     * @param {Boolean} selectText True to also select the text in this component (if applicable)
     * @return {Roo.Component} this
     */
    focus : function(selectText){
        if(this.rendered){
            this.el.focus();
            if(selectText === true){
                this.el.dom.select();
            }
        }
        return this;
    },

    /** @private */
    blur : function(){
        if(this.rendered){
            this.el.blur();
        }
        return this;
    },

    /**
     * Disable this component.
     * @return {Roo.Component} this
     */
    disable : function(){
        if(this.rendered){
            this.onDisable();
        }
        this.disabled = true;
        this.fireEvent("disable", this);
        return this;
    },

	// private
    onDisable : function(){
        this.getActionEl().addClass(this.disabledClass);
        this.el.dom.disabled = true;
    },

    /**
     * Enable this component.
     * @return {Roo.Component} this
     */
    enable : function(){
        if(this.rendered){
            this.onEnable();
        }
        this.disabled = false;
        this.fireEvent("enable", this);
        return this;
    },

	// private
    onEnable : function(){
        this.getActionEl().removeClass(this.disabledClass);
        this.el.dom.disabled = false;
    },

    /**
     * Convenience function for setting disabled/enabled by boolean.
     * @param {Boolean} disabled
     */
    setDisabled : function(disabled){
        this[disabled ? "disable" : "enable"]();
    },

    /**
     * Show this component.
     * @return {Roo.Component} this
     */
    show: function(){
        if(this.fireEvent("beforeshow", this) !== false){
            this.hidden = false;
            if(this.rendered){
                this.onShow();
            }
            this.fireEvent("show", this);
        }
        return this;
    },

    // private
    onShow : function(){
        var ae = this.getActionEl();
        if(this.hideMode == 'visibility'){
            ae.dom.style.visibility = "visible";
        }else if(this.hideMode == 'offsets'){
            ae.removeClass('x-hidden');
        }else{
            ae.dom.style.display = "";
        }
    },

    /**
     * Hide this component.
     * @return {Roo.Component} this
     */
    hide: function(){
        if(this.fireEvent("beforehide", this) !== false){
            this.hidden = true;
            if(this.rendered){
                this.onHide();
            }
            this.fireEvent("hide", this);
        }
        return this;
    },

    // private
    onHide : function(){
        var ae = this.getActionEl();
        if(this.hideMode == 'visibility'){
            ae.dom.style.visibility = "hidden";
        }else if(this.hideMode == 'offsets'){
            ae.addClass('x-hidden');
        }else{
            ae.dom.style.display = "none";
        }
    },

    /**
     * Convenience function to hide or show this component by boolean.
     * @param {Boolean} visible True to show, false to hide
     * @return {Roo.Component} this
     */
    setVisible: function(visible){
        if(visible) {
            this.show();
        }else{
            this.hide();
        }
        return this;
    },

    /**
     * Returns true if this component is visible.
     */
    isVisible : function(){
        return this.getActionEl().isVisible();
    },

    cloneConfig : function(overrides){
        overrides = overrides || {};
        var id = overrides.id || Roo.id();
        var cfg = Roo.applyIf(overrides, this.initialConfig);
        cfg.id = id; // prevent dup id
        return new this.constructor(cfg);
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.BoxComponent
 * @extends Roo.Component
 * Base class for any visual {@link Roo.Component} that uses a box container.  BoxComponent provides automatic box
 * model adjustments for sizing and positioning and will work correctly withnin the Component rendering model.  All
 * container classes should subclass BoxComponent so that they will work consistently when nested within other Roo
 * layout containers.
 * @constructor
 * @param {Roo.Element/String/Object} config The configuration options.
 */
Roo.BoxComponent = function(config){
    Roo.Component.call(this, config);
    this.addEvents({
        /**
         * @event resize
         * Fires after the component is resized.
	     * @param {Roo.Component} this
	     * @param {Number} adjWidth The box-adjusted width that was set
	     * @param {Number} adjHeight The box-adjusted height that was set
	     * @param {Number} rawWidth The width that was originally specified
	     * @param {Number} rawHeight The height that was originally specified
	     */
        resize : true,
        /**
         * @event move
         * Fires after the component is moved.
	     * @param {Roo.Component} this
	     * @param {Number} x The new x position
	     * @param {Number} y The new y position
	     */
        move : true
    });
};

Roo.extend(Roo.BoxComponent, Roo.Component, {
    // private, set in afterRender to signify that the component has been rendered
    boxReady : false,
    // private, used to defer height settings to subclasses
    deferHeight: false,
    /** @cfg {Number} width
     * width (optional) size of component
     */
     /** @cfg {Number} height
     * height (optional) size of component
     */
     
    /**
     * Sets the width and height of the component.  This method fires the resize event.  This method can accept
     * either width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.
     * @param {Number/Object} width The new width to set, or a size object in the format {width, height}
     * @param {Number} height The new height to set (not required if a size object is passed as the first arg)
     * @return {Roo.BoxComponent} this
     */
    setSize : function(w, h){
        // support for standard size objects
        if(typeof w == 'object'){
            h = w.height;
            w = w.width;
        }
        // not rendered
        if(!this.boxReady){
            this.width = w;
            this.height = h;
            return this;
        }

        // prevent recalcs when not needed
        if(this.lastSize && this.lastSize.width == w && this.lastSize.height == h){
            return this;
        }
        this.lastSize = {width: w, height: h};

        var adj = this.adjustSize(w, h);
        var aw = adj.width, ah = adj.height;
        if(aw !== undefined || ah !== undefined){ // this code is nasty but performs better with floaters
            var rz = this.getResizeEl();
            if(!this.deferHeight && aw !== undefined && ah !== undefined){
                rz.setSize(aw, ah);
            }else if(!this.deferHeight && ah !== undefined){
                rz.setHeight(ah);
            }else if(aw !== undefined){
                rz.setWidth(aw);
            }
            this.onResize(aw, ah, w, h);
            this.fireEvent('resize', this, aw, ah, w, h);
        }
        return this;
    },

    /**
     * Gets the current size of the component's underlying element.
     * @return {Object} An object containing the element's size {width: (element width), height: (element height)}
     */
    getSize : function(){
        return this.el.getSize();
    },

    /**
     * Gets the current XY position of the component's underlying element.
     * @param {Boolean} local (optional) If true the element's left and top are returned instead of page XY (defaults to false)
     * @return {Array} The XY position of the element (e.g., [100, 200])
     */
    getPosition : function(local){
        if(local === true){
            return [this.el.getLeft(true), this.el.getTop(true)];
        }
        return this.xy || this.el.getXY();
    },

    /**
     * Gets the current box measurements of the component's underlying element.
     * @param {Boolean} local (optional) If true the element's left and top are returned instead of page XY (defaults to false)
     * @returns {Object} box An object in the format {x, y, width, height}
     */
    getBox : function(local){
        var s = this.el.getSize();
        if(local){
            s.x = this.el.getLeft(true);
            s.y = this.el.getTop(true);
        }else{
            var xy = this.xy || this.el.getXY();
            s.x = xy[0];
            s.y = xy[1];
        }
        return s;
    },

    /**
     * Sets the current box measurements of the component's underlying element.
     * @param {Object} box An object in the format {x, y, width, height}
     * @returns {Roo.BoxComponent} this
     */
    updateBox : function(box){
        this.setSize(box.width, box.height);
        this.setPagePosition(box.x, box.y);
        return this;
    },

    // protected
    getResizeEl : function(){
        return this.resizeEl || this.el;
    },

    // protected
    getPositionEl : function(){
        return this.positionEl || this.el;
    },

    /**
     * Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.
     * This method fires the move event.
     * @param {Number} left The new left
     * @param {Number} top The new top
     * @returns {Roo.BoxComponent} this
     */
    setPosition : function(x, y){
        this.x = x;
        this.y = y;
        if(!this.boxReady){
            return this;
        }
        var adj = this.adjustPosition(x, y);
        var ax = adj.x, ay = adj.y;

        var el = this.getPositionEl();
        if(ax !== undefined || ay !== undefined){
            if(ax !== undefined && ay !== undefined){
                el.setLeftTop(ax, ay);
            }else if(ax !== undefined){
                el.setLeft(ax);
            }else if(ay !== undefined){
                el.setTop(ay);
            }
            this.onPosition(ax, ay);
            this.fireEvent('move', this, ax, ay);
        }
        return this;
    },

    /**
     * Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.
     * This method fires the move event.
     * @param {Number} x The new x position
     * @param {Number} y The new y position
     * @returns {Roo.BoxComponent} this
     */
    setPagePosition : function(x, y){
        this.pageX = x;
        this.pageY = y;
        if(!this.boxReady){
            return;
        }
        if(x === undefined || y === undefined){ // cannot translate undefined points
            return;
        }
        var p = this.el.translatePoints(x, y);
        this.setPosition(p.left, p.top);
        return this;
    },

    // private
    onRender : function(ct, position){
        Roo.BoxComponent.superclass.onRender.call(this, ct, position);
        if(this.resizeEl){
            this.resizeEl = Roo.get(this.resizeEl);
        }
        if(this.positionEl){
            this.positionEl = Roo.get(this.positionEl);
        }
    },

    // private
    afterRender : function(){
        Roo.BoxComponent.superclass.afterRender.call(this);
        this.boxReady = true;
        this.setSize(this.width, this.height);
        if(this.x || this.y){
            this.setPosition(this.x, this.y);
        }
        if(this.pageX || this.pageY){
            this.setPagePosition(this.pageX, this.pageY);
        }
    },

    /**
     * Force the component's size to recalculate based on the underlying element's current height and width.
     * @returns {Roo.BoxComponent} this
     */
    syncSize : function(){
        delete this.lastSize;
        this.setSize(this.el.getWidth(), this.el.getHeight());
        return this;
    },

    /**
     * Called after the component is resized, this method is empty by default but can be implemented by any
     * subclass that needs to perform custom logic after a resize occurs.
     * @param {Number} adjWidth The box-adjusted width that was set
     * @param {Number} adjHeight The box-adjusted height that was set
     * @param {Number} rawWidth The width that was originally specified
     * @param {Number} rawHeight The height that was originally specified
     */
    onResize : function(adjWidth, adjHeight, rawWidth, rawHeight){

    },

    /**
     * Called after the component is moved, this method is empty by default but can be implemented by any
     * subclass that needs to perform custom logic after a move occurs.
     * @param {Number} x The new x position
     * @param {Number} y The new y position
     */
    onPosition : function(x, y){

    },

    // private
    adjustSize : function(w, h){
        if(this.autoWidth){
            w = 'auto';
        }
        if(this.autoHeight){
            h = 'auto';
        }
        return {width : w, height: h};
    },

    // private
    adjustPosition : function(x, y){
        return {x : x, y: y};
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 (function(){ 
/**
 * @class Roo.Layer
 * @extends Roo.Element
 * An extended {@link Roo.Element} object that supports a shadow and shim, constrain to viewport and
 * automatic maintaining of shadow/shim positions.
 * @cfg {Boolean} shim False to disable the iframe shim in browsers which need one (defaults to true)
 * @cfg {String/Boolean} shadow True to create a shadow element with default class "x-layer-shadow", or
 * you can pass a string with a CSS class name. False turns off the shadow.
 * @cfg {Object} dh DomHelper object config to create element with (defaults to {tag: "div", cls: "x-layer"}).
 * @cfg {Boolean} constrain False to disable constrain to viewport (defaults to true)
 * @cfg {String} cls CSS class to add to the element
 * @cfg {Number} zindex Starting z-index (defaults to 11000)
 * @cfg {Number} shadowOffset Number of pixels to offset the shadow (defaults to 3)
 * @constructor
 * @param {Object} config An object with config options.
 * @param {String/HTMLElement} existingEl (optional) Uses an existing DOM element. If the element is not found it creates it.
 */

Roo.Layer = function(config, existingEl){
    config = config || {};
    var dh = Roo.DomHelper;
    var cp = config.parentEl, pel = cp ? Roo.getDom(cp) : document.body;
    if(existingEl){
        this.dom = Roo.getDom(existingEl);
    }
    if(!this.dom){
        var o = config.dh || {tag: "div", cls: "x-layer"};
        this.dom = dh.append(pel, o);
    }
    if(config.cls){
        this.addClass(config.cls);
    }
    this.constrain = config.constrain !== false;
    this.visibilityMode = Roo.Element.VISIBILITY;
    if(config.id){
        this.id = this.dom.id = config.id;
    }else{
        this.id = Roo.id(this.dom);
    }
    this.zindex = config.zindex || this.getZIndex();
    this.position("absolute", this.zindex);
    if(config.shadow){
        this.shadowOffset = config.shadowOffset || 4;
        this.shadow = new Roo.Shadow({
            offset : this.shadowOffset,
            mode : config.shadow
        });
    }else{
        this.shadowOffset = 0;
    }
    this.useShim = config.shim !== false && Roo.useShims;
    this.useDisplay = config.useDisplay;
    this.hide();
};

var supr = Roo.Element.prototype;

// shims are shared among layer to keep from having 100 iframes
var shims = [];

Roo.extend(Roo.Layer, Roo.Element, {

    getZIndex : function(){
        return this.zindex || parseInt(this.getStyle("z-index"), 10) || 11000;
    },

    getShim : function(){
        if(!this.useShim){
            return null;
        }
        if(this.shim){
            return this.shim;
        }
        var shim = shims.shift();
        if(!shim){
            shim = this.createShim();
            shim.enableDisplayMode('block');
            shim.dom.style.display = 'none';
            shim.dom.style.visibility = 'visible';
        }
        var pn = this.dom.parentNode;
        if(shim.dom.parentNode != pn){
            pn.insertBefore(shim.dom, this.dom);
        }
        shim.setStyle('z-index', this.getZIndex()-2);
        this.shim = shim;
        return shim;
    },

    hideShim : function(){
        if(this.shim){
            this.shim.setDisplayed(false);
            shims.push(this.shim);
            delete this.shim;
        }
    },

    disableShadow : function(){
        if(this.shadow){
            this.shadowDisabled = true;
            this.shadow.hide();
            this.lastShadowOffset = this.shadowOffset;
            this.shadowOffset = 0;
        }
    },

    enableShadow : function(show){
        if(this.shadow){
            this.shadowDisabled = false;
            this.shadowOffset = this.lastShadowOffset;
            delete this.lastShadowOffset;
            if(show){
                this.sync(true);
            }
        }
    },

    // private
    // this code can execute repeatedly in milliseconds (i.e. during a drag) so
    // code size was sacrificed for effeciency (e.g. no getBox/setBox, no XY calls)
    sync : function(doShow){
        var sw = this.shadow;
        if(!this.updating && this.isVisible() && (sw || this.useShim)){
            var sh = this.getShim();

            var w = this.getWidth(),
                h = this.getHeight();

            var l = this.getLeft(true),
                t = this.getTop(true);

            if(sw && !this.shadowDisabled){
                if(doShow && !sw.isVisible()){
                    sw.show(this);
                }else{
                    sw.realign(l, t, w, h);
                }
                if(sh){
                    if(doShow){
                       sh.show();
                    }
                    // fit the shim behind the shadow, so it is shimmed too
                    var a = sw.adjusts, s = sh.dom.style;
                    s.left = (Math.min(l, l+a.l))+"px";
                    s.top = (Math.min(t, t+a.t))+"px";
                    s.width = (w+a.w)+"px";
                    s.height = (h+a.h)+"px";
                }
            }else if(sh){
                if(doShow){
                   sh.show();
                }
                sh.setSize(w, h);
                sh.setLeftTop(l, t);
            }
            
        }
    },

    // private
    destroy : function(){
        this.hideShim();
        if(this.shadow){
            this.shadow.hide();
        }
        this.removeAllListeners();
        var pn = this.dom.parentNode;
        if(pn){
            pn.removeChild(this.dom);
        }
        Roo.Element.uncache(this.id);
    },

    remove : function(){
        this.destroy();
    },

    // private
    beginUpdate : function(){
        this.updating = true;
    },

    // private
    endUpdate : function(){
        this.updating = false;
        this.sync(true);
    },

    // private
    hideUnders : function(negOffset){
        if(this.shadow){
            this.shadow.hide();
        }
        this.hideShim();
    },

    // private
    constrainXY : function(){
        if(this.constrain){
            var vw = Roo.lib.Dom.getViewWidth(),
                vh = Roo.lib.Dom.getViewHeight();
            var s = Roo.get(document).getScroll();

            var xy = this.getXY();
            var x = xy[0], y = xy[1];   
            var w = this.dom.offsetWidth+this.shadowOffset, h = this.dom.offsetHeight+this.shadowOffset;
            // only move it if it needs it
            var moved = false;
            // first validate right/bottom
            if((x + w) > vw+s.left){
                x = vw - w - this.shadowOffset;
                moved = true;
            }
            if((y + h) > vh+s.top){
                y = vh - h - this.shadowOffset;
                moved = true;
            }
            // then make sure top/left isn't negative
            if(x < s.left){
                x = s.left;
                moved = true;
            }
            if(y < s.top){
                y = s.top;
                moved = true;
            }
            if(moved){
                if(this.avoidY){
                    var ay = this.avoidY;
                    if(y <= ay && (y+h) >= ay){
                        y = ay-h-5;   
                    }
                }
                xy = [x, y];
                this.storeXY(xy);
                supr.setXY.call(this, xy);
                this.sync();
            }
        }
    },

    isVisible : function(){
        return this.visible;    
    },

    // private
    showAction : function(){
        this.visible = true; // track visibility to prevent getStyle calls
        if(this.useDisplay === true){
            this.setDisplayed("");
        }else if(this.lastXY){
            supr.setXY.call(this, this.lastXY);
        }else if(this.lastLT){
            supr.setLeftTop.call(this, this.lastLT[0], this.lastLT[1]);
        }
    },

    // private
    hideAction : function(){
        this.visible = false;
        if(this.useDisplay === true){
            this.setDisplayed(false);
        }else{
            this.setLeftTop(-10000,-10000);
        }
    },

    // overridden Element method
    setVisible : function(v, a, d, c, e){
        if(v){
            this.showAction();
        }
        if(a && v){
            var cb = function(){
                this.sync(true);
                if(c){
                    c();
                }
            }.createDelegate(this);
            supr.setVisible.call(this, true, true, d, cb, e);
        }else{
            if(!v){
                this.hideUnders(true);
            }
            var cb = c;
            if(a){
                cb = function(){
                    this.hideAction();
                    if(c){
                        c();
                    }
                }.createDelegate(this);
            }
            supr.setVisible.call(this, v, a, d, cb, e);
            if(v){
                this.sync(true);
            }else if(!a){
                this.hideAction();
            }
        }
    },

    storeXY : function(xy){
        delete this.lastLT;
        this.lastXY = xy;
    },

    storeLeftTop : function(left, top){
        delete this.lastXY;
        this.lastLT = [left, top];
    },

    // private
    beforeFx : function(){
        this.beforeAction();
        return Roo.Layer.superclass.beforeFx.apply(this, arguments);
    },

    // private
    afterFx : function(){
        Roo.Layer.superclass.afterFx.apply(this, arguments);
        this.sync(this.isVisible());
    },

    // private
    beforeAction : function(){
        if(!this.updating && this.shadow){
            this.shadow.hide();
        }
    },

    // overridden Element method
    setLeft : function(left){
        this.storeLeftTop(left, this.getTop(true));
        supr.setLeft.apply(this, arguments);
        this.sync();
    },

    setTop : function(top){
        this.storeLeftTop(this.getLeft(true), top);
        supr.setTop.apply(this, arguments);
        this.sync();
    },

    setLeftTop : function(left, top){
        this.storeLeftTop(left, top);
        supr.setLeftTop.apply(this, arguments);
        this.sync();
    },

    setXY : function(xy, a, d, c, e){
        this.fixDisplay();
        this.beforeAction();
        this.storeXY(xy);
        var cb = this.createCB(c);
        supr.setXY.call(this, xy, a, d, cb, e);
        if(!a){
            cb();
        }
    },

    // private
    createCB : function(c){
        var el = this;
        return function(){
            el.constrainXY();
            el.sync(true);
            if(c){
                c();
            }
        };
    },

    // overridden Element method
    setX : function(x, a, d, c, e){
        this.setXY([x, this.getY()], a, d, c, e);
    },

    // overridden Element method
    setY : function(y, a, d, c, e){
        this.setXY([this.getX(), y], a, d, c, e);
    },

    // overridden Element method
    setSize : function(w, h, a, d, c, e){
        this.beforeAction();
        var cb = this.createCB(c);
        supr.setSize.call(this, w, h, a, d, cb, e);
        if(!a){
            cb();
        }
    },

    // overridden Element method
    setWidth : function(w, a, d, c, e){
        this.beforeAction();
        var cb = this.createCB(c);
        supr.setWidth.call(this, w, a, d, cb, e);
        if(!a){
            cb();
        }
    },

    // overridden Element method
    setHeight : function(h, a, d, c, e){
        this.beforeAction();
        var cb = this.createCB(c);
        supr.setHeight.call(this, h, a, d, cb, e);
        if(!a){
            cb();
        }
    },

    // overridden Element method
    setBounds : function(x, y, w, h, a, d, c, e){
        this.beforeAction();
        var cb = this.createCB(c);
        if(!a){
            this.storeXY([x, y]);
            supr.setXY.call(this, [x, y]);
            supr.setSize.call(this, w, h, a, d, cb, e);
            cb();
        }else{
            supr.setBounds.call(this, x, y, w, h, a, d, cb, e);
        }
        return this;
    },
    
    /**
     * Sets the z-index of this layer and adjusts any shadow and shim z-indexes. The layer z-index is automatically
     * incremented by two more than the value passed in so that it always shows above any shadow or shim (the shadow
     * element, if any, will be assigned z-index + 1, and the shim element, if any, will be assigned the unmodified z-index).
     * @param {Number} zindex The new z-index to set
     * @return {this} The Layer
     */
    setZIndex : function(zindex){
        this.zindex = zindex;
        this.setStyle("z-index", zindex + 2);
        if(this.shadow){
            this.shadow.setZIndex(zindex + 1);
        }
        if(this.shim){
            this.shim.setStyle("z-index", zindex);
        }
    }
});
})();/*
 * Original code for Roojs - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.XComponent
 * A delayed Element creator...
 * Or a way to group chunks of interface together.
 * technically this is a wrapper around a tree of Roo elements (which defines a 'module'),
 *  used in conjunction with XComponent.build() it will create an instance of each element,
 *  then call addxtype() to build the User interface.
 * 
 * Mypart.xyx = new Roo.XComponent({

    parent : 'Mypart.xyz', // empty == document.element.!!
    order : '001',
    name : 'xxxx'
    region : 'xxxx'
    disabled : function() {} 
     
    tree : function() { // return an tree of xtype declared components
        var MODULE = this;
        return 
        {
            xtype : 'NestedLayoutPanel',
            // technicall
        }
     ]
 *})
 *
 *
 * It can be used to build a big heiracy, with parent etc.
 * or you can just use this to render a single compoent to a dom element
 * MYPART.render(Roo.Element | String(id) | dom_element )
 *
 *
 * Usage patterns.
 *
 * Classic Roo
 *
 * Roo is designed primarily as a single page application, so the UI build for a standard interface will
 * expect a single 'TOP' level module normally indicated by the 'parent' of the XComponent definition being defined as false.
 *
 * Each sub module is expected to have a parent pointing to the class name of it's parent module.
 *
 * When the top level is false, a 'Roo.layout.Border' is created and the element is flagged as 'topModule'
 * - if mulitple topModules exist, the last one is defined as the top module.
 *
 * Embeded Roo
 * 
 * When the top level or multiple modules are to embedded into a existing HTML page,
 * the parent element can container '#id' of the element where the module will be drawn.
 *
 * Bootstrap Roo
 *
 * Unlike classic Roo, the bootstrap tends not to be used as a single page.
 * it relies more on a include mechanism, where sub modules are included into an outer page.
 * This is normally managed by the builder tools using Roo.apply( options, Included.Sub.Module )
 * 
 * Bootstrap Roo Included elements
 *
 * Our builder application needs the ability to preview these sub compoennts. They will normally have parent=false set,
 * hence confusing the component builder as it thinks there are multiple top level elements. 
 *
 * String Over-ride & Translations
 *
 * Our builder application writes all the strings as _strings and _named_strings. This is to enable the translation of elements,
 * and also the 'overlaying of string values - needed when different versions of the same application with different text content
 * are needed. @see Roo.XComponent.overlayString  
 * 
 * 
 * 
 * @extends Roo.util.Observable
 * @constructor
 * @param cfg {Object} configuration of component
 * 
 */
Roo.XComponent = function(cfg) {
    Roo.apply(this, cfg);
    this.addEvents({ 
        /**
	     * @event built
	     * Fires when this the componnt is built
	     * @param {Roo.XComponent} c the component
	     */
        'built' : true
        
    });
    this.region = this.region || 'center'; // default..
    Roo.XComponent.register(this);
    this.modules = false;
    this.el = false; // where the layout goes..
    
    
}
Roo.extend(Roo.XComponent, Roo.util.Observable, {
    /**
     * @property el
     * The created element (with Roo.factory())
     * @type {Roo.Layout}
     */
    el  : false,
    
    /**
     * @property el
     * for BC  - use el in new code
     * @type {Roo.Layout}
     */
    panel : false,
    
    /**
     * @property layout
     * for BC  - use el in new code
     * @type {Roo.Layout}
     */
    layout : false,
    
     /**
     * @cfg {Function|boolean} disabled
     * If this module is disabled by some rule, return true from the funtion
     */
    disabled : false,
    
    /**
     * @cfg {String} parent 
     * Name of parent element which it get xtype added to..
     */
    parent: false,
    
    /**
     * @cfg {String} order
     * Used to set the order in which elements are created (usefull for multiple tabs)
     */
    
    order : false,
    /**
     * @cfg {String} name
     * String to display while loading.
     */
    name : false,
    /**
     * @cfg {String} region
     * Region to render component to (defaults to center)
     */
    region : 'center',
    
    /**
     * @cfg {Array} items
     * A single item array - the first element is the root of the tree..
     * It's done this way to stay compatible with the Xtype system...
     */
    items : false,
    
    /**
     * @property _tree
     * The method that retuns the tree of parts that make up this compoennt 
     * @type {function}
     */
    _tree  : false,
    
     /**
     * render
     * render element to dom or tree
     * @param {Roo.Element|String|DomElement} optional render to if parent is not set.
     */
    
    render : function(el)
    {
        
        el = el || false;
        var hp = this.parent ? 1 : 0;
        Roo.debug &&  Roo.log(this);
        
        var tree = this._tree ? this._tree() : this.tree();

        
        if (!el && typeof(this.parent) == 'string' && this.parent.substring(0,1) == '#') {
            // if parent is a '#.....' string, then let's use that..
            var ename = this.parent.substr(1);
            this.parent = false;
            Roo.debug && Roo.log(ename);
            switch (ename) {
                case 'bootstrap-body':
                    if (typeof(tree.el) != 'undefined' && tree.el == document.body)  {
                        // this is the BorderLayout standard?
                       this.parent = { el : true };
                       break;
                    }
                    if (["Nest", "Content", "Grid", "Tree"].indexOf(tree.xtype)  > -1)  {
                        // need to insert stuff...
                        this.parent =  {
                             el : new Roo.bootstrap.layout.Border({
                                 el : document.body, 
                     
                                 center: {
                                    titlebar: false,
                                    autoScroll:false,
                                    closeOnTab: true,
                                    tabPosition: 'top',
                                      //resizeTabs: true,
                                    alwaysShowTabs: true,
                                    hideTabs: false
                                     //minTabWidth: 140
                                 }
                             })
                        
                         };
                         break;
                    }
                         
                    if (typeof(Roo.bootstrap.Body) != 'undefined' ) {
                        this.parent = { el :  new  Roo.bootstrap.Body() };
                        Roo.debug && Roo.log("setting el to doc body");
                         
                    } else {
                        throw "Container is bootstrap body, but Roo.bootstrap.Body is not defined";
                    }
                    break;
                case 'bootstrap':
                    this.parent = { el : true};
                    // fall through
                default:
                    el = Roo.get(ename);
                    if (typeof(Roo.bootstrap.Body) != 'undefined' && tree['|xns'] == 'Roo.bootstrap') {
                        this.parent = { el : true};
                    }
                    
                    break;
            }
                
            
            if (!el && !this.parent) {
                Roo.debug && Roo.log("Warning - element can not be found :#" + ename );
                return;
            }
        }
        
        Roo.debug && Roo.log("EL:");
        Roo.debug && Roo.log(el);
        Roo.debug && Roo.log("this.parent.el:");
        Roo.debug && Roo.log(this.parent.el);
        

        // altertive root elements ??? - we need a better way to indicate these.
        var is_alt = Roo.XComponent.is_alt ||
                    (typeof(tree.el) != 'undefined' && tree.el == document.body) ||
                    (typeof(Roo.bootstrap.Body) != 'undefined' && tree.xns == Roo.bootstrap) ||
                    (typeof(Roo.mailer) != 'undefined' && tree.xns == Roo.mailer) ;
        
        
        
        if (!this.parent && is_alt) {
            //el = Roo.get(document.body);
            this.parent = { el : true };
        }
            
            
        
        if (!this.parent) {
            
            Roo.debug && Roo.log("no parent - creating one");
            
            el = el ? Roo.get(el) : false; 	
            
            if (typeof(Roo.layout.Border) == 'undefined' ) {
                
                this.parent =  {
                    el : new Roo.bootstrap.layout.Border({
                        el: el || document.body,
                    
                        center: {
                            titlebar: false,
                            autoScroll:false,
                            closeOnTab: true,
                            tabPosition: 'top',
                             //resizeTabs: true,
                            alwaysShowTabs: false,
                            hideTabs: true,
                            minTabWidth: 140,
                            overflow: 'visible'
                         }
                     })
                };
            } else {
            
                // it's a top level one..
                this.parent =  {
                    el : new Roo.layout.Border(el || document.body, {
                        center: {
                            titlebar: false,
                            autoScroll:false,
                            closeOnTab: true,
                            tabPosition: 'top',
                             //resizeTabs: true,
                            alwaysShowTabs: el && hp? false :  true,
                            hideTabs: el || !hp ? true :  false,
                            minTabWidth: 140
                         }
                    })
                };
            }
        }
        
        if (!this.parent.el) {
                // probably an old style ctor, which has been disabled.
                return;

        }
		// The 'tree' method is  '_tree now' 
            
        tree.region = tree.region || this.region;
        var is_body = false;
        if (this.parent.el === true) {
            // bootstrap... - body..
            if (el) {
                tree.el = el;
            }
            this.parent.el = Roo.factory(tree);
            is_body = true;
        }
        
        this.el = this.parent.el.addxtype(tree, undefined, is_body);
        this.fireEvent('built', this);
        
        this.panel = this.el;
        this.layout = this.panel.layout;
        this.parentLayout = this.parent.layout  || false;  
         
    }
    
});

Roo.apply(Roo.XComponent, {
    /**
     * @property  hideProgress
     * true to disable the building progress bar.. usefull on single page renders.
     * @type Boolean
     */
    hideProgress : false,
    /**
     * @property  buildCompleted
     * True when the builder has completed building the interface.
     * @type Boolean
     */
    buildCompleted : false,
     
    /**
     * @property  topModule
     * the upper most module - uses document.element as it's constructor.
     * @type Object
     */
     
    topModule  : false,
      
    /**
     * @property  modules
     * array of modules to be created by registration system.
     * @type {Array} of Roo.XComponent
     */
    
    modules : [],
    /**
     * @property  elmodules
     * array of modules to be created by which use #ID 
     * @type {Array} of Roo.XComponent
     */
     
    elmodules : [],

     /**
     * @property  is_alt
     * Is an alternative Root - normally used by bootstrap or other systems,
     *    where the top element in the tree can wrap 'body' 
     * @type {boolean}  (default false)
     */
     
    is_alt : false,
    /**
     * @property  build_from_html
     * Build elements from html - used by bootstrap HTML stuff 
     *    - this is cleared after build is completed
     * @type {boolean}    (default false)
     */
     
    build_from_html : false,
    /**
     * Register components to be built later.
     *
     * This solves the following issues
     * - Building is not done on page load, but after an authentication process has occured.
     * - Interface elements are registered on page load
     * - Parent Interface elements may not be loaded before child, so this handles that..
     * 
     *
     * example:
     * 
     * MyApp.register({
          order : '000001',
          module : 'Pman.Tab.projectMgr',
          region : 'center',
          parent : 'Pman.layout',
          disabled : false,  // or use a function..
        })
     
     * * @param {Object} details about module
     */
    register : function(obj) {
		
        Roo.XComponent.event.fireEvent('register', obj);
        switch(typeof(obj.disabled) ) {
                
            case 'undefined':
                break;
            
            case 'function':
                if ( obj.disabled() ) {
                        return;
                }
                break;
            
            default:
                if (obj.disabled || obj.region == '#disabled') {
                        return;
                }
                break;
        }
		
        this.modules.push(obj);
         
    },
    /**
     * convert a string to an object..
     * eg. 'AAA.BBB' -> finds AAA.BBB

     */
    
    toObject : function(str)
    {
        if (!str || typeof(str) == 'object') {
            return str;
        }
        if (str.substring(0,1) == '#') {
            return str;
        }

        var ar = str.split('.');
        var rt, o;
        rt = ar.shift();
            /** eval:var:o */
        try {
            eval('if (typeof ' + rt + ' == "undefined"){ o = false;} o = ' + rt + ';');
        } catch (e) {
            throw "Module not found : " + str;
        }
        
        if (o === false) {
            throw "Module not found : " + str;
        }
        Roo.each(ar, function(e) {
            if (typeof(o[e]) == 'undefined') {
                throw "Module not found : " + str;
            }
            o = o[e];
        });
        
        return o;
        
    },
    
    
    /**
     * move modules into their correct place in the tree..
     * 
     */
    preBuild : function ()
    {
        var _t = this;
        Roo.each(this.modules , function (obj)
        {
            Roo.XComponent.event.fireEvent('beforebuild', obj);
            
            var opar = obj.parent;
            try { 
                obj.parent = this.toObject(opar);
            } catch(e) {
                Roo.debug && Roo.log("parent:toObject failed: " + e.toString());
                return;
            }
            
            if (!obj.parent) {
                Roo.debug && Roo.log("GOT top level module");
                Roo.debug && Roo.log(obj);
                obj.modules = new Roo.util.MixedCollection(false, 
                    function(o) { return o.order + '' }
                );
                this.topModule = obj;
                return;
            }
			// parent is a string (usually a dom element name..)
            if (typeof(obj.parent) == 'string') {
                this.elmodules.push(obj);
                return;
            }
            if (obj.parent.constructor != Roo.XComponent) {
                Roo.debug && Roo.log("Warning : Object Parent is not instance of XComponent:" + obj.name)
            }
            if (!obj.parent.modules) {
                obj.parent.modules = new Roo.util.MixedCollection(false, 
                    function(o) { return o.order + '' }
                );
            }
            if (obj.parent.disabled) {
                obj.disabled = true;
            }
            obj.parent.modules.add(obj);
        }, this);
    },
    
     /**
     * make a list of modules to build.
     * @return {Array} list of modules. 
     */ 
    
    buildOrder : function()
    {
        var _this = this;
        var cmp = function(a,b) {   
            return String(a).toUpperCase() > String(b).toUpperCase() ? 1 : -1;
        };
        if ((!this.topModule || !this.topModule.modules) && !this.elmodules.length) {
            throw "No top level modules to build";
        }
        
        // make a flat list in order of modules to build.
        var mods = this.topModule ? [ this.topModule ] : [];
		
        
	// elmodules (is a list of DOM based modules )
        Roo.each(this.elmodules, function(e) {
            mods.push(e);
            if (!this.topModule &&
                typeof(e.parent) == 'string' &&
                e.parent.substring(0,1) == '#' &&
                Roo.get(e.parent.substr(1))
               ) {
                
                _this.topModule = e;
            }
            
        });

        
        // add modules to their parents..
        var addMod = function(m) {
            Roo.debug && Roo.log("build Order: add: " + m.name);
                
            mods.push(m);
            if (m.modules && !m.disabled) {
                Roo.debug && Roo.log("build Order: " + m.modules.length + " child modules");
                m.modules.keySort('ASC',  cmp );
                Roo.debug && Roo.log("build Order: " + m.modules.length + " child modules (after sort)");
    
                m.modules.each(addMod);
            } else {
                Roo.debug && Roo.log("build Order: no child modules");
            }
            // not sure if this is used any more..
            if (m.finalize) {
                m.finalize.name = m.name + " (clean up) ";
                mods.push(m.finalize);
            }
            
        }
        if (this.topModule && this.topModule.modules) { 
            this.topModule.modules.keySort('ASC',  cmp );
            this.topModule.modules.each(addMod);
        } 
        return mods;
    },
    
     /**
     * Build the registered modules.
     * @param {Object} parent element.
     * @param {Function} optional method to call after module has been added.
     * 
     */ 
   
    build : function(opts) 
    {
        
        if (typeof(opts) != 'undefined') {
            Roo.apply(this,opts);
        }
        
        this.preBuild();
        var mods = this.buildOrder();
      
        //this.allmods = mods;
        //Roo.debug && Roo.log(mods);
        //return;
        if (!mods.length) { // should not happen
            throw "NO modules!!!";
        }
        
        
        var msg = "Building Interface...";
        // flash it up as modal - so we store the mask!?
        if (!this.hideProgress && Roo.MessageBox) {
            Roo.MessageBox.show({ title: 'loading' });
            Roo.MessageBox.show({
               title: "Please wait...",
               msg: msg,
               width:450,
               progress:true,
	       buttons : false,
               closable:false,
               modal: false
              
            });
        }
        var total = mods.length;
        
        var _this = this;
        var progressRun = function() {
            if (!mods.length) {
                Roo.debug && Roo.log('hide?');
                if (!this.hideProgress && Roo.MessageBox) {
                    Roo.MessageBox.hide();
                }
                Roo.XComponent.build_from_html = false; // reset, so dialogs will be build from javascript
                
                Roo.XComponent.event.fireEvent('buildcomplete', _this.topModule);
                
                // THE END...
                return false;   
            }
            
            var m = mods.shift();
            
            
            Roo.debug && Roo.log(m);
            // not sure if this is supported any more.. - modules that are are just function
            if (typeof(m) == 'function') { 
                m.call(this);
                return progressRun.defer(10, _this);
            } 
            
            
            msg = "Building Interface " + (total  - mods.length) + 
                    " of " + total + 
                    (m.name ? (' - ' + m.name) : '');
			Roo.debug && Roo.log(msg);
            if (!_this.hideProgress &&  Roo.MessageBox) { 
                Roo.MessageBox.updateProgress(  (total  - mods.length)/total, msg  );
            }
            
         
            // is the module disabled?
            var disabled = (typeof(m.disabled) == 'function') ?
                m.disabled.call(m.module.disabled) : m.disabled;    
            
            
            if (disabled) {
                return progressRun(); // we do not update the display!
            }
            
            // now build 
            
			
			
            m.render();
            // it's 10 on top level, and 1 on others??? why...
            return progressRun.defer(10, _this);
             
        }
        progressRun.defer(1, _this);
     
        
        
    },
    /**
     * Overlay a set of modified strings onto a component
     * This is dependant on our builder exporting the strings and 'named strings' elements.
     * 
     * @param {Object} element to overlay on - eg. Pman.Dialog.Login
     * @param {Object} associative array of 'named' string and it's new value.
     * 
     */
	overlayStrings : function( component, strings )
    {
        if (typeof(component['_named_strings']) == 'undefined') {
            throw "ERROR: component does not have _named_strings";
        }
        for ( var k in strings ) {
            var md = typeof(component['_named_strings'][k]) == 'undefined' ? false : component['_named_strings'][k];
            if (md !== false) {
                component['_strings'][md] = strings[k];
            } else {
                Roo.log('could not find named string: ' + k + ' in');
                Roo.log(component);
            }
            
        }
        
    },
    
	
	/**
	 * Event Object.
	 *
	 *
	 */
	event: false, 
    /**
	 * wrapper for event.on - aliased later..  
	 * Typically use to register a event handler for register:
	 *
	 * eg. Roo.XComponent.on('register', function(comp) { comp.disable = true } );
	 *
	 */
    on : false
   
    
    
});

Roo.XComponent.event = new Roo.util.Observable({
		events : { 
			/**
			 * @event register
			 * Fires when an Component is registered,
			 * set the disable property on the Component to stop registration.
			 * @param {Roo.XComponent} c the component being registerd.
			 * 
			 */
			'register' : true,
            /**
			 * @event beforebuild
			 * Fires before each Component is built
			 * can be used to apply permissions.
			 * @param {Roo.XComponent} c the component being registerd.
			 * 
			 */
			'beforebuild' : true,
			/**
			 * @event buildcomplete
			 * Fires on the top level element when all elements have been built
			 * @param {Roo.XComponent} the top level component.
			 */
			'buildcomplete' : true
			
		}
});

Roo.XComponent.on = Roo.XComponent.event.on.createDelegate(Roo.XComponent.event); 
 //
 /**
 * marked - a markdown parser
 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/chjj/marked
 */


/**
 *
 * Roo.Markdown - is a very crude wrapper around marked..
 *
 * usage:
 * 
 * alert( Roo.Markdown.toHtml("Markdown *rocks*.") );
 * 
 * Note: move the sample code to the bottom of this
 * file before uncommenting it.
 *
 */

Roo.Markdown = {};
Roo.Markdown.toHtml = function(text) {
    
    var c = new Roo.Markdown.marked.setOptions({
            renderer: new Roo.Markdown.marked.Renderer(),
            gfm: true,
            tables: true,
            breaks: false,
            pedantic: false,
            sanitize: false,
            smartLists: true,
            smartypants: false
          });
    // A FEW HACKS!!?
    
    text = text.replace(/\\\n/g,' ');
    return Roo.Markdown.marked(text);
};
//
// converter
//
// Wraps all "globals" so that the only thing
// exposed is makeHtml().
//
(function() {
    
     /**
         * eval:var:escape
         * eval:var:unescape
         * eval:var:replace
         */
      
    /**
     * Helpers
     */
    
    var escape = function (html, encode) {
      return html
        .replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;');
    }
    
    var unescape = function (html) {
        // explicitly match decimal, hex, and named HTML entities 
      return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/g, function(_, n) {
        n = n.toLowerCase();
        if (n === 'colon') { return ':'; }
        if (n.charAt(0) === '#') {
          return n.charAt(1) === 'x'
            ? String.fromCharCode(parseInt(n.substring(2), 16))
            : String.fromCharCode(+n.substring(1));
        }
        return '';
      });
    }
    
    var replace = function (regex, opt) {
      regex = regex.source;
      opt = opt || '';
      return function self(name, val) {
        if (!name) { return new RegExp(regex, opt); }
        val = val.source || val;
        val = val.replace(/(^|[^\[])\^/g, '$1');
        regex = regex.replace(name, val);
        return self;
      };
    }


         /**
         * eval:var:noop
    */
    var noop = function () {}
    noop.exec = noop;
    
         /**
         * eval:var:merge
    */
    var merge = function (obj) {
      var i = 1
        , target
        , key;
    
      for (; i < arguments.length; i++) {
        target = arguments[i];
        for (key in target) {
          if (Object.prototype.hasOwnProperty.call(target, key)) {
            obj[key] = target[key];
          }
        }
      }
    
      return obj;
    }
    
    
    /**
     * Block-Level Grammar
     */
    
    
    
    
    var block = {
      newline: /^\n+/,
      code: /^( {4}[^\n]+\n*)+/,
      fences: noop,
      hr: /^( *[-*_]){3,} *(?:\n+|$)/,
      heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
      nptable: noop,
      lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
      blockquote: /^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,
      list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
      html: /^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,
      def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,
      table: noop,
      paragraph: /^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,
      text: /^[^\n]+/
    };
    
    block.bullet = /(?:[*+-]|\d+\.)/;
    block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
    block.item = replace(block.item, 'gm')
      (/bull/g, block.bullet)
      ();
    
    block.list = replace(block.list)
      (/bull/g, block.bullet)
      ('hr', '\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))')
      ('def', '\\n+(?=' + block.def.source + ')')
      ();
    
    block.blockquote = replace(block.blockquote)
      ('def', block.def)
      ();
    
    block._tag = '(?!(?:'
      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'
      + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'
      + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b';
    
    block.html = replace(block.html)
      ('comment', /<!--[\s\S]*?-->/)
      ('closed', /<(tag)[\s\S]+?<\/\1>/)
      ('closing', /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)
      (/tag/g, block._tag)
      ();
    
    block.paragraph = replace(block.paragraph)
      ('hr', block.hr)
      ('heading', block.heading)
      ('lheading', block.lheading)
      ('blockquote', block.blockquote)
      ('tag', '<' + block._tag)
      ('def', block.def)
      ();
    
    /**
     * Normal Block Grammar
     */
    
    block.normal = merge({}, block);
    
    /**
     * GFM Block Grammar
     */
    
    block.gfm = merge({}, block.normal, {
      fences: /^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/,
      paragraph: /^/,
      heading: /^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/
    });
    
    block.gfm.paragraph = replace(block.paragraph)
      ('(?!', '(?!'
        + block.gfm.fences.source.replace('\\1', '\\2') + '|'
        + block.list.source.replace('\\1', '\\3') + '|')
      ();
    
    /**
     * GFM + Tables Block Grammar
     */
    
    block.tables = merge({}, block.gfm, {
      nptable: /^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,
      table: /^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/
    });
    
    /**
     * Block Lexer
     */
    
    var Lexer = function (options) {
      this.tokens = [];
      this.tokens.links = {};
      this.options = options || marked.defaults;
      this.rules = block.normal;
    
      if (this.options.gfm) {
        if (this.options.tables) {
          this.rules = block.tables;
        } else {
          this.rules = block.gfm;
        }
      }
    }
    
    /**
     * Expose Block Rules
     */
    
    Lexer.rules = block;
    
    /**
     * Static Lex Method
     */
    
    Lexer.lex = function(src, options) {
      var lexer = new Lexer(options);
      return lexer.lex(src);
    };
    
    /**
     * Preprocessing
     */
    
    Lexer.prototype.lex = function(src) {
      src = src
        .replace(/\r\n|\r/g, '\n')
        .replace(/\t/g, '    ')
        .replace(/\u00a0/g, ' ')
        .replace(/\u2424/g, '\n');
    
      return this.token(src, true);
    };
    
    /**
     * Lexing
     */
    
    Lexer.prototype.token = function(src, top, bq) {
      var src = src.replace(/^ +$/gm, '')
        , next
        , loose
        , cap
        , bull
        , b
        , item
        , space
        , i
        , l;
    
      while (src) {
        // newline
        if (cap = this.rules.newline.exec(src)) {
          src = src.substring(cap[0].length);
          if (cap[0].length > 1) {
            this.tokens.push({
              type: 'space'
            });
          }
        }
    
        // code
        if (cap = this.rules.code.exec(src)) {
          src = src.substring(cap[0].length);
          cap = cap[0].replace(/^ {4}/gm, '');
          this.tokens.push({
            type: 'code',
            text: !this.options.pedantic
              ? cap.replace(/\n+$/, '')
              : cap
          });
          continue;
        }
    
        // fences (gfm)
        if (cap = this.rules.fences.exec(src)) {
          src = src.substring(cap[0].length);
          this.tokens.push({
            type: 'code',
            lang: cap[2],
            text: cap[3] || ''
          });
          continue;
        }
    
        // heading
        if (cap = this.rules.heading.exec(src)) {
          src = src.substring(cap[0].length);
          this.tokens.push({
            type: 'heading',
            depth: cap[1].length,
            text: cap[2]
          });
          continue;
        }
    
        // table no leading pipe (gfm)
        if (top && (cap = this.rules.nptable.exec(src))) {
          src = src.substring(cap[0].length);
    
          item = {
            type: 'table',
            header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
            align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
            cells: cap[3].replace(/\n$/, '').split('\n')
          };
    
          for (i = 0; i < item.align.length; i++) {
            if (/^ *-+: *$/.test(item.align[i])) {
              item.align[i] = 'right';
            } else if (/^ *:-+: *$/.test(item.align[i])) {
              item.align[i] = 'center';
            } else if (/^ *:-+ *$/.test(item.align[i])) {
              item.align[i] = 'left';
            } else {
              item.align[i] = null;
            }
          }
    
          for (i = 0; i < item.cells.length; i++) {
            item.cells[i] = item.cells[i].split(/ *\| */);
          }
    
          this.tokens.push(item);
    
          continue;
        }
    
        // lheading
        if (cap = this.rules.lheading.exec(src)) {
          src = src.substring(cap[0].length);
          this.tokens.push({
            type: 'heading',
            depth: cap[2] === '=' ? 1 : 2,
            text: cap[1]
          });
          continue;
        }
    
        // hr
        if (cap = this.rules.hr.exec(src)) {
          src = src.substring(cap[0].length);
          this.tokens.push({
            type: 'hr'
          });
          continue;
        }
    
        // blockquote
        if (cap = this.rules.blockquote.exec(src)) {
          src = src.substring(cap[0].length);
    
          this.tokens.push({
            type: 'blockquote_start'
          });
    
          cap = cap[0].replace(/^ *> ?/gm, '');
    
          // Pass `top` to keep the current
          // "toplevel" state. This is exactly
          // how markdown.pl works.
          this.token(cap, top, true);
    
          this.tokens.push({
            type: 'blockquote_end'
          });
    
          continue;
        }
    
        // list
        if (cap = this.rules.list.exec(src)) {
          src = src.substring(cap[0].length);
          bull = cap[2];
    
          this.tokens.push({
            type: 'list_start',
            ordered: bull.length > 1
          });
    
          // Get each top-level item.
          cap = cap[0].match(this.rules.item);
    
          next = false;
          l = cap.length;
          i = 0;
    
          for (; i < l; i++) {
            item = cap[i];
    
            // Remove the list item's bullet
            // so it is seen as the next token.
            space = item.length;
            item = item.replace(/^ *([*+-]|\d+\.) +/, '');
    
            // Outdent whatever the
            // list item contains. Hacky.
            if (~item.indexOf('\n ')) {
              space -= item.length;
              item = !this.options.pedantic
                ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')
                : item.replace(/^ {1,4}/gm, '');
            }
    
            // Determine whether the next list item belongs here.
            // Backpedal if it does not belong in this list.
            if (this.options.smartLists && i !== l - 1) {
              b = block.bullet.exec(cap[i + 1])[0];
              if (bull !== b && !(bull.length > 1 && b.length > 1)) {
                src = cap.slice(i + 1).join('\n') + src;
                i = l - 1;
              }
            }
    
            // Determine whether item is loose or not.
            // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
            // for discount behavior.
            loose = next || /\n\n(?!\s*$)/.test(item);
            if (i !== l - 1) {
              next = item.charAt(item.length - 1) === '\n';
              if (!loose) { loose = next; }
            }
    
            this.tokens.push({
              type: loose
                ? 'loose_item_start'
                : 'list_item_start'
            });
    
            // Recurse.
            this.token(item, false, bq);
    
            this.tokens.push({
              type: 'list_item_end'
            });
          }
    
          this.tokens.push({
            type: 'list_end'
          });
    
          continue;
        }
    
        // html
        if (cap = this.rules.html.exec(src)) {
          src = src.substring(cap[0].length);
          this.tokens.push({
            type: this.options.sanitize
              ? 'paragraph'
              : 'html',
            pre: !this.options.sanitizer
              && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
            text: cap[0]
          });
          continue;
        }
    
        // def
        if ((!bq && top) && (cap = this.rules.def.exec(src))) {
          src = src.substring(cap[0].length);
          this.tokens.links[cap[1].toLowerCase()] = {
            href: cap[2],
            title: cap[3]
          };
          continue;
        }
    
        // table (gfm)
        if (top && (cap = this.rules.table.exec(src))) {
          src = src.substring(cap[0].length);
    
          item = {
            type: 'table',
            header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
            align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
            cells: cap[3].replace(/(?: *\| *)?\n$/, '').split('\n')
          };
    
          for (i = 0; i < item.align.length; i++) {
            if (/^ *-+: *$/.test(item.align[i])) {
              item.align[i] = 'right';
            } else if (/^ *:-+: *$/.test(item.align[i])) {
              item.align[i] = 'center';
            } else if (/^ *:-+ *$/.test(item.align[i])) {
              item.align[i] = 'left';
            } else {
              item.align[i] = null;
            }
          }
    
          for (i = 0; i < item.cells.length; i++) {
            item.cells[i] = item.cells[i]
              .replace(/^ *\| *| *\| *$/g, '')
              .split(/ *\| */);
          }
    
          this.tokens.push(item);
    
          continue;
        }
    
        // top-level paragraph
        if (top && (cap = this.rules.paragraph.exec(src))) {
          src = src.substring(cap[0].length);
          this.tokens.push({
            type: 'paragraph',
            text: cap[1].charAt(cap[1].length - 1) === '\n'
              ? cap[1].slice(0, -1)
              : cap[1]
          });
          continue;
        }
    
        // text
        if (cap = this.rules.text.exec(src)) {
          // Top-level should never reach here.
          src = src.substring(cap[0].length);
          this.tokens.push({
            type: 'text',
            text: cap[0]
          });
          continue;
        }
    
        if (src) {
          throw new
            Error('Infinite loop on byte: ' + src.charCodeAt(0));
        }
      }
    
      return this.tokens;
    };
    
    /**
     * Inline-Level Grammar
     */
    
    var inline = {
      escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
      autolink: /^<([^ >]+(@|:\/)[^ >]+)>/,
      url: noop,
      tag: /^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,
      link: /^!?\[(inside)\]\(href\)/,
      reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
      nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
      strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,
      em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,
      code: /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,
      br: /^ {2,}\n(?!\s*$)/,
      del: noop,
      text: /^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/
    };
    
    inline._inside = /(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;
    inline._href = /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;
    
    inline.link = replace(inline.link)
      ('inside', inline._inside)
      ('href', inline._href)
      ();
    
    inline.reflink = replace(inline.reflink)
      ('inside', inline._inside)
      ();
    
    /**
     * Normal Inline Grammar
     */
    
    inline.normal = merge({}, inline);
    
    /**
     * Pedantic Inline Grammar
     */
    
    inline.pedantic = merge({}, inline.normal, {
      strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
      em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/
    });
    
    /**
     * GFM Inline Grammar
     */
    
    inline.gfm = merge({}, inline.normal, {
      escape: replace(inline.escape)('])', '~|])')(),
      url: /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,
      del: /^~~(?=\S)([\s\S]*?\S)~~/,
      text: replace(inline.text)
        (']|', '~]|')
        ('|', '|https?://|')
        ()
    });
    
    /**
     * GFM + Line Breaks Inline Grammar
     */
    
    inline.breaks = merge({}, inline.gfm, {
      br: replace(inline.br)('{2,}', '*')(),
      text: replace(inline.gfm.text)('{2,}', '*')()
    });
    
    /**
     * Inline Lexer & Compiler
     */
    
    var InlineLexer  = function (links, options) {
      this.options = options || marked.defaults;
      this.links = links;
      this.rules = inline.normal;
      this.renderer = this.options.renderer || new Renderer;
      this.renderer.options = this.options;
    
      if (!this.links) {
        throw new
          Error('Tokens array requires a `links` property.');
      }
    
      if (this.options.gfm) {
        if (this.options.breaks) {
          this.rules = inline.breaks;
        } else {
          this.rules = inline.gfm;
        }
      } else if (this.options.pedantic) {
        this.rules = inline.pedantic;
      }
    }
    
    /**
     * Expose Inline Rules
     */
    
    InlineLexer.rules = inline;
    
    /**
     * Static Lexing/Compiling Method
     */
    
    InlineLexer.output = function(src, links, options) {
      var inline = new InlineLexer(links, options);
      return inline.output(src);
    };
    
    /**
     * Lexing/Compiling
     */
    
    InlineLexer.prototype.output = function(src) {
      var out = ''
        , link
        , text
        , href
        , cap;
    
      while (src) {
        // escape
        if (cap = this.rules.escape.exec(src)) {
          src = src.substring(cap[0].length);
          out += cap[1];
          continue;
        }
    
        // autolink
        if (cap = this.rules.autolink.exec(src)) {
          src = src.substring(cap[0].length);
          if (cap[2] === '@') {
            text = cap[1].charAt(6) === ':'
              ? this.mangle(cap[1].substring(7))
              : this.mangle(cap[1]);
            href = this.mangle('mailto:') + text;
          } else {
            text = escape(cap[1]);
            href = text;
          }
          out += this.renderer.link(href, null, text);
          continue;
        }
    
        // url (gfm)
        if (!this.inLink && (cap = this.rules.url.exec(src))) {
          src = src.substring(cap[0].length);
          text = escape(cap[1]);
          href = text;
          out += this.renderer.link(href, null, text);
          continue;
        }
    
        // tag
        if (cap = this.rules.tag.exec(src)) {
          if (!this.inLink && /^<a /i.test(cap[0])) {
            this.inLink = true;
          } else if (this.inLink && /^<\/a>/i.test(cap[0])) {
            this.inLink = false;
          }
          src = src.substring(cap[0].length);
          out += this.options.sanitize
            ? this.options.sanitizer
              ? this.options.sanitizer(cap[0])
              : escape(cap[0])
            : cap[0];
          continue;
        }
    
        // link
        if (cap = this.rules.link.exec(src)) {
          src = src.substring(cap[0].length);
          this.inLink = true;
          out += this.outputLink(cap, {
            href: cap[2],
            title: cap[3]
          });
          this.inLink = false;
          continue;
        }
    
        // reflink, nolink
        if ((cap = this.rules.reflink.exec(src))
            || (cap = this.rules.nolink.exec(src))) {
          src = src.substring(cap[0].length);
          link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
          link = this.links[link.toLowerCase()];
          if (!link || !link.href) {
            out += cap[0].charAt(0);
            src = cap[0].substring(1) + src;
            continue;
          }
          this.inLink = true;
          out += this.outputLink(cap, link);
          this.inLink = false;
          continue;
        }
    
        // strong
        if (cap = this.rules.strong.exec(src)) {
          src = src.substring(cap[0].length);
          out += this.renderer.strong(this.output(cap[2] || cap[1]));
          continue;
        }
    
        // em
        if (cap = this.rules.em.exec(src)) {
          src = src.substring(cap[0].length);
          out += this.renderer.em(this.output(cap[2] || cap[1]));
          continue;
        }
    
        // code
        if (cap = this.rules.code.exec(src)) {
          src = src.substring(cap[0].length);
          out += this.renderer.codespan(escape(cap[2], true));
          continue;
        }
    
        // br
        if (cap = this.rules.br.exec(src)) {
          src = src.substring(cap[0].length);
          out += this.renderer.br();
          continue;
        }
    
        // del (gfm)
        if (cap = this.rules.del.exec(src)) {
          src = src.substring(cap[0].length);
          out += this.renderer.del(this.output(cap[1]));
          continue;
        }
    
        // text
        if (cap = this.rules.text.exec(src)) {
          src = src.substring(cap[0].length);
          out += this.renderer.text(escape(this.smartypants(cap[0])));
          continue;
        }
    
        if (src) {
          throw new
            Error('Infinite loop on byte: ' + src.charCodeAt(0));
        }
      }
    
      return out;
    };
    
    /**
     * Compile Link
     */
    
    InlineLexer.prototype.outputLink = function(cap, link) {
      var href = escape(link.href)
        , title = link.title ? escape(link.title) : null;
    
      return cap[0].charAt(0) !== '!'
        ? this.renderer.link(href, title, this.output(cap[1]))
        : this.renderer.image(href, title, escape(cap[1]));
    };
    
    /**
     * Smartypants Transformations
     */
    
    InlineLexer.prototype.smartypants = function(text) {
      if (!this.options.smartypants)  { return text; }
      return text
        // em-dashes
        .replace(/---/g, '\u2014')
        // en-dashes
        .replace(/--/g, '\u2013')
        // opening singles
        .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018')
        // closing singles & apostrophes
        .replace(/'/g, '\u2019')
        // opening doubles
        .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c')
        // closing doubles
        .replace(/"/g, '\u201d')
        // ellipses
        .replace(/\.{3}/g, '\u2026');
    };
    
    /**
     * Mangle Links
     */
    
    InlineLexer.prototype.mangle = function(text) {
      if (!this.options.mangle) { return text; }
      var out = ''
        , l = text.length
        , i = 0
        , ch;
    
      for (; i < l; i++) {
        ch = text.charCodeAt(i);
        if (Math.random() > 0.5) {
          ch = 'x' + ch.toString(16);
        }
        out += '&#' + ch + ';';
      }
    
      return out;
    };
    
    /**
     * Renderer
     */
    
     /**
         * eval:var:Renderer
    */
    
    var Renderer   = function (options) {
      this.options = options || {};
    }
    
    Renderer.prototype.code = function(code, lang, escaped)
    {
      escaped = false;
      if (this.options.highlight) {
        var out = this.options.highlight(code, lang);
        if (out != null && out !== code) {
          escaped = true;
          code = out;
        }
      } else {
            // hack!!! - it's already escapeD?
          //  escaped = true;
      }
    
      if (!lang) {
        return '<pre><code>'
          + (escaped ? code : escape(code, true))
          + '\n</code></pre>';
      }
    
      return '<pre><code class="'
        + this.options.langPrefix
        + escape(lang, true)
        + '">'
        + (escaped ? code : escape(code, true))
        + '\n</code></pre>\n';
    };
    
    Renderer.prototype.blockquote = function(quote) {
      return '<blockquote>\n' + quote + '</blockquote>\n';
    };
    
    Renderer.prototype.html = function(html) {
      return html;
    };
    
    Renderer.prototype.heading = function(text, level, raw) {
      return '<h'
        + level
        + ' id="'
        + this.options.headerPrefix
        + raw.toLowerCase().replace(/[^\w]+/g, '-')
        + '">'
        + text
        + '</h'
        + level
        + '>\n';
    };
    
    Renderer.prototype.hr = function() {
      return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
    };
    
    Renderer.prototype.list = function(body, ordered) {
      var type = ordered ? 'ol' : 'ul';
      return '<' + type + '>\n' + body + '</' + type + '>\n';
    };
    
    Renderer.prototype.listitem = function(text) {
      return '<li>' + text + '</li>\n';
    };
    
    Renderer.prototype.paragraph = function(text) {
      return '<p>' + text + '</p>\n';
    };
    
    Renderer.prototype.table = function(header, body) {
      return '<table class="table table-striped">\n'
        + '<thead>\n'
        + header
        + '</thead>\n'
        + '<tbody>\n'
        + body
        + '</tbody>\n'
        + '</table>\n';
    };
    
    Renderer.prototype.tablerow = function(content) {
      return '<tr>\n' + content + '</tr>\n';
    };
    
    Renderer.prototype.tablecell = function(content, flags) {
      var type = flags.header ? 'th' : 'td';
      var tag = flags.align
        ? '<' + type + ' style="text-align:' + flags.align + '">'
        : '<' + type + '>';
      return tag + content + '</' + type + '>\n';
    };
    
    // span level renderer
    Renderer.prototype.strong = function(text) {
      return '<strong>' + text + '</strong>';
    };
    
    Renderer.prototype.em = function(text) {
      return '<em>' + text + '</em>';
    };
    
    Renderer.prototype.codespan = function(text) {
      return '<code>' + text + '</code>';
    };
    
    Renderer.prototype.br = function() {
      return this.options.xhtml ? '<br/>' : '<br>';
    };
    
    Renderer.prototype.del = function(text) {
      return '<del>' + text + '</del>';
    };
    
    Renderer.prototype.link = function(href, title, text) {
      if (this.options.sanitize) {
        try {
          var prot = decodeURIComponent(unescape(href))
            .replace(/[^\w:]/g, '')
            .toLowerCase();
        } catch (e) {
          return '';
        }
        if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {
          return '';
        }
      }
      var out = '<a href="' + href + '"';
      if (title) {
        out += ' title="' + title + '"';
      }
      out += '>' + text + '</a>';
      return out;
    };
    
    Renderer.prototype.image = function(href, title, text) {
      var out = '<img src="' + href + '" alt="' + text + '"';
      if (title) {
        out += ' title="' + title + '"';
      }
      out += this.options.xhtml ? '/>' : '>';
      return out;
    };
    
    Renderer.prototype.text = function(text) {
      return text;
    };
    
    /**
     * Parsing & Compiling
     */
         /**
         * eval:var:Parser
    */
    
    var Parser= function (options) {
      this.tokens = [];
      this.token = null;
      this.options = options || marked.defaults;
      this.options.renderer = this.options.renderer || new Renderer;
      this.renderer = this.options.renderer;
      this.renderer.options = this.options;
    }
    
    /**
     * Static Parse Method
     */
    
    Parser.parse = function(src, options, renderer) {
      var parser = new Parser(options, renderer);
      return parser.parse(src);
    };
    
    /**
     * Parse Loop
     */
    
    Parser.prototype.parse = function(src) {
      this.inline = new InlineLexer(src.links, this.options, this.renderer);
      this.tokens = src.reverse();
    
      var out = '';
      while (this.next()) {
        out += this.tok();
      }
    
      return out;
    };
    
    /**
     * Next Token
     */
    
    Parser.prototype.next = function() {
      return this.token = this.tokens.pop();
    };
    
    /**
     * Preview Next Token
     */
    
    Parser.prototype.peek = function() {
      return this.tokens[this.tokens.length - 1] || 0;
    };
    
    /**
     * Parse Text Tokens
     */
    
    Parser.prototype.parseText = function() {
      var body = this.token.text;
    
      while (this.peek().type === 'text') {
        body += '\n' + this.next().text;
      }
    
      return this.inline.output(body);
    };
    
    /**
     * Parse Current Token
     */
    
    Parser.prototype.tok = function() {
      switch (this.token.type) {
        case 'space': {
          return '';
        }
        case 'hr': {
          return this.renderer.hr();
        }
        case 'heading': {
          return this.renderer.heading(
            this.inline.output(this.token.text),
            this.token.depth,
            this.token.text);
        }
        case 'code': {
          return this.renderer.code(this.token.text,
            this.token.lang,
            this.token.escaped);
        }
        case 'table': {
          var header = ''
            , body = ''
            , i
            , row
            , cell
            , flags
            , j;
    
          // header
          cell = '';
          for (i = 0; i < this.token.header.length; i++) {
            flags = { header: true, align: this.token.align[i] };
            cell += this.renderer.tablecell(
              this.inline.output(this.token.header[i]),
              { header: true, align: this.token.align[i] }
            );
          }
          header += this.renderer.tablerow(cell);
    
          for (i = 0; i < this.token.cells.length; i++) {
            row = this.token.cells[i];
    
            cell = '';
            for (j = 0; j < row.length; j++) {
              cell += this.renderer.tablecell(
                this.inline.output(row[j]),
                { header: false, align: this.token.align[j] }
              );
            }
    
            body += this.renderer.tablerow(cell);
          }
          return this.renderer.table(header, body);
        }
        case 'blockquote_start': {
          var body = '';
    
          while (this.next().type !== 'blockquote_end') {
            body += this.tok();
          }
    
          return this.renderer.blockquote(body);
        }
        case 'list_start': {
          var body = ''
            , ordered = this.token.ordered;
    
          while (this.next().type !== 'list_end') {
            body += this.tok();
          }
    
          return this.renderer.list(body, ordered);
        }
        case 'list_item_start': {
          var body = '';
    
          while (this.next().type !== 'list_item_end') {
            body += this.token.type === 'text'
              ? this.parseText()
              : this.tok();
          }
    
          return this.renderer.listitem(body);
        }
        case 'loose_item_start': {
          var body = '';
    
          while (this.next().type !== 'list_item_end') {
            body += this.tok();
          }
    
          return this.renderer.listitem(body);
        }
        case 'html': {
          var html = !this.token.pre && !this.options.pedantic
            ? this.inline.output(this.token.text)
            : this.token.text;
          return this.renderer.html(html);
        }
        case 'paragraph': {
          return this.renderer.paragraph(this.inline.output(this.token.text));
        }
        case 'text': {
          return this.renderer.paragraph(this.parseText());
        }
      }
    };
  
    
    /**
     * Marked
     */
         /**
         * eval:var:marked
    */
    var marked = function (src, opt, callback) {
      if (callback || typeof opt === 'function') {
        if (!callback) {
          callback = opt;
          opt = null;
        }
    
        opt = merge({}, marked.defaults, opt || {});
    
        var highlight = opt.highlight
          , tokens
          , pending
          , i = 0;
    
        try {
          tokens = Lexer.lex(src, opt)
        } catch (e) {
          return callback(e);
        }
    
        pending = tokens.length;
         /**
         * eval:var:done
    */
        var done = function(err) {
          if (err) {
            opt.highlight = highlight;
            return callback(err);
          }
    
          var out;
    
          try {
            out = Parser.parse(tokens, opt);
          } catch (e) {
            err = e;
          }
    
          opt.highlight = highlight;
    
          return err
            ? callback(err)
            : callback(null, out);
        };
    
        if (!highlight || highlight.length < 3) {
          return done();
        }
    
        delete opt.highlight;
    
        if (!pending) { return done(); }
    
        for (; i < tokens.length; i++) {
          (function(token) {
            if (token.type !== 'code') {
              return --pending || done();
            }
            return highlight(token.text, token.lang, function(err, code) {
              if (err) { return done(err); }
              if (code == null || code === token.text) {
                return --pending || done();
              }
              token.text = code;
              token.escaped = true;
              --pending || done();
            });
          })(tokens[i]);
        }
    
        return;
      }
      try {
        if (opt) { opt = merge({}, marked.defaults, opt); }
        return Parser.parse(Lexer.lex(src, opt), opt);
      } catch (e) {
        e.message += '\nPlease report this to https://github.com/chjj/marked.';
        if ((opt || marked.defaults).silent) {
          return '<p>An error occured:</p><pre>'
            + escape(e.message + '', true)
            + '</pre>';
        }
        throw e;
      }
    }
    
    /**
     * Options
     */
    
    marked.options =
    marked.setOptions = function(opt) {
      merge(marked.defaults, opt);
      return marked;
    };
    
    marked.defaults = {
      gfm: true,
      tables: true,
      breaks: false,
      pedantic: false,
      sanitize: false,
      sanitizer: null,
      mangle: true,
      smartLists: false,
      silent: false,
      highlight: null,
      langPrefix: 'lang-',
      smartypants: false,
      headerPrefix: '',
      renderer: new Renderer,
      xhtml: false
    };
    
    /**
     * Expose
     */
    
    marked.Parser = Parser;
    marked.parser = Parser.parse;
    
    marked.Renderer = Renderer;
    
    marked.Lexer = Lexer;
    marked.lexer = Lexer.lex;
    
    marked.InlineLexer = InlineLexer;
    marked.inlineLexer = InlineLexer.output;
    
    marked.parse = marked;
    
    Roo.Markdown.marked = marked;

})();/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */



/*
 * These classes are derivatives of the similarly named classes in the YUI Library.
 * The original license:
 * Copyright (c) 2006, Yahoo! Inc. All rights reserved.
 * Code licensed under the BSD License:
 * http://developer.yahoo.net/yui/license.txt
 */

(function() {

var Event=Roo.EventManager;
var Dom=Roo.lib.Dom;

/**
 * @class Roo.dd.DragDrop
 * @extends Roo.util.Observable
 * Defines the interface and base operation of items that that can be
 * dragged or can be drop targets.  It was designed to be extended, overriding
 * the event handlers for startDrag, onDrag, onDragOver and onDragOut.
 * Up to three html elements can be associated with a DragDrop instance:
 * <ul>
 * <li>linked element: the element that is passed into the constructor.
 * This is the element which defines the boundaries for interaction with
 * other DragDrop objects.</li>
 * <li>handle element(s): The drag operation only occurs if the element that
 * was clicked matches a handle element.  By default this is the linked
 * element, but there are times that you will want only a portion of the
 * linked element to initiate the drag operation, and the setHandleElId()
 * method provides a way to define this.</li>
 * <li>drag element: this represents the element that would be moved along
 * with the cursor during a drag operation.  By default, this is the linked
 * element itself as in {@link Roo.dd.DD}.  setDragElId() lets you define
 * a separate element that would be moved, as in {@link Roo.dd.DDProxy}.
 * </li>
 * </ul>
 * This class should not be instantiated until the onload event to ensure that
 * the associated elements are available.
 * The following would define a DragDrop obj that would interact with any
 * other DragDrop obj in the "group1" group:
 * <pre>
 *  dd = new Roo.dd.DragDrop("div1", "group1");
 * </pre>
 * Since none of the event handlers have been implemented, nothing would
 * actually happen if you were to run the code above.  Normally you would
 * override this class or one of the default implementations, but you can
 * also override the methods you want on an instance of the class...
 * <pre>
 *  dd.onDragDrop = function(e, id) {
 *  &nbsp;&nbsp;alert("dd was dropped on " + id);
 *  }
 * </pre>
 * @constructor
 * @param {String} id of the element that is linked to this instance
 * @param {String} sGroup the group of related DragDrop objects
 * @param {object} config an object containing configurable attributes
 *                Valid properties for DragDrop:
 *                    padding, isTarget, maintainOffset, primaryButtonOnly
 */
Roo.dd.DragDrop = function(id, sGroup, config) {
    if (id) {
        this.init(id, sGroup, config);
    }
    
};

Roo.extend(Roo.dd.DragDrop, Roo.util.Observable , {

    /**
     * The id of the element associated with this object.  This is what we
     * refer to as the "linked element" because the size and position of
     * this element is used to determine when the drag and drop objects have
     * interacted.
     * @property id
     * @type String
     */
    id: null,

    /**
     * Configuration attributes passed into the constructor
     * @property config
     * @type object
     */
    config: null,

    /**
     * The id of the element that will be dragged.  By default this is same
     * as the linked element , but could be changed to another element. Ex:
     * Roo.dd.DDProxy
     * @property dragElId
     * @type String
     * @private
     */
    dragElId: null,

    /**
     * the id of the element that initiates the drag operation.  By default
     * this is the linked element, but could be changed to be a child of this
     * element.  This lets us do things like only starting the drag when the
     * header element within the linked html element is clicked.
     * @property handleElId
     * @type String
     * @private
     */
    handleElId: null,

    /**
     * An associative array of HTML tags that will be ignored if clicked.
     * @property invalidHandleTypes
     * @type {string: string}
     */
    invalidHandleTypes: null,

    /**
     * An associative array of ids for elements that will be ignored if clicked
     * @property invalidHandleIds
     * @type {string: string}
     */
    invalidHandleIds: null,

    /**
     * An indexted array of css class names for elements that will be ignored
     * if clicked.
     * @property invalidHandleClasses
     * @type string[]
     */
    invalidHandleClasses: null,

    /**
     * The linked element's absolute X position at the time the drag was
     * started
     * @property startPageX
     * @type int
     * @private
     */
    startPageX: 0,

    /**
     * The linked element's absolute X position at the time the drag was
     * started
     * @property startPageY
     * @type int
     * @private
     */
    startPageY: 0,

    /**
     * The group defines a logical collection of DragDrop objects that are
     * related.  Instances only get events when interacting with other
     * DragDrop object in the same group.  This lets us define multiple
     * groups using a single DragDrop subclass if we want.
     * @property groups
     * @type {string: string}
     */
    groups: null,

    /**
     * Individual drag/drop instances can be locked.  This will prevent
     * onmousedown start drag.
     * @property locked
     * @type boolean
     * @private
     */
    locked: false,

    /**
     * Lock this instance
     * @method lock
     */
    lock: function() { this.locked = true; },

    /**
     * Unlock this instace
     * @method unlock
     */
    unlock: function() { this.locked = false; },

    /**
     * By default, all insances can be a drop target.  This can be disabled by
     * setting isTarget to false.
     * @method isTarget
     * @type boolean
     */
    isTarget: true,

    /**
     * The padding configured for this drag and drop object for calculating
     * the drop zone intersection with this object.
     * @method padding
     * @type int[]
     */
    padding: null,

    /**
     * Cached reference to the linked element
     * @property _domRef
     * @private
     */
    _domRef: null,

    /**
     * Internal typeof flag
     * @property __ygDragDrop
     * @private
     */
    __ygDragDrop: true,

    /**
     * Set to true when horizontal contraints are applied
     * @property constrainX
     * @type boolean
     * @private
     */
    constrainX: false,

    /**
     * Set to true when vertical contraints are applied
     * @property constrainY
     * @type boolean
     * @private
     */
    constrainY: false,

    /**
     * The left constraint
     * @property minX
     * @type int
     * @private
     */
    minX: 0,

    /**
     * The right constraint
     * @property maxX
     * @type int
     * @private
     */
    maxX: 0,

    /**
     * The up constraint
     * @property minY
     * @type int
     * @type int
     * @private
     */
    minY: 0,

    /**
     * The down constraint
     * @property maxY
     * @type int
     * @private
     */
    maxY: 0,

    /**
     * Maintain offsets when we resetconstraints.  Set to true when you want
     * the position of the element relative to its parent to stay the same
     * when the page changes
     *
     * @property maintainOffset
     * @type boolean
     */
    maintainOffset: false,

    /**
     * Array of pixel locations the element will snap to if we specified a
     * horizontal graduation/interval.  This array is generated automatically
     * when you define a tick interval.
     * @property xTicks
     * @type int[]
     */
    xTicks: null,

    /**
     * Array of pixel locations the element will snap to if we specified a
     * vertical graduation/interval.  This array is generated automatically
     * when you define a tick interval.
     * @property yTicks
     * @type int[]
     */
    yTicks: null,

    /**
     * By default the drag and drop instance will only respond to the primary
     * button click (left button for a right-handed mouse).  Set to true to
     * allow drag and drop to start with any mouse click that is propogated
     * by the browser
     * @property primaryButtonOnly
     * @type boolean
     */
    primaryButtonOnly: true,

    /**
     * The availabe property is false until the linked dom element is accessible.
     * @property available
     * @type boolean
     */
    available: false,

    /**
     * By default, drags can only be initiated if the mousedown occurs in the
     * region the linked element is.  This is done in part to work around a
     * bug in some browsers that mis-report the mousedown if the previous
     * mouseup happened outside of the window.  This property is set to true
     * if outer handles are defined.
     *
     * @property hasOuterHandles
     * @type boolean
     * @default false
     */
    hasOuterHandles: false,

    /**
     * Code that executes immediately before the startDrag event
     * @method b4StartDrag
     * @private
     */
    b4StartDrag: function(x, y) { },

    /**
     * Abstract method called after a drag/drop object is clicked
     * and the drag or mousedown time thresholds have beeen met.
     * @method startDrag
     * @param {int} X click location
     * @param {int} Y click location
     */
    startDrag: function(x, y) { /* override this */ },

    /**
     * Code that executes immediately before the onDrag event
     * @method b4Drag
     * @private
     */
    b4Drag: function(e) { },

    /**
     * Abstract method called during the onMouseMove event while dragging an
     * object.
     * @method onDrag
     * @param {Event} e the mousemove event
     */
    onDrag: function(e) { /* override this */ },

    /**
     * Abstract method called when this element fist begins hovering over
     * another DragDrop obj
     * @method onDragEnter
     * @param {Event} e the mousemove event
     * @param {String|DragDrop[]} id In POINT mode, the element
     * id this is hovering over.  In INTERSECT mode, an array of one or more
     * dragdrop items being hovered over.
     */
    onDragEnter: function(e, id) { /* override this */ },

    /**
     * Code that executes immediately before the onDragOver event
     * @method b4DragOver
     * @private
     */
    b4DragOver: function(e) { },

    /**
     * Abstract method called when this element is hovering over another
     * DragDrop obj
     * @method onDragOver
     * @param {Event} e the mousemove event
     * @param {String|DragDrop[]} id In POINT mode, the element
     * id this is hovering over.  In INTERSECT mode, an array of dd items
     * being hovered over.
     */
    onDragOver: function(e, id) { /* override this */ },

    /**
     * Code that executes immediately before the onDragOut event
     * @method b4DragOut
     * @private
     */
    b4DragOut: function(e) { },

    /**
     * Abstract method called when we are no longer hovering over an element
     * @method onDragOut
     * @param {Event} e the mousemove event
     * @param {String|DragDrop[]} id In POINT mode, the element
     * id this was hovering over.  In INTERSECT mode, an array of dd items
     * that the mouse is no longer over.
     */
    onDragOut: function(e, id) { /* override this */ },

    /**
     * Code that executes immediately before the onDragDrop event
     * @method b4DragDrop
     * @private
     */
    b4DragDrop: function(e) { },

    /**
     * Abstract method called when this item is dropped on another DragDrop
     * obj
     * @method onDragDrop
     * @param {Event} e the mouseup event
     * @param {String|DragDrop[]} id In POINT mode, the element
     * id this was dropped on.  In INTERSECT mode, an array of dd items this
     * was dropped on.
     */
    onDragDrop: function(e, id) { /* override this */ },

    /**
     * Abstract method called when this item is dropped on an area with no
     * drop target
     * @method onInvalidDrop
     * @param {Event} e the mouseup event
     */
    onInvalidDrop: function(e) { /* override this */ },

    /**
     * Code that executes immediately before the endDrag event
     * @method b4EndDrag
     * @private
     */
    b4EndDrag: function(e) { },

    /**
     * Fired when we are done dragging the object
     * @method endDrag
     * @param {Event} e the mouseup event
     */
    endDrag: function(e) { /* override this */ },

    /**
     * Code executed immediately before the onMouseDown event
     * @method b4MouseDown
     * @param {Event} e the mousedown event
     * @private
     */
    b4MouseDown: function(e) {  },

    /**
     * Event handler that fires when a drag/drop obj gets a mousedown
     * @method onMouseDown
     * @param {Event} e the mousedown event
     */
    onMouseDown: function(e) { /* override this */ },

    /**
     * Event handler that fires when a drag/drop obj gets a mouseup
     * @method onMouseUp
     * @param {Event} e the mouseup event
     */
    onMouseUp: function(e) { /* override this */ },

    /**
     * Override the onAvailable method to do what is needed after the initial
     * position was determined.
     * @method onAvailable
     */
    onAvailable: function () {
    },

    /*
     * Provides default constraint padding to "constrainTo" elements (defaults to {left: 0, right:0, top:0, bottom:0}).
     * @type Object
     */
    defaultPadding : {left:0, right:0, top:0, bottom:0},

    /*
     * Initializes the drag drop object's constraints to restrict movement to a certain element.
 *
 * Usage:
 <pre><code>
 var dd = new Roo.dd.DDProxy("dragDiv1", "proxytest",
                { dragElId: "existingProxyDiv" });
 dd.startDrag = function(){
     this.constrainTo("parent-id");
 };
 </code></pre>
 * Or you can initalize it using the {@link Roo.Element} object:
 <pre><code>
 Roo.get("dragDiv1").initDDProxy("proxytest", {dragElId: "existingProxyDiv"}, {
     startDrag : function(){
         this.constrainTo("parent-id");
     }
 });
 </code></pre>
     * @param {String/HTMLElement/Element} constrainTo The element to constrain to.
     * @param {Object/Number} pad (optional) Pad provides a way to specify "padding" of the constraints,
     * and can be either a number for symmetrical padding (4 would be equal to {left:4, right:4, top:4, bottom:4}) or
     * an object containing the sides to pad. For example: {right:10, bottom:10}
     * @param {Boolean} inContent (optional) Constrain the draggable in the content box of the element (inside padding and borders)
     */
    constrainTo : function(constrainTo, pad, inContent){
        if(typeof pad == "number"){
            pad = {left: pad, right:pad, top:pad, bottom:pad};
        }
        pad = pad || this.defaultPadding;
        var b = Roo.get(this.getEl()).getBox();
        var ce = Roo.get(constrainTo);
        var s = ce.getScroll();
        var c, cd = ce.dom;
        if(cd == document.body){
            c = { x: s.left, y: s.top, width: Roo.lib.Dom.getViewWidth(), height: Roo.lib.Dom.getViewHeight()};
        }else{
            xy = ce.getXY();
            c = {x : xy[0]+s.left, y: xy[1]+s.top, width: cd.clientWidth, height: cd.clientHeight};
        }


        var topSpace = b.y - c.y;
        var leftSpace = b.x - c.x;

        this.resetConstraints();
        this.setXConstraint(leftSpace - (pad.left||0), // left
                c.width - leftSpace - b.width - (pad.right||0) //right
        );
        this.setYConstraint(topSpace - (pad.top||0), //top
                c.height - topSpace - b.height - (pad.bottom||0) //bottom
        );
    },

    /**
     * Returns a reference to the linked element
     * @method getEl
     * @return {HTMLElement} the html element
     */
    getEl: function() {
        if (!this._domRef) {
            this._domRef = Roo.getDom(this.id);
        }

        return this._domRef;
    },

    /**
     * Returns a reference to the actual element to drag.  By default this is
     * the same as the html element, but it can be assigned to another
     * element. An example of this can be found in Roo.dd.DDProxy
     * @method getDragEl
     * @return {HTMLElement} the html element
     */
    getDragEl: function() {
        return Roo.getDom(this.dragElId);
    },

    /**
     * Sets up the DragDrop object.  Must be called in the constructor of any
     * Roo.dd.DragDrop subclass
     * @method init
     * @param id the id of the linked element
     * @param {String} sGroup the group of related items
     * @param {object} config configuration attributes
     */
    init: function(id, sGroup, config) {
        this.initTarget(id, sGroup, config);
        if (!Roo.isTouch) {
            Event.on(this.id, "mousedown", this.handleMouseDown, this);
        }
        Event.on(this.id, "touchstart", this.handleMouseDown, this);
        // Event.on(this.id, "selectstart", Event.preventDefault);
    },

    /**
     * Initializes Targeting functionality only... the object does not
     * get a mousedown handler.
     * @method initTarget
     * @param id the id of the linked element
     * @param {String} sGroup the group of related items
     * @param {object} config configuration attributes
     */
    initTarget: function(id, sGroup, config) {

        // configuration attributes
        this.config = config || {};

        // create a local reference to the drag and drop manager
        this.DDM = Roo.dd.DDM;
        // initialize the groups array
        this.groups = {};

        // assume that we have an element reference instead of an id if the
        // parameter is not a string
        if (typeof id !== "string") {
            id = Roo.id(id);
        }

        // set the id
        this.id = id;

        // add to an interaction group
        this.addToGroup((sGroup) ? sGroup : "default");

        // We don't want to register this as the handle with the manager
        // so we just set the id rather than calling the setter.
        this.handleElId = id;

        // the linked element is the element that gets dragged by default
        this.setDragElId(id);

        // by default, clicked anchors will not start drag operations.
        this.invalidHandleTypes = { A: "A" };
        this.invalidHandleIds = {};
        this.invalidHandleClasses = [];

        this.applyConfig();

        this.handleOnAvailable();
    },

    /**
     * Applies the configuration parameters that were passed into the constructor.
     * This is supposed to happen at each level through the inheritance chain.  So
     * a DDProxy implentation will execute apply config on DDProxy, DD, and
     * DragDrop in order to get all of the parameters that are available in
     * each object.
     * @method applyConfig
     */
    applyConfig: function() {

        // configurable properties:
        //    padding, isTarget, maintainOffset, primaryButtonOnly
        this.padding           = this.config.padding || [0, 0, 0, 0];
        this.isTarget          = (this.config.isTarget !== false);
        this.maintainOffset    = (this.config.maintainOffset);
        this.primaryButtonOnly = (this.config.primaryButtonOnly !== false);

    },

    /**
     * Executed when the linked element is available
     * @method handleOnAvailable
     * @private
     */
    handleOnAvailable: function() {
        this.available = true;
        this.resetConstraints();
        this.onAvailable();
    },

     /**
     * Configures the padding for the target zone in px.  Effectively expands
     * (or reduces) the virtual object size for targeting calculations.
     * Supports css-style shorthand; if only one parameter is passed, all sides
     * will have that padding, and if only two are passed, the top and bottom
     * will have the first param, the left and right the second.
     * @method setPadding
     * @param {int} iTop    Top pad
     * @param {int} iRight  Right pad
     * @param {int} iBot    Bot pad
     * @param {int} iLeft   Left pad
     */
    setPadding: function(iTop, iRight, iBot, iLeft) {
        // this.padding = [iLeft, iRight, iTop, iBot];
        if (!iRight && 0 !== iRight) {
            this.padding = [iTop, iTop, iTop, iTop];
        } else if (!iBot && 0 !== iBot) {
            this.padding = [iTop, iRight, iTop, iRight];
        } else {
            this.padding = [iTop, iRight, iBot, iLeft];
        }
    },

    /**
     * Stores the initial placement of the linked element.
     * @method setInitialPosition
     * @param {int} diffX   the X offset, default 0
     * @param {int} diffY   the Y offset, default 0
     */
    setInitPosition: function(diffX, diffY) {
        var el = this.getEl();

        if (!this.DDM.verifyEl(el)) {
            return;
        }

        var dx = diffX || 0;
        var dy = diffY || 0;

        var p = Dom.getXY( el );

        this.initPageX = p[0] - dx;
        this.initPageY = p[1] - dy;

        this.lastPageX = p[0];
        this.lastPageY = p[1];


        this.setStartPosition(p);
    },

    /**
     * Sets the start position of the element.  This is set when the obj
     * is initialized, the reset when a drag is started.
     * @method setStartPosition
     * @param pos current position (from previous lookup)
     * @private
     */
    setStartPosition: function(pos) {
        var p = pos || Dom.getXY( this.getEl() );
        this.deltaSetXY = null;

        this.startPageX = p[0];
        this.startPageY = p[1];
    },

    /**
     * Add this instance to a group of related drag/drop objects.  All
     * instances belong to at least one group, and can belong to as many
     * groups as needed.
     * @method addToGroup
     * @param sGroup {string} the name of the group
     */
    addToGroup: function(sGroup) {
        this.groups[sGroup] = true;
        this.DDM.regDragDrop(this, sGroup);
    },

    /**
     * Remove's this instance from the supplied interaction group
     * @method removeFromGroup
     * @param {string}  sGroup  The group to drop
     */
    removeFromGroup: function(sGroup) {
        if (this.groups[sGroup]) {
            delete this.groups[sGroup];
        }

        this.DDM.removeDDFromGroup(this, sGroup);
    },

    /**
     * Allows you to specify that an element other than the linked element
     * will be moved with the cursor during a drag
     * @method setDragElId
     * @param id {string} the id of the element that will be used to initiate the drag
     */
    setDragElId: function(id) {
        this.dragElId = id;
    },

    /**
     * Allows you to specify a child of the linked element that should be
     * used to initiate the drag operation.  An example of this would be if
     * you have a content div with text and links.  Clicking anywhere in the
     * content area would normally start the drag operation.  Use this method
     * to specify that an element inside of the content div is the element
     * that starts the drag operation.
     * @method setHandleElId
     * @param id {string} the id of the element that will be used to
     * initiate the drag.
     */
    setHandleElId: function(id) {
        if (typeof id !== "string") {
            id = Roo.id(id);
        }
        this.handleElId = id;
        this.DDM.regHandle(this.id, id);
    },

    /**
     * Allows you to set an element outside of the linked element as a drag
     * handle
     * @method setOuterHandleElId
     * @param id the id of the element that will be used to initiate the drag
     */
    setOuterHandleElId: function(id) {
        if (typeof id !== "string") {
            id = Roo.id(id);
        }
        Event.on(id, "mousedown",
                this.handleMouseDown, this);
        this.setHandleElId(id);

        this.hasOuterHandles = true;
    },

    /**
     * Remove all drag and drop hooks for this element
     * @method unreg
     */
    unreg: function() {
        Event.un(this.id, "mousedown",
                this.handleMouseDown);
        Event.un(this.id, "touchstart",
                this.handleMouseDown);
        this._domRef = null;
        this.DDM._remove(this);
    },

    destroy : function(){
        this.unreg();
    },

    /**
     * Returns true if this instance is locked, or the drag drop mgr is locked
     * (meaning that all drag/drop is disabled on the page.)
     * @method isLocked
     * @return {boolean} true if this obj or all drag/drop is locked, else
     * false
     */
    isLocked: function() {
        return (this.DDM.isLocked() || this.locked);
    },

    /**
     * Fired when this object is clicked
     * @method handleMouseDown
     * @param {Event} e
     * @param {Roo.dd.DragDrop} oDD the clicked dd object (this dd obj)
     * @private
     */
    handleMouseDown: function(e, oDD){
     
        if (!Roo.isTouch && this.primaryButtonOnly && e.button != 0) {
            //Roo.log('not touch/ button !=0');
            return;
        }
        if (e.browserEvent.touches && e.browserEvent.touches.length != 1) {
            return; // double touch..
        }
        

        if (this.isLocked()) {
            //Roo.log('locked');
            return;
        }

        this.DDM.refreshCache(this.groups);
//        Roo.log([Roo.lib.Event.getPageX(e), Roo.lib.Event.getPageY(e)]);
        var pt = new Roo.lib.Point(Roo.lib.Event.getPageX(e), Roo.lib.Event.getPageY(e));
        if (!this.hasOuterHandles && !this.DDM.isOverTarget(pt, this) )  {
            //Roo.log('no outer handes or not over target');
                // do nothing.
        } else {
//            Roo.log('check validator');
            if (this.clickValidator(e)) {
//                Roo.log('validate success');
                // set the initial element position
                this.setStartPosition();


                this.b4MouseDown(e);
                this.onMouseDown(e);

                this.DDM.handleMouseDown(e, this);

                this.DDM.stopEvent(e);
            } else {


            }
        }
    },

    clickValidator: function(e) {
        var target = e.getTarget();
        return ( this.isValidHandleChild(target) &&
                    (this.id == this.handleElId ||
                        this.DDM.handleWasClicked(target, this.id)) );
    },

    /**
     * Allows you to specify a tag name that should not start a drag operation
     * when clicked.  This is designed to facilitate embedding links within a
     * drag handle that do something other than start the drag.
     * @method addInvalidHandleType
     * @param {string} tagName the type of element to exclude
     */
    addInvalidHandleType: function(tagName) {
        var type = tagName.toUpperCase();
        this.invalidHandleTypes[type] = type;
    },

    /**
     * Lets you to specify an element id for a child of a drag handle
     * that should not initiate a drag
     * @method addInvalidHandleId
     * @param {string} id the element id of the element you wish to ignore
     */
    addInvalidHandleId: function(id) {
        if (typeof id !== "string") {
            id = Roo.id(id);
        }
        this.invalidHandleIds[id] = id;
    },

    /**
     * Lets you specify a css class of elements that will not initiate a drag
     * @method addInvalidHandleClass
     * @param {string} cssClass the class of the elements you wish to ignore
     */
    addInvalidHandleClass: function(cssClass) {
        this.invalidHandleClasses.push(cssClass);
    },

    /**
     * Unsets an excluded tag name set by addInvalidHandleType
     * @method removeInvalidHandleType
     * @param {string} tagName the type of element to unexclude
     */
    removeInvalidHandleType: function(tagName) {
        var type = tagName.toUpperCase();
        // this.invalidHandleTypes[type] = null;
        delete this.invalidHandleTypes[type];
    },

    /**
     * Unsets an invalid handle id
     * @method removeInvalidHandleId
     * @param {string} id the id of the element to re-enable
     */
    removeInvalidHandleId: function(id) {
        if (typeof id !== "string") {
            id = Roo.id(id);
        }
        delete this.invalidHandleIds[id];
    },

    /**
     * Unsets an invalid css class
     * @method removeInvalidHandleClass
     * @param {string} cssClass the class of the element(s) you wish to
     * re-enable
     */
    removeInvalidHandleClass: function(cssClass) {
        for (var i=0, len=this.invalidHandleClasses.length; i<len; ++i) {
            if (this.invalidHandleClasses[i] == cssClass) {
                delete this.invalidHandleClasses[i];
            }
        }
    },

    /**
     * Checks the tag exclusion list to see if this click should be ignored
     * @method isValidHandleChild
     * @param {HTMLElement} node the HTMLElement to evaluate
     * @return {boolean} true if this is a valid tag type, false if not
     */
    isValidHandleChild: function(node) {

        var valid = true;
        // var n = (node.nodeName == "#text") ? node.parentNode : node;
        var nodeName;
        try {
            nodeName = node.nodeName.toUpperCase();
        } catch(e) {
            nodeName = node.nodeName;
        }
        valid = valid && !this.invalidHandleTypes[nodeName];
        valid = valid && !this.invalidHandleIds[node.id];

        for (var i=0, len=this.invalidHandleClasses.length; valid && i<len; ++i) {
            valid = !Dom.hasClass(node, this.invalidHandleClasses[i]);
        }


        return valid;

    },

    /**
     * Create the array of horizontal tick marks if an interval was specified
     * in setXConstraint().
     * @method setXTicks
     * @private
     */
    setXTicks: function(iStartX, iTickSize) {
        this.xTicks = [];
        this.xTickSize = iTickSize;

        var tickMap = {};

        for (var i = this.initPageX; i >= this.minX; i = i - iTickSize) {
            if (!tickMap[i]) {
                this.xTicks[this.xTicks.length] = i;
                tickMap[i] = true;
            }
        }

        for (i = this.initPageX; i <= this.maxX; i = i + iTickSize) {
            if (!tickMap[i]) {
                this.xTicks[this.xTicks.length] = i;
                tickMap[i] = true;
            }
        }

        this.xTicks.sort(this.DDM.numericSort) ;
    },

    /**
     * Create the array of vertical tick marks if an interval was specified in
     * setYConstraint().
     * @method setYTicks
     * @private
     */
    setYTicks: function(iStartY, iTickSize) {
        this.yTicks = [];
        this.yTickSize = iTickSize;

        var tickMap = {};

        for (var i = this.initPageY; i >= this.minY; i = i - iTickSize) {
            if (!tickMap[i]) {
                this.yTicks[this.yTicks.length] = i;
                tickMap[i] = true;
            }
        }

        for (i = this.initPageY; i <= this.maxY; i = i + iTickSize) {
            if (!tickMap[i]) {
                this.yTicks[this.yTicks.length] = i;
                tickMap[i] = true;
            }
        }

        this.yTicks.sort(this.DDM.numericSort) ;
    },

    /**
     * By default, the element can be dragged any place on the screen.  Use
     * this method to limit the horizontal travel of the element.  Pass in
     * 0,0 for the parameters if you want to lock the drag to the y axis.
     * @method setXConstraint
     * @param {int} iLeft the number of pixels the element can move to the left
     * @param {int} iRight the number of pixels the element can move to the
     * right
     * @param {int} iTickSize optional parameter for specifying that the
     * element
     * should move iTickSize pixels at a time.
     */
    setXConstraint: function(iLeft, iRight, iTickSize) {
        this.leftConstraint = iLeft;
        this.rightConstraint = iRight;

        this.minX = this.initPageX - iLeft;
        this.maxX = this.initPageX + iRight;
        if (iTickSize) { this.setXTicks(this.initPageX, iTickSize); }

        this.constrainX = true;
    },

    /**
     * Clears any constraints applied to this instance.  Also clears ticks
     * since they can't exist independent of a constraint at this time.
     * @method clearConstraints
     */
    clearConstraints: function() {
        this.constrainX = false;
        this.constrainY = false;
        this.clearTicks();
    },

    /**
     * Clears any tick interval defined for this instance
     * @method clearTicks
     */
    clearTicks: function() {
        this.xTicks = null;
        this.yTicks = null;
        this.xTickSize = 0;
        this.yTickSize = 0;
    },

    /**
     * By default, the element can be dragged any place on the screen.  Set
     * this to limit the vertical travel of the element.  Pass in 0,0 for the
     * parameters if you want to lock the drag to the x axis.
     * @method setYConstraint
     * @param {int} iUp the number of pixels the element can move up
     * @param {int} iDown the number of pixels the element can move down
     * @param {int} iTickSize optional parameter for specifying that the
     * element should move iTickSize pixels at a time.
     */
    setYConstraint: function(iUp, iDown, iTickSize) {
        this.topConstraint = iUp;
        this.bottomConstraint = iDown;

        this.minY = this.initPageY - iUp;
        this.maxY = this.initPageY + iDown;
        if (iTickSize) { this.setYTicks(this.initPageY, iTickSize); }

        this.constrainY = true;

    },

    /**
     * resetConstraints must be called if you manually reposition a dd element.
     * @method resetConstraints
     * @param {boolean} maintainOffset
     */
    resetConstraints: function() {


        // Maintain offsets if necessary
        if (this.initPageX || this.initPageX === 0) {
            // figure out how much this thing has moved
            var dx = (this.maintainOffset) ? this.lastPageX - this.initPageX : 0;
            var dy = (this.maintainOffset) ? this.lastPageY - this.initPageY : 0;

            this.setInitPosition(dx, dy);

        // This is the first time we have detected the element's position
        } else {
            this.setInitPosition();
        }

        if (this.constrainX) {
            this.setXConstraint( this.leftConstraint,
                                 this.rightConstraint,
                                 this.xTickSize        );
        }

        if (this.constrainY) {
            this.setYConstraint( this.topConstraint,
                                 this.bottomConstraint,
                                 this.yTickSize         );
        }
    },

    /**
     * Normally the drag element is moved pixel by pixel, but we can specify
     * that it move a number of pixels at a time.  This method resolves the
     * location when we have it set up like this.
     * @method getTick
     * @param {int} val where we want to place the object
     * @param {int[]} tickArray sorted array of valid points
     * @return {int} the closest tick
     * @private
     */
    getTick: function(val, tickArray) {

        if (!tickArray) {
            // If tick interval is not defined, it is effectively 1 pixel,
            // so we return the value passed to us.
            return val;
        } else if (tickArray[0] >= val) {
            // The value is lower than the first tick, so we return the first
            // tick.
            return tickArray[0];
        } else {
            for (var i=0, len=tickArray.length; i<len; ++i) {
                var next = i + 1;
                if (tickArray[next] && tickArray[next] >= val) {
                    var diff1 = val - tickArray[i];
                    var diff2 = tickArray[next] - val;
                    return (diff2 > diff1) ? tickArray[i] : tickArray[next];
                }
            }

            // The value is larger than the last tick, so we return the last
            // tick.
            return tickArray[tickArray.length - 1];
        }
    },

    /**
     * toString method
     * @method toString
     * @return {string} string representation of the dd obj
     */
    toString: function() {
        return ("DragDrop " + this.id);
    }

});

})();
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */


/**
 * The drag and drop utility provides a framework for building drag and drop
 * applications.  In addition to enabling drag and drop for specific elements,
 * the drag and drop elements are tracked by the manager class, and the
 * interactions between the various elements are tracked during the drag and
 * the implementing code is notified about these important moments.
 */

// Only load the library once.  Rewriting the manager class would orphan
// existing drag and drop instances.
if (!Roo.dd.DragDropMgr) {

/**
 * @class Roo.dd.DragDropMgr
 * DragDropMgr is a singleton that tracks the element interaction for
 * all DragDrop items in the window.  Generally, you will not call
 * this class directly, but it does have helper methods that could
 * be useful in your DragDrop implementations.
 * @static
 */
Roo.dd.DragDropMgr = function() {

    var Event = Roo.EventManager;

    return {

        /**
         * Two dimensional Array of registered DragDrop objects.  The first
         * dimension is the DragDrop item group, the second the DragDrop
         * object.
         * @property ids
         * @type {string: string}
         * @private
         * @static
         */
        ids: {},

        /**
         * Array of element ids defined as drag handles.  Used to determine
         * if the element that generated the mousedown event is actually the
         * handle and not the html element itself.
         * @property handleIds
         * @type {string: string}
         * @private
         * @static
         */
        handleIds: {},

        /**
         * the DragDrop object that is currently being dragged
         * @property dragCurrent
         * @type DragDrop
         * @private
         * @static
         **/
        dragCurrent: null,

        /**
         * the DragDrop object(s) that are being hovered over
         * @property dragOvers
         * @type Array
         * @private
         * @static
         */
        dragOvers: {},

        /**
         * the X distance between the cursor and the object being dragged
         * @property deltaX
         * @type int
         * @private
         * @static
         */
        deltaX: 0,

        /**
         * the Y distance between the cursor and the object being dragged
         * @property deltaY
         * @type int
         * @private
         * @static
         */
        deltaY: 0,

        /**
         * Flag to determine if we should prevent the default behavior of the
         * events we define. By default this is true, but this can be set to
         * false if you need the default behavior (not recommended)
         * @property preventDefault
         * @type boolean
         * @static
         */
        preventDefault: true,

        /**
         * Flag to determine if we should stop the propagation of the events
         * we generate. This is true by default but you may want to set it to
         * false if the html element contains other features that require the
         * mouse click.
         * @property stopPropagation
         * @type boolean
         * @static
         */
        stopPropagation: true,

        /**
         * Internal flag that is set to true when drag and drop has been
         * intialized
         * @property initialized
         * @private
         * @static
         */
        initalized: false,

        /**
         * All drag and drop can be disabled.
         * @property locked
         * @private
         * @static
         */
        locked: false,

        /**
         * Called the first time an element is registered.
         * @method init
         * @private
         * @static
         */
        init: function() {
            this.initialized = true;
        },

        /**
         * In point mode, drag and drop interaction is defined by the
         * location of the cursor during the drag/drop
         * @property POINT
         * @type int
         * @static
         */
        POINT: 0,

        /**
         * In intersect mode, drag and drop interactio nis defined by the
         * overlap of two or more drag and drop objects.
         * @property INTERSECT
         * @type int
         * @static
         */
        INTERSECT: 1,

        /**
         * The current drag and drop mode.  Default: POINT
         * @property mode
         * @type int
         * @static
         */
        mode: 0,

        /**
         * Runs method on all drag and drop objects
         * @method _execOnAll
         * @private
         * @static
         */
        _execOnAll: function(sMethod, args) {
            for (var i in this.ids) {
                for (var j in this.ids[i]) {
                    var oDD = this.ids[i][j];
                    if (! this.isTypeOfDD(oDD)) {
                        continue;
                    }
                    oDD[sMethod].apply(oDD, args);
                }
            }
        },

        /**
         * Drag and drop initialization.  Sets up the global event handlers
         * @method _onLoad
         * @private
         * @static
         */
        _onLoad: function() {

            this.init();

            if (!Roo.isTouch) {
                Event.on(document, "mouseup",   this.handleMouseUp, this, true);
                Event.on(document, "mousemove", this.handleMouseMove, this, true);
            }
            Event.on(document, "touchend",   this.handleMouseUp, this, true);
            Event.on(document, "touchmove", this.handleMouseMove, this, true);
            
            Event.on(window,   "unload",    this._onUnload, this, true);
            Event.on(window,   "resize",    this._onResize, this, true);
            // Event.on(window,   "mouseout",    this._test);

        },

        /**
         * Reset constraints on all drag and drop objs
         * @method _onResize
         * @private
         * @static
         */
        _onResize: function(e) {
            this._execOnAll("resetConstraints", []);
        },

        /**
         * Lock all drag and drop functionality
         * @method lock
         * @static
         */
        lock: function() { this.locked = true; },

        /**
         * Unlock all drag and drop functionality
         * @method unlock
         * @static
         */
        unlock: function() { this.locked = false; },

        /**
         * Is drag and drop locked?
         * @method isLocked
         * @return {boolean} True if drag and drop is locked, false otherwise.
         * @static
         */
        isLocked: function() { return this.locked; },

        /**
         * Location cache that is set for all drag drop objects when a drag is
         * initiated, cleared when the drag is finished.
         * @property locationCache
         * @private
         * @static
         */
        locationCache: {},

        /**
         * Set useCache to false if you want to force object the lookup of each
         * drag and drop linked element constantly during a drag.
         * @property useCache
         * @type boolean
         * @static
         */
        useCache: true,

        /**
         * The number of pixels that the mouse needs to move after the
         * mousedown before the drag is initiated.  Default=3;
         * @property clickPixelThresh
         * @type int
         * @static
         */
        clickPixelThresh: 3,

        /**
         * The number of milliseconds after the mousedown event to initiate the
         * drag if we don't get a mouseup event. Default=1000
         * @property clickTimeThresh
         * @type int
         * @static
         */
        clickTimeThresh: 350,

        /**
         * Flag that indicates that either the drag pixel threshold or the
         * mousdown time threshold has been met
         * @property dragThreshMet
         * @type boolean
         * @private
         * @static
         */
        dragThreshMet: false,

        /**
         * Timeout used for the click time threshold
         * @property clickTimeout
         * @type Object
         * @private
         * @static
         */
        clickTimeout: null,

        /**
         * The X position of the mousedown event stored for later use when a
         * drag threshold is met.
         * @property startX
         * @type int
         * @private
         * @static
         */
        startX: 0,

        /**
         * The Y position of the mousedown event stored for later use when a
         * drag threshold is met.
         * @property startY
         * @type int
         * @private
         * @static
         */
        startY: 0,

        /**
         * Each DragDrop instance must be registered with the DragDropMgr.
         * This is executed in DragDrop.init()
         * @method regDragDrop
         * @param {DragDrop} oDD the DragDrop object to register
         * @param {String} sGroup the name of the group this element belongs to
         * @static
         */
        regDragDrop: function(oDD, sGroup) {
            if (!this.initialized) { this.init(); }

            if (!this.ids[sGroup]) {
                this.ids[sGroup] = {};
            }
            this.ids[sGroup][oDD.id] = oDD;
        },

        /**
         * Removes the supplied dd instance from the supplied group. Executed
         * by DragDrop.removeFromGroup, so don't call this function directly.
         * @method removeDDFromGroup
         * @private
         * @static
         */
        removeDDFromGroup: function(oDD, sGroup) {
            if (!this.ids[sGroup]) {
                this.ids[sGroup] = {};
            }

            var obj = this.ids[sGroup];
            if (obj && obj[oDD.id]) {
                delete obj[oDD.id];
            }
        },

        /**
         * Unregisters a drag and drop item.  This is executed in
         * DragDrop.unreg, use that method instead of calling this directly.
         * @method _remove
         * @private
         * @static
         */
        _remove: function(oDD) {
            for (var g in oDD.groups) {
                if (g && this.ids[g][oDD.id]) {
                    delete this.ids[g][oDD.id];
                }
            }
            delete this.handleIds[oDD.id];
        },

        /**
         * Each DragDrop handle element must be registered.  This is done
         * automatically when executing DragDrop.setHandleElId()
         * @method regHandle
         * @param {String} sDDId the DragDrop id this element is a handle for
         * @param {String} sHandleId the id of the element that is the drag
         * handle
         * @static
         */
        regHandle: function(sDDId, sHandleId) {
            if (!this.handleIds[sDDId]) {
                this.handleIds[sDDId] = {};
            }
            this.handleIds[sDDId][sHandleId] = sHandleId;
        },

        /**
         * Utility function to determine if a given element has been
         * registered as a drag drop item.
         * @method isDragDrop
         * @param {String} id the element id to check
         * @return {boolean} true if this element is a DragDrop item,
         * false otherwise
         * @static
         */
        isDragDrop: function(id) {
            return ( this.getDDById(id) ) ? true : false;
        },

        /**
         * Returns the drag and drop instances that are in all groups the
         * passed in instance belongs to.
         * @method getRelated
         * @param {DragDrop} p_oDD the obj to get related data for
         * @param {boolean} bTargetsOnly if true, only return targetable objs
         * @return {DragDrop[]} the related instances
         * @static
         */
        getRelated: function(p_oDD, bTargetsOnly) {
            var oDDs = [];
            for (var i in p_oDD.groups) {
                for (j in this.ids[i]) {
                    var dd = this.ids[i][j];
                    if (! this.isTypeOfDD(dd)) {
                        continue;
                    }
                    if (!bTargetsOnly || dd.isTarget) {
                        oDDs[oDDs.length] = dd;
                    }
                }
            }

            return oDDs;
        },

        /**
         * Returns true if the specified dd target is a legal target for
         * the specifice drag obj
         * @method isLegalTarget
         * @param {DragDrop} the drag obj
         * @param {DragDrop} the target
         * @return {boolean} true if the target is a legal target for the
         * dd obj
         * @static
         */
        isLegalTarget: function (oDD, oTargetDD) {
            var targets = this.getRelated(oDD, true);
            for (var i=0, len=targets.length;i<len;++i) {
                if (targets[i].id == oTargetDD.id) {
                    return true;
                }
            }

            return false;
        },

        /**
         * My goal is to be able to transparently determine if an object is
         * typeof DragDrop, and the exact subclass of DragDrop.  typeof
         * returns "object", oDD.constructor.toString() always returns
         * "DragDrop" and not the name of the subclass.  So for now it just
         * evaluates a well-known variable in DragDrop.
         * @method isTypeOfDD
         * @param {Object} the object to evaluate
         * @return {boolean} true if typeof oDD = DragDrop
         * @static
         */
        isTypeOfDD: function (oDD) {
            return (oDD && oDD.__ygDragDrop);
        },

        /**
         * Utility function to determine if a given element has been
         * registered as a drag drop handle for the given Drag Drop object.
         * @method isHandle
         * @param {String} id the element id to check
         * @return {boolean} true if this element is a DragDrop handle, false
         * otherwise
         * @static
         */
        isHandle: function(sDDId, sHandleId) {
            return ( this.handleIds[sDDId] &&
                            this.handleIds[sDDId][sHandleId] );
        },

        /**
         * Returns the DragDrop instance for a given id
         * @method getDDById
         * @param {String} id the id of the DragDrop object
         * @return {DragDrop} the drag drop object, null if it is not found
         * @static
         */
        getDDById: function(id) {
            for (var i in this.ids) {
                if (this.ids[i][id]) {
                    return this.ids[i][id];
                }
            }
            return null;
        },

        /**
         * Fired after a registered DragDrop object gets the mousedown event.
         * Sets up the events required to track the object being dragged
         * @method handleMouseDown
         * @param {Event} e the event
         * @param oDD the DragDrop object being dragged
         * @private
         * @static
         */
        handleMouseDown: function(e, oDD) {
            if(Roo.QuickTips){
                Roo.QuickTips.disable();
            }
            this.currentTarget = e.getTarget();

            this.dragCurrent = oDD;

            var el = oDD.getEl();

            // track start position
            this.startX = e.getPageX();
            this.startY = e.getPageY();

            this.deltaX = this.startX - el.offsetLeft;
            this.deltaY = this.startY - el.offsetTop;

            this.dragThreshMet = false;

            this.clickTimeout = setTimeout(
                    function() {
                        var DDM = Roo.dd.DDM;
                        DDM.startDrag(DDM.startX, DDM.startY);
                    },
                    this.clickTimeThresh );
        },

        /**
         * Fired when either the drag pixel threshol or the mousedown hold
         * time threshold has been met.
         * @method startDrag
         * @param x {int} the X position of the original mousedown
         * @param y {int} the Y position of the original mousedown
         * @static
         */
        startDrag: function(x, y) {
            clearTimeout(this.clickTimeout);
            if (this.dragCurrent) {
                this.dragCurrent.b4StartDrag(x, y);
                this.dragCurrent.startDrag(x, y);
            }
            this.dragThreshMet = true;
        },

        /**
         * Internal function to handle the mouseup event.  Will be invoked
         * from the context of the document.
         * @method handleMouseUp
         * @param {Event} e the event
         * @private
         * @static
         */
        handleMouseUp: function(e) {

            if(Roo.QuickTips){
                Roo.QuickTips.enable();
            }
            if (! this.dragCurrent) {
                return;
            }

            clearTimeout(this.clickTimeout);

            if (this.dragThreshMet) {
                this.fireEvents(e, true);
            } else {
            }

            this.stopDrag(e);

            this.stopEvent(e);
        },

        /**
         * Utility to stop event propagation and event default, if these
         * features are turned on.
         * @method stopEvent
         * @param {Event} e the event as returned by this.getEvent()
         * @static
         */
        stopEvent: function(e){
            if(this.stopPropagation) {
                e.stopPropagation();
            }

            if (this.preventDefault) {
                e.preventDefault();
            }
        },

        /**
         * Internal function to clean up event handlers after the drag
         * operation is complete
         * @method stopDrag
         * @param {Event} e the event
         * @private
         * @static
         */
        stopDrag: function(e) {
            // Fire the drag end event for the item that was dragged
            if (this.dragCurrent) {
                if (this.dragThreshMet) {
                    this.dragCurrent.b4EndDrag(e);
                    this.dragCurrent.endDrag(e);
                }

                this.dragCurrent.onMouseUp(e);
            }

            this.dragCurrent = null;
            this.dragOvers = {};
        },

        /**
         * Internal function to handle the mousemove event.  Will be invoked
         * from the context of the html element.
         *
         * @TODO figure out what we can do about mouse events lost when the
         * user drags objects beyond the window boundary.  Currently we can
         * detect this in internet explorer by verifying that the mouse is
         * down during the mousemove event.  Firefox doesn't give us the
         * button state on the mousemove event.
         * @method handleMouseMove
         * @param {Event} e the event
         * @private
         * @static
         */
        handleMouseMove: function(e) {
            if (! this.dragCurrent) {
                return true;
            }

            // var button = e.which || e.button;

            // check for IE mouseup outside of page boundary
            if (Roo.isIE && (e.button !== 0 && e.button !== 1 && e.button !== 2)) {
                this.stopEvent(e);
                return this.handleMouseUp(e);
            }

            if (!this.dragThreshMet) {
                var diffX = Math.abs(this.startX - e.getPageX());
                var diffY = Math.abs(this.startY - e.getPageY());
                if (diffX > this.clickPixelThresh ||
                            diffY > this.clickPixelThresh) {
                    this.startDrag(this.startX, this.startY);
                }
            }

            if (this.dragThreshMet) {
                this.dragCurrent.b4Drag(e);
                this.dragCurrent.onDrag(e);
                if(!this.dragCurrent.moveOnly){
                    this.fireEvents(e, false);
                }
            }

            this.stopEvent(e);

            return true;
        },

        /**
         * Iterates over all of the DragDrop elements to find ones we are
         * hovering over or dropping on
         * @method fireEvents
         * @param {Event} e the event
         * @param {boolean} isDrop is this a drop op or a mouseover op?
         * @private
         * @static
         */
        fireEvents: function(e, isDrop) {
            var dc = this.dragCurrent;

            // If the user did the mouse up outside of the window, we could
            // get here even though we have ended the drag.
            if (!dc || dc.isLocked()) {
                return;
            }

            var pt = e.getPoint();

            // cache the previous dragOver array
            var oldOvers = [];

            var outEvts   = [];
            var overEvts  = [];
            var dropEvts  = [];
            var enterEvts = [];

            // Check to see if the object(s) we were hovering over is no longer
            // being hovered over so we can fire the onDragOut event
            for (var i in this.dragOvers) {

                var ddo = this.dragOvers[i];

                if (! this.isTypeOfDD(ddo)) {
                    continue;
                }

                if (! this.isOverTarget(pt, ddo, this.mode)) {
                    outEvts.push( ddo );
                }

                oldOvers[i] = true;
                delete this.dragOvers[i];
            }

            for (var sGroup in dc.groups) {

                if ("string" != typeof sGroup) {
                    continue;
                }

                for (i in this.ids[sGroup]) {
                    var oDD = this.ids[sGroup][i];
                    if (! this.isTypeOfDD(oDD)) {
                        continue;
                    }

                    if (oDD.isTarget && !oDD.isLocked() && oDD != dc) {
                        if (this.isOverTarget(pt, oDD, this.mode)) {
                            // look for drop interactions
                            if (isDrop) {
                                dropEvts.push( oDD );
                            // look for drag enter and drag over interactions
                            } else {

                                // initial drag over: dragEnter fires
                                if (!oldOvers[oDD.id]) {
                                    enterEvts.push( oDD );
                                // subsequent drag overs: dragOver fires
                                } else {
                                    overEvts.push( oDD );
                                }

                                this.dragOvers[oDD.id] = oDD;
                            }
                        }
                    }
                }
            }

            if (this.mode) {
                if (outEvts.length) {
                    dc.b4DragOut(e, outEvts);
                    dc.onDragOut(e, outEvts);
                }

                if (enterEvts.length) {
                    dc.onDragEnter(e, enterEvts);
                }

                if (overEvts.length) {
                    dc.b4DragOver(e, overEvts);
                    dc.onDragOver(e, overEvts);
                }

                if (dropEvts.length) {
                    dc.b4DragDrop(e, dropEvts);
                    dc.onDragDrop(e, dropEvts);
                }

            } else {
                // fire dragout events
                var len = 0;
                for (i=0, len=outEvts.length; i<len; ++i) {
                    dc.b4DragOut(e, outEvts[i].id);
                    dc.onDragOut(e, outEvts[i].id);
                }

                // fire enter events
                for (i=0,len=enterEvts.length; i<len; ++i) {
                    // dc.b4DragEnter(e, oDD.id);
                    dc.onDragEnter(e, enterEvts[i].id);
                }

                // fire over events
                for (i=0,len=overEvts.length; i<len; ++i) {
                    dc.b4DragOver(e, overEvts[i].id);
                    dc.onDragOver(e, overEvts[i].id);
                }

                // fire drop events
                for (i=0, len=dropEvts.length; i<len; ++i) {
                    dc.b4DragDrop(e, dropEvts[i].id);
                    dc.onDragDrop(e, dropEvts[i].id);
                }

            }

            // notify about a drop that did not find a target
            if (isDrop && !dropEvts.length) {
                dc.onInvalidDrop(e);
            }

        },

        /**
         * Helper function for getting the best match from the list of drag
         * and drop objects returned by the drag and drop events when we are
         * in INTERSECT mode.  It returns either the first object that the
         * cursor is over, or the object that has the greatest overlap with
         * the dragged element.
         * @method getBestMatch
         * @param  {DragDrop[]} dds The array of drag and drop objects
         * targeted
         * @return {DragDrop}       The best single match
         * @static
         */
        getBestMatch: function(dds) {
            var winner = null;
            // Return null if the input is not what we expect
            //if (!dds || !dds.length || dds.length == 0) {
               // winner = null;
            // If there is only one item, it wins
            //} else if (dds.length == 1) {

            var len = dds.length;

            if (len == 1) {
                winner = dds[0];
            } else {
                // Loop through the targeted items
                for (var i=0; i<len; ++i) {
                    var dd = dds[i];
                    // If the cursor is over the object, it wins.  If the
                    // cursor is over multiple matches, the first one we come
                    // to wins.
                    if (dd.cursorIsOver) {
                        winner = dd;
                        break;
                    // Otherwise the object with the most overlap wins
                    } else {
                        if (!winner ||
                            winner.overlap.getArea() < dd.overlap.getArea()) {
                            winner = dd;
                        }
                    }
                }
            }

            return winner;
        },

        /**
         * Refreshes the cache of the top-left and bottom-right points of the
         * drag and drop objects in the specified group(s).  This is in the
         * format that is stored in the drag and drop instance, so typical
         * usage is:
         * <code>
         * Roo.dd.DragDropMgr.refreshCache(ddinstance.groups);
         * </code>
         * Alternatively:
         * <code>
         * Roo.dd.DragDropMgr.refreshCache({group1:true, group2:true});
         * </code>
         * @TODO this really should be an indexed array.  Alternatively this
         * method could accept both.
         * @method refreshCache
         * @param {Object} groups an associative array of groups to refresh
         * @static
         */
        refreshCache: function(groups) {
            for (var sGroup in groups) {
                if ("string" != typeof sGroup) {
                    continue;
                }
                for (var i in this.ids[sGroup]) {
                    var oDD = this.ids[sGroup][i];

                    if (this.isTypeOfDD(oDD)) {
                    // if (this.isTypeOfDD(oDD) && oDD.isTarget) {
                        var loc = this.getLocation(oDD);
                        if (loc) {
                            this.locationCache[oDD.id] = loc;
                        } else {
                            delete this.locationCache[oDD.id];
                            // this will unregister the drag and drop object if
                            // the element is not in a usable state
                            // oDD.unreg();
                        }
                    }
                }
            }
        },

        /**
         * This checks to make sure an element exists and is in the DOM.  The
         * main purpose is to handle cases where innerHTML is used to remove
         * drag and drop objects from the DOM.  IE provides an 'unspecified
         * error' when trying to access the offsetParent of such an element
         * @method verifyEl
         * @param {HTMLElement} el the element to check
         * @return {boolean} true if the element looks usable
         * @static
         */
        verifyEl: function(el) {
            if (el) {
                var parent;
                if(Roo.isIE){
                    try{
                        parent = el.offsetParent;
                    }catch(e){}
                }else{
                    parent = el.offsetParent;
                }
                if (parent) {
                    return true;
                }
            }

            return false;
        },

        /**
         * Returns a Region object containing the drag and drop element's position
         * and size, including the padding configured for it
         * @method getLocation
         * @param {DragDrop} oDD the drag and drop object to get the
         *                       location for
         * @return {Roo.lib.Region} a Region object representing the total area
         *                             the element occupies, including any padding
         *                             the instance is configured for.
         * @static
         */
        getLocation: function(oDD) {
            if (! this.isTypeOfDD(oDD)) {
                return null;
            }

            var el = oDD.getEl(), pos, x1, x2, y1, y2, t, r, b, l;

            try {
                pos= Roo.lib.Dom.getXY(el);
            } catch (e) { }

            if (!pos) {
                return null;
            }

            x1 = pos[0];
            x2 = x1 + el.offsetWidth;
            y1 = pos[1];
            y2 = y1 + el.offsetHeight;

            t = y1 - oDD.padding[0];
            r = x2 + oDD.padding[1];
            b = y2 + oDD.padding[2];
            l = x1 - oDD.padding[3];

            return new Roo.lib.Region( t, r, b, l );
        },

        /**
         * Checks the cursor location to see if it over the target
         * @method isOverTarget
         * @param {Roo.lib.Point} pt The point to evaluate
         * @param {DragDrop} oTarget the DragDrop object we are inspecting
         * @return {boolean} true if the mouse is over the target
         * @private
         * @static
         */
        isOverTarget: function(pt, oTarget, intersect) {
            // use cache if available
            var loc = this.locationCache[oTarget.id];
            if (!loc || !this.useCache) {
                loc = this.getLocation(oTarget);
                this.locationCache[oTarget.id] = loc;

            }

            if (!loc) {
                return false;
            }

            oTarget.cursorIsOver = loc.contains( pt );

            // DragDrop is using this as a sanity check for the initial mousedown
            // in this case we are done.  In POINT mode, if the drag obj has no
            // contraints, we are also done. Otherwise we need to evaluate the
            // location of the target as related to the actual location of the
            // dragged element.
            var dc = this.dragCurrent;
            if (!dc || !dc.getTargetCoord ||
                    (!intersect && !dc.constrainX && !dc.constrainY)) {
                return oTarget.cursorIsOver;
            }

            oTarget.overlap = null;

            // Get the current location of the drag element, this is the
            // location of the mouse event less the delta that represents
            // where the original mousedown happened on the element.  We
            // need to consider constraints and ticks as well.
            var pos = dc.getTargetCoord(pt.x, pt.y);

            var el = dc.getDragEl();
            var curRegion = new Roo.lib.Region( pos.y,
                                                   pos.x + el.offsetWidth,
                                                   pos.y + el.offsetHeight,
                                                   pos.x );

            var overlap = curRegion.intersect(loc);

            if (overlap) {
                oTarget.overlap = overlap;
                return (intersect) ? true : oTarget.cursorIsOver;
            } else {
                return false;
            }
        },

        /**
         * unload event handler
         * @method _onUnload
         * @private
         * @static
         */
        _onUnload: function(e, me) {
            Roo.dd.DragDropMgr.unregAll();
        },

        /**
         * Cleans up the drag and drop events and objects.
         * @method unregAll
         * @private
         * @static
         */
        unregAll: function() {

            if (this.dragCurrent) {
                this.stopDrag();
                this.dragCurrent = null;
            }

            this._execOnAll("unreg", []);

            for (i in this.elementCache) {
                delete this.elementCache[i];
            }

            this.elementCache = {};
            this.ids = {};
        },

        /**
         * A cache of DOM elements
         * @property elementCache
         * @private
         * @static
         */
        elementCache: {},

        /**
         * Get the wrapper for the DOM element specified
         * @method getElWrapper
         * @param {String} id the id of the element to get
         * @return {Roo.dd.DDM.ElementWrapper} the wrapped element
         * @private
         * @deprecated This wrapper isn't that useful
         * @static
         */
        getElWrapper: function(id) {
            var oWrapper = this.elementCache[id];
            if (!oWrapper || !oWrapper.el) {
                oWrapper = this.elementCache[id] =
                    new this.ElementWrapper(Roo.getDom(id));
            }
            return oWrapper;
        },

        /**
         * Returns the actual DOM element
         * @method getElement
         * @param {String} id the id of the elment to get
         * @return {Object} The element
         * @deprecated use Roo.getDom instead
         * @static
         */
        getElement: function(id) {
            return Roo.getDom(id);
        },

        /**
         * Returns the style property for the DOM element (i.e.,
         * document.getElById(id).style)
         * @method getCss
         * @param {String} id the id of the elment to get
         * @return {Object} The style property of the element
         * @deprecated use Roo.getDom instead
         * @static
         */
        getCss: function(id) {
            var el = Roo.getDom(id);
            return (el) ? el.style : null;
        },

        /**
         * Inner class for cached elements
         * @class DragDropMgr.ElementWrapper
         * @for DragDropMgr
         * @private
         * @deprecated
         */
        ElementWrapper: function(el) {
                /**
                 * The element
                 * @property el
                 */
                this.el = el || null;
                /**
                 * The element id
                 * @property id
                 */
                this.id = this.el && el.id;
                /**
                 * A reference to the style property
                 * @property css
                 */
                this.css = this.el && el.style;
            },

        /**
         * Returns the X position of an html element
         * @method getPosX
         * @param el the element for which to get the position
         * @return {int} the X coordinate
         * @for DragDropMgr
         * @deprecated use Roo.lib.Dom.getX instead
         * @static
         */
        getPosX: function(el) {
            return Roo.lib.Dom.getX(el);
        },

        /**
         * Returns the Y position of an html element
         * @method getPosY
         * @param el the element for which to get the position
         * @return {int} the Y coordinate
         * @deprecated use Roo.lib.Dom.getY instead
         * @static
         */
        getPosY: function(el) {
            return Roo.lib.Dom.getY(el);
        },

        /**
         * Swap two nodes.  In IE, we use the native method, for others we
         * emulate the IE behavior
         * @method swapNode
         * @param n1 the first node to swap
         * @param n2 the other node to swap
         * @static
         */
        swapNode: function(n1, n2) {
            if (n1.swapNode) {
                n1.swapNode(n2);
            } else {
                var p = n2.parentNode;
                var s = n2.nextSibling;

                if (s == n1) {
                    p.insertBefore(n1, n2);
                } else if (n2 == n1.nextSibling) {
                    p.insertBefore(n2, n1);
                } else {
                    n1.parentNode.replaceChild(n2, n1);
                    p.insertBefore(n1, s);
                }
            }
        },

        /**
         * Returns the current scroll position
         * @method getScroll
         * @private
         * @static
         */
        getScroll: function () {
            var t, l, dde=document.documentElement, db=document.body;
            if (dde && (dde.scrollTop || dde.scrollLeft)) {
                t = dde.scrollTop;
                l = dde.scrollLeft;
            } else if (db) {
                t = db.scrollTop;
                l = db.scrollLeft;
            } else {

            }
            return { top: t, left: l };
        },

        /**
         * Returns the specified element style property
         * @method getStyle
         * @param {HTMLElement} el          the element
         * @param {string}      styleProp   the style property
         * @return {string} The value of the style property
         * @deprecated use Roo.lib.Dom.getStyle
         * @static
         */
        getStyle: function(el, styleProp) {
            return Roo.fly(el).getStyle(styleProp);
        },

        /**
         * Gets the scrollTop
         * @method getScrollTop
         * @return {int} the document's scrollTop
         * @static
         */
        getScrollTop: function () { return this.getScroll().top; },

        /**
         * Gets the scrollLeft
         * @method getScrollLeft
         * @return {int} the document's scrollTop
         * @static
         */
        getScrollLeft: function () { return this.getScroll().left; },

        /**
         * Sets the x/y position of an element to the location of the
         * target element.
         * @method moveToEl
         * @param {HTMLElement} moveEl      The element to move
         * @param {HTMLElement} targetEl    The position reference element
         * @static
         */
        moveToEl: function (moveEl, targetEl) {
            var aCoord = Roo.lib.Dom.getXY(targetEl);
            Roo.lib.Dom.setXY(moveEl, aCoord);
        },

        /**
         * Numeric array sort function
         * @method numericSort
         * @static
         */
        numericSort: function(a, b) { return (a - b); },

        /**
         * Internal counter
         * @property _timeoutCount
         * @private
         * @static
         */
        _timeoutCount: 0,

        /**
         * Trying to make the load order less important.  Without this we get
         * an error if this file is loaded before the Event Utility.
         * @method _addListeners
         * @private
         * @static
         */
        _addListeners: function() {
            var DDM = Roo.dd.DDM;
            if ( Roo.lib.Event && document ) {
                DDM._onLoad();
            } else {
                if (DDM._timeoutCount > 2000) {
                } else {
                    setTimeout(DDM._addListeners, 10);
                    if (document && document.body) {
                        DDM._timeoutCount += 1;
                    }
                }
            }
        },

        /**
         * Recursively searches the immediate parent and all child nodes for
         * the handle element in order to determine wheter or not it was
         * clicked.
         * @method handleWasClicked
         * @param node the html element to inspect
         * @static
         */
        handleWasClicked: function(node, id) {
            if (this.isHandle(id, node.id)) {
                return true;
            } else {
                // check to see if this is a text node child of the one we want
                var p = node.parentNode;

                while (p) {
                    if (this.isHandle(id, p.id)) {
                        return true;
                    } else {
                        p = p.parentNode;
                    }
                }
            }

            return false;
        }

    };

}();

// shorter alias, save a few bytes
Roo.dd.DDM = Roo.dd.DragDropMgr;
Roo.dd.DDM._addListeners();

}/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.dd.DD
 * A DragDrop implementation where the linked element follows the
 * mouse cursor during a drag.
 * @extends Roo.dd.DragDrop
 * @constructor
 * @param {String} id the id of the linked element
 * @param {String} sGroup the group of related DragDrop items
 * @param {object} config an object containing configurable attributes
 *                Valid properties for DD:
 *                    scroll
 */
Roo.dd.DD = function(id, sGroup, config) {
    if (id) {
        this.init(id, sGroup, config);
    }
};

Roo.extend(Roo.dd.DD, Roo.dd.DragDrop, {

    /**
     * When set to true, the utility automatically tries to scroll the browser
     * window wehn a drag and drop element is dragged near the viewport boundary.
     * Defaults to true.
     * @property scroll
     * @type boolean
     */
    scroll: true,

    /**
     * Sets the pointer offset to the distance between the linked element's top
     * left corner and the location the element was clicked
     * @method autoOffset
     * @param {int} iPageX the X coordinate of the click
     * @param {int} iPageY the Y coordinate of the click
     */
    autoOffset: function(iPageX, iPageY) {
        var x = iPageX - this.startPageX;
        var y = iPageY - this.startPageY;
        this.setDelta(x, y);
    },

    /**
     * Sets the pointer offset.  You can call this directly to force the
     * offset to be in a particular location (e.g., pass in 0,0 to set it
     * to the center of the object)
     * @method setDelta
     * @param {int} iDeltaX the distance from the left
     * @param {int} iDeltaY the distance from the top
     */
    setDelta: function(iDeltaX, iDeltaY) {
        this.deltaX = iDeltaX;
        this.deltaY = iDeltaY;
    },

    /**
     * Sets the drag element to the location of the mousedown or click event,
     * maintaining the cursor location relative to the location on the element
     * that was clicked.  Override this if you want to place the element in a
     * location other than where the cursor is.
     * @method setDragElPos
     * @param {int} iPageX the X coordinate of the mousedown or drag event
     * @param {int} iPageY the Y coordinate of the mousedown or drag event
     */
    setDragElPos: function(iPageX, iPageY) {
        // the first time we do this, we are going to check to make sure
        // the element has css positioning

        var el = this.getDragEl();
        this.alignElWithMouse(el, iPageX, iPageY);
    },

    /**
     * Sets the element to the location of the mousedown or click event,
     * maintaining the cursor location relative to the location on the element
     * that was clicked.  Override this if you want to place the element in a
     * location other than where the cursor is.
     * @method alignElWithMouse
     * @param {HTMLElement} el the element to move
     * @param {int} iPageX the X coordinate of the mousedown or drag event
     * @param {int} iPageY the Y coordinate of the mousedown or drag event
     */
    alignElWithMouse: function(el, iPageX, iPageY) {
        var oCoord = this.getTargetCoord(iPageX, iPageY);
        var fly = el.dom ? el : Roo.fly(el);
        if (!this.deltaSetXY) {
            var aCoord = [oCoord.x, oCoord.y];
            fly.setXY(aCoord);
            var newLeft = fly.getLeft(true);
            var newTop  = fly.getTop(true);
            this.deltaSetXY = [ newLeft - oCoord.x, newTop - oCoord.y ];
        } else {
            fly.setLeftTop(oCoord.x + this.deltaSetXY[0], oCoord.y + this.deltaSetXY[1]);
        }

        this.cachePosition(oCoord.x, oCoord.y);
        this.autoScroll(oCoord.x, oCoord.y, el.offsetHeight, el.offsetWidth);
        return oCoord;
    },

    /**
     * Saves the most recent position so that we can reset the constraints and
     * tick marks on-demand.  We need to know this so that we can calculate the
     * number of pixels the element is offset from its original position.
     * @method cachePosition
     * @param iPageX the current x position (optional, this just makes it so we
     * don't have to look it up again)
     * @param iPageY the current y position (optional, this just makes it so we
     * don't have to look it up again)
     */
    cachePosition: function(iPageX, iPageY) {
        if (iPageX) {
            this.lastPageX = iPageX;
            this.lastPageY = iPageY;
        } else {
            var aCoord = Roo.lib.Dom.getXY(this.getEl());
            this.lastPageX = aCoord[0];
            this.lastPageY = aCoord[1];
        }
    },

    /**
     * Auto-scroll the window if the dragged object has been moved beyond the
     * visible window boundary.
     * @method autoScroll
     * @param {int} x the drag element's x position
     * @param {int} y the drag element's y position
     * @param {int} h the height of the drag element
     * @param {int} w the width of the drag element
     * @private
     */
    autoScroll: function(x, y, h, w) {

        if (this.scroll) {
            // The client height
            var clientH = Roo.lib.Dom.getViewWidth();

            // The client width
            var clientW = Roo.lib.Dom.getViewHeight();

            // The amt scrolled down
            var st = this.DDM.getScrollTop();

            // The amt scrolled right
            var sl = this.DDM.getScrollLeft();

            // Location of the bottom of the element
            var bot = h + y;

            // Location of the right of the element
            var right = w + x;

            // The distance from the cursor to the bottom of the visible area,
            // adjusted so that we don't scroll if the cursor is beyond the
            // element drag constraints
            var toBot = (clientH + st - y - this.deltaY);

            // The distance from the cursor to the right of the visible area
            var toRight = (clientW + sl - x - this.deltaX);


            // How close to the edge the cursor must be before we scroll
            // var thresh = (document.all) ? 100 : 40;
            var thresh = 40;

            // How many pixels to scroll per autoscroll op.  This helps to reduce
            // clunky scrolling. IE is more sensitive about this ... it needs this
            // value to be higher.
            var scrAmt = (document.all) ? 80 : 30;

            // Scroll down if we are near the bottom of the visible page and the
            // obj extends below the crease
            if ( bot > clientH && toBot < thresh ) {
                window.scrollTo(sl, st + scrAmt);
            }

            // Scroll up if the window is scrolled down and the top of the object
            // goes above the top border
            if ( y < st && st > 0 && y - st < thresh ) {
                window.scrollTo(sl, st - scrAmt);
            }

            // Scroll right if the obj is beyond the right border and the cursor is
            // near the border.
            if ( right > clientW && toRight < thresh ) {
                window.scrollTo(sl + scrAmt, st);
            }

            // Scroll left if the window has been scrolled to the right and the obj
            // extends past the left border
            if ( x < sl && sl > 0 && x - sl < thresh ) {
                window.scrollTo(sl - scrAmt, st);
            }
        }
    },

    /**
     * Finds the location the element should be placed if we want to move
     * it to where the mouse location less the click offset would place us.
     * @method getTargetCoord
     * @param {int} iPageX the X coordinate of the click
     * @param {int} iPageY the Y coordinate of the click
     * @return an object that contains the coordinates (Object.x and Object.y)
     * @private
     */
    getTargetCoord: function(iPageX, iPageY) {


        var x = iPageX - this.deltaX;
        var y = iPageY - this.deltaY;

        if (this.constrainX) {
            if (x < this.minX) { x = this.minX; }
            if (x > this.maxX) { x = this.maxX; }
        }

        if (this.constrainY) {
            if (y < this.minY) { y = this.minY; }
            if (y > this.maxY) { y = this.maxY; }
        }

        x = this.getTick(x, this.xTicks);
        y = this.getTick(y, this.yTicks);


        return {x:x, y:y};
    },

    /*
     * Sets up config options specific to this class. Overrides
     * Roo.dd.DragDrop, but all versions of this method through the
     * inheritance chain are called
     */
    applyConfig: function() {
        Roo.dd.DD.superclass.applyConfig.call(this);
        this.scroll = (this.config.scroll !== false);
    },

    /*
     * Event that fires prior to the onMouseDown event.  Overrides
     * Roo.dd.DragDrop.
     */
    b4MouseDown: function(e) {
        // this.resetConstraints();
        this.autoOffset(e.getPageX(),
                            e.getPageY());
    },

    /*
     * Event that fires prior to the onDrag event.  Overrides
     * Roo.dd.DragDrop.
     */
    b4Drag: function(e) {
        this.setDragElPos(e.getPageX(),
                            e.getPageY());
    },

    toString: function() {
        return ("DD " + this.id);
    }

    //////////////////////////////////////////////////////////////////////////
    // Debugging ygDragDrop events that can be overridden
    //////////////////////////////////////////////////////////////////////////
    /*
    startDrag: function(x, y) {
    },

    onDrag: function(e) {
    },

    onDragEnter: function(e, id) {
    },

    onDragOver: function(e, id) {
    },

    onDragOut: function(e, id) {
    },

    onDragDrop: function(e, id) {
    },

    endDrag: function(e) {
    }

    */

});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.dd.DDProxy
 * A DragDrop implementation that inserts an empty, bordered div into
 * the document that follows the cursor during drag operations.  At the time of
 * the click, the frame div is resized to the dimensions of the linked html
 * element, and moved to the exact location of the linked element.
 *
 * References to the "frame" element refer to the single proxy element that
 * was created to be dragged in place of all DDProxy elements on the
 * page.
 *
 * @extends Roo.dd.DD
 * @constructor
 * @param {String} id the id of the linked html element
 * @param {String} sGroup the group of related DragDrop objects
 * @param {object} config an object containing configurable attributes
 *                Valid properties for DDProxy in addition to those in DragDrop:
 *                   resizeFrame, centerFrame, dragElId
 */
Roo.dd.DDProxy = function(id, sGroup, config) {
    if (id) {
        this.init(id, sGroup, config);
        this.initFrame();
    }
};

/**
 * The default drag frame div id
 * @property Roo.dd.DDProxy.dragElId
 * @type String
 * @static
 */
Roo.dd.DDProxy.dragElId = "ygddfdiv";

Roo.extend(Roo.dd.DDProxy, Roo.dd.DD, {

    /**
     * By default we resize the drag frame to be the same size as the element
     * we want to drag (this is to get the frame effect).  We can turn it off
     * if we want a different behavior.
     * @property resizeFrame
     * @type boolean
     */
    resizeFrame: true,

    /**
     * By default the frame is positioned exactly where the drag element is, so
     * we use the cursor offset provided by Roo.dd.DD.  Another option that works only if
     * you do not have constraints on the obj is to have the drag frame centered
     * around the cursor.  Set centerFrame to true for this effect.
     * @property centerFrame
     * @type boolean
     */
    centerFrame: false,

    /**
     * Creates the proxy element if it does not yet exist
     * @method createFrame
     */
    createFrame: function() {
        var self = this;
        var body = document.body;

        if (!body || !body.firstChild) {
            setTimeout( function() { self.createFrame(); }, 50 );
            return;
        }

        var div = this.getDragEl();

        if (!div) {
            div    = document.createElement("div");
            div.id = this.dragElId;
            var s  = div.style;

            s.position   = "absolute";
            s.visibility = "hidden";
            s.cursor     = "move";
            s.border     = "2px solid #aaa";
            s.zIndex     = 999;

            // appendChild can blow up IE if invoked prior to the window load event
            // while rendering a table.  It is possible there are other scenarios
            // that would cause this to happen as well.
            body.insertBefore(div, body.firstChild);
        }
    },

    /**
     * Initialization for the drag frame element.  Must be called in the
     * constructor of all subclasses
     * @method initFrame
     */
    initFrame: function() {
        this.createFrame();
    },

    applyConfig: function() {
        Roo.dd.DDProxy.superclass.applyConfig.call(this);

        this.resizeFrame = (this.config.resizeFrame !== false);
        this.centerFrame = (this.config.centerFrame);
        this.setDragElId(this.config.dragElId || Roo.dd.DDProxy.dragElId);
    },

    /**
     * Resizes the drag frame to the dimensions of the clicked object, positions
     * it over the object, and finally displays it
     * @method showFrame
     * @param {int} iPageX X click position
     * @param {int} iPageY Y click position
     * @private
     */
    showFrame: function(iPageX, iPageY) {
        var el = this.getEl();
        var dragEl = this.getDragEl();
        var s = dragEl.style;

        this._resizeProxy();

        if (this.centerFrame) {
            this.setDelta( Math.round(parseInt(s.width,  10)/2),
                           Math.round(parseInt(s.height, 10)/2) );
        }

        this.setDragElPos(iPageX, iPageY);

        Roo.fly(dragEl).show();
    },

    /**
     * The proxy is automatically resized to the dimensions of the linked
     * element when a drag is initiated, unless resizeFrame is set to false
     * @method _resizeProxy
     * @private
     */
    _resizeProxy: function() {
        if (this.resizeFrame) {
            var el = this.getEl();
            Roo.fly(this.getDragEl()).setSize(el.offsetWidth, el.offsetHeight);
        }
    },

    // overrides Roo.dd.DragDrop
    b4MouseDown: function(e) {
        var x = e.getPageX();
        var y = e.getPageY();
        this.autoOffset(x, y);
        this.setDragElPos(x, y);
    },

    // overrides Roo.dd.DragDrop
    b4StartDrag: function(x, y) {
        // show the drag frame
        this.showFrame(x, y);
    },

    // overrides Roo.dd.DragDrop
    b4EndDrag: function(e) {
        Roo.fly(this.getDragEl()).hide();
    },

    // overrides Roo.dd.DragDrop
    // By default we try to move the element to the last location of the frame.
    // This is so that the default behavior mirrors that of Roo.dd.DD.
    endDrag: function(e) {

        var lel = this.getEl();
        var del = this.getDragEl();

        // Show the drag frame briefly so we can get its position
        del.style.visibility = "";

        this.beforeMove();
        // Hide the linked element before the move to get around a Safari
        // rendering bug.
        lel.style.visibility = "hidden";
        Roo.dd.DDM.moveToEl(lel, del);
        del.style.visibility = "hidden";
        lel.style.visibility = "";

        this.afterDrag();
    },

    beforeMove : function(){

    },

    afterDrag : function(){

    },

    toString: function() {
        return ("DDProxy " + this.id);
    }

});
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

 /**
 * @class Roo.dd.DDTarget
 * A DragDrop implementation that does not move, but can be a drop
 * target.  You would get the same result by simply omitting implementation
 * for the event callbacks, but this way we reduce the processing cost of the
 * event listener and the callbacks.
 * @extends Roo.dd.DragDrop
 * @constructor
 * @param {String} id the id of the element that is a drop target
 * @param {String} sGroup the group of related DragDrop objects
 * @param {object} config an object containing configurable attributes
 *                 Valid properties for DDTarget in addition to those in
 *                 DragDrop:
 *                    none
 */
Roo.dd.DDTarget = function(id, sGroup, config) {
    if (id) {
        this.initTarget(id, sGroup, config);
    }
    if (config && (config.listeners || config.events)) { 
        Roo.dd.DragDrop.superclass.constructor.call(this,  { 
            listeners : config.listeners || {}, 
            events : config.events || {} 
        });    
    }
};

// Roo.dd.DDTarget.prototype = new Roo.dd.DragDrop();
Roo.extend(Roo.dd.DDTarget, Roo.dd.DragDrop, {
    toString: function() {
        return ("DDTarget " + this.id);
    }
});
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.dd.ScrollManager
 * Provides automatic scrolling of overflow regions in the page during drag operations.<br><br>
 * <b>Note: This class uses "Point Mode" and is untested in "Intersect Mode".</b>
 * @static
 */
Roo.dd.ScrollManager = function(){
    var ddm = Roo.dd.DragDropMgr;
    var els = {};
    var dragEl = null;
    var proc = {};
    
    
    
    var onStop = function(e){
        dragEl = null;
        clearProc();
    };
    
    var triggerRefresh = function(){
        if(ddm.dragCurrent){
             ddm.refreshCache(ddm.dragCurrent.groups);
        }
    };
    
    var doScroll = function(){
        if(ddm.dragCurrent){
            var dds = Roo.dd.ScrollManager;
            if(!dds.animate){
                if(proc.el.scroll(proc.dir, dds.increment)){
                    triggerRefresh();
                }
            }else{
                proc.el.scroll(proc.dir, dds.increment, true, dds.animDuration, triggerRefresh);
            }
        }
    };
    
    var clearProc = function(){
        if(proc.id){
            clearInterval(proc.id);
        }
        proc.id = 0;
        proc.el = null;
        proc.dir = "";
    };
    
    var startProc = function(el, dir){
         Roo.log('scroll startproc');
        clearProc();
        proc.el = el;
        proc.dir = dir;
        proc.id = setInterval(doScroll, Roo.dd.ScrollManager.frequency);
    };
    
    var onFire = function(e, isDrop){
       
        if(isDrop || !ddm.dragCurrent){ return; }
        var dds = Roo.dd.ScrollManager;
        if(!dragEl || dragEl != ddm.dragCurrent){
            dragEl = ddm.dragCurrent;
            // refresh regions on drag start
            dds.refreshCache();
        }
        
        var xy = Roo.lib.Event.getXY(e);
        var pt = new Roo.lib.Point(xy[0], xy[1]);
        for(var id in els){
            var el = els[id], r = el._region;
            if(r && r.contains(pt) && el.isScrollable()){
                if(r.bottom - pt.y <= dds.thresh){
                    if(proc.el != el){
                        startProc(el, "down");
                    }
                    return;
                }else if(r.right - pt.x <= dds.thresh){
                    if(proc.el != el){
                        startProc(el, "left");
                    }
                    return;
                }else if(pt.y - r.top <= dds.thresh){
                    if(proc.el != el){
                        startProc(el, "up");
                    }
                    return;
                }else if(pt.x - r.left <= dds.thresh){
                    if(proc.el != el){
                        startProc(el, "right");
                    }
                    return;
                }
            }
        }
        clearProc();
    };
    
    ddm.fireEvents = ddm.fireEvents.createSequence(onFire, ddm);
    ddm.stopDrag = ddm.stopDrag.createSequence(onStop, ddm);
    
    return {
        /**
         * Registers new overflow element(s) to auto scroll
         * @param {String/HTMLElement/Element/Array} el The id of or the element to be scrolled or an array of either
         */
        register : function(el){
            if(el instanceof Array){
                for(var i = 0, len = el.length; i < len; i++) {
                	this.register(el[i]);
                }
            }else{
                el = Roo.get(el);
                els[el.id] = el;
            }
            Roo.dd.ScrollManager.els = els;
        },
        
        /**
         * Unregisters overflow element(s) so they are no longer scrolled
         * @param {String/HTMLElement/Element/Array} el The id of or the element to be removed or an array of either
         */
        unregister : function(el){
            if(el instanceof Array){
                for(var i = 0, len = el.length; i < len; i++) {
                	this.unregister(el[i]);
                }
            }else{
                el = Roo.get(el);
                delete els[el.id];
            }
        },
        
        /**
         * The number of pixels from the edge of a container the pointer needs to be to 
         * trigger scrolling (defaults to 25)
         * @type Number
         */
        thresh : 25,
        
        /**
         * The number of pixels to scroll in each scroll increment (defaults to 50)
         * @type Number
         */
        increment : 100,
        
        /**
         * The frequency of scrolls in milliseconds (defaults to 500)
         * @type Number
         */
        frequency : 500,
        
        /**
         * True to animate the scroll (defaults to true)
         * @type Boolean
         */
        animate: true,
        
        /**
         * The animation duration in seconds - 
         * MUST BE less than Roo.dd.ScrollManager.frequency! (defaults to .4)
         * @type Number
         */
        animDuration: .4,
        
        /**
         * Manually trigger a cache refresh.
         */
        refreshCache : function(){
            for(var id in els){
                if(typeof els[id] == 'object'){ // for people extending the object prototype
                    els[id]._region = els[id].getRegion();
                }
            }
        }
    };
}();/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.dd.Registry
 * Provides easy access to all drag drop components that are registered on a page.  Items can be retrieved either
 * directly by DOM node id, or by passing in the drag drop event that occurred and looking up the event target.
 * @static
 */
Roo.dd.Registry = function(){
    var elements = {}; 
    var handles = {}; 
    var autoIdSeed = 0;

    var getId = function(el, autogen){
        if(typeof el == "string"){
            return el;
        }
        var id = el.id;
        if(!id && autogen !== false){
            id = "roodd-" + (++autoIdSeed);
            el.id = id;
        }
        return id;
    };
    
    return {
    /**
     * Register a drag drop element
     * @param {String|HTMLElement} element The id or DOM node to register
     * @param {Object} data (optional) A custom data object that will be passed between the elements that are involved
     * in drag drop operations.  You can populate this object with any arbitrary properties that your own code
     * knows how to interpret, plus there are some specific properties known to the Registry that should be
     * populated in the data object (if applicable):
     * <pre>
Value      Description<br />
---------  ------------------------------------------<br />
handles    Array of DOM nodes that trigger dragging<br />
           for the element being registered<br />
isHandle   True if the element passed in triggers<br />
           dragging itself, else false
</pre>
     */
        register : function(el, data){
            data = data || {};
            if(typeof el == "string"){
                el = document.getElementById(el);
            }
            data.ddel = el;
            elements[getId(el)] = data;
            if(data.isHandle !== false){
                handles[data.ddel.id] = data;
            }
            if(data.handles){
                var hs = data.handles;
                for(var i = 0, len = hs.length; i < len; i++){
                	handles[getId(hs[i])] = data;
                }
            }
        },

    /**
     * Unregister a drag drop element
     * @param {String|HTMLElement}  element The id or DOM node to unregister
     */
        unregister : function(el){
            var id = getId(el, false);
            var data = elements[id];
            if(data){
                delete elements[id];
                if(data.handles){
                    var hs = data.handles;
                    for(var i = 0, len = hs.length; i < len; i++){
                    	delete handles[getId(hs[i], false)];
                    }
                }
            }
        },

    /**
     * Returns the handle registered for a DOM Node by id
     * @param {String|HTMLElement} id The DOM node or id to look up
     * @return {Object} handle The custom handle data
     */
        getHandle : function(id){
            if(typeof id != "string"){ // must be element?
                id = id.id;
            }
            return handles[id];
        },

    /**
     * Returns the handle that is registered for the DOM node that is the target of the event
     * @param {Event} e The event
     * @return {Object} handle The custom handle data
     */
        getHandleFromEvent : function(e){
            var t = Roo.lib.Event.getTarget(e);
            return t ? handles[t.id] : null;
        },

    /**
     * Returns a custom data object that is registered for a DOM node by id
     * @param {String|HTMLElement} id The DOM node or id to look up
     * @return {Object} data The custom data
     */
        getTarget : function(id){
            if(typeof id != "string"){ // must be element?
                id = id.id;
            }
            return elements[id];
        },

    /**
     * Returns a custom data object that is registered for the DOM node that is the target of the event
     * @param {Event} e The event
     * @return {Object} data The custom data
     */
        getTargetFromEvent : function(e){
            var t = Roo.lib.Event.getTarget(e);
            return t ? elements[t.id] || handles[t.id] : null;
        }
    };
}();/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.dd.StatusProxy
 * A specialized drag proxy that supports a drop status icon, {@link Roo.Layer} styles and auto-repair.  This is the
 * default drag proxy used by all Roo.dd components.
 * @constructor
 * @param {Object} config
 */
Roo.dd.StatusProxy = function(config){
    Roo.apply(this, config);
    this.id = this.id || Roo.id();
    this.el = new Roo.Layer({
        dh: {
            id: this.id, tag: "div", cls: "x-dd-drag-proxy "+this.dropNotAllowed, children: [
                {tag: "div", cls: "x-dd-drop-icon"},
                {tag: "div", cls: "x-dd-drag-ghost"}
            ]
        }, 
        shadow: !config || config.shadow !== false
    });
    this.ghost = Roo.get(this.el.dom.childNodes[1]);
    this.dropStatus = this.dropNotAllowed;
};

Roo.dd.StatusProxy.prototype = {
    /**
     * @cfg {String} dropAllowed
     * The CSS class to apply to the status element when drop is allowed (defaults to "x-dd-drop-ok").
     */
    dropAllowed : "x-dd-drop-ok",
    /**
     * @cfg {String} dropNotAllowed
     * The CSS class to apply to the status element when drop is not allowed (defaults to "x-dd-drop-nodrop").
     */
    dropNotAllowed : "x-dd-drop-nodrop",

    /**
     * Updates the proxy's visual element to indicate the status of whether or not drop is allowed
     * over the current target element.
     * @param {String} cssClass The css class for the new drop status indicator image
     */
    setStatus : function(cssClass){
        cssClass = cssClass || this.dropNotAllowed;
        if(this.dropStatus != cssClass){
            this.el.replaceClass(this.dropStatus, cssClass);
            this.dropStatus = cssClass;
        }
    },

    /**
     * Resets the status indicator to the default dropNotAllowed value
     * @param {Boolean} clearGhost True to also remove all content from the ghost, false to preserve it
     */
    reset : function(clearGhost){
        this.el.dom.className = "x-dd-drag-proxy " + this.dropNotAllowed;
        this.dropStatus = this.dropNotAllowed;
        if(clearGhost){
            this.ghost.update("");
        }
    },

    /**
     * Updates the contents of the ghost element
     * @param {String} html The html that will replace the current innerHTML of the ghost element
     */
    update : function(html){
        if(typeof html == "string"){
            this.ghost.update(html);
        }else{
            this.ghost.update("");
            html.style.margin = "0";
            this.ghost.dom.appendChild(html);
        }
        // ensure float = none set?? cant remember why though.
        var el = this.ghost.dom.firstChild;
		if(el){
			Roo.fly(el).setStyle('float', 'none');
		}
    },
    
    /**
     * Returns the underlying proxy {@link Roo.Layer}
     * @return {Roo.Layer} el
    */
    getEl : function(){
        return this.el;
    },

    /**
     * Returns the ghost element
     * @return {Roo.Element} el
     */
    getGhost : function(){
        return this.ghost;
    },

    /**
     * Hides the proxy
     * @param {Boolean} clear True to reset the status and clear the ghost contents, false to preserve them
     */
    hide : function(clear){
        this.el.hide();
        if(clear){
            this.reset(true);
        }
    },

    /**
     * Stops the repair animation if it's currently running
     */
    stop : function(){
        if(this.anim && this.anim.isAnimated && this.anim.isAnimated()){
            this.anim.stop();
        }
    },

    /**
     * Displays this proxy
     */
    show : function(){
        this.el.show();
    },

    /**
     * Force the Layer to sync its shadow and shim positions to the element
     */
    sync : function(){
        this.el.sync();
    },

    /**
     * Causes the proxy to return to its position of origin via an animation.  Should be called after an
     * invalid drop operation by the item being dragged.
     * @param {Array} xy The XY position of the element ([x, y])
     * @param {Function} callback The function to call after the repair is complete
     * @param {Object} scope The scope in which to execute the callback
     */
    repair : function(xy, callback, scope){
        this.callback = callback;
        this.scope = scope;
        if(xy && this.animRepair !== false){
            this.el.addClass("x-dd-drag-repair");
            this.el.hideUnders(true);
            this.anim = this.el.shift({
                duration: this.repairDuration || .5,
                easing: 'easeOut',
                xy: xy,
                stopFx: true,
                callback: this.afterRepair,
                scope: this
            });
        }else{
            this.afterRepair();
        }
    },

    // private
    afterRepair : function(){
        this.hide(true);
        if(typeof this.callback == "function"){
            this.callback.call(this.scope || this);
        }
        this.callback = null;
        this.scope = null;
    }
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.dd.DragSource
 * @extends Roo.dd.DDProxy
 * A simple class that provides the basic implementation needed to make any element draggable.
 * @constructor
 * @param {String/HTMLElement/Element} el The container element
 * @param {Object} config
 */
Roo.dd.DragSource = function(el, config){
    this.el = Roo.get(el);
    this.dragData = {};
    
    Roo.apply(this, config);
    
    if(!this.proxy){
        this.proxy = new Roo.dd.StatusProxy();
    }

    Roo.dd.DragSource.superclass.constructor.call(this, this.el.dom, this.ddGroup || this.group,
          {dragElId : this.proxy.id, resizeFrame: false, isTarget: false, scroll: this.scroll === true});
    
    this.dragging = false;
};

Roo.extend(Roo.dd.DragSource, Roo.dd.DDProxy, {
    /**
     * @cfg {String} dropAllowed
     * The CSS class returned to the drag source when drop is allowed (defaults to "x-dd-drop-ok").
     */
    dropAllowed : "x-dd-drop-ok",
    /**
     * @cfg {String} dropNotAllowed
     * The CSS class returned to the drag source when drop is not allowed (defaults to "x-dd-drop-nodrop").
     */
    dropNotAllowed : "x-dd-drop-nodrop",

    /**
     * Returns the data object associated with this drag source
     * @return {Object} data An object containing arbitrary data
     */
    getDragData : function(e){
        return this.dragData;
    },

    // private
    onDragEnter : function(e, id){
        var target = Roo.dd.DragDropMgr.getDDById(id);
        this.cachedTarget = target;
        if(this.beforeDragEnter(target, e, id) !== false){
            if(target.isNotifyTarget){
                var status = target.notifyEnter(this, e, this.dragData);
                this.proxy.setStatus(status);
            }else{
                this.proxy.setStatus(this.dropAllowed);
            }
            
            if(this.afterDragEnter){
                /**
                 * An empty function by default, but provided so that you can perform a custom action
                 * when the dragged item enters the drop target by providing an implementation.
                 * @param {Roo.dd.DragDrop} target The drop target
                 * @param {Event} e The event object
                 * @param {String} id The id of the dragged element
                 * @method afterDragEnter
                 */
                this.afterDragEnter(target, e, id);
            }
        }
    },

    /**
     * An empty function by default, but provided so that you can perform a custom action
     * before the dragged item enters the drop target and optionally cancel the onDragEnter.
     * @param {Roo.dd.DragDrop} target The drop target
     * @param {Event} e The event object
     * @param {String} id The id of the dragged element
     * @return {Boolean} isValid True if the drag event is valid, else false to cancel
     */
    beforeDragEnter : function(target, e, id){
        return true;
    },

    // private
    alignElWithMouse: function() {
        Roo.dd.DragSource.superclass.alignElWithMouse.apply(this, arguments);
        this.proxy.sync();
    },

    // private
    onDragOver : function(e, id){
        var target = this.cachedTarget || Roo.dd.DragDropMgr.getDDById(id);
        if(this.beforeDragOver(target, e, id) !== false){
            if(target.isNotifyTarget){
                var status = target.notifyOver(this, e, this.dragData);
                this.proxy.setStatus(status);
            }

            if(this.afterDragOver){
                /**
                 * An empty function by default, but provided so that you can perform a custom action
                 * while the dragged item is over the drop target by providing an implementation.
                 * @param {Roo.dd.DragDrop} target The drop target
                 * @param {Event} e The event object
                 * @param {String} id The id of the dragged element
                 * @method afterDragOver
                 */
                this.afterDragOver(target, e, id);
            }
        }
    },

    /**
     * An empty function by default, but provided so that you can perform a custom action
     * while the dragged item is over the drop target and optionally cancel the onDragOver.
     * @param {Roo.dd.DragDrop} target The drop target
     * @param {Event} e The event object
     * @param {String} id The id of the dragged element
     * @return {Boolean} isValid True if the drag event is valid, else false to cancel
     */
    beforeDragOver : function(target, e, id){
        return true;
    },

    // private
    onDragOut : function(e, id){
        var target = this.cachedTarget || Roo.dd.DragDropMgr.getDDById(id);
        if(this.beforeDragOut(target, e, id) !== false){
            if(target.isNotifyTarget){
                target.notifyOut(this, e, this.dragData);
            }
            this.proxy.reset();
            if(this.afterDragOut){
                /**
                 * An empty function by default, but provided so that you can perform a custom action
                 * after the dragged item is dragged out of the target without dropping.
                 * @param {Roo.dd.DragDrop} target The drop target
                 * @param {Event} e The event object
                 * @param {String} id The id of the dragged element
                 * @method afterDragOut
                 */
                this.afterDragOut(target, e, id);
            }
        }
        this.cachedTarget = null;
    },

    /**
     * An empty function by default, but provided so that you can perform a custom action before the dragged
     * item is dragged out of the target without dropping, and optionally cancel the onDragOut.
     * @param {Roo.dd.DragDrop} target The drop target
     * @param {Event} e The event object
     * @param {String} id The id of the dragged element
     * @return {Boolean} isValid True if the drag event is valid, else false to cancel
     */
    beforeDragOut : function(target, e, id){
        return true;
    },
    
    // private
    onDragDrop : function(e, id){
        var target = this.cachedTarget || Roo.dd.DragDropMgr.getDDById(id);
        if(this.beforeDragDrop(target, e, id) !== false){
            if(target.isNotifyTarget){
                if(target.notifyDrop(this, e, this.dragData)){ // valid drop?
                    this.onValidDrop(target, e, id);
                }else{
                    this.onInvalidDrop(target, e, id);
                }
            }else{
                this.onValidDrop(target, e, id);
            }
            
            if(this.afterDragDrop){
                /**
                 * An empty function by default, but provided so that you can perform a custom action
                 * after a valid drag drop has occurred by providing an implementation.
                 * @param {Roo.dd.DragDrop} target The drop target
                 * @param {Event} e The event object
                 * @param {String} id The id of the dropped element
                 * @method afterDragDrop
                 */
                this.afterDragDrop(target, e, id);
            }
        }
        delete this.cachedTarget;
    },

    /**
     * An empty function by default, but provided so that you can perform a custom action before the dragged
     * item is dropped onto the target and optionally cancel the onDragDrop.
     * @param {Roo.dd.DragDrop} target The drop target
     * @param {Event} e The event object
     * @param {String} id The id of the dragged element
     * @return {Boolean} isValid True if the drag drop event is valid, else false to cancel
     */
    beforeDragDrop : function(target, e, id){
        return true;
    },

    // private
    onValidDrop : function(target, e, id){
        this.hideProxy();
        if(this.afterValidDrop){
            /**
             * An empty function by default, but provided so that you can perform a custom action
             * after a valid drop has occurred by providing an implementation.
             * @param {Object} target The target DD 
             * @param {Event} e The event object
             * @param {String} id The id of the dropped element
             * @method afterInvalidDrop
             */
            this.afterValidDrop(target, e, id);
        }
    },

    // private
    getRepairXY : function(e, data){
        return this.el.getXY();  
    },

    // private
    onInvalidDrop : function(target, e, id){
        this.beforeInvalidDrop(target, e, id);
        if(this.cachedTarget){
            if(this.cachedTarget.isNotifyTarget){
                this.cachedTarget.notifyOut(this, e, this.dragData);
            }
            this.cacheTarget = null;
        }
        this.proxy.repair(this.getRepairXY(e, this.dragData), this.afterRepair, this);

        if(this.afterInvalidDrop){
            /**
             * An empty function by default, but provided so that you can perform a custom action
             * after an invalid drop has occurred by providing an implementation.
             * @param {Event} e The event object
             * @param {String} id The id of the dropped element
             * @method afterInvalidDrop
             */
            this.afterInvalidDrop(e, id);
        }
    },

    // private
    afterRepair : function(){
        if(Roo.enableFx){
            this.el.highlight(this.hlColor || "c3daf9");
        }
        this.dragging = false;
    },

    /**
     * An empty function by default, but provided so that you can perform a custom action after an invalid
     * drop has occurred.
     * @param {Roo.dd.DragDrop} target The drop target
     * @param {Event} e The event object
     * @param {String} id The id of the dragged element
     * @return {Boolean} isValid True if the invalid drop should proceed, else false to cancel
     */
    beforeInvalidDrop : function(target, e, id){
        return true;
    },

    // private
    handleMouseDown : function(e){
        if(this.dragging) {
            return;
        }
        var data = this.getDragData(e);
        if(data && this.onBeforeDrag(data, e) !== false){
            this.dragData = data;
            this.proxy.stop();
            Roo.dd.DragSource.superclass.handleMouseDown.apply(this, arguments);
        } 
    },

    /**
     * An empty function by default, but provided so that you can perform a custom action before the initial
     * drag event begins and optionally cancel it.
     * @param {Object} data An object containing arbitrary data to be shared with drop targets
     * @param {Event} e The event object
     * @return {Boolean} isValid True if the drag event is valid, else false to cancel
     */
    onBeforeDrag : function(data, e){
        return true;
    },

    /**
     * An empty function by default, but provided so that you can perform a custom action once the initial
     * drag event has begun.  The drag cannot be canceled from this function.
     * @param {Number} x The x position of the click on the dragged object
     * @param {Number} y The y position of the click on the dragged object
     */
    onStartDrag : Roo.emptyFn,

    // private - YUI override
    startDrag : function(x, y){
        this.proxy.reset();
        this.dragging = true;
        this.proxy.update("");
        this.onInitDrag(x, y);
        this.proxy.show();
    },

    // private
    onInitDrag : function(x, y){
        var clone = this.el.dom.cloneNode(true);
        clone.id = Roo.id(); // prevent duplicate ids
        this.proxy.update(clone);
        this.onStartDrag(x, y);
        return true;
    },

    /**
     * Returns the drag source's underlying {@link Roo.dd.StatusProxy}
     * @return {Roo.dd.StatusProxy} proxy The StatusProxy
     */
    getProxy : function(){
        return this.proxy;  
    },

    /**
     * Hides the drag source's {@link Roo.dd.StatusProxy}
     */
    hideProxy : function(){
        this.proxy.hide();  
        this.proxy.reset(true);
        this.dragging = false;
    },

    // private
    triggerCacheRefresh : function(){
        Roo.dd.DDM.refreshCache(this.groups);
    },

    // private - override to prevent hiding
    b4EndDrag: function(e) {
    },

    // private - override to prevent moving
    endDrag : function(e){
        this.onEndDrag(this.dragData, e);
    },

    // private
    onEndDrag : function(data, e){
    },
    
    // private - pin to cursor
    autoOffset : function(x, y) {
        this.setDelta(-12, -20);
    }    
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */


/**
 * @class Roo.dd.DropTarget
 * @extends Roo.dd.DDTarget
 * A simple class that provides the basic implementation needed to make any element a drop target that can have
 * draggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided.
 * @constructor
 * @param {String/HTMLElement/Element} el The container element
 * @param {Object} config
 */
Roo.dd.DropTarget = function(el, config){
    this.el = Roo.get(el);
    
    var listeners = false; ;
    if (config && config.listeners) {
        listeners= config.listeners;
        delete config.listeners;
    }
    Roo.apply(this, config);
    
    if(this.containerScroll){
        Roo.dd.ScrollManager.register(this.el);
    }
    this.addEvents( {
         /**
         * @scope Roo.dd.DropTarget
         */
         
         /**
         * @event enter
         * The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the source is now over the
         * target.  This default implementation adds the CSS class specified by overClass (if any) to the drop element
         * and returns the dropAllowed config value.  This method should be overridden if drop validation is required.
         * 
         * IMPORTANT : it should set  this.valid to true|false
         * 
         * @param {Roo.dd.DragSource} source The drag source that was dragged over this drop target
         * @param {Event} e The event
         * @param {Object} data An object containing arbitrary data supplied by the drag source
         */
        "enter" : true,
        
         /**
         * @event over
         * The function a {@link Roo.dd.DragSource} calls continuously while it is being dragged over the target.
         * This method will be called on every mouse movement while the drag source is over the drop target.
         * This default implementation simply returns the dropAllowed config value.
         * 
         * IMPORTANT : it should set  this.valid to true|false
         * 
         * @param {Roo.dd.DragSource} source The drag source that was dragged over this drop target
         * @param {Event} e The event
         * @param {Object} data An object containing arbitrary data supplied by the drag source
         
         */
        "over" : true,
        /**
         * @event out
         * The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the source has been dragged
         * out of the target without dropping.  This default implementation simply removes the CSS class specified by
         * overClass (if any) from the drop element.
         * 
         * 
         * @param {Roo.dd.DragSource} source The drag source that was dragged over this drop target
         * @param {Event} e The event
         * @param {Object} data An object containing arbitrary data supplied by the drag source
         */
         "out" : true,
         
        /**
         * @event drop
         * The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the dragged item has
         * been dropped on it.  This method has no default implementation and returns false, so you must provide an
         * implementation that does something to process the drop event and returns true so that the drag source's
         * repair action does not run.
         * 
         * IMPORTANT : it should set this.success
         * 
         * @param {Roo.dd.DragSource} source The drag source that was dragged over this drop target
         * @param {Event} e The event
         * @param {Object} data An object containing arbitrary data supplied by the drag source
        */
         "drop" : true
    });
            
     
    Roo.dd.DropTarget.superclass.constructor.call(  this, 
        this.el.dom, 
        this.ddGroup || this.group,
        {
            isTarget: true,
            listeners : listeners || {} 
           
        
        }
    );

};

Roo.extend(Roo.dd.DropTarget, Roo.dd.DDTarget, {
    /**
     * @cfg {String} overClass
     * The CSS class applied to the drop target element while the drag source is over it (defaults to "").
     */
     /**
     * @cfg {String} ddGroup
     * The drag drop group to handle drop events for
     */
     
    /**
     * @cfg {String} dropAllowed
     * The CSS class returned to the drag source when drop is allowed (defaults to "x-dd-drop-ok").
     */
    dropAllowed : "x-dd-drop-ok",
    /**
     * @cfg {String} dropNotAllowed
     * The CSS class returned to the drag source when drop is not allowed (defaults to "x-dd-drop-nodrop").
     */
    dropNotAllowed : "x-dd-drop-nodrop",
    /**
     * @cfg {boolean} success
     * set this after drop listener.. 
     */
    success : false,
    /**
     * @cfg {boolean|String} valid true/false or string (ok-add/ok-sub/ok/nodrop)
     * if the drop point is valid for over/enter..
     */
    valid : false,
    // private
    isTarget : true,

    // private
    isNotifyTarget : true,
    
    /**
     * @hide
     */
    notifyEnter : function(dd, e, data)
    {
        this.valid = true;
        this.fireEvent('enter', dd, e, data);
        if(this.overClass){
            this.el.addClass(this.overClass);
        }
        return typeof(this.valid) == 'string' ? 'x-dd-drop-' + this.valid : (
            this.valid ? this.dropAllowed : this.dropNotAllowed
        );
    },

    /**
     * @hide
     */
    notifyOver : function(dd, e, data)
    {
        this.valid = true;
        this.fireEvent('over', dd, e, data);
        return typeof(this.valid) == 'string' ? 'x-dd-drop-' + this.valid : (
            this.valid ? this.dropAllowed : this.dropNotAllowed
        );
    },

    /**
     * @hide
     */
    notifyOut : function(dd, e, data)
    {
        this.fireEvent('out', dd, e, data);
        if(this.overClass){
            this.el.removeClass(this.overClass);
        }
    },

    /**
     * @hide
     */
    notifyDrop : function(dd, e, data)
    {
        this.success = false;
        this.fireEvent('drop', dd, e, data);
        return this.success;
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */


/**
 * @class Roo.dd.DragZone
 * @extends Roo.dd.DragSource
 * This class provides a container DD instance that proxies for multiple child node sources.<br />
 * By default, this class requires that draggable child nodes are registered with {@link Roo.dd.Registry}.
 * @constructor
 * @param {String/HTMLElement/Element} el The container element
 * @param {Object} config
 */
Roo.dd.DragZone = function(el, config){
    Roo.dd.DragZone.superclass.constructor.call(this, el, config);
    if(this.containerScroll){
        Roo.dd.ScrollManager.register(this.el);
    }
};

Roo.extend(Roo.dd.DragZone, Roo.dd.DragSource, {
    /**
     * @cfg {Boolean} containerScroll True to register this container with the Scrollmanager
     * for auto scrolling during drag operations.
     */
    /**
     * @cfg {String} hlColor The color to use when visually highlighting the drag source in the afterRepair
     * method after a failed drop (defaults to "c3daf9" - light blue)
     */

    /**
     * Called when a mousedown occurs in this container. Looks in {@link Roo.dd.Registry}
     * for a valid target to drag based on the mouse down. Override this method
     * to provide your own lookup logic (e.g. finding a child by class name). Make sure your returned
     * object has a "ddel" attribute (with an HTML Element) for other functions to work.
     * @param {EventObject} e The mouse down event
     * @return {Object} The dragData
     */
    getDragData : function(e){
        return Roo.dd.Registry.getHandleFromEvent(e);
    },
    
    /**
     * Called once drag threshold has been reached to initialize the proxy element. By default, it clones the
     * this.dragData.ddel
     * @param {Number} x The x position of the click on the dragged object
     * @param {Number} y The y position of the click on the dragged object
     * @return {Boolean} true to continue the drag, false to cancel
     */
    onInitDrag : function(x, y){
        this.proxy.update(this.dragData.ddel.cloneNode(true));
        this.onStartDrag(x, y);
        return true;
    },
    
    /**
     * Called after a repair of an invalid drop. By default, highlights this.dragData.ddel 
     */
    afterRepair : function(){
        if(Roo.enableFx){
            Roo.Element.fly(this.dragData.ddel).highlight(this.hlColor || "c3daf9");
        }
        this.dragging = false;
    },

    /**
     * Called before a repair of an invalid drop to get the XY to animate to. By default returns
     * the XY of this.dragData.ddel
     * @param {EventObject} e The mouse up event
     * @return {Array} The xy location (e.g. [100, 200])
     */
    getRepairXY : function(e){
        return Roo.Element.fly(this.dragData.ddel).getXY();  
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.dd.DropZone
 * @extends Roo.dd.DropTarget
 * This class provides a container DD instance that proxies for multiple child node targets.<br />
 * By default, this class requires that child nodes accepting drop are registered with {@link Roo.dd.Registry}.
 * @constructor
 * @param {String/HTMLElement/Element} el The container element
 * @param {Object} config
 */
Roo.dd.DropZone = function(el, config){
    Roo.dd.DropZone.superclass.constructor.call(this, el, config);
};

Roo.extend(Roo.dd.DropZone, Roo.dd.DropTarget, {
    /**
     * Returns a custom data object associated with the DOM node that is the target of the event.  By default
     * this looks up the event target in the {@link Roo.dd.Registry}, although you can override this method to
     * provide your own custom lookup.
     * @param {Event} e The event
     * @return {Object} data The custom data
     */
    getTargetFromEvent : function(e){
        return Roo.dd.Registry.getTargetFromEvent(e);
    },

    /**
     * Called internally when the DropZone determines that a {@link Roo.dd.DragSource} has entered a drop node
     * that it has registered.  This method has no default implementation and should be overridden to provide
     * node-specific processing if necessary.
     * @param {Object} nodeData The custom data associated with the drop node (this is the same value returned from 
     * {@link #getTargetFromEvent} for this node)
     * @param {Roo.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     */
    onNodeEnter : function(n, dd, e, data){
        
    },

    /**
     * Called internally while the DropZone determines that a {@link Roo.dd.DragSource} is over a drop node
     * that it has registered.  The default implementation returns this.dropNotAllowed, so it should be
     * overridden to provide the proper feedback.
     * @param {Object} nodeData The custom data associated with the drop node (this is the same value returned from
     * {@link #getTargetFromEvent} for this node)
     * @param {Roo.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     * @return {String} status The CSS class that communicates the drop status back to the source so that the
     * underlying {@link Roo.dd.StatusProxy} can be updated
     */
    onNodeOver : function(n, dd, e, data){
        return this.dropAllowed;
    },

    /**
     * Called internally when the DropZone determines that a {@link Roo.dd.DragSource} has been dragged out of
     * the drop node without dropping.  This method has no default implementation and should be overridden to provide
     * node-specific processing if necessary.
     * @param {Object} nodeData The custom data associated with the drop node (this is the same value returned from
     * {@link #getTargetFromEvent} for this node)
     * @param {Roo.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     */
    onNodeOut : function(n, dd, e, data){
        
    },

    /**
     * Called internally when the DropZone determines that a {@link Roo.dd.DragSource} has been dropped onto
     * the drop node.  The default implementation returns false, so it should be overridden to provide the
     * appropriate processing of the drop event and return true so that the drag source's repair action does not run.
     * @param {Object} nodeData The custom data associated with the drop node (this is the same value returned from
     * {@link #getTargetFromEvent} for this node)
     * @param {Roo.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     * @return {Boolean} True if the drop was valid, else false
     */
    onNodeDrop : function(n, dd, e, data){
        return false;
    },

    /**
     * Called internally while the DropZone determines that a {@link Roo.dd.DragSource} is being dragged over it,
     * but not over any of its registered drop nodes.  The default implementation returns this.dropNotAllowed, so
     * it should be overridden to provide the proper feedback if necessary.
     * @param {Roo.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     * @return {String} status The CSS class that communicates the drop status back to the source so that the
     * underlying {@link Roo.dd.StatusProxy} can be updated
     */
    onContainerOver : function(dd, e, data){
        return this.dropNotAllowed;
    },

    /**
     * Called internally when the DropZone determines that a {@link Roo.dd.DragSource} has been dropped on it,
     * but not on any of its registered drop nodes.  The default implementation returns false, so it should be
     * overridden to provide the appropriate processing of the drop event if you need the drop zone itself to
     * be able to accept drops.  It should return true when valid so that the drag source's repair action does not run.
     * @param {Roo.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     * @return {Boolean} True if the drop was valid, else false
     */
    onContainerDrop : function(dd, e, data){
        return false;
    },

    /**
     * The function a {@link Roo.dd.DragSource} calls once to notify this drop zone that the source is now over
     * the zone.  The default implementation returns this.dropNotAllowed and expects that only registered drop
     * nodes can process drag drop operations, so if you need the drop zone itself to be able to process drops
     * you should override this method and provide a custom implementation.
     * @param {Roo.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     * @return {String} status The CSS class that communicates the drop status back to the source so that the
     * underlying {@link Roo.dd.StatusProxy} can be updated
     */
    notifyEnter : function(dd, e, data){
        return this.dropNotAllowed;
    },

    /**
     * The function a {@link Roo.dd.DragSource} calls continuously while it is being dragged over the drop zone.
     * This method will be called on every mouse movement while the drag source is over the drop zone.
     * It will call {@link #onNodeOver} while the drag source is over a registered node, and will also automatically
     * delegate to the appropriate node-specific methods as necessary when the drag source enters and exits
     * registered nodes ({@link #onNodeEnter}, {@link #onNodeOut}). If the drag source is not currently over a
     * registered node, it will call {@link #onContainerOver}.
     * @param {Roo.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     * @return {String} status The CSS class that communicates the drop status back to the source so that the
     * underlying {@link Roo.dd.StatusProxy} can be updated
     */
    notifyOver : function(dd, e, data){
        var n = this.getTargetFromEvent(e);
        if(!n){ // not over valid drop target
            if(this.lastOverNode){
                this.onNodeOut(this.lastOverNode, dd, e, data);
                this.lastOverNode = null;
            }
            return this.onContainerOver(dd, e, data);
        }
        if(this.lastOverNode != n){
            if(this.lastOverNode){
                this.onNodeOut(this.lastOverNode, dd, e, data);
            }
            this.onNodeEnter(n, dd, e, data);
            this.lastOverNode = n;
        }
        return this.onNodeOver(n, dd, e, data);
    },

    /**
     * The function a {@link Roo.dd.DragSource} calls once to notify this drop zone that the source has been dragged
     * out of the zone without dropping.  If the drag source is currently over a registered node, the notification
     * will be delegated to {@link #onNodeOut} for node-specific handling, otherwise it will be ignored.
     * @param {Roo.dd.DragSource} source The drag source that was dragged over this drop target
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag zone
     */
    notifyOut : function(dd, e, data){
        if(this.lastOverNode){
            this.onNodeOut(this.lastOverNode, dd, e, data);
            this.lastOverNode = null;
        }
    },

    /**
     * The function a {@link Roo.dd.DragSource} calls once to notify this drop zone that the dragged item has
     * been dropped on it.  The drag zone will look up the target node based on the event passed in, and if there
     * is a node registered for that event, it will delegate to {@link #onNodeDrop} for node-specific handling,
     * otherwise it will call {@link #onContainerDrop}.
     * @param {Roo.dd.DragSource} source The drag source that was dragged over this drop zone
     * @param {Event} e The event
     * @param {Object} data An object containing arbitrary data supplied by the drag source
     * @return {Boolean} True if the drop was valid, else false
     */
    notifyDrop : function(dd, e, data){
        if(this.lastOverNode){
            this.onNodeOut(this.lastOverNode, dd, e, data);
            this.lastOverNode = null;
        }
        var n = this.getTargetFromEvent(e);
        return n ?
            this.onNodeDrop(n, dd, e, data) :
            this.onContainerDrop(dd, e, data);
    },

    // private
    triggerCacheRefresh : function(){
        Roo.dd.DDM.refreshCache(this.groups);
    }  
});Roo.languagedetect = {};// source : https://github.com/FGRibreau/node-language-detect/tree/master

Roo.languagedetect.LanguageDetect = function (languageType) {

  /**
   * The trigram data for comparison
   *
   * Will be loaded on start from $this->_db_filename
   *
   * May be set to a PEAR_Error object if there is an error during its
   * initialization
   *
   * @var      array
   * @access   private
   */
  this.langDb = {};

  /**
   * The size of the trigram data arrays
   *
   * @var     int
   * @access  private
   */
  this.threshold = 300;

  this.useUnicodeNarrowing = true;

  /**
   * Constructor
   *
   * Load the language database.
   *
   */
  this.langDb = Roo.languagedetect.dbLang['trigram'];
  this.unicodeMap = Roo.languagedetect.dbLang['trigram-unicodemap'];

  this.languageType = languageType || null;
};

Roo.languagedetect.LanguageDetect.prototype = {

  /**
   * Returns the number of languages that this object can detect
   *
   * @access public
   * @return int the number of languages
   */
  getLanguageCount:function () {
    return this.getLanguages().length;
  },

  setLanguageType:function (type) {
    return this.languageType = type;
  },

  /**
   * Returns the list of detectable languages
   *
   * @access public
   * @return object the names of the languages known to this object
   */
  getLanguages:function () {
    return Object.keys(this.langDb);
  },

  /**
   * Returns the list of detectable languages in code
   * 
   * @returns object the code of the languages known to this object
   * 
   */
  getLanguageCodes:function() {
      var languages = this.getLanguages();
      switch(this.languageType) {
          case 'iso2' :
            return languages.map((name) => this.getCode2(name)).filter(code => code !== null);
          case 'iso3' :
            return languages.map((name) => this.getCode3(name)).filter(code => code !== null);
          default :
            return languages;
      }
  },

  /**
   * Calculates a linear rank-order distance statistic between two sets of
   * ranked trigrams
   *
   * Sums the differences in rank for each trigram. If the trigram does not
   * appear in both, consider it a difference of $this->_threshold.
   *
   * This distance measure was proposed by Cavnar & Trenkle (1994). Despite
   * its simplicity it has been shown to be highly accurate for language
   * identification tasks.
   *
   * @access  private
   * @param   arr1  the reference set of trigram ranks
   * @param   arr2  the target set of trigram ranks
   * @return  int   the sum of the differences between the ranks of
   *                the two trigram sets
   */
  distance:function (arr1, arr2) {
    var me = this
      , sumdist = 0
      , keys = Object.keys(arr2)
      , i;

    for (i = keys.length; i--;) {
      sumdist += arr1[keys[i]] ? Math.abs(arr2[keys[i]] - arr1[keys[i]]) : me.threshold;
    }

    return sumdist;
  },

  /**
   * Normalizes the score returned by _distance()
   *
   * Different if perl compatible or not
   *
   * @access  private
   * @param   score       the score from _distance()
   * @param   baseCount   the number of trigrams being considered
   * @return  number      the normalized score
   *
   * @see     distance()
   */
  normalizeScore:function (score, baseCount) {
    return 1 - (score / (baseCount || this.threshold) / this.threshold);
  },

  /**
   * Detects the closeness of a sample of text to the known languages
   *
   * Calculates the statistical difference between the text and
   * the trigrams for each language, normalizes the score then
   * returns results for all languages in sorted order
   *
   * If perl compatible, the score is 300-0, 0 being most similar.
   * Otherwise, it's 0-1 with 1 being most similar.
   *
   * The $sample text should be at least a few sentences in length;
   * should be ascii-7 or utf8 encoded, if another and the mbstring extension
   * is present it will try to detect and convert. However, experience has
   * shown that mb_detect_encoding() *does not work very well* with at least
   * some types of encoding.
   *
   * @access  public
   * @param   sample  a sample of text to compare.
   * @param   limit  if specified, return an array of the most likely
   *                  $limit languages and their scores.
   * @return  Array   sorted array of language scores, blank array if no
   *                  useable text was found, or PEAR_Error if error
   *                  with the object setup
   *
   * @see     distance()
   */
  detect:function (sample, limit) {
    var me = this
      , scores = [];

    limit = +limit || 0;

    if (sample == '' || String(sample).length < 3) {return [];}

    var sampleObj = new Roo.languagedetect.Parser(sample);
    sampleObj.setPadStart(true);
    sampleObj.analyze();

    var trigramFreqs = sampleObj.getTrigramRanks()
      , trigramCount = Object.keys(trigramFreqs).length;

    if (trigramCount == 0) {return [];}

    var keys = [], i, lang;

    if (this.useUnicodeNarrowing) {
      var blocks = sampleObj.getUnicodeBlocks()
        , languages = Object.keys(blocks)
        , keysLength = languages.length;

      for (i = keysLength; i--;) {
        if (this.unicodeMap[languages[i]]) {
          for (lang in this.unicodeMap[languages[i]]) {
            if (!~keys.indexOf(lang)) {keys.push(lang);}
          }
        }
      }
    } else {
      keys = me.getLanguages();
    }

    for (i = keys.length; i--;) {
      var score = me.normalizeScore(me.distance(me.langDb[keys[i]], trigramFreqs), trigramCount);
      if (score) {scores.push([keys[i], score]);}
    }

    // Sort the array
    scores.sort(function (a, b) { return b[1] - a[1]; });
    var scoresLength = scores.length;

    if (!scoresLength) {return [];}

    switch (me.languageType) {
      case 'iso2':
        for (i = scoresLength; i--;) {
          scores[i][0] = this.getCode2(scores[i][0]);
        }
        break;
      case 'iso3':
        for (i = scoresLength; i--;) {
          scores[i][0] = this.getCode3(scores[i][0]);
        }
        break;
    }

    // limit the number of returned scores
    return limit > 0 ? scores.slice(0, limit) : scores;
  },

  getCode2:function (lang) {
    return Roo.languagedetect.LanguageDetect.nameToCode2[String(lang).toLowerCase()] || null;
  },

  getCode3: function(lang) {
    return Roo.languagedetect.LanguageDetect.nameToCode3[String(lang).toLowerCase()] || null;
  },

  getName2: function(code) {
    return Roo.languagedetect.LanguageDetect.code2ToName[String(code).toLowerCase()] || null;
  },

  getName3: function(code) {
    return Roo.languagedetect.LanguageDetect.code3ToName[String(code).toLowerCase()] || null;
  }
};

Roo.apply(Roo.languagedetect.LanguageDetect, {
  nameToCode2:{
    'albanian':'sq',
    'arabic':'ar',
    'azeri':'az',
    'bengali':'bn',
    'bulgarian':'bg',
    'cebuano':null,
    'croatian':'hr',
    'czech':'cs',
    'danish':'da',
    'dutch':'nl',
    'english':'en',
    'estonian':'et',
    'farsi':'fa',
    'finnish':'fi',
    'french':'fr',
    'german':'de',
    'hausa':'ha',
    'hawaiian':null,
    'hindi':'hi',
    'hungarian':'hu',
    'icelandic':'is',
    'indonesian':'id',
    'italian':'it',
    'kazakh':'kk',
    'kyrgyz':'ky',
    'latin':'la',
    'latvian':'lv',
    'lithuanian':'lt',
    'macedonian':'mk',
    'mongolian':'mn',
    'nepali':'ne',
    'norwegian':'no',
    'pashto':'ps',
    'pidgin':null,
    'polish':'pl',
    'portuguese':'pt',
    'romanian':'ro',
    'russian':'ru',
    'serbian':'sr',
    'slovak':'sk',
    'slovene':'sl',
    'somali':'so',
    'spanish':'es',
    'swahili':'sw',
    'swedish':'sv',
    'tagalog':'tl',
    'turkish':'tr',
    'ukrainian':'uk',
    'urdu':'ur',
    'uzbek':'uz',
    'vietnamese':'vi',
    'welsh':'cy'
  },

  nameToCode3:{
    'albanian':'sqi',
    'arabic':'ara',
    'azeri':'aze',
    'bengali':'ben',
    'bulgarian':'bul',
    'cebuano':'ceb',
    'croatian':'hrv',
    'czech':'ces',
    'danish':'dan',
    'dutch':'nld',
    'english':'eng',
    'estonian':'est',
    'farsi':'fas',
    'finnish':'fin',
    'french':'fra',
    'german':'deu',
    'hausa':'hau',
    'hawaiian':'haw',
    'hindi':'hin',
    'hungarian':'hun',
    'icelandic':'isl',
    'indonesian':'ind',
    'italian':'ita',
    'kazakh':'kaz',
    'kyrgyz':'kir',
    'latin':'lat',
    'latvian':'lav',
    'lithuanian':'lit',
    'macedonian':'mkd',
    'mongolian':'mon',
    'nepali':'nep',
    'norwegian':'nor',
    'pashto':'pus',
    'pidgin':'crp',
    'polish':'pol',
    'portuguese':'por',
    'romanian':'ron',
    'russian':'rus',
    'serbian':'srp',
    'slovak':'slk',
    'slovene':'slv',
    'somali':'som',
    'spanish':'spa',
    'swahili':'swa',
    'swedish':'swe',
    'tagalog':'tgl',
    'turkish':'tur',
    'ukrainian':'ukr',
    'urdu':'urd',
    'uzbek':'uzb',
    'vietnamese':'vie',
    'welsh':'cym'
  },
  code2ToName:{
    'ar':'arabic',
    'az':'azeri',
    'bg':'bulgarian',
    'bn':'bengali',
    'cs':'czech',
    'cy':'welsh',
    'da':'danish',
    'de':'german',
    'en':'english',
    'es':'spanish',
    'et':'estonian',
    'fa':'farsi',
    'fi':'finnish',
    'fr':'french',
    'ha':'hausa',
    'hi':'hindi',
    'hr':'croatian',
    'hu':'hungarian',
    'id':'indonesian',
    'is':'icelandic',
    'it':'italian',
    'kk':'kazakh',
    'ky':'kyrgyz',
    'la':'latin',
    'lt':'lithuanian',
    'lv':'latvian',
    'mk':'macedonian',
    'mn':'mongolian',
    'ne':'nepali',
    'nl':'dutch',
    'no':'norwegian',
    'pl':'polish',
    'ps':'pashto',
    'pt':'portuguese',
    'ro':'romanian',
    'ru':'russian',
    'sk':'slovak',
    'sl':'slovene',
    'so':'somali',
    'sq':'albanian',
    'sr':'serbian',
    'sv':'swedish',
    'sw':'swahili',
    'tl':'tagalog',
    'tr':'turkish',
    'uk':'ukrainian',
    'ur':'urdu',
    'uz':'uzbek',
    'vi':'vietnamese'
  },

  code3ToName:{
    'ara':'arabic',
    'aze':'azeri',
    'ben':'bengali',
    'bul':'bulgarian',
    'ceb':'cebuano',
    'ces':'czech',
    'crp':'pidgin',
    'cym':'welsh',
    'dan':'danish',
    'deu':'german',
    'eng':'english',
    'est':'estonian',
    'fas':'farsi',
    'fin':'finnish',
    'fra':'french',
    'hau':'hausa',
    'haw':'hawaiian',
    'hin':'hindi',
    'hrv':'croatian',
    'hun':'hungarian',
    'ind':'indonesian',
    'isl':'icelandic',
    'ita':'italian',
    'kaz':'kazakh',
    'kir':'kyrgyz',
    'lat':'latin',
    'lav':'latvian',
    'lit':'lithuanian',
    'mkd':'macedonian',
    'mon':'mongolian',
    'nep':'nepali',
    'nld':'dutch',
    'nor':'norwegian',
    'pol':'polish',
    'por':'portuguese',
    'pus':'pashto',
    'rom':'romanian',
    'rus':'russian',
    'slk':'slovak',
    'slv':'slovene',
    'som':'somali',
    'spa':'spanish',
    'sqi':'albanian',
    'srp':'serbian',
    'swa':'swahili',
    'swe':'swedish',
    'tgl':'tagalog',
    'tur':'turkish',
    'ukr':'ukrainian',
    'urd':'urdu',
    'uzb':'uzbek',
    'vie':'vietnamese'
  }
});// source : https://github.com/FGRibreau/node-language-detect/tree/master

Roo.languagedetect.Parser = function (string) {
    /**
     * The size of the trigram data arrays
     *
     * @access   private
     * @var      int
     */
    this.threshold = 300;
  
    /**
     * stores the trigram ranks of the sample
     *
     * @access  private
     * @var     array
     */
    this.trigramRanks = {};
  
    /**
     * Whether the parser should compile trigrams
     *
     * @access  private
     * @var     bool
     */
    this.compileTrigram = true;
  
    this.compileUnicode = true;
    this.unicodeSkipAscii = true;
    this.unicodeBlocks = {};
  
    /**
     * Whether the trigram parser should pad the beginning of the string
     *
     * @access  private
     * @var     bool
     */
    this.trigramPadStart = false;
  
    this.trigram = {};
  
    /**
     * the piece of text being parsed
     *
     * @access  private
     * @var     string
     */
  
    /**
     * Constructor
     *
     * @access  private
     * @param   string  string to be parsed
     */
    this.string = string ? string.replace(/[\d~!@#$%^&*()_|+\-=?;:",.<>\{\}\[\]\\\/]/g, ' ') : '';
};

  
Roo.languagedetect.Parser.prototype = {
  /**
   * turn on/off padding the beginning of the sample string
   *
   * @access  public
   * @param   bool   true for on, false for off
   */
  setPadStart: function (bool) {
    this.trigramPadStart = bool || true;
  },

  /**
   * Returns the trigram ranks for the text sample
   *
   * @access  public
   * @return  array   trigram ranks in the text sample
   */
  getTrigramRanks: function () {
    return this.trigramRanks;
  },

  getBlockCount: function () {
    return Roo.languagedetect.Parser.dbUnicodeBlocks.length;
  },

  getUnicodeBlocks: function () {
    return this.unicodeBlocks;
  },

  /**
   * Executes the parsing operation
   *
   * Be sure to call the set*() functions to set options and the
   * prepare*() functions first to tell it what kind of data to compute
   *
   * Afterwards the get*() functions can be used to access the compiled
   * information.
   *
   * @access public
   */
  analyze: function () {
    var len = this.string.length
      , byteCounter = 0
      , a = ' ', b = ' '
      , dropone, c;

    if (this.compileUnicode) {
      var blocksCount = Roo.languagedetect.Parser.dbUnicodeBlocks.length;
    }

    // trigram startup
    if (this.compileTrigram) {
      // initialize them as blank so the parser will skip the first two
      // (since it skips trigrams with more than  2 contiguous spaces)
      a = ' ';
      b = ' ';

      // kludge
      // if it finds a valid trigram to start and the start pad option is
      // off, then set a variable that will be used to reduce this
      // trigram after parsing has finished
      if (!this.trigramPadStart) {
        a = this.string.charAt(byteCounter++).toLowerCase();

        if (a != ' ') {
          b = this.string.charAt(byteCounter).toLowerCase();
          dropone = ' ' + a + b;
        }

        byteCounter = 0;
        a = ' ';
        b = ' ';
      }
    }

    var skippedCount = 0;
    var unicodeChars = {};

    while (byteCounter < len) {
      c = this.string.charAt(byteCounter++).toLowerCase();

      // language trigram detection
      if (this.compileTrigram) {
        if (!(b == ' ' && (a == ' ' || c == ' '))) {
          var abc = a + b + c;
          this.trigram[abc] = this.trigram[abc] ? this.trigram[abc] += 1 : 1;
        }

        a = b;
        b = c;
      }

      if (this.compileUnicode) {
        var charCode = c.charCodeAt(0);

        if (this.unicodeSkipAscii
          && c.match(/[a-z ]/i)
          && (charCode < 65 || charCode > 122 || (charCode > 90 && charCode < 97))
          && c != "'") {

          skippedCount++;
          continue;
        }

        unicodeChars[c] = unicodeChars[c] ? unicodeChars[c] += 1 : 1;
      }
    }

    this.unicodeBlocks = {};

    if (this.compileUnicode) {
      var keys = Object.keys(unicodeChars)
        , keysLength = keys.length;

      for (var i = keysLength; i--;) {
        var unicode = keys[i].charCodeAt(0)
          , count = unicodeChars[keys[i]]
          , search = this.unicodeBlockName(unicode, blocksCount)
          , blockName = search != -1 ? search[2] : '[Malformatted]';

        this.unicodeBlocks[blockName] = this.unicodeBlocks[blockName] ? this.unicodeBlocks[blockName] += count : count;
      }
    }

    // trigram cleanup
    if (this.compileTrigram) {
      // pad the end
      if (b != ' ') {
        var ab = a + b + ' ';
        this.trigram[ab] = this.trigram[ab] ? this.trigram[ab] += 1 : 1;
      }

      // perl compatibility; Language::Guess does not pad the beginning
      // kludge
      if (typeof dropone != 'undefined' && this.trigram[dropone] == 1) {
        delete this.trigram[dropone];
      }

      if (this.trigram && Object.keys(this.trigram).length > 0) {
        this.trigramRanks = this.arrRank(this.trigram);
      } else {
        this.trigramRanks = {};
      }
    }
  },

  /**
   * Sorts an array by value breaking ties alphabetically
   *
   * @access private
   * @param arr the array to sort
   */
  bubleSort: function (arr) {
    // should do the same as this perl statement:
    // sort { $trigrams{$b} == $trigrams{$a} ?  $a cmp $b : $trigrams{$b} <=> $trigrams{$a} }

    // needs to sort by both key and value at once
    // using the key to break ties for the value

    // converts array into an array of arrays of each key and value
    // may be a better way of doing this
    var combined = [];

    for (var key in arr) {
      combined.push([key, arr[key]]);
    }

    combined = combined.sort(this.sortFunc);

    var replacement = {};

    var length = combined.length;

    for (var i = 0; i < length; i++) {
      replacement[combined[i][0]] = combined[i][1];
    }

    return replacement;
  },

  /**
   * Converts a set of trigrams from frequencies to ranks
   *
   * Thresholds (cuts off) the list at $this->_threshold
   *
   * @access  protected
   * @param   arr     array of trgram
   * @return  object  ranks of trigrams
   */
  arrRank: function (arr) {

    // sorts alphabetically first as a standard way of breaking rank ties
    arr = this.bubleSort(arr);

    var rank = {}, i = 0;

    for (var key in arr) {
      rank[key] = i++;

      // cut off at a standard threshold
      if (i >= this.threshold) {
        break;
      }
    }

    return rank;
  },

  /**
   * Sort function used by bubble sort
   *
   * Callback function for usort().
   *
   * @access   private
   * @param    a    first param passed by usort()
   * @param    b    second param passed by usort()
   * @return   int  1 if $a is greater, -1 if not
   *
   * @see      bubleSort()
   */
  sortFunc: function (a, b) {
    // each is actually a key/value pair, so that it can compare using both
    var aKey = a[0]
      , aValue = a[1]
      , bKey = b[0]
      , bValue = b[1];

    // if the values are the same, break ties using the key
    if (aValue == bValue) {
      return aKey.localeCompare(bKey);
    } else {
      return aValue > bValue ? -1 : 1;
    }
  },

  unicodeBlockName: function (unicode, blockCount) {
    if (unicode <= Roo.languagedetect.Parser.dbUnicodeBlocks[0][1]) {
      return Roo.languagedetect.Parser.dbUnicodeBlocks[0];
    }

    var high = blockCount ? blockCount - 1 : Roo.languagedetect.Parser.dbUnicodeBlocks.length
      , low = 1
      , mid;

    while (low <= high) {
      mid = Math.floor((low + high) / 2);

      if (unicode < Roo.languagedetect.Parser.dbUnicodeBlocks[mid][0]) {
        high = mid - 1;
      } else if (unicode > Roo.languagedetect.Parser.dbUnicodeBlocks[mid][1]) {
        low = mid + 1;
      } else {
        return Roo.languagedetect.Parser.dbUnicodeBlocks[mid];
      }
    }

    return -1;
  }
};

Roo.apply(Roo.languagedetect.Parser, {
  dbUnicodeBlocks: [
      ["0x0000", "0x007F", "Basic Latin"],
      ["0x0080", "0x00FF", "Latin-1 Supplement"],
      ["0x0100", "0x017F", "Latin Extended-A"],
      ["0x0180", "0x024F", "Latin Extended-B"],
      ["0x0250", "0x02AF", "IPA Extensions"],
      ["0x02B0", "0x02FF", "Spacing Modifier Letters"],
      ["0x0300", "0x036F", "Combining Diacritical Marks"],
      ["0x0370", "0x03FF", "Greek and Coptic"],
      ["0x0400", "0x04FF", "Cyrillic"],
      ["0x0500", "0x052F", "Cyrillic Supplement"],
      ["0x0530", "0x058F", "Armenian"],
      ["0x0590", "0x05FF", "Hebrew"],
      ["0x0600", "0x06FF", "Arabic"],
      ["0x0700", "0x074F", "Syriac"],
      ["0x0750", "0x077F", "Arabic Supplement"],
      ["0x0780", "0x07BF", "Thaana"],
      ["0x0900", "0x097F", "Devanagari"],
      ["0x0980", "0x09FF", "Bengali"],
      ["0x0A00", "0x0A7F", "Gurmukhi"],
      ["0x0A80", "0x0AFF", "Gujarati"],
      ["0x0B00", "0x0B7F", "Oriya"],
      ["0x0B80", "0x0BFF", "Tamil"],
      ["0x0C00", "0x0C7F", "Telugu"],
      ["0x0C80", "0x0CFF", "Kannada"],
      ["0x0D00", "0x0D7F", "Malayalam"],
      ["0x0D80", "0x0DFF", "Sinhala"],
      ["0x0E00", "0x0E7F", "Thai"],
      ["0x0E80", "0x0EFF", "Lao"],
      ["0x0F00", "0x0FFF", "Tibetan"],
      ["0x1000", "0x109F", "Myanmar"],
      ["0x10A0", "0x10FF", "Georgian"],
      ["0x1100", "0x11FF", "Hangul Jamo"],
      ["0x1200", "0x137F", "Ethiopic"],
      ["0x1380", "0x139F", "Ethiopic Supplement"],
      ["0x13A0", "0x13FF", "Cherokee"],
      ["0x1400", "0x167F", "Unified Canadian Aboriginal Syllabics"],
      ["0x1680", "0x169F", "Ogham"],
      ["0x16A0", "0x16FF", "Runic"],
      ["0x1700", "0x171F", "Tagalog"],
      ["0x1720", "0x173F", "Hanunoo"],
      ["0x1740", "0x175F", "Buhid"],
      ["0x1760", "0x177F", "Tagbanwa"],
      ["0x1780", "0x17FF", "Khmer"],
      ["0x1800", "0x18AF", "Mongolian"],
      ["0x1900", "0x194F", "Limbu"],
      ["0x1950", "0x197F", "Tai Le"],
      ["0x1980", "0x19DF", "New Tai Lue"],
      ["0x19E0", "0x19FF", "Khmer Symbols"],
      ["0x1A00", "0x1A1F", "Buginese"],
      ["0x1D00", "0x1D7F", "Phonetic Extensions"],
      ["0x1D80", "0x1DBF", "Phonetic Extensions Supplement"],
      ["0x1DC0", "0x1DFF", "Combining Diacritical Marks Supplement"],
      ["0x1E00", "0x1EFF", "Latin Extended Additional"],
      ["0x1F00", "0x1FFF", "Greek Extended"],
      ["0x2000", "0x206F", "General Punctuation"],
      ["0x2070", "0x209F", "Superscripts and Subscripts"],
      ["0x20A0", "0x20CF", "Currency Symbols"],
      ["0x20D0", "0x20FF", "Combining Diacritical Marks for Symbols"],
      ["0x2100", "0x214F", "Letterlike Symbols"],
      ["0x2150", "0x218F", "Number Forms"],
      ["0x2190", "0x21FF", "Arrows"],
      ["0x2200", "0x22FF", "Mathematical Operators"],
      ["0x2300", "0x23FF", "Miscellaneous Technical"],
      ["0x2400", "0x243F", "Control Pictures"],
      ["0x2440", "0x245F", "Optical Character Recognition"],
      ["0x2460", "0x24FF", "Enclosed Alphanumerics"],
      ["0x2500", "0x257F", "Box Drawing"],
      ["0x2580", "0x259F", "Block Elements"],
      ["0x25A0", "0x25FF", "Geometric Shapes"],
      ["0x2600", "0x26FF", "Miscellaneous Symbols"],
      ["0x2700", "0x27BF", "Dingbats"],
      ["0x27C0", "0x27EF", "Miscellaneous Mathematical Symbols-A"],
      ["0x27F0", "0x27FF", "Supplemental Arrows-A"],
      ["0x2800", "0x28FF", "Braille Patterns"],
      ["0x2900", "0x297F", "Supplemental Arrows-B"],
      ["0x2980", "0x29FF", "Miscellaneous Mathematical Symbols-B"],
      ["0x2A00", "0x2AFF", "Supplemental Mathematical Operators"],
      ["0x2B00", "0x2BFF", "Miscellaneous Symbols and Arrows"],
      ["0x2C00", "0x2C5F", "Glagolitic"],
      ["0x2C80", "0x2CFF", "Coptic"],
      ["0x2D00", "0x2D2F", "Georgian Supplement"],
      ["0x2D30", "0x2D7F", "Tifinagh"],
      ["0x2D80", "0x2DDF", "Ethiopic Extended"],
      ["0x2E00", "0x2E7F", "Supplemental Punctuation"],
      ["0x2E80", "0x2EFF", "CJK Radicals Supplement"],
      ["0x2F00", "0x2FDF", "Kangxi Radicals"],
      ["0x2FF0", "0x2FFF", "Ideographic Description Characters"],
      ["0x3000", "0x303F", "CJK Symbols and Punctuation"],
      ["0x3040", "0x309F", "Hiragana"],
      ["0x30A0", "0x30FF", "Katakana"],
      ["0x3100", "0x312F", "Bopomofo"],
      ["0x3130", "0x318F", "Hangul Compatibility Jamo"],
      ["0x3190", "0x319F", "Kanbun"],
      ["0x31A0", "0x31BF", "Bopomofo Extended"],
      ["0x31C0", "0x31EF", "CJK Strokes"],
      ["0x31F0", "0x31FF", "Katakana Phonetic Extensions"],
      ["0x3200", "0x32FF", "Enclosed CJK Letters and Months"],
      ["0x3300", "0x33FF", "CJK Compatibility"],
      ["0x3400", "0x4DBF", "CJK Unified Ideographs Extension A"],
      ["0x4DC0", "0x4DFF", "Yijing Hexagram Symbols"],
      ["0x4E00", "0x9FFF", "CJK Unified Ideographs"],
      ["0xA000", "0xA48F", "Yi Syllables"],
      ["0xA490", "0xA4CF", "Yi Radicals"],
      ["0xA700", "0xA71F", "Modifier Tone Letters"],
      ["0xA800", "0xA82F", "Syloti Nagri"],
      ["0xAC00", "0xD7AF", "Hangul Syllables"],
      ["0xD800", "0xDB7F", "High Surrogates"],
      ["0xDB80", "0xDBFF", "High Private Use Surrogates"],
      ["0xDC00", "0xDFFF", "Low Surrogates"],
      ["0xE000", "0xF8FF", "Private Use Area"],
      ["0xF900", "0xFAFF", "CJK Compatibility Ideographs"],
      ["0xFB00", "0xFB4F", "Alphabetic Presentation Forms"],
      ["0xFB50", "0xFDFF", "Arabic Presentation Forms-A"],
      ["0xFE00", "0xFE0F", "Variation Selectors"],
      ["0xFE10", "0xFE1F", "Vertical Forms"],
      ["0xFE20", "0xFE2F", "Combining Half Marks"],
      ["0xFE30", "0xFE4F", "CJK Compatibility Forms"],
      ["0xFE50", "0xFE6F", "Small Form Variants"],
      ["0xFE70", "0xFEFF", "Arabic Presentation Forms-B"],
      ["0xFF00", "0xFFEF", "Halfwidth and Fullwidth Forms"],
      ["0xFFF0", "0xFFFF", "Specials"],
      ["0x10000", "0x1007F", "Linear B Syllabary"],
      ["0x10080", "0x100FF", "Linear B Ideograms"],
      ["0x10100", "0x1013F", "Aegean Numbers"],
      ["0x10140", "0x1018F", "Ancient Greek Numbers"],
      ["0x10300", "0x1032F", "Old Italic"],
      ["0x10330", "0x1034F", "Gothic"],
      ["0x10380", "0x1039F", "Ugaritic"],
      ["0x103A0", "0x103DF", "Old Persian"],
      ["0x10400", "0x1044F", "Deseret"],
      ["0x10450", "0x1047F", "Shavian"],
      ["0x10480", "0x104AF", "Osmanya"],
      ["0x10800", "0x1083F", "Cypriot Syllabary"],
      ["0x10A00", "0x10A5F", "Kharoshthi"],
      ["0x1D000", "0x1D0FF", "Byzantine Musical Symbols"],
      ["0x1D100", "0x1D1FF", "Musical Symbols"],
      ["0x1D200", "0x1D24F", "Ancient Greek Musical Notation"],
      ["0x1D300", "0x1D35F", "Tai Xuan Jing Symbols"],
      ["0x1D400", "0x1D7FF", "Mathematical Alphanumeric Symbols"],
      ["0x20000", "0x2A6DF", "CJK Unified Ideographs Extension B"],
      ["0x2F800", "0x2FA1F", "CJK Compatibility Ideographs Supplement"],
      ["0xE0000", "0xE007F", "Tags"],
      ["0xE0100", "0xE01EF", "Variation Selectors Supplement"],
      ["0xF0000", "0xFFFFF", "Supplementary Private Use Area-A"],
      ["0x100000", "0x10FFFF", "Supplementary Private Use Area-B"]
  ]
});Roo.languagedetect.Detect = function() {
    this.languageDetect = new Roo.languagedetect.LanguageDetect('iso2');

    var regex = '/';
    Roo.each(Roo.languagedetect.zh_HK, function(code) {
        regex = regex + code + '|';
    });
    regex.replace(/\|$/, '');
    regex += '/';
    this.codeToRegex['zh_HK'] = new RegExp(regex);

    var regex = '/';
    Roo.each(Roo.languagedetect.zh_CN, function(code) {
        regex = regex + code + '|';
    });
    regex.replace(/\|$/, '');
    regex += '/';
    this.codeToRegex['zh_CN'] = new RegExp(regex);
};

Roo.languagedetect.Detect.prototype = {
    // characters in supplementary planes (\u{xxxxx}) are not detected.
    codeToRegex : {
        // 4e00-9fff : CJK Unified Ideographs
        // 3400-4dbf : CJK Unified Ideographs Extension A
        // 20000-2a6df : CJK Unified Ideographs Extension B
        // 2a700-2b73f : CJK Unified Ideographs Extension C
        // 2b740-2b81f : CJK Unified Ideographs Extension D
        // 2b820-2ceaf : CJK Unified Ideographs Extension E
        // 2ceb0-2ebef : CJK Unified Ideographs Extension F
        // 30000-3134f : CJK Unified Ideographs Extension G
        // 31350-323af : CJK Unified Ideographs Extension H
        // 2ebf0-2ee5f : CJK Unified Ideographs Extension I
        // f900-faff : CJK Compatibility Ideographs
        'cjk' : /[\u4e00-\u9fff]|[\u3400-\u4dbf]|[\uf900-\ufaff]/,
        // 3040-309f : Hiragana
        // 30a0-30ff : Katakana
        // 31f0-31ff : Katakana Phonetic Extensions
        // 1aff0-1afff : Kana Extended-B
        // 1b000-1b0ff : Kana Supplement
        // 1b100-1b12f : Kana Extended-A
        // 1b130-1b16f : Small kana Extension
        'ja' : /[\u3040-\u30ff]|[\u31f0-\u31ff]/,
        // ac00-d7af : Hangul Syllables
        // 1100-11ff : Hangul Jamo
        // 3130-318f : Hangul Compatibility Jamo
        // a960-a97f : Hangul Jamo Extended-A
        // d7b0-d7ff : Hangul Jamo Extended-B
        'ko' : /[\uac00-\ud7af]|[\u1100-\u11ff]|[\u3130-\u318f]|[\ua960-\ua97f]|[\ud7b0-\ud7ff]/,
        // 0e00-0e7f : Thai
        'th' : /[\u0e00-\u0e7f]/,
        // 0590-05ff : Hebrew
        // fb1d-fb4f : Hebrew Presentation Forms
        'he' : /[\u0590-\u05ff]|[\ufb1d-\ufb4f]/
    },

    codeToName : {
        'ja':'japanese',
        'ko':'korean',
        'zh_HK':'traditional chinese',
        'zh_CN':'simplified chinese',
        'th':'thai',
        'he':'hebrew'
    },

    isScoreSupported : function(lang) {
        return this.languageDetect.getLanguageCodes().includes(lang);
    },
    isCountSupported : function(lang) {
        return Object.keys(this.codeToName).includes(lang);
    },
    isSupported : function(lang) {
        return this.isScoreSupported(lang) || this.isCountSupported(lang);
    },
    getName : function(code) {
        if(!this.isSupported(code)) {
            return '';
        }
        return (
            this.languageDetect.getName2(code) || // LanguageDetect
            this.codeToName[code] || // CJK
            ''
        );
    },
    isLanguage : function(input, lang) {
        if(!this.isSupported(lang)) {
            return false;
        }

        var isLang = {...this.detectLangByCount(input), ...this.detectLangByScore(input)};

        // positive testing
        if(typeof(isLang[lang]) === 'undefined' || isLang[lang] !== true) {
            return false;
        }

        var ret = true;

        Roo.each(Object.keys(isLang), function(code) {
            // negative testing
            if(code != lang && isLang[code] === true) {
                ret = false;
            }
        });

        return ret;
    },

    getHighestScore : function(input) {
        var scores = this.languageDetect.detect(input);
        if(!scores.length) {
            return [];
        }
        return scores[0];
    },
    detectLangByScore : function (input) {
        var score = this.getHighestScore(input);
        if(!score.length) {
            return {};
        }

        return {
            [score[0]] : score[1] > 0.2
        };
    },

    getCount : function(input) {
        var en = input.replaceAll(/[\s\d\p{P}]+/gu, ' ');
        en = en.replaceAll(/[^A-Za-z ]/g, '');
        var enWords = en.trim().split(/\s+/); // number of english words

        input = input.replaceAll(/\s+|\d+|[\p{P}]/gu, ''); // remove all spaces ,digits and punctuations
        input = input.replaceAll(/[A-Za-z]/g, ''); // remove all english alphabet

        var count = {};
        Roo.each(Object.keys(this.codeToRegex), function(code) {
            count[code] = 0;
            for(var i = 0; i < input.length; i ++) {
                if(this.codeToRegex[code].test(input[i])) {
                    count[code] ++;
                }
            }
        }, this);

        count['total'] = input.length + enWords.length; // number of characters which are not english alphabet + number of english words

        return count;
    },

    detectLangByCount : function(input) {
        var count = this.getCount(input);

        var ret = {};

        Roo.each(Object.keys(this.codeToName), function(code) {
            ret[code] = false;
        });

        if(count['total'] == 0) {
            return ret;
        }

        // japanese
        if (
            count['ja'] / count['total'] > 0.3 && // > 30% japanese characters
            (count['ja'] + count['cjk']) / count['total'] > 0.5 // > 50% (japanese characters + cjk)
        ) {
            ret['ja'] = true;
        }

        // korean
        if (
            count['ko'] / count['total'] > 0.3 && // > 30% korean characters
            (count['ko'] + count['cjk']) / count['total'] > 0.5 // > 50% (korean characters + cjk)
        ) {
            ret['ko'] = true;
        }

        // chinese
        if(
            !ret['ja'] && // not detected as japanese
            !ret['ko'] && // not detected as korean
            count['cjk'] / count['total'] > 0.5 // > 50% chinese characters
        ) {
            // traditional chinese if there are more traiditonal chinese characters than simplified chinese characters
            if(count['zh_HK'] > count['zh_CN']) {
                ret['zh_HK'] = true;
            }
            // else simplified chinese
            else {
                ret['zh_CN'] = true;
            }
        }

        if(count['th'] / count['total'] > 0.5) {
            ret['th'] = true;
        }

        if(count['he'] / count['total'] > 0.5) {
            ret['he'] = true;
        }

        return ret;

    }
};// source : https://www.unicode.org/charts/unihan.html
// array of characters that are only used in traditional chinese

Roo.languagedetect.zh_HK = [
	"\u346E",
	"\u346F",
	"\u3473",
	"\u3476",
	"\u3493",
	"\u349C",
	"\u34A3",
	"\u34BF",
	"\u34C4",
	"\u34D6",
	"\u34E8",
	"\u3503",
	"\u3505",
	"\u350B",
	"\u351D",
	"\u3522",
	"\u3552",
	"\u3562",
	"\u35A6",
	"\u35AE",
	"\u35D9",
	"\u35E2",
	"\u35E3",
	"\u35F0",
	"\u35F2",
	"\u35F6",
	"\u35FB",
	"\u35FC",
	"\u35FF",
	"\u3613",
	"\u3614",
	"\u3616",
	"\u3619",
	"\u361A",
	"\u3624",
	"\u3654",
	"\u3661",
	"\u3662",
	"\u366C",
	"\u367A",
	"\u367E",
	"\u36DD",
	"\u3704",
	"\u370F",
	"\u3710",
	"\u3717",
	"\u371E",
	"\u3722",
	"\u3725",
	"\u372D",
	"\u372E",
	"\u3737",
	"\u373A",
	"\u375E",
	"\u375F",
	"\u379E",
	"\u37FA",
	"\u3801",
	"\u380F",
	"\u3820",
	"\u3823",
	"\u3853",
	"\u385E",
	"\u3897",
	"\u389D",
	"\u3932",
	"\u396E",
	"\u3977",
	"\u398A",
	"\u398E",
	"\u3996",
	"\u399B",
	"\u399E",
	"\u39A6",
	"\u39AC",
	"\u39AD",
	"\u3A1B",
	"\u3A1F",
	"\u3A25",
	"\u3A3B",
	"\u3A47",
	"\u3A4B",
	"\u3A4C",
	"\u3A5C",
	"\u3A63",
	"\u3A6D",
	"\u3A73",
	"\u3A75",
	"\u3A77",
	"\u3A79",
	"\u3A8E",
	"\u3AB9",
	"\u3B23",
	"\u3B2E",
	"\u3B93",
	"\u3B9D",
	"\u3BB2",
	"\u3BC2",
	"\u3BC6",
	"\u3BE4",
	"\u3BF8",
	"\u3BFC",
	"\u3C02",
	"\u3C05",
	"\u3C0D",
	"\u3C30",
	"\u3C33",
	"\u3CAF",
	"\u3CB0",
	"\u3CB2",
	"\u3D38",
	"\u3D3F",
	"\u3D4D",
	"\u3D51",
	"\u3D52",
	"\u3D57",
	"\u3D64",
	"\u3D7E",
	"\u3D86",
	"\u3D8C",
	"\u3D8D",
	"\u3D8F",
	"\u3D92",
	"\u3D95",
	"\u3DC3",
	"\u3DCD",
	"\u3DF2",
	"\u3DF6",
	"\u3DFB",
	"\u3DFF",
	"\u3E05",
	"\u3E0A",
	"\u3E10",
	"\u3E53",
	"\u3E7D",
	"\u3E8F",
	"\u3E91",
	"\u3E9C",
	"\u3EF6",
	"\u3EFD",
	"\u3F06",
	"\u3F08",
	"\u3F3B",
	"\u3FB5",
	"\u3FBA",
	"\u3FC9",
	"\u3FCE",
	"\u3FD6",
	"\u3FD7",
	"\u3FE7",
	"\u3FF9",
	"\u4009",
	"\u400D",
	"\u4034",
	"\u4039",
	"\u405D",
	"\u406A",
	"\u4071",
	"\u407B",
	"\u408E",
	"\u4093",
	"\u40C1",
	"\u40D5",
	"\u40D8",
	"\u40E2",
	"\u40E3",
	"\u40E4",
	"\u40EE",
	"\u40F4",
	"\u4150",
	"\u4158",
	"\u4173",
	"\u4185",
	"\u4189",
	"\u41D3",
	"\u424D",
	"\u4250",
	"\u4251",
	"\u4259",
	"\u426C",
	"\u4271",
	"\u4272",
	"\u4276",
	"\u429C",
	"\u429F",
	"\u42AD",
	"\u42B2",
	"\u42B5",
	"\u42B7",
	"\u42BA",
	"\u42C3",
	"\u42C6",
	"\u42CD",
	"\u42CE",
	"\u42CF",
	"\u42D0",
	"\u42D1",
	"\u42D4",
	"\u42D9",
	"\u42DA",
	"\u42E6",
	"\u42EB",
	"\u42F9",
	"\u42FA",
	"\u42FB",
	"\u42FC",
	"\u42FD",
	"\u42FE",
	"\u42FF",
	"\u4301",
	"\u4307",
	"\u4308",
	"\u430B",
	"\u430C",
	"\u4310",
	"\u4316",
	"\u431D",
	"\u431E",
	"\u431F",
	"\u4325",
	"\u432A",
	"\u4330",
	"\u4364",
	"\u4377",
	"\u437D",
	"\u4398",
	"\u4399",
	"\u43B1",
	"\u43CA",
	"\u4422",
	"\u4423",
	"\u4437",
	"\u4439",
	"\u443D",
	"\u4457",
	"\u447C",
	"\u44E3",
	"\u4507",
	"\u4508",
	"\u4521",
	"\u4561",
	"\u4564",
	"\u4573",
	"\u4579",
	"\u457C",
	"\u4580",
	"\u4585",
	"\u459A",
	"\u45C3",
	"\u45C5",
	"\u45E5",
	"\u45FB",
	"\u45FD",
	"\u45FF",
	"\u4654",
	"\u4661",
	"\u4671",
	"\u467C",
	"\u4686",
	"\u4689",
	"\u4695",
	"\u469E",
	"\u46A9",
	"\u46B3",
	"\u46B5",
	"\u46BD",
	"\u46C0",
	"\u46C4",
	"\u46CC",
	"\u46CD",
	"\u46D8",
	"\u46DB",
	"\u46DE",
	"\u46E0",
	"\u46E4",
	"\u46EC",
	"\u46ED",
	"\u46F3",
	"\u46FD",
	"\u46FF",
	"\u4700",
	"\u4704",
	"\u4709",
	"\u470B",
	"\u470D",
	"\u470E",
	"\u470F",
	"\u4712",
	"\u4716",
	"\u471A",
	"\u471D",
	"\u474F",
	"\u4755",
	"\u476D",
	"\u476F",
	"\u477B",
	"\u477C",
	"\u4780",
	"\u4781",
	"\u4782",
	"\u4788",
	"\u4789",
	"\u478B",
	"\u4793",
	"\u47B6",
	"\u47C3",
	"\u47C6",
	"\u47CF",
	"\u47D0",
	"\u47FA",
	"\u4806",
	"\u481F",
	"\u4820",
	"\u4829",
	"\u482E",
	"\u4831",
	"\u4841",
	"\u4845",
	"\u4847",
	"\u484A",
	"\u4850",
	"\u4857",
	"\u4858",
	"\u485D",
	"\u485F",
	"\u4866",
	"\u4869",
	"\u4870",
	"\u4874",
	"\u4875",
	"\u4876",
	"\u4877",
	"\u487B",
	"\u487E",
	"\u4888",
	"\u48A8",
	"\u490C",
	"\u490D",
	"\u4920",
	"\u4924",
	"\u4925",
	"\u4928",
	"\u4929",
	"\u492A",
	"\u492C",
	"\u4935",
	"\u4938",
	"\u493B",
	"\u493C",
	"\u4944",
	"\u4947",
	"\u4951",
	"\u4955",
	"\u4956",
	"\u4957",
	"\u495B",
	"\u495D",
	"\u495E",
	"\u4969",
	"\u496F",
	"\u4971",
	"\u4974",
	"\u4976",
	"\u4977",
	"\u4978",
	"\u498C",
	"\u498E",
	"\u4998",
	"\u499B",
	"\u499D",
	"\u499F",
	"\u49AA",
	"\u49AF",
	"\u49B1",
	"\u49B3",
	"\u49DE",
	"\u49E2",
	"\u4A34",
	"\u4A6B",
	"\u4A8A",
	"\u4A8D",
	"\u4A8F",
	"\u4A90",
	"\u4A93",
	"\u4A97",
	"\u4A98",
	"\u4A9C",
	"\u4A9D",
	"\u4AA5",
	"\u4AB4",
	"\u4ABC",
	"\u4ABE",
	"\u4AC0",
	"\u4AC2",
	"\u4AC8",
	"\u4AC9",
	"\u4ACC",
	"\u4ACF",
	"\u4AD0",
	"\u4ADC",
	"\u4ADF",
	"\u4AE0",
	"\u4AE5",
	"\u4AE9",
	"\u4AF4",
	"\u4AF6",
	"\u4AFB",
	"\u4AFC",
	"\u4AFE",
	"\u4B00",
	"\u4B02",
	"\u4B05",
	"\u4B0D",
	"\u4B0E",
	"\u4B10",
	"\u4B13",
	"\u4B14",
	"\u4B18",
	"\u4B1D",
	"\u4B1E",
	"\u4B1F",
	"\u4B23",
	"\u4B27",
	"\u4B2A",
	"\u4B2B",
	"\u4B2C",
	"\u4B2F",
	"\u4B32",
	"\u4B33",
	"\u4B36",
	"\u4B39",
	"\u4B3E",
	"\u4B40",
	"\u4B43",
	"\u4B45",
	"\u4B47",
	"\u4B48",
	"\u4B49",
	"\u4B51",
	"\u4B52",
	"\u4B53",
	"\u4B54",
	"\u4B55",
	"\u4B58",
	"\u4B5E",
	"\u4B61",
	"\u4B62",
	"\u4B63",
	"\u4B6D",
	"\u4B7F",
	"\u4B82",
	"\u4B84",
	"\u4B88",
	"\u4B97",
	"\u4B9D",
	"\u4B9E",
	"\u4BA0",
	"\u4BA7",
	"\u4BAB",
	"\u4BB0",
	"\u4BB2",
	"\u4BB3",
	"\u4BB8",
	"\u4BBD",
	"\u4BBE",
	"\u4BBF",
	"\u4BC0",
	"\u4BE4",
	"\u4C0E",
	"\u4C10",
	"\u4C16",
	"\u4C2B",
	"\u4C32",
	"\u4C37",
	"\u4C3B",
	"\u4C3D",
	"\u4C3E",
	"\u4C40",
	"\u4C41",
	"\u4C42",
	"\u4C45",
	"\u4C47",
	"\u4C4C",
	"\u4C4D",
	"\u4C4E",
	"\u4C50",
	"\u4C52",
	"\u4C53",
	"\u4C57",
	"\u4C59",
	"\u4C5A",
	"\u4C5B",
	"\u4C5C",
	"\u4C5F",
	"\u4C61",
	"\u4C64",
	"\u4C65",
	"\u4C67",
	"\u4C6C",
	"\u4C6D",
	"\u4C70",
	"\u4C71",
	"\u4C74",
	"\u4C75",
	"\u4C77",
	"\u4C78",
	"\u4C79",
	"\u4C7B",
	"\u4C7D",
	"\u4C7E",
	"\u4C81",
	"\u4C85",
	"\u4C89",
	"\u4C8F",
	"\u4C95",
	"\u4C96",
	"\u4C97",
	"\u4C98",
	"\u4C99",
	"\u4C9A",
	"\u4C9B",
	"\u4CA8",
	"\u4CB0",
	"\u4CB8",
	"\u4CB9",
	"\u4CBC",
	"\u4CC5",
	"\u4CC7",
	"\u4CCD",
	"\u4CCF",
	"\u4CD2",
	"\u4CD3",
	"\u4CD5",
	"\u4CDA",
	"\u4CDC",
	"\u4CDF",
	"\u4CE2",
	"\u4CE4",
	"\u4CE7",
	"\u4CE8",
	"\u4CEB",
	"\u4CED",
	"\u4CEE",
	"\u4CF2",
	"\u4CFA",
	"\u4D07",
	"\u4D08",
	"\u4D09",
	"\u4D0B",
	"\u4D1A",
	"\u4D1D",
	"\u4D2C",
	"\u4D2D",
	"\u4D2E",
	"\u4D31",
	"\u4D32",
	"\u4D33",
	"\u4D34",
	"\u4D35",
	"\u4D37",
	"\u4D38",
	"\u4D39",
	"\u4D3A",
	"\u4D3D",
	"\u4D42",
	"\u4D43",
	"\u4D46",
	"\u4D50",
	"\u4D58",
	"\u4D73",
	"\u4D74",
	"\u4D76",
	"\u4D77",
	"\u4D95",
	"\u4D97",
	"\u4DA2",
	"\u4DA3",
	"\u4DA6",
	"\u4DA7",
	"\u4DA8",
	"\u4DAA",
	"\u4DB1",
	"\u4DB2",
	"\u4E1F",
	"\u4E26",
	"\u4E82",
	"\u4E9E",
	"\u4F47",
	"\u4F75",
	"\u4F86",
	"\u4F96",
	"\u4FB6",
	"\u4FC1",
	"\u4FC2",
	"\u4FD3",
	"\u4FD4",
	"\u4FE0",
	"\u4FE5",
	"\u5000",
	"\u5006",
	"\u5008",
	"\u5009",
	"\u500B",
	"\u5011",
	"\u502B",
	"\u5032",
	"\u5049",
	"\u5051",
	"\u5069",
	"\u5074",
	"\u5075",
	"\u507D",
	"\u508C",
	"\u5091",
	"\u5096",
	"\u5098",
	"\u5099",
	"\u50A2",
	"\u50AA",
	"\u50AD",
	"\u50AF",
	"\u50B1",
	"\u50B3",
	"\u50B4",
	"\u50B5",
	"\u50B7",
	"\u50BE",
	"\u50C0",
	"\u50C2",
	"\u50C5",
	"\u50C6",
	"\u50C9",
	"\u50CD",
	"\u50D1",
	"\u50D3",
	"\u50D5",
	"\u50D7",
	"\u50DE",
	"\u50E4",
	"\u50E5",
	"\u50E8",
	"\u50E9",
	"\u50F4",
	"\u50F9",
	"\u50FE",
	"\u5100",
	"\u5101",
	"\u5102",
	"\u5104",
	"\u5105",
	"\u5108",
	"\u5109",
	"\u5110",
	"\u5114",
	"\u5115",
	"\u5116",
	"\u5118",
	"\u511F",
	"\u5122",
	"\u5123",
	"\u5125",
	"\u5129",
	"\u512A",
	"\u5130",
	"\u5131",
	"\u5132",
	"\u5137",
	"\u5138",
	"\u5139",
	"\u513A",
	"\u513B",
	"\u513C",
	"\u514C",
	"\u5152",
	"\u5157",
	"\u5167",
	"\u5169",
	"\u518A",
	"\u51AA",
	"\u51C8",
	"\u51CD",
	"\u51D4",
	"\u51D9",
	"\u51DC",
	"\u51DF",
	"\u51F1",
	"\u5225",
	"\u522A",
	"\u5244",
	"\u5247",
	"\u524B",
	"\u524E",
	"\u5257",
	"\u525B",
	"\u525D",
	"\u526E",
	"\u5274",
	"\u5275",
	"\u5278",
	"\u527E",
	"\u5283",
	"\u5287",
	"\u5289",
	"\u528A",
	"\u528C",
	"\u528D",
	"\u528F",
	"\u5291",
	"\u5297",
	"\u529A",
	"\u52C1",
	"\u52D1",
	"\u52D5",
	"\u52D9",
	"\u52DB",
	"\u52DD",
	"\u52DE",
	"\u52E2",
	"\u52E3",
	"\u52E9",
	"\u52F1",
	"\u52F4",
	"\u52F5",
	"\u52F8",
	"\u52FB",
	"\u532D",
	"\u532F",
	"\u5330",
	"\u5331",
	"\u5335",
	"\u5340",
	"\u5354",
	"\u5368",
	"\u537B",
	"\u5399",
	"\u53A0",
	"\u53AD",
	"\u53B1",
	"\u53B2",
	"\u53B4",
	"\u53C3",
	"\u53C4",
	"\u53E2",
	"\u5412",
	"\u5433",
	"\u5436",
	"\u5442",
	"\u54BC",
	"\u54E1",
	"\u54EF",
	"\u5504",
	"\u550A",
	"\u5513",
	"\u551A",
	"\u553B",
	"\u554F",
	"\u5553",
	"\u555E",
	"\u555F",
	"\u5562",
	"\u558E",
	"\u559A",
	"\u55AA",
	"\u55AC",
	"\u55AE",
	"\u55B2",
	"\u55C6",
	"\u55C7",
	"\u55CA",
	"\u55CE",
	"\u55DA",
	"\u55E7",
	"\u55E9",
	"\u55F6",
	"\u55F9",
	"\u55FF",
	"\u5604",
	"\u5606",
	"\u5607",
	"\u560D",
	"\u5613",
	"\u5614",
	"\u5616",
	"\u5617",
	"\u561C",
	"\u5629",
	"\u562A",
	"\u562E",
	"\u562F",
	"\u5630",
	"\u5633",
	"\u5635",
	"\u5638",
	"\u563A",
	"\u563D",
	"\u5641",
	"\u5645",
	"\u5653",
	"\u565A",
	"\u565D",
	"\u565E",
	"\u5660",
	"\u5665",
	"\u5666",
	"\u566F",
	"\u5672",
	"\u5674",
	"\u5678",
	"\u5679",
	"\u5680",
	"\u5682",
	"\u5687",
	"\u5688",
	"\u568C",
	"\u568D",
	"\u5690",
	"\u5695",
	"\u5699",
	"\u569B",
	"\u569D",
	"\u56A0",
	"\u56A6",
	"\u56A7",
	"\u56A8",
	"\u56A9",
	"\u56AA",
	"\u56AB",
	"\u56AC",
	"\u56AE",
	"\u56B1",
	"\u56B2",
	"\u56B3",
	"\u56B4",
	"\u56B6",
	"\u56B8",
	"\u56BD",
	"\u56BF",
	"\u56C0",
	"\u56C1",
	"\u56C2",
	"\u56C3",
	"\u56C5",
	"\u56C7",
	"\u56C8",
	"\u56C9",
	"\u56CB",
	"\u56CC",
	"\u56D0",
	"\u56D1",
	"\u56D2",
	"\u56D5",
	"\u56EA",
	"\u5707",
	"\u570B",
	"\u570D",
	"\u5712",
	"\u5713",
	"\u5716",
	"\u5718",
	"\u571E",
	"\u57B5",
	"\u57B7",
	"\u57BB",
	"\u57C9",
	"\u57E1",
	"\u57E8",
	"\u57EC",
	"\u57F0",
	"\u57F7",
	"\u5805",
	"\u5808",
	"\u580A",
	"\u5816",
	"\u581A",
	"\u581D",
	"\u582F",
	"\u5831",
	"\u5834",
	"\u584A",
	"\u584B",
	"\u584F",
	"\u5852",
	"\u5857",
	"\u5862",
	"\u5864",
	"\u5875",
	"\u5878",
	"\u5879",
	"\u587C",
	"\u587F",
	"\u5886",
	"\u588A",
	"\u588B",
	"\u588F",
	"\u589C",
	"\u589D",
	"\u58A0",
	"\u58A2",
	"\u58A7",
	"\u58AE",
	"\u58B3",
	"\u58B6",
	"\u58B7",
	"\u58BB",
	"\u58BE",
	"\u58BF",
	"\u58C7",
	"\u58C8",
	"\u58CB",
	"\u58CD",
	"\u58CF",
	"\u58D0",
	"\u58D2",
	"\u58D3",
	"\u58D4",
	"\u58D7",
	"\u58D8",
	"\u58D9",
	"\u58DA",
	"\u58DB",
	"\u58DD",
	"\u58DE",
	"\u58DF",
	"\u58E0",
	"\u58E2",
	"\u58E3",
	"\u58E7",
	"\u58E9",
	"\u58EA",
	"\u58EF",
	"\u58FA",
	"\u58FC",
	"\u58FD",
	"\u5920",
	"\u5922",
	"\u593E",
	"\u5950",
	"\u5967",
	"\u5969",
	"\u596A",
	"\u596B",
	"\u596C",
	"\u596E",
	"\u596F",
	"\u5972",
	"\u597C",
	"\u599D",
	"\u59CD",
	"\u59E6",
	"\u5A19",
	"\u5A1B",
	"\u5A41",
	"\u5A61",
	"\u5A66",
	"\u5A6D",
	"\u5A78",
	"\u5A81",
	"\u5A88",
	"\u5A9C",
	"\u5AA7",
	"\u5AAF",
	"\u5AB0",
	"\u5ABC",
	"\u5ABD",
	"\u5AC8",
	"\u5AD7",
	"\u5AE2",
	"\u5AE5",
	"\u5AE7",
	"\u5AF5",
	"\u5AFB",
	"\u5AFF",
	"\u5B00",
	"\u5B03",
	"\u5B05",
	"\u5B07",
	"\u5B08",
	"\u5B0B",
	"\u5B0C",
	"\u5B10",
	"\u5B12",
	"\u5B19",
	"\u5B21",
	"\u5B23",
	"\u5B24",
	"\u5B26",
	"\u5B2A",
	"\u5B2E",
	"\u5B30",
	"\u5B38",
	"\u5B3B",
	"\u5B3E",
	"\u5B44",
	"\u5B46",
	"\u5B47",
	"\u5B4B",
	"\u5B4C",
	"\u5B4E",
	"\u5B6B",
	"\u5B72",
	"\u5B78",
	"\u5B7B",
	"\u5B7E",
	"\u5B7F",
	"\u5BAE",
	"\u5BE0",
	"\u5BE2",
	"\u5BE6",
	"\u5BE7",
	"\u5BE9",
	"\u5BEA",
	"\u5BEB",
	"\u5BEC",
	"\u5BEF",
	"\u5BF5",
	"\u5BF6",
	"\u5BF7",
	"\u5C07",
	"\u5C08",
	"\u5C0B",
	"\u5C0D",
	"\u5C0E",
	"\u5C35",
	"\u5C37",
	"\u5C46",
	"\u5C4D",
	"\u5C53",
	"\u5C5C",
	"\u5C62",
	"\u5C64",
	"\u5C68",
	"\u5C69",
	"\u5C6C",
	"\u5CA1",
	"\u5CF4",
	"\u5CF6",
	"\u5CFD",
	"\u5D0D",
	"\u5D17",
	"\u5D19",
	"\u5D20",
	"\u5D22",
	"\u5D2C",
	"\u5D31",
	"\u5D35",
	"\u5D50",
	"\u5D77",
	"\u5D78",
	"\u5D7C",
	"\u5D7D",
	"\u5D7E",
	"\u5D81",
	"\u5D84",
	"\u5D87",
	"\u5D88",
	"\u5D94",
	"\u5D97",
	"\u5DA0",
	"\u5DA2",
	"\u5DA4",
	"\u5DA7",
	"\u5DA8",
	"\u5DA9",
	"\u5DAA",
	"\u5DAE",
	"\u5DB4",
	"\u5DB8",
	"\u5DB9",
	"\u5DBA",
	"\u5DBC",
	"\u5DBD",
	"\u5DC3",
	"\u5DC6",
	"\u5DCA",
	"\u5DCB",
	"\u5DD1",
	"\u5DD2",
	"\u5DD4",
	"\u5DD6",
	"\u5DD7",
	"\u5DD8",
	"\u5DDA",
	"\u5DE0",
	"\u5DF0",
	"\u5E25",
	"\u5E2B",
	"\u5E33",
	"\u5E34",
	"\u5E36",
	"\u5E40",
	"\u5E43",
	"\u5E53",
	"\u5E57",
	"\u5E58",
	"\u5E5F",
	"\u5E60",
	"\u5E63",
	"\u5E69",
	"\u5E6B",
	"\u5E6C",
	"\u5E70",
	"\u5E71",
	"\u5E79",
	"\u5E7A",
	"\u5E7E",
	"\u5EAB",
	"\u5EB2",
	"\u5EC1",
	"\u5EC2",
	"\u5EC4",
	"\u5EC8",
	"\u5ECE",
	"\u5ED4",
	"\u5ED5",
	"\u5ED7",
	"\u5EDA",
	"\u5EDD",
	"\u5EDE",
	"\u5EDF",
	"\u5EE0",
	"\u5EE1",
	"\u5EE2",
	"\u5EE3",
	"\u5EE5",
	"\u5EE7",
	"\u5EE9",
	"\u5EEC",
	"\u5EEE",
	"\u5EF3",
	"\u5F12",
	"\u5F33",
	"\u5F35",
	"\u5F37",
	"\u5F44",
	"\u5F46",
	"\u5F48",
	"\u5F4C",
	"\u5F4D",
	"\u5F4E",
	"\u5F59",
	"\u5F5E",
	"\u5F60",
	"\u5F65",
	"\u5F72",
	"\u5F8C",
	"\u5F91",
	"\u5F9E",
	"\u5FA0",
	"\u5FB9",
	"\u5FBF",
	"\u6046",
	"\u6065",
	"\u6085",
	"\u608F",
	"\u609E",
	"\u60B5",
	"\u60B6",
	"\u60C0",
	"\u60E1",
	"\u60F1",
	"\u60F2",
	"\u60FB",
	"\u6107",
	"\u611B",
	"\u611C",
	"\u6128",
	"\u6129",
	"\u6134",
	"\u6137",
	"\u613E",
	"\u6144",
	"\u614B",
	"\u614D",
	"\u6150",
	"\u6158",
	"\u6159",
	"\u615A",
	"\u615F",
	"\u6163",
	"\u6164",
	"\u616A",
	"\u616B",
	"\u616E",
	"\u616F",
	"\u6171",
	"\u6172",
	"\u6173",
	"\u6176",
	"\u6178",
	"\u6179",
	"\u617A",
	"\u6182",
	"\u618A",
	"\u618D",
	"\u6190",
	"\u6191",
	"\u6192",
	"\u6196",
	"\u619A",
	"\u61A2",
	"\u61A4",
	"\u61A6",
	"\u61AA",
	"\u61AB",
	"\u61AE",
	"\u61B2",
	"\u61B4",
	"\u61B6",
	"\u61B8",
	"\u61B9",
	"\u61C0",
	"\u61C7",
	"\u61C9",
	"\u61CC",
	"\u61CD",
	"\u61D3",
	"\u61D5",
	"\u61D8",
	"\u61D9",
	"\u61DC",
	"\u61DE",
	"\u61DF",
	"\u61E0",
	"\u61E3",
	"\u61E4",
	"\u61E7",
	"\u61E8",
	"\u61E9",
	"\u61EB",
	"\u61ED",
	"\u61F0",
	"\u61F2",
	"\u61F6",
	"\u61F7",
	"\u61F8",
	"\u61FA",
	"\u61FC",
	"\u61FE",
	"\u6200",
	"\u6201",
	"\u6203",
	"\u6207",
	"\u6214",
	"\u6227",
	"\u6229",
	"\u6230",
	"\u6231",
	"\u6232",
	"\u6236",
	"\u62CB",
	"\u6329",
	"\u633E",
	"\u6368",
	"\u636B",
	"\u6372",
	"\u6381",
	"\u6383",
	"\u6384",
	"\u6386",
	"\u6397",
	"\u6399",
	"\u639A",
	"\u639B",
	"\u63A1",
	"\u63C0",
	"\u63DA",
	"\u63DB",
	"\u63EE",
	"\u640A",
	"\u640D",
	"\u640E",
	"\u6416",
	"\u6417",
	"\u6435",
	"\u6436",
	"\u6440",
	"\u6443",
	"\u644B",
	"\u6450",
	"\u6451",
	"\u6455",
	"\u6459",
	"\u645C",
	"\u645F",
	"\u646A",
	"\u646B",
	"\u646F",
	"\u6472",
	"\u6473",
	"\u6476",
	"\u647B",
	"\u647C",
	"\u6488",
	"\u648A",
	"\u648B",
	"\u648C",
	"\u648F",
	"\u6490",
	"\u6493",
	"\u649D",
	"\u649F",
	"\u64A3",
	"\u64A5",
	"\u64A7",
	"\u64AB",
	"\u64B2",
	"\u64B3",
	"\u64B6",
	"\u64BB",
	"\u64BE",
	"\u64BF",
	"\u64C1",
	"\u64C3",
	"\u64C4",
	"\u64C7",
	"\u64C8",
	"\u64CA",
	"\u64CB",
	"\u64D3",
	"\u64D4",
	"\u64DA",
	"\u64DF",
	"\u64E0",
	"\u64E3",
	"\u64E5",
	"\u64E7",
	"\u64EA",
	"\u64EB",
	"\u64EC",
	"\u64EF",
	"\u64F0",
	"\u64F1",
	"\u64F2",
	"\u64F3",
	"\u64F4",
	"\u64F7",
	"\u64FA",
	"\u64FB",
	"\u64FC",
	"\u64FD",
	"\u64FE",
	"\u6504",
	"\u6506",
	"\u650B",
	"\u650E",
	"\u650F",
	"\u6511",
	"\u6514",
	"\u6516",
	"\u6519",
	"\u651B",
	"\u651C",
	"\u651D",
	"\u651E",
	"\u6522",
	"\u6523",
	"\u6524",
	"\u6526",
	"\u6527",
	"\u6529",
	"\u652A",
	"\u652C",
	"\u6533",
	"\u6557",
	"\u6558",
	"\u6575",
	"\u6578",
	"\u657A",
	"\u657F",
	"\u6581",
	"\u6582",
	"\u6583",
	"\u6584",
	"\u6585",
	"\u6586",
	"\u6595",
	"\u65AC",
	"\u65B7",
	"\u65B8",
	"\u65BC",
	"\u65DD",
	"\u65DF",
	"\u661C",
	"\u6642",
	"\u6649",
	"\u665B",
	"\u665D",
	"\u6688",
	"\u6689",
	"\u6690",
	"\u6698",
	"\u669F",
	"\u66A2",
	"\u66AB",
	"\u66C4",
	"\u66C6",
	"\u66C7",
	"\u66C9",
	"\u66CA",
	"\u66CF",
	"\u66D6",
	"\u66E0",
	"\u66E5",
	"\u66E8",
	"\u66EC",
	"\u66ED",
	"\u66EE",
	"\u66F8",
	"\u6703",
	"\u6725",
	"\u6727",
	"\u6771",
	"\u67F5",
	"\u6871",
	"\u687F",
	"\u6894",
	"\u6896",
	"\u6898",
	"\u689C",
	"\u689D",
	"\u689F",
	"\u68B2",
	"\u68C4",
	"\u68C6",
	"\u68D6",
	"\u68D7",
	"\u68DF",
	"\u68E1",
	"\u68E7",
	"\u68F2",
	"\u68F6",
	"\u690F",
	"\u691A",
	"\u6932",
	"\u6947",
	"\u694A",
	"\u694E",
	"\u6953",
	"\u6968",
	"\u696D",
	"\u6975",
	"\u699D",
	"\u69AA",
	"\u69AE",
	"\u69AF",
	"\u69B2",
	"\u69BF",
	"\u69CB",
	"\u69CD",
	"\u69E4",
	"\u69E7",
	"\u69E8",
	"\u69EB",
	"\u69EE",
	"\u69F3",
	"\u69F6",
	"\u69FB",
	"\u69FC",
	"\u6A01",
	"\u6A02",
	"\u6A05",
	"\u6A13",
	"\u6A19",
	"\u6A1E",
	"\u6A20",
	"\u6A22",
	"\u6A23",
	"\u6A2B",
	"\u6A32",
	"\u6A33",
	"\u6A38",
	"\u6A39",
	"\u6A3A",
	"\u6A3B",
	"\u6A3F",
	"\u6A43",
	"\u6A45",
	"\u6A48",
	"\u6A4B",
	"\u6A5A",
	"\u6A5F",
	"\u6A62",
	"\u6A68",
	"\u6A6B",
	"\u6A6F",
	"\u6A81",
	"\u6A82",
	"\u6A89",
	"\u6A8B",
	"\u6A92",
	"\u6A94",
	"\u6A9B",
	"\u6A9C",
	"\u6A9F",
	"\u6AA1",
	"\u6AA2",
	"\u6AA3",
	"\u6AA5",
	"\u6AAD",
	"\u6AAE",
	"\u6AAF",
	"\u6AB0",
	"\u6AB2",
	"\u6AB3",
	"\u6AB5",
	"\u6AB8",
	"\u6ABB",
	"\u6ABE",
	"\u6ABF",
	"\u6AC3",
	"\u6AC5",
	"\u6ACD",
	"\u6ACE",
	"\u6ACF",
	"\u6AD3",
	"\u6ADA",
	"\u6ADB",
	"\u6ADD",
	"\u6ADE",
	"\u6ADF",
	"\u6AE0",
	"\u6AE2",
	"\u6AE5",
	"\u6AE7",
	"\u6AE8",
	"\u6AE9",
	"\u6AEA",
	"\u6AEB",
	"\u6AEC",
	"\u6AEF",
	"\u6AF1",
	"\u6AF3",
	"\u6AF4",
	"\u6AF6",
	"\u6AF8",
	"\u6AF9",
	"\u6AFB",
	"\u6AFD",
	"\u6B04",
	"\u6B07",
	"\u6B0A",
	"\u6B0D",
	"\u6B0F",
	"\u6B10",
	"\u6B11",
	"\u6B12",
	"\u6B13",
	"\u6B16",
	"\u6B18",
	"\u6B1E",
	"\u6B3D",
	"\u6B44",
	"\u6B4D",
	"\u6B50",
	"\u6B55",
	"\u6B57",
	"\u6B5B",
	"\u6B5E",
	"\u6B5F",
	"\u6B61",
	"\u6B72",
	"\u6B77",
	"\u6B78",
	"\u6B7F",
	"\u6B98",
	"\u6B9E",
	"\u6BA2",
	"\u6BA4",
	"\u6BA8",
	"\u6BAB",
	"\u6BAE",
	"\u6BAF",
	"\u6BB0",
	"\u6BB2",
	"\u6BBA",
	"\u6BBB",
	"\u6BBC",
	"\u6BC0",
	"\u6BC4",
	"\u6BC6",
	"\u6BCA",
	"\u6BFF",
	"\u6C00",
	"\u6C02",
	"\u6C08",
	"\u6C0C",
	"\u6C23",
	"\u6C2B",
	"\u6C2C",
	"\u6C2D",
	"\u6C33",
	"\u6C7A",
	"\u6C92",
	"\u6C96",
	"\u6CC1",
	"\u6D36",
	"\u6D79",
	"\u6D7F",
	"\u6D87",
	"\u6DB7",
	"\u6DBC",
	"\u6DDA",
	"\u6DE5",
	"\u6DEA",
	"\u6DF5",
	"\u6DF6",
	"\u6DFA",
	"\u6E19",
	"\u6E1B",
	"\u6E22",
	"\u6E26",
	"\u6E2C",
	"\u6E3E",
	"\u6E4A",
	"\u6E4B",
	"\u6E5E",
	"\u6E6F",
	"\u6E88",
	"\u6E96",
	"\u6E9D",
	"\u6EA1",
	"\u6EA4",
	"\u6EAB",
	"\u6EAE",
	"\u6EB0",
	"\u6EB3",
	"\u6EC4",
	"\u6EC5",
	"\u6ECC",
	"\u6ECE",
	"\u6EEC",
	"\u6EED",
	"\u6EEF",
	"\u6EF2",
	"\u6EF7",
	"\u6EF8",
	"\u6EFB",
	"\u6EFE",
	"\u6EFF",
	"\u6F01",
	"\u6F0A",
	"\u6F0D",
	"\u6F0E",
	"\u6F10",
	"\u6F19",
	"\u6F1A",
	"\u6F22",
	"\u6F23",
	"\u6F2C",
	"\u6F32",
	"\u6F35",
	"\u6F38",
	"\u6F3F",
	"\u6F41",
	"\u6F51",
	"\u6F54",
	"\u6F55",
	"\u6F59",
	"\u6F5A",
	"\u6F5B",
	"\u6F63",
	"\u6F64",
	"\u6F6C",
	"\u6F6F",
	"\u6F70",
	"\u6F77",
	"\u6F7F",
	"\u6F80",
	"\u6F85",
	"\u6F86",
	"\u6F87",
	"\u6F90",
	"\u6F92",
	"\u6F96",
	"\u6F97",
	"\u6FA0",
	"\u6FA2",
	"\u6FA4",
	"\u6FA6",
	"\u6FA9",
	"\u6FAB",
	"\u6FAC",
	"\u6FAE",
	"\u6FB0",
	"\u6FB1",
	"\u6FBE",
	"\u6FC1",
	"\u6FC3",
	"\u6FC4",
	"\u6FC6",
	"\u6FC7",
	"\u6FCA",
	"\u6FD5",
	"\u6FD8",
	"\u6FDA",
	"\u6FDB",
	"\u6FDC",
	"\u6FDF",
	"\u6FE4",
	"\u6FE7",
	"\u6FEB",
	"\u6FF0",
	"\u6FF1",
	"\u6FFA",
	"\u6FFC",
	"\u6FFE",
	"\u6FFF",
	"\u7001",
	"\u7002",
	"\u7003",
	"\u7004",
	"\u7005",
	"\u7006",
	"\u7007",
	"\u7008",
	"\u7009",
	"\u700B",
	"\u700F",
	"\u7015",
	"\u7018",
	"\u7019",
	"\u701D",
	"\u701F",
	"\u7020",
	"\u7022",
	"\u7026",
	"\u7027",
	"\u7028",
	"\u702F",
	"\u7030",
	"\u7032",
	"\u7033",
	"\u7034",
	"\u7035",
	"\u703E",
	"\u7043",
	"\u7044",
	"\u704D",
	"\u7051",
	"\u7052",
	"\u7053",
	"\u7055",
	"\u7058",
	"\u7059",
	"\u705D",
	"\u705F",
	"\u7060",
	"\u7061",
	"\u7063",
	"\u7064",
	"\u7066",
	"\u7067",
	"\u707D",
	"\u70BA",
	"\u70CF",
	"\u70F4",
	"\u711B",
	"\u7121",
	"\u7147",
	"\u7149",
	"\u7152",
	"\u7159",
	"\u7162",
	"\u7165",
	"\u7169",
	"\u716C",
	"\u7171",
	"\u717C",
	"\u7182",
	"\u7185",
	"\u7189",
	"\u718C",
	"\u7192",
	"\u7193",
	"\u7195",
	"\u7197",
	"\u719E",
	"\u71A1",
	"\u71B0",
	"\u71B1",
	"\u71B2",
	"\u71BE",
	"\u71C0",
	"\u71C1",
	"\u71C8",
	"\u71CC",
	"\u71D2",
	"\u71D6",
	"\u71D8",
	"\u71D9",
	"\u71DC",
	"\u71DF",
	"\u71E1",
	"\u71E6",
	"\u71ED",
	"\u71F0",
	"\u71F4",
	"\u71F5",
	"\u71F6",
	"\u71FC",
	"\u71FD",
	"\u71FE",
	"\u7201",
	"\u7203",
	"\u7204",
	"\u720D",
	"\u7210",
	"\u7213",
	"\u7216",
	"\u721B",
	"\u7223",
	"\u7225",
	"\u7227",
	"\u722D",
	"\u7232",
	"\u723A",
	"\u723E",
	"\u7246",
	"\u724B",
	"\u7258",
	"\u727C",
	"\u727D",
	"\u7285",
	"\u7293",
	"\u7296",
	"\u729E",
	"\u72A2",
	"\u72A4",
	"\u72A7",
	"\u72C0",
	"\u72F9",
	"\u72FD",
	"\u730C",
	"\u730D",
	"\u7319",
	"\u7327",
	"\u7336",
	"\u733B",
	"\u7341",
	"\u7344",
	"\u7345",
	"\u734A",
	"\u734E",
	"\u7351",
	"\u7356",
	"\u735F",
	"\u7362",
	"\u7368",
	"\u7369",
	"\u736A",
	"\u736B",
	"\u736E",
	"\u7370",
	"\u7371",
	"\u7372",
	"\u7375",
	"\u7377",
	"\u7378",
	"\u7379",
	"\u737A",
	"\u737B",
	"\u737C",
	"\u7380",
	"\u7381",
	"\u7382",
	"\u73FC",
	"\u73FE",
	"\u7416",
	"\u743A",
	"\u743F",
	"\u744B",
	"\u7452",
	"\u7459",
	"\u7463",
	"\u7464",
	"\u7469",
	"\u746A",
	"\u7472",
	"\u747B",
	"\u747D",
	"\u7489",
	"\u748A",
	"\u7495",
	"\u7497",
	"\u749B",
	"\u749D",
	"\u74A1",
	"\u74A3",
	"\u74A6",
	"\u74AB",
	"\u74AF",
	"\u74B0",
	"\u74B5",
	"\u74B8",
	"\u74B9",
	"\u74BC",
	"\u74BD",
	"\u74BE",
	"\u74C4",
	"\u74C5",
	"\u74CA",
	"\u74CF",
	"\u74D0",
	"\u74D3",
	"\u74D4",
	"\u74D5",
	"\u74DA",
	"\u74DB",
	"\u750A",
	"\u750C",
	"\u7512",
	"\u7516",
	"\u7522",
	"\u7523",
	"\u755D",
	"\u7562",
	"\u756B",
	"\u7570",
	"\u7576",
	"\u7587",
	"\u758A",
	"\u75D9",
	"\u75EE",
	"\u75FE",
	"\u7602",
	"\u760B",
	"\u760D",
	"\u7611",
	"\u7612",
	"\u7613",
	"\u761E",
	"\u7621",
	"\u7627",
	"\u762E",
	"\u7631",
	"\u7632",
	"\u763A",
	"\u763B",
	"\u7642",
	"\u7646",
	"\u7647",
	"\u7648",
	"\u7649",
	"\u764E",
	"\u7650",
	"\u7658",
	"\u765F",
	"\u7660",
	"\u7662",
	"\u7664",
	"\u7665",
	"\u7667",
	"\u7669",
	"\u766A",
	"\u766C",
	"\u766D",
	"\u766E",
	"\u7670",
	"\u7671",
	"\u7672",
	"\u7674",
	"\u767C",
	"\u769A",
	"\u769F",
	"\u76AA",
	"\u76B0",
	"\u76B8",
	"\u76BA",
	"\u76BE",
	"\u76DC",
	"\u76DE",
	"\u76E1",
	"\u76E3",
	"\u76E4",
	"\u76E7",
	"\u76E8",
	"\u76EA",
	"\u7725",
	"\u773E",
	"\u774D",
	"\u774F",
	"\u7754",
	"\u775C",
	"\u775E",
	"\u776A",
	"\u7774",
	"\u7793",
	"\u7798",
	"\u779B",
	"\u779C",
	"\u779E",
	"\u77A1",
	"\u77A4",
	"\u77AF",
	"\u77B1",
	"\u77B6",
	"\u77B7",
	"\u77BC",
	"\u77C7",
	"\u77C9",
	"\u77CA",
	"\u77D1",
	"\u77D3",
	"\u77D5",
	"\u77D6",
	"\u77D8",
	"\u77DA",
	"\u77EF",
	"\u77F2",
	"\u7843",
	"\u785C",
	"\u7864",
	"\u7868",
	"\u786F",
	"\u7899",
	"\u78A2",
	"\u78A9",
	"\u78AD",
	"\u78B8",
	"\u78BA",
	"\u78BC",
	"\u78BD",
	"\u78D1",
	"\u78D2",
	"\u78DA",
	"\u78E0",
	"\u78E3",
	"\u78E7",
	"\u78EF",
	"\u78F1",
	"\u78F5",
	"\u78FD",
	"\u78FE",
	"\u7904",
	"\u7906",
	"\u790B",
	"\u790E",
	"\u790F",
	"\u7910",
	"\u7912",
	"\u7919",
	"\u791A",
	"\u791B",
	"\u7925",
	"\u7926",
	"\u7929",
	"\u792A",
	"\u792B",
	"\u792C",
	"\u792E",
	"\u7930",
	"\u7931",
	"\u7932",
	"\u7939",
	"\u797F",
	"\u798D",
	"\u798E",
	"\u7993",
	"\u7995",
	"\u799C",
	"\u79A1",
	"\u79A6",
	"\u79AA",
	"\u79AC",
	"\u79AE",
	"\u79AF",
	"\u79B0",
	"\u79B1",
	"\u79B5",
	"\u79BF",
	"\u79C8",
	"\u7A05",
	"\u7A08",
	"\u7A0F",
	"\u7A1F",
	"\u7A2E",
	"\u7A31",
	"\u7A40",
	"\u7A47",
	"\u7A4C",
	"\u7A4D",
	"\u7A4E",
	"\u7A56",
	"\u7A60",
	"\u7A61",
	"\u7A62",
	"\u7A67",
	"\u7A68",
	"\u7A69",
	"\u7A6B",
	"\u7A6C",
	"\u7A6D",
	"\u7AA9",
	"\u7AAA",
	"\u7AAE",
	"\u7AAF",
	"\u7AB1",
	"\u7AB5",
	"\u7AB6",
	"\u7ABA",
	"\u7AC0",
	"\u7AC4",
	"\u7AC5",
	"\u7AC7",
	"\u7AC8",
	"\u7AC9",
	"\u7ACA",
	"\u7AEA",
	"\u7AF1",
	"\u7AF6",
	"\u7B46",
	"\u7B4D",
	"\u7B67",
	"\u7B74",
	"\u7B8B",
	"\u7B8F",
	"\u7BB9",
	"\u7BC0",
	"\u7BC4",
	"\u7BC9",
	"\u7BCB",
	"\u7BD4",
	"\u7BD8",
	"\u7BE2",
	"\u7BE4",
	"\u7BE9",
	"\u7BF3",
	"\u7BF5",
	"\u7BF8",
	"\u7BFF",
	"\u7C00",
	"\u7C02",
	"\u7C0D",
	"\u7C1C",
	"\u7C1E",
	"\u7C21",
	"\u7C22",
	"\u7C23",
	"\u7C25",
	"\u7C2B",
	"\u7C35",
	"\u7C39",
	"\u7C3B",
	"\u7C3D",
	"\u7C3E",
	"\u7C43",
	"\u7C4B",
	"\u7C4C",
	"\u7C54",
	"\u7C59",
	"\u7C5A",
	"\u7C5B",
	"\u7C5C",
	"\u7C5F",
	"\u7C60",
	"\u7C63",
	"\u7C64",
	"\u7C66",
	"\u7C69",
	"\u7C6A",
	"\u7C6B",
	"\u7C6C",
	"\u7C6D",
	"\u7C6E",
	"\u7C6F",
	"\u7C72",
	"\u7CAF",
	"\u7CB5",
	"\u7CBB",
	"\u7CDD",
	"\u7CDE",
	"\u7CE7",
	"\u7CEE",
	"\u7CF0",
	"\u7CF2",
	"\u7CF4",
	"\u7CF6",
	"\u7CF7",
	"\u7CF9",
	"\u7CFA",
	"\u7CFD",
	"\u7CFE",
	"\u7D00",
	"\u7D02",
	"\u7D03",
	"\u7D04",
	"\u7D05",
	"\u7D06",
	"\u7D07",
	"\u7D08",
	"\u7D09",
	"\u7D0B",
	"\u7D0C",
	"\u7D0D",
	"\u7D10",
	"\u7D11",
	"\u7D12",
	"\u7D13",
	"\u7D14",
	"\u7D15",
	"\u7D16",
	"\u7D17",
	"\u7D18",
	"\u7D19",
	"\u7D1A",
	"\u7D1B",
	"\u7D1C",
	"\u7D1D",
	"\u7D1E",
	"\u7D1F",
	"\u7D21",
	"\u7D28",
	"\u7D29",
	"\u7D2C",
	"\u7D2D",
	"\u7D30",
	"\u7D31",
	"\u7D32",
	"\u7D33",
	"\u7D35",
	"\u7D36",
	"\u7D38",
	"\u7D39",
	"\u7D3A",
	"\u7D3C",
	"\u7D3D",
	"\u7D3E",
	"\u7D3F",
	"\u7D40",
	"\u7D41",
	"\u7D42",
	"\u7D43",
	"\u7D44",
	"\u7D45",
	"\u7D46",
	"\u7D47",
	"\u7D4D",
	"\u7D4E",
	"\u7D50",
	"\u7D51",
	"\u7D53",
	"\u7D55",
	"\u7D56",
	"\u7D58",
	"\u7D59",
	"\u7D5A",
	"\u7D5B",
	"\u7D5D",
	"\u7D5E",
	"\u7D5F",
	"\u7D60",
	"\u7D61",
	"\u7D62",
	"\u7D63",
	"\u7D64",
	"\u7D65",
	"\u7D66",
	"\u7D67",
	"\u7D68",
	"\u7D6A",
	"\u7D6F",
	"\u7D70",
	"\u7D71",
	"\u7D72",
	"\u7D73",
	"\u7D76",
	"\u7D78",
	"\u7D79",
	"\u7D7A",
	"\u7D7B",
	"\u7D7C",
	"\u7D7D",
	"\u7D7E",
	"\u7D7F",
	"\u7D80",
	"\u7D81",
	"\u7D83",
	"\u7D84",
	"\u7D85",
	"\u7D86",
	"\u7D87",
	"\u7D88",
	"\u7D89",
	"\u7D8A",
	"\u7D8B",
	"\u7D8C",
	"\u7D8D",
	"\u7D8E",
	"\u7D8F",
	"\u7D90",
	"\u7D93",
	"\u7D95",
	"\u7D96",
	"\u7D9C",
	"\u7D9D",
	"\u7D9E",
	"\u7D9F",
	"\u7DA0",
	"\u7DA1",
	"\u7DA2",
	"\u7DA3",
	"\u7DA7",
	"\u7DAA",
	"\u7DAB",
	"\u7DAC",
	"\u7DAD",
	"\u7DAF",
	"\u7DB0",
	"\u7DB1",
	"\u7DB2",
	"\u7DB3",
	"\u7DB4",
	"\u7DB5",
	"\u7DB7",
	"\u7DB8",
	"\u7DB9",
	"\u7DBA",
	"\u7DBB",
	"\u7DBC",
	"\u7DBD",
	"\u7DBE",
	"\u7DBF",
	"\u7DC0",
	"\u7DC1",
	"\u7DC2",
	"\u7DC4",
	"\u7DC5",
	"\u7DC6",
	"\u7DC7",
	"\u7DC9",
	"\u7DCA",
	"\u7DCB",
	"\u7DCC",
	"\u7DCD",
	"\u7DCE",
	"\u7DCF",
	"\u7DD1",
	"\u7DD2",
	"\u7DD3",
	"\u7DD4",
	"\u7DD7",
	"\u7DD8",
	"\u7DD9",
	"\u7DDA",
	"\u7DDB",
	"\u7DDD",
	"\u7DDE",
	"\u7DDF",
	"\u7DE0",
	"\u7DE1",
	"\u7DE2",
	"\u7DE3",
	"\u7DE4",
	"\u7DE6",
	"\u7DE7",
	"\u7DE8",
	"\u7DE9",
	"\u7DEA",
	"\u7DEB",
	"\u7DEC",
	"\u7DEE",
	"\u7DEF",
	"\u7DF0",
	"\u7DF1",
	"\u7DF2",
	"\u7DF4",
	"\u7DF5",
	"\u7DF6",
	"\u7DF7",
	"\u7DF8",
	"\u7DF9",
	"\u7DFA",
	"\u7DFB",
	"\u7DFC",
	"\u7E08",
	"\u7E09",
	"\u7E0A",
	"\u7E0B",
	"\u7E0C",
	"\u7E0D",
	"\u7E0E",
	"\u7E10",
	"\u7E11",
	"\u7E12",
	"\u7E13",
	"\u7E15",
	"\u7E16",
	"\u7E17",
	"\u7E1A",
	"\u7E1B",
	"\u7E1C",
	"\u7E1D",
	"\u7E1E",
	"\u7E1F",
	"\u7E21",
	"\u7E23",
	"\u7E27",
	"\u7E29",
	"\u7E2A",
	"\u7E2B",
	"\u7E2C",
	"\u7E2D",
	"\u7E2E",
	"\u7E2F",
	"\u7E30",
	"\u7E31",
	"\u7E32",
	"\u7E33",
	"\u7E34",
	"\u7E35",
	"\u7E36",
	"\u7E37",
	"\u7E38",
	"\u7E39",
	"\u7E3A",
	"\u7E3C",
	"\u7E3D",
	"\u7E3E",
	"\u7E3F",
	"\u7E40",
	"\u7E42",
	"\u7E43",
	"\u7E45",
	"\u7E46",
	"\u7E48",
	"\u7E4E",
	"\u7E4F",
	"\u7E50",
	"\u7E51",
	"\u7E52",
	"\u7E53",
	"\u7E54",
	"\u7E55",
	"\u7E56",
	"\u7E57",
	"\u7E58",
	"\u7E59",
	"\u7E5A",
	"\u7E5C",
	"\u7E5E",
	"\u7E5F",
	"\u7E61",
	"\u7E62",
	"\u7E63",
	"\u7E68",
	"\u7E69",
	"\u7E6A",
	"\u7E6B",
	"\u7E6C",
	"\u7E6D",
	"\u7E6E",
	"\u7E6F",
	"\u7E70",
	"\u7E72",
	"\u7E73",
	"\u7E75",
	"\u7E76",
	"\u7E77",
	"\u7E78",
	"\u7E79",
	"\u7E7B",
	"\u7E7C",
	"\u7E7D",
	"\u7E7E",
	"\u7E7F",
	"\u7E80",
	"\u7E81",
	"\u7E83",
	"\u7E86",
	"\u7E87",
	"\u7E88",
	"\u7E8A",
	"\u7E8B",
	"\u7E8C",
	"\u7E8D",
	"\u7E8F",
	"\u7E91",
	"\u7E93",
	"\u7E94",
	"\u7E95",
	"\u7E96",
	"\u7E97",
	"\u7E98",
	"\u7E9A",
	"\u7E9C",
	"\u7F3D",
	"\u7F43",
	"\u7F46",
	"\u7F48",
	"\u7F4C",
	"\u7F4E",
	"\u7F4F",
	"\u7F70",
	"\u7F75",
	"\u7F77",
	"\u7F7C",
	"\u7F82",
	"\u7F85",
	"\u7F86",
	"\u7F88",
	"\u7F8B",
	"\u7FA5",
	"\u7FA9",
	"\u7FB5",
	"\u7FD2",
	"\u7FDC",
	"\u7FEC",
	"\u7FF9",
	"\u7FFD",
	"\u7FFF",
	"\u802C",
	"\u802E",
	"\u8056",
	"\u805E",
	"\u806F",
	"\u8070",
	"\u8072",
	"\u8073",
	"\u8075",
	"\u8076",
	"\u8077",
	"\u8079",
	"\u807B",
	"\u807D",
	"\u807E",
	"\u8085",
	"\u8105",
	"\u8108",
	"\u811B",
	"\u8125",
	"\u812B",
	"\u8139",
	"\u814E",
	"\u8156",
	"\u8161",
	"\u8166",
	"\u816A",
	"\u816B",
	"\u8173",
	"\u8178",
	"\u8183",
	"\u8192",
	"\u8195",
	"\u819A",
	"\u819E",
	"\u81A0",
	"\u81A2",
	"\u81A9",
	"\u81AE",
	"\u81B4",
	"\u81B6",
	"\u81B7",
	"\u81B9",
	"\u81BD",
	"\u81BE",
	"\u81BF",
	"\u81C7",
	"\u81C9",
	"\u81CD",
	"\u81CF",
	"\u81D7",
	"\u81D8",
	"\u81DA",
	"\u81DF",
	"\u81E0",
	"\u81E1",
	"\u81E2",
	"\u81E8",
	"\u81FA",
	"\u8207",
	"\u8208",
	"\u8209",
	"\u820A",
	"\u8259",
	"\u825B",
	"\u825C",
	"\u8264",
	"\u8266",
	"\u826B",
	"\u826D",
	"\u8271",
	"\u8277",
	"\u82BB",
	"\u8332",
	"\u834A",
	"\u838A",
	"\u8396",
	"\u83A2",
	"\u83A7",
	"\u83D5",
	"\u83EF",
	"\u8407",
	"\u840A",
	"\u842C",
	"\u842F",
	"\u8434",
	"\u8435",
	"\u8449",
	"\u8452",
	"\u845D",
	"\u8464",
	"\u8466",
	"\u846F",
	"\u8477",
	"\u847B",
	"\u848D",
	"\u8492",
	"\u8493",
	"\u8494",
	"\u849E",
	"\u84AD",
	"\u84B3",
	"\u84B6",
	"\u84BC",
	"\u84C0",
	"\u84CB",
	"\u84EE",
	"\u84EF",
	"\u84F2",
	"\u84F4",
	"\u84FD",
	"\u8504",
	"\u850E",
	"\u8514",
	"\u851E",
	"\u8520",
	"\u8523",
	"\u8525",
	"\u8526",
	"\u852A",
	"\u852D",
	"\u852E",
	"\u852F",
	"\u8531",
	"\u853F",
	"\u8541",
	"\u8544",
	"\u8546",
	"\u854E",
	"\u8551",
	"\u8552",
	"\u8553",
	"\u8555",
	"\u8558",
	"\u855D",
	"\u855F",
	"\u8561",
	"\u8562",
	"\u8567",
	"\u8569",
	"\u856A",
	"\u856D",
	"\u8573",
	"\u8577",
	"\u857D",
	"\u8580",
	"\u8586",
	"\u8588",
	"\u8589",
	"\u858A",
	"\u858B",
	"\u858C",
	"\u8591",
	"\u8594",
	"\u8596",
	"\u8598",
	"\u859F",
	"\u85A0",
	"\u85A6",
	"\u85A9",
	"\u85B1",
	"\u85B2",
	"\u85B3",
	"\u85B4",
	"\u85B5",
	"\u85BA",
	"\u85C7",
	"\u85CD",
	"\u85CE",
	"\u85D6",
	"\u85D8",
	"\u85DA",
	"\u85DD",
	"\u85E3",
	"\u85E5",
	"\u85EA",
	"\u85EC",
	"\u85ED",
	"\u85F0",
	"\u85F4",
	"\u85F6",
	"\u85F7",
	"\u85F9",
	"\u85FA",
	"\u85FE",
	"\u8600",
	"\u8604",
	"\u8606",
	"\u8607",
	"\u8608",
	"\u860A",
	"\u860B",
	"\u861A",
	"\u861E",
	"\u861F",
	"\u8621",
	"\u8622",
	"\u862B",
	"\u862C",
	"\u862D",
	"\u8631",
	"\u8635",
	"\u8639",
	"\u863A",
	"\u863F",
	"\u8645",
	"\u8646",
	"\u8649",
	"\u8655",
	"\u865B",
	"\u865C",
	"\u865F",
	"\u8666",
	"\u8667",
	"\u866F",
	"\u86F5",
	"\u86FA",
	"\u86FB",
	"\u86FC",
	"\u8706",
	"\u8726",
	"\u8738",
	"\u873D",
	"\u8740",
	"\u8741",
	"\u8755",
	"\u875C",
	"\u875F",
	"\u8766",
	"\u8778",
	"\u8784",
	"\u8798",
	"\u879E",
	"\u87A2",
	"\u87AE",
	"\u87B4",
	"\u87B9",
	"\u87BB",
	"\u87BF",
	"\u87C2",
	"\u87C4",
	"\u87C8",
	"\u87CE",
	"\u87D8",
	"\u87DC",
	"\u87E1",
	"\u87E3",
	"\u87E6",
	"\u87EC",
	"\u87EF",
	"\u87F1",
	"\u87F2",
	"\u87F3",
	"\u87F6",
	"\u87F7",
	"\u87FB",
	"\u87FD",
	"\u8800",
	"\u8801",
	"\u8805",
	"\u8806",
	"\u8808",
	"\u880C",
	"\u8810",
	"\u8811",
	"\u8812",
	"\u8819",
	"\u881E",
	"\u881F",
	"\u8823",
	"\u8826",
	"\u8828",
	"\u882A",
	"\u8831",
	"\u8833",
	"\u8836",
	"\u883B",
	"\u883E",
	"\u8846",
	"\u884A",
	"\u8853",
	"\u8855",
	"\u885A",
	"\u885B",
	"\u885D",
	"\u8879",
	"\u889E",
	"\u88CA",
	"\u88CC",
	"\u88CF",
	"\u88DC",
	"\u88DD",
	"\u88F2",
	"\u88FD",
	"\u8907",
	"\u890C",
	"\u8918",
	"\u892D",
	"\u8932",
	"\u8933",
	"\u8938",
	"\u893A",
	"\u893B",
	"\u8940",
	"\u8942",
	"\u8947",
	"\u894C",
	"\u894F",
	"\u8953",
	"\u8956",
	"\u8957",
	"\u8958",
	"\u895B",
	"\u895D",
	"\u8960",
	"\u8964",
	"\u8968",
	"\u896A",
	"\u896C",
	"\u896D",
	"\u896F",
	"\u8970",
	"\u8971",
	"\u8972",
	"\u8974",
	"\u8975",
	"\u8978",
	"\u8979",
	"\u897C",
	"\u898B",
	"\u898E",
	"\u898F",
	"\u8992",
	"\u8993",
	"\u8995",
	"\u8996",
	"\u8997",
	"\u8998",
	"\u899B",
	"\u899C",
	"\u899F",
	"\u89A0",
	"\u89A1",
	"\u89A2",
	"\u89A4",
	"\u89A5",
	"\u89A6",
	"\u89A9",
	"\u89AA",
	"\u89AC",
	"\u89AD",
	"\u89AF",
	"\u89B0",
	"\u89B2",
	"\u89B4",
	"\u89B6",
	"\u89B7",
	"\u89B8",
	"\u89B9",
	"\u89BA",
	"\u89BB",
	"\u89BC",
	"\u89BD",
	"\u89BF",
	"\u89C0",
	"\u89F4",
	"\u89F6",
	"\u89F7",
	"\u89F8",
	"\u89F9",
	"\u89FB",
	"\u89FD",
	"\u8A01",
	"\u8A02",
	"\u8A03",
	"\u8A06",
	"\u8A08",
	"\u8A0A",
	"\u8A0C",
	"\u8A0E",
	"\u8A0F",
	"\u8A10",
	"\u8A11",
	"\u8A12",
	"\u8A13",
	"\u8A15",
	"\u8A16",
	"\u8A17",
	"\u8A18",
	"\u8A1B",
	"\u8A1C",
	"\u8A1D",
	"\u8A1E",
	"\u8A1F",
	"\u8A22",
	"\u8A23",
	"\u8A25",
	"\u8A26",
	"\u8A27",
	"\u8A28",
	"\u8A29",
	"\u8A2A",
	"\u8A2C",
	"\u8A2D",
	"\u8A30",
	"\u8A31",
	"\u8A34",
	"\u8A36",
	"\u8A38",
	"\u8A39",
	"\u8A3A",
	"\u8A3B",
	"\u8A3D",
	"\u8A40",
	"\u8A41",
	"\u8A43",
	"\u8A44",
	"\u8A45",
	"\u8A46",
	"\u8A47",
	"\u8A49",
	"\u8A4A",
	"\u8A4C",
	"\u8A4D",
	"\u8A4E",
	"\u8A4F",
	"\u8A50",
	"\u8A51",
	"\u8A52",
	"\u8A53",
	"\u8A54",
	"\u8A55",
	"\u8A56",
	"\u8A57",
	"\u8A58",
	"\u8A5B",
	"\u8A5C",
	"\u8A5D",
	"\u8A5E",
	"\u8A60",
	"\u8A61",
	"\u8A62",
	"\u8A63",
	"\u8A65",
	"\u8A66",
	"\u8A68",
	"\u8A69",
	"\u8A6A",
	"\u8A6B",
	"\u8A6C",
	"\u8A6D",
	"\u8A6E",
	"\u8A6F",
	"\u8A70",
	"\u8A71",
	"\u8A72",
	"\u8A73",
	"\u8A74",
	"\u8A75",
	"\u8A76",
	"\u8A77",
	"\u8A7A",
	"\u8A7B",
	"\u8A7C",
	"\u8A7F",
	"\u8A82",
	"\u8A83",
	"\u8A84",
	"\u8A85",
	"\u8A86",
	"\u8A87",
	"\u8A8B",
	"\u8A8C",
	"\u8A8D",
	"\u8A8E",
	"\u8A8F",
	"\u8A90",
	"\u8A91",
	"\u8A92",
	"\u8A94",
	"\u8A95",
	"\u8A97",
	"\u8A98",
	"\u8A99",
	"\u8A9A",
	"\u8A9C",
	"\u8A9E",
	"\u8AA0",
	"\u8AA1",
	"\u8AA3",
	"\u8AA4",
	"\u8AA5",
	"\u8AA6",
	"\u8AA7",
	"\u8AA8",
	"\u8AAA",
	"\u8AAB",
	"\u8AAC",
	"\u8AB0",
	"\u8AB2",
	"\u8AB3",
	"\u8AB4",
	"\u8AB6",
	"\u8AB7",
	"\u8AB9",
	"\u8ABA",
	"\u8ABB",
	"\u8ABC",
	"\u8ABD",
	"\u8ABE",
	"\u8ABF",
	"\u8AC1",
	"\u8AC2",
	"\u8AC3",
	"\u8AC4",
	"\u8AC6",
	"\u8AC7",
	"\u8AC8",
	"\u8AC9",
	"\u8ACB",
	"\u8ACD",
	"\u8ACE",
	"\u8ACF",
	"\u8AD1",
	"\u8AD2",
	"\u8AD3",
	"\u8AD4",
	"\u8AD5",
	"\u8AD6",
	"\u8AD7",
	"\u8ADB",
	"\u8ADC",
	"\u8ADD",
	"\u8ADE",
	"\u8ADF",
	"\u8AE0",
	"\u8AE2",
	"\u8AE3",
	"\u8AE4",
	"\u8AE5",
	"\u8AE6",
	"\u8AE7",
	"\u8AE9",
	"\u8AEB",
	"\u8AED",
	"\u8AEE",
	"\u8AEF",
	"\u8AF0",
	"\u8AF1",
	"\u8AF2",
	"\u8AF3",
	"\u8AF4",
	"\u8AF6",
	"\u8AF7",
	"\u8AF8",
	"\u8AF9",
	"\u8AFA",
	"\u8AFB",
	"\u8AFC",
	"\u8AFE",
	"\u8B00",
	"\u8B01",
	"\u8B02",
	"\u8B04",
	"\u8B05",
	"\u8B06",
	"\u8B09",
	"\u8B0A",
	"\u8B0B",
	"\u8B0C",
	"\u8B0D",
	"\u8B0E",
	"\u8B0F",
	"\u8B10",
	"\u8B11",
	"\u8B14",
	"\u8B16",
	"\u8B17",
	"\u8B19",
	"\u8B1A",
	"\u8B1B",
	"\u8B1C",
	"\u8B1D",
	"\u8B1E",
	"\u8B1F",
	"\u8B20",
	"\u8B21",
	"\u8B23",
	"\u8B25",
	"\u8B28",
	"\u8B2B",
	"\u8B2C",
	"\u8B2D",
	"\u8B2F",
	"\u8B30",
	"\u8B31",
	"\u8B32",
	"\u8B33",
	"\u8B34",
	"\u8B35",
	"\u8B38",
	"\u8B39",
	"\u8B3B",
	"\u8B3C",
	"\u8B3E",
	"\u8B40",
	"\u8B42",
	"\u8B44",
	"\u8B45",
	"\u8B46",
	"\u8B47",
	"\u8B48",
	"\u8B49",
	"\u8B4A",
	"\u8B4C",
	"\u8B4E",
	"\u8B4F",
	"\u8B50",
	"\u8B51",
	"\u8B53",
	"\u8B54",
	"\u8B56",
	"\u8B58",
	"\u8B59",
	"\u8B5A",
	"\u8B5C",
	"\u8B5E",
	"\u8B5F",
	"\u8B60",
	"\u8B61",
	"\u8B68",
	"\u8B69",
	"\u8B6B",
	"\u8B6F",
	"\u8B70",
	"\u8B73",
	"\u8B74",
	"\u8B77",
	"\u8B78",
	"\u8B79",
	"\u8B7A",
	"\u8B7B",
	"\u8B7C",
	"\u8B7D",
	"\u8B7E",
	"\u8B7F",
	"\u8B80",
	"\u8B82",
	"\u8B85",
	"\u8B86",
	"\u8B87",
	"\u8B89",
	"\u8B8A",
	"\u8B8B",
	"\u8B8C",
	"\u8B8E",
	"\u8B91",
	"\u8B92",
	"\u8B93",
	"\u8B94",
	"\u8B95",
	"\u8B96",
	"\u8B98",
	"\u8B99",
	"\u8B9A",
	"\u8B9B",
	"\u8B9C",
	"\u8B9D",
	"\u8B9E",
	"\u8B9F",
	"\u8C44",
	"\u8C45",
	"\u8C48",
	"\u8C4E",
	"\u8C50",
	"\u8C6C",
	"\u8C75",
	"\u8C76",
	"\u8C93",
	"\u8C97",
	"\u8C99",
	"\u8C9D",
	"\u8C9E",
	"\u8C9F",
	"\u8CA0",
	"\u8CA1",
	"\u8CA2",
	"\u8CA3",
	"\u8CA4",
	"\u8CA6",
	"\u8CA7",
	"\u8CA8",
	"\u8CA9",
	"\u8CAA",
	"\u8CAB",
	"\u8CAC",
	"\u8CAF",
	"\u8CB0",
	"\u8CB1",
	"\u8CB2",
	"\u8CB3",
	"\u8CB4",
	"\u8CB6",
	"\u8CB7",
	"\u8CB8",
	"\u8CBA",
	"\u8CBB",
	"\u8CBC",
	"\u8CBD",
	"\u8CBE",
	"\u8CBF",
	"\u8CC0",
	"\u8CC1",
	"\u8CC2",
	"\u8CC3",
	"\u8CC4",
	"\u8CC5",
	"\u8CC7",
	"\u8CC8",
	"\u8CCA",
	"\u8CD1",
	"\u8CD2",
	"\u8CD3",
	"\u8CD5",
	"\u8CD7",
	"\u8CD9",
	"\u8CDA",
	"\u8CDC",
	"\u8CDD",
	"\u8CDE",
	"\u8CDF",
	"\u8CE0",
	"\u8CE1",
	"\u8CE2",
	"\u8CE3",
	"\u8CE4",
	"\u8CE5",
	"\u8CE6",
	"\u8CE7",
	"\u8CE8",
	"\u8CEA",
	"\u8CEB",
	"\u8CEC",
	"\u8CED",
	"\u8CEE",
	"\u8CF0",
	"\u8CF4",
	"\u8CF5",
	"\u8CF6",
	"\u8CF8",
	"\u8CF9",
	"\u8CFA",
	"\u8CFB",
	"\u8CFC",
	"\u8CFD",
	"\u8CFE",
	"\u8D03",
	"\u8D04",
	"\u8D05",
	"\u8D06",
	"\u8D07",
	"\u8D08",
	"\u8D09",
	"\u8D0A",
	"\u8D0B",
	"\u8D0D",
	"\u8D0F",
	"\u8D10",
	"\u8D11",
	"\u8D13",
	"\u8D14",
	"\u8D15",
	"\u8D16",
	"\u8D17",
	"\u8D19",
	"\u8D1A",
	"\u8D1B",
	"\u8D1C",
	"\u8D6C",
	"\u8D95",
	"\u8D99",
	"\u8DA8",
	"\u8DAB",
	"\u8DAC",
	"\u8DB2",
	"\u8DE1",
	"\u8E10",
	"\u8E1A",
	"\u8E34",
	"\u8E4C",
	"\u8E54",
	"\u8E55",
	"\u8E5B",
	"\u8E61",
	"\u8E63",
	"\u8E64",
	"\u8E65",
	"\u8E6A",
	"\u8E73",
	"\u8E7A",
	"\u8E7B",
	"\u8E80",
	"\u8E82",
	"\u8E89",
	"\u8E8A",
	"\u8E8B",
	"\u8E8D",
	"\u8E8E",
	"\u8E91",
	"\u8E92",
	"\u8E93",
	"\u8E95",
	"\u8E98",
	"\u8E9A",
	"\u8E9D",
	"\u8EA1",
	"\u8EA5",
	"\u8EA6",
	"\u8EA7",
	"\u8EAA",
	"\u8EC0",
	"\u8EC2",
	"\u8EC3",
	"\u8EC7",
	"\u8EC9",
	"\u8ECA",
	"\u8ECB",
	"\u8ECC",
	"\u8ECD",
	"\u8ECE",
	"\u8ECF",
	"\u8ED1",
	"\u8ED2",
	"\u8ED3",
	"\u8ED4",
	"\u8ED5",
	"\u8ED6",
	"\u8ED7",
	"\u8ED8",
	"\u8EDB",
	"\u8EDC",
	"\u8EDD",
	"\u8EDE",
	"\u8EDF",
	"\u8EE4",
	"\u8EE5",
	"\u8EE7",
	"\u8EE8",
	"\u8EEB",
	"\u8EEC",
	"\u8EEE",
	"\u8EEF",
	"\u8EF1",
	"\u8EF2",
	"\u8EF3",
	"\u8EF5",
	"\u8EF7",
	"\u8EF8",
	"\u8EF9",
	"\u8EFA",
	"\u8EFB",
	"\u8EFC",
	"\u8EFE",
	"\u8EFF",
	"\u8F00",
	"\u8F01",
	"\u8F02",
	"\u8F03",
	"\u8F04",
	"\u8F05",
	"\u8F06",
	"\u8F07",
	"\u8F08",
	"\u8F09",
	"\u8F0A",
	"\u8F0B",
	"\u8F10",
	"\u8F11",
	"\u8F12",
	"\u8F13",
	"\u8F14",
	"\u8F15",
	"\u8F16",
	"\u8F17",
	"\u8F18",
	"\u8F19",
	"\u8F1A",
	"\u8F1B",
	"\u8F1C",
	"\u8F1D",
	"\u8F1E",
	"\u8F1F",
	"\u8F20",
	"\u8F21",
	"\u8F22",
	"\u8F23",
	"\u8F24",
	"\u8F25",
	"\u8F26",
	"\u8F28",
	"\u8F29",
	"\u8F2A",
	"\u8F2B",
	"\u8F2C",
	"\u8F2E",
	"\u8F2F",
	"\u8F32",
	"\u8F33",
	"\u8F34",
	"\u8F35",
	"\u8F36",
	"\u8F37",
	"\u8F38",
	"\u8F39",
	"\u8F3B",
	"\u8F3C",
	"\u8F3E",
	"\u8F3F",
	"\u8F40",
	"\u8F42",
	"\u8F43",
	"\u8F44",
	"\u8F45",
	"\u8F46",
	"\u8F47",
	"\u8F48",
	"\u8F49",
	"\u8F4A",
	"\u8F4D",
	"\u8F4E",
	"\u8F4F",
	"\u8F50",
	"\u8F51",
	"\u8F52",
	"\u8F53",
	"\u8F54",
	"\u8F55",
	"\u8F56",
	"\u8F57",
	"\u8F58",
	"\u8F59",
	"\u8F5A",
	"\u8F5B",
	"\u8F5D",
	"\u8F5E",
	"\u8F5F",
	"\u8F60",
	"\u8F61",
	"\u8F62",
	"\u8F63",
	"\u8F64",
	"\u8F65",
	"\u8FA6",
	"\u8FAD",
	"\u8FAE",
	"\u8FAF",
	"\u8FB2",
	"\u8FF4",
	"\u9015",
	"\u9019",
	"\u9023",
	"\u9032",
	"\u903F",
	"\u904B",
	"\u904E",
	"\u9054",
	"\u9055",
	"\u9059",
	"\u905C",
	"\u905E",
	"\u9060",
	"\u9069",
	"\u9070",
	"\u9071",
	"\u9072",
	"\u9076",
	"\u9077",
	"\u9078",
	"\u907A",
	"\u907C",
	"\u9081",
	"\u9084",
	"\u9087",
	"\u908A",
	"\u908F",
	"\u9090",
	"\u90DF",
	"\u90F2",
	"\u90F5",
	"\u9106",
	"\u9109",
	"\u9112",
	"\u9114",
	"\u9116",
	"\u911F",
	"\u9121",
	"\u9126",
	"\u9127",
	"\u9129",
	"\u912A",
	"\u912C",
	"\u912D",
	"\u912E",
	"\u9130",
	"\u9132",
	"\u9133",
	"\u9134",
	"\u9136",
	"\u913A",
	"\u9147",
	"\u9148",
	"\u9186",
	"\u9196",
	"\u919C",
	"\u919E",
	"\u91A6",
	"\u91A7",
	"\u91AB",
	"\u91AC",
	"\u91B1",
	"\u91B2",
	"\u91B3",
	"\u91B6",
	"\u91C0",
	"\u91C1",
	"\u91C3",
	"\u91C5",
	"\u91CB",
	"\u91D0",
	"\u91D2",
	"\u91D3",
	"\u91D4",
	"\u91D5",
	"\u91D7",
	"\u91D8",
	"\u91D9",
	"\u91DA",
	"\u91DB",
	"\u91DD",
	"\u91DF",
	"\u91E3",
	"\u91E4",
	"\u91E5",
	"\u91E6",
	"\u91E7",
	"\u91E8",
	"\u91E9",
	"\u91EA",
	"\u91EB",
	"\u91EC",
	"\u91ED",
	"\u91F1",
	"\u91F2",
	"\u91F3",
	"\u91F4",
	"\u91F5",
	"\u91F7",
	"\u91F9",
	"\u91FA",
	"\u91FD",
	"\u91FE",
	"\u91FF",
	"\u9200",
	"\u9201",
	"\u9202",
	"\u9203",
	"\u9204",
	"\u9206",
	"\u9207",
	"\u9208",
	"\u9209",
	"\u920B",
	"\u920D",
	"\u920E",
	"\u920F",
	"\u9210",
	"\u9211",
	"\u9212",
	"\u9213",
	"\u9214",
	"\u9215",
	"\u9216",
	"\u9217",
	"\u921A",
	"\u921B",
	"\u921C",
	"\u921E",
	"\u9220",
	"\u9223",
	"\u9224",
	"\u9225",
	"\u9226",
	"\u9227",
	"\u922A",
	"\u922E",
	"\u922F",
	"\u9230",
	"\u9232",
	"\u9233",
	"\u9234",
	"\u9235",
	"\u9236",
	"\u9237",
	"\u9238",
	"\u9239",
	"\u923A",
	"\u923C",
	"\u923D",
	"\u923E",
	"\u923F",
	"\u9240",
	"\u9241",
	"\u9245",
	"\u9248",
	"\u9249",
	"\u924A",
	"\u924B",
	"\u924C",
	"\u924D",
	"\u924E",
	"\u924F",
	"\u9250",
	"\u9251",
	"\u9252",
	"\u9254",
	"\u9255",
	"\u9257",
	"\u9258",
	"\u9259",
	"\u925A",
	"\u925B",
	"\u925C",
	"\u925D",
	"\u925E",
	"\u925F",
	"\u9260",
	"\u9261",
	"\u9262",
	"\u9264",
	"\u9265",
	"\u9266",
	"\u9267",
	"\u9268",
	"\u926C",
	"\u926D",
	"\u926E",
	"\u9272",
	"\u9275",
	"\u9276",
	"\u9277",
	"\u9278",
	"\u9279",
	"\u927A",
	"\u927B",
	"\u927C",
	"\u927D",
	"\u927E",
	"\u927F",
	"\u9280",
	"\u9281",
	"\u9282",
	"\u9283",
	"\u9285",
	"\u9288",
	"\u928A",
	"\u928B",
	"\u928D",
	"\u928F",
	"\u9291",
	"\u9293",
	"\u9294",
	"\u9296",
	"\u9297",
	"\u9298",
	"\u9299",
	"\u929A",
	"\u929B",
	"\u929C",
	"\u92A0",
	"\u92A1",
	"\u92A3",
	"\u92A5",
	"\u92A6",
	"\u92A7",
	"\u92A8",
	"\u92A9",
	"\u92AA",
	"\u92AB",
	"\u92AC",
	"\u92B1",
	"\u92B2",
	"\u92B3",
	"\u92B6",
	"\u92B7",
	"\u92B8",
	"\u92B9",
	"\u92BB",
	"\u92BC",
	"\u92BE",
	"\u92C1",
	"\u92C2",
	"\u92C3",
	"\u92C5",
	"\u92C7",
	"\u92C9",
	"\u92CA",
	"\u92CB",
	"\u92CC",
	"\u92CD",
	"\u92CF",
	"\u92D0",
	"\u92D2",
	"\u92D7",
	"\u92D8",
	"\u92D9",
	"\u92DC",
	"\u92DD",
	"\u92DF",
	"\u92E0",
	"\u92E1",
	"\u92E3",
	"\u92E4",
	"\u92E5",
	"\u92E6",
	"\u92E7",
	"\u92E8",
	"\u92E9",
	"\u92EA",
	"\u92ED",
	"\u92EE",
	"\u92EF",
	"\u92F0",
	"\u92F1",
	"\u92F6",
	"\u92F8",
	"\u92F9",
	"\u92FC",
	"\u92FE",
	"\u9300",
	"\u9301",
	"\u9302",
	"\u9304",
	"\u9306",
	"\u9307",
	"\u9308",
	"\u930B",
	"\u930D",
	"\u930F",
	"\u9310",
	"\u9311",
	"\u9312",
	"\u9314",
	"\u9315",
	"\u9317",
	"\u9318",
	"\u9319",
	"\u931A",
	"\u931B",
	"\u931C",
	"\u931D",
	"\u931E",
	"\u931F",
	"\u9320",
	"\u9321",
	"\u9322",
	"\u9323",
	"\u9324",
	"\u9325",
	"\u9326",
	"\u9327",
	"\u9328",
	"\u9329",
	"\u932A",
	"\u932B",
	"\u932D",
	"\u932E",
	"\u932F",
	"\u9332",
	"\u9333",
	"\u9336",
	"\u9338",
	"\u933D",
	"\u9340",
	"\u9341",
	"\u9342",
	"\u9343",
	"\u9344",
	"\u9346",
	"\u9347",
	"\u9348",
	"\u9349",
	"\u934A",
	"\u934B",
	"\u934D",
	"\u934F",
	"\u9350",
	"\u9351",
	"\u9352",
	"\u9354",
	"\u9356",
	"\u9358",
	"\u935A",
	"\u935B",
	"\u935C",
	"\u935D",
	"\u935F",
	"\u9360",
	"\u9361",
	"\u9363",
	"\u9364",
	"\u9365",
	"\u9366",
	"\u9367",
	"\u9368",
	"\u9369",
	"\u936C",
	"\u936D",
	"\u936E",
	"\u936F",
	"\u9370",
	"\u9371",
	"\u9374",
	"\u9375",
	"\u9376",
	"\u937A",
	"\u937C",
	"\u937E",
	"\u9382",
	"\u9384",
	"\u9385",
	"\u9387",
	"\u9388",
	"\u9389",
	"\u938A",
	"\u938B",
	"\u938C",
	"\u938D",
	"\u9391",
	"\u9392",
	"\u9393",
	"\u9394",
	"\u9395",
	"\u9396",
	"\u9397",
	"\u9398",
	"\u9399",
	"\u939A",
	"\u939B",
	"\u939D",
	"\u939E",
	"\u93A1",
	"\u93A2",
	"\u93A3",
	"\u93A6",
	"\u93A7",
	"\u93A9",
	"\u93AA",
	"\u93AC",
	"\u93AE",
	"\u93AF",
	"\u93B0",
	"\u93B2",
	"\u93B3",
	"\u93B5",
	"\u93B6",
	"\u93B7",
	"\u93B8",
	"\u93BF",
	"\u93C1",
	"\u93C2",
	"\u93C3",
	"\u93C6",
	"\u93C7",
	"\u93C8",
	"\u93C9",
	"\u93CC",
	"\u93CD",
	"\u93CF",
	"\u93D0",
	"\u93D1",
	"\u93D2",
	"\u93D3",
	"\u93D4",
	"\u93D5",
	"\u93D7",
	"\u93D8",
	"\u93D9",
	"\u93DA",
	"\u93DC",
	"\u93DD",
	"\u93DE",
	"\u93DF",
	"\u93E1",
	"\u93E2",
	"\u93E4",
	"\u93E5",
	"\u93E6",
	"\u93E8",
	"\u93E9",
	"\u93F0",
	"\u93F5",
	"\u93F7",
	"\u93F8",
	"\u93F9",
	"\u93FA",
	"\u93FB",
	"\u93FD",
	"\u93FE",
	"\u9400",
	"\u9401",
	"\u9403",
	"\u9404",
	"\u9407",
	"\u9408",
	"\u9409",
	"\u940A",
	"\u940B",
	"\u940D",
	"\u940E",
	"\u940F",
	"\u9410",
	"\u9412",
	"\u9413",
	"\u9414",
	"\u9415",
	"\u9416",
	"\u9418",
	"\u9419",
	"\u941A",
	"\u941D",
	"\u9420",
	"\u9424",
	"\u9425",
	"\u9426",
	"\u9427",
	"\u9428",
	"\u9429",
	"\u942A",
	"\u942B",
	"\u942C",
	"\u942E",
	"\u942F",
	"\u9432",
	"\u9433",
	"\u9434",
	"\u9435",
	"\u9436",
	"\u9438",
	"\u9439",
	"\u943A",
	"\u943C",
	"\u943D",
	"\u943F",
	"\u9440",
	"\u9444",
	"\u9447",
	"\u9448",
	"\u9449",
	"\u944A",
	"\u944B",
	"\u944C",
	"\u944F",
	"\u9450",
	"\u9451",
	"\u9452",
	"\u9454",
	"\u9455",
	"\u9456",
	"\u9458",
	"\u9459",
	"\u945B",
	"\u945E",
	"\u9460",
	"\u9461",
	"\u9462",
	"\u9463",
	"\u9465",
	"\u9468",
	"\u946A",
	"\u946D",
	"\u946E",
	"\u946F",
	"\u9470",
	"\u9471",
	"\u9472",
	"\u9474",
	"\u9477",
	"\u9478",
	"\u9479",
	"\u947C",
	"\u947D",
	"\u947E",
	"\u947F",
	"\u9480",
	"\u9481",
	"\u9482",
	"\u9483",
	"\u9577",
	"\u9580",
	"\u9582",
	"\u9583",
	"\u9584",
	"\u9585",
	"\u9586",
	"\u9588",
	"\u9589",
	"\u958B",
	"\u958C",
	"\u958D",
	"\u958E",
	"\u958F",
	"\u9590",
	"\u9591",
	"\u9592",
	"\u9593",
	"\u9594",
	"\u9595",
	"\u9597",
	"\u9598",
	"\u959B",
	"\u959C",
	"\u959D",
	"\u959E",
	"\u959F",
	"\u95A1",
	"\u95A3",
	"\u95A4",
	"\u95A5",
	"\u95A6",
	"\u95A7",
	"\u95A8",
	"\u95A9",
	"\u95AB",
	"\u95AC",
	"\u95AD",
	"\u95AF",
	"\u95B1",
	"\u95B2",
	"\u95B5",
	"\u95B6",
	"\u95B7",
	"\u95B9",
	"\u95BB",
	"\u95BC",
	"\u95BD",
	"\u95BE",
	"\u95BF",
	"\u95C3",
	"\u95C4",
	"\u95C6",
	"\u95C7",
	"\u95C8",
	"\u95C9",
	"\u95CA",
	"\u95CB",
	"\u95CC",
	"\u95CD",
	"\u95D0",
	"\u95D1",
	"\u95D2",
	"\u95D3",
	"\u95D4",
	"\u95D5",
	"\u95D6",
	"\u95DA",
	"\u95DB",
	"\u95DC",
	"\u95DE",
	"\u95DF",
	"\u95E0",
	"\u95E1",
	"\u95E2",
	"\u95E4",
	"\u95E5",
	"\u962A",
	"\u9658",
	"\u965D",
	"\u9663",
	"\u9670",
	"\u9673",
	"\u9678",
	"\u967D",
	"\u967F",
	"\u9689",
	"\u968A",
	"\u968E",
	"\u9691",
	"\u9695",
	"\u9696",
	"\u969B",
	"\u96A4",
	"\u96A8",
	"\u96AA",
	"\u96AB",
	"\u96AE",
	"\u96AF",
	"\u96B1",
	"\u96B2",
	"\u96B4",
	"\u96B8",
	"\u96BB",
	"\u96CB",
	"\u96D6",
	"\u96D9",
	"\u96DB",
	"\u96DC",
	"\u96DE",
	"\u96E2",
	"\u96E3",
	"\u96F2",
	"\u96FB",
	"\u9722",
	"\u9723",
	"\u9727",
	"\u973C",
	"\u973D",
	"\u9742",
	"\u9744",
	"\u9745",
	"\u9746",
	"\u9748",
	"\u9749",
	"\u975A",
	"\u975C",
	"\u9766",
	"\u9767",
	"\u9768",
	"\u9780",
	"\u978F",
	"\u979D",
	"\u97A6",
	"\u97B8",
	"\u97BB",
	"\u97BC",
	"\u97BD",
	"\u97BE",
	"\u97C1",
	"\u97C3",
	"\u97C6",
	"\u97C7",
	"\u97C9",
	"\u97CA",
	"\u97CB",
	"\u97CC",
	"\u97CD",
	"\u97CF",
	"\u97D0",
	"\u97D2",
	"\u97D3",
	"\u97D4",
	"\u97D7",
	"\u97D8",
	"\u97D9",
	"\u97DA",
	"\u97DB",
	"\u97DC",
	"\u97DD",
	"\u97DE",
	"\u97E0",
	"\u97E1",
	"\u97E2",
	"\u97E3",
	"\u97FB",
	"\u97FF",
	"\u9801",
	"\u9802",
	"\u9803",
	"\u9804",
	"\u9805",
	"\u9806",
	"\u9807",
	"\u9808",
	"\u980A",
	"\u980C",
	"\u980D",
	"\u980E",
	"\u980F",
	"\u9810",
	"\u9811",
	"\u9812",
	"\u9813",
	"\u9814",
	"\u9815",
	"\u9816",
	"\u9817",
	"\u9818",
	"\u981B",
	"\u981C",
	"\u981E",
	"\u981F",
	"\u9820",
	"\u9821",
	"\u9822",
	"\u9824",
	"\u9826",
	"\u9829",
	"\u982A",
	"\u982B",
	"\u982D",
	"\u982E",
	"\u982F",
	"\u9830",
	"\u9832",
	"\u9834",
	"\u9835",
	"\u9837",
	"\u9838",
	"\u9839",
	"\u983B",
	"\u983D",
	"\u9840",
	"\u9841",
	"\u9843",
	"\u9844",
	"\u9845",
	"\u9846",
	"\u9847",
	"\u9849",
	"\u984A",
	"\u984B",
	"\u984C",
	"\u984D",
	"\u984E",
	"\u984F",
	"\u9850",
	"\u9851",
	"\u9852",
	"\u9853",
	"\u9854",
	"\u9856",
	"\u9857",
	"\u9858",
	"\u9859",
	"\u985B",
	"\u985C",
	"\u985D",
	"\u985E",
	"\u9860",
	"\u9862",
	"\u9863",
	"\u9864",
	"\u9865",
	"\u9866",
	"\u9867",
	"\u9869",
	"\u986A",
	"\u986B",
	"\u986C",
	"\u986E",
	"\u986F",
	"\u9870",
	"\u9871",
	"\u9873",
	"\u9874",
	"\u98A8",
	"\u98A9",
	"\u98AC",
	"\u98AD",
	"\u98AE",
	"\u98AF",
	"\u98B0",
	"\u98B1",
	"\u98B2",
	"\u98B3",
	"\u98B4",
	"\u98B6",
	"\u98B7",
	"\u98B8",
	"\u98B9",
	"\u98BA",
	"\u98BB",
	"\u98BC",
	"\u98BD",
	"\u98BE",
	"\u98BF",
	"\u98C0",
	"\u98C1",
	"\u98C2",
	"\u98C4",
	"\u98C6",
	"\u98C7",
	"\u98C8",
	"\u98C9",
	"\u98CB",
	"\u98CD",
	"\u98DB",
	"\u98E0",
	"\u98E2",
	"\u98E3",
	"\u98E4",
	"\u98E5",
	"\u98E6",
	"\u98E9",
	"\u98EA",
	"\u98EB",
	"\u98ED",
	"\u98EF",
	"\u98F0",
	"\u98F2",
	"\u98F4",
	"\u98F5",
	"\u98F6",
	"\u98F7",
	"\u98FC",
	"\u98FD",
	"\u98FE",
	"\u98FF",
	"\u9900",
	"\u9902",
	"\u9903",
	"\u9904",
	"\u9905",
	"\u9909",
	"\u990A",
	"\u990C",
	"\u990E",
	"\u990F",
	"\u9911",
	"\u9912",
	"\u9913",
	"\u9914",
	"\u9915",
	"\u9916",
	"\u9917",
	"\u9918",
	"\u991A",
	"\u991B",
	"\u991C",
	"\u991E",
	"\u991F",
	"\u9921",
	"\u9922",
	"\u9923",
	"\u9924",
	"\u9926",
	"\u9927",
	"\u9928",
	"\u9929",
	"\u992A",
	"\u992B",
	"\u992C",
	"\u992D",
	"\u992F",
	"\u9930",
	"\u9931",
	"\u9932",
	"\u9933",
	"\u9934",
	"\u9935",
	"\u9936",
	"\u9937",
	"\u9938",
	"\u9939",
	"\u993A",
	"\u993C",
	"\u993E",
	"\u993F",
	"\u9940",
	"\u9941",
	"\u9943",
	"\u9945",
	"\u9946",
	"\u9947",
	"\u9948",
	"\u9949",
	"\u994A",
	"\u994B",
	"\u994C",
	"\u994E",
	"\u9950",
	"\u9951",
	"\u9952",
	"\u9957",
	"\u9958",
	"\u9959",
	"\u995B",
	"\u995C",
	"\u995E",
	"\u995F",
	"\u9960",
	"\u9961",
	"\u9962",
	"\u99A9",
	"\u99AC",
	"\u99AD",
	"\u99AE",
	"\u99AF",
	"\u99B1",
	"\u99B2",
	"\u99B3",
	"\u99B4",
	"\u99B5",
	"\u99B9",
	"\u99BA",
	"\u99BC",
	"\u99BD",
	"\u99C1",
	"\u99C2",
	"\u99C3",
	"\u99C9",
	"\u99CA",
	"\u99CD",
	"\u99CE",
	"\u99CF",
	"\u99D0",
	"\u99D1",
	"\u99D2",
	"\u99D3",
	"\u99D4",
	"\u99D5",
	"\u99D7",
	"\u99D8",
	"\u99D9",
	"\u99DA",
	"\u99DB",
	"\u99DC",
	"\u99DD",
	"\u99DE",
	"\u99DF",
	"\u99E1",
	"\u99E2",
	"\u99E3",
	"\u99E4",
	"\u99E5",
	"\u99E7",
	"\u99E9",
	"\u99EA",
	"\u99EB",
	"\u99EC",
	"\u99ED",
	"\u99EE",
	"\u99F0",
	"\u99F1",
	"\u99F4",
	"\u99F6",
	"\u99F7",
	"\u99F8",
	"\u99F9",
	"\u99FA",
	"\u99FB",
	"\u99FC",
	"\u99FD",
	"\u99FE",
	"\u99FF",
	"\u9A00",
	"\u9A01",
	"\u9A02",
	"\u9A03",
	"\u9A04",
	"\u9A05",
	"\u9A07",
	"\u9A09",
	"\u9A0A",
	"\u9A0B",
	"\u9A0C",
	"\u9A0D",
	"\u9A0E",
	"\u9A0F",
	"\u9A11",
	"\u9A14",
	"\u9A15",
	"\u9A16",
	"\u9A17",
	"\u9A19",
	"\u9A1A",
	"\u9A1C",
	"\u9A1D",
	"\u9A1E",
	"\u9A1F",
	"\u9A20",
	"\u9A22",
	"\u9A23",
	"\u9A24",
	"\u9A25",
	"\u9A27",
	"\u9A29",
	"\u9A2A",
	"\u9A2B",
	"\u9A2C",
	"\u9A2D",
	"\u9A2E",
	"\u9A2F",
	"\u9A30",
	"\u9A31",
	"\u9A32",
	"\u9A33",
	"\u9A34",
	"\u9A35",
	"\u9A36",
	"\u9A37",
	"\u9A38",
	"\u9A39",
	"\u9A3A",
	"\u9A3B",
	"\u9A3C",
	"\u9A3D",
	"\u9A3E",
	"\u9A40",
	"\u9A41",
	"\u9A42",
	"\u9A43",
	"\u9A44",
	"\u9A45",
	"\u9A48",
	"\u9A49",
	"\u9A4A",
	"\u9A4B",
	"\u9A4C",
	"\u9A4D",
	"\u9A4E",
	"\u9A4F",
	"\u9A50",
	"\u9A52",
	"\u9A53",
	"\u9A54",
	"\u9A55",
	"\u9A56",
	"\u9A57",
	"\u9A59",
	"\u9A5A",
	"\u9A5B",
	"\u9A5E",
	"\u9A5F",
	"\u9A60",
	"\u9A61",
	"\u9A62",
	"\u9A64",
	"\u9A65",
	"\u9A66",
	"\u9A68",
	"\u9A69",
	"\u9A6A",
	"\u9A6B",
	"\u9AAF",
	"\u9ACF",
	"\u9AD0",
	"\u9AD2",
	"\u9AD4",
	"\u9AD5",
	"\u9AD6",
	"\u9AEE",
	"\u9B06",
	"\u9B0D",
	"\u9B16",
	"\u9B17",
	"\u9B1A",
	"\u9B1C",
	"\u9B1D",
	"\u9B1E",
	"\u9B20",
	"\u9B21",
	"\u9B22",
	"\u9B25",
	"\u9B27",
	"\u9B29",
	"\u9B2E",
	"\u9B31",
	"\u9B39",
	"\u9B3A",
	"\u9B4E",
	"\u9B57",
	"\u9B58",
	"\u9B5A",
	"\u9B5B",
	"\u9B5C",
	"\u9B5D",
	"\u9B5F",
	"\u9B60",
	"\u9B61",
	"\u9B62",
	"\u9B63",
	"\u9B65",
	"\u9B66",
	"\u9B67",
	"\u9B68",
	"\u9B6A",
	"\u9B6B",
	"\u9B6C",
	"\u9B6D",
	"\u9B6E",
	"\u9B6F",
	"\u9B71",
	"\u9B74",
	"\u9B75",
	"\u9B76",
	"\u9B77",
	"\u9B7A",
	"\u9B7B",
	"\u9B7C",
	"\u9B7D",
	"\u9B7E",
	"\u9B80",
	"\u9B81",
	"\u9B82",
	"\u9B83",
	"\u9B84",
	"\u9B85",
	"\u9B86",
	"\u9B87",
	"\u9B88",
	"\u9B8A",
	"\u9B8B",
	"\u9B8C",
	"\u9B8D",
	"\u9B8E",
	"\u9B8F",
	"\u9B90",
	"\u9B91",
	"\u9B92",
	"\u9B93",
	"\u9B97",
	"\u9B98",
	"\u9B9A",
	"\u9B9B",
	"\u9B9C",
	"\u9B9D",
	"\u9B9E",
	"\u9B9F",
	"\u9BA0",
	"\u9BA1",
	"\u9BA3",
	"\u9BA4",
	"\u9BA5",
	"\u9BA6",
	"\u9BA7",
	"\u9BA8",
	"\u9BAA",
	"\u9BAB",
	"\u9BAC",
	"\u9BAD",
	"\u9BAE",
	"\u9BAF",
	"\u9BB0",
	"\u9BB3",
	"\u9BB5",
	"\u9BB6",
	"\u9BB7",
	"\u9BB8",
	"\u9BB9",
	"\u9BBA",
	"\u9BBB",
	"\u9BBF",
	"\u9BC0",
	"\u9BC1",
	"\u9BC4",
	"\u9BC5",
	"\u9BC6",
	"\u9BC7",
	"\u9BC8",
	"\u9BC9",
	"\u9BCA",
	"\u9BCC",
	"\u9BD2",
	"\u9BD4",
	"\u9BD5",
	"\u9BD6",
	"\u9BD7",
	"\u9BDA",
	"\u9BDB",
	"\u9BDD",
	"\u9BDE",
	"\u9BE0",
	"\u9BE1",
	"\u9BE2",
	"\u9BE4",
	"\u9BE5",
	"\u9BE6",
	"\u9BE7",
	"\u9BE8",
	"\u9BE9",
	"\u9BEA",
	"\u9BEB",
	"\u9BEC",
	"\u9BEE",
	"\u9BF0",
	"\u9BF1",
	"\u9BF4",
	"\u9BF6",
	"\u9BF7",
	"\u9BF8",
	"\u9BF9",
	"\u9BFB",
	"\u9BFC",
	"\u9BFD",
	"\u9BFE",
	"\u9BFF",
	"\u9C01",
	"\u9C02",
	"\u9C03",
	"\u9C05",
	"\u9C06",
	"\u9C07",
	"\u9C08",
	"\u9C09",
	"\u9C0A",
	"\u9C0B",
	"\u9C0C",
	"\u9C0D",
	"\u9C0F",
	"\u9C10",
	"\u9C11",
	"\u9C12",
	"\u9C13",
	"\u9C15",
	"\u9C17",
	"\u9C1B",
	"\u9C1C",
	"\u9C1D",
	"\u9C1F",
	"\u9C20",
	"\u9C21",
	"\u9C23",
	"\u9C24",
	"\u9C25",
	"\u9C26",
	"\u9C27",
	"\u9C28",
	"\u9C29",
	"\u9C2B",
	"\u9C2C",
	"\u9C2D",
	"\u9C2E",
	"\u9C2F",
	"\u9C31",
	"\u9C32",
	"\u9C33",
	"\u9C34",
	"\u9C35",
	"\u9C36",
	"\u9C37",
	"\u9C39",
	"\u9C3A",
	"\u9C3B",
	"\u9C3C",
	"\u9C3D",
	"\u9C3E",
	"\u9C3F",
	"\u9C40",
	"\u9C41",
	"\u9C42",
	"\u9C43",
	"\u9C44",
	"\u9C45",
	"\u9C46",
	"\u9C47",
	"\u9C48",
	"\u9C49",
	"\u9C4A",
	"\u9C4B",
	"\u9C4C",
	"\u9C4D",
	"\u9C4E",
	"\u9C4F",
	"\u9C50",
	"\u9C51",
	"\u9C52",
	"\u9C53",
	"\u9C54",
	"\u9C55",
	"\u9C56",
	"\u9C57",
	"\u9C58",
	"\u9C5A",
	"\u9C5D",
	"\u9C5E",
	"\u9C5F",
	"\u9C60",
	"\u9C62",
	"\u9C63",
	"\u9C64",
	"\u9C65",
	"\u9C66",
	"\u9C67",
	"\u9C68",
	"\u9C6C",
	"\u9C6D",
	"\u9C6E",
	"\u9C6F",
	"\u9C72",
	"\u9C74",
	"\u9C75",
	"\u9C77",
	"\u9C78",
	"\u9C79",
	"\u9C7A",
	"\u9C7B",
	"\u9CE5",
	"\u9CE6",
	"\u9CE7",
	"\u9CE9",
	"\u9CEC",
	"\u9CED",
	"\u9CF1",
	"\u9CF2",
	"\u9CF3",
	"\u9CF4",
	"\u9CF6",
	"\u9CF7",
	"\u9CF8",
	"\u9CFA",
	"\u9CFB",
	"\u9CFC",
	"\u9CFD",
	"\u9CFE",
	"\u9CFF",
	"\u9D00",
	"\u9D01",
	"\u9D02",
	"\u9D03",
	"\u9D05",
	"\u9D06",
	"\u9D07",
	"\u9D09",
	"\u9D0D",
	"\u9D10",
	"\u9D12",
	"\u9D13",
	"\u9D14",
	"\u9D15",
	"\u9D17",
	"\u9D18",
	"\u9D19",
	"\u9D1A",
	"\u9D1B",
	"\u9D1C",
	"\u9D1D",
	"\u9D1E",
	"\u9D1F",
	"\u9D20",
	"\u9D21",
	"\u9D22",
	"\u9D23",
	"\u9D25",
	"\u9D26",
	"\u9D28",
	"\u9D29",
	"\u9D2E",
	"\u9D2F",
	"\u9D30",
	"\u9D31",
	"\u9D32",
	"\u9D33",
	"\u9D34",
	"\u9D36",
	"\u9D37",
	"\u9D38",
	"\u9D39",
	"\u9D3A",
	"\u9D3B",
	"\u9D3D",
	"\u9D3E",
	"\u9D3F",
	"\u9D40",
	"\u9D41",
	"\u9D42",
	"\u9D43",
	"\u9D44",
	"\u9D45",
	"\u9D4A",
	"\u9D4B",
	"\u9D4C",
	"\u9D4E",
	"\u9D4F",
	"\u9D50",
	"\u9D51",
	"\u9D52",
	"\u9D53",
	"\u9D54",
	"\u9D55",
	"\u9D56",
	"\u9D57",
	"\u9D59",
	"\u9D5A",
	"\u9D5B",
	"\u9D5C",
	"\u9D5D",
	"\u9D5F",
	"\u9D60",
	"\u9D61",
	"\u9D67",
	"\u9D69",
	"\u9D6A",
	"\u9D6B",
	"\u9D6C",
	"\u9D6E",
	"\u9D6F",
	"\u9D70",
	"\u9D71",
	"\u9D72",
	"\u9D73",
	"\u9D74",
	"\u9D75",
	"\u9D76",
	"\u9D77",
	"\u9D78",
	"\u9D79",
	"\u9D7B",
	"\u9D7C",
	"\u9D7D",
	"\u9D7E",
	"\u9D80",
	"\u9D82",
	"\u9D83",
	"\u9D84",
	"\u9D85",
	"\u9D86",
	"\u9D87",
	"\u9D89",
	"\u9D8A",
	"\u9D8B",
	"\u9D8C",
	"\u9D92",
	"\u9D93",
	"\u9D94",
	"\u9D95",
	"\u9D96",
	"\u9D97",
	"\u9D98",
	"\u9D99",
	"\u9D9A",
	"\u9D9B",
	"\u9D9D",
	"\u9D9E",
	"\u9D9F",
	"\u9DA0",
	"\u9DA1",
	"\u9DA2",
	"\u9DA3",
	"\u9DA4",
	"\u9DA5",
	"\u9DA6",
	"\u9DA8",
	"\u9DA9",
	"\u9DAA",
	"\u9DAC",
	"\u9DAD",
	"\u9DAF",
	"\u9DB0",
	"\u9DB1",
	"\u9DB2",
	"\u9DB4",
	"\u9DB5",
	"\u9DB6",
	"\u9DB7",
	"\u9DB9",
	"\u9DBA",
	"\u9DBB",
	"\u9DBC",
	"\u9DBD",
	"\u9DC0",
	"\u9DC1",
	"\u9DC2",
	"\u9DC3",
	"\u9DC4",
	"\u9DC5",
	"\u9DC7",
	"\u9DC8",
	"\u9DC9",
	"\u9DCA",
	"\u9DCB",
	"\u9DCE",
	"\u9DCF",
	"\u9DD0",
	"\u9DD1",
	"\u9DD2",
	"\u9DD3",
	"\u9DD4",
	"\u9DD5",
	"\u9DD6",
	"\u9DD7",
	"\u9DD9",
	"\u9DDA",
	"\u9DDB",
	"\u9DDC",
	"\u9DDE",
	"\u9DDF",
	"\u9DE2",
	"\u9DE3",
	"\u9DE4",
	"\u9DE5",
	"\u9DE6",
	"\u9DE7",
	"\u9DE8",
	"\u9DE9",
	"\u9DEB",
	"\u9DED",
	"\u9DEE",
	"\u9DEF",
	"\u9DF0",
	"\u9DF2",
	"\u9DF3",
	"\u9DF5",
	"\u9DF6",
	"\u9DF7",
	"\u9DF8",
	"\u9DF9",
	"\u9DFA",
	"\u9DFD",
	"\u9DFE",
	"\u9DFF",
	"\u9E00",
	"\u9E01",
	"\u9E02",
	"\u9E03",
	"\u9E04",
	"\u9E05",
	"\u9E06",
	"\u9E07",
	"\u9E09",
	"\u9E0A",
	"\u9E0B",
	"\u9E0C",
	"\u9E0E",
	"\u9E0F",
	"\u9E10",
	"\u9E11",
	"\u9E12",
	"\u9E13",
	"\u9E15",
	"\u9E16",
	"\u9E17",
	"\u9E18",
	"\u9E19",
	"\u9E1A",
	"\u9E1B",
	"\u9E1C",
	"\u9E1D",
	"\u9E1E",
	"\u9E75",
	"\u9E79",
	"\u9E7A",
	"\u9E7C",
	"\u9E7D",
	"\u9E97",
	"\u9EA1",
	"\u9EA5",
	"\u9EA7",
	"\u9EA8",
	"\u9EA9",
	"\u9EAC",
	"\u9EAE",
	"\u9EAF",
	"\u9EB0",
	"\u9EB1",
	"\u9EB2",
	"\u9EB3",
	"\u9EB4",
	"\u9EB5",
	"\u9EB7",
	"\u9EBC",
	"\u9EBD",
	"\u9EC2",
	"\u9EC3",
	"\u9ECC",
	"\u9EDE",
	"\u9EE8",
	"\u9EF2",
	"\u9EF4",
	"\u9EF6",
	"\u9EF7",
	"\u9EF8",
	"\u9EFD",
	"\u9EFF",
	"\u9F00",
	"\u9F01",
	"\u9F04",
	"\u9F05",
	"\u9F06",
	"\u9F08",
	"\u9F09",
	"\u9F0A",
	"\u9F15",
	"\u9F1A",
	"\u9F32",
	"\u9F34",
	"\u9F48",
	"\u9F4A",
	"\u9F4B",
	"\u9F4C",
	"\u9F4D",
	"\u9F4E",
	"\u9F4F",
	"\u9F52",
	"\u9F54",
	"\u9F55",
	"\u9F56",
	"\u9F57",
	"\u9F58",
	"\u9F59",
	"\u9F5A",
	"\u9F5C",
	"\u9F5D",
	"\u9F5E",
	"\u9F5F",
	"\u9F60",
	"\u9F61",
	"\u9F63",
	"\u9F64",
	"\u9F65",
	"\u9F66",
	"\u9F67",
	"\u9F69",
	"\u9F6A",
	"\u9F6C",
	"\u9F6D",
	"\u9F6E",
	"\u9F6F",
	"\u9F70",
	"\u9F71",
	"\u9F72",
	"\u9F73",
	"\u9F74",
	"\u9F75",
	"\u9F76",
	"\u9F77",
	"\u9F78",
	"\u9F79",
	"\u9F7A",
	"\u9F7B",
	"\u9F7C",
	"\u9F7D",
	"\u9F7E",
	"\u9F8D",
	"\u9F8E",
	"\u9F8F",
	"\u9F90",
	"\u9F91",
	"\u9F93",
	"\u9F94",
	"\u9F95",
	"\u9F96",
	"\u9F9C",
	"\u9F9D",
	"\u9F9E",
	"\u9FA5",
	"\u9FAD",
	"\u9FAF",
	"\u9FB2",
	"\u9FBB",
	"\u9FBD",
	"\u9FC1",
	"\u9FD0",
	"\u9FD3",
	"\u9FE0",
	"\u9FF3"
];// source : https://www.unicode.org/charts/unihan.html
// array of characters that are only used in simplified chinese

Roo.languagedetect.zh_CN = [
	"\u3437",
	"\u3439",
	"\u343D",
	"\u3447",
	"\u3448",
	"\u3454",
	"\u3469",
	"\u347A",
	"\u34E5",
	"\u3509",
	"\u358A",
	"\u359E",
	"\u360E",
	"\u36AF",
	"\u36C0",
	"\u36DF",
	"\u36E0",
	"\u36E3",
	"\u36E4",
	"\u36FF",
	"\u3766",
	"\u37C6",
	"\u37DC",
	"\u37E5",
	"\u384E",
	"\u3916",
	"\u3918",
	"\u392D",
	"\u393D",
	"\u396A",
	"\u3988",
	"\u39CF",
	"\u39D0",
	"\u39D1",
	"\u39DB",
	"\u39DF",
	"\u39F0",
	"\u3A2B",
	"\u3B4E",
	"\u3B4F",
	"\u3B63",
	"\u3B64",
	"\u3B74",
	"\u3BA0",
	"\u3C69",
	"\u3C6E",
	"\u3CBF",
	"\u3CD4",
	"\u3CD5",
	"\u3CE0",
	"\u3CE1",
	"\u3CE2",
	"\u3D0B",
	"\u3D89",
	"\u3DB6",
	"\u3DBD",
	"\u3DEA",
	"\u3E8D",
	"\u3EC5",
	"\u3ECF",
	"\u3ED8",
	"\u3EEA",
	"\u3FA1",
	"\u4025",
	"\u4056",
	"\u40B5",
	"\u40C5",
	"\u4149",
	"\u415F",
	"\u416A",
	"\u41DA",
	"\u41F2",
	"\u4264",
	"\u4336",
	"\u4337",
	"\u4338",
	"\u4339",
	"\u433A",
	"\u433B",
	"\u433C",
	"\u433D",
	"\u433E",
	"\u433F",
	"\u4340",
	"\u4341",
	"\u43AC",
	"\u43DD",
	"\u442A",
	"\u44D3",
	"\u44D5",
	"\u44D6",
	"\u44E8",
	"\u45BC",
	"\u45D6",
	"\u461B",
	"\u461E",
	"\u464A",
	"\u464C",
	"\u4653",
	"\u46D3",
	"\u4723",
	"\u4724",
	"\u4725",
	"\u4727",
	"\u4729",
	"\u4759",
	"\u478C",
	"\u478D",
	"\u478E",
	"\u4790",
	"\u47E2",
	"\u4880",
	"\u4881",
	"\u4882",
	"\u497A",
	"\u497D",
	"\u497E",
	"\u497F",
	"\u4980",
	"\u4981",
	"\u4982",
	"\u4983",
	"\u4985",
	"\u4986",
	"\u49B6",
	"\u49B7",
	"\u4A44",
	"\u4B6A",
	"\u4BC3",
	"\u4BC4",
	"\u4BC5",
	"\u4C9D",
	"\u4C9E",
	"\u4C9F",
	"\u4CA0",
	"\u4CA1",
	"\u4CA2",
	"\u4CA3",
	"\u4CA4",
	"\u4D13",
	"\u4D14",
	"\u4D15",
	"\u4D16",
	"\u4D17",
	"\u4D18",
	"\u4D19",
	"\u4DAE",
	"\u4E0E",
	"\u4E13",
	"\u4E1A",
	"\u4E1B",
	"\u4E1C",
	"\u4E1D",
	"\u4E25",
	"\u4E27",
	"\u4E34",
	"\u4E3A",
	"\u4E3D",
	"\u4E3E",
	"\u4E4C",
	"\u4E60",
	"\u4E61",
	"\u4E66",
	"\u4E70",
	"\u4E9A",
	"\u4EA7",
	"\u4EA9",
	"\u4EB2",
	"\u4EB5",
	"\u4EB8",
	"\u4EBF",
	"\u4ED1",
	"\u4ED3",
	"\u4EEC",
	"\u4F1B",
	"\u4F1E",
	"\u4F1F",
	"\u4F20",
	"\u4F21",
	"\u4F23",
	"\u4F25",
	"\u4F26",
	"\u4F27",
	"\u4F2A",
	"\u4F2B",
	"\u4F65",
	"\u4FA3",
	"\u4FA5",
	"\u4FA6",
	"\u4FA7",
	"\u4FA8",
	"\u4FAA",
	"\u4FAC",
	"\u4FE3",
	"\u4FE8",
	"\u4FE9",
	"\u4FEA",
	"\u4FEB",
	"\u4FED",
	"\u503A",
	"\u503E",
	"\u507E",
	"\u507F",
	"\u50A5",
	"\u50A7",
	"\u50A8",
	"\u50A9",
	"\u5156",
	"\u5170",
	"\u5173",
	"\u5174",
	"\u5179",
	"\u517B",
	"\u517D",
	"\u5181",
	"\u5188",
	"\u5199",
	"\u519B",
	"\u519C",
	"\u51AF",
	"\u51B3",
	"\u51BB",
	"\u51C0",
	"\u51DB",
	"\u51EB",
	"\u51EF",
	"\u51FB",
	"\u51FF",
	"\u520D",
	"\u5219",
	"\u521A",
	"\u521B",
	"\u522C",
	"\u522D",
	"\u523D",
	"\u523F",
	"\u5240",
	"\u5242",
	"\u5250",
	"\u5251",
	"\u5265",
	"\u52A1",
	"\u52A2",
	"\u52B2",
	"\u52CB",
	"\u52DA",
	"\u5326",
	"\u532E",
	"\u534E",
	"\u534F",
	"\u5356",
	"\u5362",
	"\u5364",
	"\u536B",
	"\u5385",
	"\u538C",
	"\u538D",
	"\u5390",
	"\u5395",
	"\u53A2",
	"\u53A3",
	"\u53BF",
	"\u53C1",
	"\u53C6",
	"\u53C7",
	"\u53D1",
	"\u53D8",
	"\u53F9",
	"\u53FD",
	"\u5415",
	"\u5417",
	"\u5423",
	"\u5428",
	"\u542F",
	"\u5450",
	"\u5452",
	"\u5453",
	"\u5455",
	"\u5456",
	"\u5457",
	"\u5458",
	"\u5459",
	"\u545B",
	"\u545C",
	"\u5499",
	"\u549B",
	"\u549D",
	"\u54D1",
	"\u54D2",
	"\u54D3",
	"\u54D4",
	"\u54D5",
	"\u54D7",
	"\u54D9",
	"\u54DC",
	"\u54DD",
	"\u54DF",
	"\u551B",
	"\u551D",
	"\u5520",
	"\u5521",
	"\u5522",
	"\u5524",
	"\u5567",
	"\u556C",
	"\u556D",
	"\u556E",
	"\u556F",
	"\u5574",
	"\u5578",
	"\u55B7",
	"\u55BE",
	"\u55EB",
	"\u55F3",
	"\u5618",
	"\u5624",
	"\u565C",
	"\u56A3",
	"\u56E2",
	"\u56F1",
	"\u56F4",
	"\u56F5",
	"\u56FD",
	"\u5706",
	"\u5723",
	"\u5739",
	"\u573A",
	"\u575A",
	"\u575C",
	"\u575D",
	"\u575E",
	"\u575F",
	"\u5760",
	"\u5784",
	"\u5785",
	"\u5786",
	"\u5792",
	"\u57A6",
	"\u57A9",
	"\u57AB",
	"\u57AD",
	"\u57AF",
	"\u57B1",
	"\u57B2",
	"\u57B4",
	"\u57D8",
	"\u57D9",
	"\u57DA",
	"\u57EF",
	"\u5811",
	"\u5846",
	"\u5899",
	"\u58F6",
	"\u58F8",
	"\u5904",
	"\u5907",
	"\u5939",
	"\u593A",
	"\u5941",
	"\u5942",
	"\u594B",
	"\u5956",
	"\u5965",
	"\u5968",
	"\u5986",
	"\u5987",
	"\u5988",
	"\u59A9",
	"\u59AA",
	"\u59AB",
	"\u5A05",
	"\u5A06",
	"\u5A32",
	"\u5A34",
	"\u5A73",
	"\u5A74",
	"\u5A75",
	"\u5A76",
	"\u5AAA",
	"\u5AAD",
	"\u5AD2",
	"\u5AD4",
	"\u5AF1",
	"\u5B37",
	"\u5B66",
	"\u5BA0",
	"\u5BA1",
	"\u5BAA",
	"\u5BAB",
	"\u5BBD",
	"\u5BDD",
	"\u5BFB",
	"\u5BFC",
	"\u5C06",
	"\u5C18",
	"\u5C27",
	"\u5C34",
	"\u5C42",
	"\u5C43",
	"\u5C49",
	"\u5C66",
	"\u5C7F",
	"\u5C82",
	"\u5C96",
	"\u5C97",
	"\u5C98",
	"\u5C99",
	"\u5C9A",
	"\u5C9B",
	"\u5CAD",
	"\u5CBD",
	"\u5CBF",
	"\u5CC3",
	"\u5CC4",
	"\u5CE1",
	"\u5CE3",
	"\u5CE4",
	"\u5CE5",
	"\u5D02",
	"\u5D03",
	"\u5D04",
	"\u5D2D",
	"\u5D58",
	"\u5D5A",
	"\u5D5D",
	"\u5DC5",
	"\u5DE9",
	"\u5DEF",
	"\u5E01",
	"\u5E05",
	"\u5E0F",
	"\u5E10",
	"\u5E1C",
	"\u5E26",
	"\u5E27",
	"\u5E31",
	"\u5E3B",
	"\u5E3C",
	"\u5E86",
	"\u5E91",
	"\u5E93",
	"\u5E9E",
	"\u5E9F",
	"\u5EBC",
	"\u5EEA",
	"\u5F02",
	"\u5F11",
	"\u5F20",
	"\u5F25",
	"\u5F2A",
	"\u5F55",
	"\u5F5D",
	"\u5F5F",
	"\u5F68",
	"\u5F7B",
	"\u5F84",
	"\u5F95",
	"\u5FC6",
	"\u5FCF",
	"\u5FE7",
	"\u5FFE",
	"\u6001",
	"\u6002",
	"\u6003",
	"\u6004",
	"\u6005",
	"\u6006",
	"\u603B",
	"\u603C",
	"\u603F",
	"\u6073",
	"\u6076",
	"\u6078",
	"\u6079",
	"\u607A",
	"\u607B",
	"\u607D",
	"\u60A6",
	"\u60AB",
	"\u60AC",
	"\u60AD",
	"\u60AE",
	"\u60AF",
	"\u60CA",
	"\u60E8",
	"\u60EB",
	"\u60EC",
	"\u60ED",
	"\u60EE",
	"\u60EF",
	"\u6124",
	"\u6126",
	"\u6151",
	"\u616D",
	"\u61D1",
	"\u61D2",
	"\u61D4",
	"\u6206",
	"\u620B",
	"\u6217",
	"\u622C",
	"\u622F",
	"\u6269",
	"\u626A",
	"\u626B",
	"\u626C",
	"\u6270",
	"\u629A",
	"\u629F",
	"\u62A0",
	"\u62A1",
	"\u62A2",
	"\u62A4",
	"\u62DF",
	"\u62E2",
	"\u62E3",
	"\u62E5",
	"\u62E6",
	"\u62E7",
	"\u62E8",
	"\u62E9",
	"\u6319",
	"\u631A",
	"\u631C",
	"\u631D",
	"\u631E",
	"\u6320",
	"\u6322",
	"\u6323",
	"\u6324",
	"\u6325",
	"\u6326",
	"\u635D",
	"\u635E",
	"\u635F",
	"\u6361",
	"\u6362",
	"\u6363",
	"\u63B3",
	"\u63B4",
	"\u63B8",
	"\u63BA",
	"\u63BC",
	"\u63FD",
	"\u63FF",
	"\u6400",
	"\u6401",
	"\u6402",
	"\u6405",
	"\u6444",
	"\u6445",
	"\u6447",
	"\u6484",
	"\u64B5",
	"\u64B7",
	"\u64B8",
	"\u64BA",
	"\u64DC",
	"\u64DE",
	"\u6512",
	"\u654C",
	"\u655B",
	"\u6569",
	"\u6593",
	"\u65A9",
	"\u65E7",
	"\u65F8",
	"\u6619",
	"\u663D",
	"\u663E",
	"\u6653",
	"\u6654",
	"\u6655",
	"\u6656",
	"\u6682",
	"\u6685",
	"\u66A7",
	"\u6740",
	"\u6742",
	"\u6761",
	"\u6765",
	"\u6768",
	"\u6769",
	"\u679E",
	"\u67A2",
	"\u67A3",
	"\u67A5",
	"\u67A7",
	"\u67A8",
	"\u67AA",
	"\u67AB",
	"\u67AD",
	"\u67E0",
	"\u67FD",
	"\u6808",
	"\u6809",
	"\u680A",
	"\u680B",
	"\u680C",
	"\u680E",
	"\u680F",
	"\u6811",
	"\u6837",
	"\u6860",
	"\u6861",
	"\u6862",
	"\u6863",
	"\u6864",
	"\u6865",
	"\u6866",
	"\u6867",
	"\u6868",
	"\u6869",
	"\u686A",
	"\u68BC",
	"\u68BE",
	"\u68BF",
	"\u68C0",
	"\u68C1",
	"\u68C2",
	"\u6901",
	"\u691D",
	"\u691F",
	"\u6920",
	"\u6922",
	"\u6924",
	"\u692B",
	"\u692D",
	"\u692E",
	"\u6984",
	"\u6985",
	"\u6987",
	"\u6988",
	"\u6989",
	"\u69DA",
	"\u69DB",
	"\u69DF",
	"\u69E0",
	"\u6A2A",
	"\u6A2F",
	"\u6A31",
	"\u6A65",
	"\u6A71",
	"\u6A79",
	"\u6A7C",
	"\u6AA9",
	"\u6B27",
	"\u6B7C",
	"\u6B81",
	"\u6B87",
	"\u6B8B",
	"\u6B92",
	"\u6B93",
	"\u6B9A",
	"\u6BB4",
	"\u6BC1",
	"\u6BC2",
	"\u6BD5",
	"\u6BD9",
	"\u6BF5",
	"\u6BF6",
	"\u6C07",
	"\u6C22",
	"\u6C29",
	"\u6C32",
	"\u6C47",
	"\u6C49",
	"\u6C64",
	"\u6C9F",
	"\u6CA3",
	"\u6CA4",
	"\u6CA5",
	"\u6CA6",
	"\u6CA7",
	"\u6CA8",
	"\u6CA9",
	"\u6CDE",
	"\u6CF6",
	"\u6CF7",
	"\u6CF8",
	"\u6CFA",
	"\u6CFB",
	"\u6CFC",
	"\u6CFD",
	"\u6CFE",
	"\u6D01",
	"\u6D43",
	"\u6D46",
	"\u6D47",
	"\u6D48",
	"\u6D49",
	"\u6D4A",
	"\u6D4B",
	"\u6D4D",
	"\u6D4E",
	"\u6D4F",
	"\u6D50",
	"\u6D51",
	"\u6D52",
	"\u6D53",
	"\u6D54",
	"\u6D55",
	"\u6D9D",
	"\u6D9E",
	"\u6D9F",
	"\u6DA0",
	"\u6DA1",
	"\u6DA2",
	"\u6DA3",
	"\u6DA4",
	"\u6DA6",
	"\u6DA7",
	"\u6DA8",
	"\u6DA9",
	"\u6E0C",
	"\u6E0D",
	"\u6E0E",
	"\u6E10",
	"\u6E11",
	"\u6E14",
	"\u6E16",
	"\u6E17",
	"\u6E7F",
	"\u6E81",
	"\u6E83",
	"\u6E85",
	"\u6E86",
	"\u6E87",
	"\u6ED7",
	"\u6EDE",
	"\u6EDF",
	"\u6EE0",
	"\u6EE1",
	"\u6EE2",
	"\u6EE4",
	"\u6EE5",
	"\u6EEA",
	"\u6F46",
	"\u6F47",
	"\u6F4B",
	"\u6F4D",
	"\u6F5C",
	"\u6F74",
	"\u6F9B",
	"\u6F9C",
	"\u6FD1",
	"\u6FD2",
	"\u704F",
	"\u706D",
	"\u7075",
	"\u707F",
	"\u7080",
	"\u709C",
	"\u709D",
	"\u70BC",
	"\u70BD",
	"\u70C1",
	"\u70C2",
	"\u70C3",
	"\u70E6",
	"\u70E7",
	"\u70E8",
	"\u70EB",
	"\u7115",
	"\u7116",
	"\u7118",
	"\u7174",
	"\u7231",
	"\u7237",
	"\u724D",
	"\u7266",
	"\u7275",
	"\u727A",
	"\u728A",
	"\u72B6",
	"\u72B7",
	"\u72B8",
	"\u72C8",
	"\u72DD",
	"\u72DE",
	"\u72ED",
	"\u72EE",
	"\u72F0",
	"\u72F1",
	"\u72F2",
	"\u7303",
	"\u730E",
	"\u7321",
	"\u736D",
	"\u7391",
	"\u7399",
	"\u739A",
	"\u739B",
	"\u73AE",
	"\u73B0",
	"\u73B1",
	"\u73BA",
	"\u73D1",
	"\u73F0",
	"\u73F2",
	"\u740E",
	"\u740F",
	"\u7410",
	"\u7476",
	"\u7477",
	"\u7478",
	"\u748E",
	"\u74D2",
	"\u74EF",
	"\u7545",
	"\u7574",
	"\u7596",
	"\u7597",
	"\u759F",
	"\u75A0",
	"\u75A1",
	"\u75AC",
	"\u75AD",
	"\u75AE",
	"\u75AF",
	"\u75C8",
	"\u75C9",
	"\u75D6",
	"\u75E8",
	"\u75EA",
	"\u75EB",
	"\u7605",
	"\u7606",
	"\u7617",
	"\u762A",
	"\u762B",
	"\u763E",
	"\u763F",
	"\u765E",
	"\u7663",
	"\u766B",
	"\u7691",
	"\u76B2",
	"\u76CF",
	"\u76D0",
	"\u76D1",
	"\u76D7",
	"\u76D8",
	"\u770D",
	"\u772C",
	"\u7741",
	"\u7750",
	"\u7751",
	"\u7786",
	"\u7792",
	"\u77A9",
	"\u77F6",
	"\u77FE",
	"\u77FF",
	"\u7800",
	"\u7801",
	"\u7816",
	"\u7817",
	"\u781A",
	"\u781C",
	"\u783A",
	"\u783B",
	"\u783E",
	"\u7840",
	"\u7841",
	"\u7855",
	"\u7856",
	"\u7857",
	"\u7859",
	"\u785A",
	"\u7875",
	"\u7877",
	"\u789B",
	"\u789C",
	"\u7943",
	"\u794E",
	"\u796F",
	"\u7978",
	"\u7984",
	"\u7985",
	"\u79BB",
	"\u79EF",
	"\u79FD",
	"\u79FE",
	"\u7A06",
	"\u7A0E",
	"\u7A23",
	"\u7A51",
	"\u7A8D",
	"\u7A8E",
	"\u7A91",
	"\u7A9C",
	"\u7A9D",
	"\u7AA5",
	"\u7AA6",
	"\u7AAD",
	"\u7AD6",
	"\u7ADE",
	"\u7B03",
	"\u7B15",
	"\u7B3A",
	"\u7B3C",
	"\u7B3E",
	"\u7B5A",
	"\u7B5B",
	"\u7B5C",
	"\u7B5D",
	"\u7B79",
	"\u7B7C",
	"\u7B7E",
	"\u7B80",
	"\u7B93",
	"\u7BA6",
	"\u7BA7",
	"\u7BA8",
	"\u7BAA",
	"\u7BAB",
	"\u7BD1",
	"\u7BEE",
	"\u7BEF",
	"\u7C16",
	"\u7C41",
	"\u7C7B",
	"\u7C7C",
	"\u7C9D",
	"\u7CA4",
	"\u7CAA",
	"\u7CC1",
	"\u7D27",
	"\u7D77",
	"\u7E9F",
	"\u7EA0",
	"\u7EA1",
	"\u7EA2",
	"\u7EA3",
	"\u7EA4",
	"\u7EA5",
	"\u7EA6",
	"\u7EA7",
	"\u7EA8",
	"\u7EA9",
	"\u7EAA",
	"\u7EAB",
	"\u7EAC",
	"\u7EAD",
	"\u7EAE",
	"\u7EAF",
	"\u7EB0",
	"\u7EB1",
	"\u7EB2",
	"\u7EB3",
	"\u7EB4",
	"\u7EB5",
	"\u7EB6",
	"\u7EB7",
	"\u7EB8",
	"\u7EB9",
	"\u7EBA",
	"\u7EBB",
	"\u7EBC",
	"\u7EBD",
	"\u7EBE",
	"\u7EBF",
	"\u7EC0",
	"\u7EC1",
	"\u7EC2",
	"\u7EC3",
	"\u7EC4",
	"\u7EC5",
	"\u7EC6",
	"\u7EC7",
	"\u7EC8",
	"\u7EC9",
	"\u7ECA",
	"\u7ECB",
	"\u7ECC",
	"\u7ECD",
	"\u7ECE",
	"\u7ECF",
	"\u7ED0",
	"\u7ED1",
	"\u7ED2",
	"\u7ED3",
	"\u7ED4",
	"\u7ED5",
	"\u7ED6",
	"\u7ED7",
	"\u7ED8",
	"\u7ED9",
	"\u7EDA",
	"\u7EDB",
	"\u7EDC",
	"\u7EDD",
	"\u7EDE",
	"\u7EDF",
	"\u7EE0",
	"\u7EE1",
	"\u7EE2",
	"\u7EE3",
	"\u7EE4",
	"\u7EE5",
	"\u7EE6",
	"\u7EE7",
	"\u7EE8",
	"\u7EE9",
	"\u7EEA",
	"\u7EEB",
	"\u7EEC",
	"\u7EED",
	"\u7EEE",
	"\u7EEF",
	"\u7EF0",
	"\u7EF1",
	"\u7EF2",
	"\u7EF3",
	"\u7EF4",
	"\u7EF5",
	"\u7EF6",
	"\u7EF7",
	"\u7EF8",
	"\u7EF9",
	"\u7EFA",
	"\u7EFB",
	"\u7EFC",
	"\u7EFD",
	"\u7EFE",
	"\u7EFF",
	"\u7F00",
	"\u7F01",
	"\u7F02",
	"\u7F03",
	"\u7F04",
	"\u7F05",
	"\u7F06",
	"\u7F07",
	"\u7F08",
	"\u7F09",
	"\u7F0A",
	"\u7F0B",
	"\u7F0C",
	"\u7F0D",
	"\u7F0E",
	"\u7F0F",
	"\u7F10",
	"\u7F11",
	"\u7F12",
	"\u7F13",
	"\u7F14",
	"\u7F15",
	"\u7F16",
	"\u7F17",
	"\u7F18",
	"\u7F19",
	"\u7F1A",
	"\u7F1B",
	"\u7F1C",
	"\u7F1D",
	"\u7F1E",
	"\u7F1F",
	"\u7F20",
	"\u7F21",
	"\u7F22",
	"\u7F23",
	"\u7F24",
	"\u7F25",
	"\u7F26",
	"\u7F27",
	"\u7F28",
	"\u7F29",
	"\u7F2A",
	"\u7F2B",
	"\u7F2C",
	"\u7F2D",
	"\u7F2E",
	"\u7F2F",
	"\u7F30",
	"\u7F31",
	"\u7F32",
	"\u7F33",
	"\u7F34",
	"\u7F35",
	"\u7F42",
	"\u7F5A",
	"\u7F74",
	"\u7F81",
	"\u7F9F",
	"\u7FD8",
	"\u7FD9",
	"\u7FDA",
	"\u8022",
	"\u8027",
	"\u8038",
	"\u8042",
	"\u804B",
	"\u804D",
	"\u8069",
	"\u806A",
	"\u8083",
	"\u80A0",
	"\u80A4",
	"\u80BE",
	"\u80BF",
	"\u80C0",
	"\u80C1",
	"\u80E7",
	"\u80E8",
	"\u80EA",
	"\u80EB",
	"\u80F6",
	"\u810F",
	"\u8110",
	"\u8111",
	"\u8113",
	"\u8131",
	"\u8136",
	"\u8138",
	"\u8158",
	"\u817B",
	"\u817D",
	"\u817E",
	"\u81DC",
	"\u8206",
	"\u8223",
	"\u8230",
	"\u8231",
	"\u823B",
	"\u8270",
	"\u827A",
	"\u8282",
	"\u8288",
	"\u8297",
	"\u829C",
	"\u82C1",
	"\u82C7",
	"\u82C8",
	"\u82CB",
	"\u82CC",
	"\u82CD",
	"\u82CE",
	"\u830E",
	"\u830F",
	"\u8311",
	"\u8314",
	"\u8315",
	"\u8327",
	"\u8359",
	"\u835A",
	"\u835B",
	"\u835C",
	"\u835D",
	"\u835E",
	"\u835F",
	"\u8360",
	"\u8361",
	"\u8364",
	"\u8365",
	"\u8366",
	"\u8367",
	"\u8368",
	"\u8369",
	"\u836A",
	"\u836B",
	"\u836C",
	"\u836D",
	"\u836E",
	"\u836F",
	"\u83B1",
	"\u83B2",
	"\u83B3",
	"\u83B4",
	"\u83B6",
	"\u83B7",
	"\u83B8",
	"\u83B9",
	"\u83BA",
	"\u83BC",
	"\u841A",
	"\u8424",
	"\u8425",
	"\u8426",
	"\u8427",
	"\u8428",
	"\u8487",
	"\u8489",
	"\u848B",
	"\u848C",
	"\u84DD",
	"\u84DF",
	"\u84E0",
	"\u84E3",
	"\u84E5",
	"\u84E6",
	"\u8537",
	"\u8539",
	"\u853A",
	"\u853C",
	"\u8570",
	"\u8572",
	"\u8574",
	"\u85AE",
	"\u85D3",
	"\u864F",
	"\u8651",
	"\u865A",
	"\u866E",
	"\u867D",
	"\u867F",
	"\u8680",
	"\u8682",
	"\u8683",
	"\u86AC",
	"\u86CA",
	"\u86CE",
	"\u86CF",
	"\u86F1",
	"\u86F2",
	"\u86F3",
	"\u86F4",
	"\u8715",
	"\u8717",
	"\u8747",
	"\u8748",
	"\u8749",
	"\u877E",
	"\u8780",
	"\u87A8",
	"\u87CF",
	"\u8854",
	"\u886C",
	"\u8885",
	"\u8886",
	"\u88AD",
	"\u88AF",
	"\u88C5",
	"\u88C6",
	"\u88C8",
	"\u88E2",
	"\u88E3",
	"\u88E4",
	"\u88E5",
	"\u891B",
	"\u891D",
	"\u8934",
	"\u8955",
	"\u89C1",
	"\u89C2",
	"\u89C3",
	"\u89C4",
	"\u89C5",
	"\u89C6",
	"\u89C7",
	"\u89C8",
	"\u89C9",
	"\u89CA",
	"\u89CB",
	"\u89CC",
	"\u89CD",
	"\u89CE",
	"\u89CF",
	"\u89D0",
	"\u89D1",
	"\u89DE",
	"\u89E6",
	"\u89EF",
	"\u8A1A",
	"\u8A5F",
	"\u8A8A",
	"\u8BA0",
	"\u8BA1",
	"\u8BA2",
	"\u8BA3",
	"\u8BA4",
	"\u8BA5",
	"\u8BA6",
	"\u8BA7",
	"\u8BA8",
	"\u8BA9",
	"\u8BAA",
	"\u8BAB",
	"\u8BAC",
	"\u8BAD",
	"\u8BAE",
	"\u8BAF",
	"\u8BB0",
	"\u8BB1",
	"\u8BB2",
	"\u8BB3",
	"\u8BB4",
	"\u8BB5",
	"\u8BB6",
	"\u8BB7",
	"\u8BB8",
	"\u8BB9",
	"\u8BBA",
	"\u8BBB",
	"\u8BBC",
	"\u8BBD",
	"\u8BBE",
	"\u8BBF",
	"\u8BC0",
	"\u8BC1",
	"\u8BC2",
	"\u8BC3",
	"\u8BC4",
	"\u8BC5",
	"\u8BC6",
	"\u8BC7",
	"\u8BC8",
	"\u8BC9",
	"\u8BCA",
	"\u8BCB",
	"\u8BCC",
	"\u8BCD",
	"\u8BCE",
	"\u8BCF",
	"\u8BD0",
	"\u8BD1",
	"\u8BD2",
	"\u8BD3",
	"\u8BD4",
	"\u8BD5",
	"\u8BD6",
	"\u8BD7",
	"\u8BD8",
	"\u8BD9",
	"\u8BDA",
	"\u8BDB",
	"\u8BDC",
	"\u8BDD",
	"\u8BDE",
	"\u8BDF",
	"\u8BE0",
	"\u8BE1",
	"\u8BE2",
	"\u8BE3",
	"\u8BE4",
	"\u8BE5",
	"\u8BE6",
	"\u8BE7",
	"\u8BE8",
	"\u8BE9",
	"\u8BEA",
	"\u8BEB",
	"\u8BEC",
	"\u8BED",
	"\u8BEE",
	"\u8BEF",
	"\u8BF0",
	"\u8BF1",
	"\u8BF2",
	"\u8BF3",
	"\u8BF4",
	"\u8BF5",
	"\u8BF6",
	"\u8BF7",
	"\u8BF8",
	"\u8BF9",
	"\u8BFA",
	"\u8BFB",
	"\u8BFC",
	"\u8BFD",
	"\u8BFE",
	"\u8BFF",
	"\u8C00",
	"\u8C01",
	"\u8C02",
	"\u8C03",
	"\u8C04",
	"\u8C05",
	"\u8C06",
	"\u8C07",
	"\u8C08",
	"\u8C09",
	"\u8C0A",
	"\u8C0B",
	"\u8C0C",
	"\u8C0D",
	"\u8C0E",
	"\u8C0F",
	"\u8C10",
	"\u8C11",
	"\u8C12",
	"\u8C13",
	"\u8C14",
	"\u8C15",
	"\u8C16",
	"\u8C17",
	"\u8C18",
	"\u8C19",
	"\u8C1A",
	"\u8C1B",
	"\u8C1C",
	"\u8C1D",
	"\u8C1E",
	"\u8C1F",
	"\u8C20",
	"\u8C21",
	"\u8C22",
	"\u8C23",
	"\u8C24",
	"\u8C25",
	"\u8C26",
	"\u8C27",
	"\u8C28",
	"\u8C29",
	"\u8C2A",
	"\u8C2B",
	"\u8C2C",
	"\u8C2D",
	"\u8C2E",
	"\u8C2F",
	"\u8C30",
	"\u8C31",
	"\u8C32",
	"\u8C33",
	"\u8C34",
	"\u8C35",
	"\u8C36",
	"\u8C6E",
	"\u8D1D",
	"\u8D1E",
	"\u8D1F",
	"\u8D20",
	"\u8D21",
	"\u8D22",
	"\u8D23",
	"\u8D24",
	"\u8D25",
	"\u8D26",
	"\u8D27",
	"\u8D28",
	"\u8D29",
	"\u8D2A",
	"\u8D2B",
	"\u8D2C",
	"\u8D2D",
	"\u8D2E",
	"\u8D2F",
	"\u8D30",
	"\u8D31",
	"\u8D32",
	"\u8D33",
	"\u8D34",
	"\u8D35",
	"\u8D36",
	"\u8D37",
	"\u8D38",
	"\u8D39",
	"\u8D3A",
	"\u8D3B",
	"\u8D3C",
	"\u8D3D",
	"\u8D3E",
	"\u8D3F",
	"\u8D40",
	"\u8D41",
	"\u8D42",
	"\u8D43",
	"\u8D44",
	"\u8D45",
	"\u8D46",
	"\u8D47",
	"\u8D48",
	"\u8D49",
	"\u8D4A",
	"\u8D4B",
	"\u8D4C",
	"\u8D4D",
	"\u8D4E",
	"\u8D4F",
	"\u8D50",
	"\u8D51",
	"\u8D52",
	"\u8D53",
	"\u8D54",
	"\u8D55",
	"\u8D56",
	"\u8D57",
	"\u8D58",
	"\u8D59",
	"\u8D5A",
	"\u8D5B",
	"\u8D5C",
	"\u8D5D",
	"\u8D5E",
	"\u8D5F",
	"\u8D60",
	"\u8D61",
	"\u8D62",
	"\u8D63",
	"\u8D6A",
	"\u8D75",
	"\u8DB1",
	"\u8DB8",
	"\u8DC3",
	"\u8DC4",
	"\u8DDE",
	"\u8DF5",
	"\u8DF6",
	"\u8DF7",
	"\u8DF8",
	"\u8DF9",
	"\u8DFB",
	"\u8E0C",
	"\u8E2C",
	"\u8E2F",
	"\u8E51",
	"\u8E52",
	"\u8E7F",
	"\u8E8F",
	"\u8E9C",
	"\u8F66",
	"\u8F67",
	"\u8F68",
	"\u8F69",
	"\u8F6A",
	"\u8F6B",
	"\u8F6C",
	"\u8F6D",
	"\u8F6E",
	"\u8F6F",
	"\u8F70",
	"\u8F71",
	"\u8F72",
	"\u8F73",
	"\u8F74",
	"\u8F75",
	"\u8F76",
	"\u8F77",
	"\u8F78",
	"\u8F79",
	"\u8F7A",
	"\u8F7B",
	"\u8F7C",
	"\u8F7D",
	"\u8F7E",
	"\u8F7F",
	"\u8F80",
	"\u8F81",
	"\u8F82",
	"\u8F83",
	"\u8F84",
	"\u8F85",
	"\u8F86",
	"\u8F87",
	"\u8F88",
	"\u8F89",
	"\u8F8A",
	"\u8F8B",
	"\u8F8C",
	"\u8F8D",
	"\u8F8E",
	"\u8F8F",
	"\u8F90",
	"\u8F91",
	"\u8F92",
	"\u8F93",
	"\u8F94",
	"\u8F95",
	"\u8F96",
	"\u8F97",
	"\u8F98",
	"\u8F99",
	"\u8F9A",
	"\u8FA9",
	"\u8FAB",
	"\u8FBD",
	"\u8FBE",
	"\u8FC8",
	"\u8FD0",
	"\u8FDB",
	"\u8FDD",
	"\u8FDE",
	"\u8FDF",
	"\u8FF3",
	"\u9026",
	"\u9057",
	"\u9065",
	"\u9093",
	"\u909D",
	"\u90AC",
	"\u90AE",
	"\u90B9",
	"\u90BA",
	"\u90BB",
	"\u90CF",
	"\u90D0",
	"\u90D3",
	"\u90E6",
	"\u90E7",
	"\u90F8",
	"\u9142",
	"\u915D",
	"\u9166",
	"\u9171",
	"\u917D",
	"\u917E",
	"\u917F",
	"\u91CA",
	"\u9274",
	"\u933E",
	"\u9485",
	"\u9486",
	"\u9487",
	"\u9488",
	"\u9489",
	"\u948A",
	"\u948B",
	"\u948C",
	"\u948D",
	"\u948E",
	"\u948F",
	"\u9490",
	"\u9491",
	"\u9492",
	"\u9493",
	"\u9494",
	"\u9495",
	"\u9496",
	"\u9497",
	"\u9498",
	"\u9499",
	"\u949A",
	"\u949B",
	"\u949C",
	"\u949D",
	"\u949E",
	"\u949F",
	"\u94A0",
	"\u94A1",
	"\u94A2",
	"\u94A3",
	"\u94A4",
	"\u94A5",
	"\u94A6",
	"\u94A7",
	"\u94A8",
	"\u94A9",
	"\u94AA",
	"\u94AB",
	"\u94AC",
	"\u94AD",
	"\u94AE",
	"\u94AF",
	"\u94B0",
	"\u94B1",
	"\u94B2",
	"\u94B3",
	"\u94B4",
	"\u94B5",
	"\u94B6",
	"\u94B7",
	"\u94B8",
	"\u94B9",
	"\u94BA",
	"\u94BB",
	"\u94BC",
	"\u94BD",
	"\u94BE",
	"\u94BF",
	"\u94C0",
	"\u94C1",
	"\u94C2",
	"\u94C3",
	"\u94C4",
	"\u94C5",
	"\u94C6",
	"\u94C7",
	"\u94C8",
	"\u94C9",
	"\u94CA",
	"\u94CB",
	"\u94CC",
	"\u94CD",
	"\u94CE",
	"\u94CF",
	"\u94D0",
	"\u94D1",
	"\u94D2",
	"\u94D3",
	"\u94D4",
	"\u94D5",
	"\u94D6",
	"\u94D7",
	"\u94D8",
	"\u94D9",
	"\u94DA",
	"\u94DB",
	"\u94DC",
	"\u94DD",
	"\u94DE",
	"\u94DF",
	"\u94E0",
	"\u94E1",
	"\u94E2",
	"\u94E3",
	"\u94E4",
	"\u94E5",
	"\u94E6",
	"\u94E7",
	"\u94E8",
	"\u94E9",
	"\u94EA",
	"\u94EB",
	"\u94EC",
	"\u94ED",
	"\u94EE",
	"\u94EF",
	"\u94F0",
	"\u94F1",
	"\u94F2",
	"\u94F3",
	"\u94F4",
	"\u94F5",
	"\u94F6",
	"\u94F7",
	"\u94F8",
	"\u94F9",
	"\u94FA",
	"\u94FB",
	"\u94FC",
	"\u94FD",
	"\u94FE",
	"\u94FF",
	"\u9500",
	"\u9501",
	"\u9502",
	"\u9503",
	"\u9504",
	"\u9505",
	"\u9506",
	"\u9507",
	"\u9508",
	"\u9509",
	"\u950A",
	"\u950B",
	"\u950C",
	"\u950D",
	"\u950E",
	"\u950F",
	"\u9510",
	"\u9511",
	"\u9512",
	"\u9513",
	"\u9514",
	"\u9515",
	"\u9516",
	"\u9517",
	"\u9518",
	"\u9519",
	"\u951A",
	"\u951B",
	"\u951C",
	"\u951D",
	"\u951E",
	"\u951F",
	"\u9520",
	"\u9521",
	"\u9522",
	"\u9523",
	"\u9524",
	"\u9525",
	"\u9526",
	"\u9527",
	"\u9528",
	"\u9529",
	"\u952A",
	"\u952B",
	"\u952C",
	"\u952D",
	"\u952E",
	"\u952F",
	"\u9530",
	"\u9531",
	"\u9532",
	"\u9533",
	"\u9534",
	"\u9535",
	"\u9536",
	"\u9537",
	"\u9538",
	"\u9539",
	"\u953A",
	"\u953B",
	"\u953C",
	"\u953D",
	"\u953E",
	"\u953F",
	"\u9540",
	"\u9541",
	"\u9542",
	"\u9543",
	"\u9544",
	"\u9545",
	"\u9546",
	"\u9547",
	"\u9548",
	"\u9549",
	"\u954A",
	"\u954B",
	"\u954C",
	"\u954D",
	"\u954E",
	"\u954F",
	"\u9550",
	"\u9551",
	"\u9552",
	"\u9553",
	"\u9554",
	"\u9555",
	"\u9556",
	"\u9557",
	"\u9558",
	"\u9559",
	"\u955A",
	"\u955B",
	"\u955C",
	"\u955D",
	"\u955E",
	"\u955F",
	"\u9560",
	"\u9561",
	"\u9562",
	"\u9563",
	"\u9564",
	"\u9565",
	"\u9566",
	"\u9567",
	"\u9568",
	"\u9569",
	"\u956A",
	"\u956B",
	"\u956C",
	"\u956D",
	"\u956E",
	"\u956F",
	"\u9570",
	"\u9571",
	"\u9572",
	"\u9573",
	"\u9574",
	"\u9575",
	"\u9576",
	"\u957F",
	"\u95E8",
	"\u95E9",
	"\u95EA",
	"\u95EB",
	"\u95EC",
	"\u95ED",
	"\u95EE",
	"\u95EF",
	"\u95F0",
	"\u95F1",
	"\u95F2",
	"\u95F3",
	"\u95F4",
	"\u95F5",
	"\u95F6",
	"\u95F7",
	"\u95F8",
	"\u95F9",
	"\u95FA",
	"\u95FB",
	"\u95FC",
	"\u95FD",
	"\u95FE",
	"\u95FF",
	"\u9600",
	"\u9601",
	"\u9602",
	"\u9603",
	"\u9604",
	"\u9605",
	"\u9606",
	"\u9607",
	"\u9608",
	"\u9609",
	"\u960A",
	"\u960B",
	"\u960C",
	"\u960D",
	"\u960E",
	"\u960F",
	"\u9610",
	"\u9611",
	"\u9612",
	"\u9613",
	"\u9614",
	"\u9615",
	"\u9616",
	"\u9617",
	"\u9618",
	"\u9619",
	"\u961A",
	"\u961B",
	"\u961F",
	"\u9633",
	"\u9634",
	"\u9635",
	"\u9636",
	"\u9646",
	"\u9647",
	"\u9648",
	"\u9649",
	"\u9655",
	"\u9666",
	"\u9667",
	"\u9668",
	"\u9669",
	"\u96CF",
	"\u96E0",
	"\u96F3",
	"\u96FE",
	"\u9701",
	"\u972D",
	"\u9753",
	"\u9765",
	"\u9791",
	"\u9792",
	"\u97AF",
	"\u97E6",
	"\u97E7",
	"\u97E8",
	"\u97E9",
	"\u97EA",
	"\u97EB",
	"\u97EC",
	"\u9875",
	"\u9876",
	"\u9877",
	"\u9878",
	"\u9879",
	"\u987A",
	"\u987B",
	"\u987C",
	"\u987D",
	"\u987E",
	"\u987F",
	"\u9880",
	"\u9881",
	"\u9882",
	"\u9883",
	"\u9884",
	"\u9885",
	"\u9886",
	"\u9887",
	"\u9888",
	"\u9889",
	"\u988A",
	"\u988B",
	"\u988C",
	"\u988D",
	"\u988E",
	"\u988F",
	"\u9890",
	"\u9891",
	"\u9892",
	"\u9893",
	"\u9894",
	"\u9895",
	"\u9896",
	"\u9897",
	"\u9898",
	"\u9899",
	"\u989A",
	"\u989B",
	"\u989C",
	"\u989D",
	"\u989E",
	"\u989F",
	"\u98A0",
	"\u98A1",
	"\u98A2",
	"\u98A3",
	"\u98A4",
	"\u98A5",
	"\u98A6",
	"\u98A7",
	"\u98CF",
	"\u98D0",
	"\u98D1",
	"\u98D2",
	"\u98D3",
	"\u98D4",
	"\u98D5",
	"\u98D6",
	"\u98D7",
	"\u98D8",
	"\u98D9",
	"\u98DA",
	"\u98DE",
	"\u98E8",
	"\u990D",
	"\u9963",
	"\u9964",
	"\u9965",
	"\u9966",
	"\u9967",
	"\u9968",
	"\u9969",
	"\u996A",
	"\u996B",
	"\u996C",
	"\u996D",
	"\u996E",
	"\u996F",
	"\u9970",
	"\u9971",
	"\u9972",
	"\u9973",
	"\u9974",
	"\u9975",
	"\u9976",
	"\u9977",
	"\u9978",
	"\u9979",
	"\u997A",
	"\u997B",
	"\u997C",
	"\u997D",
	"\u997E",
	"\u997F",
	"\u9980",
	"\u9981",
	"\u9982",
	"\u9983",
	"\u9984",
	"\u9985",
	"\u9986",
	"\u9987",
	"\u9988",
	"\u9989",
	"\u998A",
	"\u998B",
	"\u998C",
	"\u998D",
	"\u998E",
	"\u998F",
	"\u9990",
	"\u9991",
	"\u9992",
	"\u9993",
	"\u9994",
	"\u9995",
	"\u9A6C",
	"\u9A6D",
	"\u9A6E",
	"\u9A6F",
	"\u9A70",
	"\u9A71",
	"\u9A72",
	"\u9A73",
	"\u9A74",
	"\u9A75",
	"\u9A76",
	"\u9A77",
	"\u9A78",
	"\u9A79",
	"\u9A7A",
	"\u9A7B",
	"\u9A7C",
	"\u9A7D",
	"\u9A7E",
	"\u9A7F",
	"\u9A80",
	"\u9A81",
	"\u9A82",
	"\u9A83",
	"\u9A84",
	"\u9A85",
	"\u9A86",
	"\u9A87",
	"\u9A88",
	"\u9A89",
	"\u9A8A",
	"\u9A8B",
	"\u9A8C",
	"\u9A8D",
	"\u9A8E",
	"\u9A8F",
	"\u9A90",
	"\u9A91",
	"\u9A92",
	"\u9A93",
	"\u9A94",
	"\u9A95",
	"\u9A96",
	"\u9A97",
	"\u9A98",
	"\u9A99",
	"\u9A9A",
	"\u9A9B",
	"\u9A9C",
	"\u9A9D",
	"\u9A9E",
	"\u9A9F",
	"\u9AA0",
	"\u9AA1",
	"\u9AA2",
	"\u9AA3",
	"\u9AA4",
	"\u9AA5",
	"\u9AA6",
	"\u9AA7",
	"\u9AC5",
	"\u9ACB",
	"\u9ACC",
	"\u9B13",
	"\u9B36",
	"\u9B47",
	"\u9B49",
	"\u9C7C",
	"\u9C7D",
	"\u9C7E",
	"\u9C7F",
	"\u9C80",
	"\u9C81",
	"\u9C82",
	"\u9C83",
	"\u9C84",
	"\u9C85",
	"\u9C86",
	"\u9C87",
	"\u9C88",
	"\u9C89",
	"\u9C8A",
	"\u9C8B",
	"\u9C8C",
	"\u9C8D",
	"\u9C8E",
	"\u9C8F",
	"\u9C90",
	"\u9C91",
	"\u9C92",
	"\u9C93",
	"\u9C94",
	"\u9C95",
	"\u9C96",
	"\u9C97",
	"\u9C98",
	"\u9C99",
	"\u9C9A",
	"\u9C9B",
	"\u9C9C",
	"\u9C9D",
	"\u9C9E",
	"\u9C9F",
	"\u9CA0",
	"\u9CA1",
	"\u9CA2",
	"\u9CA3",
	"\u9CA4",
	"\u9CA5",
	"\u9CA6",
	"\u9CA7",
	"\u9CA8",
	"\u9CA9",
	"\u9CAA",
	"\u9CAB",
	"\u9CAC",
	"\u9CAD",
	"\u9CAE",
	"\u9CAF",
	"\u9CB0",
	"\u9CB1",
	"\u9CB2",
	"\u9CB3",
	"\u9CB4",
	"\u9CB5",
	"\u9CB6",
	"\u9CB7",
	"\u9CB8",
	"\u9CB9",
	"\u9CBA",
	"\u9CBB",
	"\u9CBC",
	"\u9CBD",
	"\u9CBE",
	"\u9CBF",
	"\u9CC0",
	"\u9CC1",
	"\u9CC2",
	"\u9CC3",
	"\u9CC4",
	"\u9CC5",
	"\u9CC6",
	"\u9CC7",
	"\u9CC8",
	"\u9CC9",
	"\u9CCA",
	"\u9CCB",
	"\u9CCC",
	"\u9CCD",
	"\u9CCE",
	"\u9CCF",
	"\u9CD0",
	"\u9CD1",
	"\u9CD2",
	"\u9CD3",
	"\u9CD4",
	"\u9CD5",
	"\u9CD6",
	"\u9CD7",
	"\u9CD8",
	"\u9CD9",
	"\u9CDA",
	"\u9CDB",
	"\u9CDC",
	"\u9CDD",
	"\u9CDE",
	"\u9CDF",
	"\u9CE0",
	"\u9CE1",
	"\u9CE2",
	"\u9CE3",
	"\u9CE4",
	"\u9E1F",
	"\u9E20",
	"\u9E21",
	"\u9E22",
	"\u9E23",
	"\u9E24",
	"\u9E25",
	"\u9E26",
	"\u9E27",
	"\u9E28",
	"\u9E29",
	"\u9E2A",
	"\u9E2B",
	"\u9E2C",
	"\u9E2D",
	"\u9E2E",
	"\u9E2F",
	"\u9E30",
	"\u9E31",
	"\u9E32",
	"\u9E33",
	"\u9E34",
	"\u9E35",
	"\u9E36",
	"\u9E37",
	"\u9E38",
	"\u9E39",
	"\u9E3A",
	"\u9E3B",
	"\u9E3C",
	"\u9E3D",
	"\u9E3E",
	"\u9E3F",
	"\u9E40",
	"\u9E41",
	"\u9E42",
	"\u9E43",
	"\u9E44",
	"\u9E45",
	"\u9E46",
	"\u9E47",
	"\u9E48",
	"\u9E49",
	"\u9E4A",
	"\u9E4B",
	"\u9E4C",
	"\u9E4D",
	"\u9E4E",
	"\u9E4F",
	"\u9E50",
	"\u9E51",
	"\u9E52",
	"\u9E53",
	"\u9E54",
	"\u9E55",
	"\u9E56",
	"\u9E57",
	"\u9E58",
	"\u9E59",
	"\u9E5A",
	"\u9E5B",
	"\u9E5C",
	"\u9E5D",
	"\u9E5E",
	"\u9E5F",
	"\u9E60",
	"\u9E61",
	"\u9E62",
	"\u9E63",
	"\u9E64",
	"\u9E65",
	"\u9E66",
	"\u9E67",
	"\u9E68",
	"\u9E69",
	"\u9E6A",
	"\u9E6B",
	"\u9E6C",
	"\u9E6D",
	"\u9E6E",
	"\u9E6F",
	"\u9E70",
	"\u9E71",
	"\u9E72",
	"\u9E73",
	"\u9E74",
	"\u9E7E",
	"\u9EB8",
	"\u9EB9",
	"\u9EC9",
	"\u9EE1",
	"\u9EE9",
	"\u9EEA",
	"\u9F0B",
	"\u9F0D",
	"\u9F50",
	"\u9F51",
	"\u9F7F",
	"\u9F80",
	"\u9F81",
	"\u9F82",
	"\u9F83",
	"\u9F84",
	"\u9F85",
	"\u9F86",
	"\u9F87",
	"\u9F88",
	"\u9F89",
	"\u9F8A",
	"\u9F8B",
	"\u9F8C",
	"\u9F99",
	"\u9F9A",
	"\u9F9B",
	"\u9FCE",
	"\u9FCF",
	"\u9FD2",
	"\u9FD4",
	"\u9FD5",
	"\u9FDF",
	"\u9FED",
	"\u9FF0",
	"\u9FF2",
	"\u9FF4",
	"\u9FF5",
	"\u9FF6",
	"\u9FF7",
	"\u9FF8",
	"\u9FF9",
	"\u9FFA"
];// source : https://github.com/FGRibreau/node-language-detect/tree/master

Roo.languagedetect.dbLang = {
    "trigram": {
        "albanian": {
            "t\u00eb ": "0",
            " t\u00eb": "1",
            "n\u00eb ": "2",
            "p\u00ebr": "3",
            " p\u00eb": "4",
            " e ": "5",
            "sht": "6",
            " n\u00eb": "7",
            " sh": "8",
            "se ": "9",
            "et ": "10",
            "\u00eb s": "11",
            "\u00eb t": "12",
            " se": "13",
            "he ": "14",
            "j\u00eb ": "15",
            "\u00ebr ": "16",
            "dhe": "17",
            " pa": "18",
            "\u00eb n": "19",
            "\u00eb p": "20",
            " q\u00eb": "21",
            " dh": "22",
            "nj\u00eb": "23",
            "\u00eb m": "24",
            " nj": "25",
            "\u00ebsh": "26",
            "in ": "27",
            " me": "28",
            "q\u00eb ": "29",
            " po": "30",
            "e n": "31",
            "e t": "32",
            "ish": "33",
            "m\u00eb ": "34",
            "s\u00eb ": "35",
            "me ": "36",
            "ht\u00eb": "37",
            " ka": "38",
            " si": "39",
            "e k": "40",
            "e p": "41",
            " i ": "42",
            "an\u00eb": "43",
            "ar ": "44",
            " nu": "45",
            "und": "46",
            "ve ": "47",
            " \u00ebs": "48",
            "e s": "49",
            " m\u00eb": "50",
            "nuk": "51",
            "par": "52",
            "uar": "53",
            "uk ": "54",
            "jo ": "55",
            "r\u00eb ": "56",
            "ta ": "57",
            "\u00eb f": "58",
            "en ": "59",
            "it ": "60",
            "min": "61",
            "het": "62",
            "n e": "63",
            "ri ": "64",
            "shq": "65",
            "\u00eb d": "66",
            " do": "67",
            " nd": "68",
            "sh ": "69",
            "\u00ebn ": "70",
            "at\u00eb": "71",
            "hqi": "72",
            "ist": "73",
            "\u00eb q": "74",
            " gj": "75",
            " ng": "76",
            " th": "77",
            "a n": "78",
            "do ": "79",
            "end": "80",
            "imi": "81",
            "ndi": "82",
            "r t": "83",
            "rat": "84",
            "\u00eb b": "85",
            "\u00ebri": "86",
            " mu": "87",
            "art": "88",
            "ash": "89",
            "qip": "90",
            " ko": "91",
            "e m": "92",
            "edh": "93",
            "eri": "94",
            "je ": "95",
            "ka ": "96",
            "nga": "97",
            "si ": "98",
            "te ": "99",
            "\u00eb k": "100",
            "\u00ebsi": "101",
            " ma": "102",
            " ti": "103",
            "eve": "104",
            "hje": "105",
            "ira": "106",
            "mun": "107",
            "on ": "108",
            "po ": "109",
            "re ": "110",
            " pr": "111",
            "im ": "112",
            "lit": "113",
            "o t": "114",
            "ur ": "115",
            "\u00eb e": "116",
            "\u00eb v": "117",
            "\u00ebt ": "118",
            " ku": "119",
            " s\u00eb": "120",
            "e d": "121",
            "es ": "122",
            "ga ": "123",
            "iti": "124",
            "jet": "125",
            "nd\u00eb": "126",
            "oli": "127",
            "shi": "128",
            "tje": "129",
            " b\u00eb": "130",
            " z ": "131",
            "gje": "132",
            "kan": "133",
            "shk": "134",
            "\u00ebnd": "135",
            "\u00ebs ": "136",
            " de": "137",
            " kj": "138",
            " ru": "139",
            " vi": "140",
            "ara": "141",
            "gov": "142",
            "kjo": "143",
            "or ": "144",
            "r p": "145",
            "rto": "146",
            "rug": "147",
            "tet": "148",
            "ugo": "149",
            "ali": "150",
            "arr": "151",
            "at ": "152",
            "d t": "153",
            "ht ": "154",
            "i p": "155",
            "ip\u00eb": "156",
            "izi": "157",
            "jn\u00eb": "158",
            "n n": "159",
            "ohe": "160",
            "shu": "161",
            "sh\u00eb": "162",
            "t e": "163",
            "tik": "164",
            "a e": "165",
            "ar\u00eb": "166",
            "et\u00eb": "167",
            "hum": "168",
            "nd ": "169",
            "ndr": "170",
            "osh": "171",
            "ova": "172",
            "rim": "173",
            "tos": "174",
            "va ": "175",
            " fa": "176",
            " fi": "177",
            "a s": "178",
            "hen": "179",
            "i n": "180",
            "mar": "181",
            "ndo": "182",
            "por": "183",
            "ris": "184",
            "sa ": "185",
            "sis": "186",
            "t\u00ebs": "187",
            "um\u00eb": "188",
            "viz": "189",
            "zit": "190",
            " di": "191",
            " mb": "192",
            "aj ": "193",
            "ana": "194",
            "ata": "195",
            "d\u00ebr": "196",
            "e a": "197",
            "esh": "198",
            "ime": "199",
            "jes": "200",
            "lar": "201",
            "n s": "202",
            "nte": "203",
            "pol": "204",
            "r n": "205",
            "ran": "206",
            "res": "207",
            "rr\u00eb": "208",
            "tar": "209",
            "\u00eb a": "210",
            "\u00eb i": "211",
            " at": "212",
            " jo": "213",
            " k\u00eb": "214",
            " re": "215",
            "a k": "216",
            "ai ": "217",
            "akt": "218",
            "h\u00eb ": "219",
            "h\u00ebn": "220",
            "i i": "221",
            "i m": "222",
            "ia ": "223",
            "men": "224",
            "nis": "225",
            "shm": "226",
            "str": "227",
            "t k": "228",
            "t n": "229",
            "t s": "230",
            "\u00eb g": "231",
            "\u00ebrk": "232",
            "\u00ebve": "233",
            " ai": "234",
            " ci": "235",
            " ed": "236",
            " ja": "237",
            " kr": "238",
            " qe": "239",
            " ta": "240",
            " ve": "241",
            "a p": "242",
            "cil": "243",
            "el ": "244",
            "er\u00eb": "245",
            "gji": "246",
            "hte": "247",
            "i t": "248",
            "jen": "249",
            "jit": "250",
            "k d": "251",
            "m\u00ebn": "252",
            "n t": "253",
            "nyr": "254",
            "ori": "255",
            "pas": "256",
            "ra ": "257",
            "rie": "258",
            "r\u00ebs": "259",
            "tor": "260",
            "uaj": "261",
            "yre": "262",
            "\u00ebm ": "263",
            "\u00ebny": "264",
            " ar": "265",
            " du": "266",
            " ga": "267",
            " je": "268",
            "d\u00ebs": "269",
            "e e": "270",
            "e z": "271",
            "ha ": "272",
            "hme": "273",
            "ika": "274",
            "ini": "275",
            "ite": "276",
            "ith": "277",
            "koh": "278",
            "kra": "279",
            "ku ": "280",
            "lim": "281",
            "lis": "282",
            "q\u00ebn": "283",
            "r\u00ebn": "284",
            "s s": "285",
            "t d": "286",
            "t t": "287",
            "tir": "288",
            "t\u00ebn": "289",
            "ver": "290",
            "\u00eb j": "291",
            " ba": "292",
            " in": "293",
            " tr": "294",
            " zg": "295",
            "a a": "296",
            "a m": "297",
            "a t": "298",
            "abr": "299"
        },
        "arabic": {
            " \u0627\u0644": "0",
            "\u0627\u0644\u0639": "1",
            "\u0644\u0639\u0631": "2",
            "\u0639\u0631\u0627": "3",
            "\u0631\u0627\u0642": "4",
            " \u0641\u064a": "5",
            "\u0641\u064a ": "6",
            "\u064a\u0646 ": "7",
            "\u064a\u0629 ": "8",
            "\u0646 \u0627": "9",
            "\u0627\u0644\u0645": "10",
            "\u0627\u062a ": "11",
            "\u0645\u0646 ": "12",
            "\u064a \u0627": "13",
            " \u0645\u0646": "14",
            "\u0627\u0644\u0623": "15",
            "\u0629 \u0627": "16",
            "\u0627\u0642 ": "17",
            " \u0648\u0627": "18",
            "\u0627\u0621 ": "19",
            "\u0627\u0644\u0625": "20",
            " \u0623\u0646": "21",
            "\u0648\u0627\u0644": "22",
            "\u0645\u0627 ": "23",
            " \u0639\u0644": "24",
            "\u0644\u0649 ": "25",
            "\u062a \u0627": "26",
            "\u0648\u0646 ": "27",
            "\u0647\u0645 ": "28",
            "\u0627\u0642\u064a": "29",
            "\u0627\u0645 ": "30",
            "\u0644 \u0627": "31",
            "\u0623\u0646 ": "32",
            "\u0645 \u0627": "33",
            "\u0627\u0644\u062a": "34",
            "\u0644\u0627 ": "35",
            "\u0627\u0644\u0627": "36",
            "\u0627\u0646 ": "37",
            "\u0647\u0627 ": "38",
            "\u0627\u0644 ": "39",
            "\u0629 \u0648": "40",
            "\u0627 \u0627": "41",
            "\u0631\u0647\u0627": "42",
            "\u0644\u0627\u0645": "43",
            "\u064a\u064a\u0646": "44",
            " \u0648\u0644": "45",
            "\u0644\u0623\u0645": "46",
            "\u0646\u0627 ": "47",
            "\u0639\u0644\u0649": "48",
            "\u0646 \u064a": "49",
            "\u0627\u0644\u0628": "50",
            "\u0627\u062f ": "51",
            "\u0627\u0644\u0642": "52",
            "\u062f \u0627": "53",
            "\u0630\u0627 ": "54",
            "\u0647 \u0627": "55",
            " \u0628\u0627": "56",
            "\u0627\u0644\u062f": "57",
            "\u0628 \u0627": "58",
            "\u0645\u0631\u064a": "59",
            "\u0644\u0645 ": "60",
            " \u0625\u0646": "61",
            " \u0644\u0644": "62",
            "\u0633\u0644\u0627": "63",
            "\u0623\u0645\u0631": "64",
            "\u0631\u064a\u0643": "65",
            "\u0645\u0629 ": "66",
            "\u0649 \u0627": "67",
            "\u0627 \u064a": "68",
            " \u0639\u0646": "69",
            " \u0647\u0630": "70",
            "\u0621 \u0627": "71",
            "\u0631 \u0627": "72",
            "\u0643\u0627\u0646": "73",
            "\u0642\u062a\u0644": "74",
            "\u0625\u0633\u0644": "75",
            "\u0627\u0644\u062d": "76",
            "\u0648\u0627 ": "77",
            " \u0625\u0644": "78",
            "\u0627 \u0623": "79",
            "\u0628\u0627\u0644": "80",
            "\u0646 \u0645": "81",
            "\u0627\u0644\u0633": "82",
            "\u0631\u0629 ": "83",
            "\u0644\u0625\u0633": "84",
            "\u0646 \u0648": "85",
            "\u0647\u0627\u0628": "86",
            "\u064a \u0648": "87",
            "\u064a\u0631 ": "88",
            " \u0643\u0627": "89",
            "\u0644\u0629 ": "90",
            "\u064a\u0627\u062a": "91",
            " \u0644\u0627": "92",
            "\u0627\u0646\u062a": "93",
            "\u0646 \u0623": "94",
            "\u064a\u0643\u064a": "95",
            "\u0627\u0644\u0631": "96",
            "\u0627\u0644\u0648": "97",
            "\u0629 \u0641": "98",
            "\u062f\u0629 ": "99",
            "\u0627\u0644\u062c": "100",
            "\u0642\u064a ": "101",
            "\u0648\u064a ": "102",
            "\u0627\u0644\u0630": "103",
            "\u0627\u0644\u0634": "104",
            "\u0627\u0645\u064a": "105",
            "\u0627\u0646\u064a": "106",
            "\u0630\u0647 ": "107",
            "\u0639\u0646 ": "108",
            "\u0644\u0645\u0627": "109",
            "\u0647\u0630\u0647": "110",
            "\u0648\u0644 ": "111",
            "\u0627\u0641 ": "112",
            "\u0627\u0648\u064a": "113",
            "\u0628\u0631\u064a": "114",
            "\u0629 \u0644": "115",
            " \u0623\u0645": "116",
            " \u0644\u0645": "117",
            " \u0645\u0627": "118",
            "\u064a\u062f ": "119",
            " \u0623\u064a": "120",
            "\u0625\u0631\u0647": "121",
            "\u0639 \u0627": "122",
            "\u0639\u0645\u0644": "123",
            "\u0648\u0644\u0627": "124",
            "\u0625\u0644\u0649": "125",
            "\u0627\u0628\u064a": "126",
            "\u0646 \u0641": "127",
            "\u062e\u062a\u0637": "128",
            "\u0644\u0643 ": "129",
            "\u0646\u0647 ": "130",
            "\u0646\u064a ": "131",
            "\u0625\u0646 ": "132",
            "\u062f\u064a\u0646": "133",
            "\u0641 \u0627": "134",
            "\u0644\u0630\u064a": "135",
            "\u064a \u0623": "136",
            "\u064a \u0628": "137",
            " \u0648\u0623": "138",
            "\u0627 \u0639": "139",
            "\u0627\u0644\u062e": "140",
            "\u062a\u0644 ": "141",
            "\u062a\u064a ": "142",
            "\u0642\u062f ": "143",
            "\u0644\u062f\u064a": "144",
            " \u0643\u0644": "145",
            " \u0645\u0639": "146",
            "\u0627\u0628 ": "147",
            "\u0627\u062e\u062a": "148",
            "\u0627\u0631 ": "149",
            "\u0627\u0644\u0646": "150",
            "\u0639\u0644\u0627": "151",
            "\u0645 \u0648": "152",
            "\u0645\u0639 ": "153",
            "\u0633 \u0627": "154",
            "\u0643\u0644 ": "155",
            "\u0644\u0627\u0621": "156",
            "\u0646 \u0628": "157",
            "\u0646 \u062a": "158",
            "\u064a \u0645": "159",
            "\u0639\u0631\u0628": "160",
            "\u0645 \u0628": "161",
            " \u0648\u0642": "162",
            " \u064a\u0642": "163",
            "\u0627 \u0644": "164",
            "\u0627 \u0645": "165",
            "\u0627\u0644\u0641": "166",
            "\u062a\u0637\u0627": "167",
            "\u062f\u0627\u062f": "168",
            "\u0644\u0645\u0633": "169",
            "\u0644\u0647 ": "170",
            "\u0647\u0630\u0627": "171",
            " \u0645\u062d": "172",
            "\u0624\u0644\u0627": "173",
            "\u0628\u064a ": "174",
            "\u0629 \u0645": "175",
            "\u0646 \u0644": "176",
            "\u0647\u0624\u0644": "177",
            "\u0643\u0646 ": "178",
            "\u0644\u0625\u0631": "179",
            "\u0644\u062a\u064a": "180",
            " \u0623\u0648": "181",
            " \u0627\u0646": "182",
            " \u0639\u0645": "183",
            "\u0627 \u0641": "184",
            "\u0629 \u0623": "185",
            "\u0637\u0627\u0641": "186",
            "\u0639\u0628 ": "187",
            "\u0644 \u0645": "188",
            "\u0646 \u0639": "189",
            "\u0648\u0631 ": "190",
            "\u064a\u0627 ": "191",
            " \u064a\u0633": "192",
            "\u0627 \u062a": "193",
            "\u0629 \u0628": "194",
            "\u0631\u0627\u0621": "195",
            "\u0639\u0627\u0644": "196",
            "\u0642\u0648\u0627": "197",
            "\u0642\u064a\u0629": "198",
            "\u0644\u0639\u0627": "199",
            "\u0645 \u064a": "200",
            "\u0645\u064a ": "201",
            "\u0645\u064a\u0629": "202",
            "\u0646\u064a\u0629": "203",
            "\u0623\u064a ": "204",
            "\u0627\u0628\u0627": "205",
            "\u0628\u063a\u062f": "206",
            "\u0628\u0644 ": "207",
            "\u0631\u0628 ": "208",
            "\u0639\u0645\u0627": "209",
            "\u063a\u062f\u0627": "210",
            "\u0645\u0627\u0644": "211",
            "\u0645\u0644\u064a": "212",
            "\u064a\u0633 ": "213",
            " \u0628\u0623": "214",
            " \u0628\u0639": "215",
            " \u0628\u063a": "216",
            " \u0648\u0645": "217",
            "\u0628\u0627\u062a": "218",
            "\u0628\u064a\u0629": "219",
            "\u0630\u0644\u0643": "220",
            "\u0639\u0629 ": "221",
            "\u0642\u0627\u0648": "222",
            "\u0642\u064a\u064a": "223",
            "\u0643\u064a ": "224",
            "\u0645 \u0645": "225",
            "\u064a \u0639": "226",
            " \u0639\u0631": "227",
            " \u0642\u0627": "228",
            "\u0627 \u0648": "229",
            "\u0631\u0649 ": "230",
            "\u0642 \u0627": "231",
            "\u0648\u0627\u062a": "232",
            "\u0648\u0645 ": "233",
            " \u0647\u0624": "234",
            "\u0627 \u0628": "235",
            "\u062f\u0627\u0645": "236",
            "\u062f\u064a ": "237",
            "\u0631\u0627\u062a": "238",
            "\u0634\u0639\u0628": "239",
            "\u0644\u0627\u0646": "240",
            "\u0644\u0634\u0639": "241",
            "\u0644\u0642\u0648": "242",
            "\u0644\u064a\u0627": "243",
            "\u0646 \u0647": "244",
            "\u064a \u062a": "245",
            "\u064a \u064a": "246",
            " \u0648\u0647": "247",
            " \u064a\u062d": "248",
            "\u062c\u0631\u0627": "249",
            "\u062c\u0645\u0627": "250",
            "\u062d\u0645\u062f": "251",
            "\u062f\u0645 ": "252",
            "\u0643\u0645 ": "253",
            "\u0644\u0627\u0648": "254",
            "\u0644\u0631\u0647": "255",
            "\u0645\u0627\u0639": "256",
            "\u0646 \u0642": "257",
            "\u0646\u0629 ": "258",
            "\u0647\u064a ": "259",
            " \u0628\u0644": "260",
            " \u0628\u0647": "261",
            " \u0644\u0647": "262",
            " \u0648\u064a": "263",
            "\u0627 \u0643": "264",
            "\u0627\u0630\u0627": "265",
            "\u0627\u0639 ": "266",
            "\u062a \u0645": "267",
            "\u062a\u062e\u0627": "268",
            "\u062e\u0627\u0628": "269",
            "\u0631 \u0645": "270",
            "\u0644\u0645\u062a": "271",
            "\u0645\u0633\u0644": "272",
            "\u0649 \u0623": "273",
            "\u064a\u0633\u062a": "274",
            "\u064a\u0637\u0627": "275",
            " \u0644\u0623": "276",
            " \u0644\u064a": "277",
            "\u0623\u0645\u0646": "278",
            "\u0627\u0633\u062a": "279",
            "\u0628\u0639\u0636": "280",
            "\u0629 \u062a": "281",
            "\u0631\u064a ": "282",
            "\u0635\u062f\u0627": "283",
            "\u0642 \u0648": "284",
            "\u0642\u0648\u0644": "285",
            "\u0645\u062f ": "286",
            "\u0646\u062a\u062e": "287",
            "\u0646\u0641\u0633": "288",
            "\u0646\u0647\u0627": "289",
            "\u0647\u0646\u0627": "290",
            "\u0623\u0639\u0645": "291",
            "\u0623\u0646\u0647": "292",
            "\u0627\u0626\u0646": "293",
            "\u0627\u0644\u0622": "294",
            "\u0627\u0644\u0643": "295",
            "\u062d\u0629 ": "296",
            "\u062f \u0645": "297",
            "\u0631 \u0639": "298",
            "\u0631\u0628\u064a": "299"
        },
        "azeri": {
            "l\u0259r": "0",
            "in ": "1",
            "\u0131n ": "2",
            "lar": "3",
            "da ": "4",
            "an ": "5",
            "ir ": "6",
            "d\u0259 ": "7",
            "ki ": "8",
            " bi": "9",
            "\u0259n ": "10",
            "\u0259ri": "11",
            "ar\u0131": "12",
            "\u0259r ": "13",
            "dir": "14",
            "nda": "15",
            " ki": "16",
            "rin": "17",
            "n\u0131n": "18",
            "\u0259si": "19",
            "ini": "20",
            " ed": "21",
            " qa": "22",
            " t\u0259": "23",
            " ba": "24",
            " ol": "25",
            "as\u0131": "26",
            "il\u0259": "27",
            "r\u0131n": "28",
            " ya": "29",
            "an\u0131": "30",
            " v\u0259": "31",
            "nd\u0259": "32",
            "ni ": "33",
            "ara": "34",
            "\u0131n\u0131": "35",
            "\u0131nd": "36",
            " bu": "37",
            "si ": "38",
            "ib ": "39",
            "aq ": "40",
            "d\u0259n": "41",
            "iya": "42",
            "n\u0259 ": "43",
            "r\u0259 ": "44",
            "n b": "45",
            "s\u0131n": "46",
            "v\u0259 ": "47",
            "iri": "48",
            "l\u0259 ": "49",
            "nin": "50",
            "\u0259li": "51",
            " de": "52",
            " m\u00fc": "53",
            "bir": "54",
            "n s": "55",
            "ri ": "56",
            "\u0259k ": "57",
            " az": "58",
            " s\u0259": "59",
            "ar ": "60",
            "bil": "61",
            "z\u0259r": "62",
            "bu ": "63",
            "dan": "64",
            "edi": "65",
            "ind": "66",
            "man": "67",
            "un ": "68",
            "\u0259r\u0259": "69",
            " ha": "70",
            "lan": "71",
            "yy\u0259": "72",
            "iyy": "73",
            " il": "74",
            " ne": "75",
            "r k": "76",
            "\u0259 b": "77",
            " is": "78",
            "na ": "79",
            "nun": "80",
            "\u0131r ": "81",
            " da": "82",
            " h\u0259": "83",
            "a b": "84",
            "in\u0259": "85",
            "sin": "86",
            "yan": "87",
            "\u0259rb": "88",
            " d\u0259": "89",
            " m\u0259": "90",
            " q\u0259": "91",
            "d\u0131r": "92",
            "li ": "93",
            "ola": "94",
            "rba": "95",
            "az\u0259": "96",
            "can": "97",
            "l\u0131 ": "98",
            "nla": "99",
            " et": "100",
            " g\u00f6": "101",
            "al\u0131": "102",
            "ayc": "103",
            "bay": "104",
            "eft": "105",
            "ist": "106",
            "n i": "107",
            "nef": "108",
            "tl\u0259": "109",
            "yca": "110",
            "y\u0259t": "111",
            "\u0259c\u0259": "112",
            " la": "113",
            "ild": "114",
            "n\u0131 ": "115",
            "tin": "116",
            "ldi": "117",
            "lik": "118",
            "n h": "119",
            "n m": "120",
            "oyu": "121",
            "raq": "122",
            "ya ": "123",
            "\u0259ti": "124",
            " ar": "125",
            "ada": "126",
            "ed\u0259": "127",
            "mas": "128",
            "s\u0131 ": "129",
            "\u0131na": "130",
            "\u0259 d": "131",
            "\u0259l\u0259": "132",
            "ay\u0131": "133",
            "iyi": "134",
            "lma": "135",
            "m\u0259k": "136",
            "n d": "137",
            "ti ": "138",
            "yin": "139",
            "yun": "140",
            "\u0259t ": "141",
            "az\u0131": "142",
            "ft ": "143",
            "i t": "144",
            "lli": "145",
            "n a": "146",
            "ra ": "147",
            " c\u0259": "148",
            " g\u0259": "149",
            " ko": "150",
            " n\u0259": "151",
            " oy": "152",
            "a d": "153",
            "ana": "154",
            "c\u0259k": "155",
            "eyi": "156",
            "ilm": "157",
            "irl": "158",
            "lay": "159",
            "liy": "160",
            "lub": "161",
            "n \u0259": "162",
            "ril": "163",
            "rl\u0259": "164",
            "unu": "165",
            "ver": "166",
            "\u00fcn ": "167",
            "\u0259 o": "168",
            "\u0259ni": "169",
            " he": "170",
            " ma": "171",
            " on": "172",
            " pa": "173",
            "ala": "174",
            "dey": "175",
            "i m": "176",
            "ima": "177",
            "lm\u0259": "178",
            "m\u0259t": "179",
            "par": "180",
            "y\u0259 ": "181",
            "\u0259tl": "182",
            " al": "183",
            " mi": "184",
            " sa": "185",
            " \u0259l": "186",
            "ad\u0131": "187",
            "ak\u0131": "188",
            "and": "189",
            "ard": "190",
            "art": "191",
            "ayi": "192",
            "i a": "193",
            "i q": "194",
            "i y": "195",
            "ili": "196",
            "ill": "197",
            "is\u0259": "198",
            "n o": "199",
            "n q": "200",
            "olu": "201",
            "rla": "202",
            "st\u0259": "203",
            "s\u0259 ": "204",
            "tan": "205",
            "tel": "206",
            "yar": "207",
            "\u0259d\u0259": "208",
            " me": "209",
            " r\u0259": "210",
            " ve": "211",
            " ye": "212",
            "a k": "213",
            "at ": "214",
            "ba\u015f": "215",
            "diy": "216",
            "ent": "217",
            "eti": "218",
            "h\u0259s": "219",
            "i i": "220",
            "ik ": "221",
            "la ": "222",
            "mi\u015f": "223",
            "n n": "224",
            "nu ": "225",
            "qar": "226",
            "ran": "227",
            "t\u0259r": "228",
            "xan": "229",
            "\u0259 a": "230",
            "\u0259 g": "231",
            "\u0259 t": "232",
            " d\u00fc": "233",
            "ama": "234",
            "b k": "235",
            "dil": "236",
            "era": "237",
            "etm": "238",
            "i b": "239",
            "kil": "240",
            "mil": "241",
            "n r": "242",
            "qla": "243",
            "r s": "244",
            "ras": "245",
            "siy": "246",
            "son": "247",
            "tim": "248",
            "yer": "249",
            "\u0259 k": "250",
            " g\u00fc": "251",
            " so": "252",
            " s\u00f6": "253",
            " te": "254",
            " xa": "255",
            "ai ": "256",
            "bar": "257",
            "cti": "258",
            "di ": "259",
            "eri": "260",
            "g\u00f6r": "261",
            "g\u00fcn": "262",
            "g\u0259l": "263",
            "hb\u0259": "264",
            "ih\u0259": "265",
            "iki": "266",
            "isi": "267",
            "lin": "268",
            "mai": "269",
            "maq": "270",
            "n k": "271",
            "n t": "272",
            "n v": "273",
            "onu": "274",
            "qan": "275",
            "q\u0259z": "276",
            "t\u0259 ": "277",
            "xal": "278",
            "yib": "279",
            "yih": "280",
            "zet": "281",
            "z\u0131r": "282",
            "\u0131b ": "283",
            "\u0259 m": "284",
            "\u0259ze": "285",
            " br": "286",
            " in": "287",
            " i\u0307": "288",
            " pr": "289",
            " ta": "290",
            " to": "291",
            " \u00fc\u00e7": "292",
            "a o": "293",
            "ali": "294",
            "ani": "295",
            "anl": "296",
            "aql": "297",
            "azi": "298",
            "bri": "299"
        },
        "bengali": {
            "\u09be\u09b0 ": "0",
            "\u09af\u09bc ": "1",
            "\u09c7\u09af\u09bc": "2",
            "\u09af\u09bc\u09be": "3",
            " \u0995\u09b0": "4",
            "\u09c7\u09a4 ": "5",
            " \u0995\u09be": "6",
            " \u09aa\u09be": "7",
            " \u09a4\u09be": "8",
            "\u09a8\u09be ": "9",
            "\u09be\u09af\u09bc": "10",
            "\u09c7\u09b0 ": "11",
            "\u09af\u09bc\u09c7": "12",
            " \u09ac\u09be": "13",
            "\u09c7\u09ac ": "14",
            " \u09af\u09be": "15",
            " \u09b9\u09c7": "16",
            " \u09b8\u09be": "17",
            "\u09be\u09a8 ": "18",
            "\u09c7\u099b ": "19",
            " \u09bf\u09a8": "20",
            "\u09c7\u09b2 ": "21",
            " \u09bf\u09a6": "22",
            " \u09a8\u09be": "23",
            " \u09bf\u09ac": "24",
            "\u09c7\u0995 ": "25",
            "\u09b2\u09be ": "26",
            "\u09a4\u09be ": "27",
            " \u09ac\u0a98": "28",
            " \u09bf\u0995": "29",
            "\u0995\u09b0\u09c7": "30",
            " \u09aa\u0a9a": "31",
            "\u09be\u09c7\u09b0": "32",
            "\u09bf\u09a8\u09c7": "33",
            "\u09b0\u09be ": "34",
            " \u09cb\u09ac": "35",
            "\u0995\u09be ": "36",
            " \u0995\u09c7": "37",
            " \u099f\u09be": "38",
            "\u09b0 \u0995": "39",
            "\u09c7\u09b2\u09be": "40",
            " \u09cb\u0995": "41",
            " \u09ae\u09be": "42",
            " \u09cb\u09a6": "43",
            " \u09cb\u09ae": "44",
            "\u09a6\u09b0 ": "45",
            "\u09bc\u09be ": "46",
            "\u09bf\u09a6\u09c7": "47",
            "\u09be\u0995\u09be": "48",
            "\u09bc\u09c7\u099b": "49",
            "\u09c7\u09a6\u09b0": "50",
            " \u0986\u09c7": "51",
            " \u0993 ": "52",
            "\u09be\u09b2 ": "53",
            "\u09bf\u099f ": "54",
            " \u09ae\u09c1": "55",
            "\u0995\u09c7\u09b0": "56",
            "\u09b9\u09af\u09bc": "57",
            "\u0995\u09b0\u09be": "58",
            "\u09aa\u09b0 ": "59",
            "\u09aa\u09be\u09c7": "60",
            " \u098f\u0995": "61",
            " \u09aa\u09a6": "62",
            "\u099f\u09be\u0995": "63",
            "\u09a1\u09bc ": "64",
            "\u0995\u09be\u09a8": "65",
            "\u099f\u09be ": "66",
            "\u09a6\u0a97\u09be": "67",
            "\u09aa\u09a6\u0a97": "68",
            "\u09be\u09a1\u09bc": "69",
            "\u09cb\u0995\u09be": "70",
            "\u0993\u09af\u09bc": "71",
            "\u0995\u09be\u09aa": "72",
            "\u09b9\u09c7\u09af": "73",
            "\u09c7\u09a8\u09b0": "74",
            " \u09b9\u09af": "75",
            "\u09a6\u09c7\u09af": "76",
            "\u09a8\u09b0 ": "77",
            "\u09be\u09a8\u09be": "78",
            "\u09be\u09c7\u09b2": "79",
            " \u0986\u09b0": "80",
            " \u09bc ": "81",
            "\u09ac\u0a98\u09ac": "82",
            "\u09bf\u09af\u09bc": "83",
            " \u09a6\u09be": "84",
            " \u09b8\u09ae": "85",
            "\u0995\u09be\u09b0": "86",
            "\u09b9\u09be\u09b0": "87",
            "\u09be\u0987 ": "88",
            "\u09a1\u09bc\u09be": "89",
            "\u09bf\u09ac\u09bf": "90",
            " \u09b0\u09be": "91",
            " \u09b2\u09be": "92",
            "\u09a8\u09be\u09b0": "93",
            "\u09ac\u09b9\u09be": "94",
            "\u09ac\u09be ": "95",
            "\u09af\u09be\u09af": "96",
            "\u09c7\u09a8 ": "97",
            "\u0a98\u09ac\u09b9": "98",
            " \u09ad\u09be": "99",
            " \u09b8\u09c7": "100",
            " \u09cb\u09af": "101",
            "\u09b0\u09b0 ": "102",
            "\u09bc\u09be\u09b0": "103",
            "\u09bc\u09be\u09b2": "104",
            "\u0a97\u09be ": "105",
            "\u09a5\u09c7\u0995": "106",
            "\u09ad\u09be\u09c7": "107",
            "\u09bc\u09c7 ": "108",
            "\u09c7\u09b0\u09b0": "109",
            " \u09a7\u09b0": "110",
            " \u09b9\u09be": "111",
            "\u09a8\u0a98 ": "112",
            "\u09b0\u09c7\u09a8": "113",
            "\u09be\u09c7\u09ac": "114",
            "\u09bf\u09a1\u09bc": "115",
            "\u09bf\u09b0 ": "116",
            " \u09cb\u09a5": "117",
            "\u09a4\u09be\u09b0": "118",
            "\u09ac\u09bf\u09ad": "119",
            "\u09b0\u09c7\u09a4": "120",
            "\u09b8\u09be\u09c7": "121",
            "\u09be\u0995\u09c7": "122",
            "\u09be\u09c7\u09a4": "123",
            "\u09bf\u09ad\u0a2d": "124",
            "\u09c7 \u09ac": "125",
            "\u09cb\u09a5\u09c7": "126",
            " \u09cb\u09aa": "127",
            " \u09cb\u09b8": "128",
            "\u09ac\u09be\u09b0": "129",
            "\u09ad\u0a2d ": "130",
            "\u09b0\u09a8 ": "131",
            "\u09be\u09ae ": "132",
            " \u098f\u0996": "133",
            "\u0986\u09b0 ": "134",
            "\u0995\u09be\u09c7": "135",
            "\u09a6\u09a8 ": "136",
            "\u09b8\u09be\u099c": "137",
            "\u09be\u09c7\u0995": "138",
            "\u09be\u09c7\u09a8": "139",
            "\u09c7\u09a8\u09be": "140",
            " \u0998\u09c7": "141",
            " \u09a4\u09c7": "142",
            " \u09b0\u09c7": "143",
            "\u09a4\u09c7\u09ac": "144",
            "\u09ac\u09a8 ": "145",
            "\u09ac\u0a98\u09be": "146",
            "\u09c7\u09a1\u09bc": "147",
            "\u09c7\u09ac\u09a8": "148",
            " \u0996\u09c1": "149",
            " \u099a\u09be": "150",
            " \u09b8\u09c1": "151",
            "\u0995\u09c7 ": "152",
            "\u09a7\u09b0\u09c7": "153",
            "\u09b0 \u09cb": "154",
            "\u09bc \u09bf": "155",
            "\u09be \u09bf": "156",
            "\u09be\u09c7\u09a5": "157",
            "\u09be\u0a20\u09be": "158",
            "\u09bf\u09a6 ": "159",
            "\u09bf\u09a8 ": "160",
            " \u0985\u09a8": "161",
            " \u0986\u09aa": "162",
            " \u0986\u09ae": "163",
            " \u09a5\u09be": "164",
            " \u09ac\u0a9a": "165",
            " \u09cb\u09ab": "166",
            " \u09cc\u09a4": "167",
            "\u0998\u09c7\u09b0": "168",
            "\u09a4\u09c7 ": "169",
            "\u09ae\u09af\u09bc": "170",
            "\u09af\u09be\u0a20": "171",
            "\u09b0 \u09b8": "172",
            "\u09b0\u09be\u0996": "173",
            "\u09be \u09ac": "174",
            "\u09be \u09cb": "175",
            "\u09be\u09b2\u09be": "176",
            "\u09bf\u0995 ": "177",
            "\u09bf\u09b6 ": "178",
            "\u09c7\u0996 ": "179",
            " \u098f\u09b0": "180",
            " \u099a\u0a93": "181",
            " \u09bf\u09a1": "182",
            "\u0996\u09a8 ": "183",
            "\u09a1\u09bc\u09c7": "184",
            "\u09b0 \u09ac": "185",
            "\u09bc\u09b0 ": "186",
            "\u09be\u0987\u09c7": "187",
            "\u09be\u09c7\u09a6": "188",
            "\u09bf\u09a6\u09a8": "189",
            "\u09c7\u09b0\u09a8": "190",
            " \u09a4\u0a74": "191",
            "\u099b\u09be\u09a1": "192",
            "\u099c\u09a8\u0a98": "193",
            "\u09a4\u09be\u0987": "194",
            "\u09ae\u09be ": "195",
            "\u09ae\u09be\u09c7": "196",
            "\u09b2\u09be\u09b0": "197",
            "\u09be\u099c ": "198",
            "\u09be\u09a4\u09be": "199",
            "\u09be\u09ae\u09be": "200",
            "\u0a0a\u09c7\u09b2": "201",
            "\u0a97\u09be\u09b0": "202",
            " \u09b8\u09ac": "203",
            "\u0986\u09aa\u09a8": "204",
            "\u098f\u0995\u099f": "205",
            "\u0995\u09be\u09bf": "206",
            "\u099c\u09be\u0987": "207",
            "\u099f\u09b0 ": "208",
            "\u09a1\u099c\u09be": "209",
            "\u09a6\u09c7\u0996": "210",
            "\u09aa\u09a8\u09be": "211",
            "\u09b0\u0993 ": "212",
            "\u09b2\u09c7 ": "213",
            "\u09b9\u09c7\u09ac": "214",
            "\u09be\u099c\u09be": "215",
            "\u09be\u09bf\u099f": "216",
            "\u09bf\u09a1\u099c": "217",
            "\u09c7\u09a5 ": "218",
            " \u098f\u09ac": "219",
            " \u099c\u09a8": "220",
            " \u099c\u09be": "221",
            "\u0986\u09ae\u09be": "222",
            "\u0997\u09c7\u09b2": "223",
            "\u099c\u09be\u09a8": "224",
            "\u09a8\u09c7\u09a4": "225",
            "\u09ac\u09bf\u09b6": "226",
            "\u09ae\u09c1\u09c7": "227",
            "\u09ae\u09c7\u09af": "228",
            "\u09b0 \u09aa": "229",
            "\u09b8\u09c7 ": "230",
            "\u09b9\u09c7\u09b2": "231",
            "\u09bc \u09cb": "232",
            "\u09be \u09b9": "233",
            "\u09be\u0993\u09af": "234",
            "\u09cb\u09ae\u0995": "235",
            "\u0a98\u09be\u09bf": "236",
            " \u0985\u09c7": "237",
            " \u099f ": "238",
            " \u09cb\u0997": "239",
            " \u09cb\u09a8": "240",
            "\u099c\u09b0 ": "241",
            "\u09a4\u09bf\u09b0": "242",
            "\u09a6\u09be\u09ae": "243",
            "\u09aa\u09a1\u09bc": "244",
            "\u09aa\u09be\u09b0": "245",
            "\u09ac\u09be\u0998": "246",
            "\u09ae\u0995\u09be": "247",
            "\u09ae\u09be\u09ae": "248",
            "\u09af\u09bc\u09b0": "249",
            "\u09af\u09be\u09c7": "250",
            "\u09b0 \u09ae": "251",
            "\u09b0\u09c7 ": "252",
            "\u09b2\u09b0 ": "253",
            "\u09be \u0995": "254",
            "\u09be\u0997 ": "255",
            "\u09be\u09ac\u09be": "256",
            "\u09be\u09b0\u09be": "257",
            "\u09be\u09bf\u09a8": "258",
            "\u09c7 \u0997": "259",
            "\u09c7\u0997 ": "260",
            "\u09c7\u09b2\u09b0": "261",
            "\u09cb\u09a6\u0996": "262",
            "\u09cb\u09ac\u09bf": "263",
            "\u0a93\u09b2 ": "264",
            " \u09a6\u09c7": "265",
            " \u09aa\u09c1": "266",
            " \u09ac\u09c7": "267",
            "\u0985\u09c7\u09a8": "268",
            "\u098f\u0996\u09a8": "269",
            "\u0995\u099b\u09c1": "270",
            "\u0995\u09be\u09b2": "271",
            "\u0997\u09c7\u09af": "272",
            "\u099b\u09a8 ": "273",
            "\u09a4 \u09aa": "274",
            "\u09a8\u09c7\u09af": "275",
            "\u09aa\u09be\u09bf": "276",
            "\u09ae\u09a8 ": "277",
            "\u09b0 \u0986": "278",
            "\u09b0\u09be\u09b0": "279",
            "\u09be\u0993 ": "280",
            "\u09be\u09aa ": "281",
            "\u09bf\u0995\u099b": "282",
            "\u09bf\u0997\u09c7": "283",
            "\u09c7\u099b\u09a8": "284",
            "\u09c7\u099c\u09b0": "285",
            "\u09cb\u09ae\u09be": "286",
            "\u09cb\u09ae\u09c7": "287",
            "\u09cc\u09a4\u09bf": "288",
            "\u0a98\u09be\u09c7": "289",
            " ' ": "290",
            " \u098f\u099b": "291",
            " \u099b\u09be": "292",
            " \u09ac\u09b2": "293",
            " \u09af\u09bf": "294",
            " \u09b6\u09bf": "295",
            " \u09bf\u09ae": "296",
            " \u09cb\u09b2": "297",
            "\u098f\u099b\u09be": "298",
            "\u0996\u09be ": "299"
        },
        "bulgarian": {
            "\u043d\u0430 ": "0",
            " \u043d\u0430": "1",
            "\u0442\u043e ": "2",
            " \u043f\u0440": "3",
            " \u0437\u0430": "4",
            "\u0442\u0430 ": "5",
            " \u043f\u043e": "6",
            "\u0438\u0442\u0435": "7",
            "\u0442\u0435 ": "8",
            "\u0430 \u043f": "9",
            "\u0430 \u0441": "10",
            " \u043e\u0442": "11",
            "\u0437\u0430 ": "12",
            "\u0430\u0442\u0430": "13",
            "\u0438\u044f ": "14",
            " \u0432 ": "15",
            "\u0435 \u043d": "16",
            " \u0434\u0430": "17",
            "\u0430 \u043d": "18",
            " \u0441\u0435": "19",
            " \u043a\u043e": "20",
            "\u0434\u0430 ": "21",
            "\u043e\u0442 ": "22",
            "\u0430\u043d\u0438": "23",
            "\u043f\u0440\u0435": "24",
            "\u043d\u0435 ": "25",
            "\u0435\u043d\u0438": "26",
            "\u043e \u043d": "27",
            "\u043d\u0438 ": "28",
            "\u0441\u0435 ": "29",
            " \u0438 ": "30",
            "\u043d\u043e ": "31",
            "\u0430\u043d\u0435": "32",
            "\u0435\u0442\u043e": "33",
            "\u0430 \u0432": "34",
            "\u0432\u0430 ": "35",
            "\u0432\u0430\u043d": "36",
            "\u0435 \u043f": "37",
            "\u0430 \u043e": "38",
            "\u043e\u0442\u043e": "39",
            "\u0440\u0430\u043d": "40",
            "\u0430\u0442 ": "41",
            "\u0440\u0435\u0434": "42",
            " \u043d\u0435": "43",
            "\u0430 \u0434": "44",
            "\u0438 \u043f": "45",
            " \u0434\u043e": "46",
            "\u043f\u0440\u043e": "47",
            " \u0441\u044a": "48",
            "\u043b\u0438 ": "49",
            "\u043f\u0440\u0438": "50",
            "\u043d\u0438\u044f": "51",
            "\u0441\u043a\u0438": "52",
            "\u0442\u0435\u043b": "53",
            "\u0430 \u0438": "54",
            "\u043f\u043e ": "55",
            "\u0440\u0438 ": "56",
            " \u0435 ": "57",
            " \u043a\u0430": "58",
            "\u0438\u0440\u0430": "59",
            "\u043a\u0430\u0442": "60",
            "\u043d\u0438\u0435": "61",
            "\u043d\u0438\u0442": "62",
            "\u0435 \u0437": "63",
            "\u0438 \u0441": "64",
            "\u043e \u0441": "65",
            "\u043e\u0441\u0442": "66",
            "\u0447\u0435 ": "67",
            " \u0440\u0430": "68",
            "\u0438\u0441\u0442": "69",
            "\u043e \u043f": "70",
            " \u0438\u0437": "71",
            " \u0441\u0430": "72",
            "\u0435 \u0434": "73",
            "\u0438\u043d\u0438": "74",
            "\u043a\u0438 ": "75",
            "\u043c\u0438\u043d": "76",
            " \u043c\u0438": "77",
            "\u0430 \u0431": "78",
            "\u0430\u0432\u0430": "79",
            "\u0435 \u0432": "80",
            "\u0438\u0435 ": "81",
            "\u043f\u043e\u043b": "82",
            "\u0441\u0442\u0432": "83",
            "\u0442 \u043d": "84",
            " \u0432\u044a": "85",
            " \u0441\u0442": "86",
            " \u0442\u043e": "87",
            "\u0430\u0437\u0430": "88",
            "\u0435 \u043e": "89",
            "\u043e\u0432 ": "90",
            "\u0441\u0442 ": "91",
            "\u044a\u0442 ": "92",
            "\u0438 \u043d": "93",
            "\u0438\u044f\u0442": "94",
            "\u043d\u0430\u0442": "95",
            "\u0440\u0430 ": "96",
            " \u0431\u044a": "97",
            " \u0447\u0435": "98",
            "\u0430\u043b\u043d": "99",
            "\u0435 \u0441": "100",
            "\u0435\u043d ": "101",
            "\u0435\u0441\u0442": "102",
            "\u0438 \u0434": "103",
            "\u043b\u0435\u043d": "104",
            "\u043d\u0438\u0441": "105",
            "\u043e \u043e": "106",
            "\u043e\u0432\u0438": "107",
            " \u043e\u0431": "108",
            " \u0441\u043b": "109",
            "\u0430 \u0440": "110",
            "\u0430\u0442\u043e": "111",
            "\u043a\u043e\u043d": "112",
            "\u043d\u043e\u0441": "113",
            "\u0440\u043e\u0432": "114",
            "\u0449\u0435 ": "115",
            " \u0440\u0435": "116",
            " \u0441 ": "117",
            " \u0441\u043f": "118",
            "\u0432\u0430\u0442": "119",
            "\u0435\u0448\u0435": "120",
            "\u0438 \u0432": "121",
            "\u0438\u0435\u0442": "122",
            "\u043e \u0432": "123",
            "\u043e\u0432\u0435": "124",
            "\u0441\u0442\u0430": "125",
            "\u0430 \u043a": "126",
            "\u0430 \u0442": "127",
            "\u0434\u0430\u0442": "128",
            "\u0435\u043d\u0442": "129",
            "\u043a\u0430 ": "130",
            "\u043b\u0435\u0434": "131",
            "\u043d\u0435\u0442": "132",
            "\u043e\u0440\u0438": "133",
            "\u0441\u0442\u0440": "134",
            "\u0441\u0442\u044a": "135",
            "\u0442\u0438 ": "136",
            "\u0442\u044a\u0440": "137",
            " \u0442\u0435": "138",
            "\u0430 \u0437": "139",
            "\u0430 \u043c": "140",
            "\u0430\u0434 ": "141",
            "\u0430\u043d\u0430": "142",
            "\u0435\u043d\u043e": "143",
            "\u0438 \u043e": "144",
            "\u0438\u043d\u0430": "145",
            "\u0438\u0442\u0438": "146",
            "\u043c\u0430 ": "147",
            "\u0441\u043a\u0430": "148",
            "\u0441\u043b\u0435": "149",
            "\u0442\u0432\u043e": "150",
            "\u0442\u0435\u0440": "151",
            "\u0446\u0438\u044f": "152",
            "\u044f\u0442 ": "153",
            " \u0431\u0435": "154",
            " \u0434\u0435": "155",
            " \u043f\u0430": "156",
            "\u0430\u0442\u0435": "157",
            "\u0432\u0435\u043d": "158",
            "\u0432\u0438 ": "159",
            "\u0432\u0438\u0442": "160",
            "\u0438 \u0437": "161",
            "\u0438 \u0438": "162",
            "\u043d\u0430\u0440": "163",
            "\u043d\u043e\u0432": "164",
            "\u043e\u0432\u0430": "165",
            "\u043f\u043e\u0432": "166",
            "\u0440\u0435\u0437": "167",
            "\u0440\u0438\u0442": "168",
            "\u0441\u0430 ": "169",
            "\u044f\u0442\u0430": "170",
            " \u0433\u043e": "171",
            " \u0449\u0435": "172",
            "\u0430\u043b\u0438": "173",
            "\u0432 \u043f": "174",
            "\u0433\u0440\u0430": "175",
            "\u0435 \u0438": "176",
            "\u0435\u0434\u0438": "177",
            "\u0435\u043b\u0438": "178",
            "\u0438\u043b\u0438": "179",
            "\u043a\u0430\u0437": "180",
            "\u043a\u0438\u0442": "181",
            "\u043b\u043d\u043e": "182",
            "\u043c\u0435\u043d": "183",
            "\u043e\u043b\u0438": "184",
            "\u0440\u0430\u0437": "185",
            " \u0432\u0435": "186",
            " \u0433\u0440": "187",
            " \u0438\u043c": "188",
            " \u043c\u0435": "189",
            " \u043f\u044a": "190",
            "\u0430\u0432\u0438": "191",
            "\u0430\u043a\u043e": "192",
            "\u0430\u0447\u0430": "193",
            "\u0432\u0438\u043d": "194",
            "\u0432\u043e ": "195",
            "\u0433\u043e\u0432": "196",
            "\u0434\u0430\u043d": "197",
            "\u0434\u0438 ": "198",
            "\u0434\u043e ": "199",
            "\u0435\u0434 ": "200",
            "\u0435\u0440\u0438": "201",
            "\u0435\u0440\u043e": "202",
            "\u0436\u0434\u0430": "203",
            "\u0438\u0442\u043e": "204",
            "\u043a\u043e\u0432": "205",
            "\u043a\u043e\u043b": "206",
            "\u043b\u043d\u0438": "207",
            "\u043c\u0435\u0440": "208",
            "\u043d\u0430\u0447": "209",
            "\u043e \u0437": "210",
            "\u043e\u043b\u0430": "211",
            "\u043e\u043d ": "212",
            "\u043e\u043d\u0430": "213",
            "\u043f\u0440\u0430": "214",
            "\u0440\u0430\u0432": "215",
            "\u0440\u0435\u043c": "216",
            "\u0441\u0438\u044f": "217",
            "\u0441\u0442\u0438": "218",
            "\u0442 \u043f": "219",
            "\u0442\u0430\u043d": "220",
            "\u0445\u0430 ": "221",
            "\u0448\u0435 ": "222",
            "\u0448\u0435\u043d": "223",
            "\u044a\u043b\u0433": "224",
            " \u0431\u0430": "225",
            " \u0441\u0438": "226",
            "\u0430\u0440\u043e": "227",
            "\u0431\u044a\u043b": "228",
            "\u0432 \u0440": "229",
            "\u0433\u0430\u0440": "230",
            "\u0435 \u0435": "231",
            "\u0435\u043b\u043d": "232",
            "\u0435\u043c\u0435": "233",
            "\u0438\u043a\u043e": "234",
            "\u0438\u043c\u0430": "235",
            "\u043a\u043e ": "236",
            "\u043a\u043e\u0438": "237",
            "\u043b\u0430 ": "238",
            "\u043b\u0433\u0430": "239",
            "\u043e \u0434": "240",
            "\u043e\u0437\u0438": "241",
            "\u043e\u0438\u0442": "242",
            "\u043f\u043e\u0434": "243",
            "\u0440\u0435\u0441": "244",
            "\u0440\u0438\u0435": "245",
            "\u0441\u0442\u043e": "246",
            "\u0442 \u043a": "247",
            "\u0442 \u043c": "248",
            "\u0442 \u0441": "249",
            "\u0443\u0441\u0442": "250",
            " \u0431\u0438": "251",
            " \u0434\u0432": "252",
            " \u0434\u044a": "253",
            " \u043c\u0430": "254",
            " \u043c\u043e": "255",
            " \u043d\u0438": "256",
            " \u043e\u0441": "257",
            "\u0430\u043b\u0430": "258",
            "\u0430\u043d\u0441": "259",
            "\u0430\u0440\u0430": "260",
            "\u0430\u0442\u0438": "261",
            "\u0430\u0446\u0438": "262",
            "\u0431\u0435\u0448": "263",
            "\u0432\u044a\u0440": "264",
            "\u0435 \u0440": "265",
            "\u0435\u0434\u0432": "266",
            "\u0435\u043c\u0430": "267",
            "\u0436\u0430\u0432": "268",
            "\u0438 \u043a": "269",
            "\u0438\u0430\u043b": "270",
            "\u0438\u0446\u0430": "271",
            "\u0438\u0447\u0435": "272",
            "\u043a\u0438\u044f": "273",
            "\u043b\u0438\u0442": "274",
            "\u043e \u0431": "275",
            "\u043e\u0432\u043e": "276",
            "\u043e\u0434\u0438": "277",
            "\u043e\u043a\u0430": "278",
            "\u043f\u043e\u0441": "279",
            "\u0440\u043e\u0434": "280",
            "\u0441\u0435\u0434": "281",
            "\u0441\u043b\u0443": "282",
            "\u0442 \u0438": "283",
            "\u0442\u043e\u0432": "284",
            "\u0443\u0432\u0430": "285",
            "\u0446\u0438\u0430": "286",
            "\u0447\u0435\u0441": "287",
            "\u044f \u0437": "288",
            " \u0432\u043e": "289",
            " \u0438\u043b": "290",
            " \u0441\u043a": "291",
            " \u0442\u0440": "292",
            " \u0446\u0435": "293",
            "\u0430\u043c\u0438": "294",
            "\u0430\u0440\u0438": "295",
            "\u0431\u0430\u0442": "296",
            "\u0431\u0438 ": "297",
            "\u0431\u0440\u0430": "298",
            "\u0431\u044a\u0434": "299"
        },
        "cebuano": {
            "ng ": "0",
            "sa ": "1",
            " sa": "2",
            "ang": "3",
            "ga ": "4",
            "nga": "5",
            " ka": "6",
            " ng": "7",
            "an ": "8",
            " an": "9",
            " na": "10",
            " ma": "11",
            " ni": "12",
            "a s": "13",
            "a n": "14",
            "on ": "15",
            " pa": "16",
            " si": "17",
            "a k": "18",
            "a m": "19",
            " ba": "20",
            "ong": "21",
            "a i": "22",
            "ila": "23",
            " mg": "24",
            "mga": "25",
            "a p": "26",
            "iya": "27",
            "a a": "28",
            "ay ": "29",
            "ka ": "30",
            "ala": "31",
            "ing": "32",
            "g m": "33",
            "n s": "34",
            "g n": "35",
            "lan": "36",
            " gi": "37",
            "na ": "38",
            "ni ": "39",
            "o s": "40",
            "g p": "41",
            "n n": "42",
            " da": "43",
            "ag ": "44",
            "pag": "45",
            "g s": "46",
            "yan": "47",
            "ayo": "48",
            "o n": "49",
            "si ": "50",
            " mo": "51",
            "a b": "52",
            "g a": "53",
            "ail": "54",
            "g b": "55",
            "han": "56",
            "a d": "57",
            "asu": "58",
            "nag": "59",
            "ya ": "60",
            "man": "61",
            "ne ": "62",
            "pan": "63",
            "kon": "64",
            " il": "65",
            " la": "66",
            "aka": "67",
            "ako": "68",
            "ana": "69",
            "bas": "70",
            "ko ": "71",
            "od ": "72",
            "yo ": "73",
            " di": "74",
            " ko": "75",
            " ug": "76",
            "a u": "77",
            "g k": "78",
            "kan": "79",
            "la ": "80",
            "len": "81",
            "sur": "82",
            "ug ": "83",
            " ai": "84",
            "apa": "85",
            "aw ": "86",
            "d s": "87",
            "g d": "88",
            "g g": "89",
            "ile": "90",
            "nin": "91",
            " iy": "92",
            " su": "93",
            "ene": "94",
            "og ": "95",
            "ot ": "96",
            "aba": "97",
            "aha": "98",
            "as ": "99",
            "imo": "100",
            " ki": "101",
            "a t": "102",
            "aga": "103",
            "ban": "104",
            "ero": "105",
            "nan": "106",
            "o k": "107",
            "ran": "108",
            "ron": "109",
            "sil": "110",
            "una": "111",
            "usa": "112",
            " us": "113",
            "a g": "114",
            "ahi": "115",
            "ani": "116",
            "er ": "117",
            "ha ": "118",
            "i a": "119",
            "rer": "120",
            "yon": "121",
            " pu": "122",
            "ini": "123",
            "nak": "124",
            "ro ": "125",
            "to ": "126",
            "ure": "127",
            " ed": "128",
            " og": "129",
            " wa": "130",
            "ili": "131",
            "mo ": "132",
            "n a": "133",
            "nd ": "134",
            "o a": "135",
            " ad": "136",
            " du": "137",
            " pr": "138",
            "aro": "139",
            "i s": "140",
            "ma ": "141",
            "n m": "142",
            "ulo": "143",
            "und": "144",
            " ta": "145",
            "ara": "146",
            "asa": "147",
            "ato": "148",
            "awa": "149",
            "dmu": "150",
            "e n": "151",
            "edm": "152",
            "ina": "153",
            "mak": "154",
            "mun": "155",
            "niy": "156",
            "san": "157",
            "wa ": "158",
            " tu": "159",
            " un": "160",
            "a l": "161",
            "bay": "162",
            "iga": "163",
            "ika": "164",
            "ita": "165",
            "kin": "166",
            "lis": "167",
            "may": "168",
            "os ": "169",
            " ar": "170",
            "ad ": "171",
            "ali": "172",
            "ama": "173",
            "ers": "174",
            "ipa": "175",
            "isa": "176",
            "mao": "177",
            "nim": "178",
            "t s": "179",
            "tin": "180",
            " ak": "181",
            " ap": "182",
            " hi": "183",
            "abo": "184",
            "agp": "185",
            "ano": "186",
            "ata": "187",
            "g i": "188",
            "gan": "189",
            "gka": "190",
            "gpa": "191",
            "i m": "192",
            "iha": "193",
            "k s": "194",
            "law": "195",
            "or ": "196",
            "rs ": "197",
            "siy": "198",
            "tag": "199",
            " al": "200",
            " at": "201",
            " ha": "202",
            " hu": "203",
            " im": "204",
            "a h": "205",
            "bu ": "206",
            "e s": "207",
            "gma": "208",
            "kas": "209",
            "lag": "210",
            "mon": "211",
            "nah": "212",
            "ngo": "213",
            "r s": "214",
            "ra ": "215",
            "sab": "216",
            "sam": "217",
            "sul": "218",
            "uba": "219",
            "uha": "220",
            " lo": "221",
            " re": "222",
            "ada": "223",
            "aki": "224",
            "aya": "225",
            "bah": "226",
            "ce ": "227",
            "d n": "228",
            "lab": "229",
            "pa ": "230",
            "pak": "231",
            "s n": "232",
            "s s": "233",
            "tan": "234",
            "taw": "235",
            "te ": "236",
            "uma": "237",
            "ura": "238",
            " in": "239",
            " lu": "240",
            "a c": "241",
            "abi": "242",
            "at ": "243",
            "awo": "244",
            "bat": "245",
            "dal": "246",
            "dla": "247",
            "ele": "248",
            "g t": "249",
            "g u": "250",
            "gay": "251",
            "go ": "252",
            "hab": "253",
            "hin": "254",
            "i e": "255",
            "i n": "256",
            "kab": "257",
            "kap": "258",
            "lay": "259",
            "lin": "260",
            "nil": "261",
            "pam": "262",
            "pas": "263",
            "pro": "264",
            "pul": "265",
            "ta ": "266",
            "ton": "267",
            "uga": "268",
            "ugm": "269",
            "unt": "270",
            " co": "271",
            " gu": "272",
            " mi": "273",
            " pi": "274",
            " ti": "275",
            "a o": "276",
            "abu": "277",
            "adl": "278",
            "ado": "279",
            "agh": "280",
            "agk": "281",
            "ao ": "282",
            "art": "283",
            "bal": "284",
            "cit": "285",
            "di ": "286",
            "dto": "287",
            "dun": "288",
            "ent": "289",
            "g e": "290",
            "gon": "291",
            "gug": "292",
            "ia ": "293",
            "iba": "294",
            "ice": "295",
            "in ": "296",
            "inu": "297",
            "it ": "298",
            "kaa": "299"
        },
        "croatian": {
            "je ": "0",
            " na": "1",
            " pr": "2",
            " po": "3",
            "na ": "4",
            " je": "5",
            " za": "6",
            "ije": "7",
            "ne ": "8",
            " i ": "9",
            "ti ": "10",
            "da ": "11",
            " ko": "12",
            " ne": "13",
            "li ": "14",
            " bi": "15",
            " da": "16",
            " u ": "17",
            "ma ": "18",
            "mo ": "19",
            "a n": "20",
            "ih ": "21",
            "za ": "22",
            "a s": "23",
            "ko ": "24",
            "i s": "25",
            "a p": "26",
            "koj": "27",
            "pro": "28",
            "ju ": "29",
            "se ": "30",
            " go": "31",
            "ost": "32",
            "to ": "33",
            "va ": "34",
            " do": "35",
            " to": "36",
            "e n": "37",
            "i p": "38",
            " od": "39",
            " ra": "40",
            "no ": "41",
            "ako": "42",
            "ka ": "43",
            "ni ": "44",
            " ka": "45",
            " se": "46",
            " mo": "47",
            " st": "48",
            "i n": "49",
            "ima": "50",
            "ja ": "51",
            "pri": "52",
            "vat": "53",
            "sta": "54",
            " su": "55",
            "ati": "56",
            "e p": "57",
            "ta ": "58",
            "tsk": "59",
            "e i": "60",
            "nij": "61",
            " tr": "62",
            "cij": "63",
            "jen": "64",
            "nos": "65",
            "o s": "66",
            " iz": "67",
            "om ": "68",
            "tro": "69",
            "ili": "70",
            "iti": "71",
            "pos": "72",
            " al": "73",
            "a i": "74",
            "a o": "75",
            "e s": "76",
            "ija": "77",
            "ini": "78",
            "pre": "79",
            "str": "80",
            "la ": "81",
            "og ": "82",
            "ovo": "83",
            " sv": "84",
            "ekt": "85",
            "nje": "86",
            "o p": "87",
            "odi": "88",
            "rva": "89",
            " ni": "90",
            "ali": "91",
            "min": "92",
            "rij": "93",
            "a t": "94",
            "a z": "95",
            "ats": "96",
            "iva": "97",
            "o t": "98",
            "od ": "99",
            "oje": "100",
            "ra ": "101",
            " hr": "102",
            "a m": "103",
            "a u": "104",
            "hrv": "105",
            "im ": "106",
            "ke ": "107",
            "o i": "108",
            "ovi": "109",
            "red": "110",
            "riv": "111",
            "te ": "112",
            "bi ": "113",
            "e o": "114",
            "god": "115",
            "i d": "116",
            "lek": "117",
            "umi": "118",
            "zvo": "119",
            "din": "120",
            "e u": "121",
            "ene": "122",
            "jed": "123",
            "ji ": "124",
            "lje": "125",
            "nog": "126",
            "su ": "127",
            " a ": "128",
            " el": "129",
            " mi": "130",
            " o ": "131",
            "a d": "132",
            "alu": "133",
            "ele": "134",
            "i u": "135",
            "izv": "136",
            "ktr": "137",
            "lum": "138",
            "o d": "139",
            "ori": "140",
            "rad": "141",
            "sto": "142",
            "a k": "143",
            "anj": "144",
            "ava": "145",
            "e k": "146",
            "men": "147",
            "nic": "148",
            "o j": "149",
            "oj ": "150",
            "ove": "151",
            "ski": "152",
            "tvr": "153",
            "una": "154",
            "vor": "155",
            " di": "156",
            " no": "157",
            " s ": "158",
            " ta": "159",
            " tv": "160",
            "i i": "161",
            "i o": "162",
            "kak": "163",
            "ro\u0161": "164",
            "sko": "165",
            "vod": "166",
            " sa": "167",
            " \u0107e": "168",
            "a b": "169",
            "adi": "170",
            "amo": "171",
            "eni": "172",
            "gov": "173",
            "iju": "174",
            "ku ": "175",
            "o n": "176",
            "ora": "177",
            "rav": "178",
            "ruj": "179",
            "smo": "180",
            "tav": "181",
            "tru": "182",
            "u p": "183",
            "ve ": "184",
            " in": "185",
            " pl": "186",
            "aci": "187",
            "bit": "188",
            "de ": "189",
            "di\u0161": "190",
            "ema": "191",
            "i m": "192",
            "ika": "193",
            "i\u0161t": "194",
            "jer": "195",
            "ki ": "196",
            "mog": "197",
            "nik": "198",
            "nov": "199",
            "nu ": "200",
            "oji": "201",
            "oli": "202",
            "pla": "203",
            "pod": "204",
            "st ": "205",
            "sti": "206",
            "tra": "207",
            "tre": "208",
            "vo ": "209",
            " sm": "210",
            " \u0161t": "211",
            "dan": "212",
            "e z": "213",
            "i t": "214",
            "io ": "215",
            "ist": "216",
            "kon": "217",
            "lo ": "218",
            "stv": "219",
            "u s": "220",
            "uje": "221",
            "ust": "222",
            "\u0107e ": "223",
            "\u0107i ": "224",
            "\u0161to": "225",
            " dr": "226",
            " im": "227",
            " li": "228",
            "ada": "229",
            "aft": "230",
            "ani": "231",
            "ao ": "232",
            "ars": "233",
            "ata": "234",
            "e t": "235",
            "emo": "236",
            "i k": "237",
            "ine": "238",
            "jem": "239",
            "kov": "240",
            "lik": "241",
            "lji": "242",
            "mje": "243",
            "naf": "244",
            "ner": "245",
            "nih": "246",
            "nja": "247",
            "ogo": "248",
            "oiz": "249",
            "ome": "250",
            "pot": "251",
            "ran": "252",
            "ri ": "253",
            "roi": "254",
            "rtk": "255",
            "ska": "256",
            "ter": "257",
            "u i": "258",
            "u o": "259",
            "vi ": "260",
            "vrt": "261",
            " me": "262",
            " ug": "263",
            "ak ": "264",
            "ama": "265",
            "dr\u017e": "266",
            "e e": "267",
            "e g": "268",
            "e m": "269",
            "em ": "270",
            "eme": "271",
            "enj": "272",
            "ent": "273",
            "er ": "274",
            "ere": "275",
            "erg": "276",
            "eur": "277",
            "go ": "278",
            "i b": "279",
            "i z": "280",
            "jet": "281",
            "ksi": "282",
            "o u": "283",
            "oda": "284",
            "ona": "285",
            "pra": "286",
            "reb": "287",
            "rem": "288",
            "rop": "289",
            "tri": "290",
            "\u017eav": "291",
            " ci": "292",
            " eu": "293",
            " re": "294",
            " te": "295",
            " uv": "296",
            " ve": "297",
            "aju": "298",
            "an ": "299"
        },
        "czech": {
            " pr": "0",
            " po": "1",
            "n\u00ed ": "2",
            "pro": "3",
            " na": "4",
            "na ": "5",
            " p\u0159": "6",
            "ch ": "7",
            " je": "8",
            " ne": "9",
            "\u017ee ": "10",
            " \u017ee": "11",
            " se": "12",
            " do": "13",
            " ro": "14",
            " st": "15",
            " v ": "16",
            " ve": "17",
            "p\u0159e": "18",
            "se ": "19",
            "ho ": "20",
            "sta": "21",
            " to": "22",
            " vy": "23",
            " za": "24",
            "ou ": "25",
            " a ": "26",
            "to ": "27",
            " by": "28",
            "la ": "29",
            "ce ": "30",
            "e v": "31",
            "ist": "32",
            "le ": "33",
            "pod": "34",
            "\u00ed p": "35",
            " vl": "36",
            "e n": "37",
            "e s": "38",
            "je ": "39",
            "k\u00e9 ": "40",
            "by ": "41",
            "em ": "42",
            "\u00fdch": "43",
            " od": "44",
            "ova": "45",
            "\u0159ed": "46",
            "dy ": "47",
            "en\u00ed": "48",
            "kon": "49",
            "li ": "50",
            "n\u011b ": "51",
            "str": "52",
            " z\u00e1": "53",
            "ve ": "54",
            " ka": "55",
            " sv": "56",
            "e p": "57",
            "it ": "58",
            "l\u00e1d": "59",
            "oho": "60",
            "rov": "61",
            "roz": "62",
            "ter": "63",
            "vl\u00e1": "64",
            "\u00edm ": "65",
            " ko": "66",
            "hod": "67",
            "nis": "68",
            "p\u0159\u00ed": "69",
            "sk\u00fd": "70",
            " mi": "71",
            " ob": "72",
            " so": "73",
            "a p": "74",
            "ali": "75",
            "bud": "76",
            "edn": "77",
            "ick": "78",
            "kte": "79",
            "ku ": "80",
            "o s": "81",
            "al ": "82",
            "ci ": "83",
            "e t": "84",
            "il ": "85",
            "ny ": "86",
            "n\u00e9 ": "87",
            "odl": "88",
            "ov\u00e1": "89",
            "rot": "90",
            "sou": "91",
            "\u00e1n\u00ed": "92",
            " bu": "93",
            " mo": "94",
            " o ": "95",
            "ast": "96",
            "byl": "97",
            "de ": "98",
            "ek ": "99",
            "ost": "100",
            " m\u00ed": "101",
            " ta": "102",
            "es ": "103",
            "jed": "104",
            "ky ": "105",
            "las": "106",
            "m p": "107",
            "nes": "108",
            "n\u00edm": "109",
            "ran": "110",
            "rem": "111",
            "ros": "112",
            "\u00e9ho": "113",
            " de": "114",
            " kt": "115",
            " ni": "116",
            " si": "117",
            " v\u00fd": "118",
            "at ": "119",
            "j\u00ed ": "120",
            "k\u00fd ": "121",
            "mi ": "122",
            "pre": "123",
            "tak": "124",
            "tan": "125",
            "y v": "126",
            "\u0159ek": "127",
            " ch": "128",
            " li": "129",
            " n\u00e1": "130",
            " pa": "131",
            " \u0159e": "132",
            "da ": "133",
            "dle": "134",
            "dne": "135",
            "i p": "136",
            "i v": "137",
            "ly ": "138",
            "min": "139",
            "o n": "140",
            "o v": "141",
            "pol": "142",
            "tra": "143",
            "val": "144",
            "vn\u00ed": "145",
            "\u00edch": "146",
            "\u00fd p": "147",
            "\u0159ej": "148",
            " ce": "149",
            " kd": "150",
            " le": "151",
            "a s": "152",
            "a z": "153",
            "cen": "154",
            "e k": "155",
            "eds": "156",
            "ekl": "157",
            "emi": "158",
            "kl ": "159",
            "lat": "160",
            "lo ": "161",
            "mi\u00e9": "162",
            "nov": "163",
            "pra": "164",
            "sku": "165",
            "sk\u00e9": "166",
            "sti": "167",
            "tav": "168",
            "ti ": "169",
            "ty ": "170",
            "v\u00e1n": "171",
            "v\u00e9 ": "172",
            "y n": "173",
            "y s": "174",
            "\u00ed s": "175",
            "\u00ed v": "176",
            "\u011b p": "177",
            " dn": "178",
            " n\u011b": "179",
            " sp": "180",
            " \u010ds": "181",
            "a n": "182",
            "a t": "183",
            "ak ": "184",
            "dn\u00ed": "185",
            "doh": "186",
            "e b": "187",
            "e m": "188",
            "ejn": "189",
            "ena": "190",
            "est": "191",
            "ini": "192",
            "m z": "193",
            "nal": "194",
            "nou": "195",
            "n\u00e1 ": "196",
            "ovi": "197",
            "ov\u00e9": "198",
            "ov\u00fd": "199",
            "rsk": "200",
            "st\u00e1": "201",
            "t\u00ed ": "202",
            "t\u0159e": "203",
            "t\u016f ": "204",
            "ude": "205",
            "za ": "206",
            "\u00e9 p": "207",
            "\u00e9m ": "208",
            "\u00ed d": "209",
            " ir": "210",
            " zv": "211",
            "ale": "212",
            "an\u011b": "213",
            "ave": "214",
            "ck\u00e9": "215",
            "den": "216",
            "e z": "217",
            "ech": "218",
            "en ": "219",
            "er\u00fd": "220",
            "hla": "221",
            "i s": "222",
            "i\u00e9r": "223",
            "lov": "224",
            "mu ": "225",
            "neb": "226",
            "nic": "227",
            "o b": "228",
            "o m": "229",
            "pad": "230",
            "pot": "231",
            "rav": "232",
            "rop": "233",
            "r\u00fd ": "234",
            "sed": "235",
            "si ": "236",
            "t p": "237",
            "tic": "238",
            "tu ": "239",
            "t\u011b ": "240",
            "u p": "241",
            "u v": "242",
            "v\u00e1 ": "243",
            "v\u00fd\u0161": "244",
            "zv\u00fd": "245",
            "\u010dn\u00ed": "246",
            "\u0159\u00ed ": "247",
            "\u016fm ": "248",
            " bl": "249",
            " br": "250",
            " ho": "251",
            " ja": "252",
            " re": "253",
            " s ": "254",
            " z ": "255",
            " zd": "256",
            "a v": "257",
            "ani": "258",
            "ato": "259",
            "bla": "260",
            "bri": "261",
            "e\u010dn": "262",
            "e\u0159e": "263",
            "h v": "264",
            "i n": "265",
            "ie ": "266",
            "ila": "267",
            "irs": "268",
            "ite": "269",
            "kov": "270",
            "nos": "271",
            "o o": "272",
            "o p": "273",
            "oce": "274",
            "ody": "275",
            "ohl": "276",
            "oli": "277",
            "ovo": "278",
            "pla": "279",
            "po\u010d": "280",
            "pr\u00e1": "281",
            "ra ": "282",
            "rit": "283",
            "rod": "284",
            "ry ": "285",
            "sd ": "286",
            "sko": "287",
            "ssd": "288",
            "tel": "289",
            "u s": "290",
            "vat": "291",
            "ve\u0159": "292",
            "vit": "293",
            "vla": "294",
            "y p": "295",
            "\u00e1ln": "296",
            "\u010dss": "297",
            "\u0161en": "298",
            " al": "299"
        },
        "danish": {
            "er ": "0",
            "en ": "1",
            " de": "2",
            "et ": "3",
            "der": "4",
            "de ": "5",
            "for": "6",
            " fo": "7",
            " i ": "8",
            "at ": "9",
            " at": "10",
            "re ": "11",
            "det": "12",
            " ha": "13",
            "nde": "14",
            "ere": "15",
            "ing": "16",
            "den": "17",
            " me": "18",
            " og": "19",
            "ger": "20",
            "ter": "21",
            " er": "22",
            " si": "23",
            "and": "24",
            " af": "25",
            "or ": "26",
            " st": "27",
            " ti": "28",
            " en": "29",
            "og ": "30",
            "ar ": "31",
            "il ": "32",
            "r s": "33",
            "ige": "34",
            "til": "35",
            "ke ": "36",
            "r e": "37",
            "af ": "38",
            "kke": "39",
            " ma": "40",
            " p\u00e5": "41",
            "om ": "42",
            "p\u00e5 ": "43",
            "ed ": "44",
            "ge ": "45",
            "end": "46",
            "nge": "47",
            "t s": "48",
            "e s": "49",
            "ler": "50",
            " sk": "51",
            "els": "52",
            "ern": "53",
            "sig": "54",
            "ne ": "55",
            "lig": "56",
            "r d": "57",
            "ska": "58",
            " vi": "59",
            "har": "60",
            " be": "61",
            " se": "62",
            "an ": "63",
            "ikk": "64",
            "lle": "65",
            "gen": "66",
            "n f": "67",
            "ste": "68",
            "t a": "69",
            "t d": "70",
            "rin": "71",
            " ik": "72",
            "es ": "73",
            "ng ": "74",
            "ver": "75",
            "r b": "76",
            "sen": "77",
            "ede": "78",
            "men": "79",
            "r i": "80",
            " he": "81",
            " et": "82",
            "ig ": "83",
            "lan": "84",
            "med": "85",
            "nd ": "86",
            "rne": "87",
            " da": "88",
            " in": "89",
            "e t": "90",
            "mme": "91",
            "und": "92",
            " om": "93",
            "e e": "94",
            "e m": "95",
            "her": "96",
            "le ": "97",
            "r f": "98",
            "t f": "99",
            "s\u00e5 ": "100",
            "te ": "101",
            " so": "102",
            "ele": "103",
            "t e": "104",
            " ko": "105",
            "est": "106",
            "ske": "107",
            " bl": "108",
            "e f": "109",
            "ekt": "110",
            "mar": "111",
            "bru": "112",
            "e a": "113",
            "el ": "114",
            "ers": "115",
            "ret": "116",
            "som": "117",
            "tte": "118",
            "ve ": "119",
            " la": "120",
            " ud": "121",
            " ve": "122",
            "age": "123",
            "e d": "124",
            "e h": "125",
            "lse": "126",
            "man": "127",
            "rug": "128",
            "sel": "129",
            "ser": "130",
            " fi": "131",
            " op": "132",
            " pr": "133",
            "dt ": "134",
            "e i": "135",
            "n m": "136",
            "r m": "137",
            " an": "138",
            " re": "139",
            " sa": "140",
            "ion": "141",
            "ner": "142",
            "res": "143",
            "t i": "144",
            "get": "145",
            "n s": "146",
            "one": "147",
            "orb": "148",
            "t h": "149",
            "vis": "150",
            "\u00e5r ": "151",
            " fr": "152",
            "bil": "153",
            "e k": "154",
            "ens": "155",
            "ind": "156",
            "omm": "157",
            "t m": "158",
            " hv": "159",
            " je": "160",
            "dan": "161",
            "ent": "162",
            "fte": "163",
            "nin": "164",
            " mi": "165",
            "e o": "166",
            "e p": "167",
            "n o": "168",
            "nte": "169",
            " ku": "170",
            "ell": "171",
            "nas": "172",
            "ore": "173",
            "r h": "174",
            "r k": "175",
            "sta": "176",
            "sto": "177",
            "dag": "178",
            "eri": "179",
            "kun": "180",
            "lde": "181",
            "mer": "182",
            "r a": "183",
            "r v": "184",
            "rek": "185",
            "rer": "186",
            "t o": "187",
            "tor": "188",
            "t\u00f8r": "189",
            " f\u00e5": "190",
            " m\u00e5": "191",
            " to": "192",
            "boe": "193",
            "che": "194",
            "e v": "195",
            "i d": "196",
            "ive": "197",
            "kab": "198",
            "ns ": "199",
            "oel": "200",
            "se ": "201",
            "t v": "202",
            " al": "203",
            " bo": "204",
            " un": "205",
            "ans": "206",
            "dre": "207",
            "ire": "208",
            "k\u00f8b": "209",
            "ors": "210",
            "ove": "211",
            "ren": "212",
            "t b": "213",
            "\u00f8r ": "214",
            " ka": "215",
            "ald": "216",
            "bet": "217",
            "gt ": "218",
            "isk": "219",
            "kal": "220",
            "kom": "221",
            "lev": "222",
            "n d": "223",
            "n i": "224",
            "pri": "225",
            "r p": "226",
            "rbr": "227",
            "s\u00f8g": "228",
            "tel": "229",
            " s\u00e5": "230",
            " te": "231",
            " va": "232",
            "al ": "233",
            "dir": "234",
            "eje": "235",
            "fis": "236",
            "gs\u00e5": "237",
            "isc": "238",
            "jer": "239",
            "ker": "240",
            "ogs": "241",
            "sch": "242",
            "st ": "243",
            "t k": "244",
            "uge": "245",
            " di": "246",
            "ag ": "247",
            "d a": "248",
            "g i": "249",
            "ill": "250",
            "l a": "251",
            "lsk": "252",
            "n a": "253",
            "on ": "254",
            "sam": "255",
            "str": "256",
            "tet": "257",
            "var": "258",
            " mo": "259",
            "art": "260",
            "ash": "261",
            "att": "262",
            "e b": "263",
            "han": "264",
            "hav": "265",
            "kla": "266",
            "kon": "267",
            "n t": "268",
            "ned": "269",
            "r o": "270",
            "ra ": "271",
            "rre": "272",
            "ves": "273",
            "vil": "274",
            " el": "275",
            " kr": "276",
            " ov": "277",
            "ann": "278",
            "e u": "279",
            "ess": "280",
            "fra": "281",
            "g a": "282",
            "g d": "283",
            "int": "284",
            "ngs": "285",
            "rde": "286",
            "tra": "287",
            " \u00e5r": "288",
            "akt": "289",
            "asi": "290",
            "em ": "291",
            "gel": "292",
            "gym": "293",
            "hol": "294",
            "kan": "295",
            "mna": "296",
            "n h": "297",
            "nsk": "298",
            "old": "299"
        },
        "dutch": {
            "en ": "0",
            "de ": "1",
            " de": "2",
            "et ": "3",
            "an ": "4",
            " he": "5",
            "er ": "6",
            " va": "7",
            "n d": "8",
            "van": "9",
            "een": "10",
            "het": "11",
            " ge": "12",
            "oor": "13",
            " ee": "14",
            "der": "15",
            " en": "16",
            "ij ": "17",
            "aar": "18",
            "gen": "19",
            "te ": "20",
            "ver": "21",
            " in": "22",
            " me": "23",
            "aan": "24",
            "den": "25",
            " we": "26",
            "at ": "27",
            "in ": "28",
            " da": "29",
            " te": "30",
            "eer": "31",
            "nde": "32",
            "ter": "33",
            "ste": "34",
            "n v": "35",
            " vo": "36",
            " zi": "37",
            "ing": "38",
            "n h": "39",
            "voo": "40",
            "is ": "41",
            " op": "42",
            "tie": "43",
            " aa": "44",
            "ede": "45",
            "erd": "46",
            "ers": "47",
            " be": "48",
            "eme": "49",
            "ten": "50",
            "ken": "51",
            "n e": "52",
            " ni": "53",
            " ve": "54",
            "ent": "55",
            "ijn": "56",
            "jn ": "57",
            "mee": "58",
            "iet": "59",
            "n w": "60",
            "ng ": "61",
            "nie": "62",
            " is": "63",
            "cht": "64",
            "dat": "65",
            "ere": "66",
            "ie ": "67",
            "ijk": "68",
            "n b": "69",
            "rde": "70",
            "ar ": "71",
            "e b": "72",
            "e a": "73",
            "met": "74",
            "t d": "75",
            "el ": "76",
            "ond": "77",
            "t h": "78",
            " al": "79",
            "e w": "80",
            "op ": "81",
            "ren": "82",
            " di": "83",
            " on": "84",
            "al ": "85",
            "and": "86",
            "bij": "87",
            "zij": "88",
            " bi": "89",
            " hi": "90",
            " wi": "91",
            "or ": "92",
            "r d": "93",
            "t v": "94",
            " wa": "95",
            "e h": "96",
            "lle": "97",
            "rt ": "98",
            "ang": "99",
            "hij": "100",
            "men": "101",
            "n a": "102",
            "n z": "103",
            "rs ": "104",
            " om": "105",
            "e o": "106",
            "e v": "107",
            "end": "108",
            "est": "109",
            "n t": "110",
            "par": "111",
            " pa": "112",
            " pr": "113",
            " ze": "114",
            "e g": "115",
            "e p": "116",
            "n p": "117",
            "ord": "118",
            "oud": "119",
            "raa": "120",
            "sch": "121",
            "t e": "122",
            "ege": "123",
            "ich": "124",
            "ien": "125",
            "aat": "126",
            "ek ": "127",
            "len": "128",
            "n m": "129",
            "nge": "130",
            "nt ": "131",
            "ove": "132",
            "rd ": "133",
            "wer": "134",
            " ma": "135",
            " mi": "136",
            "daa": "137",
            "e k": "138",
            "lij": "139",
            "mer": "140",
            "n g": "141",
            "n o": "142",
            "om ": "143",
            "sen": "144",
            "t b": "145",
            "wij": "146",
            " ho": "147",
            "e m": "148",
            "ele": "149",
            "gem": "150",
            "heb": "151",
            "pen": "152",
            "ude": "153",
            " bo": "154",
            " ja": "155",
            "die": "156",
            "e e": "157",
            "eli": "158",
            "erk": "159",
            "le ": "160",
            "pro": "161",
            "rij": "162",
            " er": "163",
            " za": "164",
            "e d": "165",
            "ens": "166",
            "ind": "167",
            "ke ": "168",
            "n k": "169",
            "nd ": "170",
            "nen": "171",
            "nte": "172",
            "r h": "173",
            "s d": "174",
            "s e": "175",
            "t z": "176",
            " b ": "177",
            " co": "178",
            " ik": "179",
            " ko": "180",
            " ov": "181",
            "eke": "182",
            "hou": "183",
            "ik ": "184",
            "iti": "185",
            "lan": "186",
            "ns ": "187",
            "t g": "188",
            "t m": "189",
            " do": "190",
            " le": "191",
            " zo": "192",
            "ams": "193",
            "e z": "194",
            "g v": "195",
            "it ": "196",
            "je ": "197",
            "ls ": "198",
            "maa": "199",
            "n i": "200",
            "nke": "201",
            "rke": "202",
            "uit": "203",
            " ha": "204",
            " ka": "205",
            " mo": "206",
            " re": "207",
            " st": "208",
            " to": "209",
            "age": "210",
            "als": "211",
            "ark": "212",
            "art": "213",
            "ben": "214",
            "e r": "215",
            "e s": "216",
            "ert": "217",
            "eze": "218",
            "ht ": "219",
            "ijd": "220",
            "lem": "221",
            "r v": "222",
            "rte": "223",
            "t p": "224",
            "zeg": "225",
            "zic": "226",
            "aak": "227",
            "aal": "228",
            "ag ": "229",
            "ale": "230",
            "bbe": "231",
            "ch ": "232",
            "e t": "233",
            "ebb": "234",
            "erz": "235",
            "ft ": "236",
            "ge ": "237",
            "led": "238",
            "mst": "239",
            "n n": "240",
            "oek": "241",
            "r i": "242",
            "t o": "243",
            "t w": "244",
            "tel": "245",
            "tte": "246",
            "uur": "247",
            "we ": "248",
            "zit": "249",
            " af": "250",
            " li": "251",
            " ui": "252",
            "ak ": "253",
            "all": "254",
            "aut": "255",
            "doo": "256",
            "e i": "257",
            "ene": "258",
            "erg": "259",
            "ete": "260",
            "ges": "261",
            "hee": "262",
            "jaa": "263",
            "jke": "264",
            "kee": "265",
            "kel": "266",
            "kom": "267",
            "lee": "268",
            "moe": "269",
            "n s": "270",
            "ort": "271",
            "rec": "272",
            "s o": "273",
            "s v": "274",
            "teg": "275",
            "tij": "276",
            "ven": "277",
            "waa": "278",
            "wel": "279",
            " an": "280",
            " au": "281",
            " bu": "282",
            " gr": "283",
            " pl": "284",
            " ti": "285",
            "'' ": "286",
            "ade": "287",
            "dag": "288",
            "e l": "289",
            "ech": "290",
            "eel": "291",
            "eft": "292",
            "ger": "293",
            "gt ": "294",
            "ig ": "295",
            "itt": "296",
            "j d": "297",
            "ppe": "298",
            "rda": "299"
        },
        "english": {
            " th": "0",
            "the": "1",
            "he ": "2",
            "ed ": "3",
            " to": "4",
            " in": "5",
            "er ": "6",
            "ing": "7",
            "ng ": "8",
            " an": "9",
            "nd ": "10",
            " of": "11",
            "and": "12",
            "to ": "13",
            "of ": "14",
            " co": "15",
            "at ": "16",
            "on ": "17",
            "in ": "18",
            " a ": "19",
            "d t": "20",
            " he": "21",
            "e t": "22",
            "ion": "23",
            "es ": "24",
            " re": "25",
            "re ": "26",
            "hat": "27",
            " sa": "28",
            " st": "29",
            " ha": "30",
            "her": "31",
            "tha": "32",
            "tio": "33",
            "or ": "34",
            " ''": "35",
            "en ": "36",
            " wh": "37",
            "e s": "38",
            "ent": "39",
            "n t": "40",
            "s a": "41",
            "as ": "42",
            "for": "43",
            "is ": "44",
            "t t": "45",
            " be": "46",
            "ld ": "47",
            "e a": "48",
            "rs ": "49",
            " wa": "50",
            "ut ": "51",
            "ve ": "52",
            "ll ": "53",
            "al ": "54",
            " ma": "55",
            "e i": "56",
            " fo": "57",
            "'s ": "58",
            "an ": "59",
            "est": "60",
            " hi": "61",
            " mo": "62",
            " se": "63",
            " pr": "64",
            "s t": "65",
            "ate": "66",
            "st ": "67",
            "ter": "68",
            "ere": "69",
            "ted": "70",
            "nt ": "71",
            "ver": "72",
            "d a": "73",
            " wi": "74",
            "se ": "75",
            "e c": "76",
            "ect": "77",
            "ns ": "78",
            " on": "79",
            "ly ": "80",
            "tol": "81",
            "ey ": "82",
            "r t": "83",
            " ca": "84",
            "ati": "85",
            "ts ": "86",
            "all": "87",
            " no": "88",
            "his": "89",
            "s o": "90",
            "ers": "91",
            "con": "92",
            "e o": "93",
            "ear": "94",
            "f t": "95",
            "e w": "96",
            "was": "97",
            "ons": "98",
            "sta": "99",
            "'' ": "100",
            "sti": "101",
            "n a": "102",
            "sto": "103",
            "t h": "104",
            " we": "105",
            "id ": "106",
            "th ": "107",
            " it": "108",
            "ce ": "109",
            " di": "110",
            "ave": "111",
            "d h": "112",
            "cou": "113",
            "pro": "114",
            "ad ": "115",
            "oll": "116",
            "ry ": "117",
            "d s": "118",
            "e m": "119",
            " so": "120",
            "ill": "121",
            "cti": "122",
            "te ": "123",
            "tor": "124",
            "eve": "125",
            "g t": "126",
            "it ": "127",
            " ch": "128",
            " de": "129",
            "hav": "130",
            "oul": "131",
            "ty ": "132",
            "uld": "133",
            "use": "134",
            " al": "135",
            "are": "136",
            "ch ": "137",
            "me ": "138",
            "out": "139",
            "ove": "140",
            "wit": "141",
            "ys ": "142",
            "chi": "143",
            "t a": "144",
            "ith": "145",
            "oth": "146",
            " ab": "147",
            " te": "148",
            " wo": "149",
            "s s": "150",
            "res": "151",
            "t w": "152",
            "tin": "153",
            "e b": "154",
            "e h": "155",
            "nce": "156",
            "t s": "157",
            "y t": "158",
            "e p": "159",
            "ele": "160",
            "hin": "161",
            "s i": "162",
            "nte": "163",
            " li": "164",
            "le ": "165",
            " do": "166",
            "aid": "167",
            "hey": "168",
            "ne ": "169",
            "s w": "170",
            " as": "171",
            " fr": "172",
            " tr": "173",
            "end": "174",
            "sai": "175",
            " el": "176",
            " ne": "177",
            " su": "178",
            "'t ": "179",
            "ay ": "180",
            "hou": "181",
            "ive": "182",
            "lec": "183",
            "n't": "184",
            " ye": "185",
            "but": "186",
            "d o": "187",
            "o t": "188",
            "y o": "189",
            " ho": "190",
            " me": "191",
            "be ": "192",
            "cal": "193",
            "e e": "194",
            "had": "195",
            "ple": "196",
            " at": "197",
            " bu": "198",
            " la": "199",
            "d b": "200",
            "s h": "201",
            "say": "202",
            "t i": "203",
            " ar": "204",
            "e f": "205",
            "ght": "206",
            "hil": "207",
            "igh": "208",
            "int": "209",
            "not": "210",
            "ren": "211",
            " is": "212",
            " pa": "213",
            " sh": "214",
            "ays": "215",
            "com": "216",
            "n s": "217",
            "r a": "218",
            "rin": "219",
            "y a": "220",
            " un": "221",
            "n c": "222",
            "om ": "223",
            "thi": "224",
            " mi": "225",
            "by ": "226",
            "d i": "227",
            "e d": "228",
            "e n": "229",
            "t o": "230",
            " by": "231",
            "e r": "232",
            "eri": "233",
            "old": "234",
            "ome": "235",
            "whe": "236",
            "yea": "237",
            " gr": "238",
            "ar ": "239",
            "ity": "240",
            "mpl": "241",
            "oun": "242",
            "one": "243",
            "ow ": "244",
            "r s": "245",
            "s f": "246",
            "tat": "247",
            " ba": "248",
            " vo": "249",
            "bou": "250",
            "sam": "251",
            "tim": "252",
            "vot": "253",
            "abo": "254",
            "ant": "255",
            "ds ": "256",
            "ial": "257",
            "ine": "258",
            "man": "259",
            "men": "260",
            " or": "261",
            " po": "262",
            "amp": "263",
            "can": "264",
            "der": "265",
            "e l": "266",
            "les": "267",
            "ny ": "268",
            "ot ": "269",
            "rec": "270",
            "tes": "271",
            "tho": "272",
            "ica": "273",
            "ild": "274",
            "ir ": "275",
            "nde": "276",
            "ose": "277",
            "ous": "278",
            "pre": "279",
            "ste": "280",
            "era": "281",
            "per": "282",
            "r o": "283",
            "red": "284",
            "rie": "285",
            " bo": "286",
            " le": "287",
            "ali": "288",
            "ars": "289",
            "ore": "290",
            "ric": "291",
            "s m": "292",
            "str": "293",
            " fa": "294",
            "ess": "295",
            "ie ": "296",
            "ist": "297",
            "lat": "298",
            "uri": "299"
        },
        "estonian": {
            "st ": "0",
            " ka": "1",
            "on ": "2",
            "ja ": "3",
            " va": "4",
            " on": "5",
            " ja": "6",
            " ko": "7",
            "se ": "8",
            "ast": "9",
            "le ": "10",
            "es ": "11",
            "as ": "12",
            "is ": "13",
            "ud ": "14",
            " sa": "15",
            "da ": "16",
            "ga ": "17",
            " ta": "18",
            "aja": "19",
            "sta": "20",
            " ku": "21",
            " pe": "22",
            "a k": "23",
            "est": "24",
            "ist": "25",
            "ks ": "26",
            "ta ": "27",
            "al ": "28",
            "ava": "29",
            "id ": "30",
            "saa": "31",
            "mis": "32",
            "te ": "33",
            "val": "34",
            " et": "35",
            "nud": "36",
            " te": "37",
            "inn": "38",
            " se": "39",
            " tu": "40",
            "a v": "41",
            "alu": "42",
            "e k": "43",
            "ise": "44",
            "lu ": "45",
            "ma ": "46",
            "mes": "47",
            " mi": "48",
            "et ": "49",
            "iku": "50",
            "lin": "51",
            "ad ": "52",
            "el ": "53",
            "ime": "54",
            "ne ": "55",
            "nna": "56",
            " ha": "57",
            " in": "58",
            " ke": "59",
            " v\u00f5": "60",
            "a s": "61",
            "a t": "62",
            "ab ": "63",
            "e s": "64",
            "esi": "65",
            " la": "66",
            " li": "67",
            "e v": "68",
            "eks": "69",
            "ema": "70",
            "las": "71",
            "les": "72",
            "rju": "73",
            "tle": "74",
            "tsi": "75",
            "tus": "76",
            "upa": "77",
            "use": "78",
            "ust": "79",
            "var": "80",
            " l\u00e4": "81",
            "ali": "82",
            "arj": "83",
            "de ": "84",
            "ete": "85",
            "i t": "86",
            "iga": "87",
            "ilm": "88",
            "kui": "89",
            "li ": "90",
            "tul": "91",
            " ei": "92",
            " me": "93",
            " s\u00f5": "94",
            "aal": "95",
            "ata": "96",
            "dus": "97",
            "ei ": "98",
            "nik": "99",
            "pea": "100",
            "s k": "101",
            "s o": "102",
            "sal": "103",
            "s\u00f5n": "104",
            "ter": "105",
            "ul ": "106",
            "v\u00f5i": "107",
            " el": "108",
            " ne": "109",
            "a j": "110",
            "ate": "111",
            "end": "112",
            "i k": "113",
            "ita": "114",
            "kar": "115",
            "kor": "116",
            "l o": "117",
            "lt ": "118",
            "maa": "119",
            "oli": "120",
            "sti": "121",
            "vad": "122",
            "\u00e4\u00e4n": "123",
            " ju": "124",
            " j\u00e4": "125",
            " k\u00fc": "126",
            " ma": "127",
            " po": "128",
            " \u00fct": "129",
            "aas": "130",
            "aks": "131",
            "at ": "132",
            "ed ": "133",
            "eri": "134",
            "hoi": "135",
            "i s": "136",
            "ka ": "137",
            "la ": "138",
            "nni": "139",
            "oid": "140",
            "pai": "141",
            "rit": "142",
            "us ": "143",
            "\u00fctl": "144",
            " aa": "145",
            " lo": "146",
            " to": "147",
            " ve": "148",
            "a e": "149",
            "ada": "150",
            "aid": "151",
            "ami": "152",
            "and": "153",
            "dla": "154",
            "e j": "155",
            "ega": "156",
            "gi ": "157",
            "gu ": "158",
            "i p": "159",
            "idl": "160",
            "ik ": "161",
            "ini": "162",
            "jup": "163",
            "kal": "164",
            "kas": "165",
            "kes": "166",
            "koh": "167",
            "s e": "168",
            "s p": "169",
            "sel": "170",
            "sse": "171",
            "ui ": "172",
            " pi": "173",
            " si": "174",
            "aru": "175",
            "eda": "176",
            "eva": "177",
            "fil": "178",
            "i v": "179",
            "ida": "180",
            "ing": "181",
            "l\u00e4\u00e4": "182",
            "me ": "183",
            "na ": "184",
            "nda": "185",
            "nim": "186",
            "ole": "187",
            "ots": "188",
            "ris": "189",
            "s l": "190",
            "sia": "191",
            "t p": "192",
            " en": "193",
            " mu": "194",
            " ol": "195",
            " p\u00f5": "196",
            " su": "197",
            " v\u00e4": "198",
            " \u00fch": "199",
            "a l": "200",
            "a p": "201",
            "aga": "202",
            "ale": "203",
            "aps": "204",
            "arv": "205",
            "e a": "206",
            "ela": "207",
            "ika": "208",
            "lle": "209",
            "loo": "210",
            "mal": "211",
            "pet": "212",
            "t k": "213",
            "tee": "214",
            "tis": "215",
            "vat": "216",
            "\u00e4ne": "217",
            "\u00f5nn": "218",
            " es": "219",
            " fi": "220",
            " vi": "221",
            "a i": "222",
            "a o": "223",
            "aab": "224",
            "aap": "225",
            "ala": "226",
            "alt": "227",
            "ama": "228",
            "anu": "229",
            "e p": "230",
            "e t": "231",
            "eal": "232",
            "eli": "233",
            "haa": "234",
            "hin": "235",
            "iva": "236",
            "kon": "237",
            "ku ": "238",
            "lik": "239",
            "lm ": "240",
            "min": "241",
            "n t": "242",
            "odu": "243",
            "oon": "244",
            "psa": "245",
            "ri ": "246",
            "si ": "247",
            "stu": "248",
            "t e": "249",
            "t s": "250",
            "ti ": "251",
            "ule": "252",
            "uur": "253",
            "vas": "254",
            "vee": "255",
            " ki": "256",
            " ni": "257",
            " n\u00e4": "258",
            " ra": "259",
            "aig": "260",
            "aka": "261",
            "all": "262",
            "atu": "263",
            "e e": "264",
            "eis": "265",
            "ers": "266",
            "i e": "267",
            "ii ": "268",
            "iis": "269",
            "il ": "270",
            "ima": "271",
            "its": "272",
            "kka": "273",
            "kuh": "274",
            "l k": "275",
            "lat": "276",
            "maj": "277",
            "ndu": "278",
            "ni ": "279",
            "nii": "280",
            "oma": "281",
            "ool": "282",
            "rso": "283",
            "ru ": "284",
            "rva": "285",
            "s t": "286",
            "sek": "287",
            "son": "288",
            "ste": "289",
            "t m": "290",
            "taj": "291",
            "tam": "292",
            "ude": "293",
            "uho": "294",
            "vai": "295",
            " ag": "296",
            " os": "297",
            " pa": "298",
            " re": "299"
        },
        "farsi": {
            "\u0627\u0646 ": "0",
            "\u0627\u06cc ": "1",
            "\u0647 \u0627": "2",
            " \u0627\u064a": "3",
            " \u062f\u0631": "4",
            "\u0628\u0647 ": "5",
            " \u0628\u0631": "6",
            "\u062f\u0631 ": "7",
            "\u0631\u0627\u0646": "8",
            " \u0628\u0647": "9",
            "\u06cc \u0627": "10",
            "\u0627\u0632 ": "11",
            "\u064a\u0646 ": "12",
            "\u0645\u06cc ": "13",
            " \u0627\u0632": "14",
            "\u062f\u0647 ": "15",
            "\u0633\u062a ": "16",
            "\u0627\u0633\u062a": "17",
            " \u0627\u0633": "18",
            " \u06a9\u0647": "19",
            "\u06a9\u0647 ": "20",
            "\u0627\u064a\u0631": "21",
            "\u0646\u062f ": "22",
            "\u0627\u064a\u0646": "23",
            " \u0647\u0627": "24",
            "\u064a\u0631\u0627": "25",
            "\u0648\u062f ": "26",
            " \u0631\u0627": "27",
            "\u0647\u0627\u06cc": "28",
            " \u062e\u0648": "29",
            "\u062a\u0647 ": "30",
            "\u0631\u0627 ": "31",
            "\u0631\u0627\u06cc": "32",
            "\u0631\u062f ": "33",
            "\u0646 \u0628": "34",
            "\u06a9\u0631\u062f": "35",
            " \u0648 ": "36",
            " \u06a9\u0631": "37",
            "\u0627\u062a ": "38",
            "\u0628\u0631\u0627": "39",
            "\u062f \u06a9": "40",
            "\u0645\u0627\u0646": "41",
            "\u06cc \u062f": "42",
            " \u0627\u0646": "43",
            "\u062e\u0648\u0627": "44",
            "\u0634\u0648\u0631": "45",
            " \u0628\u0627": "46",
            "\u0646 \u0627": "47",
            " \u0633\u0627": "48",
            "\u062a\u0645\u06cc": "49",
            "\u0631\u06cc ": "50",
            "\u0627\u062a\u0645": "51",
            "\u0627 \u0627": "52",
            "\u0648\u0627\u0647": "53",
            " \u0627\u062a": "54",
            " \u0639\u0631": "55",
            "\u0627\u0642 ": "56",
            "\u0631 \u0645": "57",
            "\u0631\u0627\u0642": "58",
            "\u0639\u0631\u0627": "59",
            "\u06cc \u0628": "60",
            " \u062a\u0627": "61",
            " \u062a\u0648": "62",
            "\u0627\u0631 ": "63",
            "\u0631 \u0627": "64",
            "\u0646 \u0645": "65",
            "\u0647 \u0628": "66",
            "\u0648\u0631 ": "67",
            "\u064a\u062f ": "68",
            "\u06cc \u06a9": "69",
            " \u0627\u0645": "70",
            " \u062f\u0627": "71",
            " \u06a9\u0646": "72",
            "\u0627\u0647\u062f": "73",
            "\u0647\u062f ": "74",
            " \u0622\u0646": "75",
            " \u0645\u06cc": "76",
            " \u0646\u064a": "77",
            " \u06af\u0641": "78",
            "\u062f \u0627": "79",
            "\u06af\u0641\u062a": "80",
            " \u06a9\u0634": "81",
            "\u0627 \u0628": "82",
            "\u0646\u06cc ": "83",
            "\u0647\u0627 ": "84",
            "\u06a9\u0634\u0648": "85",
            " \u0631\u0648": "86",
            "\u062a \u06a9": "87",
            "\u0646\u064a\u0648": "88",
            "\u0647 \u0645": "89",
            "\u0648\u06cc ": "90",
            "\u06cc \u062a": "91",
            " \u0634\u0648": "92",
            "\u0627\u0644 ": "93",
            "\u062f\u0627\u0631": "94",
            "\u0645\u0647 ": "95",
            "\u0646 \u06a9": "96",
            "\u0647 \u062f": "97",
            "\u064a\u0647 ": "98",
            " \u0645\u0627": "99",
            "\u0627\u0645\u0647": "100",
            "\u062f \u0628": "101",
            "\u0632\u0627\u0631": "102",
            "\u0648\u0631\u0627": "103",
            "\u06af\u0632\u0627": "104",
            " \u067e\u064a": "105",
            "\u0622\u0646 ": "106",
            "\u0627\u0646\u062a": "107",
            "\u062a \u0627": "108",
            "\u0641\u062a ": "109",
            "\u0647 \u0646": "110",
            "\u06cc \u062e": "111",
            "\u0627\u0645\u0627": "112",
            "\u0628\u0627\u062a": "113",
            "\u0645\u0627 ": "114",
            "\u0645\u0644\u0644": "115",
            "\u0646\u0627\u0645": "116",
            "\u064a\u0631 ": "117",
            "\u06cc \u0645": "118",
            "\u06cc \u0647": "119",
            " \u0622\u0645": "120",
            " \u0627\u06cc": "121",
            " \u0645\u0646": "122",
            "\u0627\u0646\u0633": "123",
            "\u0627\u0646\u064a": "124",
            "\u062a \u062f": "125",
            "\u0631\u062f\u0647": "126",
            "\u0633\u0627\u0632": "127",
            "\u0646 \u062f": "128",
            "\u0646\u0647 ": "129",
            "\u0648\u0631\u062f": "130",
            " \u0627\u0648": "131",
            " \u0628\u064a": "132",
            " \u0633\u0648": "133",
            " \u0634\u062f": "134",
            "\u0627\u062f\u0647": "135",
            "\u0627\u0646\u062f": "136",
            "\u0628\u0627 ": "137",
            "\u062a \u0628": "138",
            "\u0631 \u0628": "139",
            "\u0632 \u0627": "140",
            "\u0632\u0645\u0627": "141",
            "\u0633\u062a\u0647": "142",
            "\u0646 \u0631": "143",
            "\u0647 \u0633": "144",
            "\u0648\u0627\u0646": "145",
            "\u0648\u0632 ": "146",
            "\u06cc \u0631": "147",
            "\u06cc \u0633": "148",
            " \u0647\u0633": "149",
            "\u0627\u0628\u0627": "150",
            "\u0627\u0645 ": "151",
            "\u0627\u0648\u0631": "152",
            "\u062a\u062e\u0627": "153",
            "\u062e\u0627\u0628": "154",
            "\u062e\u0648\u062f": "155",
            "\u062f \u062f": "156",
            "\u062f\u0646 ": "157",
            "\u0631\u0647\u0627": "158",
            "\u0631\u0648\u0632": "159",
            "\u0631\u06af\u0632": "160",
            "\u0646\u062a\u062e": "161",
            "\u0647 \u0634": "162",
            "\u0647 \u0647": "163",
            "\u0647\u0633\u062a": "164",
            "\u064a\u062a ": "165",
            "\u064a\u0645 ": "166",
            " \u062f\u0648": "167",
            " \u062f\u064a": "168",
            " \u0645\u0648": "169",
            " \u0646\u0648": "170",
            " \u0647\u0645": "171",
            " \u06a9\u0627": "172",
            "\u0627\u062f ": "173",
            "\u0627\u0631\u06cc": "174",
            "\u0627\u0646\u06cc": "175",
            "\u0628\u0631 ": "176",
            "\u0628\u0648\u062f": "177",
            "\u062a \u0647": "178",
            "\u062d \u0647": "179",
            "\u062d\u0627\u0644": "180",
            "\u0631\u0634 ": "181",
            "\u0639\u0647 ": "182",
            "\u0644\u06cc ": "183",
            "\u0648\u0645 ": "184",
            "\u0698\u0627\u0646": "185",
            " \u0633\u0644": "186",
            "\u0622\u0645\u0631": "187",
            "\u0627\u062d ": "188",
            "\u062a\u0648\u0633": "189",
            "\u062f\u0627\u062f": "190",
            "\u062f\u0627\u0645": "191",
            "\u0631 \u062f": "192",
            "\u0631\u0647 ": "193",
            "\u0631\u064a\u06a9": "194",
            "\u0632\u06cc ": "195",
            "\u0633\u0644\u0627": "196",
            "\u0634\u0648\u062f": "197",
            "\u0644\u0627\u062d": "198",
            "\u0645\u0631\u064a": "199",
            "\u0646\u0646\u062f": "200",
            "\u0647 \u0639": "201",
            "\u064a\u0645\u0627": "202",
            "\u064a\u06a9\u0627": "203",
            "\u067e\u064a\u0645": "204",
            "\u06af\u0631 ": "205",
            " \u0622\u0698": "206",
            " \u0627\u0644": "207",
            " \u0628\u0648": "208",
            " \u0645\u0642": "209",
            " \u0645\u0644": "210",
            " \u0648\u06cc": "211",
            "\u0622\u0698\u0627": "212",
            "\u0627\u0632\u0645": "213",
            "\u0627\u0632\u06cc": "214",
            "\u0628\u0627\u0631": "215",
            "\u0628\u0631\u0646": "216",
            "\u0631 \u0622": "217",
            "\u0632 \u0633": "218",
            "\u0633\u0639\u0647": "219",
            "\u0634\u062a\u0647": "220",
            "\u0645\u0627\u062a": "221",
            "\u0646 \u0622": "222",
            "\u0646 \u067e": "223",
            "\u0646\u0633 ": "224",
            "\u0647 \u06af": "225",
            "\u0648\u0633\u0639": "226",
            "\u064a\u0627\u0646": "227",
            "\u064a\u0648\u0645": "228",
            "\u06a9\u0627 ": "229",
            "\u06a9\u0627\u0645": "230",
            "\u06a9\u0646\u062f": "231",
            " \u062e\u0627": "232",
            " \u0633\u0631": "233",
            "\u0622\u0648\u0631": "234",
            "\u0627\u0631\u062f": "235",
            "\u0627\u0642\u062f": "236",
            "\u0627\u064a\u0645": "237",
            "\u0627\u064a\u06cc": "238",
            "\u0628\u0631\u06af": "239",
            "\u062a \u0639": "240",
            "\u062a\u0646 ": "241",
            "\u062e\u062a ": "242",
            "\u062f \u0648": "243",
            "\u0631 \u062e": "244",
            "\u0631\u06a9 ": "245",
            "\u0632\u064a\u0631": "246",
            "\u0641\u062a\u0647": "247",
            "\u0642\u062f\u0627": "248",
            "\u0644 \u062a": "249",
            "\u0645\u064a\u0646": "250",
            "\u0646 \u06af": "251",
            "\u0647 \u0622": "252",
            "\u0647 \u062e": "253",
            "\u0647 \u06a9": "254",
            "\u0648\u0631\u06a9": "255",
            "\u0648\u064a\u0648": "256",
            "\u064a\u0648\u0631": "257",
            "\u064a\u0648\u064a": "258",
            "\u064a\u06cc ": "259",
            "\u06a9 \u062a": "260",
            "\u06cc \u0634": "261",
            " \u0627\u0642": "262",
            " \u062d\u0627": "263",
            " \u062d\u0642": "264",
            " \u062f\u0633": "265",
            " \u0634\u06a9": "266",
            " \u0639\u0645": "267",
            " \u064a\u06a9": "268",
            "\u0627 \u062a": "269",
            "\u0627 \u062f": "270",
            "\u0627\u0631\u062c": "271",
            "\u0628\u064a\u0646": "272",
            "\u062a \u0645": "273",
            "\u062a \u0648": "274",
            "\u062a\u0627\u064a": "275",
            "\u062f\u0633\u062a": "276",
            "\u0631 \u062d": "277",
            "\u0631 \u0633": "278",
            "\u0631\u0646\u0627": "279",
            "\u0632 \u0628": "280",
            "\u0634\u06a9\u0627": "281",
            "\u0644\u0644 ": "282",
            "\u0645 \u06a9": "283",
            "\u0645\u0632 ": "284",
            "\u0646\u062f\u0627": "285",
            "\u0646\u0648\u0627": "286",
            "\u0648 \u0627": "287",
            "\u0648\u0631\u0647": "288",
            "\u0648\u0646 ": "289",
            "\u0648\u0646\u062f": "290",
            "\u064a\u0645\u0632": "291",
            " \u0622\u0648": "292",
            " \u0627\u0639": "293",
            " \u0641\u0631": "294",
            " \u0645\u062a": "295",
            " \u0646\u0647": "296",
            " \u0647\u0631": "297",
            " \u0648\u0632": "298",
            " \u06af\u0632": "299"
        },
        "finnish": {
            "en ": "0",
            "in ": "1",
            "an ": "2",
            "on ": "3",
            "ist": "4",
            "ta ": "5",
            "ja ": "6",
            "n t": "7",
            "sa ": "8",
            "sta": "9",
            "aan": "10",
            "n p": "11",
            " on": "12",
            "ssa": "13",
            "tta": "14",
            "t\u00e4 ": "15",
            " ka": "16",
            " pa": "17",
            "si ": "18",
            " ja": "19",
            "n k": "20",
            "lla": "21",
            "\u00e4n ": "22",
            "een": "23",
            "n v": "24",
            "ksi": "25",
            "ett": "26",
            "nen": "27",
            "taa": "28",
            "tt\u00e4": "29",
            " va": "30",
            "ill": "31",
            "itt": "32",
            " jo": "33",
            " ko": "34",
            "n s": "35",
            " tu": "36",
            "ia ": "37",
            " su": "38",
            "a p": "39",
            "aa ": "40",
            "la ": "41",
            "lle": "42",
            "n m": "43",
            "le ": "44",
            "tte": "45",
            "na ": "46",
            " ta": "47",
            " ve": "48",
            "at ": "49",
            " vi": "50",
            "utt": "51",
            " sa": "52",
            "ise": "53",
            "sen": "54",
            " ku": "55",
            " n\u00e4": "56",
            " p\u00e4": "57",
            "ste": "58",
            " ol": "59",
            "a t": "60",
            "ais": "61",
            "maa": "62",
            "ti ": "63",
            "a o": "64",
            "oit": "65",
            "p\u00e4\u00e4": "66",
            " pi": "67",
            "a v": "68",
            "ala": "69",
            "ine": "70",
            "isi": "71",
            "tel": "72",
            "tti": "73",
            " si": "74",
            "a k": "75",
            "all": "76",
            "iin": "77",
            "kin": "78",
            "st\u00e4": "79",
            "uom": "80",
            "vii": "81",
            " ma": "82",
            " se": "83",
            "en\u00e4": "84",
            " mu": "85",
            "a s": "86",
            "est": "87",
            "iss": "88",
            "ll\u00e4": "89",
            "lok": "90",
            "l\u00e4 ": "91",
            "n j": "92",
            "n o": "93",
            "toi": "94",
            "ven": "95",
            "ytt": "96",
            " li": "97",
            "ain": "98",
            "et ": "99",
            "ina": "100",
            "n a": "101",
            "n n": "102",
            "oll": "103",
            "plo": "104",
            "ten": "105",
            "ust": "106",
            "\u00e4ll": "107",
            "\u00e4\u00e4n": "108",
            " to": "109",
            "den": "110",
            "men": "111",
            "oki": "112",
            "suo": "113",
            "s\u00e4 ": "114",
            "t\u00e4\u00e4": "115",
            "uks": "116",
            "vat": "117",
            " al": "118",
            " ke": "119",
            " te": "120",
            "a e": "121",
            "lii": "122",
            "tai": "123",
            "tei": "124",
            "\u00e4is": "125",
            "\u00e4\u00e4 ": "126",
            " pl": "127",
            "ell": "128",
            "i t": "129",
            "ide": "130",
            "ikk": "131",
            "ki ": "132",
            "nta": "133",
            "ova": "134",
            "yst": "135",
            "yt ": "136",
            "\u00e4 p": "137",
            "\u00e4yt": "138",
            " ha": "139",
            " pe": "140",
            " t\u00e4": "141",
            "a n": "142",
            "aik": "143",
            "i p": "144",
            "i v": "145",
            "nyt": "146",
            "n\u00e4y": "147",
            "pal": "148",
            "tee": "149",
            "un ": "150",
            " me": "151",
            "a m": "152",
            "ess": "153",
            "kau": "154",
            "pai": "155",
            "stu": "156",
            "ut ": "157",
            "voi": "158",
            " et": "159",
            "a h": "160",
            "eis": "161",
            "hte": "162",
            "i o": "163",
            "iik": "164",
            "ita": "165",
            "jou": "166",
            "mis": "167",
            "nin": "168",
            "nut": "169",
            "sia": "170",
            "ss\u00e4": "171",
            "van": "172",
            " ty": "173",
            " yh": "174",
            "aks": "175",
            "ime": "176",
            "loi": "177",
            "me ": "178",
            "n e": "179",
            "n h": "180",
            "n l": "181",
            "oin": "182",
            "ome": "183",
            "ott": "184",
            "ouk": "185",
            "sit": "186",
            "sti": "187",
            "tet": "188",
            "tie": "189",
            "ukk": "190",
            "\u00e4 k": "191",
            " ra": "192",
            " ti": "193",
            "aja": "194",
            "asi": "195",
            "ent": "196",
            "iga": "197",
            "iig": "198",
            "ite": "199",
            "jan": "200",
            "kaa": "201",
            "kse": "202",
            "laa": "203",
            "lan": "204",
            "li ": "205",
            "n\u00e4j": "206",
            "ole": "207",
            "tii": "208",
            "usi": "209",
            "\u00e4j\u00e4": "210",
            " ov": "211",
            "a a": "212",
            "ant": "213",
            "ava": "214",
            "ei ": "215",
            "eri": "216",
            "kan": "217",
            "kku": "218",
            "lai": "219",
            "lis": "220",
            "l\u00e4i": "221",
            "mat": "222",
            "ois": "223",
            "pel": "224",
            "sil": "225",
            "sty": "226",
            "taj": "227",
            "tav": "228",
            "ttu": "229",
            "ty\u00f6": "230",
            "y\u00f6s": "231",
            "\u00e4 o": "232",
            " ai": "233",
            " pu": "234",
            "a j": "235",
            "a l": "236",
            "aal": "237",
            "arv": "238",
            "ass": "239",
            "ien": "240",
            "imi": "241",
            "imm": "242",
            "it\u00e4": "243",
            "ka ": "244",
            "kes": "245",
            "kue": "246",
            "lee": "247",
            "lin": "248",
            "llo": "249",
            "one": "250",
            "ri ": "251",
            "t o": "252",
            "t p": "253",
            "tu ": "254",
            "val": "255",
            "vuo": "256",
            " ei": "257",
            " he": "258",
            " hy": "259",
            " my": "260",
            " vo": "261",
            "ali": "262",
            "alo": "263",
            "ano": "264",
            "ast": "265",
            "att": "266",
            "auk": "267",
            "eli": "268",
            "ely": "269",
            "hti": "270",
            "ika": "271",
            "ken": "272",
            "kki": "273",
            "lys": "274",
            "min": "275",
            "my\u00f6": "276",
            "oht": "277",
            "oma": "278",
            "tus": "279",
            "umi": "280",
            "yks": "281",
            "\u00e4t ": "282",
            "\u00e4\u00e4l": "283",
            "\u00f6s ": "284",
            " ar": "285",
            " eu": "286",
            " hu": "287",
            " na": "288",
            "aat": "289",
            "alk": "290",
            "alu": "291",
            "ans": "292",
            "arj": "293",
            "enn": "294",
            "han": "295",
            "kuu": "296",
            "n y": "297",
            "set": "298",
            "sim": "299"
        },
        "french": {
            "es ": "0",
            " de": "1",
            "de ": "2",
            " le": "3",
            "ent": "4",
            "le ": "5",
            "nt ": "6",
            "la ": "7",
            "s d": "8",
            " la": "9",
            "ion": "10",
            "on ": "11",
            "re ": "12",
            " pa": "13",
            "e l": "14",
            "e d": "15",
            " l'": "16",
            "e p": "17",
            " co": "18",
            " pr": "19",
            "tio": "20",
            "ns ": "21",
            " en": "22",
            "ne ": "23",
            "que": "24",
            "r l": "25",
            "les": "26",
            "ur ": "27",
            "en ": "28",
            "ati": "29",
            "ue ": "30",
            " po": "31",
            " d'": "32",
            "par": "33",
            " a ": "34",
            "et ": "35",
            "it ": "36",
            " qu": "37",
            "men": "38",
            "ons": "39",
            "te ": "40",
            " et": "41",
            "t d": "42",
            " re": "43",
            "des": "44",
            " un": "45",
            "ie ": "46",
            "s l": "47",
            " su": "48",
            "pou": "49",
            " au": "50",
            " \u00e0 ": "51",
            "con": "52",
            "er ": "53",
            " no": "54",
            "ait": "55",
            "e c": "56",
            "se ": "57",
            "t\u00e9 ": "58",
            "du ": "59",
            " du": "60",
            " d\u00e9": "61",
            "ce ": "62",
            "e e": "63",
            "is ": "64",
            "n d": "65",
            "s a": "66",
            " so": "67",
            "e r": "68",
            "e s": "69",
            "our": "70",
            "res": "71",
            "ssi": "72",
            "eur": "73",
            " se": "74",
            "eme": "75",
            "est": "76",
            "us ": "77",
            "sur": "78",
            "ant": "79",
            "iqu": "80",
            "s p": "81",
            "une": "82",
            "uss": "83",
            "l'a": "84",
            "pro": "85",
            "ter": "86",
            "tre": "87",
            "end": "88",
            "rs ": "89",
            " ce": "90",
            "e a": "91",
            "t p": "92",
            "un ": "93",
            " ma": "94",
            " ru": "95",
            " r\u00e9": "96",
            "ous": "97",
            "ris": "98",
            "rus": "99",
            "sse": "100",
            "ans": "101",
            "ar ": "102",
            "com": "103",
            "e m": "104",
            "ire": "105",
            "nce": "106",
            "nte": "107",
            "t l": "108",
            " av": "109",
            " mo": "110",
            " te": "111",
            "il ": "112",
            "me ": "113",
            "ont": "114",
            "ten": "115",
            "a p": "116",
            "dan": "117",
            "pas": "118",
            "qui": "119",
            "s e": "120",
            "s s": "121",
            " in": "122",
            "ist": "123",
            "lle": "124",
            "nou": "125",
            "pr\u00e9": "126",
            "'un": "127",
            "air": "128",
            "d'a": "129",
            "ir ": "130",
            "n e": "131",
            "rop": "132",
            "ts ": "133",
            " da": "134",
            "a s": "135",
            "as ": "136",
            "au ": "137",
            "den": "138",
            "mai": "139",
            "mis": "140",
            "ori": "141",
            "out": "142",
            "rme": "143",
            "sio": "144",
            "tte": "145",
            "ux ": "146",
            "a d": "147",
            "ien": "148",
            "n a": "149",
            "ntr": "150",
            "omm": "151",
            "ort": "152",
            "ouv": "153",
            "s c": "154",
            "son": "155",
            "tes": "156",
            "ver": "157",
            "\u00e8re": "158",
            " il": "159",
            " m ": "160",
            " sa": "161",
            " ve": "162",
            "a r": "163",
            "ais": "164",
            "ava": "165",
            "di ": "166",
            "n p": "167",
            "sti": "168",
            "ven": "169",
            " mi": "170",
            "ain": "171",
            "enc": "172",
            "for": "173",
            "it\u00e9": "174",
            "lar": "175",
            "oir": "176",
            "rem": "177",
            "ren": "178",
            "rro": "179",
            "r\u00e9s": "180",
            "sie": "181",
            "t a": "182",
            "tur": "183",
            " pe": "184",
            " to": "185",
            "d'u": "186",
            "ell": "187",
            "err": "188",
            "ers": "189",
            "ide": "190",
            "ine": "191",
            "iss": "192",
            "mes": "193",
            "por": "194",
            "ran": "195",
            "sit": "196",
            "st ": "197",
            "t r": "198",
            "uti": "199",
            "vai": "200",
            "\u00e9 l": "201",
            "\u00e9si": "202",
            " di": "203",
            " n'": "204",
            " \u00e9t": "205",
            "a c": "206",
            "ass": "207",
            "e t": "208",
            "in ": "209",
            "nde": "210",
            "pre": "211",
            "rat": "212",
            "s m": "213",
            "ste": "214",
            "tai": "215",
            "tch": "216",
            "ui ": "217",
            "uro": "218",
            "\u00e8s ": "219",
            " es": "220",
            " fo": "221",
            " tr": "222",
            "'ad": "223",
            "app": "224",
            "aux": "225",
            "e \u00e0": "226",
            "ett": "227",
            "iti": "228",
            "lit": "229",
            "nal": "230",
            "op\u00e9": "231",
            "r d": "232",
            "ra ": "233",
            "rai": "234",
            "ror": "235",
            "s r": "236",
            "tat": "237",
            "ut\u00e9": "238",
            "\u00e0 l": "239",
            " af": "240",
            "anc": "241",
            "ara": "242",
            "art": "243",
            "bre": "244",
            "ch\u00e9": "245",
            "dre": "246",
            "e f": "247",
            "ens": "248",
            "lem": "249",
            "n r": "250",
            "n t": "251",
            "ndr": "252",
            "nne": "253",
            "onn": "254",
            "pos": "255",
            "s t": "256",
            "tiq": "257",
            "ure": "258",
            " tu": "259",
            "ale": "260",
            "and": "261",
            "ave": "262",
            "cla": "263",
            "cou": "264",
            "e n": "265",
            "emb": "266",
            "ins": "267",
            "jou": "268",
            "mme": "269",
            "rie": "270",
            "r\u00e8s": "271",
            "sem": "272",
            "str": "273",
            "t i": "274",
            "ues": "275",
            "uni": "276",
            "uve": "277",
            "\u00e9 d": "278",
            "\u00e9e ": "279",
            " ch": "280",
            " do": "281",
            " eu": "282",
            " fa": "283",
            " lo": "284",
            " ne": "285",
            " ra": "286",
            "arl": "287",
            "att": "288",
            "ec ": "289",
            "ica": "290",
            "l a": "291",
            "l'o": "292",
            "l'\u00e9": "293",
            "mmi": "294",
            "nta": "295",
            "orm": "296",
            "ou ": "297",
            "r u": "298",
            "rle": "299"
        },
        "german": {
            "en ": "0",
            "er ": "1",
            " de": "2",
            "der": "3",
            "ie ": "4",
            " di": "5",
            "die": "6",
            "sch": "7",
            "ein": "8",
            "che": "9",
            "ich": "10",
            "den": "11",
            "in ": "12",
            "te ": "13",
            "ch ": "14",
            " ei": "15",
            "ung": "16",
            "n d": "17",
            "nd ": "18",
            " be": "19",
            "ver": "20",
            "es ": "21",
            " zu": "22",
            "eit": "23",
            "gen": "24",
            "und": "25",
            " un": "26",
            " au": "27",
            " in": "28",
            "cht": "29",
            "it ": "30",
            "ten": "31",
            " da": "32",
            "ent": "33",
            " ve": "34",
            "and": "35",
            " ge": "36",
            "ine": "37",
            " mi": "38",
            "r d": "39",
            "hen": "40",
            "ng ": "41",
            "nde": "42",
            " vo": "43",
            "e d": "44",
            "ber": "45",
            "men": "46",
            "ei ": "47",
            "mit": "48",
            " st": "49",
            "ter": "50",
            "ren": "51",
            "t d": "52",
            " er": "53",
            "ere": "54",
            "n s": "55",
            "ste": "56",
            " se": "57",
            "e s": "58",
            "ht ": "59",
            "des": "60",
            "ist": "61",
            "ne ": "62",
            "auf": "63",
            "e a": "64",
            "isc": "65",
            "on ": "66",
            "rte": "67",
            " re": "68",
            " we": "69",
            "ges": "70",
            "uch": "71",
            " f\u00fc": "72",
            " so": "73",
            "bei": "74",
            "e e": "75",
            "nen": "76",
            "r s": "77",
            "ach": "78",
            "f\u00fcr": "79",
            "ier": "80",
            "par": "81",
            "\u00fcr ": "82",
            " ha": "83",
            "as ": "84",
            "ert": "85",
            " an": "86",
            " pa": "87",
            " sa": "88",
            " sp": "89",
            " wi": "90",
            "for": "91",
            "tag": "92",
            "zu ": "93",
            "das": "94",
            "rei": "95",
            "he ": "96",
            "hre": "97",
            "nte": "98",
            "sen": "99",
            "vor": "100",
            " sc": "101",
            "ech": "102",
            "etz": "103",
            "hei": "104",
            "lan": "105",
            "n a": "106",
            "pd ": "107",
            "st ": "108",
            "sta": "109",
            "ese": "110",
            "lic": "111",
            " ab": "112",
            " si": "113",
            "gte": "114",
            " wa": "115",
            "iti": "116",
            "kei": "117",
            "n e": "118",
            "nge": "119",
            "sei": "120",
            "tra": "121",
            "zen": "122",
            " im": "123",
            " la": "124",
            "art": "125",
            "im ": "126",
            "lle": "127",
            "n w": "128",
            "rde": "129",
            "rec": "130",
            "set": "131",
            "str": "132",
            "tei": "133",
            "tte": "134",
            " ni": "135",
            "e p": "136",
            "ehe": "137",
            "ers": "138",
            "g d": "139",
            "nic": "140",
            "von": "141",
            " al": "142",
            " pr": "143",
            "an ": "144",
            "aus": "145",
            "erf": "146",
            "r e": "147",
            "tze": "148",
            "t\u00fcr": "149",
            "uf ": "150",
            "ag ": "151",
            "als": "152",
            "ar ": "153",
            "chs": "154",
            "end": "155",
            "ge ": "156",
            "ige": "157",
            "ion": "158",
            "ls ": "159",
            "n m": "160",
            "ngs": "161",
            "nis": "162",
            "nt ": "163",
            "ord": "164",
            "s s": "165",
            "sse": "166",
            " t\u00fc": "167",
            "ahl": "168",
            "e b": "169",
            "ede": "170",
            "em ": "171",
            "len": "172",
            "n i": "173",
            "orm": "174",
            "pro": "175",
            "rke": "176",
            "run": "177",
            "s d": "178",
            "wah": "179",
            "wer": "180",
            "\u00fcrk": "181",
            " me": "182",
            "age": "183",
            "att": "184",
            "ell": "185",
            "est": "186",
            "hat": "187",
            "n b": "188",
            "oll": "189",
            "raf": "190",
            "s a": "191",
            "tsc": "192",
            " es": "193",
            " fo": "194",
            " gr": "195",
            " ja": "196",
            "abe": "197",
            "auc": "198",
            "ben": "199",
            "e n": "200",
            "ege": "201",
            "lie": "202",
            "n u": "203",
            "r v": "204",
            "re ": "205",
            "rit": "206",
            "sag": "207",
            " am": "208",
            "agt": "209",
            "ahr": "210",
            "bra": "211",
            "de ": "212",
            "erd": "213",
            "her": "214",
            "ite": "215",
            "le ": "216",
            "n p": "217",
            "n v": "218",
            "or ": "219",
            "rbe": "220",
            "rt ": "221",
            "sic": "222",
            "wie": "223",
            "\u00fcbe": "224",
            " is": "225",
            " \u00fcb": "226",
            "cha": "227",
            "chi": "228",
            "e f": "229",
            "e m": "230",
            "eri": "231",
            "ied": "232",
            "mme": "233",
            "ner": "234",
            "r a": "235",
            "sti": "236",
            "t a": "237",
            "t s": "238",
            "tis": "239",
            " ko": "240",
            "arb": "241",
            "ds ": "242",
            "gan": "243",
            "n z": "244",
            "r f": "245",
            "r w": "246",
            "ran": "247",
            "se ": "248",
            "t i": "249",
            "wei": "250",
            "wir": "251",
            " br": "252",
            " np": "253",
            "am ": "254",
            "bes": "255",
            "d d": "256",
            "deu": "257",
            "e g": "258",
            "e k": "259",
            "efo": "260",
            "et ": "261",
            "eut": "262",
            "fen": "263",
            "hse": "264",
            "lte": "265",
            "n r": "266",
            "npd": "267",
            "r b": "268",
            "rhe": "269",
            "t w": "270",
            "tz ": "271",
            " fr": "272",
            " ih": "273",
            " ke": "274",
            " ma": "275",
            "ame": "276",
            "ang": "277",
            "d s": "278",
            "eil": "279",
            "el ": "280",
            "era": "281",
            "erh": "282",
            "h d": "283",
            "i d": "284",
            "kan": "285",
            "n f": "286",
            "n l": "287",
            "nts": "288",
            "och": "289",
            "rag": "290",
            "rd ": "291",
            "spd": "292",
            "spr": "293",
            "tio": "294",
            " ar": "295",
            " en": "296",
            " ka": "297",
            "ark": "298",
            "ass": "299"
        },
        "hausa": {
            " da": "0",
            "da ": "1",
            "in ": "2",
            "an ": "3",
            "ya ": "4",
            " wa": "5",
            " ya": "6",
            "na ": "7",
            "ar ": "8",
            "a d": "9",
            " ma": "10",
            "wa ": "11",
            "a a": "12",
            "a k": "13",
            "a s": "14",
            " ta": "15",
            "wan": "16",
            " a ": "17",
            " ba": "18",
            " ka": "19",
            "ta ": "20",
            "a y": "21",
            "n d": "22",
            " ha": "23",
            " na": "24",
            " su": "25",
            " sa": "26",
            "kin": "27",
            "sa ": "28",
            "ata": "29",
            " ko": "30",
            "a t": "31",
            "su ": "32",
            " ga": "33",
            "ai ": "34",
            " sh": "35",
            "a m": "36",
            "uwa": "37",
            "iya": "38",
            "ma ": "39",
            "a w": "40",
            "asa": "41",
            "yan": "42",
            "ka ": "43",
            "ani": "44",
            "shi": "45",
            "a b": "46",
            "a h": "47",
            "a c": "48",
            "ama": "49",
            "ba ": "50",
            "nan": "51",
            "n a": "52",
            " mu": "53",
            "ana": "54",
            " yi": "55",
            "a g": "56",
            " za": "57",
            "i d": "58",
            " ku": "59",
            "aka": "60",
            "yi ": "61",
            "n k": "62",
            "ann": "63",
            "ke ": "64",
            "tar": "65",
            " ci": "66",
            "iki": "67",
            "n s": "68",
            "ko ": "69",
            " ra": "70",
            "ki ": "71",
            "ne ": "72",
            "a z": "73",
            "mat": "74",
            "hak": "75",
            "nin": "76",
            "e d": "77",
            "nna": "78",
            "uma": "79",
            "nda": "80",
            "a n": "81",
            "ada": "82",
            "cik": "83",
            "ni ": "84",
            "rin": "85",
            "una": "86",
            "ara": "87",
            "kum": "88",
            "akk": "89",
            " ce": "90",
            " du": "91",
            "man": "92",
            "n y": "93",
            "nci": "94",
            "sar": "95",
            "aki": "96",
            "awa": "97",
            "ci ": "98",
            "kan": "99",
            "kar": "100",
            "ari": "101",
            "n m": "102",
            "and": "103",
            "hi ": "104",
            "n t": "105",
            "ga ": "106",
            "owa": "107",
            "ash": "108",
            "kam": "109",
            "dan": "110",
            "ewa": "111",
            "nsa": "112",
            "ali": "113",
            "ami": "114",
            " ab": "115",
            " do": "116",
            "anc": "117",
            "n r": "118",
            "aya": "119",
            "i n": "120",
            "sun": "121",
            "uka": "122",
            " al": "123",
            " ne": "124",
            "a'a": "125",
            "cew": "126",
            "cin": "127",
            "mas": "128",
            "tak": "129",
            "un ": "130",
            "aba": "131",
            "kow": "132",
            "a r": "133",
            "ra ": "134",
            " ja": "135",
            " \u0199a": "136",
            "en ": "137",
            "r d": "138",
            "sam": "139",
            "tsa": "140",
            " ru": "141",
            "ce ": "142",
            "i a": "143",
            "abi": "144",
            "ida": "145",
            "mut": "146",
            "n g": "147",
            "n j": "148",
            "san": "149",
            "a \u0199": "150",
            "har": "151",
            "on ": "152",
            "i m": "153",
            "suk": "154",
            " ak": "155",
            " ji": "156",
            "yar": "157",
            "'ya": "158",
            "kwa": "159",
            "min": "160",
            " 'y": "161",
            "ane": "162",
            "ban": "163",
            "ins": "164",
            "ruw": "165",
            "i k": "166",
            "n h": "167",
            " ad": "168",
            "ake": "169",
            "n w": "170",
            "sha": "171",
            "utu": "172",
            " \u01b4a": "173",
            "bay": "174",
            "tan": "175",
            "\u01b4an": "176",
            "bin": "177",
            "duk": "178",
            "e m": "179",
            "n n": "180",
            "oka": "181",
            "yin": "182",
            "\u0257an": "183",
            " fa": "184",
            "a i": "185",
            "kki": "186",
            "re ": "187",
            "za ": "188",
            "ala": "189",
            "asu": "190",
            "han": "191",
            "i y": "192",
            "mar": "193",
            "ran": "194",
            "\u0199as": "195",
            "add": "196",
            "ars": "197",
            "gab": "198",
            "ira": "199",
            "mma": "200",
            "u d": "201",
            " ts": "202",
            "abb": "203",
            "abu": "204",
            "aga": "205",
            "gar": "206",
            "n b": "207",
            " \u0257a": "208",
            "aci": "209",
            "aik": "210",
            "am ": "211",
            "dun": "212",
            "e s": "213",
            "i b": "214",
            "i w": "215",
            "kas": "216",
            "kok": "217",
            "wam": "218",
            " am": "219",
            "amf": "220",
            "bba": "221",
            "din": "222",
            "fan": "223",
            "gwa": "224",
            "i s": "225",
            "wat": "226",
            "ano": "227",
            "are": "228",
            "dai": "229",
            "iri": "230",
            "ma'": "231",
            " la": "232",
            "all": "233",
            "dam": "234",
            "ika": "235",
            "mi ": "236",
            "she": "237",
            "tum": "238",
            "uni": "239",
            " an": "240",
            " ai": "241",
            " ke": "242",
            " ki": "243",
            "dag": "244",
            "mai": "245",
            "mfa": "246",
            "no ": "247",
            "nsu": "248",
            "o d": "249",
            "sak": "250",
            "um ": "251",
            " bi": "252",
            " gw": "253",
            " kw": "254",
            "jam": "255",
            "yya": "256",
            "a j": "257",
            "fa ": "258",
            "uta": "259",
            " hu": "260",
            "'a ": "261",
            "ans": "262",
            "a\u0257a": "263",
            "dda": "264",
            "hin": "265",
            "niy": "266",
            "r s": "267",
            "bat": "268",
            "dar": "269",
            "gan": "270",
            "i t": "271",
            "nta": "272",
            "oki": "273",
            "omi": "274",
            "sal": "275",
            "a l": "276",
            "kac": "277",
            "lla": "278",
            "wad": "279",
            "war": "280",
            "amm": "281",
            "dom": "282",
            "r m": "283",
            "ras": "284",
            "sai": "285",
            " lo": "286",
            "ats": "287",
            "hal": "288",
            "kat": "289",
            "li ": "290",
            "lok": "291",
            "n c": "292",
            "nar": "293",
            "tin": "294",
            "afa": "295",
            "bub": "296",
            "i g": "297",
            "isa": "298",
            "mak": "299"
        },
        "hawaiian": {
            " ka": "0",
            "na ": "1",
            " o ": "2",
            "ka ": "3",
            " ma": "4",
            " a ": "5",
            " la": "6",
            "a i": "7",
            "a m": "8",
            " i ": "9",
            "la ": "10",
            "ana": "11",
            "ai ": "12",
            "ia ": "13",
            "a o": "14",
            "a k": "15",
            "a h": "16",
            "o k": "17",
            " ke": "18",
            "a a": "19",
            "i k": "20",
            " ho": "21",
            " ia": "22",
            "ua ": "23",
            " na": "24",
            " me": "25",
            "e k": "26",
            "e a": "27",
            "au ": "28",
            "ke ": "29",
            "ma ": "30",
            "mai": "31",
            "aku": "32",
            " ak": "33",
            "ahi": "34",
            " ha": "35",
            " ko": "36",
            " e ": "37",
            "a l": "38",
            " no": "39",
            "me ": "40",
            "ku ": "41",
            "aka": "42",
            "kan": "43",
            "no ": "44",
            "i a": "45",
            "ho ": "46",
            "ou ": "47",
            " ai": "48",
            "i o": "49",
            "a p": "50",
            "o l": "51",
            "o a": "52",
            "ama": "53",
            "a n": "54",
            " an": "55",
            "i m": "56",
            "han": "57",
            "i i": "58",
            "iho": "59",
            "kou": "60",
            "ne ": "61",
            " ih": "62",
            "o i": "63",
            "iki": "64",
            "ona": "65",
            "hoo": "66",
            "le ": "67",
            "e h": "68",
            " he": "69",
            "ina": "70",
            " wa": "71",
            "ea ": "72",
            "ako": "73",
            "u i": "74",
            "kah": "75",
            "oe ": "76",
            "i l": "77",
            "u a": "78",
            " pa": "79",
            "hoi": "80",
            "e i": "81",
            "era": "82",
            "ko ": "83",
            "u m": "84",
            "kua": "85",
            "mak": "86",
            "oi ": "87",
            "kai": "88",
            "i n": "89",
            "a e": "90",
            "hin": "91",
            "ane": "92",
            " ol": "93",
            "i h": "94",
            "mea": "95",
            "wah": "96",
            "lak": "97",
            "e m": "98",
            "o n": "99",
            "u l": "100",
            "ika": "101",
            "ki ": "102",
            "a w": "103",
            "mal": "104",
            "hi ": "105",
            "e n": "106",
            "u o": "107",
            "hik": "108",
            " ku": "109",
            "e l": "110",
            "ele": "111",
            "ra ": "112",
            "ber": "113",
            "ine": "114",
            "abe": "115",
            "ain": "116",
            "ala": "117",
            "lo ": "118",
            " po": "119",
            "kon": "120",
            " ab": "121",
            "ole": "122",
            "he ": "123",
            "pau": "124",
            "mah": "125",
            "va ": "126",
            "ela": "127",
            "kau": "128",
            "nak": "129",
            " oe": "130",
            "kei": "131",
            "oia": "132",
            " ie": "133",
            "ram": "134",
            " oi": "135",
            "oa ": "136",
            "eho": "137",
            "hov": "138",
            "ieh": "139",
            "ova": "140",
            " ua": "141",
            "una": "142",
            "ara": "143",
            "o s": "144",
            "awa": "145",
            "o o": "146",
            "nau": "147",
            "u n": "148",
            "wa ": "149",
            "wai": "150",
            "hel": "151",
            " ae": "152",
            " al": "153",
            "ae ": "154",
            "ta ": "155",
            "aik": "156",
            " hi": "157",
            "ale": "158",
            "ila": "159",
            "lel": "160",
            "ali": "161",
            "eik": "162",
            "olo": "163",
            "onu": "164",
            " lo": "165",
            "aua": "166",
            "e o": "167",
            "ola": "168",
            "hon": "169",
            "mam": "170",
            "nan": "171",
            " au": "172",
            "aha": "173",
            "lau": "174",
            "nua": "175",
            "oho": "176",
            "oma": "177",
            " ao": "178",
            "ii ": "179",
            "alu": "180",
            "ima": "181",
            "mau": "182",
            "ike": "183",
            "apa": "184",
            "elo": "185",
            "lii": "186",
            "poe": "187",
            "aia": "188",
            "noa": "189",
            " in": "190",
            "o m": "191",
            "oka": "192",
            "'u ": "193",
            "aho": "194",
            "ei ": "195",
            "eka": "196",
            "ha ": "197",
            "lu ": "198",
            "nei": "199",
            "hol": "200",
            "ino": "201",
            "o e": "202",
            "ema": "203",
            "iwa": "204",
            "olu": "205",
            "ada": "206",
            "naa": "207",
            "pa ": "208",
            "u k": "209",
            "ewa": "210",
            "hua": "211",
            "lam": "212",
            "lua": "213",
            "o h": "214",
            "ook": "215",
            "u h": "216",
            " li": "217",
            "ahu": "218",
            "amu": "219",
            "ui ": "220",
            " il": "221",
            " mo": "222",
            " se": "223",
            "eia": "224",
            "law": "225",
            " hu": "226",
            " ik": "227",
            "ail": "228",
            "e p": "229",
            "li ": "230",
            "lun": "231",
            "uli": "232",
            "io ": "233",
            "kik": "234",
            "noh": "235",
            "u e": "236",
            " sa": "237",
            "aaw": "238",
            "awe": "239",
            "ena": "240",
            "hal": "241",
            "kol": "242",
            "lan": "243",
            " le": "244",
            " ne": "245",
            "a'u": "246",
            "ilo": "247",
            "kap": "248",
            "oko": "249",
            "sa ": "250",
            " pe": "251",
            "hop": "252",
            "loa": "253",
            "ope": "254",
            "pe ": "255",
            " ad": "256",
            " pu": "257",
            "ahe": "258",
            "aol": "259",
            "ia'": "260",
            "lai": "261",
            "loh": "262",
            "na'": "263",
            "oom": "264",
            "aau": "265",
            "eri": "266",
            "kul": "267",
            "we ": "268",
            "ake": "269",
            "kek": "270",
            "laa": "271",
            "ri ": "272",
            "iku": "273",
            "kak": "274",
            "lim": "275",
            "nah": "276",
            "ner": "277",
            "nui": "278",
            "ono": "279",
            "a u": "280",
            "dam": "281",
            "kum": "282",
            "lok": "283",
            "mua": "284",
            "uma": "285",
            "wal": "286",
            "wi ": "287",
            "'i ": "288",
            "a'i": "289",
            "aan": "290",
            "alo": "291",
            "eta": "292",
            "mu ": "293",
            "ohe": "294",
            "u p": "295",
            "ula": "296",
            "uwa": "297",
            " nu": "298",
            "amo": "299"
        },
        "hindi": {
            "\u0947\u0902 ": "0",
            " \u0939\u0948": "1",
            "\u092e\u0947\u0902": "2",
            " \u092e\u0947": "3",
            "\u0928\u0947 ": "4",
            "\u0915\u0940 ": "5",
            "\u0915\u0947 ": "6",
            "\u0939\u0948 ": "7",
            " \u0915\u0947": "8",
            " \u0915\u0940": "9",
            " \u0915\u094b": "10",
            "\u094b\u0902 ": "11",
            "\u0915\u094b ": "12",
            "\u093e \u0939": "13",
            " \u0915\u093e": "14",
            "\u0938\u0947 ": "15",
            "\u093e \u0915": "16",
            "\u0947 \u0915": "17",
            "\u0902 \u0915": "18",
            "\u092f\u093e ": "19",
            " \u0915\u093f": "20",
            " \u0938\u0947": "21",
            "\u0915\u093e ": "22",
            "\u0940 \u0915": "23",
            " \u0928\u0947": "24",
            " \u0914\u0930": "25",
            "\u0914\u0930 ": "26",
            "\u0928\u093e ": "27",
            "\u0915\u093f ": "28",
            "\u092d\u0940 ": "29",
            "\u0940 \u0938": "30",
            " \u091c\u093e": "31",
            " \u092a\u0930": "32",
            "\u093e\u0930 ": "33",
            " \u0915\u0930": "34",
            "\u0940 \u0939": "35",
            " \u0939\u094b": "36",
            "\u0939\u0940 ": "37",
            "\u093f\u092f\u093e": "38",
            " \u0907\u0938": "39",
            " \u0930\u0939": "40",
            "\u0930 \u0915": "41",
            "\u0941\u0928\u093e": "42",
            "\u0924\u093e ": "43",
            "\u093e\u0928 ": "44",
            "\u0947 \u0938": "45",
            " \u092d\u0940": "46",
            " \u0930\u093e": "47",
            "\u0947 \u0939": "48",
            " \u091a\u0941": "49",
            " \u092a\u093e": "50",
            "\u092a\u0930 ": "51",
            "\u091a\u0941\u0928": "52",
            "\u0928\u093e\u0935": "53",
            " \u0915\u0939": "54",
            "\u092a\u094d\u0930": "55",
            " \u092d\u093e": "56",
            "\u0930\u093e\u091c": "57",
            "\u0939\u0948\u0902": "58",
            "\u093e \u0938": "59",
            "\u0948 \u0915": "60",
            "\u0948\u0902 ": "61",
            "\u0928\u0940 ": "62",
            "\u0932 \u0915": "63",
            "\u0940\u0902 ": "64",
            "\u093c\u0940 ": "65",
            "\u0925\u093e ": "66",
            "\u0930\u0940 ": "67",
            "\u093e\u0935 ": "68",
            "\u0947 \u092c": "69",
            " \u092a\u094d": "70",
            "\u0915\u094d\u0937": "71",
            "\u092a\u093e ": "72",
            "\u0932\u0947 ": "73",
            " \u0926\u0947": "74",
            "\u0932\u093e ": "75",
            "\u0939\u093e ": "76",
            "\u093e\u091c\u092a": "77",
            " \u0925\u093e": "78",
            " \u0928\u0939": "79",
            "\u0907\u0938 ": "80",
            "\u0915\u0930 ": "81",
            "\u091c\u092a\u093e": "82",
            "\u0928\u0939\u0940": "83",
            "\u092d\u093e\u091c": "84",
            "\u092f\u094b\u0902": "85",
            "\u0930 \u0938": "86",
            "\u0939\u0940\u0902": "87",
            " \u0905\u092e": "88",
            " \u092c\u093e": "89",
            " \u092e\u093e": "90",
            " \u0935\u093f": "91",
            "\u0930\u0940\u0915": "92",
            "\u093f\u090f ": "93",
            "\u0947 \u092a": "94",
            "\u094d\u092f\u093e": "95",
            " \u0939\u0940": "96",
            "\u0902 \u092e": "97",
            "\u0915\u093e\u0930": "98",
            "\u093e \u091c": "99",
            "\u0947 \u0932": "100",
            " \u0924\u093e": "101",
            " \u0926\u093f": "102",
            " \u0938\u093e": "103",
            " \u0939\u092e": "104",
            "\u093e \u0928": "105",
            "\u093e \u092e": "106",
            "\u093e\u0915\u093c": "107",
            "\u094d\u0924\u093e": "108",
            " \u090f\u0915": "109",
            " \u0938\u0902": "110",
            " \u0938\u094d": "111",
            "\u0905\u092e\u0930": "112",
            "\u0915\u093c\u0940": "113",
            "\u0924\u093e\u091c": "114",
            "\u092e\u0930\u0940": "115",
            "\u0938\u094d\u0925": "116",
            "\u093e \u0925": "117",
            "\u093e\u0930\u094d": "118",
            " \u0939\u0941": "119",
            "\u0907\u0930\u093e": "120",
            "\u090f\u0915 ": "121",
            "\u0928 \u0915": "122",
            "\u0930 \u092e": "123",
            "\u0930\u093e\u0915": "124",
            "\u0940 \u091c": "125",
            "\u0940 \u0928": "126",
            " \u0907\u0930": "127",
            " \u0909\u0928": "128",
            " \u092a\u0939": "129",
            "\u0915\u0939\u093e": "130",
            "\u0924\u0947 ": "131",
            "\u0947 \u0905": "132",
            " \u0924\u094b": "133",
            " \u0938\u0941": "134",
            "\u0924\u093f ": "135",
            "\u0924\u0940 ": "136",
            "\u0924\u094b ": "137",
            "\u092e\u093f\u0932": "138",
            "\u093f\u0915 ": "139",
            "\u093f\u092f\u094b": "140",
            "\u094d\u0930\u0947": "141",
            " \u0905\u092a": "142",
            " \u092b\u093c": "143",
            " \u0932\u093f": "144",
            " \u0932\u094b": "145",
            " \u0938\u092e": "146",
            "\u092e \u0915": "147",
            "\u0930\u094d\u091f": "148",
            "\u0939\u094b ": "149",
            "\u093e \u091a": "150",
            "\u093e\u0908 ": "151",
            "\u093e\u0928\u0947": "152",
            "\u093f\u0928 ": "153",
            "\u094d\u092f ": "154",
            " \u0909\u0938": "155",
            " \u0915\u093c": "156",
            " \u0938\u0915": "157",
            " \u0938\u0948": "158",
            "\u0902 \u092a": "159",
            "\u0902 \u0939": "160",
            "\u0917\u0940 ": "161",
            "\u0924 \u0915": "162",
            "\u092e\u093e\u0928": "163",
            "\u0930 \u0928": "164",
            "\u0937\u094d\u091f": "165",
            "\u0938 \u0915": "166",
            "\u0938\u094d\u0924": "167",
            "\u093e\u0901 ": "168",
            "\u0940 \u092c": "169",
            "\u0940 \u092e": "170",
            "\u094d\u0930\u0940": "171",
            " \u0926\u094b": "172",
            " \u092e\u093f": "173",
            " \u092e\u0941": "174",
            " \u0932\u0947": "175",
            " \u0936\u093e": "176",
            "\u0902 \u0938": "177",
            "\u091c\u093c\u093e": "178",
            "\u0924\u094d\u0930": "179",
            "\u0925\u0940 ": "180",
            "\u0932\u093f\u090f": "181",
            "\u0938\u0940 ": "182",
            "\u093c\u093e ": "183",
            "\u093c\u093e\u0930": "184",
            "\u093e\u0902\u0917": "185",
            "\u0947 \u0926": "186",
            "\u0947 \u092e": "187",
            "\u094d\u0935 ": "188",
            " \u0928\u093e": "189",
            " \u092c\u0928": "190",
            "\u0902\u0917\u094d": "191",
            "\u0915\u093e\u0902": "192",
            "\u0917\u093e ": "193",
            "\u0917\u094d\u0930": "194",
            "\u091c\u093e ": "195",
            "\u091c\u094d\u092f": "196",
            "\u0926\u0940 ": "197",
            "\u0928 \u092e": "198",
            "\u092a\u093e\u0930": "199",
            "\u092d\u093e ": "200",
            "\u0930\u0939\u0940": "201",
            "\u0930\u0947 ": "202",
            "\u0930\u0947\u0938": "203",
            "\u0932\u0940 ": "204",
            "\u0938\u092d\u093e": "205",
            "\u093e \u0930": "206",
            "\u093e\u0932 ": "207",
            "\u0940 \u0905": "208",
            "\u0940\u0915\u0940": "209",
            "\u0947 \u0924": "210",
            "\u0947\u0936 ": "211",
            " \u0905\u0902": "212",
            " \u0924\u0915": "213",
            " \u092f\u093e": "214",
            "\u0908 \u0939": "215",
            "\u0915\u0930\u0928": "216",
            "\u0924\u0915 ": "217",
            "\u0926\u0947\u0936": "218",
            "\u0935\u0930\u094d": "219",
            "\u093e\u092f\u093e": "220",
            "\u0940 \u092d": "221",
            "\u0947\u0938 ": "222",
            "\u094d\u0937 ": "223",
            " \u0917\u092f": "224",
            " \u091c\u093f": "225",
            " \u0925\u0940": "226",
            " \u092c\u0921": "227",
            " \u092f\u0939": "228",
            " \u0935\u093e": "229",
            "\u0902\u0924\u0930": "230",
            "\u0905\u0902\u0924": "231",
            "\u0915\u093c ": "232",
            "\u0917\u092f\u093e": "233",
            "\u091f\u0940 ": "234",
            "\u0928\u093f\u0915": "235",
            "\u0928\u094d\u0939": "236",
            "\u092a\u0939\u0932": "237",
            "\u092c\u0921\u093c": "238",
            "\u092e\u093e\u0930": "239",
            "\u0930 \u092a": "240",
            "\u0930\u0928\u0947": "241",
            "\u093e\u091c\u093c": "242",
            "\u093f \u0907": "243",
            "\u0940 \u0930": "244",
            "\u0947 \u091c": "245",
            "\u0947 \u0935": "246",
            "\u094d\u091f ": "247",
            "\u094d\u091f\u0940": "248",
            " \u0905\u092c": "249",
            " \u0932\u0917": "250",
            " \u0935\u0930": "251",
            " \u0938\u0940": "252",
            "\u0902 \u092d": "253",
            "\u0909\u0928\u094d": "254",
            "\u0915 \u0915": "255",
            "\u0915\u093f\u092f": "256",
            "\u0926\u0947\u0916": "257",
            "\u092a\u0942\u0930": "258",
            "\u092b\u093c\u094d": "259",
            "\u092f\u0939 ": "260",
            "\u092f\u093e\u0928": "261",
            "\u0930\u093f\u0915": "262",
            "\u0930\u093f\u092f": "263",
            "\u0930\u094d\u0921": "264",
            "\u0932\u0947\u0915": "265",
            "\u0938\u0915\u0924": "266",
            "\u0939\u094b\u0902": "267",
            "\u0939\u094b\u0917": "268",
            "\u093e \u0905": "269",
            "\u093e \u0926": "270",
            "\u093e \u092a": "271",
            "\u093e\u0926 ": "272",
            "\u093e\u0930\u093e": "273",
            "\u093f\u0924 ": "274",
            "\u0940 \u0924": "275",
            "\u0940 \u092a": "276",
            "\u094b \u0915": "277",
            "\u094b \u0926": "278",
            " \u0924\u0947": "279",
            " \u0928\u093f": "280",
            " \u0938\u0930": "281",
            " \u0939\u093e": "282",
            "\u0902 \u0926": "283",
            "\u0905\u092a\u0928": "284",
            "\u091c\u093e\u0928": "285",
            "\u0924 \u092e": "286",
            "\u0925\u093f\u0924": "287",
            "\u092a\u0928\u0940": "288",
            "\u092e\u0939\u0932": "289",
            "\u0930 \u0939": "290",
            "\u0932\u094b\u0917": "291",
            "\u0935 \u0915": "292",
            "\u0939\u0928\u093e": "293",
            "\u0939\u0932 ": "294",
            "\u0939\u093e\u0901": "295",
            "\u093e\u091c\u094d": "296",
            "\u093e\u0928\u093e": "297",
            "\u093f\u0915\u094d": "298",
            "\u093f\u0938\u094d": "299"
        },
        "hungarian": {
            " a ": "0",
            " az": "1",
            " sz": "2",
            "az ": "3",
            " me": "4",
            "en ": "5",
            " el": "6",
            " ho": "7",
            "ek ": "8",
            "gy ": "9",
            "tt ": "10",
            "ett": "11",
            "sze": "12",
            " fe": "13",
            "\u00e9s ": "14",
            " ki": "15",
            "tet": "16",
            " be": "17",
            "et ": "18",
            "ter": "19",
            " k\u00f6": "20",
            " \u00e9s": "21",
            "hog": "22",
            "meg": "23",
            "ogy": "24",
            "szt": "25",
            "te ": "26",
            "t a": "27",
            "zet": "28",
            "a m": "29",
            "nek": "30",
            "nt ": "31",
            "s\u00e9g": "32",
            "sz\u00e1": "33",
            "ak ": "34",
            " va": "35",
            "an ": "36",
            "eze": "37",
            "ra ": "38",
            "ta ": "39",
            " mi": "40",
            "int": "41",
            "k\u00f6z": "42",
            " is": "43",
            "esz": "44",
            "fel": "45",
            "min": "46",
            "nak": "47",
            "ors": "48",
            "zer": "49",
            " te": "50",
            "a a": "51",
            "a k": "52",
            "is ": "53",
            " cs": "54",
            "ele": "55",
            "er ": "56",
            "men": "57",
            "si ": "58",
            "tek": "59",
            "ti ": "60",
            " ne": "61",
            "csa": "62",
            "ent": "63",
            "z e": "64",
            "a t": "65",
            "ala": "66",
            "ere": "67",
            "es ": "68",
            "lom": "69",
            "lte": "70",
            "mon": "71",
            "ond": "72",
            "rsz": "73",
            "sza": "74",
            "tte": "75",
            "z\u00e1g": "76",
            "\u00e1ny": "77",
            " fo": "78",
            " ma": "79",
            "ai ": "80",
            "ben": "81",
            "el ": "82",
            "ene": "83",
            "ik ": "84",
            "jel": "85",
            "t\u00e1s": "86",
            "\u00e1ll": "87",
            " ha": "88",
            " le": "89",
            " \u00e1l": "90",
            "agy": "91",
            "al\u00e1": "92",
            "isz": "93",
            "y a": "94",
            "zte": "95",
            "\u00e1s ": "96",
            " al": "97",
            "e a": "98",
            "egy": "99",
            "ely": "100",
            "for": "101",
            "lat": "102",
            "lt ": "103",
            "n a": "104",
            "oga": "105",
            "on ": "106",
            "re ": "107",
            "st ": "108",
            "s\u00e1g": "109",
            "t m": "110",
            "\u00e1n ": "111",
            "\u00e9t ": "112",
            "\u00fclt": "113",
            " je": "114",
            "gi ": "115",
            "k a": "116",
            "k\u00fcl": "117",
            "lam": "118",
            "len": "119",
            "l\u00e1s": "120",
            "m\u00e1s": "121",
            "s k": "122",
            "vez": "123",
            "\u00e1so": "124",
            "\u00f6z\u00f6": "125",
            " ta": "126",
            "a s": "127",
            "a v": "128",
            "asz": "129",
            "at\u00e1": "130",
            "et\u0151": "131",
            "kez": "132",
            "let": "133",
            "mag": "134",
            "nem": "135",
            "sz\u00e9": "136",
            "z m": "137",
            "\u00e1t ": "138",
            "\u00e9te": "139",
            "\u00f6lt": "140",
            " de": "141",
            " gy": "142",
            " k\u00e9": "143",
            " mo": "144",
            " v\u00e1": "145",
            " \u00e9r": "146",
            "a b": "147",
            "a f": "148",
            "ami": "149",
            "at ": "150",
            "ato": "151",
            "att": "152",
            "bef": "153",
            "dta": "154",
            "gya": "155",
            "hat": "156",
            "i s": "157",
            "las": "158",
            "ndt": "159",
            "rt ": "160",
            "szo": "161",
            "t k": "162",
            "t\u00e1r": "163",
            "t\u00e9s": "164",
            "van": "165",
            "\u00e1s\u00e1": "166",
            "\u00f3l ": "167",
            " b\u00e9": "168",
            " eg": "169",
            " or": "170",
            " p\u00e1": "171",
            " p\u00e9": "172",
            " ve": "173",
            "ban": "174",
            "eke": "175",
            "ek\u00fc": "176",
            "el\u0151": "177",
            "erv": "178",
            "ete": "179",
            "fog": "180",
            "i a": "181",
            "kis": "182",
            "l\u00e1d": "183",
            "nte": "184",
            "nye": "185",
            "nyi": "186",
            "ok ": "187",
            "om\u00e1": "188",
            "os ": "189",
            "r\u00e1n": "190",
            "r\u00e1s": "191",
            "sal": "192",
            "t e": "193",
            "v\u00e1l": "194",
            "yar": "195",
            "\u00e1go": "196",
            "\u00e1la": "197",
            "\u00e9ge": "198",
            "\u00e9ny": "199",
            "\u00f6tt": "200",
            " t\u00e1": "201",
            "ad\u00f3": "202",
            "elh": "203",
            "fej": "204",
            "het": "205",
            "hoz": "206",
            "ill": "207",
            "j\u00e1r": "208",
            "k\u00e9s": "209",
            "llo": "210",
            "mi ": "211",
            "ny ": "212",
            "ont": "213",
            "ren": "214",
            "res": "215",
            "rin": "216",
            "s a": "217",
            "s e": "218",
            "ssz": "219",
            "zt ": "220",
            " ez": "221",
            " ka": "222",
            " ke": "223",
            " ko": "224",
            " re": "225",
            "a h": "226",
            "a n": "227",
            "den": "228",
            "d\u00f3 ": "229",
            "efo": "230",
            "gad": "231",
            "gat": "232",
            "gye": "233",
            "hel": "234",
            "k e": "235",
            "ket": "236",
            "les": "237",
            "m\u00e1n": "238",
            "nde": "239",
            "nis": "240",
            "ozz": "241",
            "t b": "242",
            "t i": "243",
            "t \u00e9": "244",
            "tat": "245",
            "tos": "246",
            "val": "247",
            "z o": "248",
            "zak": "249",
            "\u00e1d ": "250",
            "\u00e1ly": "251",
            "\u00e1ra": "252",
            "\u00e9si": "253",
            "\u00e9sz": "254",
            " ak": "255",
            " am": "256",
            " es": "257",
            " h\u00e1": "258",
            " ny": "259",
            " t\u00f6": "260",
            "aka": "261",
            "art": "262",
            "at\u00f3": "263",
            "azt": "264",
            "bbe": "265",
            "ber": "266",
            "ci\u00f3": "267",
            "cso": "268",
            "em ": "269",
            "eti": "270",
            "et\u00e9": "271",
            "gal": "272",
            "i t": "273",
            "ini": "274",
            "ist": "275",
            "ja ": "276",
            "ker": "277",
            "ki ": "278",
            "kor": "279",
            "koz": "280",
            "l \u00e9": "281",
            "lj\u00e1": "282",
            "lye": "283",
            "n v": "284",
            "ni ": "285",
            "p\u00e1l": "286",
            "ror": "287",
            "r\u00f3l": "288",
            "r\u00fcl": "289",
            "s c": "290",
            "s p": "291",
            "s s": "292",
            "s v": "293",
            "sok": "294",
            "t j": "295",
            "t t": "296",
            "tar": "297",
            "tel": "298",
            "vat": "299"
        },
        "icelandic": {
            "a\u00f0 ": "0",
            "um ": "1",
            " a\u00f0": "2",
            "ir ": "3",
            "i\u00f0 ": "4",
            "ur ": "5",
            " ve": "6",
            " \u00ed ": "7",
            "na ": "8",
            " \u00e1 ": "9",
            " se": "10",
            " er": "11",
            " og": "12",
            "ar ": "13",
            "og ": "14",
            "ver": "15",
            " mi": "16",
            "inn": "17",
            "nn ": "18",
            " fy": "19",
            "er ": "20",
            "fyr": "21",
            " ek": "22",
            " en": "23",
            " ha": "24",
            " he": "25",
            "ekk": "26",
            " st": "27",
            "ki ": "28",
            "st ": "29",
            "\u00f0i ": "30",
            " ba": "31",
            " me": "32",
            " vi": "33",
            "ig ": "34",
            "rir": "35",
            "yri": "36",
            " um": "37",
            "g f": "38",
            "leg": "39",
            "lei": "40",
            "ns ": "41",
            "\u00f0 s": "42",
            " ei": "43",
            " \u00fea": "44",
            "in ": "45",
            "kki": "46",
            "r h": "47",
            "r s": "48",
            "egi": "49",
            "ein": "50",
            "ga ": "51",
            "ing": "52",
            "ra ": "53",
            "sta": "54",
            " va": "55",
            " \u00fee": "56",
            "ann": "57",
            "en ": "58",
            "mil": "59",
            "sem": "60",
            "tj\u00f3": "61",
            "ar\u00f0": "62",
            "di ": "63",
            "eit": "64",
            "haf": "65",
            "ill": "66",
            "ins": "67",
            "ist": "68",
            "llj": "69",
            "ndi": "70",
            "r a": "71",
            "r e": "72",
            "seg": "73",
            "un ": "74",
            "var": "75",
            " bi": "76",
            " el": "77",
            " fo": "78",
            " ge": "79",
            " yf": "80",
            "and": "81",
            "aug": "82",
            "bau": "83",
            "big": "84",
            "ega": "85",
            "eld": "86",
            "er\u00f0": "87",
            "fir": "88",
            "foo": "89",
            "gin": "90",
            "itt": "91",
            "n s": "92",
            "ngi": "93",
            "num": "94",
            "od ": "95",
            "ood": "96",
            "sin": "97",
            "ta ": "98",
            "tt ": "99",
            "vi\u00f0": "100",
            "yfi": "101",
            "\u00f0 e": "102",
            "\u00f0 f": "103",
            " hr": "104",
            " s\u00e9": "105",
            " \u00fev": "106",
            "a e": "107",
            "a \u00e1": "108",
            "em ": "109",
            "gi ": "110",
            "i f": "111",
            "jar": "112",
            "j\u00f3r": "113",
            "lja": "114",
            "m e": "115",
            "r \u00e1": "116",
            "rei": "117",
            "rst": "118",
            "r\u00f0a": "119",
            "r\u00f0i": "120",
            "r\u00f0u": "121",
            "stj": "122",
            "und": "123",
            "veg": "124",
            "v\u00ed ": "125",
            "\u00f0 v": "126",
            "\u00fea\u00f0": "127",
            "\u00fev\u00ed": "128",
            " fj": "129",
            " ko": "130",
            " sl": "131",
            "eik": "132",
            "end": "133",
            "ert": "134",
            "ess": "135",
            "fj\u00e1": "136",
            "fur": "137",
            "gir": "138",
            "h\u00fas": "139",
            "j\u00e1r": "140",
            "n e": "141",
            "ri ": "142",
            "tar": "143",
            "\u00f0 \u00fe": "144",
            "\u00f0ar": "145",
            "\u00f0ur": "146",
            "\u00fees": "147",
            " br": "148",
            " h\u00fa": "149",
            " kr": "150",
            " le": "151",
            " up": "152",
            "a s": "153",
            "egg": "154",
            "i s": "155",
            "irt": "156",
            "ja ": "157",
            "ki\u00f0": "158",
            "len": "159",
            "me\u00f0": "160",
            "mik": "161",
            "n b": "162",
            "nar": "163",
            "nir": "164",
            "nun": "165",
            "r f": "166",
            "r v": "167",
            "ri\u00f0": "168",
            "rt ": "169",
            "sti": "170",
            "t v": "171",
            "ti ": "172",
            "una": "173",
            "upp": "174",
            "\u00f0a ": "175",
            "\u00f3na": "176",
            " al": "177",
            " fr": "178",
            " gr": "179",
            "a v": "180",
            "all": "181",
            "an ": "182",
            "da ": "183",
            "ei\u00f0": "184",
            "e\u00f0 ": "185",
            "fa ": "186",
            "fra": "187",
            "g e": "188",
            "ger": "189",
            "gi\u00f0": "190",
            "gt ": "191",
            "han": "192",
            "hef": "193",
            "hel": "194",
            "her": "195",
            "hra": "196",
            "i a": "197",
            "i e": "198",
            "i v": "199",
            "i \u00fe": "200",
            "iki": "201",
            "j\u00f3n": "202",
            "j\u00f6r": "203",
            "ka ": "204",
            "kr\u00f3": "205",
            "l\u00edk": "206",
            "m h": "207",
            "n a": "208",
            "nga": "209",
            "r l": "210",
            "ram": "211",
            "ru ": "212",
            "r\u00e1\u00f0": "213",
            "r\u00f3n": "214",
            "svo": "215",
            "vin": "216",
            "\u00ed b": "217",
            "\u00ed h": "218",
            "\u00f0 h": "219",
            "\u00f0 k": "220",
            "\u00f0 m": "221",
            "\u00f6r\u00f0": "222",
            " af": "223",
            " fa": "224",
            " l\u00ed": "225",
            " r\u00e1": "226",
            " sk": "227",
            " sv": "228",
            " te": "229",
            "a b": "230",
            "a f": "231",
            "a h": "232",
            "a k": "233",
            "a u": "234",
            "afi": "235",
            "agn": "236",
            "arn": "237",
            "ast": "238",
            "ber": "239",
            "efu": "240",
            "enn": "241",
            "erb": "242",
            "erg": "243",
            "fi ": "244",
            "g a": "245",
            "gar": "246",
            "i\u00f0s": "247",
            "ker": "248",
            "kke": "249",
            "lan": "250",
            "lj\u00f3": "251",
            "llt": "252",
            "ma ": "253",
            "mi\u00f0": "254",
            "n v": "255",
            "n \u00ed": "256",
            "nan": "257",
            "nda": "258",
            "ndu": "259",
            "ni\u00f0": "260",
            "nna": "261",
            "nnu": "262",
            "nu ": "263",
            "r o": "264",
            "rbe": "265",
            "rgi": "266",
            "sl\u00f6": "267",
            "s\u00e9 ": "268",
            "t a": "269",
            "t h": "270",
            "til": "271",
            "tin": "272",
            "ugu": "273",
            "vil": "274",
            "ygg": "275",
            "\u00e1 s": "276",
            "\u00f0 a": "277",
            "\u00f0 b": "278",
            "\u00f3rn": "279",
            "\u00f6gn": "280",
            "\u00f6ku": "281",
            " at": "282",
            " fi": "283",
            " f\u00e9": "284",
            " ka": "285",
            " ma": "286",
            " no": "287",
            " sa": "288",
            " si": "289",
            " ti": "290",
            " \u00e1k": "291",
            "a m": "292",
            "a t": "293",
            "a \u00ed": "294",
            "a \u00fe": "295",
            "afa": "296",
            "afs": "297",
            "ald": "298",
            "arf": "299"
        },
        "indonesian": {
            "an ": "0",
            " me": "1",
            "kan": "2",
            "ang": "3",
            "ng ": "4",
            " pe": "5",
            "men": "6",
            " di": "7",
            " ke": "8",
            " da": "9",
            " se": "10",
            "eng": "11",
            " be": "12",
            "nga": "13",
            "nya": "14",
            " te": "15",
            "ah ": "16",
            "ber": "17",
            "aka": "18",
            " ya": "19",
            "dan": "20",
            "di ": "21",
            "yan": "22",
            "n p": "23",
            "per": "24",
            "a m": "25",
            "ita": "26",
            " pa": "27",
            "da ": "28",
            "ata": "29",
            "ada": "30",
            "ya ": "31",
            "ta ": "32",
            " in": "33",
            "ala": "34",
            "eri": "35",
            "ia ": "36",
            "a d": "37",
            "n k": "38",
            "am ": "39",
            "ga ": "40",
            "at ": "41",
            "era": "42",
            "n d": "43",
            "ter": "44",
            " ka": "45",
            "a p": "46",
            "ari": "47",
            "emb": "48",
            "n m": "49",
            "ri ": "50",
            " ba": "51",
            "aan": "52",
            "ak ": "53",
            "ra ": "54",
            " it": "55",
            "ara": "56",
            "ela": "57",
            "ni ": "58",
            "ali": "59",
            "ran": "60",
            "ar ": "61",
            "eru": "62",
            "lah": "63",
            "a b": "64",
            "asi": "65",
            "awa": "66",
            "eba": "67",
            "gan": "68",
            "n b": "69",
            " ha": "70",
            "ini": "71",
            "mer": "72",
            " la": "73",
            " mi": "74",
            "and": "75",
            "ena": "76",
            "wan": "77",
            " sa": "78",
            "aha": "79",
            "lam": "80",
            "n i": "81",
            "nda": "82",
            " wa": "83",
            "a i": "84",
            "dua": "85",
            "g m": "86",
            "mi ": "87",
            "n a": "88",
            "rus": "89",
            "tel": "90",
            "yak": "91",
            " an": "92",
            "dal": "93",
            "h d": "94",
            "i s": "95",
            "ing": "96",
            "min": "97",
            "ngg": "98",
            "tak": "99",
            "ami": "100",
            "beb": "101",
            "den": "102",
            "gat": "103",
            "ian": "104",
            "ih ": "105",
            "pad": "106",
            "rga": "107",
            "san": "108",
            "ua ": "109",
            " de": "110",
            "a t": "111",
            "arg": "112",
            "dar": "113",
            "elu": "114",
            "har": "115",
            "i k": "116",
            "i m": "117",
            "i p": "118",
            "ika": "119",
            "in ": "120",
            "iny": "121",
            "itu": "122",
            "mba": "123",
            "n t": "124",
            "ntu": "125",
            "pan": "126",
            "pen": "127",
            "sah": "128",
            "tan": "129",
            "tu ": "130",
            "a k": "131",
            "ban": "132",
            "edu": "133",
            "eka": "134",
            "g d": "135",
            "ka ": "136",
            "ker": "137",
            "nde": "138",
            "nta": "139",
            "ora": "140",
            "usa": "141",
            " du": "142",
            " ma": "143",
            "a s": "144",
            "ai ": "145",
            "ant": "146",
            "bas": "147",
            "end": "148",
            "i d": "149",
            "ira": "150",
            "kam": "151",
            "lan": "152",
            "n s": "153",
            "uli": "154",
            "al ": "155",
            "apa": "156",
            "ere": "157",
            "ert": "158",
            "lia": "159",
            "mem": "160",
            "rka": "161",
            "si ": "162",
            "tal": "163",
            "ung": "164",
            " ak": "165",
            "a a": "166",
            "a w": "167",
            "ani": "168",
            "ask": "169",
            "ent": "170",
            "gar": "171",
            "haa": "172",
            "i i": "173",
            "isa": "174",
            "ked": "175",
            "mbe": "176",
            "ska": "177",
            "tor": "178",
            "uan": "179",
            "uk ": "180",
            "uka": "181",
            " ad": "182",
            " to": "183",
            "asa": "184",
            "aya": "185",
            "bag": "186",
            "dia": "187",
            "dun": "188",
            "erj": "189",
            "mas": "190",
            "na ": "191",
            "rek": "192",
            "rit": "193",
            "sih": "194",
            "us ": "195",
            " bi": "196",
            "a h": "197",
            "ama": "198",
            "dib": "199",
            "ers": "200",
            "g s": "201",
            "han": "202",
            "ik ": "203",
            "kem": "204",
            "ma ": "205",
            "n l": "206",
            "nit": "207",
            "r b": "208",
            "rja": "209",
            "sa ": "210",
            " ju": "211",
            " or": "212",
            " si": "213",
            " ti": "214",
            "a y": "215",
            "aga": "216",
            "any": "217",
            "as ": "218",
            "cul": "219",
            "eme": "220",
            "emu": "221",
            "eny": "222",
            "epa": "223",
            "erb": "224",
            "erl": "225",
            "gi ": "226",
            "h m": "227",
            "i a": "228",
            "kel": "229",
            "li ": "230",
            "mel": "231",
            "nia": "232",
            "opa": "233",
            "rta": "234",
            "sia": "235",
            "tah": "236",
            "ula": "237",
            "un ": "238",
            "unt": "239",
            " at": "240",
            " bu": "241",
            " pu": "242",
            " ta": "243",
            "agi": "244",
            "alu": "245",
            "amb": "246",
            "bah": "247",
            "bis": "248",
            "er ": "249",
            "i t": "250",
            "ibe": "251",
            "ir ": "252",
            "ja ": "253",
            "k m": "254",
            "kar": "255",
            "lai": "256",
            "lal": "257",
            "lu ": "258",
            "mpa": "259",
            "ngk": "260",
            "nja": "261",
            "or ": "262",
            "pa ": "263",
            "pas": "264",
            "pem": "265",
            "rak": "266",
            "rik": "267",
            "seb": "268",
            "tam": "269",
            "tem": "270",
            "top": "271",
            "tuk": "272",
            "uni": "273",
            "war": "274",
            " al": "275",
            " ga": "276",
            " ge": "277",
            " ir": "278",
            " ja": "279",
            " mu": "280",
            " na": "281",
            " pr": "282",
            " su": "283",
            " un": "284",
            "ad ": "285",
            "adi": "286",
            "akt": "287",
            "ann": "288",
            "apo": "289",
            "bel": "290",
            "bul": "291",
            "der": "292",
            "ega": "293",
            "eke": "294",
            "ema": "295",
            "emp": "296",
            "ene": "297",
            "enj": "298",
            "esa": "299"
        },
        "italian": {
            " di": "0",
            "to ": "1",
            "la ": "2",
            " de": "3",
            "di ": "4",
            "no ": "5",
            " co": "6",
            "re ": "7",
            "ion": "8",
            "e d": "9",
            " e ": "10",
            "le ": "11",
            "del": "12",
            "ne ": "13",
            "ti ": "14",
            "ell": "15",
            " la": "16",
            " un": "17",
            "ni ": "18",
            "i d": "19",
            "per": "20",
            " pe": "21",
            "ent": "22",
            " in": "23",
            "one": "24",
            "he ": "25",
            "ta ": "26",
            "zio": "27",
            "che": "28",
            "o d": "29",
            "a d": "30",
            "na ": "31",
            "ato": "32",
            "e s": "33",
            " so": "34",
            "i s": "35",
            "lla": "36",
            "a p": "37",
            "li ": "38",
            "te ": "39",
            " al": "40",
            " ch": "41",
            "er ": "42",
            " pa": "43",
            " si": "44",
            "con": "45",
            "sta": "46",
            " pr": "47",
            "a c": "48",
            " se": "49",
            "el ": "50",
            "ia ": "51",
            "si ": "52",
            "e p": "53",
            " da": "54",
            "e i": "55",
            "i p": "56",
            "ont": "57",
            "ano": "58",
            "i c": "59",
            "all": "60",
            "azi": "61",
            "nte": "62",
            "on ": "63",
            "nti": "64",
            "o s": "65",
            " ri": "66",
            "i a": "67",
            "o a": "68",
            "un ": "69",
            " an": "70",
            "are": "71",
            "ari": "72",
            "e a": "73",
            "i e": "74",
            "ita": "75",
            "men": "76",
            "ri ": "77",
            " ca": "78",
            " il": "79",
            " no": "80",
            " po": "81",
            "a s": "82",
            "ant": "83",
            "il ": "84",
            "in ": "85",
            "a l": "86",
            "ati": "87",
            "cia": "88",
            "e c": "89",
            "ro ": "90",
            "ann": "91",
            "est": "92",
            "gli": "93",
            "t\u00e0 ": "94",
            " qu": "95",
            "e l": "96",
            "nta": "97",
            " a ": "98",
            "com": "99",
            "o c": "100",
            "ra ": "101",
            " le": "102",
            " ne": "103",
            "ali": "104",
            "ere": "105",
            "ist": "106",
            " ma": "107",
            " \u00e8 ": "108",
            "io ": "109",
            "lle": "110",
            "me ": "111",
            "era": "112",
            "ica": "113",
            "ost": "114",
            "pro": "115",
            "tar": "116",
            "una": "117",
            " pi": "118",
            "da ": "119",
            "tat": "120",
            " mi": "121",
            "att": "122",
            "ca ": "123",
            "mo ": "124",
            "non": "125",
            "par": "126",
            "sti": "127",
            " fa": "128",
            " i ": "129",
            " re": "130",
            " su": "131",
            "ess": "132",
            "ini": "133",
            "nto": "134",
            "o l": "135",
            "ssi": "136",
            "tto": "137",
            "a e": "138",
            "ame": "139",
            "col": "140",
            "ei ": "141",
            "ma ": "142",
            "o i": "143",
            "za ": "144",
            " st": "145",
            "a a": "146",
            "ale": "147",
            "anc": "148",
            "ani": "149",
            "i m": "150",
            "ian": "151",
            "o p": "152",
            "oni": "153",
            "sio": "154",
            "tan": "155",
            "tti": "156",
            " lo": "157",
            "i r": "158",
            "oci": "159",
            "oli": "160",
            "ona": "161",
            "ono": "162",
            "tra": "163",
            " l ": "164",
            "a r": "165",
            "eri": "166",
            "ett": "167",
            "lo ": "168",
            "nza": "169",
            "que": "170",
            "str": "171",
            "ter": "172",
            "tta": "173",
            " ba": "174",
            " li": "175",
            " te": "176",
            "ass": "177",
            "e f": "178",
            "enz": "179",
            "for": "180",
            "nno": "181",
            "olo": "182",
            "ori": "183",
            "res": "184",
            "tor": "185",
            " ci": "186",
            " vo": "187",
            "a i": "188",
            "al ": "189",
            "chi": "190",
            "e n": "191",
            "lia": "192",
            "pre": "193",
            "ria": "194",
            "uni": "195",
            "ver": "196",
            " sp": "197",
            "imo": "198",
            "l a": "199",
            "l c": "200",
            "ran": "201",
            "sen": "202",
            "soc": "203",
            "tic": "204",
            " fi": "205",
            " mo": "206",
            "a n": "207",
            "ce ": "208",
            "dei": "209",
            "ggi": "210",
            "gio": "211",
            "iti": "212",
            "l s": "213",
            "lit": "214",
            "ll ": "215",
            "mon": "216",
            "ola": "217",
            "pac": "218",
            "sim": "219",
            "tit": "220",
            "utt": "221",
            "vol": "222",
            " ar": "223",
            " fo": "224",
            " ha": "225",
            " sa": "226",
            "acc": "227",
            "e r": "228",
            "ire": "229",
            "man": "230",
            "ntr": "231",
            "rat": "232",
            "sco": "233",
            "tro": "234",
            "tut": "235",
            "va ": "236",
            " do": "237",
            " gi": "238",
            " me": "239",
            " sc": "240",
            " tu": "241",
            " ve": "242",
            " vi": "243",
            "a m": "244",
            "ber": "245",
            "can": "246",
            "cit": "247",
            "i l": "248",
            "ier": "249",
            "it\u00e0": "250",
            "lli": "251",
            "min": "252",
            "n p": "253",
            "nat": "254",
            "nda": "255",
            "o e": "256",
            "o f": "257",
            "o u": "258",
            "ore": "259",
            "oro": "260",
            "ort": "261",
            "sto": "262",
            "ten": "263",
            "tiv": "264",
            "van": "265",
            "art": "266",
            "cco": "267",
            "ci ": "268",
            "cos": "269",
            "dal": "270",
            "e v": "271",
            "i i": "272",
            "ila": "273",
            "ino": "274",
            "l p": "275",
            "n c": "276",
            "nit": "277",
            "ole": "278",
            "ome": "279",
            "po ": "280",
            "rio": "281",
            "sa ": "282",
            " ce": "283",
            " es": "284",
            " tr": "285",
            "a b": "286",
            "and": "287",
            "ata": "288",
            "der": "289",
            "ens": "290",
            "ers": "291",
            "gi ": "292",
            "ial": "293",
            "ina": "294",
            "itt": "295",
            "izi": "296",
            "lan": "297",
            "lor": "298",
            "mil": "299"
        },
        "kazakh": {
            "\u0430\u043d ": "0",
            "\u0435\u043d ": "1",
            "\u044b\u04a3 ": "2",
            " \u049b\u0430": "3",
            " \u0431\u0430": "4",
            "\u0430\u0439 ": "5",
            "\u043d\u0434\u0430": "6",
            "\u044b\u043d ": "7",
            " \u0441\u0430": "8",
            " \u0430\u043b": "9",
            "\u0434\u0456 ": "10",
            "\u0430\u0440\u044b": "11",
            "\u0434\u044b ": "12",
            "\u044b\u043f ": "13",
            " \u043c\u04b1": "14",
            " \u0431\u0456": "15",
            "\u0430\u0441\u044b": "16",
            "\u0434\u0430 ": "17",
            "\u043d\u0430\u0439": "18",
            " \u0436\u0430": "19",
            "\u043c\u04b1\u043d": "20",
            "\u0441\u0442\u0430": "21",
            "\u0493\u0430\u043d": "22",
            "\u043d \u0431": "23",
            "\u04b1\u043d\u0430": "24",
            " \u0431\u043e": "25",
            "\u043d\u044b\u04a3": "26",
            "\u0456\u043d ": "27",
            "\u043b\u0430\u0440": "28",
            "\u0441\u044b\u043d": "29",
            " \u0434\u0435": "30",
            "\u0430\u0493\u0430": "31",
            "\u0442\u0430\u043d": "32",
            " \u043a\u04e9": "33",
            "\u0431\u0456\u0440": "34",
            "\u0435\u0440 ": "35",
            "\u043c\u0435\u043d": "36",
            "\u0430\u0437\u0430": "37",
            "\u044b\u043d\u0434": "38",
            "\u044b\u043d\u044b": "39",
            " \u043c\u0435": "40",
            "\u0430\u043d\u0434": "41",
            "\u0435\u0440\u0456": "42",
            "\u0431\u043e\u043b": "43",
            "\u0434\u044b\u04a3": "44",
            "\u049b\u0430\u0437": "45",
            "\u0430\u0442\u044b": "46",
            "\u0441\u044b ": "47",
            "\u0442\u044b\u043d": "48",
            "\u0493\u044b ": "49",
            " \u043a\u0435": "50",
            "\u0430\u0440 ": "51",
            "\u0437\u0430\u049b": "52",
            "\u044b\u049b ": "53",
            "\u0430\u043b\u0430": "54",
            "\u0430\u043b\u044b": "55",
            "\u0430\u043d\u044b": "56",
            "\u0430\u0440\u0430": "57",
            "\u0430\u0493\u044b": "58",
            "\u0433\u0435\u043d": "59",
            "\u0442\u0430\u0440": "60",
            "\u0442\u0435\u0440": "61",
            "\u0442\u044b\u0440": "62",
            "\u0430\u0439\u0434": "63",
            "\u0430\u0440\u0434": "64",
            "\u0434\u0435 ": "65",
            "\u0493\u0430 ": "66",
            " \u049b\u043e": "67",
            "\u0431\u0430\u0440": "68",
            "\u0456\u04a3 ": "69",
            "\u049b\u0430\u043d": "70",
            " \u0431\u0435": "71",
            " \u049b\u044b": "72",
            "\u0430\u049b\u0441": "73",
            "\u0433\u0435\u0440": "74",
            "\u0434\u0430\u043d": "75",
            "\u0434\u0430\u0440": "76",
            "\u043b\u044b\u049b": "77",
            "\u043b\u0493\u0430": "78",
            "\u044b\u043d\u0430": "79",
            "\u0456\u0440 ": "80",
            "\u0456\u0440\u0456": "81",
            "\u0493\u0430\u0441": "82",
            " \u0442\u0430": "83",
            "\u0430 \u0431": "84",
            "\u0433\u0456 ": "85",
            "\u0435\u0434\u0456": "86",
            "\u0435\u043b\u0435": "87",
            "\u0439\u0434\u044b": "88",
            "\u043d \u043a": "89",
            "\u043d \u0442": "90",
            "\u043e\u043b\u0430": "91",
            "\u0440\u044b\u043d": "92",
            "\u0456\u043f ": "93",
            "\u049b\u0441\u0442": "94",
            "\u049b\u0442\u0430": "95",
            "\u04a3 \u0431": "96",
            " \u0430\u0439": "97",
            " \u043e\u043b": "98",
            " \u0441\u043e": "99",
            "\u0430\u0439\u0442": "100",
            "\u0434\u0430\u0493": "101",
            "\u0438\u0433\u0435": "102",
            "\u043b\u0435\u0440": "103",
            "\u043b\u044b\u043f": "104",
            "\u043d \u0430": "105",
            "\u0456\u043a ": "106",
            "\u0430\u049b\u0442": "107",
            "\u0431\u0430\u0493": "108",
            "\u043a\u0435\u043d": "109",
            "\u043d \u049b": "110",
            "\u043d\u044b ": "111",
            "\u0440\u0433\u0435": "112",
            "\u0440\u0493\u0430": "113",
            "\u044b\u0440 ": "114",
            " \u0430\u0440": "115",
            "\u0430\u043b\u0493": "116",
            "\u0430\u0441\u0430": "117",
            "\u0431\u0430\u0441": "118",
            "\u0431\u0435\u0440": "119",
            "\u0433\u0435 ": "120",
            "\u0435\u0442\u0456": "121",
            "\u043d\u0430 ": "122",
            "\u043d\u0434\u0435": "123",
            "\u043d\u0435 ": "124",
            "\u043d\u0438\u0433": "125",
            "\u0440\u0434\u044b": "126",
            "\u0440\u044b ": "127",
            "\u0441\u0430\u0439": "128",
            " \u0430\u0443": "129",
            " \u043a\u04af": "130",
            " \u043d\u0438": "131",
            " \u043e\u0442": "132",
            " \u04e9\u0437": "133",
            "\u0430\u0443\u0434": "134",
            "\u0435\u043f ": "135",
            "\u0438\u044f\u043b": "136",
            "\u043b\u0442\u044b": "137",
            "\u043d \u0436": "138",
            "\u043d \u043e": "139",
            "\u043e\u0441\u044b": "140",
            "\u043e\u0442\u044b": "141",
            "\u0440\u044b\u043f": "142",
            "\u0440\u0456 ": "143",
            "\u0442\u043a\u0435": "144",
            "\u0442\u044b ": "145",
            "\u044b \u0431": "146",
            "\u044b \u0436": "147",
            "\u044b\u043b\u044b": "148",
            "\u044b\u0441\u044b": "149",
            "\u0456 \u0441": "150",
            "\u049b\u0430\u0440": "151",
            " \u0431\u04b1": "152",
            " \u0434\u0430": "153",
            " \u0436\u0435": "154",
            " \u0442\u04b1": "155",
            " \u049b\u04b1": "156",
            "\u0430\u0434\u044b": "157",
            "\u0430\u0439\u043b": "158",
            "\u0430\u043f ": "159",
            "\u0430\u0442\u0430": "160",
            "\u0435\u043d\u0456": "161",
            "\u0439\u043b\u0430": "162",
            "\u043d \u043c": "163",
            "\u043d \u0441": "164",
            "\u043d\u0434\u044b": "165",
            "\u043d\u0434\u0456": "166",
            "\u0440 \u043c": "167",
            "\u0442\u0430\u0439": "168",
            "\u0442\u0456\u043d": "169",
            "\u044b \u0442": "170",
            "\u044b\u0441 ": "171",
            "\u0456\u043d\u0434": "172",
            " \u0431\u0438": "173",
            "\u0430 \u0436": "174",
            "\u0430\u0443\u044b": "175",
            "\u0434\u0435\u043f": "176",
            "\u0434\u0456\u04a3": "177",
            "\u0435\u043a\u0435": "178",
            "\u0435\u0440\u0438": "179",
            "\u0439\u044b\u043d": "180",
            "\u043a\u0435\u043b": "181",
            "\u043b\u0434\u044b": "182",
            "\u043c\u0430 ": "183",
            "\u043d\u0430\u043d": "184",
            "\u043e\u043d\u044b": "185",
            "\u043f \u0436": "186",
            "\u043f \u043e": "187",
            "\u0440 \u0431": "188",
            "\u0440\u0438\u044f": "189",
            "\u0440\u043b\u0430": "190",
            "\u0443\u0434\u0430": "191",
            "\u0448\u044b\u043b": "192",
            "\u044b \u0430": "193",
            "\u044b\u049b\u0442": "194",
            "\u0456 \u0430": "195",
            "\u0456 \u0431": "196",
            "\u0456\u0437 ": "197",
            "\u0456\u043b\u0456": "198",
            "\u04a3 \u049b": "199",
            " \u0430\u0441": "200",
            " \u0435\u043a": "201",
            " \u0436\u043e": "202",
            " \u043c\u04d9": "203",
            " \u043e\u0441": "204",
            " \u0440\u0435": "205",
            " \u0441\u0435": "206",
            "\u0430\u043b\u0434": "207",
            "\u0434\u0430\u043b": "208",
            "\u0434\u0435\u0433": "209",
            "\u0434\u0435\u0439": "210",
            "\u0435 \u0431": "211",
            "\u0435\u0442 ": "212",
            "\u0436\u0430\u0441": "213",
            "\u0439 \u0431": "214",
            "\u043b\u0430\u0443": "215",
            "\u043b\u0434\u0430": "216",
            "\u043c\u0435\u0442": "217",
            "\u043d\u044b\u043d": "218",
            "\u0441\u0430\u0440": "219",
            "\u0441\u0456 ": "220",
            "\u0442\u0456 ": "221",
            "\u044b\u0440\u044b": "222",
            "\u044b\u0442\u0430": "223",
            "\u0456\u0441\u0456": "224",
            "\u04a3 \u0430": "225",
            "\u04e9\u0442\u0435": "226",
            " \u0430\u0442": "227",
            " \u0435\u043b": "228",
            " \u0436\u04af": "229",
            " \u043c\u0430": "230",
            " \u0442\u043e": "231",
            " \u0448\u044b": "232",
            "\u0430 \u0430": "233",
            "\u0430\u043b\u0442": "234",
            "\u0430\u043c\u0430": "235",
            "\u0430\u0440\u043b": "236",
            "\u0430\u0441\u0442": "237",
            "\u0431\u04b1\u043b": "238",
            "\u0434\u0430\u0439": "239",
            "\u0434\u044b\u049b": "240",
            "\u0435\u043a ": "241",
            "\u0435\u043b\u044c": "242",
            "\u0435\u0441\u0456": "243",
            "\u0437\u0434\u0456": "244",
            "\u043a\u04e9\u0442": "245",
            "\u043b\u0435\u043c": "246",
            "\u043b\u044c ": "247",
            "\u043d \u0435": "248",
            "\u043f \u0430": "249",
            "\u0440 \u0430": "250",
            "\u0440\u0435\u0441": "251",
            "\u0441\u0430 ": "252",
            "\u0442\u0430 ": "253",
            "\u0442\u0442\u0435": "254",
            "\u0442\u04b1\u0440": "255",
            "\u0448\u044b ": "256",
            "\u044b \u0434": "257",
            "\u044b \u049b": "258",
            "\u044b\u0437 ": "259",
            "\u049b\u044b\u0442": "260",
            " \u043a\u043e": "261",
            " \u043d\u0435": "262",
            " \u043e\u0439": "263",
            " \u043e\u0440": "264",
            " \u0441\u04b1": "265",
            " \u0442\u04af": "266",
            "\u0430\u043b\u044c": "267",
            "\u0430\u0440\u0435": "268",
            "\u0430\u0442\u0442": "269",
            "\u0434\u0456\u0440": "270",
            "\u0435\u0432 ": "271",
            "\u0435\u0433\u0456": "272",
            "\u0435\u0434\u0430": "273",
            "\u0435\u043a\u0456": "274",
            "\u0435\u043b\u0434": "275",
            "\u0435\u0440\u0433": "276",
            "\u0435\u0440\u0434": "277",
            "\u0438\u044f\u0434": "278",
            "\u043a\u0435\u0440": "279",
            "\u043a\u0435\u0442": "280",
            "\u043b\u044b\u0441": "281",
            "\u043b\u0456\u0441": "282",
            "\u043c\u0435\u0434": "283",
            "\u043c\u043f\u0438": "284",
            "\u043d \u0434": "285",
            "\u043d\u0456 ": "286",
            "\u043d\u0456\u043d": "287",
            "\u043f \u0442": "288",
            "\u043f\u0435\u043a": "289",
            "\u0440\u0435\u043b": "290",
            "\u0440\u0442\u0430": "291",
            "\u0440\u0456\u043b": "292",
            "\u0440\u0456\u043d": "293",
            "\u0441\u0435\u043d": "294",
            "\u0442\u0430\u043b": "295",
            "\u0448\u0456\u043b": "296",
            "\u044b \u043a": "297",
            "\u044b \u043c": "298",
            "\u044b\u0441\u0442": "299"
        },
        "kyrgyz": {
            "\u044b\u043d ": "0",
            "\u0430\u043d ": "1",
            " \u0436\u0430": "2",
            "\u0435\u043d ": "3",
            "\u0434\u0430 ": "4",
            " \u0442\u0430": "5",
            "\u0430\u0440 ": "6",
            "\u0438\u043d ": "7",
            " \u043a\u0430": "8",
            "\u0430\u0440\u044b": "9",
            " \u0430\u043b": "10",
            " \u0431\u0430": "11",
            " \u0431\u0438": "12",
            "\u043b\u0430\u0440": "13",
            " \u0431\u043e": "14",
            " \u043a\u044b": "15",
            "\u0430\u043b\u0430": "16",
            "\u043d \u043a": "17",
            " \u0441\u0430": "18",
            "\u043d\u0434\u0430": "19",
            "\u0433\u0430\u043d": "20",
            "\u0442\u0430\u0440": "21",
            " \u0434\u0435": "22",
            "\u0430\u043d\u0434": "23",
            "\u043d \u0431": "24",
            " \u043a\u0435": "25",
            "\u0430\u0440\u0434": "26",
            "\u043c\u0435\u043d": "27",
            "\u043d \u0442": "28",
            "\u0430\u0440\u0430": "29",
            "\u043d\u044b\u043d": "30",
            " \u0434\u0430": "31",
            " \u043c\u0435": "32",
            "\u043a\u044b\u0440": "33",
            " \u0447\u0435": "34",
            "\u043d \u0430": "35",
            "\u0440\u044b ": "36",
            " \u043a\u043e": "37",
            "\u0433\u0435\u043d": "38",
            "\u0434\u0430\u0440": "39",
            "\u043a\u0435\u043d": "40",
            "\u043a\u0442\u0430": "41",
            "\u0443\u0443 ": "42",
            "\u0435\u043d\u0435": "43",
            "\u0435\u0440\u0438": "44",
            " \u0448\u0430": "45",
            "\u0430\u043b\u044b": "46",
            "\u0430\u0442 ": "47",
            "\u043d\u0430 ": "48",
            " \u043a\u04e9": "49",
            " \u044d\u043c": "50",
            "\u0430\u0442\u044b": "51",
            "\u0434\u0430\u043d": "52",
            "\u0434\u0435\u043f": "53",
            "\u0434\u044b\u043d": "54",
            "\u0435\u043f ": "55",
            "\u043d\u0435\u043d": "56",
            "\u0440\u044b\u043d": "57",
            " \u0431\u0435": "58",
            "\u043a\u0430\u043d": "59",
            "\u043b\u0443\u0443": "60",
            "\u0440\u0433\u044b": "61",
            "\u0442\u0430\u043d": "62",
            "\u0448\u0430\u0439": "63",
            "\u044b\u0440\u0433": "64",
            "\u04af\u043d ": "65",
            " \u0430\u0440": "66",
            " \u043c\u0430": "67",
            "\u0430\u0433\u044b": "68",
            "\u0430\u043a\u0442": "69",
            "\u0430\u043d\u044b": "70",
            "\u0433\u044b ": "71",
            "\u0433\u044b\u0437": "72",
            "\u0434\u044b ": "73",
            "\u0440\u0434\u0430": "74",
            "\u0430\u0439 ": "75",
            "\u0431\u0438\u0440": "76",
            "\u0431\u043e\u043b": "77",
            "\u0435\u0440 ": "78",
            "\u043d \u0441": "79",
            "\u043d\u0434\u044b": "80",
            "\u0443\u043d ": "81",
            "\u0447\u0430 ": "82",
            "\u044b\u043d\u0434": "83",
            "\u0430 \u043a": "84",
            "\u0430\u0433\u0430": "85",
            "\u0430\u0439\u043b": "86",
            "\u0430\u043d\u0430": "87",
            "\u0430\u043f ": "88",
            "\u0433\u0430 ": "89",
            "\u043b\u0433\u0435": "90",
            "\u043d\u0447\u0430": "91",
            "\u043f \u043a": "92",
            "\u0440\u0434\u044b": "93",
            "\u0442\u0443\u0443": "94",
            "\u044b\u043d\u044b": "95",
            " \u0430\u043d": "96",
            " \u04e9\u0437": "97",
            "\u0430\u043c\u0430": "98",
            "\u0430\u0442\u0430": "99",
            "\u0434\u0438\u043d": "100",
            "\u0439\u0442 ": "101",
            "\u043b\u0433\u0430": "102",
            "\u043b\u043e\u043e": "103",
            "\u043e\u043e ": "104",
            "\u0440\u0438 ": "105",
            "\u0442\u0438\u043d": "106",
            "\u044b\u0437 ": "107",
            "\u044b\u043f ": "108",
            "\u04e9\u0440\u04af": "109",
            " \u043f\u0430": "110",
            " \u044d\u043a": "111",
            "\u0430 \u0431": "112",
            "\u0430\u043b\u0433": "113",
            "\u0430\u0441\u044b": "114",
            "\u0430\u0448\u0442": "115",
            "\u0431\u0438\u0437": "116",
            "\u043a\u0435\u043b": "117",
            "\u043a\u0442\u0435": "118",
            "\u0442\u0430\u043b": "119",
            " \u043d\u0435": "120",
            " \u0441\u0443": "121",
            "\u0430\u043a\u044b": "122",
            "\u0435\u043d\u0442": "123",
            "\u0438\u043d\u0434": "124",
            "\u0438\u0440 ": "125",
            "\u043a\u0430\u043b": "126",
            "\u043d \u0434": "127",
            "\u043d\u0434\u0435": "128",
            "\u043e\u0433\u043e": "129",
            "\u043e\u043d\u0434": "130",
            "\u043e\u044e\u043d": "131",
            "\u0440 \u0431": "132",
            "\u0440 \u043c": "133",
            "\u0440\u0430\u043d": "134",
            "\u0441\u0430\u043b": "135",
            "\u0441\u0442\u0430": "136",
            "\u0441\u044b ": "137",
            "\u0443\u0440\u0430": "138",
            "\u044b\u0433\u044b": "139",
            " \u0430\u0448": "140",
            " \u043c\u0438": "141",
            " \u0441\u044b": "142",
            " \u0442\u0443": "143",
            "\u0430\u043b ": "144",
            "\u0430\u0440\u0442": "145",
            "\u0431\u043e\u0440": "146",
            "\u0435\u043b\u0433": "147",
            "\u0435\u043d\u0438": "148",
            "\u0435\u0442 ": "149",
            "\u0436\u0430\u0442": "150",
            "\u0439\u043b\u043e": "151",
            "\u043a\u0430\u0440": "152",
            "\u043d \u043c": "153",
            "\u043e\u0433\u0443": "154",
            "\u043f \u0430": "155",
            "\u043f \u0436": "156",
            "\u0440 \u044d": "157",
            "\u0441\u044b\u043d": "158",
            "\u044b\u043a ": "159",
            "\u044e\u043d\u0447": "160",
            " \u0431\u0443": "161",
            " \u0443\u0440": "162",
            "\u0430 \u0430": "163",
            "\u0430\u043a ": "164",
            "\u0430\u043b\u0434": "165",
            "\u0430\u043b\u0443": "166",
            "\u0431\u0430\u0440": "167",
            "\u0431\u0435\u0440": "168",
            "\u0431\u043e\u044e": "169",
            "\u0433\u0435 ": "170",
            "\u0434\u043e\u043d": "171",
            "\u0435\u0433\u0438": "172",
            "\u0435\u043a\u0442": "173",
            "\u0435\u0444\u0442": "174",
            "\u0438\u0437 ": "175",
            "\u043a\u0430\u0442": "176",
            "\u043b\u0434\u044b": "177",
            "\u043d \u0447": "178",
            "\u043d \u044d": "179",
            "\u043d \u04e9": "180",
            "\u043d\u0434\u043e": "181",
            "\u043d\u0435\u0444": "182",
            "\u043e\u043d ": "183",
            "\u0441\u0430\u0442": "184",
            "\u0442\u043e\u0440": "185",
            "\u0442\u044b ": "186",
            "\u0443\u0434\u0430": "187",
            "\u0443\u043b ": "188",
            "\u0443\u043b\u0430": "189",
            "\u0443\u0443\u0434": "190",
            "\u044b \u0431": "191",
            "\u044b \u0436": "192",
            "\u044b \u043a": "193",
            "\u044b\u043b ": "194",
            "\u044b\u043d\u0430": "195",
            "\u044d\u043a\u0435": "196",
            "\u044f\u0441\u044b": "197",
            " \u0430\u0442": "198",
            " \u0434\u043e": "199",
            " \u0436\u044b": "200",
            " \u0441\u043e": "201",
            " \u0447\u044b": "202",
            "\u0430\u0430\u0441": "203",
            "\u0430\u0439\u0442": "204",
            "\u0430\u0441\u0442": "205",
            "\u0431\u0430\u0430": "206",
            "\u0431\u0430\u0448": "207",
            "\u0433\u0430\u0440": "208",
            "\u0433\u044b\u043d": "209",
            "\u0434\u04e9 ": "210",
            "\u0435 \u0431": "211",
            "\u0435\u043a ": "212",
            "\u0436\u044b\u043b": "213",
            "\u0438 \u0431": "214",
            "\u0438\u043a ": "215",
            "\u0438\u044f\u0441": "216",
            "\u043a\u044b\u0437": "217",
            "\u043b\u0434\u0430": "218",
            "\u043b\u044b\u043a": "219",
            "\u043c\u0434\u0430": "220",
            "\u043d \u0436": "221",
            "\u043d\u0434\u0438": "222",
            "\u043d\u0438 ": "223",
            "\u043d\u0438\u043d": "224",
            "\u043e\u0440\u0434": "225",
            "\u0440\u0434\u043e": "226",
            "\u0441\u0442\u043e": "227",
            "\u0442\u0430 ": "228",
            "\u0442\u0435\u0440": "229",
            "\u0442\u0442\u0438": "230",
            "\u0442\u0443\u0440": "231",
            "\u0442\u044b\u043d": "232",
            "\u0443\u043f ": "233",
            "\u0443\u0448\u0443": "234",
            "\u0444\u0442\u0438": "235",
            "\u044b\u043a\u0442": "236",
            "\u04af\u043f ": "237",
            "\u04e9\u043d ": "238",
            " \u0430\u0439": "239",
            " \u0431\u04af": "240",
            " \u0438\u0447": "241",
            " \u0438\u0448": "242",
            " \u043c\u043e": "243",
            " \u043f\u0440": "244",
            " \u0440\u0435": "245",
            " \u04e9\u043a": "246",
            " \u04e9\u0442": "247",
            "\u0430 \u0434": "248",
            "\u0430 \u0443": "249",
            "\u0430 \u044d": "250",
            "\u0430\u0439\u043c": "251",
            "\u0430\u043c\u0434": "252",
            "\u0430\u0442\u0442": "253",
            "\u0431\u0435\u043a": "254",
            "\u0431\u0443\u043b": "255",
            "\u0433\u043e\u043b": "256",
            "\u0434\u0435\u0433": "257",
            "\u0435\u0433\u0435": "258",
            "\u0435\u0439\u0442": "259",
            "\u0435\u043b\u0435": "260",
            "\u0435\u043d\u0434": "261",
            "\u0436\u0430\u043a": "262",
            "\u0438 \u043a": "263",
            "\u0438\u043d\u0438": "264",
            "\u0438\u0440\u0438": "265",
            "\u0439\u043c\u0430": "266",
            "\u043a\u0442\u043e": "267",
            "\u043b\u0438\u043a": "268",
            "\u043c\u0430\u043a": "269",
            "\u043c\u0435\u0441": "270",
            "\u043d \u0443": "271",
            "\u043d \u0448": "272",
            "\u043d\u0442\u0442": "273",
            "\u043e\u043b ": "274",
            "\u043e\u043b\u043e": "275",
            "\u043f\u0430\u0440": "276",
            "\u0440\u0430\u043a": "277",
            "\u0440\u04af\u04af": "278",
            "\u0441\u044b\u0440": "279",
            "\u0442\u0438 ": "280",
            "\u0442\u0438\u043a": "281",
            "\u0442\u0442\u0430": "282",
            "\u0442\u04e9\u0440": "283",
            "\u0443 \u0436": "284",
            "\u0443 \u0441": "285",
            "\u0448\u043a\u0430": "286",
            "\u044b \u043c": "287",
            "\u044b\u0437\u044b": "288",
            "\u044b\u043b\u0434": "289",
            "\u044d\u043c\u0435": "290",
            "\u04af\u0440\u04af": "291",
            "\u04e9\u043b\u04af": "292",
            "\u04e9\u0442\u04e9": "293",
            " \u0436\u0435": "294",
            " \u0442\u04af": "295",
            " \u044d\u043b": "296",
            " \u04e9\u043d": "297",
            "\u0430 \u0436": "298",
            "\u0430\u0434\u044b": "299"
        },
        "latin": {
            "um ": "0",
            "us ": "1",
            "ut ": "2",
            "et ": "3",
            "is ": "4",
            " et": "5",
            " in": "6",
            " qu": "7",
            "tur": "8",
            " pr": "9",
            "est": "10",
            "tio": "11",
            " au": "12",
            "am ": "13",
            "em ": "14",
            "aut": "15",
            " di": "16",
            "ent": "17",
            "in ": "18",
            "dic": "19",
            "t e": "20",
            " es": "21",
            "ur ": "22",
            "ati": "23",
            "ion": "24",
            "st ": "25",
            " ut": "26",
            "ae ": "27",
            "qua": "28",
            " de": "29",
            "nt ": "30",
            " su": "31",
            " si": "32",
            "itu": "33",
            "unt": "34",
            "rum": "35",
            "ia ": "36",
            "es ": "37",
            "ter": "38",
            " re": "39",
            "nti": "40",
            "rae": "41",
            "s e": "42",
            "qui": "43",
            "io ": "44",
            "pro": "45",
            "it ": "46",
            "per": "47",
            "ita": "48",
            "one": "49",
            "ici": "50",
            "ius": "51",
            " co": "52",
            "t d": "53",
            "bus": "54",
            "pra": "55",
            "m e": "56",
            " no": "57",
            "edi": "58",
            "tia": "59",
            "ue ": "60",
            "ibu": "61",
            " se": "62",
            " ad": "63",
            "er ": "64",
            " fi": "65",
            "ili": "66",
            "que": "67",
            "t i": "68",
            "de ": "69",
            "oru": "70",
            " te": "71",
            "ali": "72",
            " pe": "73",
            "aed": "74",
            "cit": "75",
            "m d": "76",
            "t s": "77",
            "tat": "78",
            "tem": "79",
            "tis": "80",
            "t p": "81",
            "sti": "82",
            "te ": "83",
            "cum": "84",
            "ere": "85",
            "ium": "86",
            " ex": "87",
            "rat": "88",
            "ta ": "89",
            "con": "90",
            "cti": "91",
            "oni": "92",
            "ra ": "93",
            "s i": "94",
            " cu": "95",
            " sa": "96",
            "eni": "97",
            "nis": "98",
            "nte": "99",
            "eri": "100",
            "omi": "101",
            "re ": "102",
            "s a": "103",
            "min": "104",
            "os ": "105",
            "ti ": "106",
            "uer": "107",
            " ma": "108",
            " ue": "109",
            "m s": "110",
            "nem": "111",
            "t m": "112",
            " mo": "113",
            " po": "114",
            " ui": "115",
            "gen": "116",
            "ict": "117",
            "m i": "118",
            "ris": "119",
            "s s": "120",
            "t a": "121",
            "uae": "122",
            " do": "123",
            "m a": "124",
            "t c": "125",
            " ge": "126",
            "as ": "127",
            "e i": "128",
            "e p": "129",
            "ne ": "130",
            " ca": "131",
            "ine": "132",
            "quo": "133",
            "s p": "134",
            " al": "135",
            "e e": "136",
            "ntu": "137",
            "ro ": "138",
            "tri": "139",
            "tus": "140",
            "uit": "141",
            "atu": "142",
            "ini": "143",
            "iqu": "144",
            "m p": "145",
            "ost": "146",
            "res": "147",
            "ura": "148",
            " ac": "149",
            " fu": "150",
            "a e": "151",
            "ant": "152",
            "nes": "153",
            "nim": "154",
            "sun": "155",
            "tra": "156",
            "e a": "157",
            "s d": "158",
            " pa": "159",
            " uo": "160",
            "ecu": "161",
            " om": "162",
            " tu": "163",
            "ad ": "164",
            "cut": "165",
            "omn": "166",
            "s q": "167",
            " ei": "168",
            "ex ": "169",
            "icu": "170",
            "tor": "171",
            "uid": "172",
            " ip": "173",
            " me": "174",
            "e s": "175",
            "era": "176",
            "eru": "177",
            "iam": "178",
            "ide": "179",
            "ips": "180",
            " iu": "181",
            "a s": "182",
            "do ": "183",
            "e d": "184",
            "eiu": "185",
            "ica": "186",
            "im ": "187",
            "m c": "188",
            "m u": "189",
            "tiu": "190",
            " ho": "191",
            "cat": "192",
            "ist": "193",
            "nat": "194",
            "on ": "195",
            "pti": "196",
            "reg": "197",
            "rit": "198",
            "s t": "199",
            "sic": "200",
            "spe": "201",
            " en": "202",
            " sp": "203",
            "dis": "204",
            "eli": "205",
            "liq": "206",
            "lis": "207",
            "men": "208",
            "mus": "209",
            "num": "210",
            "pos": "211",
            "sio": "212",
            " an": "213",
            " gr": "214",
            "abi": "215",
            "acc": "216",
            "ect": "217",
            "ri ": "218",
            "uan": "219",
            " le": "220",
            "ecc": "221",
            "ete": "222",
            "gra": "223",
            "non": "224",
            "se ": "225",
            "uen": "226",
            "uis": "227",
            " fa": "228",
            " tr": "229",
            "ate": "230",
            "e c": "231",
            "fil": "232",
            "na ": "233",
            "ni ": "234",
            "pul": "235",
            "s f": "236",
            "ui ": "237",
            "at ": "238",
            "cce": "239",
            "dam": "240",
            "i e": "241",
            "ina": "242",
            "leg": "243",
            "nos": "244",
            "ori": "245",
            "pec": "246",
            "rop": "247",
            "sta": "248",
            "uia": "249",
            "ene": "250",
            "iue": "251",
            "iui": "252",
            "siu": "253",
            "t t": "254",
            "t u": "255",
            "tib": "256",
            "tit": "257",
            " da": "258",
            " ne": "259",
            "a d": "260",
            "and": "261",
            "ege": "262",
            "equ": "263",
            "hom": "264",
            "imu": "265",
            "lor": "266",
            "m m": "267",
            "mni": "268",
            "ndo": "269",
            "ner": "270",
            "o e": "271",
            "r e": "272",
            "sit": "273",
            "tum": "274",
            "utu": "275",
            "a p": "276",
            "bis": "277",
            "bit": "278",
            "cer": "279",
            "cta": "280",
            "dom": "281",
            "fut": "282",
            "i s": "283",
            "ign": "284",
            "int": "285",
            "mod": "286",
            "ndu": "287",
            "nit": "288",
            "rib": "289",
            "rti": "290",
            "tas": "291",
            "und": "292",
            " ab": "293",
            "err": "294",
            "ers": "295",
            "ite": "296",
            "iti": "297",
            "m t": "298",
            "o p": "299"
        },
        "latvian": {
            "as ": "0",
            " la": "1",
            " pa": "2",
            " ne": "3",
            "es ": "4",
            " un": "5",
            "un ": "6",
            " ka": "7",
            " va": "8",
            "ar ": "9",
            "s p": "10",
            " ar": "11",
            " vi": "12",
            "is ": "13",
            "ai ": "14",
            " no": "15",
            "ja ": "16",
            "ija": "17",
            "iem": "18",
            "em ": "19",
            "tu ": "20",
            "tie": "21",
            "vie": "22",
            "lat": "23",
            "aks": "24",
            "ien": "25",
            "kst": "26",
            "ies": "27",
            "s a": "28",
            "rak": "29",
            "atv": "30",
            "tvi": "31",
            " ja": "32",
            " pi": "33",
            "ka ": "34",
            " ir": "35",
            "ir ": "36",
            "ta ": "37",
            " sa": "38",
            "ts ": "39",
            " k\u0101": "40",
            "\u0101s ": "41",
            " ti": "42",
            "ot ": "43",
            "s n": "44",
            " ie": "45",
            " ta": "46",
            "ar\u012b": "47",
            "par": "48",
            "pie": "49",
            " pr": "50",
            "k\u0101 ": "51",
            " at": "52",
            " ra": "53",
            "am ": "54",
            "in\u0101": "55",
            "t\u0101 ": "56",
            " iz": "57",
            "jas": "58",
            "lai": "59",
            " na": "60",
            "aut": "61",
            "ie\u0161": "62",
            "s s": "63",
            " ap": "64",
            " ko": "65",
            " st": "66",
            "iek": "67",
            "iet": "68",
            "jau": "69",
            "us ": "70",
            "r\u012b ": "71",
            "tik": "72",
            "\u012bba": "73",
            "na ": "74",
            " ga": "75",
            "cij": "76",
            "s i": "77",
            " uz": "78",
            "jum": "79",
            "s v": "80",
            "ms ": "81",
            "var": "82",
            " ku": "83",
            " ma": "84",
            "j\u0101 ": "85",
            "sta": "86",
            "s u": "87",
            " t\u0101": "88",
            "die": "89",
            "kai": "90",
            "kas": "91",
            "ska": "92",
            " ci": "93",
            " da": "94",
            "kur": "95",
            "lie": "96",
            "tas": "97",
            "a p": "98",
            "est": "99",
            "st\u0101": "100",
            "\u0161an": "101",
            "nes": "102",
            "nie": "103",
            "s d": "104",
            "s m": "105",
            "val": "106",
            " di": "107",
            " es": "108",
            " re": "109",
            "no ": "110",
            "to ": "111",
            "umu": "112",
            "vai": "113",
            "\u0161i ": "114",
            " v\u0113": "115",
            "kum": "116",
            "nu ": "117",
            "rie": "118",
            "s t": "119",
            "\u0101m ": "120",
            "ad ": "121",
            "et ": "122",
            "mu ": "123",
            "s l": "124",
            " be": "125",
            "aud": "126",
            "tur": "127",
            "vij": "128",
            "vi\u0146": "129",
            "\u0101ju": "130",
            "bas": "131",
            "gad": "132",
            "i n": "133",
            "ika": "134",
            "os ": "135",
            "a v": "136",
            "not": "137",
            "oti": "138",
            "sts": "139",
            "aik": "140",
            "u a": "141",
            "\u0101 a": "142",
            "\u0101k ": "143",
            " to": "144",
            "ied": "145",
            "stu": "146",
            "ti ": "147",
            "u p": "148",
            "v\u0113l": "149",
            "\u0101ci": "150",
            " \u0161o": "151",
            "gi ": "152",
            "ko ": "153",
            "pro": "154",
            "s r": "155",
            "t\u0101j": "156",
            "u s": "157",
            "u v": "158",
            "vis": "159",
            "aun": "160",
            "ks ": "161",
            "str": "162",
            "zin": "163",
            "a a": "164",
            "ad\u012b": "165",
            "da ": "166",
            "dar": "167",
            "ena": "168",
            "ici": "169",
            "kra": "170",
            "nas": "171",
            "st\u012b": "172",
            "\u0161u ": "173",
            " m\u0113": "174",
            "a n": "175",
            "eci": "176",
            "i s": "177",
            "ie ": "178",
            "i\u0146a": "179",
            "ju ": "180",
            "las": "181",
            "r t": "182",
            "ums": "183",
            "\u0161ie": "184",
            "bu ": "185",
            "cit": "186",
            "i a": "187",
            "ina": "188",
            "ma ": "189",
            "pus": "190",
            "ra ": "191",
            " au": "192",
            " se": "193",
            " sl": "194",
            "a s": "195",
            "ais": "196",
            "e\u0161i": "197",
            "iec": "198",
            "iku": "199",
            "p\u0101r": "200",
            "s b": "201",
            "s k": "202",
            "sot": "203",
            "\u0101d\u0101": "204",
            " in": "205",
            " li": "206",
            " tr": "207",
            "ana": "208",
            "eso": "209",
            "ikr": "210",
            "man": "211",
            "ne ": "212",
            "u k": "213",
            " tu": "214",
            "an ": "215",
            "av ": "216",
            "bet": "217",
            "b\u016bt": "218",
            "im ": "219",
            "isk": "220",
            "l\u012bd": "221",
            "nav": "222",
            "ras": "223",
            "ri ": "224",
            "s g": "225",
            "sti": "226",
            "\u012bdz": "227",
            " ai": "228",
            "arb": "229",
            "cin": "230",
            "das": "231",
            "ent": "232",
            "gal": "233",
            "i p": "234",
            "lik": "235",
            "m\u0101 ": "236",
            "nek": "237",
            "pat": "238",
            "r\u0113t": "239",
            "si ": "240",
            "tra": "241",
            "u\u0161i": "242",
            "vei": "243",
            " br": "244",
            " pu": "245",
            " sk": "246",
            "als": "247",
            "ama": "248",
            "edz": "249",
            "eka": "250",
            "e\u0161u": "251",
            "ieg": "252",
            "jis": "253",
            "kam": "254",
            "lst": "255",
            "n\u0101k": "256",
            "oli": "257",
            "pre": "258",
            "p\u0113c": "259",
            "rot": "260",
            "t\u0101s": "261",
            "usi": "262",
            "\u0113l ": "263",
            "\u0113s ": "264",
            " bi": "265",
            " de": "266",
            " me": "267",
            " p\u0101": "268",
            "a i": "269",
            "aid": "270",
            "aj\u0101": "271",
            "ikt": "272",
            "kat": "273",
            "lic": "274",
            "lod": "275",
            "mi ": "276",
            "ni ": "277",
            "pri": "278",
            "r\u0101d": "279",
            "r\u012bg": "280",
            "sim": "281",
            "tr\u0101": "282",
            "u l": "283",
            "uto": "284",
            "uz ": "285",
            "\u0113c ": "286",
            "\u012bt\u0101": "287",
            " ce": "288",
            " j\u0101": "289",
            " sv": "290",
            "a t": "291",
            "aga": "292",
            "aiz": "293",
            "atu": "294",
            "ba ": "295",
            "cie": "296",
            "du ": "297",
            "dzi": "298",
            "dz\u012b": "299"
        },
        "lithuanian": {
            "as ": "0",
            " pa": "1",
            " ka": "2",
            "ai ": "3",
            "us ": "4",
            "os ": "5",
            "is ": "6",
            " ne": "7",
            " ir": "8",
            "ir ": "9",
            "ti ": "10",
            " pr": "11",
            "aus": "12",
            "ini": "13",
            "s p": "14",
            "pas": "15",
            "i\u0173 ": "16",
            " ta": "17",
            " vi": "18",
            "iau": "19",
            " ko": "20",
            " su": "21",
            "kai": "22",
            "o p": "23",
            "usi": "24",
            " sa": "25",
            "vo ": "26",
            "tai": "27",
            "ali": "28",
            "t\u0173 ": "29",
            "io ": "30",
            "jo ": "31",
            "s k": "32",
            "sta": "33",
            "iai": "34",
            " bu": "35",
            " nu": "36",
            "ius": "37",
            "mo ": "38",
            " po": "39",
            "ien": "40",
            "s s": "41",
            "tas": "42",
            " me": "43",
            "uvo": "44",
            "kad": "45",
            " i\u0161": "46",
            " la": "47",
            "to ": "48",
            "ais": "49",
            "ie ": "50",
            "kur": "51",
            "uri": "52",
            " ku": "53",
            "ijo": "54",
            "\u010dia": "55",
            "au ": "56",
            "met": "57",
            "je ": "58",
            " va": "59",
            "ad ": "60",
            " ap": "61",
            "and": "62",
            " gr": "63",
            " ti": "64",
            "kal": "65",
            "asi": "66",
            "i p": "67",
            "i\u010di": "68",
            "s i": "69",
            "s v": "70",
            "ink": "71",
            "o n": "72",
            "\u0117s ": "73",
            "buv": "74",
            "s a": "75",
            " ga": "76",
            "aip": "77",
            "avi": "78",
            "mas": "79",
            "pri": "80",
            "tik": "81",
            " re": "82",
            "etu": "83",
            "jos": "84",
            " da": "85",
            "ent": "86",
            "oli": "87",
            "par": "88",
            "ant": "89",
            "ara": "90",
            "tar": "91",
            "ama": "92",
            "gal": "93",
            "imo": "94",
            "i\u0161k": "95",
            "o s": "96",
            " at": "97",
            " be": "98",
            " \u012f ": "99",
            "min": "100",
            "tin": "101",
            " tu": "102",
            "s n": "103",
            " jo": "104",
            "dar": "105",
            "ip ": "106",
            "rei": "107",
            " te": "108",
            "d\u017ei": "109",
            "kas": "110",
            "nin": "111",
            "tei": "112",
            "vie": "113",
            " li": "114",
            " se": "115",
            "cij": "116",
            "gar": "117",
            "lai": "118",
            "art": "119",
            "lau": "120",
            "ras": "121",
            "no ": "122",
            "o k": "123",
            "t\u0105 ": "124",
            " ar": "125",
            "\u0117jo": "126",
            "vi\u010d": "127",
            "iga": "128",
            "pra": "129",
            "vis": "130",
            " na": "131",
            "men": "132",
            "oki": "133",
            "ra\u0161": "134",
            "s t": "135",
            "iet": "136",
            "ika": "137",
            "int": "138",
            "kom": "139",
            "tam": "140",
            "aug": "141",
            "avo": "142",
            "rie": "143",
            "s b": "144",
            " st": "145",
            "eim": "146",
            "ko ": "147",
            "nus": "148",
            "pol": "149",
            "ria": "150",
            "sau": "151",
            "api": "152",
            "me ": "153",
            "ne ": "154",
            "sik": "155",
            " \u0161i": "156",
            "i n": "157",
            "ia ": "158",
            "ici": "159",
            "oja": "160",
            "sak": "161",
            "sti": "162",
            "ui ": "163",
            "ame": "164",
            "lie": "165",
            "o t": "166",
            "pie": "167",
            "\u010diu": "168",
            " di": "169",
            " pe": "170",
            "gri": "171",
            "ios": "172",
            "lia": "173",
            "lin": "174",
            "s d": "175",
            "s g": "176",
            "ta ": "177",
            "uot": "178",
            " ja": "179",
            " u\u017e": "180",
            "aut": "181",
            "i s": "182",
            "ino": "183",
            "m\u0105 ": "184",
            "oje": "185",
            "rav": "186",
            "d\u0117l": "187",
            "nti": "188",
            "o a": "189",
            "toj": "190",
            "\u0117l ": "191",
            " to": "192",
            " vy": "193",
            "ar ": "194",
            "ina": "195",
            "lic": "196",
            "o v": "197",
            "sei": "198",
            "su ": "199",
            " mi": "200",
            " pi": "201",
            "din": "202",
            "i\u0161 ": "203",
            "lan": "204",
            "si ": "205",
            "tus": "206",
            " ba": "207",
            "asa": "208",
            "ata": "209",
            "kla": "210",
            "omi": "211",
            "tat": "212",
            " an": "213",
            " ji": "214",
            "als": "215",
            "ena": "216",
            "j\u0173 ": "217",
            "nuo": "218",
            "per": "219",
            "rig": "220",
            "s m": "221",
            "val": "222",
            "yta": "223",
            "\u010dio": "224",
            " ra": "225",
            "i k": "226",
            "lik": "227",
            "net": "228",
            "n\u0117 ": "229",
            "tis": "230",
            "tuo": "231",
            "yti": "232",
            "\u0119s ": "233",
            "\u0173 s": "234",
            "ada": "235",
            "ari": "236",
            "do ": "237",
            "eik": "238",
            "eis": "239",
            "ist": "240",
            "lst": "241",
            "ma ": "242",
            "nes": "243",
            "sav": "244",
            "sio": "245",
            "tau": "246",
            " ki": "247",
            "aik": "248",
            "aud": "249",
            "ies": "250",
            "ori": "251",
            "s r": "252",
            "ska": "253",
            " ge": "254",
            "ast": "255",
            "eig": "256",
            "et ": "257",
            "iam": "258",
            "isa": "259",
            "mis": "260",
            "nam": "261",
            "ome": "262",
            "\u017eia": "263",
            "aba": "264",
            "aul": "265",
            "ikr": "266",
            "k\u0105 ": "267",
            "nta": "268",
            "ra ": "269",
            "tur": "270",
            " ma": "271",
            "die": "272",
            "ei ": "273",
            "i t": "274",
            "nas": "275",
            "rin": "276",
            "sto": "277",
            "tie": "278",
            "tuv": "279",
            "vos": "280",
            "\u0173 p": "281",
            " d\u0117": "282",
            "are": "283",
            "ats": "284",
            "en\u0117": "285",
            "ili": "286",
            "ima": "287",
            "kar": "288",
            "ms ": "289",
            "nia": "290",
            "r p": "291",
            "rod": "292",
            "s l": "293",
            " o ": "294",
            "e p": "295",
            "es ": "296",
            "ide": "297",
            "ik ": "298",
            "ja ": "299"
        },
        "macedonian": {
            "\u043d\u0430 ": "0",
            " \u043d\u0430": "1",
            "\u0442\u0430 ": "2",
            "\u0430\u0442\u0430": "3",
            "\u0438\u0458\u0430": "4",
            " \u043f\u0440": "5",
            "\u0442\u043e ": "6",
            "\u0458\u0430 ": "7",
            " \u0437\u0430": "8",
            "\u0430 \u043d": "9",
            " \u0438 ": "10",
            "\u0430 \u0441": "11",
            "\u0442\u0435 ": "12",
            "\u0438\u0442\u0435": "13",
            " \u043a\u043e": "14",
            "\u043e\u0442 ": "15",
            " \u0434\u0435": "16",
            " \u043f\u043e": "17",
            "\u0430 \u0434": "18",
            "\u0432\u043e ": "19",
            "\u0437\u0430 ": "20",
            " \u0432\u043e": "21",
            " \u043e\u0434": "22",
            " \u0441\u0435": "23",
            " \u043d\u0435": "24",
            "\u0441\u0435 ": "25",
            " \u0434\u043e": "26",
            "\u0430 \u0432": "27",
            "\u043a\u0430 ": "28",
            "\u0430\u045a\u0435": "29",
            "\u0430 \u043f": "30",
            "\u043e \u043f": "31",
            "\u0443\u0432\u0430": "32",
            "\u0446\u0438\u0458": "33",
            "\u0430 \u043e": "34",
            "\u0438\u0446\u0438": "35",
            "\u0435\u0442\u043e": "36",
            "\u043e \u043d": "37",
            "\u0430\u043d\u0438": "38",
            "\u043d\u0438 ": "39",
            " \u0432\u043b": "40",
            "\u0434\u0435\u043a": "41",
            "\u0435\u043a\u0430": "42",
            "\u045a\u0435\u0442": "43",
            "\u045c\u0435 ": "44",
            " \u0435 ": "45",
            "\u0430 \u0437": "46",
            "\u0430 \u0438": "47",
            "\u0430\u0442 ": "48",
            "\u0432\u043b\u0430": "49",
            "\u0433\u043e ": "50",
            "\u0435 \u043d": "51",
            "\u043e\u0434 ": "52",
            "\u043f\u0440\u0435": "53",
            " \u0433\u043e": "54",
            " \u0434\u0430": "55",
            " \u043c\u0430": "56",
            " \u0440\u0435": "57",
            " \u045c\u0435": "58",
            "\u0430\u043b\u0438": "59",
            "\u0438 \u0434": "60",
            "\u0438 \u043d": "61",
            "\u0438\u043e\u0442": "62",
            "\u043d\u0430\u0442": "63",
            "\u043e\u0432\u043e": "64",
            " \u043f\u0430": "65",
            " \u0440\u0430": "66",
            " \u0441\u043e": "67",
            "\u043e\u0432\u0435": "68",
            "\u043f\u0440\u0430": "69",
            "\u0448\u0442\u043e": "70",
            "\u045a\u0435 ": "71",
            "\u0430 \u0435": "72",
            "\u0434\u0430 ": "73",
            "\u0434\u0430\u0442": "74",
            "\u0434\u043e\u043d": "75",
            "\u0435 \u0432": "76",
            "\u0435 \u0434": "77",
            "\u0435 \u0437": "78",
            "\u0435 \u0441": "79",
            "\u043a\u043e\u043d": "80",
            "\u043d\u0438\u0442": "81",
            "\u043d\u043e ": "82",
            "\u043e\u043d\u0438": "83",
            "\u043e\u0442\u043e": "84",
            "\u043f\u0430\u0440": "85",
            "\u043f\u0440\u0438": "86",
            "\u0441\u0442\u0430": "87",
            "\u0442 \u043d": "88",
            " \u0448\u0442": "89",
            "\u0430 \u043a": "90",
            "\u0430\u0446\u0438": "91",
            "\u0432\u0430 ": "92",
            "\u0432\u0430\u045a": "93",
            "\u0435 \u043f": "94",
            "\u0435\u043d\u0438": "95",
            "\u043b\u0430 ": "96",
            "\u043b\u0430\u0434": "97",
            "\u043c\u0430\u043a": "98",
            "\u043d\u0435\u0441": "99",
            "\u043d\u043e\u0441": "100",
            "\u043f\u0440\u043e": "101",
            "\u0440\u0435\u043d": "102",
            "\u0458\u0430\u0442": "103",
            " \u0438\u043d": "104",
            " \u043c\u0435": "105",
            " \u0442\u043e": "106",
            "\u0430 \u0433": "107",
            "\u0430 \u043c": "108",
            "\u0430 \u0440": "109",
            "\u0430\u043a\u0435": "110",
            "\u0430\u043a\u043e": "111",
            "\u0432\u043e\u0440": "112",
            "\u0433\u043e\u0432": "113",
            "\u0435\u0434\u043e": "114",
            "\u0435\u043d\u0430": "115",
            "\u0438 \u0438": "116",
            "\u0438\u0440\u0430": "117",
            "\u043a\u0435\u0434": "118",
            "\u043d\u0435 ": "119",
            "\u043d\u0438\u0446": "120",
            "\u043d\u0438\u0458": "121",
            "\u043e\u0441\u0442": "122",
            "\u0440\u0430 ": "123",
            "\u0440\u0430\u0442": "124",
            "\u0440\u0435\u0434": "125",
            "\u0441\u043a\u0430": "126",
            "\u0442\u0435\u043d": "127",
            " \u043a\u0430": "128",
            " \u0441\u043f": "129",
            " \u0458\u0430": "130",
            "\u0430 \u0442": "131",
            "\u0430\u0434\u0435": "132",
            "\u0430\u0440\u0442": "133",
            "\u0435 \u0433": "134",
            "\u0435 \u0438": "135",
            "\u043a\u0430\u0442": "136",
            "\u043b\u0430\u0441": "137",
            "\u043d\u0438\u043e": "138",
            "\u043e \u0441": "139",
            "\u0440\u0438 ": "140",
            " \u0431\u0430": "141",
            " \u0431\u0438": "142",
            "\u0430\u0432\u0430": "143",
            "\u0430\u0442\u0435": "144",
            "\u0432\u043d\u0438": "145",
            "\u0434 \u043d": "146",
            "\u0434\u0435\u043d": "147",
            "\u0434\u043e\u0432": "148",
            "\u0434\u0440\u0436": "149",
            "\u0434\u0443\u0432": "150",
            "\u0435 \u043e": "151",
            "\u0435\u043d ": "152",
            "\u0435\u0440\u0435": "153",
            "\u0435\u0440\u0438": "154",
            "\u0438 \u043f": "155",
            "\u0438 \u0441": "156",
            "\u0438\u043d\u0430": "157",
            "\u043a\u043e\u0458": "158",
            "\u043d\u0446\u0438": "159",
            "\u043e \u043c": "160",
            "\u043e \u043e": "161",
            "\u043e\u0434\u043d": "162",
            "\u043f\u043e\u0440": "163",
            "\u0441\u043a\u0438": "164",
            "\u0441\u043f\u043e": "165",
            "\u0441\u0442\u0432": "166",
            "\u0441\u0442\u0438": "167",
            "\u0442\u0432\u043e": "168",
            "\u0442\u0438 ": "169",
            " \u043e\u0431": "170",
            " \u043e\u0432": "171",
            "\u0430 \u0431": "172",
            "\u0430\u043b\u043d": "173",
            "\u0430\u0440\u0430": "174",
            "\u0431\u0430\u0440": "175",
            "\u0435 \u043a": "176",
            "\u0435\u0434 ": "177",
            "\u0435\u043d\u0442": "178",
            "\u0435\u0453\u0443": "179",
            "\u0438 \u043e": "180",
            "\u0438\u0438 ": "181",
            "\u043c\u0435\u0453": "182",
            "\u043e \u0434": "183",
            "\u043e\u0458\u0430": "184",
            "\u043f\u043e\u0442": "185",
            "\u0440\u0430\u0437": "186",
            "\u0440\u0430\u0448": "187",
            "\u0441\u043f\u0440": "188",
            "\u0441\u0442\u043e": "189",
            "\u0442 \u0434": "190",
            "\u0446\u0438 ": "191",
            " \u0431\u0435": "192",
            " \u0433\u0440": "193",
            " \u0434\u0440": "194",
            " \u0438\u0437": "195",
            " \u0441\u0442": "196",
            "\u0430\u0430 ": "197",
            "\u0431\u0438\u0434": "198",
            "\u0432\u0435\u0434": "199",
            "\u0433\u043b\u0430": "200",
            "\u0435\u043a\u043e": "201",
            "\u0435\u043d\u0434": "202",
            "\u0435\u0441\u0435": "203",
            "\u0435\u0442\u0441": "204",
            "\u0437\u0430\u0446": "205",
            "\u0438 \u0442": "206",
            "\u0438\u0437\u0430": "207",
            "\u0438\u043d\u0441": "208",
            "\u0438\u0441\u0442": "209",
            "\u043a\u0438 ": "210",
            "\u043a\u043e\u0432": "211",
            "\u043a\u043e\u043b": "212",
            "\u043a\u0443 ": "213",
            "\u043b\u0438\u0446": "214",
            "\u043e \u0437": "215",
            "\u043e \u0438": "216",
            "\u043e\u0432\u0430": "217",
            "\u043e\u043b\u043a": "218",
            "\u043e\u0440\u0435": "219",
            "\u043e\u0440\u0438": "220",
            "\u043f\u043e\u0434": "221",
            "\u0440\u0430\u045a": "222",
            "\u0440\u0435\u0444": "223",
            "\u0440\u0436\u0430": "224",
            "\u0440\u043e\u0432": "225",
            "\u0440\u0442\u0438": "226",
            "\u0441\u043e ": "227",
            "\u0442\u043e\u0440": "228",
            "\u0444\u0435\u0440": "229",
            "\u0446\u0435\u043d": "230",
            "\u0446\u0438\u0442": "231",
            " \u0430 ": "232",
            " \u0432\u0440": "233",
            " \u0433\u043b": "234",
            " \u0434\u043f": "235",
            " \u043c\u043e": "236",
            " \u043d\u0438": "237",
            " \u043d\u043e": "238",
            " \u043e\u043f": "239",
            " \u043e\u0442": "240",
            "\u0430 \u045c": "241",
            "\u0430\u0431\u043e": "242",
            "\u0430\u0434\u0430": "243",
            "\u0430\u0441\u0430": "244",
            "\u0430\u0448\u0430": "245",
            "\u0431\u0430 ": "246",
            "\u0431\u043e\u0442": "247",
            "\u0432\u0430\u0430": "248",
            "\u0432\u0430\u0442": "249",
            "\u0432\u043e\u0442": "250",
            "\u0433\u0438 ": "251",
            "\u0433\u0440\u0430": "252",
            "\u0434\u0435 ": "253",
            "\u0434\u0438\u043d": "254",
            "\u0434\u0443\u043c": "255",
            "\u0435\u0432\u0440": "256",
            "\u0435\u0434\u0443": "257",
            "\u0435\u043d\u043e": "258",
            "\u0435\u0440\u0430": "259",
            "\u0435\u0441 ": "260",
            "\u0435\u045a\u0435": "261",
            "\u0436\u0435 ": "262",
            "\u0437\u0430\u043a": "263",
            "\u0438 \u0432": "264",
            "\u0438\u043b\u0430": "265",
            "\u0438\u0442\u0443": "266",
            "\u043a\u043e\u0430": "267",
            "\u043a\u043e\u0438": "268",
            "\u043b\u0430\u043d": "269",
            "\u043b\u043a\u0443": "270",
            "\u043b\u043e\u0436": "271",
            "\u043c\u043e\u0442": "272",
            "\u043d\u0434\u0443": "273",
            "\u043d\u0441\u0442": "274",
            "\u043e \u0432": "275",
            "\u043e\u0430 ": "276",
            "\u043e\u0430\u043b": "277",
            "\u043e\u0431\u0440": "278",
            "\u043e\u0432 ": "279",
            "\u043e\u0432\u0438": "280",
            "\u043e\u0432\u043d": "281",
            "\u043e\u0438 ": "282",
            "\u043e\u0440 ": "283",
            "\u043e\u0440\u043c": "284",
            "\u043e\u0458 ": "285",
            "\u0440\u0435\u0442": "286",
            "\u0441\u0435\u0434": "287",
            "\u0441\u0442 ": "288",
            "\u0442\u0435\u0440": "289",
            "\u0442\u0438\u0458": "290",
            "\u0442\u043e\u0430": "291",
            "\u0444\u043e\u0440": "292",
            "\u0446\u0438\u0438": "293",
            "\u0453\u0443 ": "294",
            " \u0430\u043b": "295",
            " \u0432\u0435": "296",
            " \u0432\u043c": "297",
            " \u0433\u0438": "298",
            " \u0434\u0443": "299"
        },
        "mongolian": {
            "\u044b\u043d ": "0",
            " \u0431\u0430": "1",
            "\u0439\u043d ": "2",
            "\u0431\u0430\u0439": "3",
            "\u0438\u0439\u043d": "4",
            "\u0443\u0443\u043b": "5",
            " \u0443\u043b": "6",
            "\u0443\u043b\u0441": "7",
            "\u0430\u043d ": "8",
            " \u0445\u0430": "9",
            "\u043d\u0438\u0439": "10",
            "\u043d \u0445": "11",
            "\u0433\u0430\u0430": "12",
            "\u0441\u044b\u043d": "13",
            "\u0438\u0439 ": "14",
            "\u043b\u0441\u044b": "15",
            " \u0431\u043e": "16",
            "\u0439 \u0431": "17",
            "\u044d\u043d ": "18",
            "\u0430\u0445 ": "19",
            "\u0431\u043e\u043b": "20",
            "\u043e\u043b ": "21",
            "\u043d \u0431": "22",
            "\u043e\u043b\u043e": "23",
            " \u0445\u044d": "24",
            "\u043e\u043d\u0433": "25",
            "\u0433\u043e\u043b": "26",
            "\u0433\u0443\u0443": "27",
            "\u043d\u0433\u043e": "28",
            "\u044b\u0433 ": "29",
            "\u0436\u0438\u043b": "30",
            " \u043c\u043e": "31",
            "\u043b\u0430\u0433": "32",
            "\u043b\u043b\u0430": "33",
            "\u043c\u043e\u043d": "34",
            " \u0442\u0454": "35",
            " \u0445\u0443": "36",
            "\u0430\u0439\u0434": "37",
            "\u043d\u044b ": "38",
            "\u043e\u043d ": "39",
            "\u0441\u0430\u043d": "40",
            "\u0445\u0438\u0439": "41",
            " \u0430\u0436": "42",
            " \u043e\u0440": "43",
            "\u043b \u0443": "44",
            "\u043d \u0442": "45",
            "\u0443\u043b\u0433": "46",
            "\u0430\u0439\u0433": "47",
            "\u0434\u043b\u044b": "48",
            "\u0439\u0433 ": "49",
            " \u0437\u0430": "50",
            "\u0434\u044d\u0441": "51",
            "\u043d \u0430": "52",
            "\u043d\u0434\u044d": "53",
            "\u0443\u043b\u0430": "54",
            "\u044d\u044d ": "55",
            "\u0430\u0433\u0430": "56",
            "\u0438\u0439\u0433": "57",
            "v\u0439 ": "58",
            "\u0430\u0430 ": "59",
            "\u0439 \u0430": "60",
            "\u043b\u044b\u043d": "61",
            "\u043d \u0437": "62",
            " \u0430\u044e": "63",
            " \u0437\u0454": "64",
            "\u0430\u0430\u0440": "65",
            "\u0430\u0434 ": "66",
            "\u0430\u0440 ": "67",
            "\u0433v\u0439": "68",
            "\u0437\u0454\u0432": "69",
            "\u0430\u0436\u0438": "70",
            "\u0430\u043b ": "71",
            "\u0430\u044e\u0443": "72",
            "\u0433 \u0445": "73",
            "\u043b\u0433v": "74",
            "\u043b\u0436 ": "75",
            "\u0441\u043d\u0438": "76",
            "\u044d\u0441\u043d": "77",
            "\u044e\u0443\u043b": "78",
            "\u0439\u0434\u043b": "79",
            "\u043b\u044b\u0433": "80",
            "\u043d\u0445\u0438": "81",
            "\u0443\u0443\u0434": "82",
            "\u0445\u0430\u043c": "83",
            " \u043d\u044d": "84",
            " \u0441\u0430": "85",
            "\u0433\u0438\u0439": "86",
            "\u043b\u0430\u0445": "87",
            "\u043b\u0454\u043b": "88",
            "\u0440\u0454\u043d": "89",
            "\u0454\u0433\u0447": "90",
            " \u0442\u0430": "91",
            "\u0438\u043b\u043b": "92",
            "\u043b\u0438\u0439": "93",
            "\u043b\u044d\u0445": "94",
            "\u0440\u0438\u0439": "95",
            "\u044d\u0445 ": "96",
            " \u0435\u0440": "97",
            " \u044d\u0440": "98",
            "\u0432\u043b\u0454": "99",
            "\u0435\u0440\u0454": "100",
            "\u0438\u0439\u043b": "101",
            "\u043b\u043e\u043d": "102",
            "\u043b\u0454\u0433": "103",
            "\u0454\u0432\u043b": "104",
            "\u0454\u043d\u0445": "105",
            " \u0445\u043e": "106",
            "\u0430\u0440\u0438": "107",
            "\u0438\u0445 ": "108",
            "\u0445\u0430\u043d": "109",
            "\u044d\u0440 ": "110",
            "\u0454\u043d ": "111",
            "vv\u043b": "112",
            "\u0436 \u0431": "113",
            "\u0442\u044d\u0439": "114",
            "\u0445 \u0445": "115",
            "\u044d\u0440\u0445": "116",
            " v\u043d": "117",
            " \u043d\u044c": "118",
            "v\u043d\u0434": "119",
            "\u0430\u043b\u0442": "120",
            "\u0439\u043b\u0454": "121",
            "\u043d\u044c ": "122",
            "\u0442\u0454\u0440": "123",
            " \u0433\u0430": "124",
            " \u0441\u0443": "125",
            "\u0430\u0430\u043d": "126",
            "\u0434\u0430\u0430": "127",
            "\u0438\u043b\u0446": "128",
            "\u0439\u0433\u0443": "129",
            "\u043b \u0430": "130",
            "\u043b\u0430\u0430": "131",
            "\u043d \u043d": "132",
            "\u0440\u0443\u0443": "133",
            "\u044d\u0439 ": "134",
            " \u0442\u043e": "135",
            "\u043d \u0441": "136",
            "\u0440\u0438\u043b": "137",
            "\u0454\u0440\u0438": "138",
            "\u0430\u0430\u0433": "139",
            "\u0433\u0447 ": "140",
            "\u043b\u044d\u044d": "141",
            "\u043d \u043e": "142",
            "\u0440\u044d\u0433": "143",
            "\u0441\u0443\u0443": "144",
            "\u044d\u0440\u044d": "145",
            "\u0457\u0457\u043b": "146",
            " y\u043d": "147",
            " \u0431\u0443": "148",
            " \u0434\u044d": "149",
            " \u043e\u043b": "150",
            " \u0442\u0443": "151",
            " \u0448\u0438": "152",
            "y\u043d\u0434": "153",
            "\u0430\u0448\u0438": "154",
            "\u0433 \u0442": "155",
            "\u0438\u0433 ": "156",
            "\u0439\u043b ": "157",
            "\u0445\u0430\u0440": "158",
            "\u0448\u0438\u043d": "159",
            "\u044d\u0433 ": "160",
            "\u0454\u0440 ": "161",
            " \u0438\u0445": "162",
            " \u0445\u0454": "163",
            " \u0445\u0457": "164",
            "\u0430\u043c ": "165",
            "\u0430\u043d\u0433": "166",
            "\u0438\u043d ": "167",
            "\u0439\u0433\u0430": "168",
            "\u043b\u0441\u0430": "169",
            "\u043d v": "170",
            "\u043d \u0435": "171",
            "\u043d\u0430\u043b": "172",
            "\u043d\u0434 ": "173",
            "\u0445\u0443\u0443": "174",
            "\u0446\u0430\u0430": "175",
            "\u044d\u0434 ": "176",
            "\u044d\u044d\u0440": "177",
            "\u0454\u043b ": "178",
            "v\u0439\u043b": "179",
            "\u0430\u0434\u0430": "180",
            "\u0430\u0439\u043d": "181",
            "\u0430\u043b\u0430": "182",
            "\u0430\u043c\u0442": "183",
            "\u0433\u0430\u0445": "184",
            "\u0434 \u0445": "185",
            "\u0434\u0430\u043b": "186",
            "\u0437\u0430\u0440": "187",
            "\u043b \u0431": "188",
            "\u043b\u0430\u043d": "189",
            "\u043d \u0434": "190",
            "\u0441\u044d\u043d": "191",
            "\u0443\u043b\u043b": "192",
            "\u0445 \u0431": "193",
            "\u0445\u044d\u0440": "194",
            " \u0431v": "195",
            " \u0434\u0430": "196",
            " \u0437\u043e": "197",
            "v\u0440\u044d": "198",
            "\u0430\u0430\u0434": "199",
            "\u0433\u044d\u044d": "200",
            "\u043b\u044d\u043d": "201",
            "\u043d \u0438": "202",
            "\u043d \u044d": "203",
            "\u043d\u0433\u0430": "204",
            "\u043d\u044d ": "205",
            "\u0442\u0430\u043b": "206",
            "\u0442\u044b\u043d": "207",
            "\u0445\u0443\u0440": "208",
            "\u044d\u043b ": "209",
            " \u043d\u0430": "210",
            " \u043d\u0438": "211",
            " \u043e\u043d": "212",
            "v\u043b\u044d": "213",
            "\u0430\u0433 ": "214",
            "\u0430\u0436 ": "215",
            "\u0430\u0439 ": "216",
            "\u0430\u0442\u0430": "217",
            "\u0431\u0430\u0440": "218",
            "\u0433 \u0431": "219",
            "\u0433\u0430\u0434": "220",
            "\u0433\u0457\u0439": "221",
            "\u0439 \u0445": "222",
            "\u043b\u0442 ": "223",
            "\u043d \u043c": "224",
            "\u043d\u0430 ": "225",
            "\u043e\u0440\u043e": "226",
            "\u0443\u043b\u044c": "227",
            "\u0447\u0438\u043d": "228",
            "\u044d\u0436 ": "229",
            "\u044d\u043d\u044d": "230",
            "\u044d\u044d\u0434": "231",
            "\u0457\u0439 ": "232",
            "\u0457\u043b\u044d": "233",
            " \u0431\u0438": "234",
            " \u0442\u044d": "235",
            " \u044d\u043d": "236",
            "\u0430\u043d\u044b": "237",
            "\u0434\u0438\u0439": "238",
            "\u0434\u044d\u044d": "239",
            "\u043b\u0430\u043b": "240",
            "\u043b\u0433\u0430": "241",
            "\u043b\u0434 ": "242",
            "\u043b\u043e\u0433": "243",
            "\u043b\u044c ": "244",
            "\u043d \u0443": "245",
            "\u043d \u0457": "246",
            "\u0440 \u0431": "247",
            "\u0440\u0430\u043b": "248",
            "\u0441\u043e\u043d": "249",
            "\u0442\u0430\u0439": "250",
            "\u0443\u0434\u043b": "251",
            "\u044d\u043b\u0442": "252",
            "\u044d\u0440\u0433": "253",
            "\u0454\u043b\u0454": "254",
            " v\u0439": "255",
            " \u0432 ": "256",
            " \u0433\u044d": "257",
            " \u0445v": "258",
            "\u0430\u0440\u0430": "259",
            "\u0431v\u0440": "260",
            "\u0434 \u043d": "261",
            "\u0434 \u043e": "262",
            "\u043b \u0445": "263",
            "\u043b\u0441 ": "264",
            "\u043b\u0442\u044b": "265",
            "\u043d \u0433": "266",
            "\u043d\u044d\u0433": "267",
            "\u043e\u0433\u0442": "268",
            "\u043e\u043b\u044b": "269",
            "\u043e\u0451\u0440": "270",
            "\u0440 \u0442": "271",
            "\u0440\u044d\u044d": "272",
            "\u0442\u0430\u0432": "273",
            "\u0442\u043e\u0433": "274",
            "\u0443\u0443\u0440": "275",
            "\u0445\u043e\u0451": "276",
            "\u0445\u044d\u043b": "277",
            "\u0445\u044d\u044d": "278",
            "\u044d\u043b\u044d": "279",
            "\u0451\u0440 ": "280",
            " \u0430\u0432": "281",
            " \u0430\u0441": "282",
            " \u0430\u0448": "283",
            " \u0434\u0443": "284",
            " \u0441\u043e": "285",
            " \u0447\u0438": "286",
            " \u044d\u0432": "287",
            " \u0454\u0440": "288",
            "\u0430\u0430\u043b": "289",
            "\u0430\u043b\u0434": "290",
            "\u0430\u043c\u0436": "291",
            "\u0430\u043d\u0434": "292",
            "\u0430\u0441\u0443": "293",
            "\u0432\u044d\u0440": "294",
            "\u0433 \u0443": "295",
            "\u0434\u0432\u044d": "296",
            "\u0436vv": "297",
            "\u043b\u0446\u0430": "298",
            "\u043b\u044d\u043b": "299"
        },
        "nepali": {
            "\u0915\u094b ": "0",
            "\u0915\u093e ": "1",
            "\u092e\u093e ": "2",
            "\u0939\u0930\u0941": "3",
            " \u0928\u0947": "4",
            "\u0928\u0947\u092a": "5",
            "\u092a\u093e\u0932": "6",
            "\u0947\u092a\u093e": "7",
            " \u0938\u092e": "8",
            "\u0932\u0947 ": "9",
            " \u092a\u094d": "10",
            "\u092a\u094d\u0930": "11",
            "\u0915\u093e\u0930": "12",
            "\u093e \u0938": "13",
            "\u090f\u0915\u094b": "14",
            " \u092d\u090f": "15",
            " \u091b ": "16",
            " \u092d\u093e": "17",
            "\u094d\u0930\u092e": "18",
            " \u0917\u0930": "19",
            "\u0930\u0941\u0915": "20",
            " \u0930 ": "21",
            "\u092d\u093e\u0930": "22",
            "\u093e\u0930\u0924": "23",
            " \u0915\u093e": "24",
            " \u0935\u093f": "25",
            "\u092d\u090f\u0915": "26",
            "\u093e\u0932\u0940": "27",
            "\u0932\u0940 ": "28",
            "\u093e \u092a": "29",
            "\u0940\u0939\u0930": "30",
            "\u093e\u0930\u094d": "31",
            "\u094b \u091b": "32",
            "\u0928\u093e ": "33",
            "\u0930\u0941 ": "34",
            "\u093e\u0932\u0915": "35",
            "\u094d\u092f\u093e": "36",
            " \u092c\u093e": "37",
            "\u090f\u0915\u093e": "38",
            "\u0928\u0947 ": "39",
            "\u0928\u094d\u0924": "40",
            "\u093e \u092c": "41",
            "\u093e\u0915\u094b": "42",
            "\u093e\u0930 ": "43",
            "\u093e \u092d": "44",
            "\u093e\u0939\u0930": "45",
            "\u094d\u0930\u094b": "46",
            "\u0915\u094d\u0937": "47",
            "\u0928\u094d ": "48",
            "\u093e\u0930\u0940": "49",
            " \u0928\u093f": "50",
            "\u093e \u0928": "51",
            "\u0940 \u0938": "52",
            " \u0921\u0941": "53",
            "\u0915\u094d\u0930": "54",
            "\u091c\u0928\u093e": "55",
            "\u092f\u094b ": "56",
            "\u093e \u091b": "57",
            "\u0947\u0935\u093e": "58",
            "\u094d\u0924\u093e": "59",
            " \u0930\u093e": "60",
            "\u0924\u094d\u092f": "61",
            "\u0928\u094d\u0926": "62",
            "\u0939\u0941\u0928": "63",
            "\u093e \u0915": "64",
            "\u093e\u092e\u093e": "65",
            "\u0940 \u0928": "66",
            "\u094d\u0926\u093e": "67",
            " \u0938\u0947": "68",
            "\u091b\u0928\u094d": "69",
            "\u092e\u094d\u092c": "70",
            "\u0930\u094b\u0924": "71",
            "\u0938\u0947\u0935": "72",
            "\u0938\u094d\u0924": "73",
            "\u0938\u094d\u0930": "74",
            "\u0947\u0915\u093e": "75",
            "\u094d\u0924 ": "76",
            " \u092c\u0940": "77",
            " \u0939\u0941": "78",
            "\u0915\u094d\u0924": "79",
            "\u0924\u094d\u0930": "80",
            "\u0930\u0924 ": "81",
            "\u0930\u094d\u0928": "82",
            "\u0930\u094d\u092f": "83",
            "\u093e \u0930": "84",
            "\u093e\u0915\u093e": "85",
            "\u0941\u0915\u094b": "86",
            " \u090f\u0915": "87",
            " \u0938\u0902": "88",
            " \u0938\u0941": "89",
            "\u092c\u0940\u092c": "90",
            "\u092c\u0940\u0938": "91",
            "\u0932\u0915\u094b": "92",
            "\u0938\u094d\u092f": "93",
            "\u0940\u092c\u0940": "94",
            "\u0940\u0938\u0940": "95",
            "\u0947\u0915\u094b": "96",
            "\u094b \u0938": "97",
            "\u094d\u092f\u0915": "98",
            " \u091b\u0928": "99",
            " \u091c\u0928": "100",
            " \u092c\u093f": "101",
            " \u092e\u0941": "102",
            " \u0938\u094d": "103",
            "\u0917\u0930\u094d": "104",
            "\u0924\u093e\u0939": "105",
            "\u0928\u094d\u0927": "106",
            "\u092c\u093e\u0930": "107",
            "\u092e\u0928\u094d": "108",
            "\u092e\u0938\u094d": "109",
            "\u0930\u0941\u0932": "110",
            "\u0932\u093e\u0908": "111",
            "\u093e \u0935": "112",
            "\u093e\u0908 ": "113",
            "\u093e\u0932 ": "114",
            "\u093f\u0915\u093e": "115",
            " \u0924\u094d": "116",
            " \u092e\u093e": "117",
            " \u092f\u0938": "118",
            " \u0930\u0941": "119",
            "\u0924\u093e\u0915": "120",
            "\u092c\u0928\u094d": "121",
            "\u0930 \u092c": "122",
            "\u0930\u0923 ": "123",
            "\u0930\u0941\u092a": "124",
            "\u0930\u0947\u0915": "125",
            "\u0937\u094d\u091f": "126",
            "\u0938\u092e\u094d": "127",
            "\u0938\u0940 ": "128",
            "\u093e\u090f\u0915": "129",
            "\u0941\u0915\u093e": "130",
            "\u0941\u0915\u094d": "131",
            " \u0905\u0927": "132",
            " \u0905\u0928": "133",
            " \u0924\u0925": "134",
            " \u0925\u093f": "135",
            " \u0926\u0947": "136",
            " \u092a\u0930": "137",
            " \u092c\u0948": "138",
            "\u0924\u0925\u093e": "139",
            "\u0924\u093e ": "140",
            "\u0926\u093e ": "141",
            "\u0926\u094d\u0926": "142",
            "\u0928\u0940 ": "143",
            "\u092c\u093e\u091f": "144",
            "\u092f\u0915\u094d": "145",
            "\u0930\u0940 ": "146",
            "\u0930\u0940\u0939": "147",
            "\u0930\u094d\u092e": "148",
            "\u0932\u0915\u093e": "149",
            "\u0938\u092e\u0938": "150",
            "\u093e \u0905": "151",
            "\u093e \u090f": "152",
            "\u093e\u091f ": "153",
            "\u093f\u092f ": "154",
            "\u094b \u092a": "155",
            "\u094b \u092e": "156",
            "\u094d\u0928 ": "157",
            "\u094d\u0928\u0947": "158",
            "\u094d\u0937\u093e": "159",
            " \u092a\u093e": "160",
            " \u092f\u094b": "161",
            " \u0939\u093e": "162",
            "\u0905\u0927\u093f": "163",
            "\u0921\u0941\u0935": "164",
            "\u0924 \u092d": "165",
            "\u0924 \u0938": "166",
            "\u0925\u093e ": "167",
            "\u0927\u093f\u0915": "168",
            "\u092a\u092e\u093e": "169",
            "\u092c\u0948\u0920": "170",
            "\u092e\u0941\u0926": "171",
            "\u092f\u093e ": "172",
            "\u092f\u0941\u0915": "173",
            "\u0930 \u0928": "174",
            "\u0930\u0924\u093f": "175",
            "\u0935\u093e\u0928": "176",
            "\u0938\u093e\u0930": "177",
            "\u093e \u0906": "178",
            "\u093e \u091c": "179",
            "\u093e \u0939": "180",
            "\u0941\u0926\u094d": "181",
            "\u0941\u092a\u092e": "182",
            "\u0941\u0932\u0947": "183",
            "\u0941\u0935\u093e": "184",
            "\u0948\u0920\u0915": "185",
            "\u094b \u092c": "186",
            "\u094d\u0924\u0930": "187",
            "\u094d\u092f ": "188",
            "\u094d\u092f\u0938": "189",
            " \u0915\u094d": "190",
            " \u092e\u0928": "191",
            " \u0930\u0939": "192",
            "\u091a\u093e\u0930": "193",
            "\u0924\u093f\u092f": "194",
            "\u0926\u0948 ": "195",
            "\u0928\u093f\u0930": "196",
            "\u0928\u0941 ": "197",
            "\u092a\u0930\u094d": "198",
            "\u0930\u0915\u094d": "199",
            "\u0930\u094d\u0926": "200",
            "\u0938\u092e\u093e": "201",
            "\u0938\u0941\u0930": "202",
            "\u093e\u0909\u0928": "203",
            "\u093e\u0928 ": "204",
            "\u093e\u0928\u092e": "205",
            "\u093e\u0930\u0923": "206",
            "\u093e\u0932\u0947": "207",
            "\u093f \u092c": "208",
            "\u093f\u092f\u094b": "209",
            "\u0941\u0928\u094d": "210",
            "\u0941\u0930\u0915": "211",
            "\u094d\u0924\u094d": "212",
            "\u094d\u092c\u0928": "213",
            "\u094d\u0930\u093e": "214",
            "\u094d\u0937 ": "215",
            " \u0906\u0930": "216",
            " \u091c\u0932": "217",
            " \u092c\u0947": "218",
            " \u092f\u093e": "219",
            " \u0938\u093e": "220",
            "\u0906\u090f\u0915": "221",
            "\u090f\u0915 ": "222",
            "\u0915\u0930\u094d": "223",
            "\u091c\u0932\u0938": "224",
            "\u0923\u0915\u093e": "225",
            "\u0924 \u0930": "226",
            "\u0926\u094d\u0930": "227",
            "\u0927\u093e\u0928": "228",
            "\u0927\u093f ": "229",
            "\u0928\u0915\u093e": "230",
            "\u0928\u092e\u093e": "231",
            "\u0928\u093f ": "232",
            "\u092e\u092e\u093e": "233",
            "\u0930\u092e ": "234",
            "\u0930\u0939\u0947": "235",
            "\u0930\u093e\u091c": "236",
            "\u0932\u0938\u094d": "237",
            "\u0932\u093e ": "238",
            "\u0935\u093e\u0930": "239",
            "\u0938\u0915\u093e": "240",
            "\u0939\u093f\u0932": "241",
            "\u0939\u0947\u0915": "242",
            "\u093e \u0924": "243",
            "\u093e\u0930\u0947": "244",
            "\u093f\u0928\u094d": "245",
            "\u093f\u0938\u094d": "246",
            "\u0947 \u0938": "247",
            "\u094b \u0928": "248",
            "\u094b \u0930": "249",
            "\u094b\u0924 ": "250",
            "\u094d\u0927\u093f": "251",
            "\u094d\u092e\u0940": "252",
            "\u094d\u0930\u0938": "253",
            " \u0926\u0941": "254",
            " \u092a\u0928": "255",
            " \u092c\u0924": "256",
            " \u092c\u0928": "257",
            " \u092d\u0928": "258",
            "\u0902\u092f\u0941": "259",
            "\u0906\u0930\u092e": "260",
            "\u0916\u093f ": "261",
            "\u0923\u094d\u0921": "262",
            "\u0924\u0915\u093e": "263",
            "\u0924\u093e\u0932": "264",
            "\u0926\u0940 ": "265",
            "\u0926\u0947\u0916": "266",
            "\u0928\u093f\u092f": "267",
            "\u092a\u0928\u093f": "268",
            "\u092a\u094d\u0924": "269",
            "\u092c\u0924\u093e": "270",
            "\u092e\u0940 ": "271",
            "\u092e\u094d\u092d": "272",
            "\u0930 \u0938": "273",
            "\u0930\u092e\u094d": "274",
            "\u0932\u092e\u093e": "275",
            "\u0935\u093f\u0936": "276",
            "\u0937\u093e\u0915": "277",
            "\u0938\u0902\u092f": "278",
            "\u093e \u0921": "279",
            "\u093e \u092e": "280",
            "\u093e\u0928\u0915": "281",
            "\u093e\u0932\u092e": "282",
            "\u093f \u092d": "283",
            "\u093f\u0924 ": "284",
            "\u0940 \u092a": "285",
            "\u0940 \u0930": "286",
            "\u0941 \u092d": "287",
            "\u0941\u0928\u0947": "288",
            "\u0947 \u0917": "289",
            "\u0947\u0916\u093f": "290",
            "\u0947\u0930 ": "291",
            "\u094b \u092d": "292",
            "\u094b \u0935": "293",
            "\u094b \u0939": "294",
            "\u094d\u092d ": "295",
            "\u094d\u0930 ": "296",
            " \u0924\u093e": "297",
            " \u0928\u092e": "298",
            " \u0928\u093e": "299"
        },
        "norwegian": {
            "er ": "0",
            "en ": "1",
            "et ": "2",
            " de": "3",
            "det": "4",
            " i ": "5",
            "for": "6",
            "il ": "7",
            " fo": "8",
            " me": "9",
            "ing": "10",
            "om ": "11",
            " ha": "12",
            " og": "13",
            "ter": "14",
            " er": "15",
            " ti": "16",
            " st": "17",
            "og ": "18",
            "til": "19",
            "ne ": "20",
            " vi": "21",
            "re ": "22",
            " en": "23",
            " se": "24",
            "te ": "25",
            "or ": "26",
            "de ": "27",
            "kke": "28",
            "ke ": "29",
            "ar ": "30",
            "ng ": "31",
            "r s": "32",
            "ene": "33",
            " so": "34",
            "e s": "35",
            "der": "36",
            "an ": "37",
            "som": "38",
            "ste": "39",
            "at ": "40",
            "ed ": "41",
            "r i": "42",
            " av": "43",
            " in": "44",
            "men": "45",
            " at": "46",
            " ko": "47",
            " p\u00e5": "48",
            "har": "49",
            " si": "50",
            "ere": "51",
            "p\u00e5 ": "52",
            "nde": "53",
            "and": "54",
            "els": "55",
            "ett": "56",
            "tte": "57",
            "lig": "58",
            "t s": "59",
            "den": "60",
            "t i": "61",
            "ikk": "62",
            "med": "63",
            "n s": "64",
            "rt ": "65",
            "ser": "66",
            "ska": "67",
            "t e": "68",
            "ker": "69",
            "sen": "70",
            "av ": "71",
            "ler": "72",
            "r a": "73",
            "ten": "74",
            "e f": "75",
            "r e": "76",
            "r t": "77",
            "ede": "78",
            "ig ": "79",
            " re": "80",
            "han": "81",
            "lle": "82",
            "ner": "83",
            " bl": "84",
            " fr": "85",
            "le ": "86",
            " ve": "87",
            "e t": "88",
            "lan": "89",
            "mme": "90",
            "nge": "91",
            " be": "92",
            " ik": "93",
            " om": "94",
            " \u00e5 ": "95",
            "ell": "96",
            "sel": "97",
            "sta": "98",
            "ver": "99",
            " et": "100",
            " sk": "101",
            "nte": "102",
            "one": "103",
            "ore": "104",
            "r d": "105",
            "ske": "106",
            " an": "107",
            " la": "108",
            "del": "109",
            "gen": "110",
            "nin": "111",
            "r f": "112",
            "r v": "113",
            "se ": "114",
            " po": "115",
            "ir ": "116",
            "jon": "117",
            "mer": "118",
            "nen": "119",
            "omm": "120",
            "sjo": "121",
            " fl": "122",
            " sa": "123",
            "ern": "124",
            "kom": "125",
            "r m": "126",
            "r o": "127",
            "ren": "128",
            "vil": "129",
            "ale": "130",
            "es ": "131",
            "n a": "132",
            "t f": "133",
            " le": "134",
            "bli": "135",
            "e e": "136",
            "e i": "137",
            "e v": "138",
            "het": "139",
            "ye ": "140",
            " ir": "141",
            "al ": "142",
            "e o": "143",
            "ide": "144",
            "iti": "145",
            "lit": "146",
            "nne": "147",
            "ran": "148",
            "t o": "149",
            "tal": "150",
            "tat": "151",
            "tt ": "152",
            " ka": "153",
            "ans": "154",
            "asj": "155",
            "ge ": "156",
            "inn": "157",
            "kon": "158",
            "lse": "159",
            "pet": "160",
            "t d": "161",
            "vi ": "162",
            " ut": "163",
            "ent": "164",
            "eri": "165",
            "oli": "166",
            "r p": "167",
            "ret": "168",
            "ris": "169",
            "sto": "170",
            "str": "171",
            "t a": "172",
            " ga": "173",
            "all": "174",
            "ape": "175",
            "g s": "176",
            "ill": "177",
            "ira": "178",
            "kap": "179",
            "nn ": "180",
            "opp": "181",
            "r h": "182",
            "rin": "183",
            " br": "184",
            " op": "185",
            "e m": "186",
            "ert": "187",
            "ger": "188",
            "ion": "189",
            "kal": "190",
            "lsk": "191",
            "nes": "192",
            " gj": "193",
            " mi": "194",
            " pr": "195",
            "ang": "196",
            "e h": "197",
            "e r": "198",
            "elt": "199",
            "enn": "200",
            "i s": "201",
            "ist": "202",
            "jen": "203",
            "kan": "204",
            "lt ": "205",
            "nal": "206",
            "res": "207",
            "tor": "208",
            "ass": "209",
            "dre": "210",
            "e b": "211",
            "e p": "212",
            "mel": "213",
            "n t": "214",
            "nse": "215",
            "ort": "216",
            "per": "217",
            "reg": "218",
            "sje": "219",
            "t p": "220",
            "t v": "221",
            " hv": "222",
            " n\u00e5": "223",
            " va": "224",
            "ann": "225",
            "ato": "226",
            "e a": "227",
            "est": "228",
            "ise": "229",
            "isk": "230",
            "oil": "231",
            "ord": "232",
            "pol": "233",
            "ra ": "234",
            "rak": "235",
            "sse": "236",
            "toi": "237",
            " gr": "238",
            "ak ": "239",
            "eg ": "240",
            "ele": "241",
            "g a": "242",
            "ige": "243",
            "igh": "244",
            "m e": "245",
            "n f": "246",
            "n v": "247",
            "ndr": "248",
            "nsk": "249",
            "rer": "250",
            "t m": "251",
            "und": "252",
            "var": "253",
            "\u00e5r ": "254",
            " he": "255",
            " no": "256",
            " ny": "257",
            "end": "258",
            "ete": "259",
            "fly": "260",
            "g i": "261",
            "ghe": "262",
            "ier": "263",
            "ind": "264",
            "int": "265",
            "lin": "266",
            "n d": "267",
            "n p": "268",
            "rne": "269",
            "sak": "270",
            "sie": "271",
            "t b": "272",
            "tid": "273",
            " al": "274",
            " pa": "275",
            " tr": "276",
            "ag ": "277",
            "dig": "278",
            "e d": "279",
            "e k": "280",
            "ess": "281",
            "hol": "282",
            "i d": "283",
            "lag": "284",
            "led": "285",
            "n e": "286",
            "n i": "287",
            "n o": "288",
            "pri": "289",
            "r b": "290",
            "st ": "291",
            " fe": "292",
            " li": "293",
            " ry": "294",
            "air": "295",
            "ake": "296",
            "d s": "297",
            "eas": "298",
            "egi": "299"
        },
        "pashto": {
            " \u062f ": "0",
            "\u0627\u0624 ": "1",
            " \u0627\u0624": "2",
            "\u0646\u0648 ": "3",
            "\u06d0 \u062f": "4",
            "\u0631\u0647 ": "5",
            " \u067e\u0647": "6",
            "\u0646\u0647 ": "7",
            "\u0686\u06d0 ": "8",
            " \u0686\u06d0": "9",
            "\u067e\u0647 ": "10",
            "\u0647 \u062f": "11",
            "\u062a\u0647 ": "12",
            "\u0648 \u0627": "13",
            "\u0648\u0646\u0648": "14",
            "\u0648 \u062f": "15",
            " \u0627\u0648": "16",
            "\u0627\u0646\u0648": "17",
            "\u0648\u0646\u0647": "18",
            "\u0647 \u06a9": "19",
            " \u062f\u0627": "20",
            "\u0647 \u0627": "21",
            "\u062f\u06d0 ": "22",
            "\u069a\u06d0 ": "23",
            " \u06a9\u06d0": "24",
            "\u0627\u0646 ": "25",
            "\u0644\u0648 ": "26",
            "\u0647\u0645 ": "27",
            "\u0648 \u0645": "28",
            "\u06a9\u069a\u06d0": "29",
            "\u0647 \u0645": "30",
            "\u0649 \u0627": "31",
            " \u0646\u0648": "32",
            " \u062a\u0647": "33",
            " \u06a9\u069a": "34",
            "\u0631\u0648\u0646": "35",
            "\u06a9\u06d0 ": "36",
            "\u062f\u0647 ": "37",
            "\u0644\u0647 ": "38",
            "\u0628\u0647 ": "39",
            "\u0631\u0648 ": "40",
            " \u0647\u0645": "41",
            "\u0647 \u0648": "42",
            "\u0648\u0649 ": "43",
            "\u0627\u0648 ": "44",
            "\u062a\u0648\u0646": "45",
            "\u062f\u0627 ": "46",
            " \u06a9\u0648": "47",
            " \u06a9\u0693": "48",
            "\u0642\u0627\u0645": "49",
            " \u062a\u0631": "50",
            "\u0631\u0627\u0646": "51",
            "\u0647 \u067e": "52",
            "\u06d0 \u0648": "53",
            "\u06d0 \u067e": "54",
            " \u0628\u0647": "55",
            " \u062e\u0648": "56",
            "\u062a\u0648 ": "57",
            "\u062f \u062f": "58",
            "\u062f \u0627": "59",
            "\u0647 \u062a": "60",
            "\u0648 \u067e": "61",
            "\u064a\u0627 ": "62",
            " \u062e\u067e": "63",
            " \u062f\u0648": "64",
            " \u0631\u0627": "65",
            " \u0645\u0634": "66",
            " \u067e\u0631": "67",
            "\u0627\u0631\u0648": "68",
            "\u0631\u06d0 ": "69",
            "\u0645 \u062f": "70",
            "\u0645\u0634\u0631": "71",
            " \u0634\u0648": "72",
            " \u0648\u0631": "73",
            "\u0627\u0631 ": "74",
            "\u062f\u0649 ": "75",
            " \u0627\u062f": "76",
            " \u062f\u0649": "77",
            " \u0645\u0648": "78",
            "\u062f \u067e": "79",
            "\u0644\u064a ": "80",
            "\u0648 \u06a9": "81",
            " \u0645\u0642": "82",
            " \u064a\u0648": "83",
            "\u0624 \u062f": "84",
            "\u062e\u067e\u0644": "85",
            "\u0633\u0631\u0647": "86",
            "\u0647 \u0686": "87",
            "\u0648\u0631 ": "88",
            " \u062a\u0627": "89",
            " \u062f\u06d0": "90",
            " \u0631\u0648": "91",
            " \u0633\u0631": "92",
            " \u0645\u0644": "93",
            " \u06a9\u0627": "94",
            "\u0624 \u0627": "95",
            "\u0627\u0631\u0647": "96",
            "\u0628\u0631\u0648": "97",
            "\u0645\u0647 ": "98",
            "\u0647 \u0628": "99",
            "\u0648 \u062a": "100",
            "\u067e\u069a\u062a": "101",
            " \u0628\u0627": "102",
            " \u062f\u063a": "103",
            " \u0642\u0628": "104",
            " \u0644\u0647": "105",
            " \u0648\u0627": "106",
            " \u067e\u0627": "107",
            " \u067e\u069a": "108",
            "\u062f \u0645": "109",
            "\u062f \u0647": "110",
            "\u0644\u06d0 ": "111",
            "\u0645\u0627\u062a": "112",
            "\u0645\u0648 ": "113",
            "\u0647 \u0647": "114",
            "\u0648\u064a ": "115",
            "\u06d0 \u0628": "116",
            "\u06d0 \u06a9": "117",
            " \u062f\u0647": "118",
            " \u0642\u0627": "119",
            "\u0627\u0644 ": "120",
            "\u0627\u0645\u0627": "121",
            "\u062f \u0646": "122",
            "\u0642\u0628\u0631": "123",
            "\u0647 \u0646": "124",
            "\u067e\u0627\u0631": "125",
            " \u0627\u062b": "126",
            " \u0628\u064a": "127",
            " \u0644\u0627": "128",
            " \u0644\u0631": "129",
            "\u0627\u062b\u0627": "130",
            "\u062f \u062e": "131",
            "\u062f\u0627\u0631": "132",
            "\u0631\u064a\u062e": "133",
            "\u0634\u0631\u0627": "134",
            "\u0645\u0642\u0627": "135",
            "\u0646\u06cd ": "136",
            "\u0647 \u0631": "137",
            "\u0647 \u0644": "138",
            "\u0648\u0644\u0648": "139",
            "\u064a\u0648 ": "140",
            "\u06a9\u0648\u0645": "141",
            " \u062f\u062f": "142",
            " \u0644\u0648": "143",
            " \u0645\u062d": "144",
            " \u0645\u0631": "145",
            " \u0648\u0648": "146",
            "\u0627\u062a\u0648": "147",
            "\u0627\u0631\u064a": "148",
            "\u0627\u0644\u0648": "149",
            "\u0627\u0646\u062f": "150",
            "\u062e\u0627\u0646": "151",
            "\u062f \u062a": "152",
            "\u0633\u06d0 ": "153",
            "\u0644\u0649 ": "154",
            "\u0646\u0648\u0631": "155",
            "\u0648 \u0644": "156",
            "\u064a \u0686": "157",
            "\u0693\u064a ": "158",
            "\u069a\u062a\u0648": "159",
            "\u06d0 \u0644": "160",
            " \u062c\u0648": "161",
            " \u0633\u064a": "162",
            "\u0627\u0645 ": "163",
            "\u0628\u0627\u0646": "164",
            "\u062a\u0627\u0631": "165",
            "\u062a\u0631 ": "166",
            "\u062b\u0627\u0631": "167",
            "\u062e\u0648 ": "168",
            "\u062f\u0648 ": "169",
            "\u0631 \u06a9": "170",
            "\u0644 \u062f": "171",
            "\u0645\u0648\u0646": "172",
            "\u0646\u062f\u06d0": "173",
            "\u0648 \u0646": "174",
            "\u0648\u0644 ": "175",
            "\u0648\u0647 ": "176",
            "\u0649 \u0648": "177",
            "\u064a \u062f": "178",
            "\u06d0 \u0627": "179",
            "\u06d0 \u062a": "180",
            "\u06d0 \u064a": "181",
            " \u062d\u06a9": "182",
            " \u062e\u0628": "183",
            " \u0646\u0647": "184",
            " \u067e\u0648": "185",
            "\u0627 \u062f": "186",
            "\u062a\u06d0 ": "187",
            "\u062c\u0648\u0693": "188",
            "\u062d\u06a9\u0645": "189",
            "\u062d\u06a9\u0648": "190",
            "\u062e\u0628\u0631": "191",
            "\u062f\u0627\u0646": "192",
            "\u0631 \u062f": "193",
            "\u063a\u0647 ": "194",
            "\u0642\u0627\u0641": "195",
            "\u0645\u062d\u06a9": "196",
            "\u0648\u0627\u0644": "197",
            "\u0648\u0645\u062a": "198",
            "\u0648\u064a\u0644": "199",
            "\u0649 \u062f": "200",
            "\u0649 \u0645": "201",
            "\u064a\u0631\u0647": "202",
            "\u067e\u0631 ": "203",
            "\u06a9\u0648\u0644": "204",
            "\u06d0 \u0647": "205",
            " \u062a\u064a": "206",
            " \u062e\u0627": "207",
            " \u0648\u06a9": "208",
            " \u064a\u0627": "209",
            " \u0681\u0627": "210",
            "\u0624 \u0642": "211",
            "\u0627\u0646\u06cd": "212",
            "\u0628\u0649 ": "213",
            "\u063a\u0648 ": "214",
            "\u0647 \u062e": "215",
            "\u0648 \u0628": "216",
            "\u0648\u062f\u0627": "217",
            "\u064a\u062f\u0648": "218",
            "\u0693\u06d0 ": "219",
            "\u06a9\u0627\u0644": "220",
            " \u0628\u0631": "221",
            " \u0642\u062f": "222",
            " \u0645\u064a": "223",
            " \u0648\u064a": "224",
            " \u06a9\u0631": "225",
            "\u0624 \u0645": "226",
            "\u0627\u062a ": "227",
            "\u0627\u064a\u064a": "228",
            "\u062a\u0649 ": "229",
            "\u062a\u064a\u0627": "230",
            "\u062a\u064a\u0631": "231",
            "\u062e\u0648\u0627": "232",
            "\u062f\u063a\u0648": "233",
            "\u062f\u0645 ": "234",
            "\u062f\u064a\u0645": "235",
            "\u0631 \u0648": "236",
            "\u0642\u062f\u064a": "237",
            "\u0645 \u062e": "238",
            "\u0645\u0627\u0646": "239",
            "\u0645\u06d0 ": "240",
            "\u0646\u064a\u0648": "241",
            "\u0646\u0696 ": "242",
            "\u0647 \u064a": "243",
            "\u0648 \u0633": "244",
            "\u0648 \u0686": "245",
            "\u0648\u0627\u0646": "246",
            "\u0648\u0631\u0648": "247",
            "\u0648\u0646\u0696": "248",
            "\u067e\u0648\u0631": "249",
            "\u0693\u0647 ": "250",
            "\u0693\u0648 ": "251",
            "\u06cd \u062f": "252",
            "\u06d0 \u0646": "253",
            " \u0627\u0647": "254",
            " \u0632\u064a": "255",
            " \u0633\u0648": "256",
            " \u0634\u064a": "257",
            " \u0647\u0631": "258",
            " \u0647\u063a": "259",
            " \u069a\u0627": "260",
            "\u0627\u062a\u0644": "261",
            "\u0627\u0642 ": "262",
            "\u0627\u0646\u064a": "263",
            "\u0628\u0631\u064a": "264",
            "\u0628\u06d0 ": "265",
            "\u062a \u0627": "266",
            "\u062f \u0628": "267",
            "\u062f \u0633": "268",
            "\u0631 \u0645": "269",
            "\u0631\u0649 ": "270",
            "\u0639\u0631\u0627": "271",
            "\u0644\u0627\u0646": "272",
            "\u0645\u0649 ": "273",
            "\u0646\u0649 ": "274",
            "\u0648 \u062e": "275",
            "\u0648\u0626 ": "276",
            "\u0648\u0631\u06a9": "277",
            "\u0648\u0631\u06d0": "278",
            "\u0648\u0646 ": "279",
            "\u0648\u06a9\u0693": "280",
            "\u0649 \u0686": "281",
            "\u064a\u0645\u0647": "282",
            "\u064a\u06d0 ": "283",
            "\u069a\u062a\u0646": "284",
            "\u06a9\u0647 ": "285",
            "\u06a9\u0693\u064a": "286",
            "\u06d0 \u062e": "287",
            "\u06d2 \u0634": "288",
            " \u062a\u062d": "289",
            " \u062a\u0648": "290",
            " \u062f\u0631": "291",
            " \u062f\u067e": "292",
            " \u0635\u0648": "293",
            " \u0639\u0631": "294",
            " \u0648\u0644": "295",
            " \u064a\u0624": "296",
            " \u067e\u06c0": "297",
            " \u0685\u0648": "298",
            "\u0627 \u0627": "299"
        },
        "pidgin": {
            " de": "0",
            " we": "1",
            " di": "2",
            "di ": "3",
            "dem": "4",
            "em ": "5",
            "ay ": "6",
            " sa": "7",
            "or ": "8",
            "say": "9",
            "ke ": "10",
            "ey ": "11",
            " an": "12",
            " go": "13",
            " e ": "14",
            " to": "15",
            " ma": "16",
            "e d": "17",
            "wey": "18",
            "for": "19",
            "nd ": "20",
            "to ": "21",
            " be": "22",
            " fo": "23",
            "ake": "24",
            "im ": "25",
            " pe": "26",
            "le ": "27",
            "go ": "28",
            "ll ": "29",
            "de ": "30",
            "e s": "31",
            "on ": "32",
            "get": "33",
            "ght": "34",
            "igh": "35",
            " ri": "36",
            "et ": "37",
            "rig": "38",
            " ge": "39",
            "y d": "40",
            " na": "41",
            "mak": "42",
            "t t": "43",
            " no": "44",
            "and": "45",
            "tin": "46",
            "ing": "47",
            "eve": "48",
            "ri ": "49",
            " im": "50",
            " am": "51",
            " or": "52",
            "am ": "53",
            "be ": "54",
            " ev": "55",
            " ta": "56",
            "ht ": "57",
            "e w": "58",
            " li": "59",
            "eri": "60",
            "ng ": "61",
            "ver": "62",
            "all": "63",
            "e f": "64",
            "ers": "65",
            "ntr": "66",
            "ont": "67",
            " do": "68",
            "r d": "69",
            " ko": "70",
            " ti": "71",
            "an ": "72",
            "kon": "73",
            "per": "74",
            "tri": "75",
            "y e": "76",
            "rso": "77",
            "son": "78",
            "no ": "79",
            "ome": "80",
            "is ": "81",
            "do ": "82",
            "ne ": "83",
            "one": "84",
            "ion": "85",
            "m g": "86",
            "i k": "87",
            " al": "88",
            "bod": "89",
            "i w": "90",
            "odi": "91",
            " so": "92",
            " wo": "93",
            "o d": "94",
            "st ": "95",
            "t r": "96",
            " of": "97",
            "aim": "98",
            "e g": "99",
            "nai": "100",
            " co": "101",
            "dis": "102",
            "me ": "103",
            "of ": "104",
            " wa": "105",
            "e t": "106",
            " ar": "107",
            "e l": "108",
            "ike": "109",
            "lik": "110",
            "t a": "111",
            "wor": "112",
            "alk": "113",
            "ell": "114",
            "eop": "115",
            "lk ": "116",
            "opl": "117",
            "peo": "118",
            "ple": "119",
            "re ": "120",
            "tal": "121",
            "any": "122",
            "e a": "123",
            "o g": "124",
            "art": "125",
            "cle": "126",
            "i p": "127",
            "icl": "128",
            "rti": "129",
            "the": "130",
            "tic": "131",
            "we ": "132",
            "f d": "133",
            "in ": "134",
            " mu": "135",
            "e n": "136",
            "e o": "137",
            "mus": "138",
            "n d": "139",
            "na ": "140",
            "o m": "141",
            "ust": "142",
            "wel": "143",
            "e e": "144",
            "her": "145",
            "m d": "146",
            "nt ": "147",
            " fi": "148",
            "at ": "149",
            "e b": "150",
            "it ": "151",
            "m w": "152",
            "o t": "153",
            "wan": "154",
            "com": "155",
            "da ": "156",
            "fit": "157",
            "m b": "158",
            "so ": "159",
            " fr": "160",
            "ce ": "161",
            "er ": "162",
            "o a": "163",
            " if": "164",
            " on": "165",
            "ent": "166",
            "if ": "167",
            "ind": "168",
            "kin": "169",
            "l d": "170",
            "man": "171",
            "o s": "172",
            " se": "173",
            "y a": "174",
            "y m": "175",
            " re": "176",
            "ee ": "177",
            "k a": "178",
            "t s": "179",
            "ve ": "180",
            "y w": "181",
            " ki": "182",
            "eti": "183",
            "men": "184",
            "ta ": "185",
            "y n": "186",
            "d t": "187",
            "dey": "188",
            "e c": "189",
            "i o": "190",
            "ibo": "191",
            "ld ": "192",
            "m t": "193",
            "n b": "194",
            "o b": "195",
            "ow ": "196",
            "ree": "197",
            "rio": "198",
            "t d": "199",
            " hu": "200",
            " su": "201",
            "en ": "202",
            "hts": "203",
            "ive": "204",
            "m n": "205",
            "n g": "206",
            "ny ": "207",
            "oth": "208",
            "ts ": "209",
            " as": "210",
            " wh": "211",
            "as ": "212",
            "gom": "213",
            "hum": "214",
            "k s": "215",
            "oda": "216",
            "ork": "217",
            "se ": "218",
            "uma": "219",
            "ut ": "220",
            " ba": "221",
            " ot": "222",
            "ano": "223",
            "m a": "224",
            "m s": "225",
            "nod": "226",
            "om ": "227",
            "r a": "228",
            "r i": "229",
            "rk ": "230",
            " fa": "231",
            " si": "232",
            " th": "233",
            "ad ": "234",
            "e m": "235",
            "eac": "236",
            "m m": "237",
            "n w": "238",
            "nob": "239",
            "orl": "240",
            "out": "241",
            "own": "242",
            "r s": "243",
            "r w": "244",
            "rib": "245",
            "rld": "246",
            "s w": "247",
            "ure": "248",
            "wn ": "249",
            " ow": "250",
            "a d": "251",
            "bad": "252",
            "ch ": "253",
            "fre": "254",
            "gs ": "255",
            "m k": "256",
            "nce": "257",
            "ngs": "258",
            "o f": "259",
            "obo": "260",
            "rea": "261",
            "sur": "262",
            "y o": "263",
            " ab": "264",
            " un": "265",
            "abo": "266",
            "ach": "267",
            "bou": "268",
            "d m": "269",
            "dat": "270",
            "e p": "271",
            "g w": "272",
            "hol": "273",
            "i m": "274",
            "i r": "275",
            "m f": "276",
            "m o": "277",
            "n o": "278",
            "now": "279",
            "ry ": "280",
            "s a": "281",
            "t o": "282",
            "tay": "283",
            "wet": "284",
            " ag": "285",
            " bo": "286",
            " da": "287",
            " pr": "288",
            "arr": "289",
            "ati": "290",
            "d d": "291",
            "d p": "292",
            "i g": "293",
            "i t": "294",
            "liv": "295",
            "ly ": "296",
            "n a": "297",
            "od ": "298",
            "ok ": "299"
        },
        "polish": {
            "ie ": "0",
            "nie": "1",
            "em ": "2",
            " ni": "3",
            " po": "4",
            " pr": "5",
            "dzi": "6",
            " na": "7",
            "\u017ce ": "8",
            "rze": "9",
            "na ": "10",
            "\u0142em": "11",
            "wie": "12",
            " w ": "13",
            " \u017ce": "14",
            "go ": "15",
            " by": "16",
            "prz": "17",
            "owa": "18",
            "i\u0119 ": "19",
            " do": "20",
            " si": "21",
            "owi": "22",
            " pa": "23",
            " za": "24",
            "ch ": "25",
            "ego": "26",
            "a\u0142 ": "27",
            "si\u0119": "28",
            "ej ": "29",
            "wa\u0142": "30",
            "ym ": "31",
            "ani": "32",
            "a\u0142e": "33",
            "to ": "34",
            " i ": "35",
            " to": "36",
            " te": "37",
            "e p": "38",
            " je": "39",
            " z ": "40",
            "czy": "41",
            "by\u0142": "42",
            "pan": "43",
            "sta": "44",
            "kie": "45",
            " ja": "46",
            "do ": "47",
            " ch": "48",
            " cz": "49",
            " wi": "50",
            "ia\u0142": "51",
            "a p": "52",
            "pow": "53",
            " mi": "54",
            "li ": "55",
            "eni": "56",
            "zie": "57",
            " ta": "58",
            " wa": "59",
            "\u0142o ": "60",
            "a\u0107 ": "61",
            "dy ": "62",
            "ak ": "63",
            "e w": "64",
            " a ": "65",
            " od": "66",
            " st": "67",
            "nia": "68",
            "rzy": "69",
            "ied": "70",
            " kt": "71",
            "odz": "72",
            "cie": "73",
            "cze": "74",
            "ia ": "75",
            "iel": "76",
            "kt\u00f3": "77",
            "o p": "78",
            "t\u00f3r": "79",
            "\u015bci": "80",
            " sp": "81",
            " wy": "82",
            "jak": "83",
            "tak": "84",
            "zy ": "85",
            " mo": "86",
            "a\u0142\u0119": "87",
            "pro": "88",
            "ski": "89",
            "tem": "90",
            "\u0142\u0119s": "91",
            " tr": "92",
            "e m": "93",
            "jes": "94",
            "my ": "95",
            " ro": "96",
            "edz": "97",
            "eli": "98",
            "iej": "99",
            " rz": "100",
            "a n": "101",
            "ale": "102",
            "an ": "103",
            "e s": "104",
            "est": "105",
            "le ": "106",
            "o s": "107",
            "i p": "108",
            "ki ": "109",
            " co": "110",
            "ada": "111",
            "czn": "112",
            "e t": "113",
            "e z": "114",
            "ent": "115",
            "ny ": "116",
            "pre": "117",
            "rz\u0105": "118",
            "y s": "119",
            " ko": "120",
            " o ": "121",
            "ach": "122",
            "am ": "123",
            "e n": "124",
            "o t": "125",
            "oli": "126",
            "pod": "127",
            "zia": "128",
            " go": "129",
            " ka": "130",
            "by ": "131",
            "ieg": "132",
            "ier": "133",
            "no\u015b": "134",
            "roz": "135",
            "spo": "136",
            "ych": "137",
            "z\u0105d": "138",
            " mn": "139",
            "acz": "140",
            "adz": "141",
            "bie": "142",
            "cho": "143",
            "mni": "144",
            "o n": "145",
            "ost": "146",
            "pra": "147",
            "ze ": "148",
            "\u0142a ": "149",
            " so": "150",
            "a m": "151",
            "cza": "152",
            "iem": "153",
            "i\u0107 ": "154",
            "obi": "155",
            "y\u0142 ": "156",
            "y\u0142o": "157",
            " mu": "158",
            " m\u00f3": "159",
            "a t": "160",
            "acj": "161",
            "ci ": "162",
            "e b": "163",
            "ich": "164",
            "kan": "165",
            "mi ": "166",
            "mie": "167",
            "o\u015bc": "168",
            "row": "169",
            "zen": "170",
            "zyd": "171",
            " al": "172",
            " re": "173",
            "a w": "174",
            "den": "175",
            "edy": "176",
            "i\u0142 ": "177",
            "ko ": "178",
            "o w": "179",
            "rac": "180",
            "\u015bmy": "181",
            " ma": "182",
            " ra": "183",
            " sz": "184",
            " ty": "185",
            "e j": "186",
            "isk": "187",
            "ji ": "188",
            "ka ": "189",
            "m s": "190",
            "no ": "191",
            "o z": "192",
            "rez": "193",
            "wa ": "194",
            "\u00f3w ": "195",
            "\u0142ow": "196",
            "\u015b\u0107 ": "197",
            " ob": "198",
            "ech": "199",
            "ecz": "200",
            "ezy": "201",
            "i w": "202",
            "ja ": "203",
            "kon": "204",
            "m\u00f3w": "205",
            "ne ": "206",
            "ni ": "207",
            "now": "208",
            "nym": "209",
            "pol": "210",
            "pot": "211",
            "yde": "212",
            " dl": "213",
            " sy": "214",
            "a s": "215",
            "aki": "216",
            "ali": "217",
            "dla": "218",
            "icz": "219",
            "ku ": "220",
            "ocz": "221",
            "st ": "222",
            "str": "223",
            "szy": "224",
            "trz": "225",
            "wia": "226",
            "y p": "227",
            "za ": "228",
            " wt": "229",
            "chc": "230",
            "esz": "231",
            "iec": "232",
            "im ": "233",
            "la ": "234",
            "o m": "235",
            "sa ": "236",
            "wa\u0107": "237",
            "y n": "238",
            "zac": "239",
            "zec": "240",
            " gd": "241",
            "a z": "242",
            "ard": "243",
            "co ": "244",
            "dar": "245",
            "e r": "246",
            "ien": "247",
            "m n": "248",
            "m w": "249",
            "mia": "250",
            "mo\u017c": "251",
            "raw": "252",
            "rdz": "253",
            "tan": "254",
            "ted": "255",
            "teg": "256",
            "wi\u0142": "257",
            "wte": "258",
            "y z": "259",
            "zna": "260",
            "z\u0142o": "261",
            "a r": "262",
            "awi": "263",
            "bar": "264",
            "cji": "265",
            "cz\u0105": "266",
            "dow": "267",
            "e\u017c ": "268",
            "gdy": "269",
            "iek": "270",
            "je ": "271",
            "o d": "272",
            "ta\u0142": "273",
            "wal": "274",
            "wsz": "275",
            "zed": "276",
            "\u00f3wi": "277",
            "\u0119sa": "278",
            " ba": "279",
            " lu": "280",
            " wo": "281",
            "aln": "282",
            "arn": "283",
            "ba ": "284",
            "dzo": "285",
            "e c": "286",
            "hod": "287",
            "igi": "288",
            "lig": "289",
            "m p": "290",
            "my\u015b": "291",
            "o c": "292",
            "oni": "293",
            "rel": "294",
            "sku": "295",
            "ste": "296",
            "y w": "297",
            "yst": "298",
            "z w": "299"
        },
        "portuguese": {
            "de ": "0",
            " de": "1",
            "os ": "2",
            "as ": "3",
            "que": "4",
            " co": "5",
            "\u00e3o ": "6",
            "o d": "7",
            " qu": "8",
            "ue ": "9",
            " a ": "10",
            "do ": "11",
            "ent": "12",
            " se": "13",
            "a d": "14",
            "s d": "15",
            "e a": "16",
            "es ": "17",
            " pr": "18",
            "ra ": "19",
            "da ": "20",
            " es": "21",
            " pa": "22",
            "to ": "23",
            " o ": "24",
            "em ": "25",
            "con": "26",
            "o p": "27",
            " do": "28",
            "est": "29",
            "nte": "30",
            "\u00e7\u00e3o": "31",
            " da": "32",
            " re": "33",
            "ma ": "34",
            "par": "35",
            " te": "36",
            "ara": "37",
            "ida": "38",
            " e ": "39",
            "ade": "40",
            "is ": "41",
            " um": "42",
            " po": "43",
            "a a": "44",
            "a p": "45",
            "dad": "46",
            "no ": "47",
            "te ": "48",
            " no": "49",
            "a\u00e7\u00e3": "50",
            "pro": "51",
            "al ": "52",
            "com": "53",
            "e d": "54",
            "s a": "55",
            " as": "56",
            "a c": "57",
            "er ": "58",
            "men": "59",
            "s e": "60",
            "ais": "61",
            "nto": "62",
            "res": "63",
            "a s": "64",
            "ado": "65",
            "ist": "66",
            "s p": "67",
            "tem": "68",
            "e c": "69",
            "e s": "70",
            "ia ": "71",
            "o s": "72",
            "o a": "73",
            "o c": "74",
            "e p": "75",
            "sta": "76",
            "ta ": "77",
            "tra": "78",
            "ura": "79",
            " di": "80",
            " pe": "81",
            "ar ": "82",
            "e e": "83",
            "ser": "84",
            "uma": "85",
            "mos": "86",
            "se ": "87",
            " ca": "88",
            "o e": "89",
            " na": "90",
            "a e": "91",
            "des": "92",
            "ont": "93",
            "por": "94",
            " in": "95",
            " ma": "96",
            "ect": "97",
            "o q": "98",
            "ria": "99",
            "s c": "100",
            "ste": "101",
            "ver": "102",
            "cia": "103",
            "dos": "104",
            "ica": "105",
            "str": "106",
            " ao": "107",
            " em": "108",
            "das": "109",
            "e t": "110",
            "ito": "111",
            "iza": "112",
            "pre": "113",
            "tos": "114",
            " n\u00e3": "115",
            "ada": "116",
            "n\u00e3o": "117",
            "ess": "118",
            "eve": "119",
            "or ": "120",
            "ran": "121",
            "s n": "122",
            "s t": "123",
            "tur": "124",
            " ac": "125",
            " fa": "126",
            "a r": "127",
            "ens": "128",
            "eri": "129",
            "na ": "130",
            "sso": "131",
            " si": "132",
            " \u00e9 ": "133",
            "bra": "134",
            "esp": "135",
            "mo ": "136",
            "nos": "137",
            "ro ": "138",
            "um ": "139",
            "a n": "140",
            "ao ": "141",
            "ico": "142",
            "liz": "143",
            "min": "144",
            "o n": "145",
            "ons": "146",
            "pri": "147",
            "ten": "148",
            "tic": "149",
            "\u00f5es": "150",
            " tr": "151",
            "a m": "152",
            "aga": "153",
            "e n": "154",
            "ili": "155",
            "ime": "156",
            "m a": "157",
            "nci": "158",
            "nha": "159",
            "nta": "160",
            "spe": "161",
            "tiv": "162",
            "am ": "163",
            "ano": "164",
            "arc": "165",
            "ass": "166",
            "cer": "167",
            "e o": "168",
            "ece": "169",
            "emo": "170",
            "ga ": "171",
            "o m": "172",
            "rag": "173",
            "so ": "174",
            "s\u00e3o": "175",
            " au": "176",
            " os": "177",
            " sa": "178",
            "ali": "179",
            "ca ": "180",
            "ema": "181",
            "emp": "182",
            "ici": "183",
            "ido": "184",
            "inh": "185",
            "iss": "186",
            "l d": "187",
            "la ": "188",
            "lic": "189",
            "m c": "190",
            "mai": "191",
            "onc": "192",
            "pec": "193",
            "ram": "194",
            "s q": "195",
            " ci": "196",
            " en": "197",
            " fo": "198",
            "a o": "199",
            "ame": "200",
            "car": "201",
            "co ": "202",
            "der": "203",
            "eir": "204",
            "ho ": "205",
            "io ": "206",
            "om ": "207",
            "ora": "208",
            "r a": "209",
            "sen": "210",
            "ter": "211",
            " br": "212",
            " ex": "213",
            "a u": "214",
            "cul": "215",
            "dev": "216",
            "e u": "217",
            "ha ": "218",
            "mpr": "219",
            "nce": "220",
            "oca": "221",
            "ove": "222",
            "rio": "223",
            "s o": "224",
            "sa ": "225",
            "sem": "226",
            "tes": "227",
            "uni": "228",
            "ven": "229",
            "za\u00e7": "230",
            "\u00e7\u00f5e": "231",
            " ad": "232",
            " al": "233",
            " an": "234",
            " mi": "235",
            " mo": "236",
            " ve": "237",
            " \u00e0 ": "238",
            "a i": "239",
            "a q": "240",
            "ala": "241",
            "amo": "242",
            "bli": "243",
            "cen": "244",
            "col": "245",
            "cos": "246",
            "cto": "247",
            "e m": "248",
            "e v": "249",
            "ede": "250",
            "g\u00e1s": "251",
            "ias": "252",
            "ita": "253",
            "iva": "254",
            "ndo": "255",
            "o t": "256",
            "ore": "257",
            "r d": "258",
            "ral": "259",
            "rea": "260",
            "s f": "261",
            "sid": "262",
            "tro": "263",
            "vel": "264",
            "vid": "265",
            "\u00e1s ": "266",
            " ap": "267",
            " ar": "268",
            " ce": "269",
            " ou": "270",
            " p\u00fa": "271",
            " so": "272",
            " vi": "273",
            "a f": "274",
            "act": "275",
            "arr": "276",
            "bil": "277",
            "cam": "278",
            "e f": "279",
            "e i": "280",
            "el ": "281",
            "for": "282",
            "lem": "283",
            "lid": "284",
            "lo ": "285",
            "m d": "286",
            "mar": "287",
            "nde": "288",
            "o o": "289",
            "omo": "290",
            "ort": "291",
            "per": "292",
            "p\u00fab": "293",
            "r u": "294",
            "rei": "295",
            "rem": "296",
            "ros": "297",
            "rre": "298",
            "ssi": "299"
        },
        "romanian": {
            " de": "0",
            " \u00een": "1",
            "de ": "2",
            " a ": "3",
            "ul ": "4",
            " co": "5",
            "\u00een ": "6",
            "re ": "7",
            "e d": "8",
            "ea ": "9",
            " di": "10",
            " pr": "11",
            "le ": "12",
            "\u015fi ": "13",
            "are": "14",
            "at ": "15",
            "con": "16",
            "ui ": "17",
            " \u015fi": "18",
            "i d": "19",
            "ii ": "20",
            " cu": "21",
            "e a": "22",
            "lui": "23",
            "ern": "24",
            "te ": "25",
            "cu ": "26",
            " la": "27",
            "a c": "28",
            "c\u0103 ": "29",
            "din": "30",
            "e c": "31",
            "or ": "32",
            "ulu": "33",
            "ne ": "34",
            "ter": "35",
            "la ": "36",
            "s\u0103 ": "37",
            "tat": "38",
            "tre": "39",
            " ac": "40",
            " s\u0103": "41",
            "est": "42",
            "st ": "43",
            "t\u0103 ": "44",
            " ca": "45",
            " ma": "46",
            " pe": "47",
            "cur": "48",
            "ist": "49",
            "m\u00e2n": "50",
            "a d": "51",
            "i c": "52",
            "nat": "53",
            " ce": "54",
            "i a": "55",
            "ia ": "56",
            "in ": "57",
            "scu": "58",
            " mi": "59",
            "ato": "60",
            "a\u0163i": "61",
            "ie ": "62",
            " re": "63",
            " se": "64",
            "a a": "65",
            "int": "66",
            "ntr": "67",
            "tru": "68",
            "uri": "69",
            "\u0103 a": "70",
            " fo": "71",
            " pa": "72",
            "ate": "73",
            "ini": "74",
            "tul": "75",
            "ent": "76",
            "min": "77",
            "pre": "78",
            "pro": "79",
            "a p": "80",
            "e p": "81",
            "e s": "82",
            "ei ": "83",
            "n\u0103 ": "84",
            "par": "85",
            "rna": "86",
            "rul": "87",
            "tor": "88",
            " in": "89",
            " ro": "90",
            " tr": "91",
            " un": "92",
            "al ": "93",
            "ale": "94",
            "art": "95",
            "ce ": "96",
            "e e": "97",
            "e \u00ee": "98",
            "fos": "99",
            "ita": "100",
            "nte": "101",
            "om\u00e2": "102",
            "ost": "103",
            "rom": "104",
            "ru ": "105",
            "str": "106",
            "ver": "107",
            " ex": "108",
            " na": "109",
            "a f": "110",
            "lor": "111",
            "nis": "112",
            "rea": "113",
            "rit": "114",
            " al": "115",
            " eu": "116",
            " no": "117",
            "ace": "118",
            "cer": "119",
            "ile": "120",
            "nal": "121",
            "pri": "122",
            "ri ": "123",
            "sta": "124",
            "ste": "125",
            "\u0163ie": "126",
            " au": "127",
            " da": "128",
            " ju": "129",
            " po": "130",
            "ar ": "131",
            "au ": "132",
            "ele": "133",
            "ere": "134",
            "eri": "135",
            "ina": "136",
            "n a": "137",
            "n c": "138",
            "res": "139",
            "se ": "140",
            "t a": "141",
            "tea": "142",
            " c\u0103": "143",
            " do": "144",
            " fi": "145",
            "a s": "146",
            "at\u0103": "147",
            "com": "148",
            "e \u015f": "149",
            "eur": "150",
            "guv": "151",
            "i s": "152",
            "ice": "153",
            "ili": "154",
            "na ": "155",
            "rec": "156",
            "rep": "157",
            "ril": "158",
            "rne": "159",
            "rti": "160",
            "uro": "161",
            "uve": "162",
            "\u0103 p": "163",
            " ar": "164",
            " o ": "165",
            " su": "166",
            " vi": "167",
            "dec": "168",
            "dre": "169",
            "oar": "170",
            "ons": "171",
            "pe ": "172",
            "rii": "173",
            " ad": "174",
            " ge": "175",
            "a m": "176",
            "a r": "177",
            "ain": "178",
            "ali": "179",
            "car": "180",
            "cat": "181",
            "ecu": "182",
            "ene": "183",
            "ept": "184",
            "ext": "185",
            "ilo": "186",
            "iu ": "187",
            "n p": "188",
            "ori": "189",
            "sec": "190",
            "u p": "191",
            "une": "192",
            "\u0103 c": "193",
            "\u015fti": "194",
            "\u0163ia": "195",
            " ch": "196",
            " gu": "197",
            "ai ": "198",
            "ani": "199",
            "cea": "200",
            "e f": "201",
            "isc": "202",
            "l a": "203",
            "lic": "204",
            "liu": "205",
            "mar": "206",
            "nic": "207",
            "nt ": "208",
            "nul": "209",
            "ris": "210",
            "t c": "211",
            "t p": "212",
            "tic": "213",
            "tid": "214",
            "u a": "215",
            "ucr": "216",
            " as": "217",
            " dr": "218",
            " fa": "219",
            " nu": "220",
            " pu": "221",
            " to": "222",
            "cra": "223",
            "dis": "224",
            "en\u0163": "225",
            "esc": "226",
            "gen": "227",
            "it ": "228",
            "ivi": "229",
            "l d": "230",
            "n d": "231",
            "nd ": "232",
            "nu ": "233",
            "ond": "234",
            "pen": "235",
            "ral": "236",
            "riv": "237",
            "rte": "238",
            "sti": "239",
            "t d": "240",
            "ta ": "241",
            "to ": "242",
            "uni": "243",
            "xte": "244",
            "\u00e2nd": "245",
            "\u00eens": "246",
            "\u0103 s": "247",
            " bl": "248",
            " st": "249",
            " uc": "250",
            "a b": "251",
            "a i": "252",
            "a l": "253",
            "air": "254",
            "ast": "255",
            "bla": "256",
            "bri": "257",
            "che": "258",
            "duc": "259",
            "dul": "260",
            "e m": "261",
            "eas": "262",
            "edi": "263",
            "esp": "264",
            "i l": "265",
            "i p": "266",
            "ica": "267",
            "ic\u0103": "268",
            "ir ": "269",
            "iun": "270",
            "jud": "271",
            "lai": "272",
            "lul": "273",
            "mai": "274",
            "men": "275",
            "ni ": "276",
            "pus": "277",
            "put": "278",
            "ra ": "279",
            "rai": "280",
            "rop": "281",
            "sil": "282",
            "ti ": "283",
            "tra": "284",
            "u s": "285",
            "ua ": "286",
            "ude": "287",
            "urs": "288",
            "\u00e2n ": "289",
            "\u00eent": "290",
            "\u0163\u0103 ": "291",
            " lu": "292",
            " mo": "293",
            " s ": "294",
            " sa": "295",
            " sc": "296",
            "a u": "297",
            "an ": "298",
            "atu": "299"
        },
        "russian": {
            " \u043d\u0430": "0",
            " \u043f\u0440": "1",
            "\u0442\u043e ": "2",
            " \u043d\u0435": "3",
            "\u043b\u0438 ": "4",
            " \u043f\u043e": "5",
            "\u043d\u043e ": "6",
            " \u0432 ": "7",
            "\u043d\u0430 ": "8",
            "\u0442\u044c ": "9",
            "\u043d\u0435 ": "10",
            " \u0438 ": "11",
            " \u043a\u043e": "12",
            "\u043e\u043c ": "13",
            "\u043f\u0440\u043e": "14",
            " \u0442\u043e": "15",
            "\u0438\u0445 ": "16",
            " \u043a\u0430": "17",
            "\u0430\u0442\u044c": "18",
            "\u043e\u0442\u043e": "19",
            " \u0437\u0430": "20",
            "\u0438\u0435 ": "21",
            "\u043e\u0432\u0430": "22",
            "\u0442\u0435\u043b": "23",
            "\u0442\u043e\u0440": "24",
            " \u0434\u0435": "25",
            "\u043e\u0439 ": "26",
            "\u0441\u0442\u0438": "27",
            " \u043e\u0442": "28",
            "\u0430\u0445 ": "29",
            "\u043c\u0438 ": "30",
            "\u0441\u0442\u0440": "31",
            " \u0431\u0435": "32",
            " \u0432\u043e": "33",
            " \u0440\u0430": "34",
            "\u0430\u044f ": "35",
            "\u0432\u0430\u0442": "36",
            "\u0435\u0439 ": "37",
            "\u0435\u0442 ": "38",
            "\u0436\u0435 ": "39",
            "\u0438\u0447\u0435": "40",
            "\u0438\u044f ": "41",
            "\u043e\u0432 ": "42",
            "\u0441\u0442\u043e": "43",
            " \u043e\u0431": "44",
            "\u0432\u0435\u0440": "45",
            "\u0433\u043e ": "46",
            "\u0438 \u0432": "47",
            "\u0438 \u043f": "48",
            "\u0438 \u0441": "49",
            "\u0438\u0438 ": "50",
            "\u0438\u0441\u0442": "51",
            "\u043e \u0432": "52",
            "\u043e\u0441\u0442": "53",
            "\u0442\u0440\u0430": "54",
            " \u0442\u0435": "55",
            "\u0435\u043b\u0438": "56",
            "\u0435\u0440\u0435": "57",
            "\u043a\u043e\u0442": "58",
            "\u043b\u044c\u043d": "59",
            "\u043d\u0438\u043a": "60",
            "\u043d\u0442\u0438": "61",
            "\u043e \u0441": "62",
            "\u0440\u043e\u0440": "63",
            "\u0441\u0442\u0432": "64",
            "\u0447\u0435\u0441": "65",
            " \u0431\u043e": "66",
            " \u0432\u0435": "67",
            " \u0434\u0430": "68",
            " \u0438\u043d": "69",
            " \u043d\u043e": "70",
            " \u0441 ": "71",
            " \u0441\u043e": "72",
            " \u0441\u043f": "73",
            " \u0441\u0442": "74",
            " \u0447\u0442": "75",
            "\u0430\u043b\u0438": "76",
            "\u0430\u043c\u0438": "77",
            "\u0432\u0438\u0434": "78",
            "\u0434\u0435\u0442": "79",
            "\u0435 \u043d": "80",
            "\u0435\u043b\u044c": "81",
            "\u0435\u0441\u043a": "82",
            "\u0435\u0441\u0442": "83",
            "\u0437\u0430\u043b": "84",
            "\u0438 \u043d": "85",
            "\u0438\u0432\u0430": "86",
            "\u043a\u043e\u043d": "87",
            "\u043e\u0433\u043e": "88",
            "\u043e\u0434\u043d": "89",
            "\u043e\u0436\u043d": "90",
            "\u043e\u043b\u044c": "91",
            "\u043e\u0440\u0438": "92",
            "\u0440\u043e\u0432": "93",
            "\u0441\u043a\u043e": "94",
            "\u0441\u044f ": "95",
            "\u0442\u0435\u0440": "96",
            "\u0447\u0442\u043e": "97",
            " \u043c\u043e": "98",
            " \u0441\u0430": "99",
            " \u044d\u0442": "100",
            "\u0430\u043d\u0442": "101",
            "\u0432\u0441\u0435": "102",
            "\u0435\u0440\u0440": "103",
            "\u0435\u0441\u043b": "104",
            "\u0438\u0434\u0435": "105",
            "\u0438\u043d\u0430": "106",
            "\u0438\u043d\u043e": "107",
            "\u0438\u0440\u043e": "108",
            "\u0438\u0442\u0435": "109",
            "\u043a\u0430 ": "110",
            "\u043a\u043e ": "111",
            "\u043a\u043e\u043b": "112",
            "\u043a\u043e\u043c": "113",
            "\u043b\u0430 ": "114",
            "\u043d\u0438\u044f": "115",
            "\u043e \u0442": "116",
            "\u043e\u043b\u043e": "117",
            "\u0440\u0430\u043d": "118",
            "\u0440\u0435\u0434": "119",
            "\u0441\u044c ": "120",
            "\u0442\u0438\u0432": "121",
            "\u0442\u0438\u0447": "122",
            "\u044b\u0445 ": "123",
            " \u0432\u0438": "124",
            " \u0432\u0441": "125",
            " \u0433\u043e": "126",
            " \u043c\u0430": "127",
            " \u0441\u043b": "128",
            "\u0430\u043a\u043e": "129",
            "\u0430\u043d\u0438": "130",
            "\u0430\u0441\u0442": "131",
            "\u0431\u0435\u0437": "132",
            "\u0434\u0435\u043b": "133",
            "\u0435 \u0434": "134",
            "\u0435 \u043f": "135",
            "\u0435\u043c ": "136",
            "\u0436\u043d\u043e": "137",
            "\u0438 \u0434": "138",
            "\u0438\u043a\u0430": "139",
            "\u043a\u0430\u0437": "140",
            "\u043a\u0430\u043a": "141",
            "\u043a\u0438 ": "142",
            "\u043d\u043e\u0441": "143",
            "\u043e \u043d": "144",
            "\u043e\u043f\u0430": "145",
            "\u043f\u0440\u0438": "146",
            "\u0440\u0440\u043e": "147",
            "\u0441\u043a\u0438": "148",
            "\u0442\u0438 ": "149",
            "\u0442\u043e\u0432": "150",
            "\u044b\u0435 ": "151",
            " \u0432\u044b": "152",
            " \u0434\u043e": "153",
            " \u043c\u0435": "154",
            " \u043d\u0438": "155",
            " \u043e\u0434": "156",
            " \u0440\u043e": "157",
            " \u0441\u0432": "158",
            " \u0447\u0438": "159",
            "\u0430 \u043d": "160",
            "\u0430\u0435\u0442": "161",
            "\u0430\u0437\u0430": "162",
            "\u0430\u0442\u0435": "163",
            "\u0431\u0435\u0441": "164",
            "\u0432 \u043f": "165",
            "\u0432\u0430 ": "166",
            "\u0435 \u0432": "167",
            "\u0435 \u043c": "168",
            "\u0435 \u0441": "169",
            "\u0435\u0437 ": "170",
            "\u0435\u043d\u0438": "171",
            "\u0437\u0430 ": "172",
            "\u0437\u043d\u0430": "173",
            "\u0438\u043d\u0438": "174",
            "\u043a\u0430\u043c": "175",
            "\u043a\u0430\u0445": "176",
            "\u043a\u0442\u043e": "177",
            "\u043b\u043e\u0432": "178",
            "\u043c\u0435\u0440": "179",
            "\u043c\u043e\u0436": "180",
            "\u043d\u0430\u043b": "181",
            "\u043d\u0438\u0446": "182",
            "\u043d\u044b ": "183",
            "\u043d\u044b\u043c": "184",
            "\u043e\u0440\u0430": "185",
            "\u043e\u0440\u043e": "186",
            "\u043e\u0442 ": "187",
            "\u043f\u043e\u0440": "188",
            "\u0440\u0430\u0432": "189",
            "\u0440\u0435\u0441": "190",
            "\u0440\u0438\u0441": "191",
            "\u0440\u043e\u0441": "192",
            "\u0441\u043a\u0430": "193",
            "\u0442 \u043d": "194",
            "\u0442\u043e\u043c": "195",
            "\u0447\u0438\u0442": "196",
            "\u0448\u043a\u043e": "197",
            " \u0431\u044b": "198",
            " \u043e ": "199",
            " \u0442\u0440": "200",
            " \u0443\u0436": "201",
            " \u0447\u0443": "202",
            " \u0448\u043a": "203",
            "\u0430 \u0431": "204",
            "\u0430 \u0432": "205",
            "\u0430 \u0440": "206",
            "\u0430\u0431\u0438": "207",
            "\u0430\u043b\u0430": "208",
            "\u0430\u043b\u043e": "209",
            "\u0430\u043b\u044c": "210",
            "\u0430\u043d\u043d": "211",
            "\u0430\u0442\u0438": "212",
            "\u0431\u0438\u043d": "213",
            "\u0432\u0435\u0441": "214",
            "\u0432\u043d\u043e": "215",
            "\u0432\u043e ": "216",
            "\u0432\u0448\u0438": "217",
            "\u0434\u0430\u043b": "218",
            "\u0434\u0430\u0442": "219",
            "\u0434\u043d\u043e": "220",
            "\u0435 \u0437": "221",
            "\u0435\u0433\u043e": "222",
            "\u0435\u043b\u0435": "223",
            "\u0435\u043d\u043d": "224",
            "\u0435\u043d\u0442": "225",
            "\u0435\u0442\u0435": "226",
            "\u0438 \u043e": "227",
            "\u0438\u043b\u0438": "228",
            "\u0438\u0441\u044c": "229",
            "\u0438\u0442 ": "230",
            "\u0438\u0446\u0438": "231",
            "\u043a\u043e\u0432": "232",
            "\u043b\u0435\u043d": "233",
            "\u043b\u044c\u043a": "234",
            "\u043c\u0435\u043d": "235",
            "\u043c\u044b ": "236",
            "\u043d\u0435\u0442": "237",
            "\u043d\u0438 ": "238",
            "\u043d\u043d\u044b": "239",
            "\u043d\u043e\u0433": "240",
            "\u043d\u043e\u0439": "241",
            "\u043d\u043e\u043c": "242",
            "\u043e \u043f": "243",
            "\u043e\u0431\u043d": "244",
            "\u043e\u0432\u0435": "245",
            "\u043e\u0432\u043d": "246",
            "\u043e\u0440\u044b": "247",
            "\u043f\u0435\u0440": "248",
            "\u043f\u043e ": "249",
            "\u043f\u0440\u0430": "250",
            "\u043f\u0440\u0435": "251",
            "\u0440\u0430\u0437": "252",
            "\u0440\u043e\u043f": "253",
            "\u0440\u044b ": "254",
            "\u0441\u0435 ": "255",
            "\u0441\u043b\u0438": "256",
            "\u0441\u043e\u0432": "257",
            "\u0442\u0440\u0435": "258",
            "\u0442\u0441\u044f": "259",
            "\u0443\u0440\u043e": "260",
            "\u0446\u0435\u043b": "261",
            "\u0447\u043d\u043e": "262",
            "\u044c \u0432": "263",
            "\u044c\u043a\u043e": "264",
            "\u044c\u043d\u043e": "265",
            "\u044d\u0442\u043e": "266",
            "\u044e\u0442 ": "267",
            "\u044f \u043d": "268",
            " \u0430\u043d": "269",
            " \u0435\u0441": "270",
            " \u0436\u0435": "271",
            " \u0438\u0437": "272",
            " \u043a\u0442": "273",
            " \u043c\u0438": "274",
            " \u043c\u044b": "275",
            " \u043f\u0435": "276",
            " \u0441\u0435": "277",
            " \u0446\u0435": "278",
            "\u0430 \u043c": "279",
            "\u0430 \u043f": "280",
            "\u0430 \u0442": "281",
            "\u0430\u0432\u0448": "282",
            "\u0430\u0436\u0435": "283",
            "\u0430\u043a ": "284",
            "\u0430\u043b ": "285",
            "\u0430\u043b\u0435": "286",
            "\u0430\u043d\u0435": "287",
            "\u0430\u0447\u0438": "288",
            "\u0430\u044e\u0442": "289",
            "\u0431\u043d\u0430": "290",
            "\u0431\u043e\u043b": "291",
            "\u0431\u044b ": "292",
            "\u0432 \u0438": "293",
            "\u0432 \u0441": "294",
            "\u0432\u0430\u043d": "295",
            "\u0433\u0440\u0430": "296",
            "\u0434\u0430\u0436": "297",
            "\u0434\u0435\u043d": "298",
            "\u0435 \u043a": "299"
        },
        "serbian": {
            " \u043d\u0430": "0",
            " \u0458\u0435": "1",
            " \u043f\u043e": "2",
            "\u0458\u0435 ": "3",
            " \u0438 ": "4",
            " \u043d\u0435": "5",
            " \u043f\u0440": "6",
            "\u0433\u0430 ": "7",
            " \u0441\u0432": "8",
            "\u043e\u0433 ": "9",
            "\u0430 \u0441": "10",
            "\u0438\u0445 ": "11",
            "\u043d\u0430 ": "12",
            "\u043a\u043e\u0458": "13",
            "\u043e\u0433\u0430": "14",
            " \u0443 ": "15",
            "\u0430 \u043f": "16",
            "\u043d\u0435 ": "17",
            "\u043d\u0438 ": "18",
            "\u0442\u0438 ": "19",
            " \u0434\u0430": "20",
            "\u043e\u043c ": "21",
            " \u0432\u0435": "22",
            " \u0441\u0440": "23",
            "\u0438 \u0441": "24",
            "\u0441\u043a\u043e": "25",
            " \u043e\u0431": "26",
            "\u0430 \u043d": "27",
            "\u0434\u0430 ": "28",
            "\u0435 \u043d": "29",
            "\u043d\u043e ": "30",
            "\u043d\u043e\u0433": "31",
            "\u043e \u0458": "32",
            "\u043e\u0458 ": "33",
            " \u0437\u0430": "34",
            "\u0432\u0430 ": "35",
            "\u0435 \u0441": "36",
            "\u0438 \u043f": "37",
            "\u043c\u0430 ": "38",
            "\u043d\u0438\u043a": "39",
            "\u043e\u0431\u0440": "40",
            "\u043e\u0432\u0430": "41",
            " \u043a\u043e": "42",
            "\u0430 \u0438": "43",
            "\u0434\u0438\u0458": "44",
            "\u0435 \u043f": "45",
            "\u043a\u0430 ": "46",
            "\u043a\u043e ": "47",
            "\u043a\u043e\u0433": "48",
            "\u043e\u0441\u0442": "49",
            "\u0441\u0432\u0435": "50",
            "\u0441\u0442\u0432": "51",
            "\u0441\u0442\u0438": "52",
            "\u0442\u0440\u0430": "53",
            "\u0435\u0434\u0438": "54",
            "\u0438\u043c\u0430": "55",
            "\u043f\u043e\u043a": "56",
            "\u043f\u0440\u0430": "57",
            "\u0440\u0430\u0437": "58",
            "\u0442\u0435 ": "59",
            " \u0431\u043e": "60",
            " \u0432\u0438": "61",
            " \u0441\u0430": "62",
            "\u0430\u0432\u043e": "63",
            "\u0431\u0440\u0430": "64",
            "\u0433\u043e\u0441": "65",
            "\u0435 \u0438": "66",
            "\u0435\u043b\u0438": "67",
            "\u0435\u043d\u0438": "68",
            "\u0437\u0430 ": "69",
            "\u0438\u043a\u0438": "70",
            "\u0438\u043e ": "71",
            "\u043f\u0440\u0435": "72",
            "\u0440\u0430\u0432": "73",
            "\u0440\u0430\u0434": "74",
            "\u0443 \u0441": "75",
            "\u0458\u0443 ": "76",
            "\u045a\u0430 ": "77",
            " \u0431\u0438": "78",
            " \u0434\u043e": "79",
            " \u0441\u0442": "80",
            "\u0430\u0441\u0442": "81",
            "\u0431\u043e\u0458": "82",
            "\u0435\u0431\u043e": "83",
            "\u0438 \u043d": "84",
            "\u0438\u043c ": "85",
            "\u043a\u0443 ": "86",
            "\u043b\u0430\u043d": "87",
            "\u043d\u0435\u0431": "88",
            "\u043e\u0432\u043e": "89",
            "\u043e\u0433\u043e": "90",
            "\u043e\u0441\u043b": "91",
            "\u043e\u0458\u0448": "92",
            "\u043f\u0435\u0434": "93",
            "\u0441\u0442\u0440": "94",
            "\u0447\u0430\u0441": "95",
            " \u0433\u043e": "96",
            " \u043a\u0440": "97",
            " \u043c\u043e": "98",
            " \u0447\u043b": "99",
            "\u0430 \u043c": "100",
            "\u0430 \u043e": "101",
            "\u0430\u043a\u043e": "102",
            "\u0430\u0447\u0430": "103",
            "\u0432\u0435\u043b": "104",
            "\u0432\u0435\u0442": "105",
            "\u0432\u043e\u0433": "106",
            "\u0435\u0434\u0430": "107",
            "\u0438\u0441\u0442": "108",
            "\u0438\u0442\u0438": "109",
            "\u0438\u0458\u0435": "110",
            "\u043e\u043a\u043e": "111",
            "\u0441\u043b\u043e": "112",
            "\u0441\u0440\u0431": "113",
            "\u0447\u043b\u0430": "114",
            " \u0431\u0435": "115",
            " \u043e\u0441": "116",
            " \u043e\u0442": "117",
            " \u0440\u0435": "118",
            " \u0441\u0435": "119",
            "\u0430 \u0432": "120",
            "\u0430\u043d ": "121",
            "\u0431\u043e\u0433": "122",
            "\u0431\u0440\u043e": "123",
            "\u0432\u0435\u043d": "124",
            "\u0433\u0440\u0430": "125",
            "\u0435 \u043e": "126",
            "\u0438\u043a\u0430": "127",
            "\u0438\u0458\u0430": "128",
            "\u043a\u0438\u0445": "129",
            "\u043a\u043e\u043c": "130",
            "\u043b\u0438 ": "131",
            "\u043d\u0443 ": "132",
            "\u043e\u0442\u0430": "133",
            "\u043e\u0458\u043d": "134",
            "\u043f\u043e\u0434": "135",
            "\u0440\u0431\u0441": "136",
            "\u0440\u0435\u0434": "137",
            "\u0440\u043e\u0458": "138",
            "\u0441\u0430 ": "139",
            "\u0441\u043d\u0438": "140",
            "\u0442\u0430\u0447": "141",
            "\u0442\u0432\u0430": "142",
            "\u0458\u0430 ": "143",
            "\u0458\u0438 ": "144",
            " \u043a\u0430": "145",
            " \u043e\u0432": "146",
            " \u0442\u0440": "147",
            "\u0430 \u0458": "148",
            "\u0430\u0432\u0438": "149",
            "\u0430\u0437 ": "150",
            "\u0430\u043d\u043e": "151",
            "\u0431\u0438\u043e": "152",
            "\u0432\u0438\u043a": "153",
            "\u0432\u043e ": "154",
            "\u0433\u043e\u0432": "155",
            "\u0434\u043d\u0438": "156",
            "\u0435 \u0447": "157",
            "\u0435\u0433\u043e": "158",
            "\u0438 \u043e": "159",
            "\u0438\u0432\u0430": "160",
            "\u0438\u0432\u043e": "161",
            "\u0438\u043a ": "162",
            "\u0438\u043d\u0435": "163",
            "\u0438\u043d\u0438": "164",
            "\u0438\u043f\u0435": "165",
            "\u043a\u0438\u043f": "166",
            "\u043b\u0438\u043a": "167",
            "\u043b\u043e ": "168",
            "\u043d\u0430\u0448": "169",
            "\u043d\u043e\u0441": "170",
            "\u043e \u0442": "171",
            "\u043e\u0434 ": "172",
            "\u043e\u0434\u0438": "173",
            "\u043e\u043d\u0430": "174",
            "\u043e\u0458\u0438": "175",
            "\u043f\u043e\u0447": "176",
            "\u043f\u0440\u043e": "177",
            "\u0440\u0430 ": "178",
            "\u0440\u0438\u0441": "179",
            "\u0440\u043e\u0434": "180",
            "\u0440\u0441\u0442": "181",
            "\u0441\u0435 ": "182",
            "\u0441\u043f\u043e": "183",
            "\u0441\u0442\u0430": "184",
            "\u0442\u0438\u045b": "185",
            "\u0443 \u0434": "186",
            "\u0443 \u043d": "187",
            "\u0443 \u043e": "188",
            "\u0447\u0438\u043d": "189",
            "\u0448\u0430 ": "190",
            "\u0458\u0435\u0434": "191",
            "\u0458\u043d\u0438": "192",
            "\u045b\u0435 ": "193",
            " \u043c ": "194",
            " \u043c\u0435": "195",
            " \u043d\u0438": "196",
            " \u043e\u043d": "197",
            " \u043f\u0430": "198",
            " \u0441\u043b": "199",
            " \u0442\u0435": "200",
            "\u0430 \u0443": "201",
            "\u0430\u0432\u0430": "202",
            "\u0430\u0432\u0435": "203",
            "\u0430\u0432\u043d": "204",
            "\u0430\u043d\u0430": "205",
            "\u0430\u043e ": "206",
            "\u0430\u0442\u0438": "207",
            "\u0430\u0446\u0438": "208",
            "\u0430\u0458\u0443": "209",
            "\u0430\u045a\u0430": "210",
            "\u0431\u0441\u043a": "211",
            "\u0432\u043e\u0440": "212",
            "\u0432\u043e\u0441": "213",
            "\u0432\u0441\u043a": "214",
            "\u0434\u0438\u043d": "215",
            "\u0435 \u0443": "216",
            "\u0435\u0434\u043d": "217",
            "\u0435\u0437\u0438": "218",
            "\u0435\u043a\u0430": "219",
            "\u0435\u043d\u043e": "220",
            "\u0435\u0442\u043e": "221",
            "\u0435\u045a\u0430": "222",
            "\u0436\u0438\u0432": "223",
            "\u0438 \u0433": "224",
            "\u0438 \u0438": "225",
            "\u0438 \u043a": "226",
            "\u0438 \u0442": "227",
            "\u0438\u043a\u0443": "228",
            "\u0438\u0447\u043a": "229",
            "\u043a\u0438 ": "230",
            "\u043a\u0440\u0441": "231",
            "\u043b\u0430 ": "232",
            "\u043b\u0430\u0432": "233",
            "\u043b\u0438\u0442": "234",
            "\u043c\u0435 ": "235",
            "\u043c\u0435\u043d": "236",
            "\u043d\u0430\u0446": "237",
            "\u043e \u043d": "238",
            "\u043e \u043f": "239",
            "\u043e \u0443": "240",
            "\u043e\u0434\u043d": "241",
            "\u043e\u043b\u0438": "242",
            "\u043e\u0440\u043d": "243",
            "\u043e\u0441\u043d": "244",
            "\u043e\u0441\u043f": "245",
            "\u043e\u0447\u0435": "246",
            "\u043f\u0441\u043a": "247",
            "\u0440\u0435\u0447": "248",
            "\u0440\u043f\u0441": "249",
            "\u0441\u0432\u043e": "250",
            "\u0441\u043a\u0438": "251",
            "\u0441\u043b\u0430": "252",
            "\u0441\u0440\u043f": "253",
            "\u0441\u0443 ": "254",
            "\u0442\u0430 ": "255",
            "\u0442\u0430\u0432": "256",
            "\u0442\u0432\u0435": "257",
            "\u0443 \u0431": "258",
            "\u0458\u0435\u0437": "259",
            "\u045b\u0438 ": "260",
            " \u0435\u043d": "261",
            " \u0436\u0438": "262",
            " \u0438\u043c": "263",
            " \u043c\u0443": "264",
            " \u043e\u0434": "265",
            " \u0441\u0443": "266",
            " \u0442\u0430": "267",
            " \u0445\u0440": "268",
            " \u0447\u0430": "269",
            " \u0448\u0442": "270",
            " \u045a\u0435": "271",
            "\u0430 \u0434": "272",
            "\u0430 \u0437": "273",
            "\u0430 \u043a": "274",
            "\u0430 \u0442": "275",
            "\u0430\u0434\u0443": "276",
            "\u0430\u043b\u043e": "277",
            "\u0430\u043d\u0438": "278",
            "\u0430\u0441\u043e": "279",
            "\u0432\u0430\u043d": "280",
            "\u0432\u0430\u0447": "281",
            "\u0432\u0430\u045a": "282",
            "\u0432\u0435\u0434": "283",
            "\u0432\u0438 ": "284",
            "\u0432\u043d\u043e": "285",
            "\u0432\u043e\u0442": "286",
            "\u0432\u043e\u0458": "287",
            "\u0432\u0443 ": "288",
            "\u0434\u043e\u0431": "289",
            "\u0434\u0440\u0443": "290",
            "\u0434\u0441\u0435": "291",
            "\u0434\u0443 ": "292",
            "\u0435 \u0431": "293",
            "\u0435 \u0434": "294",
            "\u0435 \u043c": "295",
            "\u0435\u043c ": "296",
            "\u0435\u043c\u0430": "297",
            "\u0435\u043d\u0442": "298",
            "\u0435\u043d\u0446": "299"
        },
        "slovak": {
            " pr": "0",
            " po": "1",
            " ne": "2",
            " a ": "3",
            "ch ": "4",
            " na": "5",
            " je": "6",
            "n\u00ed ": "7",
            "je ": "8",
            " do": "9",
            "na ": "10",
            "ova": "11",
            " v ": "12",
            "to ": "13",
            "ho ": "14",
            "ou ": "15",
            " to": "16",
            "ick": "17",
            "ter": "18",
            "\u017ee ": "19",
            " st": "20",
            " za": "21",
            "ost": "22",
            "\u00fdch": "23",
            " se": "24",
            "pro": "25",
            " te": "26",
            "e s": "27",
            " \u017ee": "28",
            "a p": "29",
            " kt": "30",
            "pre": "31",
            " by": "32",
            " o ": "33",
            "se ": "34",
            "kon": "35",
            " p\u0159": "36",
            "a s": "37",
            "n\u00e9 ": "38",
            "n\u011b ": "39",
            "sti": "40",
            "ako": "41",
            "ist": "42",
            "mu ": "43",
            "ame": "44",
            "ent": "45",
            "ky ": "46",
            "la ": "47",
            "pod": "48",
            " ve": "49",
            " ob": "50",
            "om ": "51",
            "vat": "52",
            " ko": "53",
            "sta": "54",
            "em ": "55",
            "le ": "56",
            "a v": "57",
            "by ": "58",
            "e p": "59",
            "ko ": "60",
            "eri": "61",
            "kte": "62",
            "sa ": "63",
            "\u00e9ho": "64",
            "e v": "65",
            "mer": "66",
            "tel": "67",
            " ak": "68",
            " sv": "69",
            " z\u00e1": "70",
            "hla": "71",
            "las": "72",
            "lo ": "73",
            " ta": "74",
            "a n": "75",
            "ej ": "76",
            "li ": "77",
            "ne ": "78",
            " sa": "79",
            "ak ": "80",
            "ani": "81",
            "ate": "82",
            "ia ": "83",
            "sou": "84",
            " so": "85",
            "en\u00ed": "86",
            "ie ": "87",
            " re": "88",
            "ce ": "89",
            "e n": "90",
            "ori": "91",
            "tic": "92",
            " vy": "93",
            "a t": "94",
            "k\u00e9 ": "95",
            "nos": "96",
            "o s": "97",
            "str": "98",
            "ti ": "99",
            "uje": "100",
            " sp": "101",
            "lov": "102",
            "o p": "103",
            "oli": "104",
            "ov\u00e1": "105",
            " n\u00e1": "106",
            "ale": "107",
            "den": "108",
            "e o": "109",
            "ku ": "110",
            "val": "111",
            " am": "112",
            " ro": "113",
            " si": "114",
            "nie": "115",
            "pol": "116",
            "tra": "117",
            " al": "118",
            "ali": "119",
            "o v": "120",
            "tor": "121",
            " mo": "122",
            " ni": "123",
            "ci ": "124",
            "o n": "125",
            "\u00edm ": "126",
            " le": "127",
            " pa": "128",
            " s ": "129",
            "al ": "130",
            "ati": "131",
            "ero": "132",
            "ove": "133",
            "rov": "134",
            "v\u00e1n": "135",
            "\u00edch": "136",
            " ja": "137",
            " z ": "138",
            "ck\u00e9": "139",
            "e z": "140",
            " od": "141",
            "byl": "142",
            "de ": "143",
            "dob": "144",
            "nep": "145",
            "pra": "146",
            "ric": "147",
            "spo": "148",
            "tak": "149",
            " v\u0161": "150",
            "a a": "151",
            "e t": "152",
            "lit": "153",
            "me ": "154",
            "nej": "155",
            "no ": "156",
            "n\u00fdc": "157",
            "o t": "158",
            "a j": "159",
            "e a": "160",
            "en ": "161",
            "est": "162",
            "j\u00ed ": "163",
            "mi ": "164",
            "slo": "165",
            "st\u00e1": "166",
            "u v": "167",
            "for": "168",
            "nou": "169",
            "pos": "170",
            "p\u0159e": "171",
            "si ": "172",
            "tom": "173",
            " vl": "174",
            "a z": "175",
            "ly ": "176",
            "orm": "177",
            "ris": "178",
            "za ": "179",
            "z\u00e1k": "180",
            " k ": "181",
            "at ": "182",
            "ck\u00fd": "183",
            "dno": "184",
            "dos": "185",
            "dy ": "186",
            "jak": "187",
            "kov": "188",
            "ny ": "189",
            "res": "190",
            "ror": "191",
            "sto": "192",
            "van": "193",
            " op": "194",
            "da ": "195",
            "do ": "196",
            "e j": "197",
            "hod": "198",
            "len": "199",
            "n\u00fd ": "200",
            "o z": "201",
            "poz": "202",
            "pri": "203",
            "ran": "204",
            "u s": "205",
            " ab": "206",
            "aj ": "207",
            "ast": "208",
            "it ": "209",
            "kto": "210",
            "o o": "211",
            "oby": "212",
            "odo": "213",
            "u p": "214",
            "va ": "215",
            "\u00e1n\u00ed": "216",
            "\u00ed p": "217",
            "\u00fdm ": "218",
            " in": "219",
            " mi": "220",
            "a\u0165 ": "221",
            "dov": "222",
            "ka ": "223",
            "nsk": "224",
            "\u00e1ln": "225",
            " an": "226",
            " bu": "227",
            " sl": "228",
            " tr": "229",
            "e m": "230",
            "ech": "231",
            "edn": "232",
            "i n": "233",
            "k\u00fdc": "234",
            "n\u00edc": "235",
            "ov ": "236",
            "p\u0159\u00ed": "237",
            "\u00ed a": "238",
            " aj": "239",
            " bo": "240",
            "a d": "241",
            "ide": "242",
            "o a": "243",
            "o d": "244",
            "och": "245",
            "pov": "246",
            "svo": "247",
            "\u00e9 s": "248",
            " kd": "249",
            " vo": "250",
            " v\u00fd": "251",
            "bud": "252",
            "ich": "253",
            "il ": "254",
            "ili": "255",
            "ni ": "256",
            "n\u00edm": "257",
            "od ": "258",
            "osl": "259",
            "ouh": "260",
            "rav": "261",
            "roz": "262",
            "st ": "263",
            "stv": "264",
            "tu ": "265",
            "u a": "266",
            "v\u00e1l": "267",
            "y s": "268",
            "\u00ed s": "269",
            "\u00ed v": "270",
            " hl": "271",
            " li": "272",
            " me": "273",
            "a m": "274",
            "e b": "275",
            "h s": "276",
            "i p": "277",
            "i s": "278",
            "iti": "279",
            "l\u00e1d": "280",
            "nem": "281",
            "nov": "282",
            "opo": "283",
            "uhl": "284",
            "eno": "285",
            "ens": "286",
            "men": "287",
            "nes": "288",
            "obo": "289",
            "te ": "290",
            "ved": "291",
            "vl\u00e1": "292",
            "y n": "293",
            " ma": "294",
            " mu": "295",
            " v\u00e1": "296",
            "bez": "297",
            "byv": "298",
            "cho": "299"
        },
        "slovene": {
            "je ": "0",
            " pr": "1",
            " po": "2",
            " je": "3",
            " v ": "4",
            " za": "5",
            " na": "6",
            "pre": "7",
            "da ": "8",
            " da": "9",
            "ki ": "10",
            "ti ": "11",
            "ja ": "12",
            "ne ": "13",
            " in": "14",
            "in ": "15",
            "li ": "16",
            "no ": "17",
            "na ": "18",
            "ni ": "19",
            " bi": "20",
            "jo ": "21",
            " ne": "22",
            "nje": "23",
            "e p": "24",
            "i p": "25",
            "pri": "26",
            "o p": "27",
            "red": "28",
            " do": "29",
            "anj": "30",
            "em ": "31",
            "ih ": "32",
            " bo": "33",
            " ki": "34",
            " iz": "35",
            " se": "36",
            " so": "37",
            "al ": "38",
            " de": "39",
            "e v": "40",
            "i s": "41",
            "ko ": "42",
            "bil": "43",
            "ira": "44",
            "ove": "45",
            " br": "46",
            " ob": "47",
            "e b": "48",
            "i n": "49",
            "ova": "50",
            "se ": "51",
            "za ": "52",
            "la ": "53",
            " ja": "54",
            "ati": "55",
            "so ": "56",
            "ter": "57",
            " ta": "58",
            "a s": "59",
            "del": "60",
            "e d": "61",
            " dr": "62",
            " od": "63",
            "a n": "64",
            "ar ": "65",
            "jal": "66",
            "ji ": "67",
            "rit": "68",
            " ka": "69",
            " ko": "70",
            " pa": "71",
            "a b": "72",
            "ani": "73",
            "e s": "74",
            "er ": "75",
            "ili": "76",
            "lov": "77",
            "o v": "78",
            "tov": "79",
            " ir": "80",
            " ni": "81",
            " vo": "82",
            "a j": "83",
            "bi ": "84",
            "bri": "85",
            "iti": "86",
            "let": "87",
            "o n": "88",
            "tan": "89",
            "\u0161e ": "90",
            " le": "91",
            " te": "92",
            "eni": "93",
            "eri": "94",
            "ita": "95",
            "kat": "96",
            "por": "97",
            "pro": "98",
            "ali": "99",
            "ke ": "100",
            "oli": "101",
            "ov ": "102",
            "pra": "103",
            "ri ": "104",
            "uar": "105",
            "ve ": "106",
            " to": "107",
            "a i": "108",
            "a v": "109",
            "ako": "110",
            "arj": "111",
            "ate": "112",
            "di ": "113",
            "do ": "114",
            "ga ": "115",
            "le ": "116",
            "lo ": "117",
            "mer": "118",
            "o s": "119",
            "oda": "120",
            "oro": "121",
            "pod": "122",
            " ma": "123",
            " mo": "124",
            " si": "125",
            "a p": "126",
            "bod": "127",
            "e n": "128",
            "ega": "129",
            "ju ": "130",
            "ka ": "131",
            "lje": "132",
            "rav": "133",
            "ta ": "134",
            "a o": "135",
            "e t": "136",
            "e z": "137",
            "i d": "138",
            "i v": "139",
            "ila": "140",
            "lit": "141",
            "nih": "142",
            "odo": "143",
            "sti": "144",
            "to ": "145",
            "var": "146",
            "ved": "147",
            "vol": "148",
            " la": "149",
            " no": "150",
            " vs": "151",
            "a d": "152",
            "agu": "153",
            "aja": "154",
            "dej": "155",
            "dnj": "156",
            "eda": "157",
            "gov": "158",
            "gua": "159",
            "jag": "160",
            "jem": "161",
            "kon": "162",
            "ku ": "163",
            "nij": "164",
            "omo": "165",
            "o\u010di": "166",
            "pov": "167",
            "rak": "168",
            "rja": "169",
            "sta": "170",
            "tev": "171",
            "a t": "172",
            "aj ": "173",
            "ed ": "174",
            "eja": "175",
            "ent": "176",
            "ev ": "177",
            "i i": "178",
            "i o": "179",
            "ijo": "180",
            "ist": "181",
            "ost": "182",
            "ske": "183",
            "str": "184",
            " ra": "185",
            " s ": "186",
            " tr": "187",
            " \u0161e": "188",
            "arn": "189",
            "bo ": "190",
            "dr\u017e": "191",
            "i j": "192",
            "ilo": "193",
            "izv": "194",
            "jen": "195",
            "lja": "196",
            "nsk": "197",
            "o d": "198",
            "o i": "199",
            "om ": "200",
            "ora": "201",
            "ovo": "202",
            "raz": "203",
            "r\u017ea": "204",
            "tak": "205",
            "va ": "206",
            "ven": "207",
            "\u017eav": "208",
            " me": "209",
            " \u010de": "210",
            "ame": "211",
            "avi": "212",
            "e i": "213",
            "e o": "214",
            "eka": "215",
            "gre": "216",
            "i t": "217",
            "ija": "218",
            "il ": "219",
            "ite": "220",
            "kra": "221",
            "lju": "222",
            "mor": "223",
            "nik": "224",
            "o t": "225",
            "obi": "226",
            "odn": "227",
            "ran": "228",
            "re ": "229",
            "sto": "230",
            "stv": "231",
            "udi": "232",
            "v i": "233",
            "van": "234",
            " am": "235",
            " sp": "236",
            " st": "237",
            " tu": "238",
            " ve": "239",
            " \u017ee": "240",
            "ajo": "241",
            "ale": "242",
            "apo": "243",
            "dal": "244",
            "dru": "245",
            "e j": "246",
            "edn": "247",
            "ejo": "248",
            "elo": "249",
            "est": "250",
            "etj": "251",
            "eva": "252",
            "iji": "253",
            "ik ": "254",
            "im ": "255",
            "itv": "256",
            "mob": "257",
            "nap": "258",
            "nek": "259",
            "pol": "260",
            "pos": "261",
            "rat": "262",
            "ski": "263",
            "ti\u010d": "264",
            "tom": "265",
            "ton": "266",
            "tra": "267",
            "tud": "268",
            "tve": "269",
            "v b": "270",
            "vil": "271",
            "vse": "272",
            "\u010dit": "273",
            " av": "274",
            " gr": "275",
            "a z": "276",
            "ans": "277",
            "ast": "278",
            "avt": "279",
            "dan": "280",
            "e m": "281",
            "eds": "282",
            "for": "283",
            "i z": "284",
            "kot": "285",
            "mi ": "286",
            "nim": "287",
            "o b": "288",
            "o o": "289",
            "od ": "290",
            "odl": "291",
            "oiz": "292",
            "ot ": "293",
            "par": "294",
            "pot": "295",
            "rje": "296",
            "roi": "297",
            "tem": "298",
            "val": "299"
        },
        "somali": {
            "ka ": "0",
            "ay ": "1",
            "da ": "2",
            " ay": "3",
            "aal": "4",
            "oo ": "5",
            "aan": "6",
            " ka": "7",
            "an ": "8",
            "in ": "9",
            " in": "10",
            "ada": "11",
            "maa": "12",
            "aba": "13",
            " so": "14",
            "ali": "15",
            "bad": "16",
            "add": "17",
            "soo": "18",
            " na": "19",
            "aha": "20",
            "ku ": "21",
            "ta ": "22",
            " wa": "23",
            "yo ": "24",
            "a s": "25",
            "oma": "26",
            "yaa": "27",
            " ba": "28",
            " ku": "29",
            " la": "30",
            " oo": "31",
            "iya": "32",
            "sha": "33",
            "a a": "34",
            "dda": "35",
            "nab": "36",
            "nta": "37",
            " da": "38",
            " ma": "39",
            "nka": "40",
            "uu ": "41",
            "y i": "42",
            "aya": "43",
            "ha ": "44",
            "raa": "45",
            " dh": "46",
            " qa": "47",
            "a k": "48",
            "ala": "49",
            "baa": "50",
            "doo": "51",
            "had": "52",
            "liy": "53",
            "oom": "54",
            " ha": "55",
            " sh": "56",
            "a d": "57",
            "a i": "58",
            "a n": "59",
            "aar": "60",
            "ee ": "61",
            "ey ": "62",
            "y k": "63",
            "ya ": "64",
            " ee": "65",
            " iy": "66",
            "aa ": "67",
            "aaq": "68",
            "gaa": "69",
            "lam": "70",
            " bu": "71",
            "a b": "72",
            "a m": "73",
            "ad ": "74",
            "aga": "75",
            "ama": "76",
            "iyo": "77",
            "la ": "78",
            "a c": "79",
            "a l": "80",
            "een": "81",
            "int": "82",
            "she": "83",
            "wax": "84",
            "yee": "85",
            " si": "86",
            " uu": "87",
            "a h": "88",
            "aas": "89",
            "alk": "90",
            "dha": "91",
            "gu ": "92",
            "hee": "93",
            "ii ": "94",
            "ira": "95",
            "mad": "96",
            "o a": "97",
            "o k": "98",
            "qay": "99",
            " ah": "100",
            " ca": "101",
            " wu": "102",
            "ank": "103",
            "ash": "104",
            "axa": "105",
            "eed": "106",
            "en ": "107",
            "ga ": "108",
            "haa": "109",
            "n a": "110",
            "n s": "111",
            "naa": "112",
            "nay": "113",
            "o d": "114",
            "taa": "115",
            "u b": "116",
            "uxu": "117",
            "wux": "118",
            "xuu": "119",
            " ci": "120",
            " do": "121",
            " ho": "122",
            " ta": "123",
            "a g": "124",
            "a u": "125",
            "ana": "126",
            "ayo": "127",
            "dhi": "128",
            "iin": "129",
            "lag": "130",
            "lin": "131",
            "lka": "132",
            "o i": "133",
            "san": "134",
            "u s": "135",
            "una": "136",
            "uun": "137",
            " ga": "138",
            " xa": "139",
            " xu": "140",
            "aab": "141",
            "abt": "142",
            "aq ": "143",
            "aqa": "144",
            "ara": "145",
            "arl": "146",
            "caa": "147",
            "cir": "148",
            "eeg": "149",
            "eel": "150",
            "isa": "151",
            "kal": "152",
            "lah": "153",
            "ney": "154",
            "qaa": "155",
            "rla": "156",
            "sad": "157",
            "sii": "158",
            "u d": "159",
            "wad": "160",
            " ad": "161",
            " ar": "162",
            " di": "163",
            " jo": "164",
            " ra": "165",
            " sa": "166",
            " u ": "167",
            " yi": "168",
            "a j": "169",
            "a q": "170",
            "aad": "171",
            "aat": "172",
            "aay": "173",
            "ah ": "174",
            "ale": "175",
            "amk": "176",
            "ari": "177",
            "as ": "178",
            "aye": "179",
            "bus": "180",
            "dal": "181",
            "ddu": "182",
            "dii": "183",
            "du ": "184",
            "duu": "185",
            "ed ": "186",
            "ege": "187",
            "gey": "188",
            "hay": "189",
            "hii": "190",
            "ida": "191",
            "ine": "192",
            "joo": "193",
            "laa": "194",
            "lay": "195",
            "mar": "196",
            "mee": "197",
            "n b": "198",
            "n d": "199",
            "n m": "200",
            "no ": "201",
            "o b": "202",
            "o l": "203",
            "oog": "204",
            "oon": "205",
            "rga": "206",
            "sh ": "207",
            "sid": "208",
            "u q": "209",
            "unk": "210",
            "ush": "211",
            "xa ": "212",
            "y d": "213",
            " bi": "214",
            " gu": "215",
            " is": "216",
            " ke": "217",
            " lo": "218",
            " me": "219",
            " mu": "220",
            " qo": "221",
            " ug": "222",
            "a e": "223",
            "a o": "224",
            "a w": "225",
            "adi": "226",
            "ado": "227",
            "agu": "228",
            "al ": "229",
            "ant": "230",
            "ark": "231",
            "asa": "232",
            "awi": "233",
            "bta": "234",
            "bul": "235",
            "d a": "236",
            "dag": "237",
            "dan": "238",
            "do ": "239",
            "e s": "240",
            "gal": "241",
            "gay": "242",
            "guu": "243",
            "h e": "244",
            "hal": "245",
            "iga": "246",
            "ihi": "247",
            "iri": "248",
            "iye": "249",
            "ken": "250",
            "lad": "251",
            "lid": "252",
            "lsh": "253",
            "mag": "254",
            "mun": "255",
            "n h": "256",
            "n i": "257",
            "na ": "258",
            "o n": "259",
            "o w": "260",
            "ood": "261",
            "oor": "262",
            "ora": "263",
            "qab": "264",
            "qor": "265",
            "rab": "266",
            "rit": "267",
            "rta": "268",
            "s o": "269",
            "sab": "270",
            "ska": "271",
            "to ": "272",
            "u a": "273",
            "u h": "274",
            "u u": "275",
            "ud ": "276",
            "ugu": "277",
            "uls": "278",
            "uud": "279",
            "waa": "280",
            "xus": "281",
            "y b": "282",
            "y q": "283",
            "y s": "284",
            "yad": "285",
            "yay": "286",
            "yih": "287",
            " aa": "288",
            " bo": "289",
            " br": "290",
            " go": "291",
            " ji": "292",
            " mi": "293",
            " of": "294",
            " ti": "295",
            " um": "296",
            " wi": "297",
            " xo": "298",
            "a x": "299"
        },
        "spanish": {
            " de": "0",
            "de ": "1",
            " la": "2",
            "os ": "3",
            "la ": "4",
            "el ": "5",
            "es ": "6",
            " qu": "7",
            " co": "8",
            "e l": "9",
            "as ": "10",
            "que": "11",
            " el": "12",
            "ue ": "13",
            "en ": "14",
            "ent": "15",
            " en": "16",
            " se": "17",
            "nte": "18",
            "res": "19",
            "con": "20",
            "est": "21",
            " es": "22",
            "s d": "23",
            " lo": "24",
            " pr": "25",
            "los": "26",
            " y ": "27",
            "do ": "28",
            "\u00f3n ": "29",
            "i\u00f3n": "30",
            " un": "31",
            "ci\u00f3": "32",
            "del": "33",
            "o d": "34",
            " po": "35",
            "a d": "36",
            "aci": "37",
            "sta": "38",
            "te ": "39",
            "ado": "40",
            "pre": "41",
            "to ": "42",
            "par": "43",
            "a e": "44",
            "a l": "45",
            "ra ": "46",
            "al ": "47",
            "e e": "48",
            "se ": "49",
            "pro": "50",
            "ar ": "51",
            "ia ": "52",
            "o e": "53",
            " re": "54",
            "ida": "55",
            "dad": "56",
            "tra": "57",
            "por": "58",
            "s p": "59",
            " a ": "60",
            "a p": "61",
            "ara": "62",
            "cia": "63",
            " pa": "64",
            "com": "65",
            "no ": "66",
            " di": "67",
            " in": "68",
            "ien": "69",
            "n l": "70",
            "ad ": "71",
            "ant": "72",
            "e s": "73",
            "men": "74",
            "a c": "75",
            "on ": "76",
            "un ": "77",
            "las": "78",
            "nci": "79",
            " tr": "80",
            "cio": "81",
            "ier": "82",
            "nto": "83",
            "tiv": "84",
            "n d": "85",
            "n e": "86",
            "or ": "87",
            "s c": "88",
            "enc": "89",
            "ern": "90",
            "io ": "91",
            "a s": "92",
            "ici": "93",
            "s e": "94",
            " ma": "95",
            "dos": "96",
            "e a": "97",
            "e c": "98",
            "emp": "99",
            "ica": "100",
            "ivo": "101",
            "l p": "102",
            "n c": "103",
            "r e": "104",
            "ta ": "105",
            "ter": "106",
            "e d": "107",
            "esa": "108",
            "ez ": "109",
            "mpr": "110",
            "o a": "111",
            "s a": "112",
            " ca": "113",
            " su": "114",
            "ion": "115",
            " cu": "116",
            " ju": "117",
            "an ": "118",
            "da ": "119",
            "ene": "120",
            "ero": "121",
            "na ": "122",
            "rec": "123",
            "ro ": "124",
            "tar": "125",
            " al": "126",
            " an": "127",
            "bie": "128",
            "e p": "129",
            "er ": "130",
            "l c": "131",
            "n p": "132",
            "omp": "133",
            "ten": "134",
            " em": "135",
            "ist": "136",
            "nes": "137",
            "nta": "138",
            "o c": "139",
            "so ": "140",
            "tes": "141",
            "era": "142",
            "l d": "143",
            "l m": "144",
            "les": "145",
            "ntr": "146",
            "o s": "147",
            "ore": "148",
            "r\u00e1 ": "149",
            "s q": "150",
            "s y": "151",
            "sto": "152",
            "a a": "153",
            "a r": "154",
            "ari": "155",
            "des": "156",
            "e q": "157",
            "ivi": "158",
            "lic": "159",
            "lo ": "160",
            "n a": "161",
            "one": "162",
            "ora": "163",
            "per": "164",
            "pue": "165",
            "r l": "166",
            "re ": "167",
            "ren": "168",
            "una": "169",
            "\u00eda ": "170",
            "ada": "171",
            "cas": "172",
            "ere": "173",
            "ide": "174",
            "min": "175",
            "n s": "176",
            "ndo": "177",
            "ran": "178",
            "rno": "179",
            " ac": "180",
            " ex": "181",
            " go": "182",
            " no": "183",
            "a t": "184",
            "aba": "185",
            "ble": "186",
            "ece": "187",
            "ect": "188",
            "l a": "189",
            "l g": "190",
            "lid": "191",
            "nsi": "192",
            "ons": "193",
            "rac": "194",
            "rio": "195",
            "str": "196",
            "uer": "197",
            "ust": "198",
            " ha": "199",
            " le": "200",
            " mi": "201",
            " mu": "202",
            " ob": "203",
            " pe": "204",
            " pu": "205",
            " so": "206",
            "a i": "207",
            "ale": "208",
            "ca ": "209",
            "cto": "210",
            "e i": "211",
            "e u": "212",
            "eso": "213",
            "fer": "214",
            "fic": "215",
            "gob": "216",
            "jo ": "217",
            "ma ": "218",
            "mpl": "219",
            "o p": "220",
            "obi": "221",
            "s m": "222",
            "sa ": "223",
            "sep": "224",
            "ste": "225",
            "sti": "226",
            "tad": "227",
            "tod": "228",
            "y s": "229",
            " ci": "230",
            "and": "231",
            "ces": "232",
            "c\u00f3 ": "233",
            "dor": "234",
            "e m": "235",
            "eci": "236",
            "eco": "237",
            "esi": "238",
            "int": "239",
            "iza": "240",
            "l e": "241",
            "lar": "242",
            "mie": "243",
            "ner": "244",
            "orc": "245",
            "rci": "246",
            "ria": "247",
            "tic": "248",
            "tor": "249",
            " as": "250",
            " si": "251",
            "ce ": "252",
            "den": "253",
            "e r": "254",
            "e t": "255",
            "end": "256",
            "eri": "257",
            "esp": "258",
            "ial": "259",
            "ido": "260",
            "ina": "261",
            "inc": "262",
            "mit": "263",
            "o l": "264",
            "ome": "265",
            "pli": "266",
            "ras": "267",
            "s t": "268",
            "sid": "269",
            "sup": "270",
            "tab": "271",
            "uen": "272",
            "ues": "273",
            "ura": "274",
            "vo ": "275",
            "vor": "276",
            " sa": "277",
            " ti": "278",
            "abl": "279",
            "ali": "280",
            "aso": "281",
            "ast": "282",
            "cor": "283",
            "cti": "284",
            "cue": "285",
            "div": "286",
            "duc": "287",
            "ens": "288",
            "eti": "289",
            "imi": "290",
            "ini": "291",
            "lec": "292",
            "o q": "293",
            "oce": "294",
            "ort": "295",
            "ral": "296",
            "rma": "297",
            "roc": "298",
            "rod": "299"
        },
        "swahili": {
            " wa": "0",
            "wa ": "1",
            "a k": "2",
            "a m": "3",
            " ku": "4",
            " ya": "5",
            "a w": "6",
            "ya ": "7",
            "ni ": "8",
            " ma": "9",
            "ka ": "10",
            "a u": "11",
            "na ": "12",
            "za ": "13",
            "ia ": "14",
            " na": "15",
            "ika": "16",
            "ma ": "17",
            "ali": "18",
            "a n": "19",
            " am": "20",
            "ili": "21",
            "kwa": "22",
            " kw": "23",
            "ini": "24",
            " ha": "25",
            "ame": "26",
            "ana": "27",
            "i n": "28",
            " za": "29",
            "a h": "30",
            "ema": "31",
            "i m": "32",
            "i y": "33",
            "kuw": "34",
            "la ": "35",
            "o w": "36",
            "a y": "37",
            "ata": "38",
            "sem": "39",
            " la": "40",
            "ati": "41",
            "chi": "42",
            "i w": "43",
            "uwa": "44",
            "aki": "45",
            "li ": "46",
            "eka": "47",
            "ira": "48",
            " nc": "49",
            "a s": "50",
            "iki": "51",
            "kat": "52",
            "nch": "53",
            " ka": "54",
            " ki": "55",
            "a b": "56",
            "aji": "57",
            "amb": "58",
            "ra ": "59",
            "ri ": "60",
            "rik": "61",
            "ada": "62",
            "mat": "63",
            "mba": "64",
            "mes": "65",
            "yo ": "66",
            "zi ": "67",
            "da ": "68",
            "hi ": "69",
            "i k": "70",
            "ja ": "71",
            "kut": "72",
            "tek": "73",
            "wan": "74",
            " bi": "75",
            "a a": "76",
            "aka": "77",
            "ao ": "78",
            "asi": "79",
            "cha": "80",
            "ese": "81",
            "eza": "82",
            "ke ": "83",
            "moj": "84",
            "oja": "85",
            " hi": "86",
            "a z": "87",
            "end": "88",
            "ha ": "89",
            "ji ": "90",
            "mu ": "91",
            "shi": "92",
            "wat": "93",
            " bw": "94",
            "ake": "95",
            "ara": "96",
            "bw ": "97",
            "i h": "98",
            "imb": "99",
            "tik": "100",
            "wak": "101",
            "wal": "102",
            " hu": "103",
            " mi": "104",
            " mk": "105",
            " ni": "106",
            " ra": "107",
            " um": "108",
            "a l": "109",
            "ate": "110",
            "esh": "111",
            "ina": "112",
            "ish": "113",
            "kim": "114",
            "o k": "115",
            " ir": "116",
            "a i": "117",
            "ala": "118",
            "ani": "119",
            "aq ": "120",
            "azi": "121",
            "hin": "122",
            "i a": "123",
            "idi": "124",
            "ima": "125",
            "ita": "126",
            "rai": "127",
            "raq": "128",
            "sha": "129",
            " ms": "130",
            " se": "131",
            "afr": "132",
            "ama": "133",
            "ano": "134",
            "ea ": "135",
            "ele": "136",
            "fri": "137",
            "go ": "138",
            "i i": "139",
            "ifa": "140",
            "iwa": "141",
            "iyo": "142",
            "kus": "143",
            "lia": "144",
            "lio": "145",
            "maj": "146",
            "mku": "147",
            "no ": "148",
            "tan": "149",
            "uli": "150",
            "uta": "151",
            "wen": "152",
            " al": "153",
            "a j": "154",
            "aad": "155",
            "aid": "156",
            "ari": "157",
            "awa": "158",
            "ba ": "159",
            "fa ": "160",
            "nde": "161",
            "nge": "162",
            "nya": "163",
            "o y": "164",
            "u w": "165",
            "ua ": "166",
            "umo": "167",
            "waz": "168",
            "ye ": "169",
            " ut": "170",
            " vi": "171",
            "a d": "172",
            "a t": "173",
            "aif": "174",
            "di ": "175",
            "ere": "176",
            "ing": "177",
            "kin": "178",
            "nda": "179",
            "o n": "180",
            "oa ": "181",
            "tai": "182",
            "toa": "183",
            "usa": "184",
            "uto": "185",
            "was": "186",
            "yak": "187",
            "zo ": "188",
            " ji": "189",
            " mw": "190",
            "a p": "191",
            "aia": "192",
            "amu": "193",
            "ang": "194",
            "bik": "195",
            "bo ": "196",
            "del": "197",
            "e w": "198",
            "ene": "199",
            "eng": "200",
            "ich": "201",
            "iri": "202",
            "iti": "203",
            "ito": "204",
            "ki ": "205",
            "kir": "206",
            "ko ": "207",
            "kuu": "208",
            "mar": "209",
            "mbo": "210",
            "mil": "211",
            "ngi": "212",
            "ngo": "213",
            "o l": "214",
            "ong": "215",
            "si ": "216",
            "ta ": "217",
            "tak": "218",
            "u y": "219",
            "umu": "220",
            "usi": "221",
            "uu ": "222",
            "wam": "223",
            " af": "224",
            " ba": "225",
            " li": "226",
            " si": "227",
            " zi": "228",
            "a v": "229",
            "ami": "230",
            "atu": "231",
            "awi": "232",
            "eri": "233",
            "fan": "234",
            "fur": "235",
            "ger": "236",
            "i z": "237",
            "isi": "238",
            "izo": "239",
            "lea": "240",
            "mbi": "241",
            "mwa": "242",
            "nye": "243",
            "o h": "244",
            "o m": "245",
            "oni": "246",
            "rez": "247",
            "saa": "248",
            "ser": "249",
            "sin": "250",
            "tat": "251",
            "tis": "252",
            "tu ": "253",
            "uin": "254",
            "uki": "255",
            "ur ": "256",
            "wi ": "257",
            "yar": "258",
            " da": "259",
            " en": "260",
            " mp": "261",
            " ny": "262",
            " ta": "263",
            " ul": "264",
            " we": "265",
            "a c": "266",
            "a f": "267",
            "ais": "268",
            "apo": "269",
            "ayo": "270",
            "bar": "271",
            "dhi": "272",
            "e a": "273",
            "eke": "274",
            "eny": "275",
            "eon": "276",
            "hai": "277",
            "han": "278",
            "hiy": "279",
            "hur": "280",
            "i s": "281",
            "imw": "282",
            "kal": "283",
            "kwe": "284",
            "lak": "285",
            "lam": "286",
            "mak": "287",
            "msa": "288",
            "ne ": "289",
            "ngu": "290",
            "ru ": "291",
            "sal": "292",
            "swa": "293",
            "te ": "294",
            "ti ": "295",
            "uku": "296",
            "uma": "297",
            "una": "298",
            "uru": "299"
        },
        "swedish": {
            "en ": "0",
            " de": "1",
            "et ": "2",
            "er ": "3",
            "tt ": "4",
            "om ": "5",
            "f\u00f6r": "6",
            "ar ": "7",
            "de ": "8",
            "att": "9",
            " f\u00f6": "10",
            "ing": "11",
            " in": "12",
            " at": "13",
            " i ": "14",
            "det": "15",
            "ch ": "16",
            "an ": "17",
            "gen": "18",
            " an": "19",
            "t s": "20",
            "som": "21",
            "te ": "22",
            " oc": "23",
            "ter": "24",
            " ha": "25",
            "lle": "26",
            "och": "27",
            " sk": "28",
            " so": "29",
            "ra ": "30",
            "r a": "31",
            " me": "32",
            "var": "33",
            "nde": "34",
            "\u00e4r ": "35",
            " ko": "36",
            "on ": "37",
            "ans": "38",
            "int": "39",
            "n s": "40",
            "na ": "41",
            " en": "42",
            " fr": "43",
            " p\u00e5": "44",
            " st": "45",
            " va": "46",
            "and": "47",
            "nte": "48",
            "p\u00e5 ": "49",
            "ska": "50",
            "ta ": "51",
            " vi": "52",
            "der": "53",
            "\u00e4ll": "54",
            "\u00f6rs": "55",
            " om": "56",
            "da ": "57",
            "kri": "58",
            "ka ": "59",
            "nst": "60",
            " ho": "61",
            "as ": "62",
            "st\u00e4": "63",
            "r d": "64",
            "t f": "65",
            "upp": "66",
            " be": "67",
            "nge": "68",
            "r s": "69",
            "tal": "70",
            "t\u00e4l": "71",
            "\u00f6r ": "72",
            " av": "73",
            "ger": "74",
            "ill": "75",
            "ng ": "76",
            "e s": "77",
            "ekt": "78",
            "ade": "79",
            "era": "80",
            "ers": "81",
            "har": "82",
            "ll ": "83",
            "lld": "84",
            "rin": "85",
            "rna": "86",
            "s\u00e4k": "87",
            "und": "88",
            "inn": "89",
            "lig": "90",
            "ns ": "91",
            " ma": "92",
            " pr": "93",
            " up": "94",
            "age": "95",
            "av ": "96",
            "iva": "97",
            "kti": "98",
            "lda": "99",
            "orn": "100",
            "son": "101",
            "ts ": "102",
            "tta": "103",
            "\u00e4kr": "104",
            " sj": "105",
            " ti": "106",
            "avt": "107",
            "ber": "108",
            "els": "109",
            "eta": "110",
            "kol": "111",
            "men": "112",
            "n d": "113",
            "t k": "114",
            "vta": "115",
            "\u00e5r ": "116",
            "juk": "117",
            "man": "118",
            "n f": "119",
            "nin": "120",
            "r i": "121",
            "rs\u00e4": "122",
            "sju": "123",
            "sso": "124",
            " \u00e4r": "125",
            "a s": "126",
            "ach": "127",
            "ag ": "128",
            "bac": "129",
            "den": "130",
            "ett": "131",
            "fte": "132",
            "hor": "133",
            "nba": "134",
            "oll": "135",
            "rnb": "136",
            "ste": "137",
            "til": "138",
            " ef": "139",
            " si": "140",
            "a a": "141",
            "e h": "142",
            "ed ": "143",
            "eft": "144",
            "ga ": "145",
            "ig ": "146",
            "it ": "147",
            "ler": "148",
            "med": "149",
            "n i": "150",
            "nd ": "151",
            "s\u00e5 ": "152",
            "tiv": "153",
            " bl": "154",
            " et": "155",
            " fi": "156",
            " s\u00e4": "157",
            "at ": "158",
            "des": "159",
            "e a": "160",
            "gar": "161",
            "get": "162",
            "lan": "163",
            "lss": "164",
            "ost": "165",
            "r b": "166",
            "r e": "167",
            "re ": "168",
            "ret": "169",
            "sta": "170",
            "t i": "171",
            " ge": "172",
            " he": "173",
            " re": "174",
            "a f": "175",
            "all": "176",
            "bos": "177",
            "ets": "178",
            "lek": "179",
            "let": "180",
            "ner": "181",
            "nna": "182",
            "nne": "183",
            "r f": "184",
            "rit": "185",
            "s s": "186",
            "sen": "187",
            "sto": "188",
            "tor": "189",
            "vav": "190",
            "ygg": "191",
            " ka": "192",
            " s\u00e5": "193",
            " tr": "194",
            " ut": "195",
            "ad ": "196",
            "al ": "197",
            "are": "198",
            "e o": "199",
            "gon": "200",
            "kom": "201",
            "n a": "202",
            "n h": "203",
            "nga": "204",
            "r h": "205",
            "ren": "206",
            "t d": "207",
            "tag": "208",
            "tar": "209",
            "tre": "210",
            "\u00e4tt": "211",
            " f\u00e5": "212",
            " h\u00e4": "213",
            " se": "214",
            "a d": "215",
            "a i": "216",
            "a p": "217",
            "ale": "218",
            "ann": "219",
            "ara": "220",
            "byg": "221",
            "gt ": "222",
            "han": "223",
            "igt": "224",
            "kan": "225",
            "la ": "226",
            "n o": "227",
            "nom": "228",
            "nsk": "229",
            "omm": "230",
            "r k": "231",
            "r p": "232",
            "r v": "233",
            "s f": "234",
            "s k": "235",
            "t a": "236",
            "t p": "237",
            "ver": "238",
            " bo": "239",
            " br": "240",
            " ku": "241",
            " n\u00e5": "242",
            "a b": "243",
            "a e": "244",
            "del": "245",
            "ens": "246",
            "es ": "247",
            "fin": "248",
            "ige": "249",
            "m s": "250",
            "n p": "251",
            "n\u00e5g": "252",
            "or ": "253",
            "r o": "254",
            "rbe": "255",
            "rs ": "256",
            "rt ": "257",
            "s a": "258",
            "s n": "259",
            "skr": "260",
            "t o": "261",
            "ten": "262",
            "tio": "263",
            "ven": "264",
            " al": "265",
            " ja": "266",
            " p ": "267",
            " r ": "268",
            " sa": "269",
            "a h": "270",
            "bet": "271",
            "cke": "272",
            "dra": "273",
            "e f": "274",
            "e i": "275",
            "eda": "276",
            "eno": "277",
            "er\u00e4": "278",
            "ess": "279",
            "ion": "280",
            "jag": "281",
            "m f": "282",
            "ne ": "283",
            "nns": "284",
            "pro": "285",
            "r t": "286",
            "rar": "287",
            "riv": "288",
            "r\u00e4t": "289",
            "t e": "290",
            "t t": "291",
            "ust": "292",
            "vad": "293",
            "\u00f6re": "294",
            " ar": "295",
            " by": "296",
            " kr": "297",
            " mi": "298",
            "arb": "299"
        },
        "tagalog": {
            "ng ": "0",
            "ang": "1",
            " na": "2",
            " sa": "3",
            "an ": "4",
            "nan": "5",
            "sa ": "6",
            "na ": "7",
            " ma": "8",
            " ca": "9",
            "ay ": "10",
            "n g": "11",
            " an": "12",
            "ong": "13",
            " ga": "14",
            "at ": "15",
            " pa": "16",
            "ala": "17",
            " si": "18",
            "a n": "19",
            "ga ": "20",
            "g n": "21",
            "g m": "22",
            "ito": "23",
            "g c": "24",
            "man": "25",
            "san": "26",
            "g s": "27",
            "ing": "28",
            "to ": "29",
            "ila": "30",
            "ina": "31",
            " di": "32",
            " ta": "33",
            "aga": "34",
            "iya": "35",
            "aca": "36",
            "g t": "37",
            " at": "38",
            "aya": "39",
            "ama": "40",
            "lan": "41",
            "a a": "42",
            "qui": "43",
            "a c": "44",
            "a s": "45",
            "nag": "46",
            " ba": "47",
            "g i": "48",
            "tan": "49",
            "'t ": "50",
            " cu": "51",
            "aua": "52",
            "g p": "53",
            " ni": "54",
            "os ": "55",
            "'y ": "56",
            "a m": "57",
            " n ": "58",
            "la ": "59",
            " la": "60",
            "o n": "61",
            "yan": "62",
            " ay": "63",
            "usa": "64",
            "cay": "65",
            "on ": "66",
            "ya ": "67",
            " it": "68",
            "al ": "69",
            "apa": "70",
            "ata": "71",
            "t n": "72",
            "uan": "73",
            "aha": "74",
            "asa": "75",
            "pag": "76",
            " gu": "77",
            "g l": "78",
            "di ": "79",
            "mag": "80",
            "aba": "81",
            "g a": "82",
            "ara": "83",
            "a p": "84",
            "in ": "85",
            "ana": "86",
            "it ": "87",
            "si ": "88",
            "cus": "89",
            "g b": "90",
            "uin": "91",
            "a t": "92",
            "as ": "93",
            "n n": "94",
            "hin": "95",
            " hi": "96",
            "a't": "97",
            "ali": "98",
            " bu": "99",
            "gan": "100",
            "uma": "101",
            "a d": "102",
            "agc": "103",
            "aqu": "104",
            "g d": "105",
            " tu": "106",
            "aon": "107",
            "ari": "108",
            "cas": "109",
            "i n": "110",
            "niy": "111",
            "pin": "112",
            "a i": "113",
            "gca": "114",
            "siy": "115",
            "a'y": "116",
            "yao": "117",
            "ag ": "118",
            "ca ": "119",
            "han": "120",
            "ili": "121",
            "pan": "122",
            "sin": "123",
            "ual": "124",
            "n s": "125",
            "nam": "126",
            " lu": "127",
            "can": "128",
            "dit": "129",
            "gui": "130",
            "y n": "131",
            "gal": "132",
            "hat": "133",
            "nal": "134",
            " is": "135",
            "bag": "136",
            "fra": "137",
            " fr": "138",
            " su": "139",
            "a l": "140",
            " co": "141",
            "ani": "142",
            " bi": "143",
            " da": "144",
            "alo": "145",
            "isa": "146",
            "ita": "147",
            "may": "148",
            "o s": "149",
            "sil": "150",
            "una": "151",
            " in": "152",
            " pi": "153",
            "l n": "154",
            "nil": "155",
            "o a": "156",
            "pat": "157",
            "sac": "158",
            "t s": "159",
            " ua": "160",
            "agu": "161",
            "ail": "162",
            "bin": "163",
            "dal": "164",
            "g h": "165",
            "ndi": "166",
            "oon": "167",
            "ua ": "168",
            " ha": "169",
            "ind": "170",
            "ran": "171",
            "s n": "172",
            "tin": "173",
            "ulo": "174",
            "eng": "175",
            "g f": "176",
            "ini": "177",
            "lah": "178",
            "lo ": "179",
            "rai": "180",
            "rin": "181",
            "ton": "182",
            "g u": "183",
            "inu": "184",
            "lon": "185",
            "o'y": "186",
            "t a": "187",
            " ar": "188",
            "a b": "189",
            "ad ": "190",
            "bay": "191",
            "cal": "192",
            "gya": "193",
            "ile": "194",
            "mat": "195",
            "n a": "196",
            "pau": "197",
            "ra ": "198",
            "tay": "199",
            "y m": "200",
            "ant": "201",
            "ban": "202",
            "i m": "203",
            "nas": "204",
            "nay": "205",
            "no ": "206",
            "sti": "207",
            " ti": "208",
            "ags": "209",
            "g g": "210",
            "ta ": "211",
            "uit": "212",
            "uno": "213",
            " ib": "214",
            " ya": "215",
            "a u": "216",
            "abi": "217",
            "ati": "218",
            "cap": "219",
            "ig ": "220",
            "is ": "221",
            "la'": "222",
            " do": "223",
            " pu": "224",
            "api": "225",
            "ayo": "226",
            "gos": "227",
            "gul": "228",
            "lal": "229",
            "tag": "230",
            "til": "231",
            "tun": "232",
            "y c": "233",
            "y s": "234",
            "yon": "235",
            "ano": "236",
            "bur": "237",
            "iba": "238",
            "isi": "239",
            "lam": "240",
            "nac": "241",
            "nat": "242",
            "ni ": "243",
            "nto": "244",
            "od ": "245",
            "pa ": "246",
            "rgo": "247",
            "urg": "248",
            " m ": "249",
            "adr": "250",
            "ast": "251",
            "cag": "252",
            "gay": "253",
            "gsi": "254",
            "i p": "255",
            "ino": "256",
            "len": "257",
            "lin": "258",
            "m g": "259",
            "mar": "260",
            "nah": "261",
            "to'": "262",
            " de": "263",
            "a h": "264",
            "cat": "265",
            "cau": "266",
            "con": "267",
            "iqu": "268",
            "lac": "269",
            "mab": "270",
            "min": "271",
            "og ": "272",
            "par": "273",
            "sal": "274",
            " za": "275",
            "ao ": "276",
            "doo": "277",
            "ipi": "278",
            "nod": "279",
            "nte": "280",
            "uha": "281",
            "ula": "282",
            " re": "283",
            "ill": "284",
            "lit": "285",
            "mac": "286",
            "nit": "287",
            "o't": "288",
            "or ": "289",
            "ora": "290",
            "sum": "291",
            "y p": "292",
            " al": "293",
            " mi": "294",
            " um": "295",
            "aco": "296",
            "ada": "297",
            "agd": "298",
            "cab": "299"
        },
        "turkish": {
            "lar": "0",
            "en ": "1",
            "ler": "2",
            "an ": "3",
            "in ": "4",
            " bi": "5",
            " ya": "6",
            "eri": "7",
            "de ": "8",
            " ka": "9",
            "ir ": "10",
            "ar\u0131": "11",
            " ba": "12",
            " de": "13",
            " ha": "14",
            "\u0131n ": "15",
            "ara": "16",
            "bir": "17",
            " ve": "18",
            " sa": "19",
            "ile": "20",
            "le ": "21",
            "nde": "22",
            "da ": "23",
            " bu": "24",
            "ana": "25",
            "ini": "26",
            "\u0131n\u0131": "27",
            "er ": "28",
            "ve ": "29",
            " y\u0131": "30",
            "lma": "31",
            "y\u0131l": "32",
            " ol": "33",
            "ar ": "34",
            "n b": "35",
            "nda": "36",
            "aya": "37",
            "li ": "38",
            "as\u0131": "39",
            " ge": "40",
            "ind": "41",
            "n k": "42",
            "esi": "43",
            "lan": "44",
            "nla": "45",
            "ak ": "46",
            "an\u0131": "47",
            "eni": "48",
            "ni ": "49",
            "n\u0131 ": "50",
            "r\u0131n": "51",
            "san": "52",
            " ko": "53",
            " ye": "54",
            "maz": "55",
            "ba\u015f": "56",
            "ili": "57",
            "rin": "58",
            "al\u0131": "59",
            "az ": "60",
            "hal": "61",
            "\u0131nd": "62",
            " da": "63",
            " g\u00fc": "64",
            "ele": "65",
            "\u0131lm": "66",
            "\u0131\u011f\u0131": "67",
            "eki": "68",
            "g\u00fcn": "69",
            "i b": "70",
            "i\u00e7i": "71",
            "den": "72",
            "kar": "73",
            "si ": "74",
            " il": "75",
            "e y": "76",
            "na ": "77",
            "yor": "78",
            "ek ": "79",
            "n s": "80",
            " i\u00e7": "81",
            "bu ": "82",
            "e b": "83",
            "im ": "84",
            "ki ": "85",
            "len": "86",
            "ri ": "87",
            "s\u0131n": "88",
            " so": "89",
            "\u00fcn ": "90",
            " ta": "91",
            "nin": "92",
            "i\u011fi": "93",
            "tan": "94",
            "yan": "95",
            " si": "96",
            "nat": "97",
            "n\u0131n": "98",
            "kan": "99",
            "r\u0131 ": "100",
            "\u00e7in": "101",
            "\u011f\u0131 ": "102",
            "eli": "103",
            "n a": "104",
            "\u0131r ": "105",
            " an": "106",
            "ine": "107",
            "n y": "108",
            "ola": "109",
            " ar": "110",
            "al ": "111",
            "e s": "112",
            "lik": "113",
            "n d": "114",
            "sin": "115",
            " al": "116",
            " d\u00fc": "117",
            "anl": "118",
            "ne ": "119",
            "ya ": "120",
            "\u0131m ": "121",
            "\u0131na": "122",
            " be": "123",
            "ada": "124",
            "ala": "125",
            "ama": "126",
            "ilm": "127",
            "or ": "128",
            "s\u0131 ": "129",
            "yen": "130",
            " me": "131",
            "at\u0131": "132",
            "di ": "133",
            "eti": "134",
            "ken": "135",
            "la ": "136",
            "l\u0131 ": "137",
            "oru": "138",
            " g\u00f6": "139",
            " in": "140",
            "and": "141",
            "e d": "142",
            "men": "143",
            "un ": "144",
            "\u00f6ne": "145",
            "a d": "146",
            "at ": "147",
            "e a": "148",
            "e g": "149",
            "yar": "150",
            " ku": "151",
            "ay\u0131": "152",
            "dan": "153",
            "edi": "154",
            "iri": "155",
            "\u00fcn\u00fc": "156",
            "\u011fi ": "157",
            "\u0131l\u0131": "158",
            "eme": "159",
            "e\u011fi": "160",
            "i k": "161",
            "i y": "162",
            "\u0131la": "163",
            " \u00e7a": "164",
            "a y": "165",
            "alk": "166",
            "d\u0131 ": "167",
            "ede": "168",
            "el ": "169",
            "nd\u0131": "170",
            "ra ": "171",
            "\u00fcne": "172",
            " s\u00fc": "173",
            "d\u0131r": "174",
            "e k": "175",
            "ere": "176",
            "ik ": "177",
            "imi": "178",
            "i\u015fi": "179",
            "mas": "180",
            "n h": "181",
            "s\u00fcr": "182",
            "yle": "183",
            " ad": "184",
            " fi": "185",
            " gi": "186",
            " se": "187",
            "a k": "188",
            "arl": "189",
            "a\u015f\u0131": "190",
            "iyo": "191",
            "kla": "192",
            "l\u0131\u011f": "193",
            "nem": "194",
            "ney": "195",
            "rme": "196",
            "ste": "197",
            "t\u0131 ": "198",
            "unl": "199",
            "ver": "200",
            " s\u0131": "201",
            " te": "202",
            " to": "203",
            "a s": "204",
            "a\u015fk": "205",
            "ekl": "206",
            "end": "207",
            "kal": "208",
            "li\u011f": "209",
            "min": "210",
            "t\u0131r": "211",
            "ulu": "212",
            "unu": "213",
            "yap": "214",
            "ye ": "215",
            "\u0131 i": "216",
            "\u015fka": "217",
            "\u015ft\u0131": "218",
            " b\u00fc": "219",
            " ke": "220",
            " ki": "221",
            "ard": "222",
            "art": "223",
            "a\u015fa": "224",
            "n i": "225",
            "ndi": "226",
            "ti ": "227",
            "top": "228",
            "\u0131 b": "229",
            " va": "230",
            " \u00f6n": "231",
            "aki": "232",
            "cak": "233",
            "ey ": "234",
            "fil": "235",
            "isi": "236",
            "kle": "237",
            "kur": "238",
            "man": "239",
            "nce": "240",
            "nle": "241",
            "nun": "242",
            "rak": "243",
            "\u0131k ": "244",
            " en": "245",
            " yo": "246",
            "a g": "247",
            "lis": "248",
            "mak": "249",
            "n g": "250",
            "tir": "251",
            "yas": "252",
            " i\u015f": "253",
            " y\u00f6": "254",
            "ale": "255",
            "bil": "256",
            "bul": "257",
            "et ": "258",
            "i d": "259",
            "iye": "260",
            "kil": "261",
            "ma ": "262",
            "n e": "263",
            "n t": "264",
            "nu ": "265",
            "olu": "266",
            "rla": "267",
            "te ": "268",
            "y\u00f6n": "269",
            "\u00e7\u0131k": "270",
            " ay": "271",
            " m\u00fc": "272",
            " \u00e7o": "273",
            " \u00e7\u0131": "274",
            "a a": "275",
            "a b": "276",
            "ata": "277",
            "der": "278",
            "gel": "279",
            "i g": "280",
            "i i": "281",
            "ill": "282",
            "ist": "283",
            "ld\u0131": "284",
            "lu ": "285",
            "mek": "286",
            "mle": "287",
            "n \u00e7": "288",
            "onu": "289",
            "opl": "290",
            "ran": "291",
            "rat": "292",
            "rd\u0131": "293",
            "rke": "294",
            "siy": "295",
            "son": "296",
            "ta ": "297",
            "t\u00e7\u0131": "298",
            "t\u0131n": "299"
        },
        "ukrainian": {
            " \u043d\u0430": "0",
            " \u0437\u0430": "1",
            "\u043d\u043d\u044f": "2",
            "\u043d\u044f ": "3",
            "\u043d\u0430 ": "4",
            " \u043f\u0440": "5",
            "\u043e\u0433\u043e": "6",
            "\u0433\u043e ": "7",
            "\u0441\u044c\u043a": "8",
            " \u043f\u043e": "9",
            " \u0443 ": "10",
            "\u0432\u0456\u0434": "11",
            "\u0435\u0440\u0435": "12",
            " \u043c\u0456": "13",
            " \u043d\u0435": "14",
            "\u0438\u0445 ": "15",
            "\u0442\u044c ": "16",
            "\u043f\u0435\u0440": "17",
            " \u0432\u0456": "18",
            "\u0456\u0432 ": "19",
            " \u043f\u0435": "20",
            " \u0449\u043e": "21",
            "\u043b\u044c\u043d": "22",
            "\u043c\u0438 ": "23",
            "\u043d\u0456 ": "24",
            "\u043d\u0435 ": "25",
            "\u0442\u0438 ": "26",
            "\u0430\u0442\u0438": "27",
            "\u0435\u043d\u043d": "28",
            "\u043c\u0456\u0441": "29",
            "\u043f\u0440\u0430": "30",
            "\u0443\u0432\u0430": "31",
            "\u043d\u0438\u043a": "32",
            "\u043f\u0440\u043e": "33",
            "\u0440\u0430\u0432": "34",
            "\u0456\u0432\u043d": "35",
            " \u0442\u0430": "36",
            "\u0431\u0443\u0434": "37",
            "\u0432\u043b\u0456": "38",
            "\u0440\u0456\u0432": "39",
            " \u043a\u043e": "40",
            " \u0440\u0456": "41",
            "\u0430\u043b\u044c": "42",
            "\u043d\u043e ": "43",
            "\u043e\u043c\u0443": "44",
            "\u0449\u043e ": "45",
            " \u0432\u0438": "46",
            "\u043c\u0443 ": "47",
            "\u0440\u0435\u0432": "48",
            "\u0441\u044f ": "49",
            "\u0456\u043d\u043d": "50",
            " \u0434\u043e": "51",
            " \u0443\u043f": "52",
            "\u0430\u0432\u043b": "53",
            "\u0430\u043d\u043d": "54",
            "\u043a\u043e\u043c": "55",
            "\u043b\u0438 ": "56",
            "\u043b\u0456\u043d": "57",
            "\u043d\u043e\u0433": "58",
            "\u0443\u043f\u0440": "59",
            " \u0431\u0443": "60",
            " \u0437 ": "61",
            " \u0440\u043e": "62",
            "\u0437\u0430 ": "63",
            "\u0438 \u043d": "64",
            "\u043d\u043e\u0432": "65",
            "\u043e\u0440\u043e": "66",
            "\u043e\u0441\u0442": "67",
            "\u0441\u0442\u0430": "68",
            "\u0442\u0456 ": "69",
            "\u044e\u0442\u044c": "70",
            " \u043c\u043e": "71",
            " \u043d\u0456": "72",
            " \u044f\u043a": "73",
            "\u0431\u043e\u0440": "74",
            "\u0432\u0430 ": "75",
            "\u0432\u0430\u043d": "76",
            "\u0435\u043d\u044c": "77",
            "\u0438 \u043f": "78",
            "\u043d\u044c ": "79",
            "\u043e\u0432\u0456": "80",
            "\u0440\u043e\u043d": "81",
            "\u0441\u0442\u0456": "82",
            "\u0442\u0430 ": "83",
            "\u0443 \u0432": "84",
            "\u044c\u043a\u043e": "85",
            "\u0456\u0441\u0442": "86",
            " \u0432 ": "87",
            " \u0440\u0435": "88",
            "\u0434\u043e ": "89",
            "\u0435 \u043f": "90",
            "\u0437\u0430\u0431": "91",
            "\u0438\u0439 ": "92",
            "\u043d\u0441\u044c": "93",
            "\u043e \u0432": "94",
            "\u043e \u043f": "95",
            "\u043f\u0440\u0438": "96",
            "\u0456 \u043f": "97",
            " \u043a\u0443": "98",
            " \u043f\u0456": "99",
            " \u0441\u043f": "100",
            "\u0430 \u043f": "101",
            "\u0430\u0431\u043e": "102",
            "\u0430\u043d\u0441": "103",
            "\u0430\u0446\u0456": "104",
            "\u0432\u0430\u0442": "105",
            "\u0432\u043d\u0438": "106",
            "\u0438 \u0432": "107",
            "\u0438\u043c\u0438": "108",
            "\u043a\u0430 ": "109",
            "\u043d\u0435\u043d": "110",
            "\u043d\u0456\u0447": "111",
            "\u043e\u043d\u0430": "112",
            "\u043e\u0457 ": "113",
            "\u043f\u043e\u0432": "114",
            "\u044c\u043a\u0438": "115",
            "\u044c\u043d\u043e": "116",
            "\u0456\u0437\u043d": "117",
            "\u0456\u0447\u043d": "118",
            " \u0430\u0432": "119",
            " \u043c\u0430": "120",
            " \u043e\u0440": "121",
            " \u0441\u0443": "122",
            " \u0447\u0438": "123",
            " \u0456\u043d": "124",
            "\u0430 \u0437": "125",
            "\u0430\u043c ": "126",
            "\u0430\u0454 ": "127",
            "\u0432\u043d\u0435": "128",
            "\u0432\u0442\u043e": "129",
            "\u0434\u043e\u043c": "130",
            "\u0435\u043d\u0442": "131",
            "\u0436\u0438\u0442": "132",
            "\u0437\u043d\u0438": "133",
            "\u0438\u043c ": "134",
            "\u0438\u0442\u043b": "135",
            "\u043b\u0430 ": "136",
            "\u043d\u0438\u0445": "137",
            "\u043d\u0438\u0446": "138",
            "\u043e\u0432\u0430": "139",
            "\u043e\u0432\u0438": "140",
            "\u043e\u043c ": "141",
            "\u043f\u043e\u0440": "142",
            "\u0442\u044c\u0441": "143",
            "\u0443 \u0440": "144",
            "\u044c\u0441\u044f": "145",
            "\u0456\u0434\u043e": "146",
            "\u0456\u043b\u044c": "147",
            "\u0456\u0441\u044c": "148",
            " \u0432\u0430": "149",
            " \u0434\u0456": "150",
            " \u0436\u0438": "151",
            " \u0447\u0435": "152",
            " \u0456 ": "153",
            "\u0430 \u0432": "154",
            "\u0430 \u043d": "155",
            "\u0430\u043b\u0438": "156",
            "\u0432\u0435\u0437": "157",
            "\u0432\u043d\u043e": "158",
            "\u0435\u0432\u0435": "159",
            "\u0435\u0437\u0435": "160",
            "\u0437\u0435\u043d": "161",
            "\u0438\u0446\u0442": "162",
            "\u043a\u0438 ": "163",
            "\u043a\u0438\u0445": "164",
            "\u043a\u043e\u043d": "165",
            "\u043a\u0443 ": "166",
            "\u043b\u0430\u0441": "167",
            "\u043b\u044f ": "168",
            "\u043c\u043e\u0436": "169",
            "\u043d\u0430\u0447": "170",
            "\u043d\u0438\u043c": "171",
            "\u043d\u043e\u0457": "172",
            "\u043e \u0431": "173",
            "\u043e\u0432\u0443": "174",
            "\u043e\u0434\u0438": "175",
            "\u043e\u044e ": "176",
            "\u0440\u043e ": "177",
            "\u0440\u043e\u043a": "178",
            "\u0441\u043d\u043e": "179",
            "\u0441\u043f\u043e": "180",
            "\u0442\u0430\u043a": "181",
            "\u0442\u0432\u0430": "182",
            "\u0442\u0443 ": "183",
            "\u0443 \u043f": "184",
            "\u0446\u0442\u0432": "185",
            "\u044c\u043d\u0438": "186",
            "\u044f \u0437": "187",
            "\u0456 \u043c": "188",
            "\u0456\u0457 ": "189",
            " \u0432\u0441": "190",
            " \u0433\u0440": "191",
            " \u0434\u0435": "192",
            " \u043d\u043e": "193",
            " \u043f\u0430": "194",
            " \u0441\u0435": "195",
            " \u0443\u043a": "196",
            " \u0457\u0445": "197",
            "\u0430 \u043e": "198",
            "\u0430\u0432\u0442": "199",
            "\u0430\u0441\u0442": "200",
            "\u0430\u044e\u0442": "201",
            "\u0432\u0430\u0440": "202",
            "\u0434\u0435\u043d": "203",
            "\u0434\u0438 ": "204",
            "\u0434\u0443 ": "205",
            "\u0437\u043d\u0430": "206",
            "\u0438 \u0437": "207",
            "\u0438\u043a\u043e": "208",
            "\u0438\u0441\u044f": "209",
            "\u0438\u0442\u0438": "210",
            "\u043a\u043e\u0433": "211",
            "\u043c\u0435\u043d": "212",
            "\u043d\u043e\u043c": "213",
            "\u043d\u0443 ": "214",
            "\u043e \u043d": "215",
            "\u043e \u0441": "216",
            "\u043e\u0431\u0443": "217",
            "\u043e\u0432\u043e": "218",
            "\u043f\u043b\u0430": "219",
            "\u0440\u0430\u043d": "220",
            "\u0440\u0438\u0432": "221",
            "\u0440\u043e\u0431": "222",
            "\u0441\u043a\u0430": "223",
            "\u0442\u0430\u043d": "224",
            "\u0442\u0438\u043c": "225",
            "\u0442\u0438\u0441": "226",
            "\u0442\u043e ": "227",
            "\u0442\u0440\u0430": "228",
            "\u0443\u0434\u043e": "229",
            "\u0447\u0438\u043d": "230",
            "\u0447\u043d\u0438": "231",
            "\u0456 \u0432": "232",
            "\u0456\u044e ": "233",
            " \u0430 ": "234",
            " \u0432\u043e": "235",
            " \u0434\u0430": "236",
            " \u043a\u0432": "237",
            " \u043c\u0435": "238",
            " \u043e\u0431": "239",
            " \u0441\u043a": "240",
            " \u0442\u0438": "241",
            " \u0444\u0456": "242",
            " \u0454 ": "243",
            "\u0430 \u0440": "244",
            "\u0430 \u0441": "245",
            "\u0430 \u0443": "246",
            "\u0430\u043a ": "247",
            "\u0430\u043d\u0456": "248",
            "\u0430\u0440\u0442": "249",
            "\u0430\u0441\u043d": "250",
            "\u0432 \u0443": "251",
            "\u0432\u0438\u043a": "252",
            "\u0432\u0456\u0437": "253",
            "\u0434\u043e\u0432": "254",
            "\u0434\u043f\u043e": "255",
            "\u0434\u0456\u0432": "256",
            "\u0435\u0432\u0456": "257",
            "\u0435\u043d\u0441": "258",
            "\u0436\u0435 ": "259",
            "\u0438 \u043c": "260",
            "\u0438 \u0441": "261",
            "\u0438\u043a\u0430": "262",
            "\u0438\u0447\u043d": "263",
            "\u043a\u0456 ": "264",
            "\u043a\u0456\u0432": "265",
            "\u043c\u0456\u0436": "266",
            "\u043d\u0430\u043d": "267",
            "\u043d\u043e\u0441": "268",
            "\u043e \u0443": "269",
            "\u043e\u0431\u043b": "270",
            "\u043e\u0434\u043d": "271",
            "\u043e\u043a ": "272",
            "\u043e\u043b\u043e": "273",
            "\u043e\u0442\u0440": "274",
            "\u0440\u0435\u043d": "275",
            "\u0440\u0438\u043c": "276",
            "\u0440\u043e\u0437": "277",
            "\u0441\u044c ": "278",
            "\u0441\u0456 ": "279",
            "\u0442\u043b\u0430": "280",
            "\u0442\u0456\u0432": "281",
            "\u0443 \u0437": "282",
            "\u0443\u0433\u043e": "283",
            "\u0443\u0434\u0456": "284",
            "\u0447\u0438 ": "285",
            "\u0448\u0435 ": "286",
            "\u044f \u043d": "287",
            "\u044f \u0443": "288",
            "\u0456\u0434\u043f": "289",
            "\u0456\u0439 ": "290",
            "\u0456\u043d\u0430": "291",
            "\u0456\u044f ": "292",
            " \u043a\u0430": "293",
            " \u043d\u0438": "294",
            " \u043e\u0441": "295",
            " \u0441\u0438": "296",
            " \u0442\u043e": "297",
            " \u0442\u0440": "298",
            " \u0443\u0433": "299"
        },
        "urdu": {
            "\u06cc\u06ba ": "0",
            " \u06a9\u06cc": "1",
            "\u06a9\u06d2 ": "2",
            " \u06a9\u06d2": "3",
            "\u0646\u06d2 ": "4",
            " \u06a9\u06c1": "5",
            "\u06d2 \u06a9": "6",
            "\u06a9\u06cc ": "7",
            "\u0645\u06cc\u06ba": "8",
            " \u0645\u06cc": "9",
            "\u06c1\u06d2 ": "10",
            "\u0648\u06ba ": "11",
            "\u06a9\u06c1 ": "12",
            " \u06c1\u06d2": "13",
            "\u0627\u0646 ": "14",
            "\u06c1\u06cc\u06ba": "15",
            "\u0648\u0631 ": "16",
            " \u06a9\u0648": "17",
            "\u06cc\u0627 ": "18",
            " \u0627\u0646": "19",
            " \u0646\u06d2": "20",
            "\u0633\u06d2 ": "21",
            " \u0633\u06d2": "22",
            " \u06a9\u0631": "23",
            "\u0633\u062a\u0627": "24",
            " \u0627\u0648": "25",
            "\u0627\u0648\u0631": "26",
            "\u062a\u0627\u0646": "27",
            "\u0631 \u06a9": "28",
            "\u06cc \u06a9": "29",
            " \u0627\u0633": "30",
            "\u06d2 \u0627": "31",
            " \u067e\u0627": "32",
            " \u06c1\u0648": "33",
            " \u067e\u0631": "34",
            "\u0631\u0641 ": "35",
            " \u06a9\u0627": "36",
            "\u0627 \u06a9": "37",
            "\u06cc \u0627": "38",
            " \u06c1\u06cc": "39",
            "\u062f\u0631 ": "40",
            "\u06a9\u0648 ": "41",
            " \u0627\u06cc": "42",
            "\u06ba \u06a9": "43",
            " \u0645\u0634": "44",
            " \u0645\u0644": "45",
            "\u0627\u062a ": "46",
            "\u0635\u062f\u0631": "47",
            "\u0627\u06a9\u0633": "48",
            "\u0634\u0631\u0641": "49",
            "\u0645\u0634\u0631": "50",
            "\u067e\u0627\u06a9": "51",
            "\u06a9\u0633\u062a": "52",
            "\u06cc \u0645": "53",
            " \u062f\u06cc": "54",
            " \u0635\u062f": "55",
            " \u06cc\u06c1": "56",
            "\u0627 \u06c1": "57",
            "\u0646 \u06a9": "58",
            "\u0648\u0627\u0644": "59",
            "\u06cc\u06c1 ": "60",
            "\u06d2 \u0648": "61",
            " \u0628\u06be": "62",
            " \u062f\u0648": "63",
            "\u0627\u0633 ": "64",
            "\u0631 \u0627": "65",
            "\u0646\u06c1\u06cc": "66",
            "\u06a9\u0627 ": "67",
            "\u06d2 \u0633": "68",
            "\u0626\u06cc ": "69",
            "\u06c1 \u0627": "70",
            "\u06cc\u062a ": "71",
            "\u06d2 \u06c1": "72",
            "\u062a \u06a9": "73",
            " \u0633\u0627": "74",
            "\u0644\u06d2 ": "75",
            "\u06c1\u0627 ": "76",
            "\u06d2 \u0628": "77",
            " \u0648\u0627": "78",
            "\u0627\u0631 ": "79",
            "\u0646\u06cc ": "80",
            "\u06a9\u06c1\u0627": "81",
            "\u06cc \u06c1": "82",
            "\u06d2 \u0645": "83",
            " \u0633\u06cc": "84",
            " \u0644\u06cc": "85",
            "\u0627\u0646\u06c1": "86",
            "\u0627\u0646\u06cc": "87",
            "\u0631 \u0645": "88",
            "\u0631 \u067e": "89",
            "\u0631\u06cc\u062a": "90",
            "\u0646 \u0645": "91",
            "\u06be\u0627 ": "92",
            "\u06cc\u0631 ": "93",
            " \u062c\u0627": "94",
            " \u062c\u0646": "95",
            "\u0626\u06d2 ": "96",
            "\u067e\u0631 ": "97",
            "\u06ba \u0646": "98",
            "\u06c1 \u06a9": "99",
            "\u06cc \u0648": "100",
            "\u06d2 \u062f": "101",
            " \u062a\u0648": "102",
            " \u062a\u06be": "103",
            " \u06af\u06cc": "104",
            "\u0627\u06cc\u06a9": "105",
            "\u0644 \u06a9": "106",
            "\u0646\u0627 ": "107",
            "\u06a9\u0631 ": "108",
            "\u06ba \u0645": "109",
            "\u06cc\u06a9 ": "110",
            " \u0628\u0627": "111",
            "\u0627 \u062a": "112",
            "\u062f\u06cc ": "113",
            "\u0646 \u0633": "114",
            "\u06a9\u06cc\u0627": "115",
            "\u06cc\u0648\u06ba": "116",
            "\u06d2 \u062c": "117",
            "\u0627\u0644 ": "118",
            "\u062a\u0648 ": "119",
            "\u06ba \u0627": "120",
            "\u06d2 \u067e": "121",
            " \u0686\u0627": "122",
            "\u0627\u0645 ": "123",
            "\u0628\u06be\u06cc": "124",
            "\u062a\u06cc ": "125",
            "\u062a\u06d2 ": "126",
            "\u062f\u0648\u0633": "127",
            "\u0633 \u06a9": "128",
            "\u0645\u0644\u06a9": "129",
            "\u0646 \u0627": "130",
            "\u06c1\u0648\u0631": "131",
            "\u06cc\u06d2 ": "132",
            " \u0645\u0648": "133",
            " \u0648\u06a9": "134",
            "\u0627\u0626\u06cc": "135",
            "\u0627\u0631\u062a": "136",
            "\u0627\u0644\u06d2": "137",
            "\u0628\u06be\u0627": "138",
            "\u0631\u062f\u06cc": "139",
            "\u0631\u06cc ": "140",
            "\u0648\u06c1 ": "141",
            "\u0648\u06cc\u0632": "142",
            "\u06ba \u062f": "143",
            "\u06be\u06cc ": "144",
            "\u06cc \u0633": "145",
            " \u0631\u06c1": "146",
            " \u0645\u0646": "147",
            " \u0646\u06c1": "148",
            " \u0648\u0631": "149",
            " \u0648\u06c1": "150",
            " \u06c1\u0646": "151",
            "\u0627 \u0627": "152",
            "\u0627\u0633\u062a": "153",
            "\u062a \u0627": "154",
            "\u062a \u067e": "155",
            "\u062f \u06a9": "156",
            "\u0632 \u0645": "157",
            "\u0646\u062f ": "158",
            "\u0648\u0631\u062f": "159",
            "\u0648\u06a9\u0644": "160",
            "\u06af\u06cc ": "161",
            "\u06af\u06cc\u0627": "162",
            "\u06c1 \u067e": "163",
            "\u06cc\u0632 ": "164",
            "\u06d2 \u062a": "165",
            " \u0627\u0639": "166",
            " \u0627\u067e": "167",
            " \u062c\u0633": "168",
            " \u062c\u0645": "169",
            " \u062c\u0648": "170",
            " \u0633\u0631": "171",
            "\u0627\u067e\u0646": "172",
            "\u0627\u06a9\u062b": "173",
            "\u062a\u06be\u0627": "174",
            "\u062b\u0631\u06cc": "175",
            "\u062f\u06cc\u0627": "176",
            "\u0631 \u062f": "177",
            "\u0631\u062a ": "178",
            "\u0631\u0648\u06cc": "179",
            "\u0633\u06cc ": "180",
            "\u0645\u0644\u0627": "181",
            "\u0646\u062f\u0648": "182",
            "\u0648\u0633\u062a": "183",
            "\u067e\u0631\u0648": "184",
            "\u0686\u0627\u06c1": "185",
            "\u06a9\u062b\u0631": "186",
            "\u06a9\u0644\u0627": "187",
            "\u06c1 \u06c1": "188",
            "\u06c1\u0646\u062f": "189",
            "\u06c1\u0648 ": "190",
            "\u06d2 \u0644": "191",
            " \u0627\u06a9": "192",
            " \u062f\u0627": "193",
            " \u0633\u0646": "194",
            " \u0648\u0632": "195",
            " \u067e\u06cc": "196",
            "\u0627 \u0686": "197",
            "\u0627\u0621 ": "198",
            "\u0627\u062a\u06be": "199",
            "\u0627\u0642\u0627": "200",
            "\u0627\u06c1 ": "201",
            "\u062a\u06be ": "202",
            "\u062f\u0648 ": "203",
            "\u0631 \u0628": "204",
            "\u0631\u0648\u0627": "205",
            "\u0631\u06d2 ": "206",
            "\u0633\u0627\u062a": "207",
            "\u0641 \u06a9": "208",
            "\u0642\u0627\u062a": "209",
            "\u0644\u0627 ": "210",
            "\u0644\u0627\u0621": "211",
            "\u0645 \u0645": "212",
            "\u0645 \u06a9": "213",
            "\u0645\u0646 ": "214",
            "\u0646\u0648\u06ba": "215",
            "\u0648 \u0627": "216",
            "\u06a9\u0631\u0646": "217",
            "\u06ba \u06c1": "218",
            "\u06be\u0627\u0631": "219",
            "\u06c1\u0648\u0626": "220",
            "\u06c1\u06cc ": "221",
            "\u06cc\u0634 ": "222",
            " \u0627\u0645": "223",
            " \u0644\u0627": "224",
            " \u0645\u0633": "225",
            " \u067e\u0648": "226",
            " \u067e\u06c1": "227",
            "\u0627\u0646\u06d2": "228",
            "\u062a \u0645": "229",
            "\u062a \u06c1": "230",
            "\u062c \u06a9": "231",
            "\u062f\u0648\u0646": "232",
            "\u0632\u06cc\u0631": "233",
            "\u0633 \u0633": "234",
            "\u0634 \u06a9": "235",
            "\u0641 \u0646": "236",
            "\u0644 \u06c1": "237",
            "\u0644\u0627\u0642": "238",
            "\u0644\u06cc ": "239",
            "\u0648\u0631\u06cc": "240",
            "\u0648\u0632\u06cc": "241",
            "\u0648\u0646\u0648": "242",
            "\u06a9\u06be\u0646": "243",
            "\u06af\u0627 ": "244",
            "\u06ba \u0633": "245",
            "\u06ba \u06af": "246",
            "\u06be\u0646\u06d2": "247",
            "\u06be\u06d2 ": "248",
            "\u06c1 \u0628": "249",
            "\u06c1 \u062c": "250",
            "\u06c1\u0631 ": "251",
            "\u06cc \u0622": "252",
            "\u06cc \u067e": "253",
            " \u062d\u0627": "254",
            " \u0648\u0641": "255",
            " \u06af\u0627": "256",
            "\u0627 \u062c": "257",
            "\u0627 \u06af": "258",
            "\u0627\u062f ": "259",
            "\u0627\u062f\u06cc": "260",
            "\u0627\u0639\u0638": "261",
            "\u0627\u06c1\u062a": "262",
            "\u062c\u0633 ": "263",
            "\u062c\u0645\u06c1": "264",
            "\u062c\u0648 ": "265",
            "\u0631 \u0633": "266",
            "\u0631 \u06c1": "267",
            "\u0631\u0646\u06d2": "268",
            "\u0633 \u0645": "269",
            "\u0633\u0627 ": "270",
            "\u0633\u0646\u062f": "271",
            "\u0633\u0646\u06af": "272",
            "\u0638\u0645 ": "273",
            "\u0639\u0638\u0645": "274",
            "\u0644 \u0645": "275",
            "\u0644\u06cc\u06d2": "276",
            "\u0645\u0644 ": "277",
            "\u0645\u0648\u06c1": "278",
            "\u0645\u06c1\u0648": "279",
            "\u0646\u06af\u06be": "280",
            "\u0648 \u0635": "281",
            "\u0648\u0631\u0679": "282",
            "\u0648\u06c1\u0646": "283",
            "\u06a9\u0646 ": "284",
            "\u06af\u06be ": "285",
            "\u06af\u06d2 ": "286",
            "\u06ba \u062c": "287",
            "\u06ba \u0648": "288",
            "\u06ba \u06cc": "289",
            "\u06c1 \u062f": "290",
            "\u06c1\u0646 ": "291",
            "\u06c1\u0648\u06ba": "292",
            "\u06d2 \u062d": "293",
            "\u06d2 \u06af": "294",
            "\u06d2 \u06cc": "295",
            " \u0627\u06af": "296",
            " \u0628\u0639": "297",
            " \u0631\u0648": "298",
            " \u0634\u0627": "299"
        },
        "uzbek": {
            "\u0430\u043d ": "0",
            "\u0433\u0430\u043d": "1",
            "\u043b\u0430\u0440": "2",
            "\u0433\u0430 ": "3",
            "\u043d\u0433 ": "4",
            "\u0438\u043d\u0433": "5",
            "\u043d\u0438\u043d": "6",
            "\u0434\u0430 ": "7",
            "\u043d\u0438 ": "8",
            "\u0438\u0434\u0430": "9",
            "\u0430\u0440\u0438": "10",
            "\u0438\u0433\u0430": "11",
            "\u0438\u043d\u0438": "12",
            "\u0430\u0440 ": "13",
            "\u0434\u0438 ": "14",
            " \u0431\u0438": "15",
            "\u0430\u043d\u0438": "16",
            " \u0431\u043e": "17",
            "\u0434\u0430\u043d": "18",
            "\u043b\u0433\u0430": "19",
            " \u04b3\u0430": "20",
            " \u0432\u0430": "21",
            " \u0441\u0430": "22",
            "\u0433\u0438 ": "23",
            "\u0438\u043b\u0430": "24",
            "\u043d \u0431": "25",
            "\u0438 \u0431": "26",
            " \u043a\u045e": "27",
            " \u0442\u0430": "28",
            "\u0438\u0440 ": "29",
            " \u043c\u0430": "30",
            "\u0430\u0433\u0430": "31",
            "\u0430\u043b\u0430": "32",
            "\u0431\u0438\u0440": "33",
            "\u0440\u0438 ": "34",
            "\u0442\u0433\u0430": "35",
            "\u043b\u0430\u043d": "36",
            "\u043b\u0438\u043a": "37",
            "\u0430 \u043a": "38",
            "\u0430\u0433\u0438": "39",
            "\u0430\u0442\u0438": "40",
            "\u0442\u0430 ": "41",
            "\u0430\u0434\u0438": "42",
            "\u0434\u0430\u0433": "43",
            "\u0440\u0433\u0430": "44",
            " \u0439\u0438": "45",
            " \u043c\u0438": "46",
            " \u043f\u0430": "47",
            " \u0431\u045e": "48",
            " \u049b\u0430": "49",
            " \u049b\u0438": "50",
            "\u0430 \u0431": "51",
            "\u0438\u043b\u043b": "52",
            "\u043b\u0438 ": "53",
            "\u0430\u0441\u0438": "54",
            "\u0438 \u0442": "55",
            "\u0438\u043a ": "56",
            "\u0438\u043b\u0438": "57",
            "\u043b\u043b\u0430": "58",
            "\u0430\u0440\u0434": "59",
            "\u0432\u0447\u0438": "60",
            "\u0432\u0430 ": "61",
            "\u0438\u0431 ": "62",
            "\u0438\u0440\u0438": "63",
            "\u043b\u0438\u0433": "64",
            "\u043d\u0433\u0430": "65",
            "\u0440\u0430\u043d": "66",
            " \u043a\u0435": "67",
            " \u045e\u0437": "68",
            "\u0430 \u0441": "69",
            "\u0430\u0445\u0442": "70",
            "\u0431\u045e\u043b": "71",
            "\u0438\u0433\u0438": "72",
            "\u043a\u045e\u0440": "73",
            "\u0440\u0434\u0430": "74",
            "\u0440\u043d\u0438": "75",
            "\u0441\u0430 ": "76",
            " \u0431\u0435": "77",
            " \u0431\u0443": "78",
            " \u0434\u0430": "79",
            " \u0436\u0430": "80",
            "\u0430 \u0442": "81",
            "\u0430\u0437\u0438": "82",
            "\u0435\u0440\u0438": "83",
            "\u0438 \u0430": "84",
            "\u0438\u043b\u0433": "85",
            "\u0439\u0438\u043b": "86",
            "\u043c\u0430\u043d": "87",
            "\u043f\u0430\u0445": "88",
            "\u0440\u0438\u0434": "89",
            "\u0442\u0438 ": "90",
            "\u0443\u0432\u0447": "91",
            "\u0445\u0442\u0430": "92",
            " \u043d\u0435": "93",
            " \u0441\u043e": "94",
            " \u0443\u0447": "95",
            "\u0430\u0439\u0442": "96",
            "\u043b\u043b\u0438": "97",
            "\u0442\u043b\u0430": "98",
            " \u0430\u0439": "99",
            " \u0444\u0440": "100",
            " \u044d\u0442": "101",
            " \u04b3\u043e": "102",
            "\u0430 \u049b": "103",
            "\u0430\u043b\u0438": "104",
            "\u0430\u0440\u043e": "105",
            "\u0431\u0435\u0440": "106",
            "\u0431\u0438\u043b": "107",
            "\u0431\u043e\u0440": "108",
            "\u0438\u043c\u0438": "109",
            "\u0438\u0441\u0442": "110",
            "\u043e\u043d ": "111",
            "\u0440\u0438\u043d": "112",
            "\u0442\u0435\u0440": "113",
            "\u0442\u0438\u043b": "114",
            "\u0443\u043d ": "115",
            "\u0444\u0440\u0430": "116",
            "\u049b\u0438\u043b": "117",
            " \u0431\u0430": "118",
            " \u043e\u043b": "119",
            "\u0430\u043d\u0441": "120",
            "\u0435\u0444\u0442": "121",
            "\u0437\u0438\u0440": "122",
            "\u043a\u0430\u0442": "123",
            "\u043c\u0438\u043b": "124",
            "\u043d\u0435\u0444": "125",
            "\u0441\u0430\u0433": "126",
            "\u0447\u0438 ": "127",
            "\u045e\u0440\u0430": "128",
            " \u043d\u0430": "129",
            " \u0442\u0435": "130",
            " \u044d\u043d": "131",
            "\u0430 \u044d": "132",
            "\u0430\u043c ": "133",
            "\u0430\u0440\u043d": "134",
            "\u0430\u0442 ": "135",
            "\u0438\u0448 ": "136",
            "\u043c\u0430 ": "137",
            "\u043d\u043b\u0430": "138",
            "\u0440\u043b\u0438": "139",
            "\u0447\u0438\u043b": "140",
            "\u0448\u0433\u0430": "141",
            " \u0438\u0448": "142",
            " \u043c\u0443": "143",
            " \u045e\u049b": "144",
            "\u0430\u0440\u0430": "145",
            "\u0432\u0430\u0437": "146",
            "\u0438 \u0443": "147",
            "\u0438\u049b ": "148",
            "\u043c\u043e\u049b": "149",
            "\u0440\u0438\u043c": "150",
            "\u0443\u0447\u0443": "151",
            "\u0447\u0443\u043d": "152",
            "\u0448\u0438 ": "153",
            "\u044d\u043d\u0433": "154",
            "\u049b\u0443\u0432": "155",
            "\u04b3\u0430\u043c": "156",
            " \u0441\u045e": "157",
            " \u0448\u0438": "158",
            "\u0431\u0430\u0440": "159",
            "\u0431\u0435\u043a": "160",
            "\u0434\u0430\u043c": "161",
            "\u0438 \u04b3": "162",
            "\u0438\u0448\u0438": "163",
            "\u043b\u0430\u0434": "164",
            "\u043e\u043b\u0438": "165",
            "\u043e\u043b\u043b": "166",
            "\u043e\u0440\u0438": "167",
            "\u043e\u049b\u0434": "168",
            "\u0440 \u0431": "169",
            "\u0440\u0430 ": "170",
            "\u0440\u043b\u0430": "171",
            "\u0443\u043d\u0438": "172",
            "\u0444\u0442 ": "173",
            "\u045e\u043b\u0433": "174",
            "\u045e\u049b\u0443": "175",
            " \u0434\u0435": "176",
            " \u043a\u0430": "177",
            " \u049b\u045e": "178",
            "\u0430 \u045e": "179",
            "\u0430\u0431\u0430": "180",
            "\u0430\u043c\u043c": "181",
            "\u0430\u0442\u043b": "182",
            "\u0431 \u043a": "183",
            "\u0431\u043e\u0448": "184",
            "\u0437\u0431\u0435": "185",
            "\u0438 \u0432": "186",
            "\u0438\u043c ": "187",
            "\u0438\u043d ": "188",
            "\u0438\u0448\u043b": "189",
            "\u043b\u0430\u0431": "190",
            "\u043b\u0435\u0439": "191",
            "\u043c\u0438\u043d": "192",
            "\u043d \u0434": "193",
            "\u043d\u0434\u0430": "194",
            "\u043e\u049b ": "195",
            "\u0440 \u043c": "196",
            "\u0440\u0438\u043b": "197",
            "\u0441\u0438\u0434": "198",
            "\u0442\u0430\u043b": "199",
            "\u0442\u0430\u043d": "200",
            "\u0442\u0438\u0434": "201",
            "\u0442\u043e\u043d": "202",
            "\u045e\u0437\u0431": "203",
            " \u0430\u043c": "204",
            " \u043a\u0438": "205",
            "\u0430 \u04b3": "206",
            "\u0430\u043d\u0433": "207",
            "\u0430\u043d\u0434": "208",
            "\u0430\u0440\u0442": "209",
            "\u0430\u0451\u0442": "210",
            "\u0434\u0438\u0440": "211",
            "\u0435\u043d\u0442": "212",
            "\u0438 \u0434": "213",
            "\u0438 \u043c": "214",
            "\u0438 \u043e": "215",
            "\u0438 \u044d": "216",
            "\u0438\u0440\u043e": "217",
            "\u0439\u0442\u0438": "218",
            "\u043d\u0441\u0443": "219",
            "\u043e\u0434\u0438": "220",
            "\u043e\u0440 ": "221",
            "\u0441\u0438 ": "222",
            "\u0442\u0438\u0448": "223",
            "\u0442\u043e\u0431": "224",
            "\u044d\u0442\u0438": "225",
            "\u049b\u0430\u0440": "226",
            "\u049b\u0434\u0430": "227",
            " \u0431\u043b": "228",
            " \u0433\u0435": "229",
            " \u0434\u043e": "230",
            " \u0434\u0443": "231",
            " \u043d\u043e": "232",
            " \u043f\u0440": "233",
            " \u0440\u0430": "234",
            " \u0444\u043e": "235",
            " \u049b\u043e": "236",
            "\u0430 \u043c": "237",
            "\u0430 \u043e": "238",
            "\u0430\u0439\u0434": "239",
            "\u0430\u043b\u043e": "240",
            "\u0430\u043c\u0430": "241",
            "\u0431\u043b\u0435": "242",
            "\u0433 \u043d": "243",
            "\u0434\u043e\u043b": "244",
            "\u0435\u0439\u0440": "245",
            "\u0435\u043a ": "246",
            "\u0435\u0440\u0433": "247",
            "\u0436\u0430\u0440": "248",
            "\u0437\u0438\u0434": "249",
            "\u0438 \u043a": "250",
            "\u0438 \u0444": "251",
            "\u0438\u0439 ": "252",
            "\u0438\u043b\u043e": "253",
            "\u043b\u0434\u0438": "254",
            "\u043b\u0438\u0431": "255",
            "\u043b\u0438\u043d": "256",
            "\u043c\u0438 ": "257",
            "\u043c\u043c\u0430": "258",
            "\u043d \u0432": "259",
            "\u043d \u043a": "260",
            "\u043d \u045e": "261",
            "\u043d \u04b3": "262",
            "\u043e\u0437\u0438": "263",
            "\u043e\u0440\u0430": "264",
            "\u043e\u0441\u0438": "265",
            "\u0440\u0430\u0441": "266",
            "\u0440\u0438\u0448": "267",
            "\u0440\u043a\u0430": "268",
            "\u0440\u043e\u049b": "269",
            "\u0441\u0442\u043e": "270",
            "\u0442\u0438\u043d": "271",
            "\u0445\u0430\u0442": "272",
            "\u0448\u0438\u0440": "273",
            " \u0430\u0432": "274",
            " \u0440\u045e": "275",
            " \u0442\u0443": "276",
            " \u045e\u0442": "277",
            "\u0430 \u043f": "278",
            "\u0430\u0432\u0442": "279",
            "\u0430\u0434\u0430": "280",
            "\u0430\u0437\u0430": "281",
            "\u0430\u043d\u043b": "282",
            "\u0431 \u0431": "283",
            "\u0431\u043e\u0439": "284",
            "\u0431\u0443 ": "285",
            "\u0432\u0442\u043e": "286",
            "\u0433 \u044d": "287",
            "\u0433\u0438\u043d": "288",
            "\u0434\u0430\u0440": "289",
            "\u0434\u0435\u043d": "290",
            "\u0434\u0443\u043d": "291",
            "\u0438\u0434\u0435": "292",
            "\u0438\u043e\u043d": "293",
            "\u0438\u0440\u043b": "294",
            "\u0438\u0448\u0433": "295",
            "\u0439\u0445\u0430": "296",
            "\u043a\u0435\u043b": "297",
            "\u043a\u045e\u043f": "298",
            "\u043b\u0438\u043e": "299"
        },
        "vietnamese": {
            "ng ": "0",
            " th": "1",
            " ch": "2",
            "g t": "3",
            " nh": "4",
            "\u00f4ng": "5",
            " kh": "6",
            " tr": "7",
            "nh ": "8",
            " c\u00f4": "9",
            "c\u00f4n": "10",
            " ty": "11",
            "ty ": "12",
            "i t": "13",
            "n t": "14",
            " ng": "15",
            "\u1ea1i ": "16",
            " ti": "17",
            "ch ": "18",
            "y l": "19",
            "\u1ec1n ": "20",
            " \u0111\u01b0": "21",
            "hi ": "22",
            " g\u1edf": "23",
            "g\u1edfi": "24",
            "i\u1ec1n": "25",
            "ti\u1ec1": "26",
            "\u1edfi ": "27",
            " gi": "28",
            " le": "29",
            " vi": "30",
            "cho": "31",
            "ho ": "32",
            "kh\u00e1": "33",
            " v\u00e0": "34",
            "h\u00e1c": "35",
            " ph": "36",
            "am ": "37",
            "h\u00e0n": "38",
            "\u00e1ch": "39",
            "\u00f4i ": "40",
            "i n": "41",
            "\u01b0\u1ee3c": "42",
            "\u1ee3c ": "43",
            " t\u00f4": "44",
            "ch\u00fa": "45",
            "i\u1ec7t": "46",
            "t\u00f4i": "47",
            "\u00ean ": "48",
            "\u00fang": "49",
            "\u1ec7t ": "50",
            " c\u00f3": "51",
            "c t": "52",
            "c\u00f3 ": "53",
            "h\u00fan": "54",
            "vi\u1ec7": "55",
            "\u0111\u01b0\u1ee3": "56",
            " na": "57",
            "g c": "58",
            "i c": "59",
            "n c": "60",
            "n n": "61",
            "t n": "62",
            "v\u00e0 ": "63",
            "n l": "64",
            "n \u0111": "65",
            "\u00e0ng": "66",
            "\u00e1c ": "67",
            "\u1ea5t ": "68",
            "h l": "69",
            "nam": "70",
            "\u00e2n ": "71",
            "\u0103m ": "72",
            " h\u00e0": "73",
            " l\u00e0": "74",
            " n\u0103": "75",
            " qu": "76",
            " t\u1ea1": "77",
            "g m": "78",
            "n\u0103m": "79",
            "t\u1ea1i": "80",
            "\u1edbi ": "81",
            " l\u1eb9": "82",
            "ay ": "83",
            "e g": "84",
            "h h": "85",
            "i v": "86",
            "i \u0111": "87",
            "le ": "88",
            "l\u1eb9 ": "89",
            "\u1ec1u ": "90",
            "\u1eddi ": "91",
            "h\u00e2n": "92",
            "nhi": "93",
            "t t": "94",
            " c\u1ee7": "95",
            " m\u1ed9": "96",
            " v\u1ec1": "97",
            " \u0111i": "98",
            "an ": "99",
            "c\u1ee7a": "100",
            "l\u00e0 ": "101",
            "m\u1ed9t": "102",
            "v\u1ec1 ": "103",
            "\u00e0nh": "104",
            "\u1ebft ": "105",
            "\u1ed9t ": "106",
            "\u1ee7a ": "107",
            " bi": "108",
            " c\u00e1": "109",
            "a c": "110",
            "anh": "111",
            "c\u00e1c": "112",
            "h c": "113",
            "i\u1ec1u": "114",
            "m t": "115",
            "\u1ec7n ": "116",
            " ho": "117",
            "'s ": "118",
            "ave": "119",
            "e's": "120",
            "el ": "121",
            "g n": "122",
            "le'": "123",
            "n v": "124",
            "o c": "125",
            "rav": "126",
            "s t": "127",
            "thi": "128",
            "tra": "129",
            "vel": "130",
            "\u1eadn ": "131",
            "\u1ebfn ": "132",
            " ba": "133",
            " cu": "134",
            " sa": "135",
            " \u0111\u00f3": "136",
            " \u0111\u1ebf": "137",
            "c c": "138",
            "chu": "139",
            "hi\u1ec1": "140",
            "huy": "141",
            "khi": "142",
            "nh\u00e2": "143",
            "nh\u01b0": "144",
            "ong": "145",
            "ron": "146",
            "thu": "147",
            "th\u01b0": "148",
            "tro": "149",
            "y c": "150",
            "\u00e0y ": "151",
            "\u0111\u1ebfn": "152",
            "\u01b0\u1eddi": "153",
            "\u01b0\u1eddn": "154",
            "\u1ec1 v": "155",
            "\u1eddng": "156",
            " v\u1edb": "157",
            "cu\u1ed9": "158",
            "g \u0111": "159",
            "i\u1ebft": "160",
            "i\u1ec7n": "161",
            "ng\u00e0": "162",
            "o t": "163",
            "u c": "164",
            "u\u1ed9c": "165",
            "v\u1edbi": "166",
            "\u00e0 c": "167",
            "\u00e0i ": "168",
            "\u01a1ng": "169",
            "\u01b0\u01a1n": "170",
            "\u1ea3i ": "171",
            "\u1ed9c ": "172",
            "\u1ee9c ": "173",
            " an": "174",
            " l\u1ead": "175",
            " ra": "176",
            " s\u1ebd": "177",
            " s\u1ed1": "178",
            " t\u1ed5": "179",
            "a k": "180",
            "bi\u1ebf": "181",
            "c n": "182",
            "c \u0111": "183",
            "ch\u1ee9": "184",
            "g v": "185",
            "gia": "186",
            "g\u00e0y": "187",
            "h\u00e1n": "188",
            "h\u00f4n": "189",
            "h\u01b0 ": "190",
            "h\u1ee9c": "191",
            "i g": "192",
            "i h": "193",
            "i k": "194",
            "i p": "195",
            "i\u00ean": "196",
            "kh\u00f4": "197",
            "l\u1eadp": "198",
            "n k": "199",
            "ra ": "200",
            "r\u00ean": "201",
            "s\u1ebd ": "202",
            "t c": "203",
            "th\u00e0": "204",
            "tr\u00ea": "205",
            "t\u1ed5 ": "206",
            "u n": "207",
            "y t": "208",
            "\u00ecnh": "209",
            "\u1ea5y ": "210",
            "\u1eadp ": "211",
            "\u1ed5 c": "212",
            " m\u00e1": "213",
            " \u0111\u1ec3": "214",
            "ai ": "215",
            "c s": "216",
            "g\u01b0\u1edd": "217",
            "h v": "218",
            "hoa": "219",
            "ho\u1ea1": "220",
            "inh": "221",
            "m n": "222",
            "m\u00e1y": "223",
            "n g": "224",
            "ng\u01b0": "225",
            "nh\u1ead": "226",
            "o n": "227",
            "oa ": "228",
            "o\u00e0n": "229",
            "p c": "230",
            "s\u1ed1 ": "231",
            "t \u0111": "232",
            "y v": "233",
            "\u00e0o ": "234",
            "\u00e1y ": "235",
            "\u0103n ": "236",
            "\u0111\u00f3 ": "237",
            "\u0111\u1ec3 ": "238",
            "\u01b0\u1edbc": "239",
            "\u1ea7n ": "240",
            "\u1ec3n ": "241",
            "\u1edbc ": "242",
            " b\u00e1": "243",
            " c\u01a1": "244",
            " c\u1ea3": "245",
            " c\u1ea7": "246",
            " h\u1ecd": "247",
            " k\u1ef3": "248",
            " li": "249",
            " m\u1ea1": "250",
            " s\u1edf": "251",
            " t\u1eb7": "252",
            " v\u00e9": "253",
            " v\u1ee5": "254",
            " \u0111\u1ea1": "255",
            "a \u0111": "256",
            "bay": "257",
            "c\u01a1 ": "258",
            "g s": "259",
            "han": "260",
            "h\u01b0\u01a1": "261",
            "i s": "262",
            "k\u1ef3 ": "263",
            "m c": "264",
            "n m": "265",
            "n p": "266",
            "o b": "267",
            "o\u1ea1i": "268",
            "qua": "269",
            "s\u1edf ": "270",
            "tha": "271",
            "th\u00e1": "272",
            "t\u1eb7n": "273",
            "v\u00e0o": "274",
            "v\u00e9 ": "275",
            "v\u1ee5 ": "276",
            "y b": "277",
            "\u00e0n ": "278",
            "\u00e1ng": "279",
            "\u01a1 s": "280",
            "\u1ea7u ": "281",
            "\u1eadt ": "282",
            "\u1eb7ng": "283",
            "\u1ecdc ": "284",
            "\u1edf t": "285",
            "\u1eefng": "286",
            " du": "287",
            " lu": "288",
            " ta": "289",
            " to": "290",
            " t\u1eeb": "291",
            " \u1edf ": "292",
            "a v": "293",
            "ao ": "294",
            "c v": "295",
            "c\u1ea3 ": "296",
            "du ": "297",
            "g l": "298",
            "gi\u1ea3": "299"
        },
        "welsh": {
            "yn ": "0",
            "dd ": "1",
            " yn": "2",
            " y ": "3",
            "ydd": "4",
            "eth": "5",
            "th ": "6",
            " i ": "7",
            "aet": "8",
            "d y": "9",
            "ch ": "10",
            "od ": "11",
            "ol ": "12",
            "edd": "13",
            " ga": "14",
            " gw": "15",
            "'r ": "16",
            "au ": "17",
            "ddi": "18",
            "ad ": "19",
            " cy": "20",
            " gy": "21",
            " ei": "22",
            " o ": "23",
            "iad": "24",
            "yr ": "25",
            "an ": "26",
            "bod": "27",
            "wed": "28",
            " bo": "29",
            " dd": "30",
            "el ": "31",
            "n y": "32",
            " am": "33",
            "di ": "34",
            "edi": "35",
            "on ": "36",
            " we": "37",
            " ym": "38",
            " ar": "39",
            " rh": "40",
            "odd": "41",
            " ca": "42",
            " ma": "43",
            "ael": "44",
            "oed": "45",
            "dae": "46",
            "n a": "47",
            "dda": "48",
            "er ": "49",
            "h y": "50",
            "all": "51",
            "ei ": "52",
            " ll": "53",
            "am ": "54",
            "eu ": "55",
            "fod": "56",
            "fyd": "57",
            "l y": "58",
            "n g": "59",
            "wyn": "60",
            "d a": "61",
            "i g": "62",
            "mae": "63",
            "neu": "64",
            "os ": "65",
            " ne": "66",
            "d i": "67",
            "dod": "68",
            "dol": "69",
            "n c": "70",
            "r h": "71",
            "wyd": "72",
            "wyr": "73",
            "ai ": "74",
            "ar ": "75",
            "in ": "76",
            "rth": "77",
            " fy": "78",
            " he": "79",
            " me": "80",
            " yr": "81",
            "'n ": "82",
            "dia": "83",
            "est": "84",
            "h c": "85",
            "hai": "86",
            "i d": "87",
            "id ": "88",
            "r y": "89",
            "y b": "90",
            " dy": "91",
            " ha": "92",
            "ada": "93",
            "i b": "94",
            "n i": "95",
            "ote": "96",
            "rot": "97",
            "tes": "98",
            "y g": "99",
            "yd ": "100",
            " ad": "101",
            " mr": "102",
            " un": "103",
            "cyn": "104",
            "dau": "105",
            "ddy": "106",
            "edo": "107",
            "i c": "108",
            "i w": "109",
            "ith": "110",
            "lae": "111",
            "lla": "112",
            "nd ": "113",
            "oda": "114",
            "ryd": "115",
            "tho": "116",
            " a ": "117",
            " dr": "118",
            "aid": "119",
            "ain": "120",
            "ddo": "121",
            "dyd": "122",
            "fyn": "123",
            "gyn": "124",
            "hol": "125",
            "io ": "126",
            "o a": "127",
            "wch": "128",
            "wyb": "129",
            "ybo": "130",
            "ych": "131",
            " br": "132",
            " by": "133",
            " di": "134",
            " fe": "135",
            " na": "136",
            " o'": "137",
            " pe": "138",
            "art": "139",
            "byd": "140",
            "dro": "141",
            "gal": "142",
            "l e": "143",
            "lai": "144",
            "mr ": "145",
            "n n": "146",
            "r a": "147",
            "rhy": "148",
            "wn ": "149",
            "ynn": "150",
            " on": "151",
            " r ": "152",
            "cae": "153",
            "d g": "154",
            "d o": "155",
            "d w": "156",
            "gan": "157",
            "gwy": "158",
            "n d": "159",
            "n f": "160",
            "n o": "161",
            "ned": "162",
            "ni ": "163",
            "o'r": "164",
            "r d": "165",
            "ud ": "166",
            "wei": "167",
            "wrt": "168",
            " an": "169",
            " cw": "170",
            " da": "171",
            " ni": "172",
            " pa": "173",
            " pr": "174",
            " wy": "175",
            "d e": "176",
            "dai": "177",
            "dim": "178",
            "eud": "179",
            "gwa": "180",
            "idd": "181",
            "im ": "182",
            "iri": "183",
            "lwy": "184",
            "n b": "185",
            "nol": "186",
            "r o": "187",
            "rwy": "188",
            " ch": "189",
            " er": "190",
            " fo": "191",
            " ge": "192",
            " hy": "193",
            " i'": "194",
            " ro": "195",
            " sa": "196",
            " tr": "197",
            "bob": "198",
            "cwy": "199",
            "cyf": "200",
            "dio": "201",
            "dyn": "202",
            "eit": "203",
            "hel": "204",
            "hyn": "205",
            "ich": "206",
            "ll ": "207",
            "mdd": "208",
            "n r": "209",
            "ond": "210",
            "pro": "211",
            "r c": "212",
            "r g": "213",
            "red": "214",
            "rha": "215",
            "u a": "216",
            "u c": "217",
            "u y": "218",
            "y c": "219",
            "ymd": "220",
            "ymr": "221",
            "yw ": "222",
            " ac": "223",
            " be": "224",
            " bl": "225",
            " co": "226",
            " os": "227",
            "adw": "228",
            "ae ": "229",
            "af ": "230",
            "d p": "231",
            "efn": "232",
            "eic": "233",
            "en ": "234",
            "eol": "235",
            "es ": "236",
            "fer": "237",
            "gel": "238",
            "h g": "239",
            "hod": "240",
            "ied": "241",
            "ir ": "242",
            "laf": "243",
            "n h": "244",
            "na ": "245",
            "nyd": "246",
            "odo": "247",
            "ofy": "248",
            "rdd": "249",
            "rie": "250",
            "ros": "251",
            "stw": "252",
            "twy": "253",
            "yda": "254",
            "yng": "255",
            " at": "256",
            " de": "257",
            " go": "258",
            " id": "259",
            " oe": "260",
            " \u00e2 ": "261",
            "'ch": "262",
            "ac ": "263",
            "ach": "264",
            "ae'": "265",
            "al ": "266",
            "bl ": "267",
            "d c": "268",
            "d l": "269",
            "dan": "270",
            "dde": "271",
            "ddw": "272",
            "dir": "273",
            "dla": "274",
            "ed ": "275",
            "ela": "276",
            "ell": "277",
            "ene": "278",
            "ewn": "279",
            "gyd": "280",
            "hau": "281",
            "hyw": "282",
            "i a": "283",
            "i f": "284",
            "iol": "285",
            "ion": "286",
            "l a": "287",
            "l i": "288",
            "lia": "289",
            "med": "290",
            "mon": "291",
            "n s": "292",
            "no ": "293",
            "obl": "294",
            "ola": "295",
            "ref": "296",
            "rn ": "297",
            "thi": "298",
            "un ": "299"
        }
    },
    "trigram-unicodemap": {
        "Basic Latin": {
            "albanian": 661,
            "azeri": 653,
            "bengali": 1,
            "cebuano": 750,
            "croatian": 733,
            "czech": 652,
            "danish": 734,
            "dutch": 741,
            "english": 723,
            "estonian": 739,
            "finnish": 743,
            "french": 733,
            "german": 750,
            "hausa": 752,
            "hawaiian": 751,
            "hungarian": 693,
            "icelandic": 662,
            "indonesian": 776,
            "italian": 741,
            "latin": 764,
            "latvian": 693,
            "lithuanian": 738,
            "mongolian": 19,
            "norwegian": 742,
            "pidgin": 702,
            "polish": 701,
            "portuguese": 726,
            "romanian": 714,
            "slovak": 677,
            "slovene": 740,
            "somali": 755,
            "spanish": 749,
            "swahili": 770,
            "swedish": 717,
            "tagalog": 767,
            "turkish": 673,
            "vietnamese": 503,
            "welsh": 728
        },
        "Latin-1 Supplement": {
            "albanian": 68,
            "azeri": 10,
            "czech": 51,
            "danish": 13,
            "estonian": 19,
            "finnish": 39,
            "french": 21,
            "german": 8,
            "hungarian": 72,
            "icelandic": 80,
            "italian": 3,
            "norwegian": 5,
            "polish": 6,
            "portuguese": 18,
            "romanian": 9,
            "slovak": 37,
            "spanish": 6,
            "swedish": 26,
            "turkish": 25,
            "vietnamese": 56,
            "welsh": 1
        },
        "[Malformatted]": {
            "albanian": 68,
            "arabic": 724,
            "azeri": 109,
            "bengali": 1472,
            "bulgarian": 750,
            "croatian": 10,
            "czech": 78,
            "danish": 13,
            "estonian": 19,
            "farsi": 706,
            "finnish": 39,
            "french": 21,
            "german": 8,
            "hausa": 8,
            "hindi": 1386,
            "hungarian": 74,
            "icelandic": 80,
            "italian": 3,
            "kazakh": 767,
            "kyrgyz": 767,
            "latvian": 56,
            "lithuanian": 30,
            "macedonian": 755,
            "mongolian": 743,
            "nepali": 1514,
            "norwegian": 5,
            "pashto": 677,
            "polish": 45,
            "portuguese": 18,
            "romanian": 31,
            "russian": 759,
            "serbian": 757,
            "slovak": 45,
            "slovene": 10,
            "spanish": 6,
            "swedish": 26,
            "turkish": 87,
            "ukrainian": 748,
            "urdu": 682,
            "uzbek": 773,
            "vietnamese": 289,
            "welsh": 1
        },
        "Arabic": {
            "arabic": 724,
            "farsi": 706,
            "pashto": 677,
            "urdu": 682
        },
        "Latin Extended-B": {
            "azeri": 73,
            "hausa": 8,
            "vietnamese": 19
        },
        "Latin Extended-A": {
            "azeri": 25,
            "croatian": 10,
            "czech": 27,
            "hungarian": 2,
            "latvian": 56,
            "lithuanian": 30,
            "polish": 39,
            "romanian": 22,
            "slovak": 8,
            "slovene": 10,
            "turkish": 62,
            "vietnamese": 20
        },
        "Combining Diacritical Marks": {
            "azeri": 1
        },
        "Bengali": {
            "bengali": 714
        },
        "Gujarati": {
            "bengali": 16
        },
        "Gurmukhi": {
            "bengali": 6
        },
        "Cyrillic": {
            "bulgarian": 750,
            "kazakh": 767,
            "kyrgyz": 767,
            "macedonian": 755,
            "mongolian": 743,
            "russian": 759,
            "serbian": 757,
            "ukrainian": 748,
            "uzbek": 773
        },
        "Devanagari": {
            "hindi": 693,
            "nepali": 757
        },
        "Latin Extended Additional": {
            "vietnamese": 97
        }
    }
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */


/**
 * @class Roo.data.SortTypes
 * @static
 * Defines the default sorting (casting?) comparison functions used when sorting data.
 */
Roo.data.SortTypes = {
    /**
     * Default sort that does nothing
     * @param {Mixed} s The value being converted
     * @return {Mixed} The comparison value
     */
    none : function(s){
        return s;
    },
    
    /**
     * The regular expression used to strip tags
     * @type {RegExp}
     * @property
     */
    stripTagsRE : /<\/?[^>]+>/gi,
    
    /**
     * Strips all HTML tags to sort on text only
     * @param {Mixed} s The value being converted
     * @return {String} The comparison value
     */
    asText : function(s){
        return String(s).replace(this.stripTagsRE, "");
    },
    
    /**
     * Strips all HTML tags to sort on text only - Case insensitive
     * @param {Mixed} s The value being converted
     * @return {String} The comparison value
     */
    asUCText : function(s){
        return String(s).toUpperCase().replace(this.stripTagsRE, "");
    },
    
    /**
     * Case insensitive string
     * @param {Mixed} s The value being converted
     * @return {String} The comparison value
     */
    asUCString : function(s) {
    	return String(s).toUpperCase();
    },
    
    /**
     * Date sorting
     * @param {Mixed} s The value being converted
     * @return {Number} The comparison value
     */
    asDate : function(s) {
        if(!s){
            return 0;
        }
        if(s instanceof Date){
            return s.getTime();
        }
    	return Date.parse(String(s));
    },
    
    /**
     * Float sorting
     * @param {Mixed} s The value being converted
     * @return {Float} The comparison value
     */
    asFloat : function(s) {
    	var val = parseFloat(String(s).replace(/,/g, ""));
        if(isNaN(val)) {
            val = 0;
        }
    	return val;
    },
    
    /**
     * Integer sorting
     * @param {Mixed} s The value being converted
     * @return {Number} The comparison value
     */
    asInt : function(s) {
        var val = parseInt(String(s).replace(/,/g, ""));
        if(isNaN(val)) {
            val = 0;
        }
    	return val;
    }
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
* @class Roo.data.Record
 * Instances of this class encapsulate both record <em>definition</em> information, and record
 * <em>value</em> information for use in {@link Roo.data.Store} objects, or any code which needs
 * to access Records cached in an {@link Roo.data.Store} object.<br>
 * <p>
 * Constructors for this class are generated by passing an Array of field definition objects to {@link #create}.
 * Instances are usually only created by {@link Roo.data.Reader} implementations when processing unformatted data
 * objects.<br>
 * <p>
 * Record objects generated by this constructor inherit all the methods of Roo.data.Record listed below.
 * @constructor
 * This constructor should not be used to create Record objects. Instead, use the constructor generated by
 * {@link #create}. The parameters are the same.
 * @param {Array} data An associative Array of data values keyed by the field name.
 * @param {Object} id (Optional) The id of the record. This id should be unique, and is used by the
 * {@link Roo.data.Store} object which owns the Record to index its collection of Records. If
 * not specified an integer id is generated.
 */
Roo.data.Record = function(data, id){
    this.id = (id || id === 0) ? id : ++Roo.data.Record.AUTO_ID;
    this.data = data;
};

/**
 * Generate a constructor for a specific record layout.
 * @param {Array} o An Array of field definition objects which specify field names, and optionally,
 * data types, and a mapping for an {@link Roo.data.Reader} to extract the field's value from a data object.
 * Each field definition object may contain the following properties: <ul>
 * <li><b>name</b> : String<p style="margin-left:1em">The name by which the field is referenced within the Record. This is referenced by,
 * for example the <em>dataIndex</em> property in column definition objects passed to {@link Roo.grid.ColumnModel}</p></li>
 * <li><b>mapping</b> : String<p style="margin-left:1em">(Optional) A path specification for use by the {@link Roo.data.Reader} implementation
 * that is creating the Record to access the data value from the data object. If an {@link Roo.data.JsonReader}
 * is being used, then this is a string containing the javascript expression to reference the data relative to 
 * the record item's root. If an {@link Roo.data.XmlReader} is being used, this is an {@link Roo.DomQuery} path
 * to the data item relative to the record element. If the mapping expression is the same as the field name,
 * this may be omitted.</p></li>
 * <li><b>type</b> : String<p style="margin-left:1em">(Optional) The data type for conversion to displayable value. Possible values are
 * <ul><li>auto (Default, implies no conversion)</li>
 * <li>string</li>
 * <li>int</li>
 * <li>float</li>
 * <li>boolean</li>
 * <li>date</li></ul></p></li>
 * <li><b>sortType</b> : Mixed<p style="margin-left:1em">(Optional) A member of {@link Roo.data.SortTypes}.</p></li>
 * <li><b>sortDir</b> : String<p style="margin-left:1em">(Optional) Initial direction to sort. "ASC" or "DESC"</p></li>
 * <li><b>convert</b> : Function<p style="margin-left:1em">(Optional) A function which converts the value provided
 * by the Reader into an object that will be stored in the Record. It is passed the
 * following parameters:<ul>
 * <li><b>v</b> : Mixed<p style="margin-left:1em">The data value as read by the Reader.</p></li>
 * </ul></p></li>
 * <li><b>dateFormat</b> : String<p style="margin-left:1em">(Optional) A format String for the Date.parseDate function.</p></li>
 * </ul>
 * <br>usage:<br><pre><code>
var TopicRecord = Roo.data.Record.create(
    {name: 'title', mapping: 'topic_title'},
    {name: 'author', mapping: 'username'},
    {name: 'totalPosts', mapping: 'topic_replies', type: 'int'},
    {name: 'lastPost', mapping: 'post_time', type: 'date'},
    {name: 'lastPoster', mapping: 'user2'},
    {name: 'excerpt', mapping: 'post_text'}
);

var myNewRecord = new TopicRecord({
    title: 'Do my job please',
    author: 'noobie',
    totalPosts: 1,
    lastPost: new Date(),
    lastPoster: 'Animal',
    excerpt: 'No way dude!'
});
myStore.add(myNewRecord);
</code></pre>
 * @method create
 * @static
 */
Roo.data.Record.create = function(o){
    var f = function(){
        f.superclass.constructor.apply(this, arguments);
    };
    Roo.extend(f, Roo.data.Record);
    var p = f.prototype;
    p.fields = new Roo.util.MixedCollection(false, function(field){
        return field.name;
    });
    for(var i = 0, len = o.length; i < len; i++){
        p.fields.add(new Roo.data.Field(o[i]));
    }
    f.getField = function(name){
        return p.fields.get(name);  
    };
    return f;
};

Roo.data.Record.AUTO_ID = 1000;
Roo.data.Record.EDIT = 'edit';
Roo.data.Record.REJECT = 'reject';
Roo.data.Record.COMMIT = 'commit';

Roo.data.Record.prototype = {
    /**
     * Readonly flag - true if this record has been modified.
     * @type Boolean
     */
    dirty : false,
    editing : false,
    error: null,
    modified: null,

    // private
    join : function(store){
        this.store = store;
    },

    /**
     * Set the named field to the specified value.
     * @param {String} name The name of the field to set.
     * @param {Object} value The value to set the field to.
     */
    set : function(name, value){
        if(this.data[name] == value){
            return;
        }
        this.dirty = true;
        if(!this.modified){
            this.modified = {};
        }
        if(typeof this.modified[name] == 'undefined'){
            this.modified[name] = this.data[name];
        }
        this.data[name] = value;
        if(!this.editing && this.store){
            this.store.afterEdit(this);
        }       
    },

    /**
     * Get the value of the named field.
     * @param {String} name The name of the field to get the value of.
     * @return {Object} The value of the field.
     */
    get : function(name){
        return this.data[name]; 
    },

    // private
    beginEdit : function(){
        this.editing = true;
        this.modified = {}; 
    },

    // private
    cancelEdit : function(){
        this.editing = false;
        delete this.modified;
    },

    // private
    endEdit : function(){
        this.editing = false;
        if(this.dirty && this.store){
            this.store.afterEdit(this);
        }
    },

    /**
     * Usually called by the {@link Roo.data.Store} which owns the Record.
     * Rejects all changes made to the Record since either creation, or the last commit operation.
     * Modified fields are reverted to their original values.
     * <p>
     * Developers should subscribe to the {@link Roo.data.Store#update} event to have their code notified
     * of reject operations.
     */
    reject : function(){
        var m = this.modified;
        for(var n in m){
            if(typeof m[n] != "function"){
                this.data[n] = m[n];
            }
        }
        this.dirty = false;
        delete this.modified;
        this.editing = false;
        if(this.store){
            this.store.afterReject(this);
        }
    },

    /**
     * Usually called by the {@link Roo.data.Store} which owns the Record.
     * Commits all changes made to the Record since either creation, or the last commit operation.
     * <p>
     * Developers should subscribe to the {@link Roo.data.Store#update} event to have their code notified
     * of commit operations.
     */
    commit : function(){
        this.dirty = false;
        delete this.modified;
        this.editing = false;
        if(this.store){
            this.store.afterCommit(this);
        }
    },

    // private
    hasError : function(){
        return this.error != null;
    },

    // private
    clearError : function(){
        this.error = null;
    },

    /**
     * Creates a copy of this record.
     * @param {String} id (optional) A new record id if you don't want to use this record's id
     * @return {Record}
     */
    copy : function(newId) {
        return new this.constructor(Roo.apply({}, this.data), newId || this.id);
    }
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */



/**
 * @class Roo.data.Store
 * @extends Roo.util.Observable
 * The Store class encapsulates a client side cache of {@link Roo.data.Record} objects which provide input data
 * for widgets such as the Roo.grid.Grid, or the Roo.form.ComboBox.<br>
 * <p>
 * A Store object uses an implementation of {@link Roo.data.DataProxy} to access a data object unless you call loadData() directly and pass in your data. The Store object
 * has no knowledge of the format of the data returned by the Proxy.<br>
 * <p>
 * A Store object uses its configured implementation of {@link Roo.data.DataReader} to create {@link Roo.data.Record}
 * instances from the data object. These records are cached and made available through accessor functions.
 * @constructor
 * Creates a new Store.
 * @param {Object} config A config object containing the objects needed for the Store to access data,
 * and read the data into Records.
 */
Roo.data.Store = function(config){
    this.data = new Roo.util.MixedCollection(false);
    this.data.getKey = function(o){
        return o.id;
    };
    this.baseParams = {};
    // private
    this.paramNames = {
        "start" : "start",
        "limit" : "limit",
        "sort" : "sort",
        "dir" : "dir",
        "multisort" : "_multisort"
    };

    if(config && config.data){
        this.inlineData = config.data;
        delete config.data;
    }

    Roo.apply(this, config);
    
    if(this.reader){ // reader passed
        this.reader = Roo.factory(this.reader, Roo.data);
        this.reader.xmodule = this.xmodule || false;
        if(!this.recordType){
            this.recordType = this.reader.recordType;
        }
        if(this.reader.onMetaChange){
            this.reader.onMetaChange = this.onMetaChange.createDelegate(this);
        }
    }

    if(this.recordType){
        this.fields = this.recordType.prototype.fields;
    }
    this.modified = [];

    this.addEvents({
        /**
         * @event datachanged
         * Fires when the data cache has changed, and a widget which is using this Store
         * as a Record cache should refresh its view.
         * @param {Store} this
         */
        datachanged : true,
        /**
         * @event metachange
         * Fires when this store's reader provides new metadata (fields). This is currently only support for JsonReaders.
         * @param {Store} this
         * @param {Object} meta The JSON metadata
         */
        metachange : true,
        /**
         * @event add
         * Fires when Records have been added to the Store
         * @param {Store} this
         * @param {Roo.data.Record[]} records The array of Records added
         * @param {Number} index The index at which the record(s) were added
         */
        add : true,
        /**
         * @event remove
         * Fires when a Record has been removed from the Store
         * @param {Store} this
         * @param {Roo.data.Record} record The Record that was removed
         * @param {Number} index The index at which the record was removed
         */
        remove : true,
        /**
         * @event update
         * Fires when a Record has been updated
         * @param {Store} this
         * @param {Roo.data.Record} record The Record that was updated
         * @param {String} operation The update operation being performed.  Value may be one of:
         * <pre><code>
 Roo.data.Record.EDIT
 Roo.data.Record.REJECT
 Roo.data.Record.COMMIT
         * </code></pre>
         */
        update : true,
        /**
         * @event clear
         * Fires when the data cache has been cleared.
         * @param {Store} this
         */
        clear : true,
        /**
         * @event beforeload
         * Fires before a request is made for a new data object.  If the beforeload handler returns false
         * the load action will be canceled.
         * @param {Store} this
         * @param {Object} options The loading options that were specified (see {@link #load} for details)
         */
        beforeload : true,
        /**
         * @event beforeloadadd
         * Fires after a new set of Records has been loaded.
         * @param {Store} this
         * @param {Roo.data.Record[]} records The Records that were loaded
         * @param {Object} options The loading options that were specified (see {@link #load} for details)
         */
        beforeloadadd : true,
        /**
         * @event load
         * Fires after a new set of Records has been loaded, before they are added to the store.
         * @param {Store} this
         * @param {Roo.data.Record[]} records The Records that were loaded
         * @param {Object} options The loading options that were specified (see {@link #load} for details)
         * @params {Object} return from reader
         */
        load : true,
        /**
         * @event loadexception
         * Fires if an exception occurs in the Proxy during loading.
         * Called with the signature of the Proxy's "loadexception" event.
         * If you return Json { data: [] , success: false, .... } then this will be thrown with the following args
         * 
         * @param {Proxy} 
         * @param {Object} ret return data from JsonData.reader() - success, totalRecords, records
         * @param {Object} opts - load Options
         * @param {Object} jsonData from your request (normally this contains the Exception)
         */
        loadexception : true
    });
    
    if(this.proxy){
        this.proxy = Roo.factory(this.proxy, Roo.data);
        this.proxy.xmodule = this.xmodule || false;
        this.relayEvents(this.proxy,  ["loadexception"]);
    }
    this.sortToggle = {};
    this.sortOrder = []; // array of order of sorting - updated by grid if multisort is enabled.

    Roo.data.Store.superclass.constructor.call(this);

    if(this.inlineData){
        this.loadData(this.inlineData);
        delete this.inlineData;
    }
};

Roo.extend(Roo.data.Store, Roo.util.Observable, {
     /**
    * @cfg {boolean} isLocal   flag if data is locally available (and can be always looked up
    * without a remote query - used by combo/forms at present.
    */
    
    /**
    * @cfg {Roo.data.DataProxy} proxy [required] The Proxy object which provides access to a data object.
    */
    /**
    * @cfg {Array} data Inline data to be loaded when the store is initialized.
    */
    /**
    * @cfg {Roo.data.DataReader} reader [required]  The Reader object which processes the data object and returns
    * an Array of Roo.data.record objects which are cached keyed by their <em>id</em> property.
    */
    /**
    * @cfg {Object} baseParams An object containing properties which are to be sent as parameters
    * on any HTTP request
    */
    /**
    * @cfg {Object} sortInfo A config object in the format: {field: "fieldName", direction: "ASC|DESC"}
    */
    /**
    * @cfg {Boolean} multiSort enable multi column sorting (sort is based on the order of columns, remote only at present)
    */
    multiSort: false,
    /**
    * @cfg {boolean} remoteSort True if sorting is to be handled by requesting the Proxy to provide a refreshed
    * version of the data object in sorted order, as opposed to sorting the Record cache in place (defaults to false).
    */
    remoteSort : false,

    /**
    * @cfg {boolean} pruneModifiedRecords True to clear all modified record information each time the store is
     * loaded or when a record is removed. (defaults to false).
    */
    pruneModifiedRecords : false,

    // private
    lastOptions : null,

    /**
     * Add Records to the Store and fires the add event.
     * @param {Roo.data.Record[]} records An Array of Roo.data.Record objects to add to the cache.
     */
    add : function(records){
        records = [].concat(records);
        for(var i = 0, len = records.length; i < len; i++){
            records[i].join(this);
        }
        var index = this.data.length;
        this.data.addAll(records);
        this.fireEvent("add", this, records, index);
    },

    /**
     * Remove a Record from the Store and fires the remove event.
     * @param {Ext.data.Record} record The Roo.data.Record object to remove from the cache.
     */
    remove : function(record){
        var index = this.data.indexOf(record);
        this.data.removeAt(index);
 
        if(this.pruneModifiedRecords){
            this.modified.remove(record);
        }
        this.fireEvent("remove", this, record, index);
    },

    /**
     * Remove all Records from the Store and fires the clear event.
     */
    removeAll : function(){
        this.data.clear();
        if(this.pruneModifiedRecords){
            this.modified = [];
        }
        this.fireEvent("clear", this);
    },

    /**
     * Inserts Records to the Store at the given index and fires the add event.
     * @param {Number} index The start index at which to insert the passed Records.
     * @param {Roo.data.Record[]} records An Array of Roo.data.Record objects to add to the cache.
     */
    insert : function(index, records){
        records = [].concat(records);
        for(var i = 0, len = records.length; i < len; i++){
            this.data.insert(index, records[i]);
            records[i].join(this);
        }
        this.fireEvent("add", this, records, index);
    },

    /**
     * Get the index within the cache of the passed Record.
     * @param {Roo.data.Record} record The Roo.data.Record object to to find.
     * @return {Number} The index of the passed Record. Returns -1 if not found.
     */
    indexOf : function(record){
        return this.data.indexOf(record);
    },

    /**
     * Get the index within the cache of the Record with the passed id.
     * @param {String} id The id of the Record to find.
     * @return {Number} The index of the Record. Returns -1 if not found.
     */
    indexOfId : function(id){
        return this.data.indexOfKey(id);
    },

    /**
     * Get the Record with the specified id.
     * @param {String} id The id of the Record to find.
     * @return {Roo.data.Record} The Record with the passed id. Returns undefined if not found.
     */
    getById : function(id){
        return this.data.key(id);
    },

    /**
     * Get the Record at the specified index.
     * @param {Number} index The index of the Record to find.
     * @return {Roo.data.Record} The Record at the passed index. Returns undefined if not found.
     */
    getAt : function(index){
        return this.data.itemAt(index);
    },

    /**
     * Returns a range of Records between specified indices.
     * @param {Number} startIndex (optional) The starting index (defaults to 0)
     * @param {Number} endIndex (optional) The ending index (defaults to the last Record in the Store)
     * @return {Roo.data.Record[]} An array of Records
     */
    getRange : function(start, end){
        return this.data.getRange(start, end);
    },

    // private
    storeOptions : function(o){
        o = Roo.apply({}, o);
        delete o.callback;
        delete o.scope;
        this.lastOptions = o;
    },

    /**
     * Loads the Record cache from the configured Proxy using the configured Reader.
     * <p>
     * If using remote paging, then the first load call must specify the <em>start</em>
     * and <em>limit</em> properties in the options.params property to establish the initial
     * position within the dataset, and the number of Records to cache on each read from the Proxy.
     * <p>
     * <strong>It is important to note that for remote data sources, loading is asynchronous,
     * and this call will return before the new data has been loaded. Perform any post-processing
     * in a callback function, or in a "load" event handler.</strong>
     * <p>
     * @param {Object} options An object containing properties which control loading options:<ul>
     * <li>params {Object} An object containing properties to pass as HTTP parameters to a remote data source.</li>
     * <li>params.data {Object} if you are using a MemoryProxy / JsonReader, use this as the data to load stuff..
     * <pre>
                {
                    data : data,  // array of key=>value data like JsonReader
                    total : data.length,
                    success : true
                    
                }
        </pre>
            }.</li>
     * <li>callback {Function} A function to be called after the Records have been loaded. The callback is
     * passed the following arguments:<ul>
     * <li>r : Roo.data.Record[]</li>
     * <li>options: Options object from the load call</li>
     * <li>success: Boolean success indicator</li></ul></li>
     * <li>scope {Object} Scope with which to call the callback (defaults to the Store object)</li>
     * <li>add {Boolean} indicator to append loaded records rather than replace the current cache.</li>
     * </ul>
     */
    load : function(options){
        options = options || {};
        if(this.fireEvent("beforeload", this, options) !== false){
            this.storeOptions(options);
            var p = Roo.apply(options.params || {}, this.baseParams);
            // if meta was not loaded from remote source.. try requesting it.
            if (!this.reader.metaFromRemote) {
                p._requestMeta = 1;
            }
            if(this.sortInfo && this.remoteSort){
                var pn = this.paramNames;
                p[pn["sort"]] = this.sortInfo.field;
                p[pn["dir"]] = this.sortInfo.direction;
            }
            if (this.multiSort) {
                var pn = this.paramNames;
                p[pn["multisort"]] = Roo.encode( { sort : this.sortToggle, order: this.sortOrder });
            }
            
            this.proxy.load(p, this.reader, this.loadRecords, this, options);
        }
    },

    /**
     * Reloads the Record cache from the configured Proxy using the configured Reader and
     * the options from the last load operation performed.
     * @param {Object} options (optional) An object containing properties which may override the options
     * used in the last load operation. See {@link #load} for details (defaults to null, in which case
     * the most recently used options are reused).
     */
    reload : function(options){
        this.load(Roo.applyIf(options||{}, this.lastOptions));
    },

    // private
    // Called as a callback by the Reader during a load operation.
    loadRecords : function(o, options, success){
         
        if(!o){
            if(success !== false){
                this.fireEvent("load", this, [], options, o);
            }
            if(options.callback){
                options.callback.call(options.scope || this, [], options, false);
            }
            return;
        }
        // if data returned failure - throw an exception.
        if (o.success === false) {
            // show a message if no listener is registered.
            if (!this.hasListener('loadexception') && typeof(o.raw.errorMsg) != 'undefined') {
                    Roo.MessageBox.alert("Error loading",o.raw.errorMsg);
            }
            // loadmask wil be hooked into this..
            this.fireEvent("loadexception", this, o, options, o.raw.errorMsg);
            return;
        }
        var r = o.records, t = o.totalRecords || r.length;
        
        this.fireEvent("beforeloadadd", this, r, options, o);
        
        if(!options || options.add !== true){
            if(this.pruneModifiedRecords){
                this.modified = [];
            }
            for(var i = 0, len = r.length; i < len; i++){
                r[i].join(this);
            }
            if(this.snapshot){
                this.data = this.snapshot;
                delete this.snapshot;
            }
            this.data.clear();
            this.data.addAll(r);
            this.totalLength = t;
            this.applySort();
            this.fireEvent("datachanged", this);
        }else{
            this.totalLength = Math.max(t, this.data.length+r.length);
            this.add(r);
        }
        
        if(this.parent && !Roo.isIOS && !this.useNativeIOS && this.parent.emptyTitle.length) {
                
            var e = new Roo.data.Record({});

            e.set(this.parent.displayField, this.parent.emptyTitle);
            e.set(this.parent.valueField, '');

            this.insert(0, e);
        }
            
        this.fireEvent("load", this, r, options, o);
        if(options.callback){
            options.callback.call(options.scope || this, r, options, true);
        }
    },


    /**
     * Loads data from a passed data block. A Reader which understands the format of the data
     * must have been configured in the constructor.
     * @param {Object} data The data block from which to read the Records.  The format of the data expected
     * is dependent on the type of Reader that is configured and should correspond to that Reader's readRecords parameter.
     * @param {Boolean} append (Optional) True to append the new Records rather than replace the existing cache.
     */
    loadData : function(o, append){
        var r = this.reader.readRecords(o);
        this.loadRecords(r, {add: append}, true);
    },
    
     /**
     * using 'cn' the nested child reader read the child array into it's child stores.
     * @param {Object} rec The record with a 'children array
     */
    loadDataFromChildren : function(rec)
    {
        this.loadData(this.reader.toLoadData(rec));
    },
    

    /**
     * Gets the number of cached records.
     * <p>
     * <em>If using paging, this may not be the total size of the dataset. If the data object
     * used by the Reader contains the dataset size, then the getTotalCount() function returns
     * the data set size</em>
     */
    getCount : function(){
        return this.data.length || 0;
    },

    /**
     * Gets the total number of records in the dataset as returned by the server.
     * <p>
     * <em>If using paging, for this to be accurate, the data object used by the Reader must contain
     * the dataset size</em>
     */
    getTotalCount : function(){
        return this.totalLength || 0;
    },

    /**
     * Returns the sort state of the Store as an object with two properties:
     * <pre><code>
 field {String} The name of the field by which the Records are sorted
 direction {String} The sort order, "ASC" or "DESC"
     * </code></pre>
     */
    getSortState : function(){
        return this.sortInfo;
    },

    // private
    applySort : function(){
        if(this.sortInfo && !this.remoteSort){
            var s = this.sortInfo, f = s.field;
            var st = this.fields.get(f).sortType;
            var fn = function(r1, r2){
                var v1 = st(r1.data[f]), v2 = st(r2.data[f]);
                return v1 > v2 ? 1 : (v1 < v2 ? -1 : 0);
            };
            this.data.sort(s.direction, fn);
            if(this.snapshot && this.snapshot != this.data){
                this.snapshot.sort(s.direction, fn);
            }
        }
    },

    /**
     * Sets the default sort column and order to be used by the next load operation.
     * @param {String} fieldName The name of the field to sort by.
     * @param {String} dir (optional) The sort order, "ASC" or "DESC" (defaults to "ASC")
     */
    setDefaultSort : function(field, dir){
        this.sortInfo = {field: field, direction: dir ? dir.toUpperCase() : "ASC"};
    },

    /**
     * Sort the Records.
     * If remote sorting is used, the sort is performed on the server, and the cache is
     * reloaded. If local sorting is used, the cache is sorted internally.
     * @param {String} fieldName The name of the field to sort by.
     * @param {String} dir (optional) The sort order, "ASC" or "DESC" (defaults to "ASC")
     */
    sort : function(fieldName, dir){
        var f = this.fields.get(fieldName);
        if(!dir){
            this.sortToggle[f.name] = this.sortToggle[f.name] || f.sortDir;
            
            if(this.multiSort || (this.sortInfo && this.sortInfo.field == f.name) ){ // toggle sort dir
                dir = (this.sortToggle[f.name] || "ASC").toggle("ASC", "DESC");
            }else{
                dir = f.sortDir;
            }
        }
        this.sortToggle[f.name] = dir;
        this.sortInfo = {field: f.name, direction: dir};
        if(!this.remoteSort){
            this.applySort();
            this.fireEvent("datachanged", this);
        }else{
            this.load(this.lastOptions);
        }
    },

    /**
     * Calls the specified function for each of the Records in the cache.
     * @param {Function} fn The function to call. The Record is passed as the first parameter.
     * Returning <em>false</em> aborts and exits the iteration.
     * @param {Object} scope (optional) The scope in which to call the function (defaults to the Record).
     */
    each : function(fn, scope){
        this.data.each(fn, scope);
    },

    /**
     * Gets all records modified since the last commit.  Modified records are persisted across load operations
     * (e.g., during paging).
     * @return {Roo.data.Record[]} An array of Records containing outstanding modifications.
     */
    getModifiedRecords : function(){
        return this.modified;
    },

    // private
    createFilterFn : function(property, value, anyMatch){
        if(!value.exec){ // not a regex
            value = String(value);
            if(value.length == 0){
                return false;
            }
            value = new RegExp((anyMatch === true ? '' : '^') + Roo.escapeRe(value), "i");
        }
        return function(r){
            return value.test(r.data[property]);
        };
    },

    /**
     * Sums the value of <i>property</i> for each record between start and end and returns the result.
     * @param {String} property A field on your records
     * @param {Number} start The record index to start at (defaults to 0)
     * @param {Number} end The last record index to include (defaults to length - 1)
     * @return {Number} The sum
     */
    sum : function(property, start, end){
        var rs = this.data.items, v = 0;
        start = start || 0;
        end = (end || end === 0) ? end : rs.length-1;

        for(var i = start; i <= end; i++){
            v += (rs[i].data[property] || 0);
        }
        return v;
    },

    /**
     * Filter the records by a specified property.
     * @param {String} field A field on your records
     * @param {String/RegExp} value Either a string that the field
     * should start with or a RegExp to test against the field
     * @param {Boolean} anyMatch True to match any part not just the beginning
     */
    filter : function(property, value, anyMatch){
        var fn = this.createFilterFn(property, value, anyMatch);
        return fn ? this.filterBy(fn) : this.clearFilter();
    },

    /**
     * Filter by a function. The specified function will be called with each
     * record in this data source. If the function returns true the record is included,
     * otherwise it is filtered.
     * @param {Function} fn The function to be called, it will receive 2 args (record, id)
     * @param {Object} scope (optional) The scope of the function (defaults to this)
     */
    filterBy : function(fn, scope){
        this.snapshot = this.snapshot || this.data;
        this.data = this.queryBy(fn, scope||this);
        this.fireEvent("datachanged", this);
    },

    /**
     * Query the records by a specified property.
     * @param {String} field A field on your records
     * @param {String/RegExp} value Either a string that the field
     * should start with or a RegExp to test against the field
     * @param {Boolean} anyMatch True to match any part not just the beginning
     * @return {MixedCollection} Returns an Roo.util.MixedCollection of the matched records
     */
    query : function(property, value, anyMatch){
        var fn = this.createFilterFn(property, value, anyMatch);
        return fn ? this.queryBy(fn) : this.data.clone();
    },

    /**
     * Query by a function. The specified function will be called with each
     * record in this data source. If the function returns true the record is included
     * in the results.
     * @param {Function} fn The function to be called, it will receive 2 args (record, id)
     * @param {Object} scope (optional) The scope of the function (defaults to this)
      @return {MixedCollection} Returns an Roo.util.MixedCollection of the matched records
     **/
    queryBy : function(fn, scope){
        var data = this.snapshot || this.data;
        return data.filterBy(fn, scope||this);
    },

    /**
     * Collects unique values for a particular dataIndex from this store.
     * @param {String} dataIndex The property to collect
     * @param {Boolean} allowNull (optional) Pass true to allow null, undefined or empty string values
     * @param {Boolean} bypassFilter (optional) Pass true to collect from all records, even ones which are filtered
     * @return {Array} An array of the unique values
     **/
    collect : function(dataIndex, allowNull, bypassFilter){
        var d = (bypassFilter === true && this.snapshot) ?
                this.snapshot.items : this.data.items;
        var v, sv, r = [], l = {};
        for(var i = 0, len = d.length; i < len; i++){
            v = d[i].data[dataIndex];
            sv = String(v);
            if((allowNull || !Roo.isEmpty(v)) && !l[sv]){
                l[sv] = true;
                r[r.length] = v;
            }
        }
        return r;
    },

    /**
     * Revert to a view of the Record cache with no filtering applied.
     * @param {Boolean} suppressEvent If true the filter is cleared silently without notifying listeners
     */
    clearFilter : function(suppressEvent){
        if(this.snapshot && this.snapshot != this.data){
            this.data = this.snapshot;
            delete this.snapshot;
            if(suppressEvent !== true){
                this.fireEvent("datachanged", this);
            }
        }
    },

    // private
    afterEdit : function(record){
        if(this.modified.indexOf(record) == -1){
            this.modified.push(record);
        }
        this.fireEvent("update", this, record, Roo.data.Record.EDIT);
    },
    
    // private
    afterReject : function(record){
        this.modified.remove(record);
        this.fireEvent("update", this, record, Roo.data.Record.REJECT);
    },

    // private
    afterCommit : function(record){
        this.modified.remove(record);
        this.fireEvent("update", this, record, Roo.data.Record.COMMIT);
    },

    /**
     * Commit all Records with outstanding changes. To handle updates for changes, subscribe to the
     * Store's "update" event, and perform updating when the third parameter is Roo.data.Record.COMMIT.
     */
    commitChanges : function(){
        var m = this.modified.slice(0);
        this.modified = [];
        for(var i = 0, len = m.length; i < len; i++){
            m[i].commit();
        }
    },

    /**
     * Cancel outstanding changes on all changed records.
     */
    rejectChanges : function(){
        var m = this.modified.slice(0);
        this.modified = [];
        for(var i = 0, len = m.length; i < len; i++){
            m[i].reject();
        }
    },

    onMetaChange : function(meta, rtype, o){
        this.recordType = rtype;
        this.fields = rtype.prototype.fields;
        delete this.snapshot;
        this.sortInfo = meta.sortInfo || this.sortInfo;
        this.modified = [];
        this.fireEvent('metachange', this, this.reader.meta);
    },
    
    moveIndex : function(data, type)
    {
        var index = this.indexOf(data);
        
        var newIndex = index + type;
        
        this.remove(data);
        
        this.insert(newIndex, data);
        
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.data.SimpleStore
 * @extends Roo.data.Store
 * Small helper class to make creating Stores from Array data easier.
 * @cfg {Number} id The array index of the record id. Leave blank to auto generate ids.
 * @cfg {Array} fields An array of field definition objects, or field name strings.
 * @cfg {Object} an existing reader (eg. copied from another store)
 * @cfg {Array} data The multi-dimensional array of data
 * @cfg {Roo.data.DataProxy} proxy [not-required]  
 * @cfg {Roo.data.Reader} reader  [not-required] 
 * @constructor
 * @param {Object} config
 */
Roo.data.SimpleStore = function(config)
{
    Roo.data.SimpleStore.superclass.constructor.call(this, {
        isLocal : true,
        reader: typeof(config.reader) != 'undefined' ? config.reader : new Roo.data.ArrayReader({
                id: config.id
            },
            Roo.data.Record.create(config.fields)
        ),
        proxy : new Roo.data.MemoryProxy(config.data)
    });
    this.load();
};
Roo.extend(Roo.data.SimpleStore, Roo.data.Store);/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
/**
 * @extends Roo.data.Store
 * @class Roo.data.JsonStore
 * Small helper class to make creating Stores for JSON data easier. <br/>
<pre><code>
var store = new Roo.data.JsonStore({
    url: 'get-images.php',
    root: 'images',
    fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]
});
</code></pre>
 * <b>Note: Although they are not listed, this class inherits all of the config options of Store,
 * JsonReader and HttpProxy (unless inline data is provided).</b>
 * @cfg {Array} fields An array of field definition objects, or field name strings.
 * @constructor
 * @param {Object} config
 */
Roo.data.JsonStore = function(c){
    Roo.data.JsonStore.superclass.constructor.call(this, Roo.apply(c, {
        proxy: !c.data ? new Roo.data.HttpProxy({url: c.url}) : undefined,
        reader: new Roo.data.JsonReader(c, c.fields)
    }));
};
Roo.extend(Roo.data.JsonStore, Roo.data.Store);/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

 
Roo.data.Field = function(config){
    if(typeof config == "string"){
        config = {name: config};
    }
    Roo.apply(this, config);
    
    if(!this.type){
        this.type = "auto";
    }
    
    var st = Roo.data.SortTypes;
    // named sortTypes are supported, here we look them up
    if(typeof this.sortType == "string"){
        this.sortType = st[this.sortType];
    }
    
    // set default sortType for strings and dates
    if(!this.sortType){
        switch(this.type){
            case "string":
                this.sortType = st.asUCString;
                break;
            case "date":
                this.sortType = st.asDate;
                break;
            default:
                this.sortType = st.none;
        }
    }

    // define once
    var stripRe = /[\$,%]/g;

    // prebuilt conversion function for this field, instead of
    // switching every time we're reading a value
    if(!this.convert){
        var cv, dateFormat = this.dateFormat;
        switch(this.type){
            case "":
            case "auto":
            case undefined:
                cv = function(v){ return v; };
                break;
            case "string":
                cv = function(v){ return (v === undefined || v === null) ? '' : String(v); };
                break;
            case "int":
                cv = function(v){
                    return v !== undefined && v !== null && v !== '' ?
                           parseInt(String(v).replace(stripRe, ""), 10) : '';
                    };
                break;
            case "float":
                cv = function(v){
                    return v !== undefined && v !== null && v !== '' ?
                           parseFloat(String(v).replace(stripRe, ""), 10) : ''; 
                    };
                break;
            case "bool":
            case "boolean":
                cv = function(v){ return v === true || v === "true" || v == 1; };
                break;
            case "date":
                cv = function(v){
                    if(!v){
                        return '';
                    }
                    if(v instanceof Date){
                        return v;
                    }
                    if(dateFormat){
                        if(dateFormat == "timestamp"){
                            return new Date(v*1000);
                        }
                        return Date.parseDate(v, dateFormat);
                    }
                    var parsed = Date.parse(v);
                    return parsed ? new Date(parsed) : null;
                };
             break;
            
        }
        this.convert = cv;
    }
};

Roo.data.Field.prototype = {
    dateFormat: null,
    defaultValue: "",
    mapping: null,
    sortType : null,
    sortDir : "ASC"
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
// Base class for reading structured data from a data source.  This class is intended to be
// extended (see ArrayReader, JsonReader and XmlReader) and should not be created directly.

/**
 * @class Roo.data.DataReader
 * @abstract
 * Base class for reading structured data from a data source.  This class is intended to be
 * extended (see {Roo.data.ArrayReader}, {Roo.data.JsonReader} and {Roo.data.XmlReader}) and should not be created directly.
 */

Roo.data.DataReader = function(meta, recordType){
    
    this.meta = meta;
    
    this.recordType = recordType instanceof Array ? 
        Roo.data.Record.create(recordType) : recordType;
};

Roo.data.DataReader.prototype = {
    
    
    readerType : 'Data',
     /**
     * Create an empty record
     * @param {Object} data (optional) - overlay some values
     * @return {Roo.data.Record} record created.
     */
    newRow :  function(d) {
        var da =  {};
        this.recordType.prototype.fields.each(function(c) {
            switch( c.type) {
                case 'int' : da[c.name] = 0; break;
                case 'date' : da[c.name] = new Date(); break;
                case 'float' : da[c.name] = 0.0; break;
                case 'boolean' : da[c.name] = false; break;
                default : da[c.name] = ""; break;
            }
            
        });
        return new this.recordType(Roo.apply(da, d));
    }
    
    
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.data.DataProxy
 * @extends Roo.util.Observable
 * @abstract
 * This class is an abstract base class for implementations which provide retrieval of
 * unformatted data objects.<br>
 * <p>
 * DataProxy implementations are usually used in conjunction with an implementation of Roo.data.DataReader
 * (of the appropriate type which knows how to parse the data object) to provide a block of
 * {@link Roo.data.Records} to an {@link Roo.data.Store}.<br>
 * <p>
 * Custom implementations must implement the load method as described in
 * {@link Roo.data.HttpProxy#load}.
 */
Roo.data.DataProxy = function(){
    this.addEvents({
        /**
         * @event beforeload
         * Fires before a network request is made to retrieve a data object.
         * @param {Object} This DataProxy object.
         * @param {Object} params The params parameter to the load function.
         */
        beforeload : true,
        /**
         * @event load
         * Fires before the load method's callback is called.
         * @param {Object} This DataProxy object.
         * @param {Object} o The data object.
         * @param {Object} arg The callback argument object passed to the load function.
         */
        load : true,
        /**
         * @event loadexception
         * Fires if an Exception occurs during data retrieval.
         * @param {Object} This DataProxy object.
         * @param {Object} o The data object.
         * @param {Object} arg The callback argument object passed to the load function.
         * @param {Object} e The Exception.
         */
        loadexception : true
    });
    Roo.data.DataProxy.superclass.constructor.call(this);
};

Roo.extend(Roo.data.DataProxy, Roo.util.Observable);

    /**
     * @cfg {void} listeners (Not available) Constructor blocks listeners from being set
     */
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.data.MemoryProxy
 * @extends Roo.data.DataProxy
 * An implementation of Roo.data.DataProxy that simply passes the data specified in its constructor
 * to the Reader when its load method is called.
 * @constructor
 * @param {Object} config  A config object containing the objects needed for the Store to access data,
 */
Roo.data.MemoryProxy = function(config){
    var data = config;
    if (typeof(config) != 'undefined' && typeof(config.data) != 'undefined') {
        data = config.data;
    }
    Roo.data.MemoryProxy.superclass.constructor.call(this);
    this.data = data;
};

Roo.extend(Roo.data.MemoryProxy, Roo.data.DataProxy, {
    
    /**
     *  @cfg {Object} data The data object which the Reader uses to construct a block of Roo.data.Records.
     */
    /**
     * Load data from the requested source (in this case an in-memory
     * data object passed to the constructor), read the data object into
     * a block of Roo.data.Records using the passed Roo.data.DataReader implementation, and
     * process that block using the passed callback.
     * @param {Object} params This parameter is not used by the MemoryProxy class.
     * @param {Roo.data.DataReader} reader The Reader object which converts the data
     * object into a block of Roo.data.Records.
     * @param {Function} callback The function into which to pass the block of Roo.data.records.
     * The function must be passed <ul>
     * <li>The Record block object</li>
     * <li>The "arg" argument from the load function</li>
     * <li>A boolean success indicator</li>
     * </ul>
     * @param {Object} scope The scope in which to call the callback
     * @param {Object} arg An optional argument which is passed to the callback as its second parameter.
     */
    load : function(params, reader, callback, scope, arg){
        params = params || {};
        var result;
        try {
            result = reader.readRecords(params.data ? params.data :this.data);
        }catch(e){
            this.fireEvent("loadexception", this, arg, null, e);
            callback.call(scope, null, arg, false);
            return;
        }
        callback.call(scope, result, arg, true);
    },
    
    // private
    update : function(params, records){
        
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.data.HttpProxy
 * @extends Roo.data.DataProxy
 * An implementation of {@link Roo.data.DataProxy} that reads a data object from an {@link Roo.data.Connection} object
 * configured to reference a certain URL.<br><br>
 * <p>
 * <em>Note that this class cannot be used to retrieve data from a domain other than the domain
 * from which the running page was served.<br><br>
 * <p>
 * For cross-domain access to remote data, use an {@link Roo.data.ScriptTagProxy}.</em><br><br>
 * <p>
 * Be aware that to enable the browser to parse an XML document, the server must set
 * the Content-Type header in the HTTP response to "text/xml".
 * @constructor
 * @param {Object} conn Connection config options to add to each request (e.g. {url: 'foo.php'} or
 * an {@link Roo.data.Connection} object.  If a Connection config is passed, the singleton {@link Roo.Ajax} object
 * will be used to make the request.
 */
Roo.data.HttpProxy = function(conn){
    Roo.data.HttpProxy.superclass.constructor.call(this);
    // is conn a conn config or a real conn?
    this.conn = conn;
    this.useAjax = !conn || !conn.events;
  
};

Roo.extend(Roo.data.HttpProxy, Roo.data.DataProxy, {
    // thse are take from connection...
    
    /**
     * @cfg {String} url  The default URL to be used for requests to the server. (defaults to undefined)
     */
    /**
     * @cfg {Object} extraParams  An object containing properties which are used as
     * extra parameters to each request made by this object. (defaults to undefined)
     */
    /**
     * @cfg {Object} defaultHeaders   An object containing request headers which are added
     *  to each request made by this object. (defaults to undefined)
     */
    /**
     * @cfg {String} method (GET|POST)  The default HTTP method to be used for requests. (defaults to undefined; if not set but parms are present will use POST, otherwise GET)
     */
    /**
     * @cfg {Number} timeout The timeout in milliseconds to be used for requests. (defaults to 30000)
     */
     /**
     * @cfg {Boolean} autoAbort Whether this request should abort any pending requests. (defaults to false)
     * @type Boolean
     */
  

    /**
     * @cfg {Boolean} disableCaching (Optional) True to add a unique cache-buster param to GET requests. (defaults to true)
     * @type Boolean
     */
    /**
     * Return the {@link Roo.data.Connection} object being used by this Proxy.
     * @return {Connection} The Connection object. This object may be used to subscribe to events on
     * a finer-grained basis than the DataProxy events.
     */
    getConnection : function(){
        return this.useAjax ? Roo.Ajax : this.conn;
    },

    /**
     * Load data from the configured {@link Roo.data.Connection}, read the data object into
     * a block of Roo.data.Records using the passed {@link Roo.data.DataReader} implementation, and
     * process that block using the passed callback.
     * @param {Object} params An object containing properties which are to be used as HTTP parameters
     * for the request to the remote server.
     * @param {Roo.data.DataReader} reader The Reader object which converts the data
     * object into a block of Roo.data.Records.
     * @param {Function} callback The function into which to pass the block of Roo.data.Records.
     * The function must be passed <ul>
     * <li>The Record block object</li>
     * <li>The "arg" argument from the load function</li>
     * <li>A boolean success indicator</li>
     * </ul>
     * @param {Object} scope The scope in which to call the callback
     * @param {Object} arg An optional argument which is passed to the callback as its second parameter.
     */
    load : function(params, reader, callback, scope, arg){
        if(this.fireEvent("beforeload", this, params) !== false){
            var  o = {
                params : params || {},
                request: {
                    callback : callback,
                    scope : scope,
                    arg : arg
                },
                reader: reader,
                callback : this.loadResponse,
                scope: this
            };
            if(this.useAjax){
                Roo.applyIf(o, this.conn);
                if(this.activeRequest){
                    Roo.Ajax.abort(this.activeRequest);
                }
                this.activeRequest = Roo.Ajax.request(o);
            }else{
                this.conn.request(o);
            }
        }else{
            callback.call(scope||this, null, arg, false);
        }
    },

    // private
    loadResponse : function(o, success, response){
        delete this.activeRequest;
        if(!success){
            this.fireEvent("loadexception", this, o, response);
            o.request.callback.call(o.request.scope, null, o.request.arg, false);
            return;
        }
        var result;
        try {
            result = o.reader.read(response);
        }catch(e){
            o.success = false;
            o.raw = { errorMsg : response.responseText };
            this.fireEvent("loadexception", this, o, response, e);
            o.request.callback.call(o.request.scope, o, o.request.arg, false);
            return;
        }
        
        this.fireEvent("load", this, o, o.request.arg);
        o.request.callback.call(o.request.scope, result, o.request.arg, true);
    },

    // private
    update : function(dataSet){

    },

    // private
    updateResponse : function(dataSet){

    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.data.ScriptTagProxy
 * An implementation of Roo.data.DataProxy that reads a data object from a URL which may be in a domain
 * other than the originating domain of the running page.<br><br>
 * <p>
 * <em>Note that if you are retrieving data from a page that is in a domain that is NOT the same as the originating domain
 * of the running page, you must use this class, rather than DataProxy.</em><br><br>
 * <p>
 * The content passed back from a server resource requested by a ScriptTagProxy is executable JavaScript
 * source code that is used as the source inside a &lt;script> tag.<br><br>
 * <p>
 * In order for the browser to process the returned data, the server must wrap the data object
 * with a call to a callback function, the name of which is passed as a parameter by the ScriptTagProxy.
 * Below is a Java example for a servlet which returns data for either a ScriptTagProxy, or an HttpProxy
 * depending on whether the callback name was passed:
 * <p>
 * <pre><code>
boolean scriptTag = false;
String cb = request.getParameter("callback");
if (cb != null) {
    scriptTag = true;
    response.setContentType("text/javascript");
} else {
    response.setContentType("application/x-json");
}
Writer out = response.getWriter();
if (scriptTag) {
    out.write(cb + "(");
}
out.print(dataBlock.toJsonString());
if (scriptTag) {
    out.write(");");
}
</pre></code>
 *
 * @constructor
 * @param {Object} config A configuration object.
 */
Roo.data.ScriptTagProxy = function(config){
    Roo.data.ScriptTagProxy.superclass.constructor.call(this);
    Roo.apply(this, config);
    this.head = document.getElementsByTagName("head")[0];
};

Roo.data.ScriptTagProxy.TRANS_ID = 1000;

Roo.extend(Roo.data.ScriptTagProxy, Roo.data.DataProxy, {
    /**
     * @cfg {String} url The URL from which to request the data object.
     */
    /**
     * @cfg {Number} timeout (Optional) The number of milliseconds to wait for a response. Defaults to 30 seconds.
     */
    timeout : 30000,
    /**
     * @cfg {String} callbackParam (Optional) The name of the parameter to pass to the server which tells
     * the server the name of the callback function set up by the load call to process the returned data object.
     * Defaults to "callback".<p>The server-side processing must read this parameter value, and generate
     * javascript output which calls this named function passing the data object as its only parameter.
     */
    callbackParam : "callback",
    /**
     *  @cfg {Boolean} nocache (Optional) Defaults to true. Disable cacheing by adding a unique parameter
     * name to the request.
     */
    nocache : true,

    /**
     * Load data from the configured URL, read the data object into
     * a block of Roo.data.Records using the passed Roo.data.DataReader implementation, and
     * process that block using the passed callback.
     * @param {Object} params An object containing properties which are to be used as HTTP parameters
     * for the request to the remote server.
     * @param {Roo.data.DataReader} reader The Reader object which converts the data
     * object into a block of Roo.data.Records.
     * @param {Function} callback The function into which to pass the block of Roo.data.Records.
     * The function must be passed <ul>
     * <li>The Record block object</li>
     * <li>The "arg" argument from the load function</li>
     * <li>A boolean success indicator</li>
     * </ul>
     * @param {Object} scope The scope in which to call the callback
     * @param {Object} arg An optional argument which is passed to the callback as its second parameter.
     */
    load : function(params, reader, callback, scope, arg){
        if(this.fireEvent("beforeload", this, params) !== false){

            var p = Roo.urlEncode(Roo.apply(params, this.extraParams));

            var url = this.url;
            url += (url.indexOf("?") != -1 ? "&" : "?") + p;
            if(this.nocache){
                url += "&_dc=" + (new Date().getTime());
            }
            var transId = ++Roo.data.ScriptTagProxy.TRANS_ID;
            var trans = {
                id : transId,
                cb : "stcCallback"+transId,
                scriptId : "stcScript"+transId,
                params : params,
                arg : arg,
                url : url,
                callback : callback,
                scope : scope,
                reader : reader
            };
            var conn = this;

            window[trans.cb] = function(o){
                conn.handleResponse(o, trans);
            };

            url += String.format("&{0}={1}", this.callbackParam, trans.cb);

            if(this.autoAbort !== false){
                this.abort();
            }

            trans.timeoutId = this.handleFailure.defer(this.timeout, this, [trans]);

            var script = document.createElement("script");
            script.setAttribute("src", url);
            script.setAttribute("type", "text/javascript");
            script.setAttribute("id", trans.scriptId);
            this.head.appendChild(script);

            this.trans = trans;
        }else{
            callback.call(scope||this, null, arg, false);
        }
    },

    // private
    isLoading : function(){
        return this.trans ? true : false;
    },

    /**
     * Abort the current server request.
     */
    abort : function(){
        if(this.isLoading()){
            this.destroyTrans(this.trans);
        }
    },

    // private
    destroyTrans : function(trans, isLoaded){
        this.head.removeChild(document.getElementById(trans.scriptId));
        clearTimeout(trans.timeoutId);
        if(isLoaded){
            window[trans.cb] = undefined;
            try{
                delete window[trans.cb];
            }catch(e){}
        }else{
            // if hasn't been loaded, wait for load to remove it to prevent script error
            window[trans.cb] = function(){
                window[trans.cb] = undefined;
                try{
                    delete window[trans.cb];
                }catch(e){}
            };
        }
    },

    // private
    handleResponse : function(o, trans){
        this.trans = false;
        this.destroyTrans(trans, true);
        var result;
        try {
            result = trans.reader.readRecords(o);
        }catch(e){
            this.fireEvent("loadexception", this, o, trans.arg, e);
            trans.callback.call(trans.scope||window, null, trans.arg, false);
            return;
        }
        this.fireEvent("load", this, o, trans.arg);
        trans.callback.call(trans.scope||window, result, trans.arg, true);
    },

    // private
    handleFailure : function(trans){
        this.trans = false;
        this.destroyTrans(trans, false);
        this.fireEvent("loadexception", this, null, trans.arg);
        trans.callback.call(trans.scope||window, null, trans.arg, false);
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.data.JsonReader
 * @extends Roo.data.DataReader
 * Data reader class to create an Array of Roo.data.Record objects from a JSON response
 * based on mappings in a provided Roo.data.Record constructor.
 * 
 * The default behaviour of a store is to send ?_requestMeta=1, unless the class has recieved 'metaData' property
 * in the reply previously. 
 * 
 * <p>
 * Example code:
 * <pre><code>
var RecordDef = Roo.data.Record.create([
    {name: 'name', mapping: 'name'},     // "mapping" property not needed if it's the same as "name"
    {name: 'occupation'}                 // This field will use "occupation" as the mapping.
]);
var myReader = new Roo.data.JsonReader({
    totalProperty: "results",    // The property which contains the total dataset size (optional)
    root: "rows",                // The property which contains an Array of row objects
    id: "id"                     // The property within each row object that provides an ID for the record (optional)
}, RecordDef);
</code></pre>
 * <p>
 * This would consume a JSON file like this:
 * <pre><code>
{ 'results': 2, 'rows': [
    { 'id': 1, 'name': 'Bill', occupation: 'Gardener' },
    { 'id': 2, 'name': 'Ben', occupation: 'Horticulturalist' } ]
}
</code></pre>
 * @cfg {String} totalProperty Name of the property from which to retrieve the total number of records
 * in the dataset. This is only needed if the whole dataset is not passed in one go, but is being
 * paged from the remote server.
 * @cfg {String} successProperty Name of the property from which to retrieve the success attribute used by forms.
 * @cfg {String} root name of the property which contains the Array of row objects.
 * @cfg {String} id Name of the property within a row object that contains a record identifier value.
 * @cfg {Array} fields Array of field definition objects
 * @constructor
 * Create a new JsonReader
 * @param {Object} meta Metadata configuration options
 * @param {Object} recordType Either an Array of field definition objects,
 * or an {@link Roo.data.Record} object created using {@link Roo.data.Record#create}.
 */
Roo.data.JsonReader = function(meta, recordType){
    
    meta = meta || {};
    // set some defaults:
    Roo.applyIf(meta, {
        totalProperty: 'total',
        successProperty : 'success',
        root : 'data',
        id : 'id'
    });
    
    Roo.data.JsonReader.superclass.constructor.call(this, meta, recordType||meta.fields);
};
Roo.extend(Roo.data.JsonReader, Roo.data.DataReader, {
    
    readerType : 'Json',
    
    /**
     * @prop {Boolean} metaFromRemote  - if the meta data was loaded from the remote source.
     * Used by Store query builder to append _requestMeta to params.
     * 
     */
    metaFromRemote : false,
    /**
     * This method is only used by a DataProxy which has retrieved data from a remote server.
     * @param {Object} response The XHR object which contains the JSON data in its responseText.
     * @return {Object} data A data block which is used by an Roo.data.Store object as
     * a cache of Roo.data.Records.
     */
    read : function(response){
        var json = response.responseText;
       
        var o = JSON.parse(json); // was eval
        if(!o) {
            throw {message: "JsonReader.read: Json object not found"};
        }
        
        if(o.metaData){
            
            delete this.ef;
            this.metaFromRemote = true;
            this.meta = o.metaData;
            this.recordType = Roo.data.Record.create(o.metaData.fields);
            this.onMetaChange(this.meta, this.recordType, o);
        }
        return this.readRecords(o);
    },

    // private function a store will implement
    onMetaChange : function(meta, recordType, o){

    },

    /**
	 * @ignore
	 */
    simpleAccess: function(obj, subsc) {
    	return obj[subsc];
    },

	/**
	 * @ignore
	 */
    getJsonAccessor: function(){
        var re = /[\[\.]/;
        return function(expr) {
            try {
                return(re.test(expr))
                    ? new Function("obj", "return obj." + expr)
                    : function(obj){
                        return obj[expr];
                    };
            } catch(e){}
            return Roo.emptyFn;
        };
    }(),

    /**
     * Create a data block containing Roo.data.Records from an XML document.
     * @param {Object} o An object which contains an Array of row objects in the property specified
     * in the config as 'root, and optionally a property, specified in the config as 'totalProperty'
     * which contains the total size of the dataset.
     * @return {Object} data A data block which is used by an Roo.data.Store object as
     * a cache of Roo.data.Records.
     */
    readRecords : function(o){
        /**
         * After any data loads, the raw JSON data is available for further custom processing.
         * @type Object
         */
        this.o = o;
        var s = this.meta, Record = this.recordType,
            f = Record ? Record.prototype.fields : null, fi = f ? f.items : [], fl = f ? f.length : 0;

//      Generate extraction functions for the totalProperty, the root, the id, and for each field
        if (!this.ef) {
            if(s.totalProperty) {
	            this.getTotal = this.getJsonAccessor(s.totalProperty);
	        }
	        if(s.successProperty) {
	            this.getSuccess = this.getJsonAccessor(s.successProperty);
	        }
	        this.getRoot = s.root ? this.getJsonAccessor(s.root) : function(p){return p;};
	        if (s.id) {
	        	var g = this.getJsonAccessor(s.id);
	        	this.getId = function(rec) {
	        		var r = g(rec);  
		        	return (r === undefined || r === "") ? null : r;
	        	};
	        } else {
	        	this.getId = function(){return null;};
	        }
            this.ef = [];
            for(var jj = 0; jj < fl; jj++){
                f = fi[jj];
                var map = (f.mapping !== undefined && f.mapping !== null) ? f.mapping : f.name;
                this.ef[jj] = this.getJsonAccessor(map);
            }
        }

    	var root = this.getRoot(o), c = root.length, totalRecords = c, success = true;
    	if(s.totalProperty){
            var vt = parseInt(this.getTotal(o), 10);
            if(!isNaN(vt)){
                totalRecords = vt;
            }
        }
        if(s.successProperty){
            var vs = this.getSuccess(o);
            if(vs === false || vs === 'false'){
                success = false;
            }
        }
        var records = [];
        for(var i = 0; i < c; i++){
            var n = root[i];
            var values = {};
            var id = this.getId(n);
            for(var j = 0; j < fl; j++){
                f = fi[j];
				var v = this.ef[j](n);
				if (!f.convert) {
					Roo.log('missing convert for ' + f.name);
					Roo.log(f);
					continue;
				}
				values[f.name] = f.convert((v !== undefined) ? v : f.defaultValue);
            }
			if (!Record) {
				return {
					raw : { errorMsg : "JSON Reader Error: fields or metadata not available to create Record" },
					success : false,
					records : [],
					totalRecords : 0
				};
			}
            var record = new Record(values, id);
            record.json = n;
            records[i] = record;
        }
        return {
            raw : o,
            success : success,
            records : records,
            totalRecords : totalRecords
        };
    },
    // used when loading children.. @see loadDataFromChildren
    toLoadData: function(rec)
    {
	// expect rec just to be an array.. eg [a,b,c, [...] << cn ]
	var data = typeof(rec.data.cn) == 'undefined' ? [] : rec.data.cn;
	return { data : data, total : data.length };
	
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.data.XmlReader
 * @extends Roo.data.DataReader
 * Data reader class to create an Array of {@link Roo.data.Record} objects from an XML document
 * based on mappings in a provided Roo.data.Record constructor.<br><br>
 * <p>
 * <em>Note that in order for the browser to parse a returned XML document, the Content-Type
 * header in the HTTP response must be set to "text/xml".</em>
 * <p>
 * Example code:
 * <pre><code>
var RecordDef = Roo.data.Record.create([
   {name: 'name', mapping: 'name'},     // "mapping" property not needed if it's the same as "name"
   {name: 'occupation'}                 // This field will use "occupation" as the mapping.
]);
var myReader = new Roo.data.XmlReader({
   totalRecords: "results", // The element which contains the total dataset size (optional)
   record: "row",           // The repeated element which contains row information
   id: "id"                 // The element within the row that provides an ID for the record (optional)
}, RecordDef);
</code></pre>
 * <p>
 * This would consume an XML file like this:
 * <pre><code>
&lt;?xml?>
&lt;dataset>
 &lt;results>2&lt;/results>
 &lt;row>
   &lt;id>1&lt;/id>
   &lt;name>Bill&lt;/name>
   &lt;occupation>Gardener&lt;/occupation>
 &lt;/row>
 &lt;row>
   &lt;id>2&lt;/id>
   &lt;name>Ben&lt;/name>
   &lt;occupation>Horticulturalist&lt;/occupation>
 &lt;/row>
&lt;/dataset>
</code></pre>
 * @cfg {String} totalRecords The DomQuery path from which to retrieve the total number of records
 * in the dataset. This is only needed if the whole dataset is not passed in one go, but is being
 * paged from the remote server.
 * @cfg {String} record The DomQuery path to the repeated element which contains record information.
 * @cfg {String} success The DomQuery path to the success attribute used by forms.
 * @cfg {String} id The DomQuery path relative from the record element to the element that contains
 * a record identifier value.
 * @constructor
 * Create a new XmlReader
 * @param {Object} meta Metadata configuration options
 * @param {Mixed} recordType The definition of the data record type to produce.  This can be either a valid
 * Record subclass created with {@link Roo.data.Record#create}, or an array of objects with which to call
 * Roo.data.Record.create.  See the {@link Roo.data.Record} class for more details.
 */
Roo.data.XmlReader = function(meta, recordType){
    meta = meta || {};
    Roo.data.XmlReader.superclass.constructor.call(this, meta, recordType||meta.fields);
};
Roo.extend(Roo.data.XmlReader, Roo.data.DataReader, {
    
    readerType : 'Xml',
    
    /**
     * This method is only used by a DataProxy which has retrieved data from a remote server.
	 * @param {Object} response The XHR object which contains the parsed XML document.  The response is expected
	 * to contain a method called 'responseXML' that returns an XML document object.
     * @return {Object} records A data block which is used by an {@link Roo.data.Store} as
     * a cache of Roo.data.Records.
     */
    read : function(response){
        var doc = response.responseXML;
        if(!doc) {
            throw {message: "XmlReader.read: XML Document not available"};
        }
        return this.readRecords(doc);
    },

    /**
     * Create a data block containing Roo.data.Records from an XML document.
	 * @param {Object} doc A parsed XML document.
     * @return {Object} records A data block which is used by an {@link Roo.data.Store} as
     * a cache of Roo.data.Records.
     */
    readRecords : function(doc){
        /**
         * After any data loads/reads, the raw XML Document is available for further custom processing.
         * @type XMLDocument
         */
        this.xmlData = doc;
        var root = doc.documentElement || doc;
    	var q = Roo.DomQuery;
    	var recordType = this.recordType, fields = recordType.prototype.fields;
    	var sid = this.meta.id;
    	var totalRecords = 0, success = true;
    	if(this.meta.totalRecords){
    	    totalRecords = q.selectNumber(this.meta.totalRecords, root, 0);
    	}
        
        if(this.meta.success){
            var sv = q.selectValue(this.meta.success, root, true);
            success = sv !== false && sv !== 'false';
    	}
    	var records = [];
    	var ns = q.select(this.meta.record, root);
        for(var i = 0, len = ns.length; i < len; i++) {
	        var n = ns[i];
	        var values = {};
	        var id = sid ? q.selectValue(sid, n) : undefined;
	        for(var j = 0, jlen = fields.length; j < jlen; j++){
	            var f = fields.items[j];
                var v = q.selectValue(f.mapping || f.name, n, f.defaultValue);
	            v = f.convert(v);
	            values[f.name] = v;
	        }
	        var record = new recordType(values, id);
	        record.node = n;
	        records[records.length] = record;
	    }

	    return {
	        success : success,
	        records : records,
	        totalRecords : totalRecords || records.length
	    };
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.data.ArrayReader
 * @extends Roo.data.DataReader
 * Data reader class to create an Array of Roo.data.Record objects from an Array.
 * Each element of that Array represents a row of data fields. The
 * fields are pulled into a Record object using as a subscript, the <em>mapping</em> property
 * of the field definition if it exists, or the field's ordinal position in the definition.<br>
 * <p>
 * Example code:.
 * <pre><code>
var RecordDef = Roo.data.Record.create([
    {name: 'name', mapping: 1},         // "mapping" only needed if an "id" field is present which
    {name: 'occupation', mapping: 2}    // precludes using the ordinal position as the index.
]);
var myReader = new Roo.data.ArrayReader({
    id: 0                     // The subscript within row Array that provides an ID for the Record (optional)
}, RecordDef);
</code></pre>
 * <p>
 * This would consume an Array like this:
 * <pre><code>
[ [1, 'Bill', 'Gardener'], [2, 'Ben', 'Horticulturalist'] ]
  </code></pre>
 
 * @constructor
 * Create a new JsonReader
 * @param {Object} meta Metadata configuration options.
 * @param {Object|Array} recordType Either an Array of field definition objects
 * 
 * @cfg {Array} fields Array of field definition objects
 * @cfg {String} id Name of the property within a row object that contains a record identifier value.
 * as specified to {@link Roo.data.Record#create},
 * or an {@link Roo.data.Record} object
 *
 * 
 * created using {@link Roo.data.Record#create}.
 */
Roo.data.ArrayReader = function(meta, recordType)
{    
    Roo.data.ArrayReader.superclass.constructor.call(this, meta, recordType||meta.fields);
};

Roo.extend(Roo.data.ArrayReader, Roo.data.JsonReader, {
    
      /**
     * Create a data block containing Roo.data.Records from an XML document.
     * @param {Object} o An Array of row objects which represents the dataset.
     * @return {Object} A data block which is used by an {@link Roo.data.Store} object as
     * a cache of Roo.data.Records.
     */
    readRecords : function(o)
    {
        var sid = this.meta ? this.meta.id : null;
        var recordType = this.recordType, fields = recordType.prototype.fields;
        var records = [];
        var root = o;
        for(var i = 0; i < root.length; i++){
            var n = root[i];
            var values = {};
            var id = ((sid || sid === 0) && n[sid] !== undefined && n[sid] !== "" ? n[sid] : null);
            for(var j = 0, jlen = fields.length; j < jlen; j++){
                var f = fields.items[j];
                var k = f.mapping !== undefined && f.mapping !== null ? f.mapping : j;
                var v = n[k] !== undefined ? n[k] : f.defaultValue;
                v = f.convert(v);
                values[f.name] = v;
            }
            var record = new recordType(values, id);
            record.json = n;
            records[records.length] = record;
        }
        return {
            records : records,
            totalRecords : records.length
        };
    },
    // used when loading children.. @see loadDataFromChildren
    toLoadData: function(rec)
    {
        // expect rec just to be an array.. eg [a,b,c, [...] << cn ]
        return typeof(rec.data.cn) == 'undefined' ? [] : rec.data.cn;
        
    }
    
    
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */


/**
 * @class Roo.data.Tree
 * @extends Roo.util.Observable
 * Represents a tree data structure and bubbles all the events for its nodes. The nodes
 * in the tree have most standard DOM functionality.
 * @constructor
 * @param {Node} root (optional) The root node
 */
Roo.data.Tree = function(root){
   this.nodeHash = {};
   /**
    * The root node for this tree
    * @type Node
    */
   this.root = null;
   if(root){
       this.setRootNode(root);
   }
   this.addEvents({
       /**
        * @event append
        * Fires when a new child node is appended to a node in this tree.
        * @param {Tree} tree The owner tree
        * @param {Node} parent The parent node
        * @param {Node} node The newly appended node
        * @param {Number} index The index of the newly appended node
        */
       "append" : true,
       /**
        * @event remove
        * Fires when a child node is removed from a node in this tree.
        * @param {Tree} tree The owner tree
        * @param {Node} parent The parent node
        * @param {Node} node The child node removed
        */
       "remove" : true,
       /**
        * @event move
        * Fires when a node is moved to a new location in the tree
        * @param {Tree} tree The owner tree
        * @param {Node} node The node moved
        * @param {Node} oldParent The old parent of this node
        * @param {Node} newParent The new parent of this node
        * @param {Number} index The index it was moved to
        */
       "move" : true,
       /**
        * @event insert
        * Fires when a new child node is inserted in a node in this tree.
        * @param {Tree} tree The owner tree
        * @param {Node} parent The parent node
        * @param {Node} node The child node inserted
        * @param {Node} refNode The child node the node was inserted before
        */
       "insert" : true,
       /**
        * @event beforeappend
        * Fires before a new child is appended to a node in this tree, return false to cancel the append.
        * @param {Tree} tree The owner tree
        * @param {Node} parent The parent node
        * @param {Node} node The child node to be appended
        */
       "beforeappend" : true,
       /**
        * @event beforeremove
        * Fires before a child is removed from a node in this tree, return false to cancel the remove.
        * @param {Tree} tree The owner tree
        * @param {Node} parent The parent node
        * @param {Node} node The child node to be removed
        */
       "beforeremove" : true,
       /**
        * @event beforemove
        * Fires before a node is moved to a new location in the tree. Return false to cancel the move.
        * @param {Tree} tree The owner tree
        * @param {Node} node The node being moved
        * @param {Node} oldParent The parent of the node
        * @param {Node} newParent The new parent the node is moving to
        * @param {Number} index The index it is being moved to
        */
       "beforemove" : true,
       /**
        * @event beforeinsert
        * Fires before a new child is inserted in a node in this tree, return false to cancel the insert.
        * @param {Tree} tree The owner tree
        * @param {Node} parent The parent node
        * @param {Node} node The child node to be inserted
        * @param {Node} refNode The child node the node is being inserted before
        */
       "beforeinsert" : true
   });

    Roo.data.Tree.superclass.constructor.call(this);
};

Roo.extend(Roo.data.Tree, Roo.util.Observable, {
    pathSeparator: "/",

    proxyNodeEvent : function(){
        return this.fireEvent.apply(this, arguments);
    },

    /**
     * Returns the root node for this tree.
     * @return {Node}
     */
    getRootNode : function(){
        return this.root;
    },

    /**
     * Sets the root node for this tree.
     * @param {Node} node
     * @return {Node}
     */
    setRootNode : function(node){
        this.root = node;
        node.ownerTree = this;
        node.isRoot = true;
        this.registerNode(node);
        return node;
    },

    /**
     * Gets a node in this tree by its id.
     * @param {String} id
     * @return {Node}
     */
    getNodeById : function(id){
        return this.nodeHash[id];
    },

    registerNode : function(node){
        this.nodeHash[node.id] = node;
    },

    unregisterNode : function(node){
        delete this.nodeHash[node.id];
    },

    toString : function(){
        return "[Tree"+(this.id?" "+this.id:"")+"]";
    }
});

/**
 * @class Roo.data.Node
 * @extends Roo.util.Observable
 * @cfg {Boolean} leaf true if this node is a leaf and does not have children
 * @cfg {String} id The id for this node. If one is not specified, one is generated.
 * @constructor
 * @param {Object} attributes The attributes/config for the node
 */
Roo.data.Node = function(attributes){
    /**
     * The attributes supplied for the node. You can use this property to access any custom attributes you supplied.
     * @type {Object}
     */
    this.attributes = attributes || {};
    this.leaf = this.attributes.leaf;
    /**
     * The node id. @type String
     */
    this.id = this.attributes.id;
    if(!this.id){
        this.id = Roo.id(null, "ynode-");
        this.attributes.id = this.id;
    }
     
    
    /**
     * All child nodes of this node. @type Array
     */
    this.childNodes = [];
    if(!this.childNodes.indexOf){ // indexOf is a must
        this.childNodes.indexOf = function(o){
            for(var i = 0, len = this.length; i < len; i++){
                if(this[i] == o) {
                    return i;
                }
            }
            return -1;
        };
    }
    /**
     * The parent node for this node. @type Node
     */
    this.parentNode = null;
    /**
     * The first direct child node of this node, or null if this node has no child nodes. @type Node
     */
    this.firstChild = null;
    /**
     * The last direct child node of this node, or null if this node has no child nodes. @type Node
     */
    this.lastChild = null;
    /**
     * The node immediately preceding this node in the tree, or null if there is no sibling node. @type Node
     */
    this.previousSibling = null;
    /**
     * The node immediately following this node in the tree, or null if there is no sibling node. @type Node
     */
    this.nextSibling = null;

    this.addEvents({
       /**
        * @event append
        * Fires when a new child node is appended
        * @param {Tree} tree The owner tree
        * @param {Node} this This node
        * @param {Node} node The newly appended node
        * @param {Number} index The index of the newly appended node
        */
       "append" : true,
       /**
        * @event remove
        * Fires when a child node is removed
        * @param {Tree} tree The owner tree
        * @param {Node} this This node
        * @param {Node} node The removed node
        */
       "remove" : true,
       /**
        * @event move
        * Fires when this node is moved to a new location in the tree
        * @param {Tree} tree The owner tree
        * @param {Node} this This node
        * @param {Node} oldParent The old parent of this node
        * @param {Node} newParent The new parent of this node
        * @param {Number} index The index it was moved to
        */
       "move" : true,
       /**
        * @event insert
        * Fires when a new child node is inserted.
        * @param {Tree} tree The owner tree
        * @param {Node} this This node
        * @param {Node} node The child node inserted
        * @param {Node} refNode The child node the node was inserted before
        */
       "insert" : true,
       /**
        * @event beforeappend
        * Fires before a new child is appended, return false to cancel the append.
        * @param {Tree} tree The owner tree
        * @param {Node} this This node
        * @param {Node} node The child node to be appended
        */
       "beforeappend" : true,
       /**
        * @event beforeremove
        * Fires before a child is removed, return false to cancel the remove.
        * @param {Tree} tree The owner tree
        * @param {Node} this This node
        * @param {Node} node The child node to be removed
        */
       "beforeremove" : true,
       /**
        * @event beforemove
        * Fires before this node is moved to a new location in the tree. Return false to cancel the move.
        * @param {Tree} tree The owner tree
        * @param {Node} this This node
        * @param {Node} oldParent The parent of this node
        * @param {Node} newParent The new parent this node is moving to
        * @param {Number} index The index it is being moved to
        */
       "beforemove" : true,
       /**
        * @event beforeinsert
        * Fires before a new child is inserted, return false to cancel the insert.
        * @param {Tree} tree The owner tree
        * @param {Node} this This node
        * @param {Node} node The child node to be inserted
        * @param {Node} refNode The child node the node is being inserted before
        */
       "beforeinsert" : true
   });
    this.listeners = this.attributes.listeners;
    Roo.data.Node.superclass.constructor.call(this);
};

Roo.extend(Roo.data.Node, Roo.util.Observable, {
    fireEvent : function(evtName){
        // first do standard event for this node
        if(Roo.data.Node.superclass.fireEvent.apply(this, arguments) === false){
            return false;
        }
        // then bubble it up to the tree if the event wasn't cancelled
        var ot = this.getOwnerTree();
        if(ot){
            if(ot.proxyNodeEvent.apply(ot, arguments) === false){
                return false;
            }
        }
        return true;
    },

    /**
     * Returns true if this node is a leaf
     * @return {Boolean}
     */
    isLeaf : function(){
        return this.leaf === true;
    },

    // private
    setFirstChild : function(node){
        this.firstChild = node;
    },

    //private
    setLastChild : function(node){
        this.lastChild = node;
    },


    /**
     * Returns true if this node is the last child of its parent
     * @return {Boolean}
     */
    isLast : function(){
       return (!this.parentNode ? true : this.parentNode.lastChild == this);
    },

    /**
     * Returns true if this node is the first child of its parent
     * @return {Boolean}
     */
    isFirst : function(){
       return (!this.parentNode ? true : this.parentNode.firstChild == this);
    },

    hasChildNodes : function(){
        return !this.isLeaf() && this.childNodes.length > 0;
    },

    /**
     * Insert node(s) as the last child node of this node.
     * @param {Node/Array} node The node or Array of nodes to append
     * @return {Node} The appended node if single append, or null if an array was passed
     */
    appendChild : function(node){
        var multi = false;
        if(node instanceof Array){
            multi = node;
        }else if(arguments.length > 1){
            multi = arguments;
        }
        
        // if passed an array or multiple args do them one by one
        if(multi){
            for(var i = 0, len = multi.length; i < len; i++) {
            	this.appendChild(multi[i]);
            }
        }else{
            if(this.fireEvent("beforeappend", this.ownerTree, this, node) === false){
                return false;
            }
            var index = this.childNodes.length;
            var oldParent = node.parentNode;
            // it's a move, make sure we move it cleanly
            if(oldParent){
                if(node.fireEvent("beforemove", node.getOwnerTree(), node, oldParent, this, index) === false){
                    return false;
                }
                oldParent.removeChild(node);
            }
            
            index = this.childNodes.length;
            if(index == 0){
                this.setFirstChild(node);
            }
            this.childNodes.push(node);
            node.parentNode = this;
            var ps = this.childNodes[index-1];
            if(ps){
                node.previousSibling = ps;
                ps.nextSibling = node;
            }else{
                node.previousSibling = null;
            }
            node.nextSibling = null;
            this.setLastChild(node);
            node.setOwnerTree(this.getOwnerTree());
            this.fireEvent("append", this.ownerTree, this, node, index);
            if(this.ownerTree) {
                this.ownerTree.fireEvent("appendnode", this, node, index);
            }
            if(oldParent){
                node.fireEvent("move", this.ownerTree, node, oldParent, this, index);
            }
            return node;
        }
    },

    /**
     * Removes a child node from this node.
     * @param {Node} node The node to remove
     * @return {Node} The removed node
     */
    removeChild : function(node){
        var index = this.childNodes.indexOf(node);
        if(index == -1){
            return false;
        }
        if(this.fireEvent("beforeremove", this.ownerTree, this, node) === false){
            return false;
        }

        // remove it from childNodes collection
        this.childNodes.splice(index, 1);

        // update siblings
        if(node.previousSibling){
            node.previousSibling.nextSibling = node.nextSibling;
        }
        if(node.nextSibling){
            node.nextSibling.previousSibling = node.previousSibling;
        }

        // update child refs
        if(this.firstChild == node){
            this.setFirstChild(node.nextSibling);
        }
        if(this.lastChild == node){
            this.setLastChild(node.previousSibling);
        }

        node.setOwnerTree(null);
        // clear any references from the node
        node.parentNode = null;
        node.previousSibling = null;
        node.nextSibling = null;
        this.fireEvent("remove", this.ownerTree, this, node);
        return node;
    },

    /**
     * Inserts the first node before the second node in this nodes childNodes collection.
     * @param {Node} node The node to insert
     * @param {Node} refNode The node to insert before (if null the node is appended)
     * @return {Node} The inserted node
     */
    insertBefore : function(node, refNode){
        if(!refNode){ // like standard Dom, refNode can be null for append
            return this.appendChild(node);
        }
        // nothing to do
        if(node == refNode){
            return false;
        }

        if(this.fireEvent("beforeinsert", this.ownerTree, this, node, refNode) === false){
            return false;
        }
        var index = this.childNodes.indexOf(refNode);
        var oldParent = node.parentNode;
        var refIndex = index;

        // when moving internally, indexes will change after remove
        if(oldParent == this && this.childNodes.indexOf(node) < index){
            refIndex--;
        }

        // it's a move, make sure we move it cleanly
        if(oldParent){
            if(node.fireEvent("beforemove", node.getOwnerTree(), node, oldParent, this, index, refNode) === false){
                return false;
            }
            oldParent.removeChild(node);
        }
        if(refIndex == 0){
            this.setFirstChild(node);
        }
        this.childNodes.splice(refIndex, 0, node);
        node.parentNode = this;
        var ps = this.childNodes[refIndex-1];
        if(ps){
            node.previousSibling = ps;
            ps.nextSibling = node;
        }else{
            node.previousSibling = null;
        }
        node.nextSibling = refNode;
        refNode.previousSibling = node;
        node.setOwnerTree(this.getOwnerTree());
        this.fireEvent("insert", this.ownerTree, this, node, refNode);
        if(oldParent){
            node.fireEvent("move", this.ownerTree, node, oldParent, this, refIndex, refNode);
        }
        return node;
    },

    /**
     * Returns the child node at the specified index.
     * @param {Number} index
     * @return {Node}
     */
    item : function(index){
        return this.childNodes[index];
    },

    /**
     * Replaces one child node in this node with another.
     * @param {Node} newChild The replacement node
     * @param {Node} oldChild The node to replace
     * @return {Node} The replaced node
     */
    replaceChild : function(newChild, oldChild){
        this.insertBefore(newChild, oldChild);
        this.removeChild(oldChild);
        return oldChild;
    },

    /**
     * Returns the index of a child node
     * @param {Node} node
     * @return {Number} The index of the node or -1 if it was not found
     */
    indexOf : function(child){
        return this.childNodes.indexOf(child);
    },

    /**
     * Returns the tree this node is in.
     * @return {Tree}
     */
    getOwnerTree : function(){
        // if it doesn't have one, look for one
        if(!this.ownerTree){
            var p = this;
            while(p){
                if(p.ownerTree){
                    this.ownerTree = p.ownerTree;
                    break;
                }
                p = p.parentNode;
            }
        }
        return this.ownerTree;
    },

    /**
     * Returns depth of this node (the root node has a depth of 0)
     * @return {Number}
     */
    getDepth : function(){
        var depth = 0;
        var p = this;
        while(p.parentNode){
            ++depth;
            p = p.parentNode;
        }
        return depth;
    },

    // private
    setOwnerTree : function(tree){
        // if it's move, we need to update everyone
        if(tree != this.ownerTree){
            if(this.ownerTree){
                this.ownerTree.unregisterNode(this);
            }
            this.ownerTree = tree;
            var cs = this.childNodes;
            for(var i = 0, len = cs.length; i < len; i++) {
            	cs[i].setOwnerTree(tree);
            }
            if(tree){
                tree.registerNode(this);
            }
        }
    },

    /**
     * Returns the path for this node. The path can be used to expand or select this node programmatically.
     * @param {String} attr (optional) The attr to use for the path (defaults to the node's id)
     * @return {String} The path
     */
    getPath : function(attr){
        attr = attr || "id";
        var p = this.parentNode;
        var b = [this.attributes[attr]];
        while(p){
            b.unshift(p.attributes[attr]);
            p = p.parentNode;
        }
        var sep = this.getOwnerTree().pathSeparator;
        return sep + b.join(sep);
    },

    /**
     * Bubbles up the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of
     * function call will be the scope provided or the current node. The arguments to the function
     * will be the args provided or the current node. If the function returns false at any point,
     * the bubble is stopped.
     * @param {Function} fn The function to call
     * @param {Object} scope (optional) The scope of the function (defaults to current node)
     * @param {Array} args (optional) The args to call the function with (default to passing the current node)
     */
    bubble : function(fn, scope, args){
        var p = this;
        while(p){
            if(fn.call(scope || p, args || p) === false){
                break;
            }
            p = p.parentNode;
        }
    },

    /**
     * Cascades down the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of
     * function call will be the scope provided or the current node. The arguments to the function
     * will be the args provided or the current node. If the function returns false at any point,
     * the cascade is stopped on that branch.
     * @param {Function} fn The function to call
     * @param {Object} scope (optional) The scope of the function (defaults to current node)
     * @param {Array} args (optional) The args to call the function with (default to passing the current node)
     */
    cascade : function(fn, scope, args){
        if(fn.call(scope || this, args || this) !== false){
            var cs = this.childNodes;
            for(var i = 0, len = cs.length; i < len; i++) {
            	cs[i].cascade(fn, scope, args);
            }
        }
    },

    /**
     * Interates the child nodes of this node, calling the specified function with each node. The scope (<i>this</i>) of
     * function call will be the scope provided or the current node. The arguments to the function
     * will be the args provided or the current node. If the function returns false at any point,
     * the iteration stops.
     * @param {Function} fn The function to call
     * @param {Object} scope (optional) The scope of the function (defaults to current node)
     * @param {Array} args (optional) The args to call the function with (default to passing the current node)
     */
    eachChild : function(fn, scope, args){
        var cs = this.childNodes;
        for(var i = 0, len = cs.length; i < len; i++) {
        	if(fn.call(scope || this, args || cs[i]) === false){
        	    break;
        	}
        }
    },

    /**
     * Finds the first child that has the attribute with the specified value.
     * @param {String} attribute The attribute name
     * @param {Mixed} value The value to search for
     * @return {Node} The found child or null if none was found
     */
    findChild : function(attribute, value){
        var cs = this.childNodes;
        for(var i = 0, len = cs.length; i < len; i++) {
        	if(cs[i].attributes[attribute] == value){
        	    return cs[i];
        	}
        }
        return null;
    },

    /**
     * Finds the first child by a custom function. The child matches if the function passed
     * returns true.
     * @param {Function} fn
     * @param {Object} scope (optional)
     * @return {Node} The found child or null if none was found
     */
    findChildBy : function(fn, scope){
        var cs = this.childNodes;
        for(var i = 0, len = cs.length; i < len; i++) {
        	if(fn.call(scope||cs[i], cs[i]) === true){
        	    return cs[i];
        	}
        }
        return null;
    },

    /**
     * Sorts this nodes children using the supplied sort function
     * @param {Function} fn
     * @param {Object} scope (optional)
     */
    sort : function(fn, scope){
        var cs = this.childNodes;
        var len = cs.length;
        if(len > 0){
            var sortFn = scope ? function(){fn.apply(scope, arguments);} : fn;
            cs.sort(sortFn);
            for(var i = 0; i < len; i++){
                var n = cs[i];
                n.previousSibling = cs[i-1];
                n.nextSibling = cs[i+1];
                if(i == 0){
                    this.setFirstChild(n);
                }
                if(i == len-1){
                    this.setLastChild(n);
                }
            }
        }
    },

    /**
     * Returns true if this node is an ancestor (at any point) of the passed node.
     * @param {Node} node
     * @return {Boolean}
     */
    contains : function(node){
        return node.isAncestor(this);
    },

    /**
     * Returns true if the passed node is an ancestor (at any point) of this node.
     * @param {Node} node
     * @return {Boolean}
     */
    isAncestor : function(node){
        var p = this.parentNode;
        while(p){
            if(p == node){
                return true;
            }
            p = p.parentNode;
        }
        return false;
    },

    toString : function(){
        return "[Node"+(this.id?" "+this.id:"")+"]";
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */


/**
 * @class Roo.Shadow
 * Simple class that can provide a shadow effect for any element.  Note that the element MUST be absolutely positioned,
 * and the shadow does not provide any shimming.  This should be used only in simple cases -- for more advanced
 * functionality that can also provide the same shadow effect, see the {@link Roo.Layer} class.
 * @constructor
 * Create a new Shadow
 * @param {Object} config The config object
 */
Roo.Shadow = function(config){
    Roo.apply(this, config);
    if(typeof this.mode != "string"){
        this.mode = this.defaultMode;
    }
    var o = this.offset, a = {h: 0};
    var rad = Math.floor(this.offset/2);
    switch(this.mode.toLowerCase()){ // all this hideous nonsense calculates the various offsets for shadows
        case "drop":
            a.w = 0;
            a.l = a.t = o;
            a.t -= 1;
            if(Roo.isIE){
                a.l -= this.offset + rad;
                a.t -= this.offset + rad;
                a.w -= rad;
                a.h -= rad;
                a.t += 1;
            }
        break;
        case "sides":
            a.w = (o*2);
            a.l = -o;
            a.t = o-1;
            if(Roo.isIE){
                a.l -= (this.offset - rad);
                a.t -= this.offset + rad;
                a.l += 1;
                a.w -= (this.offset - rad)*2;
                a.w -= rad + 1;
                a.h -= 1;
            }
        break;
        case "frame":
            a.w = a.h = (o*2);
            a.l = a.t = -o;
            a.t += 1;
            a.h -= 2;
            if(Roo.isIE){
                a.l -= (this.offset - rad);
                a.t -= (this.offset - rad);
                a.l += 1;
                a.w -= (this.offset + rad + 1);
                a.h -= (this.offset + rad);
                a.h += 1;
            }
        break;
    };

    this.adjusts = a;
};

Roo.Shadow.prototype = {
    /**
     * @cfg {String} mode
     * The shadow display mode.  Supports the following options:<br />
     * sides: Shadow displays on both sides and bottom only<br />
     * frame: Shadow displays equally on all four sides<br />
     * drop: Traditional bottom-right drop shadow (default)
     */
    mode: false,
    /**
     * @cfg {String} offset
     * The number of pixels to offset the shadow from the element (defaults to 4)
     */
    offset: 4,

    // private
    defaultMode: "drop",

    /**
     * Displays the shadow under the target element
     * @param {String/HTMLElement/Element} targetEl The id or element under which the shadow should display
     */
    show : function(target){
        target = Roo.get(target);
        if(!this.el){
            this.el = Roo.Shadow.Pool.pull();
            if(this.el.dom.nextSibling != target.dom){
                this.el.insertBefore(target);
            }
        }
        this.el.setStyle("z-index", this.zIndex || parseInt(target.getStyle("z-index"), 10)-1);
        if(Roo.isIE){
            this.el.dom.style.filter="progid:DXImageTransform.Microsoft.alpha(opacity=50) progid:DXImageTransform.Microsoft.Blur(pixelradius="+(this.offset)+")";
        }
        this.realign(
            target.getLeft(true),
            target.getTop(true),
            target.getWidth(),
            target.getHeight()
        );
        this.el.dom.style.display = "block";
    },

    /**
     * Returns true if the shadow is visible, else false
     */
    isVisible : function(){
        return this.el ? true : false;  
    },

    /**
     * Direct alignment when values are already available. Show must be called at least once before
     * calling this method to ensure it is initialized.
     * @param {Number} left The target element left position
     * @param {Number} top The target element top position
     * @param {Number} width The target element width
     * @param {Number} height The target element height
     */
    realign : function(l, t, w, h){
        if(!this.el){
            return;
        }
        var a = this.adjusts, d = this.el.dom, s = d.style;
        var iea = 0;
        s.left = (l+a.l)+"px";
        s.top = (t+a.t)+"px";
        var sw = (w+a.w), sh = (h+a.h), sws = sw +"px", shs = sh + "px";
 
        if(s.width != sws || s.height != shs){
            s.width = sws;
            s.height = shs;
            if(!Roo.isIE){
                var cn = d.childNodes;
                var sww = Math.max(0, (sw-12))+"px";
                cn[0].childNodes[1].style.width = sww;
                cn[1].childNodes[1].style.width = sww;
                cn[2].childNodes[1].style.width = sww;
                cn[1].style.height = Math.max(0, (sh-12))+"px";
            }
        }
    },

    /**
     * Hides this shadow
     */
    hide : function(){
        if(this.el){
            this.el.dom.style.display = "none";
            Roo.Shadow.Pool.push(this.el);
            delete this.el;
        }
    },

    /**
     * Adjust the z-index of this shadow
     * @param {Number} zindex The new z-index
     */
    setZIndex : function(z){
        this.zIndex = z;
        if(this.el){
            this.el.setStyle("z-index", z);
        }
    }
};

// Private utility class that manages the internal Shadow cache
Roo.Shadow.Pool = function(){
    var p = [];
    var markup = Roo.isIE ?
                 '<div class="x-ie-shadow"></div>' :
                 '<div class="x-shadow"><div class="xst"><div class="xstl"></div><div class="xstc"></div><div class="xstr"></div></div><div class="xsc"><div class="xsml"></div><div class="xsmc"></div><div class="xsmr"></div></div><div class="xsb"><div class="xsbl"></div><div class="xsbc"></div><div class="xsbr"></div></div></div>';
    return {
        pull : function(){
            var sh = p.shift();
            if(!sh){
                sh = Roo.get(Roo.DomHelper.insertHtml("beforeBegin", document.body.firstChild, markup));
                sh.autoBoxAdjust = false;
            }
            return sh;
        },

        push : function(sh){
            p.push(sh);
        }
    };
}();/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */


/**
 * @class Roo.SplitBar
 * @extends Roo.util.Observable
 * Creates draggable splitter bar functionality from two elements (element to be dragged and element to be resized).
 * <br><br>
 * Usage:
 * <pre><code>
var split = new Roo.SplitBar("elementToDrag", "elementToSize",
                   Roo.SplitBar.HORIZONTAL, Roo.SplitBar.LEFT);
split.setAdapter(new Roo.SplitBar.AbsoluteLayoutAdapter("container"));
split.minSize = 100;
split.maxSize = 600;
split.animate = true;
split.on('moved', splitterMoved);
</code></pre>
 * @constructor
 * Create a new SplitBar
 * @param {String/HTMLElement/Roo.Element} dragElement The element to be dragged and act as the SplitBar. 
 * @param {String/HTMLElement/Roo.Element} resizingElement The element to be resized based on where the SplitBar element is dragged 
 * @param {Number} orientation (optional) Either Roo.SplitBar.HORIZONTAL or Roo.SplitBar.VERTICAL. (Defaults to HORIZONTAL)
 * @param {Number} placement (optional) Either Roo.SplitBar.LEFT or Roo.SplitBar.RIGHT for horizontal or  
                        Roo.SplitBar.TOP or Roo.SplitBar.BOTTOM for vertical. (By default, this is determined automatically by the initial
                        position of the SplitBar).
 */
Roo.SplitBar = function(dragElement, resizingElement, orientation, placement, existingProxy){
    
    /** @private */
    this.el = Roo.get(dragElement, true);
    this.el.dom.unselectable = "on";
    /** @private */
    this.resizingEl = Roo.get(resizingElement, true);

    /**
     * @private
     * The orientation of the split. Either Roo.SplitBar.HORIZONTAL or Roo.SplitBar.VERTICAL. (Defaults to HORIZONTAL)
     * Note: If this is changed after creating the SplitBar, the placement property must be manually updated
     * @type Number
     */
    this.orientation = orientation || Roo.SplitBar.HORIZONTAL;
    
    /**
     * The minimum size of the resizing element. (Defaults to 0)
     * @type Number
     */
    this.minSize = 0;
    
    /**
     * The maximum size of the resizing element. (Defaults to 2000)
     * @type Number
     */
    this.maxSize = 2000;
    
    /**
     * Whether to animate the transition to the new size
     * @type Boolean
     */
    this.animate = false;
    
    /**
     * Whether to create a transparent shim that overlays the page when dragging, enables dragging across iframes.
     * @type Boolean
     */
    this.useShim = false;
    
    /** @private */
    this.shim = null;
    
    if(!existingProxy){
        /** @private */
        this.proxy = Roo.SplitBar.createProxy(this.orientation);
    }else{
        this.proxy = Roo.get(existingProxy).dom;
    }
    /** @private */
    this.dd = new Roo.dd.DDProxy(this.el.dom.id, "XSplitBars", {dragElId : this.proxy.id});
    
    /** @private */
    this.dd.b4StartDrag = this.onStartProxyDrag.createDelegate(this);
    
    /** @private */
    this.dd.endDrag = this.onEndProxyDrag.createDelegate(this);
    
    /** @private */
    this.dragSpecs = {};
    
    /**
     * @private The adapter to use to positon and resize elements
     */
    this.adapter = new Roo.SplitBar.BasicLayoutAdapter();
    this.adapter.init(this);
    
    if(this.orientation == Roo.SplitBar.HORIZONTAL){
        /** @private */
        this.placement = placement || (this.el.getX() > this.resizingEl.getX() ? Roo.SplitBar.LEFT : Roo.SplitBar.RIGHT);
        this.el.addClass("x-splitbar-h");
    }else{
        /** @private */
        this.placement = placement || (this.el.getY() > this.resizingEl.getY() ? Roo.SplitBar.TOP : Roo.SplitBar.BOTTOM);
        this.el.addClass("x-splitbar-v");
    }
    
    this.addEvents({
        /**
         * @event resize
         * Fires when the splitter is moved (alias for {@link #event-moved})
         * @param {Roo.SplitBar} this
         * @param {Number} newSize the new width or height
         */
        "resize" : true,
        /**
         * @event moved
         * Fires when the splitter is moved
         * @param {Roo.SplitBar} this
         * @param {Number} newSize the new width or height
         */
        "moved" : true,
        /**
         * @event beforeresize
         * Fires before the splitter is dragged
         * @param {Roo.SplitBar} this
         */
        "beforeresize" : true,

        "beforeapply" : true
    });

    Roo.util.Observable.call(this);
};

Roo.extend(Roo.SplitBar, Roo.util.Observable, {
    onStartProxyDrag : function(x, y){
        this.fireEvent("beforeresize", this);
        if(!this.overlay){
            var o = Roo.DomHelper.insertFirst(document.body,  {cls: "x-drag-overlay", html: "&#160;"}, true);
            o.unselectable();
            o.enableDisplayMode("block");
            // all splitbars share the same overlay
            Roo.SplitBar.prototype.overlay = o;
        }
        this.overlay.setSize(Roo.lib.Dom.getViewWidth(true), Roo.lib.Dom.getViewHeight(true));
        this.overlay.show();
        Roo.get(this.proxy).setDisplayed("block");
        var size = this.adapter.getElementSize(this);
        this.activeMinSize = this.getMinimumSize();;
        this.activeMaxSize = this.getMaximumSize();;
        var c1 = size - this.activeMinSize;
        var c2 = Math.max(this.activeMaxSize - size, 0);
        if(this.orientation == Roo.SplitBar.HORIZONTAL){
            this.dd.resetConstraints();
            this.dd.setXConstraint(
                this.placement == Roo.SplitBar.LEFT ? c1 : c2, 
                this.placement == Roo.SplitBar.LEFT ? c2 : c1
            );
            this.dd.setYConstraint(0, 0);
        }else{
            this.dd.resetConstraints();
            this.dd.setXConstraint(0, 0);
            this.dd.setYConstraint(
                this.placement == Roo.SplitBar.TOP ? c1 : c2, 
                this.placement == Roo.SplitBar.TOP ? c2 : c1
            );
         }
        this.dragSpecs.startSize = size;
        this.dragSpecs.startPoint = [x, y];
        Roo.dd.DDProxy.prototype.b4StartDrag.call(this.dd, x, y);
    },
    
    /** 
     * @private Called after the drag operation by the DDProxy
     */
    onEndProxyDrag : function(e){
        Roo.get(this.proxy).setDisplayed(false);
        var endPoint = Roo.lib.Event.getXY(e);
        if(this.overlay){
            this.overlay.hide();
        }
        var newSize;
        if(this.orientation == Roo.SplitBar.HORIZONTAL){
            newSize = this.dragSpecs.startSize + 
                (this.placement == Roo.SplitBar.LEFT ?
                    endPoint[0] - this.dragSpecs.startPoint[0] :
                    this.dragSpecs.startPoint[0] - endPoint[0]
                );
        }else{
            newSize = this.dragSpecs.startSize + 
                (this.placement == Roo.SplitBar.TOP ?
                    endPoint[1] - this.dragSpecs.startPoint[1] :
                    this.dragSpecs.startPoint[1] - endPoint[1]
                );
        }
        newSize = Math.min(Math.max(newSize, this.activeMinSize), this.activeMaxSize);
        if(newSize != this.dragSpecs.startSize){
            if(this.fireEvent('beforeapply', this, newSize) !== false){
                this.adapter.setElementSize(this, newSize);
                this.fireEvent("moved", this, newSize);
                this.fireEvent("resize", this, newSize);
            }
        }
    },
    
    /**
     * Get the adapter this SplitBar uses
     * @return The adapter object
     */
    getAdapter : function(){
        return this.adapter;
    },
    
    /**
     * Set the adapter this SplitBar uses
     * @param {Object} adapter A SplitBar adapter object
     */
    setAdapter : function(adapter){
        this.adapter = adapter;
        this.adapter.init(this);
    },
    
    /**
     * Gets the minimum size for the resizing element
     * @return {Number} The minimum size
     */
    getMinimumSize : function(){
        return this.minSize;
    },
    
    /**
     * Sets the minimum size for the resizing element
     * @param {Number} minSize The minimum size
     */
    setMinimumSize : function(minSize){
        this.minSize = minSize;
    },
    
    /**
     * Gets the maximum size for the resizing element
     * @return {Number} The maximum size
     */
    getMaximumSize : function(){
        return this.maxSize;
    },
    
    /**
     * Sets the maximum size for the resizing element
     * @param {Number} maxSize The maximum size
     */
    setMaximumSize : function(maxSize){
        this.maxSize = maxSize;
    },
    
    /**
     * Sets the initialize size for the resizing element
     * @param {Number} size The initial size
     */
    setCurrentSize : function(size){
        var oldAnimate = this.animate;
        this.animate = false;
        this.adapter.setElementSize(this, size);
        this.animate = oldAnimate;
    },
    
    /**
     * Destroy this splitbar. 
     * @param {Boolean} removeEl True to remove the element
     */
    destroy : function(removeEl){
        if(this.shim){
            this.shim.remove();
        }
        this.dd.unreg();
        this.proxy.parentNode.removeChild(this.proxy);
        if(removeEl){
            this.el.remove();
        }
    }
});

/**
 * @private static Create our own proxy element element. So it will be the same same size on all browsers, we won't use borders. Instead we use a background color.
 */
Roo.SplitBar.createProxy = function(dir){
    var proxy = new Roo.Element(document.createElement("div"));
    proxy.unselectable();
    var cls = 'x-splitbar-proxy';
    proxy.addClass(cls + ' ' + (dir == Roo.SplitBar.HORIZONTAL ? cls +'-h' : cls + '-v'));
    document.body.appendChild(proxy.dom);
    return proxy.dom;
};

/** 
 * @class Roo.SplitBar.BasicLayoutAdapter
 * Default Adapter. It assumes the splitter and resizing element are not positioned
 * elements and only gets/sets the width of the element. Generally used for table based layouts.
 */
Roo.SplitBar.BasicLayoutAdapter = function(){
};

Roo.SplitBar.BasicLayoutAdapter.prototype = {
    // do nothing for now
    init : function(s){
    
    },
    /**
     * Called before drag operations to get the current size of the resizing element. 
     * @param {Roo.SplitBar} s The SplitBar using this adapter
     */
     getElementSize : function(s){
        if(s.orientation == Roo.SplitBar.HORIZONTAL){
            return s.resizingEl.getWidth();
        }else{
            return s.resizingEl.getHeight();
        }
    },
    
    /**
     * Called after drag operations to set the size of the resizing element.
     * @param {Roo.SplitBar} s The SplitBar using this adapter
     * @param {Number} newSize The new size to set
     * @param {Function} onComplete A function to be invoked when resizing is complete
     */
    setElementSize : function(s, newSize, onComplete){
        if(s.orientation == Roo.SplitBar.HORIZONTAL){
            if(!s.animate){
                s.resizingEl.setWidth(newSize);
                if(onComplete){
                    onComplete(s, newSize);
                }
            }else{
                s.resizingEl.setWidth(newSize, true, .1, onComplete, 'easeOut');
            }
        }else{
            
            if(!s.animate){
                s.resizingEl.setHeight(newSize);
                if(onComplete){
                    onComplete(s, newSize);
                }
            }else{
                s.resizingEl.setHeight(newSize, true, .1, onComplete, 'easeOut');
            }
        }
    }
};

/** 
 *@class Roo.SplitBar.AbsoluteLayoutAdapter
 * @extends Roo.SplitBar.BasicLayoutAdapter
 * Adapter that  moves the splitter element to align with the resized sizing element. 
 * Used with an absolute positioned SplitBar.
 * @param {String/HTMLElement/Roo.Element} container The container that wraps around the absolute positioned content. If it's
 * document.body, make sure you assign an id to the body element.
 */
Roo.SplitBar.AbsoluteLayoutAdapter = function(container){
    this.basic = new Roo.SplitBar.BasicLayoutAdapter();
    this.container = Roo.get(container);
};

Roo.SplitBar.AbsoluteLayoutAdapter.prototype = {
    init : function(s){
        this.basic.init(s);
    },
    
    getElementSize : function(s){
        return this.basic.getElementSize(s);
    },
    
    setElementSize : function(s, newSize, onComplete){
        this.basic.setElementSize(s, newSize, this.moveSplitter.createDelegate(this, [s]));
    },
    
    moveSplitter : function(s){
        var yes = Roo.SplitBar;
        switch(s.placement){
            case yes.LEFT:
                s.el.setX(s.resizingEl.getRight());
                break;
            case yes.RIGHT:
                s.el.setStyle("right", (this.container.getWidth() - s.resizingEl.getLeft()) + "px");
                break;
            case yes.TOP:
                s.el.setY(s.resizingEl.getBottom());
                break;
            case yes.BOTTOM:
                s.el.setY(s.resizingEl.getTop() - s.el.getHeight());
                break;
        }
    }
};

/**
 * Orientation constant - Create a vertical SplitBar
 * @static
 * @type Number
 */
Roo.SplitBar.VERTICAL = 1;

/**
 * Orientation constant - Create a horizontal SplitBar
 * @static
 * @type Number
 */
Roo.SplitBar.HORIZONTAL = 2;

/**
 * Placement constant - The resizing element is to the left of the splitter element
 * @static
 * @type Number
 */
Roo.SplitBar.LEFT = 1;

/**
 * Placement constant - The resizing element is to the right of the splitter element
 * @static
 * @type Number
 */
Roo.SplitBar.RIGHT = 2;

/**
 * Placement constant - The resizing element is positioned above the splitter element
 * @static
 * @type Number
 */
Roo.SplitBar.TOP = 3;

/**
 * Placement constant - The resizing element is positioned under splitter element
 * @static
 * @type Number
 */
Roo.SplitBar.BOTTOM = 4;
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.View
 * @extends Roo.util.Observable
 * Create a "View" for an element based on a data model or UpdateManager and the supplied DomHelper template. 
 * This class also supports single and multi selection modes. <br>
 * Create a data model bound view:
 <pre><code>
 var store = new Roo.data.Store(...);

 var view = new Roo.View({
    el : "my-element",
    tpl : '&lt;div id="{0}"&gt;{2} - {1}&lt;/div&gt;', // auto create template
 
    singleSelect: true,
    selectedClass: "ydataview-selected",
    store: store
 });

 // listen for node click?
 view.on("click", function(vw, index, node, e){
 alert('Node "' + node.id + '" at index: ' + index + " was clicked.");
 });

 // load XML data
 dataModel.load("foobar.xml");
 </code></pre>
 For an example of creating a JSON/UpdateManager view, see {@link Roo.JsonView}.
 * <br><br>
 * <b>Note: The root of your template must be a single node. Table/row implementations may work but are not supported due to
 * IE"s limited insertion support with tables and Opera"s faulty event bubbling.</b>
 * 
 * Note: old style constructor is still suported (container, template, config)
 * 
 * @constructor
 * Create a new View
 * @param {Object} config The config object
 * 
 */
Roo.View = function(config, depreciated_tpl, depreciated_config){
    
    this.parent = false;
    
    if (typeof(depreciated_tpl) == 'undefined') {
        // new way.. - universal constructor.
        Roo.apply(this, config);
        this.el  = Roo.get(this.el);
    } else {
        // old format..
        this.el  = Roo.get(config);
        this.tpl = depreciated_tpl;
        Roo.apply(this, depreciated_config);
    }
    this.wrapEl  = this.el.wrap().wrap();
    ///this.el = this.wrapEla.appendChild(document.createElement("div"));
    
    
    if(typeof(this.tpl) == "string"){
        this.tpl = new Roo.Template(this.tpl);
    } else {
        // support xtype ctors..
        this.tpl = new Roo.factory(this.tpl, Roo);
    }
    
    
    this.tpl.compile();
    
    /** @private */
    this.addEvents({
        /**
         * @event beforeclick
         * Fires before a click is processed. Returns false to cancel the default action.
         * @param {Roo.View} this
         * @param {Number} index The index of the target node
         * @param {HTMLElement} node The target node
         * @param {Roo.EventObject} e The raw event object
         */
            "beforeclick" : true,
        /**
         * @event click
         * Fires when a template node is clicked.
         * @param {Roo.View} this
         * @param {Number} index The index of the target node
         * @param {HTMLElement} node The target node
         * @param {Roo.EventObject} e The raw event object
         */
            "click" : true,
        /**
         * @event dblclick
         * Fires when a template node is double clicked.
         * @param {Roo.View} this
         * @param {Number} index The index of the target node
         * @param {HTMLElement} node The target node
         * @param {Roo.EventObject} e The raw event object
         */
            "dblclick" : true,
        /**
         * @event contextmenu
         * Fires when a template node is right clicked.
         * @param {Roo.View} this
         * @param {Number} index The index of the target node
         * @param {HTMLElement} node The target node
         * @param {Roo.EventObject} e The raw event object
         */
            "contextmenu" : true,
        /**
         * @event selectionchange
         * Fires when the selected nodes change.
         * @param {Roo.View} this
         * @param {Array} selections Array of the selected nodes
         */
            "selectionchange" : true,
    
        /**
         * @event beforeselect
         * Fires before a selection is made. If any handlers return false, the selection is cancelled.
         * @param {Roo.View} this
         * @param {HTMLElement} node The node to be selected
         * @param {Array} selections Array of currently selected nodes
         */
            "beforeselect" : true,
        /**
         * @event preparedata
         * Fires on every row to render, to allow you to change the data.
         * @param {Roo.View} this
         * @param {Object} data to be rendered (change this)
         */
          "preparedata" : true
          
          
        });



    this.el.on({
        "click": this.onClick,
        "dblclick": this.onDblClick,
        "contextmenu": this.onContextMenu,
        scope:this
    });

    this.selections = [];
    this.nodes = [];
    this.cmp = new Roo.CompositeElementLite([]);
    if(this.store){
        this.store = Roo.factory(this.store, Roo.data);
        this.setStore(this.store, true);
    }
    
    if ( this.footer && this.footer.xtype) {
           
         var fctr = this.wrapEl.appendChild(document.createElement("div"));
        
        this.footer.dataSource = this.store;
        this.footer.container = fctr;
        this.footer = Roo.factory(this.footer, Roo);
        fctr.insertFirst(this.el);
        
        // this is a bit insane - as the paging toolbar seems to detach the el..
//        dom.parentNode.parentNode.parentNode
         // they get detached?
    }
    
    
    Roo.View.superclass.constructor.call(this);
    
    
};

Roo.extend(Roo.View, Roo.util.Observable, {
    
     /**
     * @cfg {Roo.data.Store} store Data store to load data from.
     */
    store : false,
    
    /**
     * @cfg {String|Roo.Element} el The container element.
     */
    el : '',
    
    /**
     * @cfg {String|Roo.Template} tpl The template used by this View 
     */
    tpl : false,
    /**
     * @cfg {String} dataName the named area of the template to use as the data area
     *                          Works with domtemplates roo-name="name"
     */
    dataName: false,
    /**
     * @cfg {String} selectedClass The css class to add to selected nodes
     */
    selectedClass : "x-view-selected",
     /**
     * @cfg {String} emptyText The empty text to show when nothing is loaded.
     */
    emptyText : "",
    
    /**
     * @cfg {String} text to display on mask (default Loading)
     */
    mask : false,
    /**
     * @cfg {Boolean} multiSelect Allow multiple selection
     */
    multiSelect : false,
    /**
     * @cfg {Boolean} singleSelect Allow single selection
     */
    singleSelect:  false,
    
    /**
     * @cfg {Boolean} toggleSelect - selecting 
     */
    toggleSelect : false,
    
    /**
     * @cfg {Boolean} tickable - selecting 
     */
    tickable : false,
    
    /**
     * Returns the element this view is bound to.
     * @return {Roo.Element}
     */
    getEl : function(){
        return this.wrapEl;
    },
    
    

    /**
     * Refreshes the view. - called by datachanged on the store. - do not call directly.
     */
    refresh : function(){
        //Roo.log('refresh');
        var t = this.tpl;
        
        // if we are using something like 'domtemplate', then
        // the what gets used is:
        // t.applySubtemplate(NAME, data, wrapping data..)
        // the outer template then get' applied with
        //     the store 'extra data'
        // and the body get's added to the
        //      roo-name="data" node?
        //      <span class='roo-tpl-{name}'></span> ?????
        
        
        
        this.clearSelections();
        this.el.update("");
        var html = [];
        var records = this.store.getRange();
        if(records.length < 1) {
            
            // is this valid??  = should it render a template??
            
            this.el.update(this.emptyText);
            return;
        }
        var el = this.el;
        if (this.dataName) {
            this.el.update(t.apply(this.store.meta)); //????
            el = this.el.child('.roo-tpl-' + this.dataName);
        }
        
        for(var i = 0, len = records.length; i < len; i++){
            var data = this.prepareData(records[i].data, i, records[i]);
            this.fireEvent("preparedata", this, data, i, records[i]);
            
            var d = Roo.apply({}, data);
            
            if(this.tickable){
                Roo.apply(d, {'roo-id' : Roo.id()});
                
                var _this = this;
            
                Roo.each(this.parent.item, function(item){
                    if(item[_this.parent.valueField] != data[_this.parent.valueField]){
                        return;
                    }
                    Roo.apply(d, {'roo-data-checked' : 'checked'});
                });
            }
            
            html[html.length] = Roo.util.Format.trim(
                this.dataName ?
                    t.applySubtemplate(this.dataName, d, this.store.meta) :
                    t.apply(d)
            );
        }
        
        
        
        el.update(html.join(""));
        this.nodes = el.dom.childNodes;
        this.updateIndexes(0);
    },
    

    /**
     * Function to override to reformat the data that is sent to
     * the template for each node.
     * DEPRICATED - use the preparedata event handler.
     * @param {Array/Object} data The raw data (array of colData for a data model bound view or
     * a JSON object for an UpdateManager bound view).
     */
    prepareData : function(data, index, record)
    {
        this.fireEvent("preparedata", this, data, index, record);
        return data;
    },

    onUpdate : function(ds, record){
        // Roo.log('on update');   
        this.clearSelections();
        var index = this.store.indexOf(record);
        var n = this.nodes[index];
        this.tpl.insertBefore(n, this.prepareData(record.data, index, record));
        n.parentNode.removeChild(n);
        this.updateIndexes(index, index);
    },

    
    
// --------- FIXME     
    onAdd : function(ds, records, index)
    {
        //Roo.log(['on Add', ds, records, index] );        
        this.clearSelections();
        if(this.nodes.length == 0){
            this.refresh();
            return;
        }
        var n = this.nodes[index];
        for(var i = 0, len = records.length; i < len; i++){
            var d = this.prepareData(records[i].data, i, records[i]);
            if(n){
                this.tpl.insertBefore(n, d);
            }else{
                
                this.tpl.append(this.el, d);
            }
        }
        this.updateIndexes(index);
    },

    onRemove : function(ds, record, index){
       // Roo.log('onRemove');
        this.clearSelections();
        var el = this.dataName  ?
            this.el.child('.roo-tpl-' + this.dataName) :
            this.el; 
        
        el.dom.removeChild(this.nodes[index]);
        this.updateIndexes(index);
    },

    /**
     * Refresh an individual node.
     * @param {Number} index
     */
    refreshNode : function(index){
        this.onUpdate(this.store, this.store.getAt(index));
    },

    updateIndexes : function(startIndex, endIndex){
        var ns = this.nodes;
        startIndex = startIndex || 0;
        endIndex = endIndex || ns.length - 1;
        for(var i = startIndex; i <= endIndex; i++){
            ns[i].nodeIndex = i;
        }
    },

    /**
     * Changes the data store this view uses and refresh the view.
     * @param {Store} store
     */
    setStore : function(store, initial){
        if(!initial && this.store){
            this.store.un("datachanged", this.refresh);
            this.store.un("add", this.onAdd);
            this.store.un("remove", this.onRemove);
            this.store.un("update", this.onUpdate);
            this.store.un("clear", this.refresh);
            this.store.un("beforeload", this.onBeforeLoad);
            this.store.un("load", this.onLoad);
            this.store.un("loadexception", this.onLoad);
        }
        if(store){
          
            store.on("datachanged", this.refresh, this);
            store.on("add", this.onAdd, this);
            store.on("remove", this.onRemove, this);
            store.on("update", this.onUpdate, this);
            store.on("clear", this.refresh, this);
            store.on("beforeload", this.onBeforeLoad, this);
            store.on("load", this.onLoad, this);
            store.on("loadexception", this.onLoad, this);
        }
        
        if(store){
            this.refresh();
        }
    },
    /**
     * onbeforeLoad - masks the loading area.
     *
     */
    onBeforeLoad : function(store,opts)
    {
         //Roo.log('onBeforeLoad');   
        if (!opts.add) {
            this.el.update("");
        }
        this.el.mask(this.mask ? this.mask : "Loading" ); 
    },
    onLoad : function ()
    {
        this.el.unmask();
    },
    

    /**
     * Returns the template node the passed child belongs to or null if it doesn't belong to one.
     * @param {HTMLElement} node
     * @return {HTMLElement} The template node
     */
    findItemFromChild : function(node){
        var el = this.dataName  ?
            this.el.child('.roo-tpl-' + this.dataName,true) :
            this.el.dom; 
        
        if(!node || node.parentNode == el){
		    return node;
	    }
	    var p = node.parentNode;
	    while(p && p != el){
            if(p.parentNode == el){
            	return p;
            }
            p = p.parentNode;
        }
	    return null;
    },

    /** @ignore */
    onClick : function(e){
        var item = this.findItemFromChild(e.getTarget());
        if(item){
            var index = this.indexOf(item);
            if(this.onItemClick(item, index, e) !== false){
                this.fireEvent("click", this, index, item, e);
            }
        }else{
            this.clearSelections();
        }
    },

    /** @ignore */
    onContextMenu : function(e){
        var item = this.findItemFromChild(e.getTarget());
        if(item){
            this.fireEvent("contextmenu", this, this.indexOf(item), item, e);
        }
    },

    /** @ignore */
    onDblClick : function(e){
        var item = this.findItemFromChild(e.getTarget());
        if(item){
            this.fireEvent("dblclick", this, this.indexOf(item), item, e);
        }
    },

    onItemClick : function(item, index, e)
    {
        if(this.fireEvent("beforeclick", this, index, item, e) === false){
            return false;
        }
        if (this.toggleSelect) {
            var m = this.isSelected(item) ? 'unselect' : 'select';
            //Roo.log(m);
            var _t = this;
            _t[m](item, true, false);
            return true;
        }
        if(this.multiSelect || this.singleSelect){
            if(this.multiSelect && e.shiftKey && this.lastSelection){
                this.select(this.getNodes(this.indexOf(this.lastSelection), index), false);
            }else{
                this.select(item, this.multiSelect && e.ctrlKey);
                this.lastSelection = item;
            }
            
            if(!this.tickable){
                e.preventDefault();
            }
            
        }
        return true;
    },

    /**
     * Get the number of selected nodes.
     * @return {Number}
     */
    getSelectionCount : function(){
        return this.selections.length;
    },

    /**
     * Get the currently selected nodes.
     * @return {Array} An array of HTMLElements
     */
    getSelectedNodes : function(){
        return this.selections;
    },

    /**
     * Get the indexes of the selected nodes.
     * @return {Array}
     */
    getSelectedIndexes : function(){
        var indexes = [], s = this.selections;
        for(var i = 0, len = s.length; i < len; i++){
            indexes.push(s[i].nodeIndex);
        }
        return indexes;
    },

    /**
     * Clear all selections
     * @param {Boolean} suppressEvent (optional) true to skip firing of the selectionchange event
     */
    clearSelections : function(suppressEvent){
        if(this.nodes && (this.multiSelect || this.singleSelect) && this.selections.length > 0){
            this.cmp.elements = this.selections;
            this.cmp.removeClass(this.selectedClass);
            this.selections = [];
            if(!suppressEvent){
                this.fireEvent("selectionchange", this, this.selections);
            }
        }
    },

    /**
     * Returns true if the passed node is selected
     * @param {HTMLElement/Number} node The node or node index
     * @return {Boolean}
     */
    isSelected : function(node){
        var s = this.selections;
        if(s.length < 1){
            return false;
        }
        node = this.getNode(node);
        return s.indexOf(node) !== -1;
    },

    /**
     * Selects nodes.
     * @param {Array/HTMLElement/String/Number} nodeInfo An HTMLElement template node, index of a template node, id of a template node or an array of any of those to select
     * @param {Boolean} keepExisting (optional) true to keep existing selections
     * @param {Boolean} suppressEvent (optional) true to skip firing of the selectionchange vent
     */
    select : function(nodeInfo, keepExisting, suppressEvent){
        if(nodeInfo instanceof Array){
            if(!keepExisting){
                this.clearSelections(true);
            }
            for(var i = 0, len = nodeInfo.length; i < len; i++){
                this.select(nodeInfo[i], true, true);
            }
            return;
        } 
        var node = this.getNode(nodeInfo);
        if(!node || this.isSelected(node)){
            return; // already selected.
        }
        if(!keepExisting){
            this.clearSelections(true);
        }
        
        if(this.fireEvent("beforeselect", this, node, this.selections) !== false){
            Roo.fly(node).addClass(this.selectedClass);
            this.selections.push(node);
            if(!suppressEvent){
                this.fireEvent("selectionchange", this, this.selections);
            }
        }
        
        
    },
      /**
     * Unselects nodes.
     * @param {Array/HTMLElement/String/Number} nodeInfo An HTMLElement template node, index of a template node, id of a template node or an array of any of those to select
     * @param {Boolean} keepExisting (optional) true IGNORED (for campatibility with select)
     * @param {Boolean} suppressEvent (optional) true to skip firing of the selectionchange vent
     */
    unselect : function(nodeInfo, keepExisting, suppressEvent)
    {
        if(nodeInfo instanceof Array){
            Roo.each(this.selections, function(s) {
                this.unselect(s, nodeInfo);
            }, this);
            return;
        }
        var node = this.getNode(nodeInfo);
        if(!node || !this.isSelected(node)){
            //Roo.log("not selected");
            return; // not selected.
        }
        // fireevent???
        var ns = [];
        Roo.each(this.selections, function(s) {
            if (s == node ) {
                Roo.fly(node).removeClass(this.selectedClass);

                return;
            }
            ns.push(s);
        },this);
        
        this.selections= ns;
        this.fireEvent("selectionchange", this, this.selections);
    },

    /**
     * Gets a template node.
     * @param {HTMLElement/String/Number} nodeInfo An HTMLElement template node, index of a template node or the id of a template node
     * @return {HTMLElement} The node or null if it wasn't found
     */
    getNode : function(nodeInfo){
        if(typeof nodeInfo == "string"){
            return document.getElementById(nodeInfo);
        }else if(typeof nodeInfo == "number"){
            return this.nodes[nodeInfo];
        }
        return nodeInfo;
    },

    /**
     * Gets a range template nodes.
     * @param {Number} startIndex
     * @param {Number} endIndex
     * @return {Array} An array of nodes
     */
    getNodes : function(start, end){
        var ns = this.nodes;
        start = start || 0;
        end = typeof end == "undefined" ? ns.length - 1 : end;
        var nodes = [];
        if(start <= end){
            for(var i = start; i <= end; i++){
                nodes.push(ns[i]);
            }
        } else{
            for(var i = start; i >= end; i--){
                nodes.push(ns[i]);
            }
        }
        return nodes;
    },

    /**
     * Finds the index of the passed node
     * @param {HTMLElement/String/Number} nodeInfo An HTMLElement template node, index of a template node or the id of a template node
     * @return {Number} The index of the node or -1
     */
    indexOf : function(node){
        node = this.getNode(node);
        if(typeof node.nodeIndex == "number"){
            return node.nodeIndex;
        }
        var ns = this.nodes;
        for(var i = 0, len = ns.length; i < len; i++){
            if(ns[i] == node){
                return i;
            }
        }
        return -1;
    }
});
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.JsonView
 * @extends Roo.View
 * Shortcut class to create a JSON + {@link Roo.UpdateManager} template view. Usage:
<pre><code>
var view = new Roo.JsonView({
    container: "my-element",
    tpl: '&lt;div id="{id}"&gt;{foo} - {bar}&lt;/div&gt;', // auto create template
    multiSelect: true, 
    jsonRoot: "data" 
});

// listen for node click?
view.on("click", function(vw, index, node, e){
    alert('Node "' + node.id + '" at index: ' + index + " was clicked.");
});

// direct load of JSON data
view.load("foobar.php");

// Example from my blog list
var tpl = new Roo.Template(
    '&lt;div class="entry"&gt;' +
    '&lt;a class="entry-title" href="{link}"&gt;{title}&lt;/a&gt;' +
    "&lt;h4&gt;{date} by {author} | {comments} Comments&lt;/h4&gt;{description}" +
    "&lt;/div&gt;&lt;hr /&gt;"
);

var moreView = new Roo.JsonView({
    container :  "entry-list", 
    template : tpl,
    jsonRoot: "posts"
});
moreView.on("beforerender", this.sortEntries, this);
moreView.load({
    url: "/blog/get-posts.php",
    params: "allposts=true",
    text: "Loading Blog Entries..."
});
</code></pre>
* 
* Note: old code is supported with arguments : (container, template, config)
* 
* 
 * @constructor
 * Create a new JsonView
 * 
 * @param {Object} config The config object
 * 
 */
Roo.JsonView = function(config, depreciated_tpl, depreciated_config){
    
    
    Roo.JsonView.superclass.constructor.call(this, config, depreciated_tpl, depreciated_config);

    var um = this.el.getUpdateManager();
    um.setRenderer(this);
    um.on("update", this.onLoad, this);
    um.on("failure", this.onLoadException, this);

    /**
     * @event beforerender
     * Fires before rendering of the downloaded JSON data.
     * @param {Roo.JsonView} this
     * @param {Object} data The JSON data loaded
     */
    /**
     * @event load
     * Fires when data is loaded.
     * @param {Roo.JsonView} this
     * @param {Object} data The JSON data loaded
     * @param {Object} response The raw Connect response object
     */
    /**
     * @event loadexception
     * Fires when loading fails.
     * @param {Roo.JsonView} this
     * @param {Object} response The raw Connect response object
     */
    this.addEvents({
        'beforerender' : true,
        'load' : true,
        'loadexception' : true
    });
};
Roo.extend(Roo.JsonView, Roo.View, {
    /**
     * @type {String} The root property in the loaded JSON object that contains the data
     */
    jsonRoot : "",

    /**
     * Refreshes the view.
     */
    refresh : function(){
        this.clearSelections();
        this.el.update("");
        var html = [];
        var o = this.jsonData;
        if(o && o.length > 0){
            for(var i = 0, len = o.length; i < len; i++){
                var data = this.prepareData(o[i], i, o);
                html[html.length] = this.tpl.apply(data);
            }
        }else{
            html.push(this.emptyText);
        }
        this.el.update(html.join(""));
        this.nodes = this.el.dom.childNodes;
        this.updateIndexes(0);
    },

    /**
     * Performs an async HTTP request, and loads the JSON from the response. If <i>params</i> are specified it uses POST, otherwise it uses GET.
     * @param {Object/String/Function} url The URL for this request, or a function to call to get the URL, or a config object containing any of the following options:
     <pre><code>
     view.load({
         url: "your-url.php",
         params: {param1: "foo", param2: "bar"}, // or a URL encoded string
         callback: yourFunction,
         scope: yourObject, //(optional scope)
         discardUrl: false,
         nocache: false,
         text: "Loading...",
         timeout: 30,
         scripts: false
     });
     </code></pre>
     * The only required property is <i>url</i>. The optional properties <i>nocache</i>, <i>text</i> and <i>scripts</i>
     * are respectively shorthand for <i>disableCaching</i>, <i>indicatorText</i>, and <i>loadScripts</i> and are used to set their associated property on this UpdateManager instance.
     * @param {String/Object} params (optional) The parameters to pass, as either a URL encoded string "param1=1&amp;param2=2" or an object {param1: 1, param2: 2}
     * @param {Function} callback (optional) Callback when transaction is complete - called with signature (oElement, bSuccess)
     * @param {Boolean} discardUrl (optional) By default when you execute an update the defaultUrl is changed to the last used URL. If true, it will not store the URL.
     */
    load : function(){
        var um = this.el.getUpdateManager();
        um.update.apply(um, arguments);
    },

    // note - render is a standard framework call...
    // using it for the response is really flaky... - it's called by UpdateManager normally, except when called by the XComponent/addXtype.
    render : function(el, response){
        
        this.clearSelections();
        this.el.update("");
        var o;
        try{
            if (response != '') {
                o = Roo.util.JSON.decode(response.responseText);
                if(this.jsonRoot){
                    
                    o = o[this.jsonRoot];
                }
            }
        } catch(e){
        }
        /**
         * The current JSON data or null
         */
        this.jsonData = o;
        this.beforeRender();
        this.refresh();
    },

/**
 * Get the number of records in the current JSON dataset
 * @return {Number}
 */
    getCount : function(){
        return this.jsonData ? this.jsonData.length : 0;
    },

/**
 * Returns the JSON object for the specified node(s)
 * @param {HTMLElement/Array} node The node or an array of nodes
 * @return {Object/Array} If you pass in an array, you get an array back, otherwise
 * you get the JSON object for the node
 */
    getNodeData : function(node){
        if(node instanceof Array){
            var data = [];
            for(var i = 0, len = node.length; i < len; i++){
                data.push(this.getNodeData(node[i]));
            }
            return data;
        }
        return this.jsonData[this.indexOf(node)] || null;
    },

    beforeRender : function(){
        this.snapshot = this.jsonData;
        if(this.sortInfo){
            this.sort.apply(this, this.sortInfo);
        }
        this.fireEvent("beforerender", this, this.jsonData);
    },

    onLoad : function(el, o){
        this.fireEvent("load", this, this.jsonData, o);
    },

    onLoadException : function(el, o){
        this.fireEvent("loadexception", this, o);
    },

/**
 * Filter the data by a specific property.
 * @param {String} property A property on your JSON objects
 * @param {String/RegExp} value Either string that the property values
 * should start with, or a RegExp to test against the property
 */
    filter : function(property, value){
        if(this.jsonData){
            var data = [];
            var ss = this.snapshot;
            if(typeof value == "string"){
                var vlen = value.length;
                if(vlen == 0){
                    this.clearFilter();
                    return;
                }
                value = value.toLowerCase();
                for(var i = 0, len = ss.length; i < len; i++){
                    var o = ss[i];
                    if(o[property].substr(0, vlen).toLowerCase() == value){
                        data.push(o);
                    }
                }
            } else if(value.exec){ // regex?
                for(var i = 0, len = ss.length; i < len; i++){
                    var o = ss[i];
                    if(value.test(o[property])){
                        data.push(o);
                    }
                }
            } else{
                return;
            }
            this.jsonData = data;
            this.refresh();
        }
    },

/**
 * Filter by a function. The passed function will be called with each
 * object in the current dataset. If the function returns true the value is kept,
 * otherwise it is filtered.
 * @param {Function} fn
 * @param {Object} scope (optional) The scope of the function (defaults to this JsonView)
 */
    filterBy : function(fn, scope){
        if(this.jsonData){
            var data = [];
            var ss = this.snapshot;
            for(var i = 0, len = ss.length; i < len; i++){
                var o = ss[i];
                if(fn.call(scope || this, o)){
                    data.push(o);
                }
            }
            this.jsonData = data;
            this.refresh();
        }
    },

/**
 * Clears the current filter.
 */
    clearFilter : function(){
        if(this.snapshot && this.jsonData != this.snapshot){
            this.jsonData = this.snapshot;
            this.refresh();
        }
    },


/**
 * Sorts the data for this view and refreshes it.
 * @param {String} property A property on your JSON objects to sort on
 * @param {String} direction (optional) "desc" or "asc" (defaults to "asc")
 * @param {Function} sortType (optional) A function to call to convert the data to a sortable value.
 */
    sort : function(property, dir, sortType){
        this.sortInfo = Array.prototype.slice.call(arguments, 0);
        if(this.jsonData){
            var p = property;
            var dsc = dir && dir.toLowerCase() == "desc";
            var f = function(o1, o2){
                var v1 = sortType ? sortType(o1[p]) : o1[p];
                var v2 = sortType ? sortType(o2[p]) : o2[p];
                ;
                if(v1 < v2){
                    return dsc ? +1 : -1;
                } else if(v1 > v2){
                    return dsc ? -1 : +1;
                } else{
                    return 0;
                }
            };
            this.jsonData.sort(f);
            this.refresh();
            if(this.jsonData != this.snapshot){
                this.snapshot.sort(f);
            }
        }
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.ColorPalette
 * @extends Roo.Component
 * Simple color palette class for choosing colors.  The palette can be rendered to any container.<br />
 * Here's an example of typical usage:
 * <pre><code>
var cp = new Roo.ColorPalette({value:'993300'});  // initial selected color
cp.render('my-div');

cp.on('select', function(palette, selColor){
    // do something with selColor
});
</code></pre>
 * @constructor
 * Create a new ColorPalette
 * @param {Object} config The config object
 */
Roo.ColorPalette = function(config){
    Roo.ColorPalette.superclass.constructor.call(this, config);
    this.addEvents({
        /**
	     * @event select
	     * Fires when a color is selected
	     * @param {ColorPalette} this
	     * @param {String} color The 6-digit color hex code (without the # symbol)
	     */
        select: true
    });

    if(this.handler){
        this.on("select", this.handler, this.scope, true);
    }
};
Roo.extend(Roo.ColorPalette, Roo.Component, {
    /**
     * @cfg {String} itemCls
     * The CSS class to apply to the containing element (defaults to "x-color-palette")
     */
    itemCls : "x-color-palette",
    /**
     * @cfg {String} value
     * The initial color to highlight (should be a valid 6-digit color hex code without the # symbol).  Note that
     * the hex codes are case-sensitive.
     */
    value : null,
    clickEvent:'click',
    // private
    ctype: "Roo.ColorPalette",

    /**
     * @cfg {Boolean} allowReselect If set to true then reselecting a color that is already selected fires the selection event
     */
    allowReselect : false,

    /**
     * <p>An array of 6-digit color hex code strings (without the # symbol).  This array can contain any number
     * of colors, and each hex code should be unique.  The width of the palette is controlled via CSS by adjusting
     * the width property of the 'x-color-palette' class (or assigning a custom class), so you can balance the number
     * of colors with the width setting until the box is symmetrical.</p>
     * <p>You can override individual colors if needed:</p>
     * <pre><code>
var cp = new Roo.ColorPalette();
cp.colors[0] = "FF0000";  // change the first box to red
</code></pre>

Or you can provide a custom array of your own for complete control:
<pre><code>
var cp = new Roo.ColorPalette();
cp.colors = ["000000", "993300", "333300"];
</code></pre>
     * @type Array
     */
    colors : [
        "000000", "993300", "333300", "003300", "003366", "000080", "333399", "333333",
        "800000", "FF6600", "808000", "008000", "008080", "0000FF", "666699", "808080",
        "FF0000", "FF9900", "99CC00", "339966", "33CCCC", "3366FF", "800080", "969696",
        "FF00FF", "FFCC00", "FFFF00", "00FF00", "00FFFF", "00CCFF", "993366", "C0C0C0",
        "FF99CC", "FFCC99", "FFFF99", "CCFFCC", "CCFFFF", "99CCFF", "CC99FF", "FFFFFF"
    ],

    // private
    onRender : function(container, position){
        var t = new Roo.MasterTemplate(
            '<tpl><a href="#" class="color-{0}" hidefocus="on"><em><span style="background:#{0}" unselectable="on">&#160;</span></em></a></tpl>'
        );
        var c = this.colors;
        for(var i = 0, len = c.length; i < len; i++){
            t.add([c[i]]);
        }
        var el = document.createElement("div");
        el.className = this.itemCls;
        t.overwrite(el);
        container.dom.insertBefore(el, position);
        this.el = Roo.get(el);
        this.el.on(this.clickEvent, this.handleClick,  this, {delegate: "a"});
        if(this.clickEvent != 'click'){
            this.el.on('click', Roo.emptyFn,  this, {delegate: "a", preventDefault:true});
        }
    },

    // private
    afterRender : function(){
        Roo.ColorPalette.superclass.afterRender.call(this);
        if(this.value){
            var s = this.value;
            this.value = null;
            this.select(s);
        }
    },

    // private
    handleClick : function(e, t){
        e.preventDefault();
        if(!this.disabled){
            var c = t.className.match(/(?:^|\s)color-(.{6})(?:\s|$)/)[1];
            this.select(c.toUpperCase());
        }
    },

    /**
     * Selects the specified color in the palette (fires the select event)
     * @param {String} color A valid 6-digit color hex code (# will be stripped if included)
     */
    select : function(color){
        color = color.replace("#", "");
        if(color != this.value || this.allowReselect){
            var el = this.el;
            if(this.value){
                el.child("a.color-"+this.value).removeClass("x-color-palette-sel");
            }
            el.child("a.color-"+color).addClass("x-color-palette-sel");
            this.value = color;
            this.fireEvent("select", this, color);
        }
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.DatePicker
 * @extends Roo.Component
 * Simple date picker class.
 * @constructor
 * Create a new DatePicker
 * @param {Object} config The config object
 */
Roo.DatePicker = function(config){
    Roo.DatePicker.superclass.constructor.call(this, config);

    this.value = config && config.value ?
                 config.value.clearTime() : new Date().clearTime();

    this.addEvents({
        /**
	     * @event select
	     * Fires when a date is selected
	     * @param {DatePicker} this
	     * @param {Date} date The selected date
	     */
        'select': true,
        /**
	     * @event monthchange
	     * Fires when the displayed month changes 
	     * @param {DatePicker} this
	     * @param {Date} date The selected month
	     */
        'monthchange': true
    });

    if(this.handler){
        this.on("select", this.handler,  this.scope || this);
    }
    // build the disabledDatesRE
    if(!this.disabledDatesRE && this.disabledDates){
        var dd = this.disabledDates;
        var re = "(?:";
        for(var i = 0; i < dd.length; i++){
            re += dd[i];
            if(i != dd.length-1) {
                re += "|";
            }
        }
        this.disabledDatesRE = new RegExp(re + ")");
    }
};

Roo.extend(Roo.DatePicker, Roo.Component, {
    /**
     * @cfg {String} todayText
     * The text to display on the button that selects the current date (defaults to "Today")
     */
    todayText : "Today",
    /**
     * @cfg {String} okText
     * The text to display on the ok button
     */
    okText : "&#160;OK&#160;", // &#160; to give the user extra clicking room
    /**
     * @cfg {String} cancelText
     * The text to display on the cancel button
     */
    cancelText : "Cancel",
    /**
     * @cfg {String} todayTip
     * The tooltip to display for the button that selects the current date (defaults to "{current date} (Spacebar)")
     */
    todayTip : "{0} (Spacebar)",
    /**
     * @cfg {Date} minDate
     * Minimum allowable date (JavaScript date object, defaults to null)
     */
    minDate : null,
    /**
     * @cfg {Date} maxDate
     * Maximum allowable date (JavaScript date object, defaults to null)
     */
    maxDate : null,
    /**
     * @cfg {String} minText
     * The error text to display if the minDate validation fails (defaults to "This date is before the minimum date")
     */
    minText : "This date is before the minimum date",
    /**
     * @cfg {String} maxText
     * The error text to display if the maxDate validation fails (defaults to "This date is after the maximum date")
     */
    maxText : "This date is after the maximum date",
    /**
     * @cfg {String} format
     * The default date format string which can be overriden for localization support.  The format must be
     * valid according to {@link Date#parseDate} (defaults to 'm/d/y').
     */
    format : "m/d/y",
    /**
     * @cfg {Array} disabledDays
     * An array of days to disable, 0-based. For example, [0, 6] disables Sunday and Saturday (defaults to null).
     */
    disabledDays : null,
    /**
     * @cfg {String} disabledDaysText
     * The tooltip to display when the date falls on a disabled day (defaults to "")
     */
    disabledDaysText : "",
    /**
     * @cfg {RegExp} disabledDatesRE
     * JavaScript regular expression used to disable a pattern of dates (defaults to null)
     */
    disabledDatesRE : null,
    /**
     * @cfg {String} disabledDatesText
     * The tooltip text to display when the date falls on a disabled date (defaults to "")
     */
    disabledDatesText : "",
    /**
     * @cfg {Boolean} constrainToViewport
     * True to constrain the date picker to the viewport (defaults to true)
     */
    constrainToViewport : true,
    /**
     * @cfg {Array} monthNames
     * An array of textual month names which can be overriden for localization support (defaults to Date.monthNames)
     */
    monthNames : Date.monthNames,
    /**
     * @cfg {Array} dayNames
     * An array of textual day names which can be overriden for localization support (defaults to Date.dayNames)
     */
    dayNames : Date.dayNames,
    /**
     * @cfg {String} nextText
     * The next month navigation button tooltip (defaults to 'Next Month (Control+Right)')
     */
    nextText: 'Next Month (Control+Right)',
    /**
     * @cfg {String} prevText
     * The previous month navigation button tooltip (defaults to 'Previous Month (Control+Left)')
     */
    prevText: 'Previous Month (Control+Left)',
    /**
     * @cfg {String} monthYearText
     * The header month selector tooltip (defaults to 'Choose a month (Control+Up/Down to move years)')
     */
    monthYearText: 'Choose a month (Control+Up/Down to move years)',
    /**
     * @cfg {Number} startDay
     * Day index at which the week should begin, 0-based (defaults to 0, which is Sunday)
     */
    startDay : 0,
    /**
     * @cfg {Bool} showClear
     * Show a clear button (usefull for date form elements that can be blank.)
     */
    
    showClear: false,
    
    /**
     * Sets the value of the date field
     * @param {Date} value The date to set
     */
    setValue : function(value){
        var old = this.value;
        
        if (typeof(value) == 'string') {
         
            value = Date.parseDate(value, this.format);
        }
        if (!value) {
            value = new Date();
        }
        
        this.value = value.clearTime(true);
        if(this.el){
            this.update(this.value);
        }
    },

    /**
     * Gets the current selected value of the date field
     * @return {Date} The selected date
     */
    getValue : function(){
        return this.value;
    },

    // private
    focus : function(){
        if(this.el){
            this.update(this.activeDate);
        }
    },

    // privateval
    onRender : function(container, position){
        
        var m = [
             '<table cellspacing="0">',
                '<tr><td class="x-date-left"><a href="#" title="', this.prevText ,'">&#160;</a></td><td class="x-date-middle" align="center"></td><td class="x-date-right"><a href="#" title="', this.nextText ,'">&#160;</a></td></tr>',
                '<tr><td colspan="3"><table class="x-date-inner" cellspacing="0"><thead><tr>'];
        var dn = this.dayNames;
        for(var i = 0; i < 7; i++){
            var d = this.startDay+i;
            if(d > 6){
                d = d-7;
            }
            m.push("<th><span>", dn[d].substr(0,1), "</span></th>");
        }
        m[m.length] = "</tr></thead><tbody><tr>";
        for(var i = 0; i < 42; i++) {
            if(i % 7 == 0 && i != 0){
                m[m.length] = "</tr><tr>";
            }
            m[m.length] = '<td><a href="#" hidefocus="on" class="x-date-date" tabIndex="1"><em><span></span></em></a></td>';
        }
        m[m.length] = '</tr></tbody></table></td></tr><tr>'+
            '<td colspan="3" class="x-date-bottom" align="center"></td></tr></table><div class="x-date-mp"></div>';

        var el = document.createElement("div");
        el.className = "x-date-picker";
        el.innerHTML = m.join("");

        container.dom.insertBefore(el, position);

        this.el = Roo.get(el);
        this.eventEl = Roo.get(el.firstChild);

        new Roo.util.ClickRepeater(this.el.child("td.x-date-left a"), {
            handler: this.showPrevMonth,
            scope: this,
            preventDefault:true,
            stopDefault:true
        });

        new Roo.util.ClickRepeater(this.el.child("td.x-date-right a"), {
            handler: this.showNextMonth,
            scope: this,
            preventDefault:true,
            stopDefault:true
        });

        this.eventEl.on("mousewheel", this.handleMouseWheel,  this);

        this.monthPicker = this.el.down('div.x-date-mp');
        this.monthPicker.enableDisplayMode('block');
        
        var kn = new Roo.KeyNav(this.eventEl, {
            "left" : function(e){
                e.ctrlKey ?
                    this.showPrevMonth() :
                    this.update(this.activeDate.add("d", -1));
            },

            "right" : function(e){
                e.ctrlKey ?
                    this.showNextMonth() :
                    this.update(this.activeDate.add("d", 1));
            },

            "up" : function(e){
                e.ctrlKey ?
                    this.showNextYear() :
                    this.update(this.activeDate.add("d", -7));
            },

            "down" : function(e){
                e.ctrlKey ?
                    this.showPrevYear() :
                    this.update(this.activeDate.add("d", 7));
            },

            "pageUp" : function(e){
                this.showNextMonth();
            },

            "pageDown" : function(e){
                this.showPrevMonth();
            },

            "enter" : function(e){
                e.stopPropagation();
                return true;
            },

            scope : this
        });

        this.eventEl.on("click", this.handleDateClick,  this, {delegate: "a.x-date-date"});

        this.eventEl.addKeyListener(Roo.EventObject.SPACE, this.selectToday,  this);

        this.el.unselectable();
        
        this.cells = this.el.select("table.x-date-inner tbody td");
        this.textNodes = this.el.query("table.x-date-inner tbody span");

        this.mbtn = new Roo.Button(this.el.child("td.x-date-middle", true), {
            text: "&#160;",
            tooltip: this.monthYearText
        });

        this.mbtn.on('click', this.showMonthPicker, this);
        this.mbtn.el.child(this.mbtn.menuClassTarget).addClass("x-btn-with-menu");


        var today = (new Date()).dateFormat(this.format);
        
        var baseTb = new Roo.Toolbar(this.el.child("td.x-date-bottom", true));
        if (this.showClear) {
            baseTb.add( new Roo.Toolbar.Fill());
        }
        baseTb.add({
            text: String.format(this.todayText, today),
            tooltip: String.format(this.todayTip, today),
            handler: this.selectToday,
            scope: this
        });
        
        //var todayBtn = new Roo.Button(this.el.child("td.x-date-bottom", true), {
            
        //});
        if (this.showClear) {
            
            baseTb.add( new Roo.Toolbar.Fill());
            baseTb.add({
                text: '&#160;',
                cls: 'x-btn-icon x-btn-clear',
                handler: function() {
                    //this.value = '';
                    this.fireEvent("select", this, '');
                },
                scope: this
            });
        }
        
        
        if(Roo.isIE){
            this.el.repaint();
        }
        this.update(this.value);
    },

    createMonthPicker : function(){
        if(!this.monthPicker.dom.firstChild){
            var buf = ['<table border="0" cellspacing="0">'];
            for(var i = 0; i < 6; i++){
                buf.push(
                    '<tr><td class="x-date-mp-month"><a href="#">', this.monthNames[i].substr(0, 3), '</a></td>',
                    '<td class="x-date-mp-month x-date-mp-sep"><a href="#">', this.monthNames[i+6].substr(0, 3), '</a></td>',
                    i == 0 ?
                    '<td class="x-date-mp-ybtn" align="center"><a class="x-date-mp-prev"></a></td><td class="x-date-mp-ybtn" align="center"><a class="x-date-mp-next"></a></td></tr>' :
                    '<td class="x-date-mp-year"><a href="#"></a></td><td class="x-date-mp-year"><a href="#"></a></td></tr>'
                );
            }
            buf.push(
                '<tr class="x-date-mp-btns"><td colspan="4"><button type="button" class="x-date-mp-ok">',
                    this.okText,
                    '</button><button type="button" class="x-date-mp-cancel">',
                    this.cancelText,
                    '</button></td></tr>',
                '</table>'
            );
            this.monthPicker.update(buf.join(''));
            this.monthPicker.on('click', this.onMonthClick, this);
            this.monthPicker.on('dblclick', this.onMonthDblClick, this);

            this.mpMonths = this.monthPicker.select('td.x-date-mp-month');
            this.mpYears = this.monthPicker.select('td.x-date-mp-year');

            this.mpMonths.each(function(m, a, i){
                i += 1;
                if((i%2) == 0){
                    m.dom.xmonth = 5 + Math.round(i * .5);
                }else{
                    m.dom.xmonth = Math.round((i-1) * .5);
                }
            });
        }
    },

    showMonthPicker : function(){
        this.createMonthPicker();
        var size = this.el.getSize();
        this.monthPicker.setSize(size);
        this.monthPicker.child('table').setSize(size);

        this.mpSelMonth = (this.activeDate || this.value).getMonth();
        this.updateMPMonth(this.mpSelMonth);
        this.mpSelYear = (this.activeDate || this.value).getFullYear();
        this.updateMPYear(this.mpSelYear);

        this.monthPicker.slideIn('t', {duration:.2});
    },

    updateMPYear : function(y){
        this.mpyear = y;
        var ys = this.mpYears.elements;
        for(var i = 1; i <= 10; i++){
            var td = ys[i-1], y2;
            if((i%2) == 0){
                y2 = y + Math.round(i * .5);
                td.firstChild.innerHTML = y2;
                td.xyear = y2;
            }else{
                y2 = y - (5-Math.round(i * .5));
                td.firstChild.innerHTML = y2;
                td.xyear = y2;
            }
            this.mpYears.item(i-1)[y2 == this.mpSelYear ? 'addClass' : 'removeClass']('x-date-mp-sel');
        }
    },

    updateMPMonth : function(sm){
        this.mpMonths.each(function(m, a, i){
            m[m.dom.xmonth == sm ? 'addClass' : 'removeClass']('x-date-mp-sel');
        });
    },

    selectMPMonth: function(m){
        
    },

    onMonthClick : function(e, t){
        e.stopEvent();
        var el = new Roo.Element(t), pn;
        if(el.is('button.x-date-mp-cancel')){
            this.hideMonthPicker();
        }
        else if(el.is('button.x-date-mp-ok')){
            this.update(new Date(this.mpSelYear, this.mpSelMonth, (this.activeDate || this.value).getDate()));
            this.hideMonthPicker();
        }
        else if(pn = el.up('td.x-date-mp-month', 2)){
            this.mpMonths.removeClass('x-date-mp-sel');
            pn.addClass('x-date-mp-sel');
            this.mpSelMonth = pn.dom.xmonth;
        }
        else if(pn = el.up('td.x-date-mp-year', 2)){
            this.mpYears.removeClass('x-date-mp-sel');
            pn.addClass('x-date-mp-sel');
            this.mpSelYear = pn.dom.xyear;
        }
        else if(el.is('a.x-date-mp-prev')){
            this.updateMPYear(this.mpyear-10);
        }
        else if(el.is('a.x-date-mp-next')){
            this.updateMPYear(this.mpyear+10);
        }
    },

    onMonthDblClick : function(e, t){
        e.stopEvent();
        var el = new Roo.Element(t), pn;
        if(pn = el.up('td.x-date-mp-month', 2)){
            this.update(new Date(this.mpSelYear, pn.dom.xmonth, (this.activeDate || this.value).getDate()));
            this.hideMonthPicker();
        }
        else if(pn = el.up('td.x-date-mp-year', 2)){
            this.update(new Date(pn.dom.xyear, this.mpSelMonth, (this.activeDate || this.value).getDate()));
            this.hideMonthPicker();
        }
    },

    hideMonthPicker : function(disableAnim){
        if(this.monthPicker){
            if(disableAnim === true){
                this.monthPicker.hide();
            }else{
                this.monthPicker.slideOut('t', {duration:.2});
            }
        }
    },

    // private
    showPrevMonth : function(e){
        this.update(this.activeDate.add("mo", -1));
    },

    // private
    showNextMonth : function(e){
        this.update(this.activeDate.add("mo", 1));
    },

    // private
    showPrevYear : function(){
        this.update(this.activeDate.add("y", -1));
    },

    // private
    showNextYear : function(){
        this.update(this.activeDate.add("y", 1));
    },

    // private
    handleMouseWheel : function(e){
        var delta = e.getWheelDelta();
        if(delta > 0){
            this.showPrevMonth();
            e.stopEvent();
        } else if(delta < 0){
            this.showNextMonth();
            e.stopEvent();
        }
    },

    // private
    handleDateClick : function(e, t){
        e.stopEvent();
        if(t.dateValue && !Roo.fly(t.parentNode).hasClass("x-date-disabled")){
            this.setValue(new Date(t.dateValue));
            this.fireEvent("select", this, this.value);
        }
    },

    // private
    selectToday : function(){
        this.setValue(new Date().clearTime());
        this.fireEvent("select", this, this.value);
    },

    // private
    update : function(date)
    {
        var vd = this.activeDate;
        this.activeDate = date;
        if(vd && this.el){
            var t = date.getTime();
            if(vd.getMonth() == date.getMonth() && vd.getFullYear() == date.getFullYear()){
                this.cells.removeClass("x-date-selected");
                this.cells.each(function(c){
                   if(c.dom.firstChild.dateValue == t){
                       c.addClass("x-date-selected");
                       setTimeout(function(){
                            try{c.dom.firstChild.focus();}catch(e){}
                       }, 50);
                       return false;
                   }
                });
                return;
            }
        }
        
        var days = date.getDaysInMonth();
        var firstOfMonth = date.getFirstDateOfMonth();
        var startingPos = firstOfMonth.getDay()-this.startDay;

        if(startingPos <= this.startDay){
            startingPos += 7;
        }

        var pm = date.add("mo", -1);
        var prevStart = pm.getDaysInMonth()-startingPos;

        var cells = this.cells.elements;
        var textEls = this.textNodes;
        days += startingPos;

        // convert everything to numbers so it's fast
        var day = 86400000;
        var d = (new Date(pm.getFullYear(), pm.getMonth(), prevStart)).clearTime();
        var today = new Date().clearTime().getTime();
        var sel = date.clearTime().getTime();
        var min = this.minDate ? this.minDate.clearTime() : Number.NEGATIVE_INFINITY;
        var max = this.maxDate ? this.maxDate.clearTime() : Number.POSITIVE_INFINITY;
        var ddMatch = this.disabledDatesRE;
        var ddText = this.disabledDatesText;
        var ddays = this.disabledDays ? this.disabledDays.join("") : false;
        var ddaysText = this.disabledDaysText;
        var format = this.format;

        var setCellClass = function(cal, cell){
            cell.title = "";
            var t = d.getTime();
            cell.firstChild.dateValue = t;
            if(t == today){
                cell.className += " x-date-today";
                cell.title = cal.todayText;
            }
            if(t == sel){
                cell.className += " x-date-selected";
                setTimeout(function(){
                    try{cell.firstChild.focus();}catch(e){}
                }, 50);
            }
            // disabling
            if(t < min) {
                cell.className = " x-date-disabled";
                cell.title = cal.minText;
                return;
            }
            if(t > max) {
                cell.className = " x-date-disabled";
                cell.title = cal.maxText;
                return;
            }
            if(ddays){
                if(ddays.indexOf(d.getDay()) != -1){
                    cell.title = ddaysText;
                    cell.className = " x-date-disabled";
                }
            }
            if(ddMatch && format){
                var fvalue = d.dateFormat(format);
                if(ddMatch.test(fvalue)){
                    cell.title = ddText.replace("%0", fvalue);
                    cell.className = " x-date-disabled";
                }
            }
        };

        var i = 0;
        for(; i < startingPos; i++) {
            textEls[i].innerHTML = (++prevStart);
            d.setDate(d.getDate()+1);
            cells[i].className = "x-date-prevday";
            setCellClass(this, cells[i]);
        }
        for(; i < days; i++){
            intDay = i - startingPos + 1;
            textEls[i].innerHTML = (intDay);
            d.setDate(d.getDate()+1);
            cells[i].className = "x-date-active";
            setCellClass(this, cells[i]);
        }
        var extraDays = 0;
        for(; i < 42; i++) {
             textEls[i].innerHTML = (++extraDays);
             d.setDate(d.getDate()+1);
             cells[i].className = "x-date-nextday";
             setCellClass(this, cells[i]);
        }

        this.mbtn.setText(this.monthNames[date.getMonth()] + " " + date.getFullYear());
        this.fireEvent('monthchange', this, date);
        
        if(!this.internalRender){
            var main = this.el.dom.firstChild;
            var w = main.offsetWidth;
            this.el.setWidth(w + this.el.getBorderWidth("lr"));
            Roo.fly(main).setWidth(w);
            this.internalRender = true;
            // opera does not respect the auto grow header center column
            // then, after it gets a width opera refuses to recalculate
            // without a second pass
            if(Roo.isOpera && !this.secondPass){
                main.rows[0].cells[1].style.width = (w - (main.rows[0].cells[0].offsetWidth+main.rows[0].cells[2].offsetWidth)) + "px";
                this.secondPass = true;
                this.update.defer(10, this, [date]);
            }
        }
        
        
    }
});Roo.panel = {};
/*
* Licence: LGPL
*/

/**
 * @class Roo.panel.Cropbox
 * @extends Roo.BoxComponent
 * Panel Cropbox class
 * @cfg {String} emptyText show when image has been loaded
 * @cfg {String} rotateNotify show when image too small to rotate
 * @cfg {Number} errorTimeout default 3000
 * @cfg {Number} minWidth default 300
 * @cfg {Number} minHeight default 300
 * @cfg {Number} outputMaxWidth default 1200
 * @cfg {Number} windowSize default 300
 * @cfg {Array} buttons default ['rotateLeft', 'pictureBtn', 'rotateRight']
 * @cfg {Boolean} isDocument (true|false) default false
 * @cfg {String} url action url
 * @cfg {String} paramName default 'imageUpload'
 * @cfg {String} method default POST
 * @cfg {Boolean} loadMask (true|false) default true
 * @cfg {Boolean} loadingText default 'Loading...'
 * 
 * @constructor
 * Create a new Cropbox
 * @param {Object} config The config object
 */

 Roo.panel.Cropbox = function(config){
    Roo.panel.Cropbox.superclass.constructor.call(this, config);
    
    this.addEvents({
        /**
         * @event beforeselectfile
         * Fire before select file
         * @param {Roo.panel.Cropbox} this
         */
        "beforeselectfile" : true,
        /**
         * @event initial
         * Fire after initEvent
         * @param {Roo.panel.Cropbox} this
         */
        "initial" : true,
        /**
         * @event crop
         * Fire after initEvent
         * @param {Roo.panel.Cropbox} this
         * @param {String} data
         */
        "crop" : true,
        /**
         * @event prepare
         * Fire when preparing the file data
         * @param {Roo.panel.Cropbox} this
         * @param {Object} file
         */
        "prepare" : true,
        /**
         * @event exception
         * Fire when get exception
         * @param {Roo.panel.Cropbox} this
         * @param {XMLHttpRequest} xhr
         */
        "exception" : true,
        /**
         * @event beforeloadcanvas
         * Fire before load the canvas
         * @param {Roo.panel.Cropbox} this
         * @param {String} src
         */
        "beforeloadcanvas" : true,
        /**
         * @event trash
         * Fire when trash image
         * @param {Roo.panel.Cropbox} this
         */
        "trash" : true,
        /**
         * @event download
         * Fire when download the image
         * @param {Roo.panel.Cropbox} this
         */
        "download" : true,
        /**
         * @event footerbuttonclick
         * Fire when footerbuttonclick
         * @param {Roo.panel.Cropbox} this
         * @param {String} type
         */
        "footerbuttonclick" : true,
        /**
         * @event resize
         * Fire when resize
         * @param {Roo.panel.Cropbox} this
         */
        "resize" : true,
        /**
         * @event rotate
         * Fire when rotate the image
         * @param {Roo.panel.Cropbox} this
         * @param {String} pos
         */
        "rotate" : true,
        /**
         * @event inspect
         * Fire when inspect the file
         * @param {Roo.panel.Cropbox} this
         * @param {Object} file
         */
        "inspect" : true,
        /**
         * @event upload
         * Fire when xhr upload the file
         * @param {Roo.panel.Cropbox} this
         * @param {Object} data
         */
        "upload" : true,
        /**
         * @event arrange
         * Fire when arrange the file data
         * @param {Roo.panel.Cropbox} this
         * @param {Object} formData
         */
        "arrange" : true,
        /**
         * @event loadcanvas
         * Fire after load the canvas
         * @param {Roo.panel.Cropbox}
         * @param {Object} imgEl
         */
        "loadcanvas" : true
    });
    
    this.buttons = this.buttons || Roo.panel.Cropbox.footer.STANDARD;
};

Roo.extend(Roo.panel.Cropbox, Roo.Component,  {
    
    emptyText : 'Click to upload image',
    rotateNotify : 'Image is too small to rotate',
    errorTimeout : 3000,
    scale : 0,
    baseScale : 1,
    rotate : 0,
    dragable : false,
    pinching : false,
    mouseX : 0,
    mouseY : 0,
    cropData : false,
    minWidth : 300,
    minHeight : 300,
    outputMaxWidth : 1200,
    windowSize : 300,
    file : false,
    exif : {},
    baseRotate : 1,
    cropType : 'image/jpeg',
    buttons : false,
    canvasLoaded : false,
    isDocument : false,
    method : 'POST',
    paramName : 'imageUpload',
    loadMask : true,
    loadingText : 'Loading...',
    maskEl : false,
    
    getAutoCreate : function()
    {
        var cfg = {
            tag : 'div',
            cls : 'roo-upload-cropbox',
            cn : [
                {
                    tag : 'input',
                    cls : 'roo-upload-cropbox-selector',
                    type : 'file'
                },
                {
                    tag : 'div',
                    cls : 'roo-upload-cropbox-body',
                    style : 'cursor:pointer',
                    cn : [
                        {
                            tag : 'div',
                            cls : 'roo-upload-cropbox-preview'
                        },
                        {
                            tag : 'div',
                            cls : 'roo-upload-cropbox-thumb'
                        },
                        {
                            tag : 'div',
                            cls : 'roo-upload-cropbox-empty-notify',
                            html : this.emptyText
                        },
                        {
                            tag : 'div',
                            cls : 'roo-upload-cropbox-error-notify alert alert-danger',
                            html : this.rotateNotify
                        }
                    ]
                },
                {
                    tag : 'div',
                    cls : 'roo-upload-cropbox-footer',
                    cn : {
                        tag : 'div',
                        cls : 'btn-group btn-group-justified roo-upload-cropbox-btn-group',
                        cn : []
                    }
                }
            ]
        };
        
        return cfg;
    },
    
    onRender : function(ct, position)
    {
        Roo.panel.Cropbox.superclass.onRender.call(this, ct, position);

        if(this.el){
            if (this.el.attr('xtype')) {
                this.el.attr('xtypex', this.el.attr('xtype'));
                this.el.dom.removeAttribute('xtype');
                
                this.initEvents();
            }
        }
        else {
            var cfg = Roo.apply({},  this.getAutoCreate());
        
            cfg.id = this.id || Roo.id();
            
            if (this.cls) {
                cfg.cls = (typeof(cfg.cls) == 'undefined' ? this.cls : cfg.cls) + ' ' + this.cls;
            }
            
            if (this.style) { // fixme needs to support more complex style data.
                cfg.style = (typeof(cfg.style) == 'undefined' ? this.style : cfg.style) + '; ' + this.style;
            }
            
            this.el = ct.createChild(cfg, position);
            
            this.initEvents();
        }
        
        if (this.buttons.length) {
            
            Roo.each(this.buttons, function(bb) {
                
                var btn = this.el.select('.roo-upload-cropbox-footer div.roo-upload-cropbox-btn-group').first().createChild(bb);
                
                btn.on('click', this.onFooterButtonClick.createDelegate(this, [bb.action], true));
                
            }, this);
        }
        
        if(this.loadMask){
            this.maskEl = this.el;
        }
    },
    
    initEvents : function()
    {
        this.urlAPI = (window.createObjectURL && window) || 
                                (window.URL && URL.revokeObjectURL && URL) || 
                                (window.webkitURL && webkitURL);
                        
        this.bodyEl = this.el.select('.roo-upload-cropbox-body', true).first();
        this.bodyEl.setVisibilityMode(Roo.Element.DISPLAY).originalDisplay = 'block';
        
        this.selectorEl = this.el.select('.roo-upload-cropbox-selector', true).first();
        this.selectorEl.hide();
        
        this.previewEl = this.el.select('.roo-upload-cropbox-preview', true).first();
        this.previewEl.setVisibilityMode(Roo.Element.DISPLAY).originalDisplay = 'block';
        
        this.thumbEl = this.el.select('.roo-upload-cropbox-thumb', true).first();
        this.thumbEl.setVisibilityMode(Roo.Element.DISPLAY).originalDisplay = 'block';
        this.thumbEl.hide();
        
        this.notifyEl = this.el.select('.roo-upload-cropbox-empty-notify', true).first();
        this.notifyEl.setVisibilityMode(Roo.Element.DISPLAY).originalDisplay = 'block';
        
        this.errorEl = this.el.select('.roo-upload-cropbox-error-notify', true).first();
        this.errorEl.setVisibilityMode(Roo.Element.DISPLAY).originalDisplay = 'block';
        this.errorEl.hide();
        
        this.footerEl = this.el.select('.roo-upload-cropbox-footer', true).first();
        this.footerEl.setVisibilityMode(Roo.Element.DISPLAY).originalDisplay = 'block';
        this.footerEl.hide();
        
        this.setThumbBoxSize();
        
        this.bind();
        
        this.resize();
        
        this.fireEvent('initial', this);
    },

    bind : function()
    {
        var _this = this;
        
        window.addEventListener("resize", function() { _this.resize(); } );
        
        this.bodyEl.on('click', this.beforeSelectFile, this);
        
        if(Roo.isTouch){
            this.bodyEl.on('touchstart', this.onTouchStart, this);
            this.bodyEl.on('touchmove', this.onTouchMove, this);
            this.bodyEl.on('touchend', this.onTouchEnd, this);
        }
        
        if(!Roo.isTouch){
            this.bodyEl.on('mousedown', this.onMouseDown, this);
            this.bodyEl.on('mousemove', this.onMouseMove, this);
            var mousewheel = (/Firefox/i.test(navigator.userAgent))? 'DOMMouseScroll' : 'mousewheel';
            this.bodyEl.on(mousewheel, this.onMouseWheel, this);
            Roo.get(document).on('mouseup', this.onMouseUp, this);
        }
        
        this.selectorEl.on('change', this.onFileSelected, this);
    },
    
    reset : function()
    {    
        this.scale = 0;
        this.baseScale = 1;
        this.rotate = 0;
        this.baseRotate = 1;
        this.dragable = false;
        this.pinching = false;
        this.mouseX = 0;
        this.mouseY = 0;
        this.cropData = false;
        this.notifyEl.dom.innerHTML = this.emptyText;
        
        // this.selectorEl.dom.value = '';
        
    },
    
    resize : function()
    {
        if(this.fireEvent('resize', this) != false){
            this.setThumbBoxPosition();
            this.setCanvasPosition();
        }
    },
    
    onFooterButtonClick : function(e, el, o, type)
    {
        switch (type) {
            case 'rotate-left' :
                this.onRotateLeft(e);
                break;
            case 'rotate-right' :
                this.onRotateRight(e);
                break;
            case 'picture' :
                this.beforeSelectFile(e);
                break;
            case 'trash' :
                this.trash(e);
                break;
            case 'crop' :
                this.crop(e);
                break;
            case 'download' :
                this.download(e);
                break;
            case 'center' :
                this.center(e);
                break;
            default :
                break;
        }
        
        this.fireEvent('footerbuttonclick', this, type);
    },
    
    beforeSelectFile : function(e)
    {
        e.preventDefault();
        
        if(this.fireEvent('beforeselectfile', this) != false){
            this.selectorEl.dom.click();
        }
    },
    
    onFileSelected : function(e)
    {
        e.preventDefault();
        
        if(typeof(this.selectorEl.dom.files) == 'undefined' || !this.selectorEl.dom.files.length){
            return;
        }
        
        var file = this.selectorEl.dom.files[0];
        
        if(this.fireEvent('inspect', this, file) != false){
            this.prepare(file);
        }
        
    },
    
    trash : function(e)
    {
        this.fireEvent('trash', this);
    },
    
    download : function(e)
    {
        this.fireEvent('download', this);
    },

    center : function(e)
    {
        this.setCanvasPosition();
    },
    
    loadCanvas : function(src)
    {   
        if(this.fireEvent('beforeloadcanvas', this, src) != false){
            
            this.reset();
            
            this.imageEl = document.createElement('img');
            
            var _this = this;
            
            this.imageEl.addEventListener("load", function(){ _this.onLoadCanvas(); });
            
            this.imageEl.src = src;
        }
    },
    
    onLoadCanvas : function()
    {   
        this.imageEl.OriginWidth = this.imageEl.naturalWidth || this.imageEl.width;
        this.imageEl.OriginHeight = this.imageEl.naturalHeight || this.imageEl.height;

        if(this.fireEvent('loadcanvas', this, this.imageEl) != false){
        
            this.bodyEl.un('click', this.beforeSelectFile, this);
            
            this.notifyEl.hide();
            this.thumbEl.show();
            this.footerEl.show();
            
            this.baseRotateLevel();
            
            if(this.isDocument){
                this.setThumbBoxSize();
            }
            
            this.setThumbBoxPosition();
            
            this.baseScaleLevel();
            
            this.draw();
            
            this.resize();
            
            this.canvasLoaded = true;
        
        }
        
        if(this.loadMask){
            this.maskEl.unmask();
        }
        
    },
    
    setCanvasPosition : function(center = true)
    {   
        if(!this.canvasEl){
            return;
        }

        var newCenterLeft = Math.ceil((this.bodyEl.getWidth() - this.canvasEl.width) / 2);
        var newCenterTop = Math.ceil((this.bodyEl.getHeight() - this.canvasEl.height) / 2);

        if(center) {
            this.previewEl.setLeft(newCenterLeft);
            this.previewEl.setTop(newCenterTop);

            return;
        }
        
        var oldScaleLevel = this.baseScale * Math.pow(1.02, this.startScale);
        var oldCanvasWidth = Math.floor(this.imageEl.OriginWidth * oldScaleLevel);
        var oldCanvasHeight = Math.floor(this.imageEl.OriginHeight * oldScaleLevel);

        var oldCenterLeft = Math.ceil((this.bodyEl.getWidth() - oldCanvasWidth) / 2);
        var oldCenterTop = Math.ceil((this.bodyEl.getHeight() - oldCanvasHeight) / 2);

        var leftDiff = newCenterLeft - oldCenterLeft;
        var topDiff = newCenterTop - oldCenterTop;

        var newPreviewLeft = this.previewEl.getLeft(true) + leftDiff;
        var newPreviewTop = this.previewEl.getTop(true) + topDiff;

        this.previewEl.setLeft(newPreviewLeft);
        this.previewEl.setTop(newPreviewTop);
        
    },
    
    onMouseDown : function(e)
    {   
        e.stopEvent();
        
        this.dragable = true;
        this.pinching = false;
        
        if(this.isDocument && (this.canvasEl.width < this.thumbEl.getWidth() || this.canvasEl.height < this.thumbEl.getHeight())){
            this.dragable = false;
            return;
        }
        
        this.mouseX = Roo.isTouch ? e.browserEvent.touches[0].pageX : e.getPageX();
        this.mouseY = Roo.isTouch ? e.browserEvent.touches[0].pageY : e.getPageY();
        
    },
    
    onMouseMove : function(e)
    {   
        e.stopEvent();
        
        if(!this.canvasLoaded){
            return;
        }
        
        if (!this.dragable){
            return;
        }

        var maxPaddingLeft = this.canvasEl.width / 0.9 * 0.05;
        var maxPaddingTop = maxPaddingLeft * this.minHeight / this.minWidth;

        if ((this.imageEl.OriginWidth / this.imageEl.OriginHeight <= this.minWidth / this.minHeight)) {
            maxPaddingLeft = (this.canvasEl.height * this.minWidth / this.minHeight - this.canvasEl.width) / 2 + maxPaddingLeft;
        }

        if ((this.imageEl.OriginWidth / this.imageEl.OriginHeight >= this.minWidth / this.minHeight)) {
            maxPaddingTop = (this.canvasEl.width * this.minHeight / this.minWidth - this.canvasEl.height) / 2 + maxPaddingTop;
        }
        
        var minX = Math.ceil(this.thumbEl.getLeft(true) + this.thumbEl.getWidth() - this.canvasEl.width - maxPaddingLeft);
        var minY = Math.ceil(this.thumbEl.getTop(true) + this.thumbEl.getHeight() - this.canvasEl.height - maxPaddingTop);
        
        var maxX = Math.ceil(this.thumbEl.getLeft(true) + maxPaddingLeft);
        var maxY = Math.ceil(this.thumbEl.getTop(true) +  maxPaddingTop);

        if(minX > maxX) {
            var tempX = minX;
            minX = maxX;
            maxX = tempX;
        }

        if(minY > maxY) {
            var tempY = minY;
            minY = maxY;
            maxY = tempY;
        }

        var x = Roo.isTouch ? e.browserEvent.touches[0].pageX : e.getPageX();
        var y = Roo.isTouch ? e.browserEvent.touches[0].pageY : e.getPageY();
        
        x = x - this.mouseX;
        y = y - this.mouseY;

        var bgX = Math.ceil(x + this.previewEl.getLeft(true));
        var bgY = Math.ceil(y + this.previewEl.getTop(true));
        
        bgX = (bgX < minX) ? minX : ((bgX > maxX) ? maxX : bgX);
        bgY = (bgY < minY) ? minY : ((bgY > maxY) ? maxY : bgY);
        
        this.previewEl.setLeft(bgX);
        this.previewEl.setTop(bgY);
        
        this.mouseX = Roo.isTouch ? e.browserEvent.touches[0].pageX : e.getPageX();
        this.mouseY = Roo.isTouch ? e.browserEvent.touches[0].pageY : e.getPageY();
    },
    
    onMouseUp : function(e)
    {   
        e.stopEvent();
        
        this.dragable = false;
    },
    
    onMouseWheel : function(e)
    {   
        e.stopEvent();
        
        this.startScale = this.scale;
        this.scale = (e.getWheelDelta() > 0) ? (this.scale + 1) : (this.scale - 1);
        
        if(!this.zoomable()){
            this.scale = this.startScale;
            return;
        }

        
        this.draw();
        
        return;
    },
    
    zoomable : function()
    {
        var minScale = this.thumbEl.getWidth() / this.minWidth;
        
        if(this.minWidth < this.minHeight){
            minScale = this.thumbEl.getHeight() / this.minHeight;
        }
        
        var width = Math.ceil(this.imageEl.OriginWidth * this.getScaleLevel() / minScale);
        var height = Math.ceil(this.imageEl.OriginHeight * this.getScaleLevel() / minScale);
 
        var maxWidth = this.imageEl.OriginWidth;
        var maxHeight = this.imageEl.OriginHeight;


        var newCanvasWidth = Math.floor(this.imageEl.OriginWidth * this.getScaleLevel());
        var newCanvasHeight = Math.floor(this.imageEl.OriginHeight * this.getScaleLevel());

        var oldCenterLeft = Math.ceil((this.bodyEl.getWidth() - this.canvasEl.width) / 2);
        var oldCenterTop = Math.ceil((this.bodyEl.getHeight() - this.canvasEl.height) / 2);

        var newCenterLeft = Math.ceil((this.bodyEl.getWidth() - newCanvasWidth) / 2);
        var newCenterTop = Math.ceil((this.bodyEl.getHeight() - newCanvasHeight) / 2);

        var leftDiff = newCenterLeft - oldCenterLeft;
        var topDiff = newCenterTop - oldCenterTop;

        var newPreviewLeft = this.previewEl.getLeft(true) + leftDiff;
        var newPreviewTop = this.previewEl.getTop(true) + topDiff;

        var paddingLeft = newPreviewLeft - this.thumbEl.getLeft(true);
        var paddingTop = newPreviewTop - this.thumbEl.getTop(true);

        var paddingRight = this.thumbEl.getLeft(true) + this.thumbEl.getWidth() - newCanvasWidth - newPreviewLeft;
        var paddingBottom = this.thumbEl.getTop(true) + this.thumbEl.getHeight() - newCanvasHeight - newPreviewTop;

        var maxPaddingLeft = newCanvasWidth / 0.9 * 0.05;
        var maxPaddingTop = maxPaddingLeft * this.minHeight / this.minWidth;

        if ((this.imageEl.OriginWidth / this.imageEl.OriginHeight <= this.minWidth / this.minHeight)) {
            maxPaddingLeft = (newCanvasHeight * this.minWidth / this.minHeight - newCanvasWidth) / 2 + maxPaddingLeft;
        }

        if ((this.imageEl.OriginWidth / this.imageEl.OriginHeight >= this.minWidth / this.minHeight)) {
            maxPaddingTop = (newCanvasWidth * this.minHeight / this.minWidth - newCanvasHeight) / 2 + maxPaddingTop;
        }
        
        if(
                this.isDocument &&
                (this.rotate == 0 || this.rotate == 180) && 
                (
                    width > this.imageEl.OriginWidth || 
                    height > this.imageEl.OriginHeight ||
                    (width < this.minWidth && height < this.minHeight)
                )
        ){
            return false;
        }
        
        if(
                this.isDocument &&
                (this.rotate == 90 || this.rotate == 270) && 
                (
                    width > this.imageEl.OriginWidth || 
                    height > this.imageEl.OriginHeight ||
                    (width < this.minHeight && height < this.minWidth)
                )
        ){
            return false;
        }
        
        if(
                !this.isDocument &&
                (this.rotate == 0 || this.rotate == 180) && 
                (
                    // for zoom out
                    paddingLeft > maxPaddingLeft ||
                    paddingRight > maxPaddingLeft ||
                    paddingTop > maxPaddingTop ||
                    paddingBottom > maxPaddingTop ||
                    // for zoom in
                    width > maxWidth ||
                    height > maxHeight
                )
        ){
            return false;
        }
        
        if(
                !this.isDocument &&
                (this.rotate == 90 || this.rotate == 270) && 
                (
                    width < this.minHeight || 
                    width > this.imageEl.OriginWidth || 
                    height < this.minWidth || 
                    height > this.imageEl.OriginHeight
                )
        ){
            return false;
        }
        
        return true;
        
    },
    
    onRotateLeft : function(e)
    {   
        if(!this.isDocument && (this.canvasEl.height < this.thumbEl.getWidth() || this.canvasEl.width < this.thumbEl.getHeight())){
            
            var minScale = this.thumbEl.getWidth() / this.minWidth;
            
            var bw = Math.ceil(this.canvasEl.width / this.getScaleLevel());
            var bh = Math.ceil(this.canvasEl.height / this.getScaleLevel());
            
            this.startScale = this.scale;
            
            while (this.getScaleLevel() < minScale){
            
                this.scale = this.scale + 1;
                
                if(!this.zoomable()){
                    break;
                }
                
                if(
                        Math.ceil(bw * this.getScaleLevel()) < this.thumbEl.getHeight() ||
                        Math.ceil(bh * this.getScaleLevel()) < this.thumbEl.getWidth()
                ){
                    continue;
                }
                
                this.rotate = (this.rotate < 90) ? 270 : this.rotate - 90;

                this.draw();
                
                return;
            }
            
            this.scale = this.startScale;
            
            this.onRotateFail();
            
            return false;
        }
        
        this.rotate = (this.rotate < 90) ? 270 : this.rotate - 90;

        if(this.isDocument){
            this.setThumbBoxSize();
            this.setThumbBoxPosition();
            this.setCanvasPosition();
        }
        
        this.draw();
        
        this.fireEvent('rotate', this, 'left');
        
    },
    
    onRotateRight : function(e)
    {
        if(!this.isDocument && (this.canvasEl.height < this.thumbEl.getWidth() || this.canvasEl.width < this.thumbEl.getHeight())){
            
            var minScale = this.thumbEl.getWidth() / this.minWidth;
        
            var bw = Math.ceil(this.canvasEl.width / this.getScaleLevel());
            var bh = Math.ceil(this.canvasEl.height / this.getScaleLevel());
            
            this.startScale = this.scale;
            
            while (this.getScaleLevel() < minScale){
            
                this.scale = this.scale + 1;
                
                if(!this.zoomable()){
                    break;
                }
                
                if(
                        Math.ceil(bw * this.getScaleLevel()) < this.thumbEl.getHeight() ||
                        Math.ceil(bh * this.getScaleLevel()) < this.thumbEl.getWidth()
                ){
                    continue;
                }
                
                this.rotate = (this.rotate > 180) ? 0 : this.rotate + 90;

                this.draw();
                
                return;
            }
            
            this.scale = this.startScale;
            
            this.onRotateFail();
            
            return false;
        }
        
        this.rotate = (this.rotate > 180) ? 0 : this.rotate + 90;

        if(this.isDocument){
            this.setThumbBoxSize();
            this.setThumbBoxPosition();
            this.setCanvasPosition();
        }
        
        this.draw();
        
        this.fireEvent('rotate', this, 'right');
    },
    
    onRotateFail : function()
    {
        this.errorEl.show(true);
        
        var _this = this;
        
        (function() { _this.errorEl.hide(true); }).defer(this.errorTimeout);
    },
    
    draw : function()
    {
        this.previewEl.dom.innerHTML = '';
        
        var canvasEl = document.createElement("canvas");
        
        var contextEl = canvasEl.getContext("2d");
        
        canvasEl.width = this.imageEl.OriginWidth * this.getScaleLevel();
        canvasEl.height = this.imageEl.OriginWidth * this.getScaleLevel();
        var center = this.imageEl.OriginWidth / 2;
        
        if(this.imageEl.OriginWidth < this.imageEl.OriginHeight){
            canvasEl.width = this.imageEl.OriginHeight * this.getScaleLevel();
            canvasEl.height = this.imageEl.OriginHeight * this.getScaleLevel();
            center = this.imageEl.OriginHeight / 2;
        }
        
        contextEl.scale(this.getScaleLevel(), this.getScaleLevel());
        
        contextEl.translate(center, center);
        contextEl.rotate(this.rotate * Math.PI / 180);

        contextEl.drawImage(this.imageEl, 0, 0, this.imageEl.OriginWidth, this.imageEl.OriginHeight, center * -1, center * -1, this.imageEl.OriginWidth, this.imageEl.OriginHeight);
        
        this.canvasEl = document.createElement("canvas");
        
        this.contextEl = this.canvasEl.getContext("2d");
        
        switch (this.rotate) {
            case 0 :
                
                this.canvasEl.width = this.imageEl.OriginWidth * this.getScaleLevel();
                this.canvasEl.height = this.imageEl.OriginHeight * this.getScaleLevel();
                
                this.contextEl.drawImage(canvasEl, 0, 0, this.canvasEl.width, this.canvasEl.height, 0, 0, this.canvasEl.width, this.canvasEl.height);
                
                break;
            case 90 : 
                
                this.canvasEl.width = this.imageEl.OriginHeight * this.getScaleLevel();
                this.canvasEl.height = this.imageEl.OriginWidth * this.getScaleLevel();
                
                if(this.imageEl.OriginWidth > this.imageEl.OriginHeight){
                    this.contextEl.drawImage(canvasEl, Math.abs(this.canvasEl.width - this.canvasEl.height), 0, this.canvasEl.width, this.canvasEl.height, 0, 0, this.canvasEl.width, this.canvasEl.height);
                    break;
                }
                
                this.contextEl.drawImage(canvasEl, 0, 0, this.canvasEl.width, this.canvasEl.height, 0, 0, this.canvasEl.width, this.canvasEl.height);
                
                break;
            case 180 :
                
                this.canvasEl.width = this.imageEl.OriginWidth * this.getScaleLevel();
                this.canvasEl.height = this.imageEl.OriginHeight * this.getScaleLevel();
                
                if(this.imageEl.OriginWidth > this.imageEl.OriginHeight){
                    this.contextEl.drawImage(canvasEl, 0, Math.abs(this.canvasEl.width - this.canvasEl.height), this.canvasEl.width, this.canvasEl.height, 0, 0, this.canvasEl.width, this.canvasEl.height);
                    break;
                }
                
                this.contextEl.drawImage(canvasEl, Math.abs(this.canvasEl.width - this.canvasEl.height), 0, this.canvasEl.width, this.canvasEl.height, 0, 0, this.canvasEl.width, this.canvasEl.height);
                
                break;
            case 270 :
                
                this.canvasEl.width = this.imageEl.OriginHeight * this.getScaleLevel();
                this.canvasEl.height = this.imageEl.OriginWidth * this.getScaleLevel();
        
                if(this.imageEl.OriginWidth > this.imageEl.OriginHeight){
                    this.contextEl.drawImage(canvasEl, 0, 0, this.canvasEl.width, this.canvasEl.height, 0, 0, this.canvasEl.width, this.canvasEl.height);
                    break;
                }
                
                this.contextEl.drawImage(canvasEl, 0, Math.abs(this.canvasEl.width - this.canvasEl.height), this.canvasEl.width, this.canvasEl.height, 0, 0, this.canvasEl.width, this.canvasEl.height);
                
                break;
            default : 
                break;
        }
        
        this.previewEl.appendChild(this.canvasEl);
        
        this.setCanvasPosition(false);
    },
    
    crop : function()
    {
        if(!this.canvasLoaded){
            return;
        }
        
        var imageCanvas = document.createElement("canvas");
        
        var imageContext = imageCanvas.getContext("2d");
        
        imageCanvas.width = (this.imageEl.OriginWidth > this.imageEl.OriginHeight) ? this.imageEl.OriginWidth : this.imageEl.OriginHeight;
        imageCanvas.height = (this.imageEl.OriginWidth > this.imageEl.OriginHeight) ? this.imageEl.OriginWidth : this.imageEl.OriginHeight;
        
        var center = imageCanvas.width / 2;
        
        imageContext.translate(center, center);
        
        imageContext.rotate(this.rotate * Math.PI / 180);
        
        imageContext.drawImage(this.imageEl, 0, 0, this.imageEl.OriginWidth, this.imageEl.OriginHeight, center * -1, center * -1, this.imageEl.OriginWidth, this.imageEl.OriginHeight);
        
        var canvas = document.createElement("canvas");
        
        var context = canvas.getContext("2d");

        canvas.width = this.thumbEl.getWidth() / this.getScaleLevel();
        
        canvas.height = this.thumbEl.getHeight() / this.getScaleLevel();

        switch (this.rotate) {
            case 0 :
                
                var width = (this.thumbEl.getWidth() / this.getScaleLevel() > this.imageEl.OriginWidth) ? this.imageEl.OriginWidth : (this.thumbEl.getWidth() / this.getScaleLevel());
                var height = (this.thumbEl.getHeight() / this.getScaleLevel() > this.imageEl.OriginHeight) ? this.imageEl.OriginHeight : (this.thumbEl.getHeight() / this.getScaleLevel());
                
                var x = (this.thumbEl.getLeft(true) > this.previewEl.getLeft(true)) ? 0 : ((this.previewEl.getLeft(true) - this.thumbEl.getLeft(true)) / this.getScaleLevel());
                var y = (this.thumbEl.getTop(true) > this.previewEl.getTop(true)) ? 0 : ((this.previewEl.getTop(true) - this.thumbEl.getTop(true)) / this.getScaleLevel());
                
                var sx = this.thumbEl.getLeft(true) - this.previewEl.getLeft(true);
                var sy = this.thumbEl.getTop(true) - this.previewEl.getTop(true);

                sx = sx < 0 ? 0 : (sx / this.getScaleLevel());
                sy = sy < 0 ? 0 : (sy / this.getScaleLevel());

                if(canvas.width > this.outputMaxWidth) {
                    var scale = this.outputMaxWidth / canvas.width;
                    canvas.width = canvas.width * scale;
                    canvas.height = canvas.height * scale;
                    context.scale(scale, scale);
                }

                context.fillStyle = 'white';
                context.fillRect(0, 0, this.thumbEl.getWidth() / this.getScaleLevel(), this.thumbEl.getHeight() / this.getScaleLevel());


                context.drawImage(imageCanvas, sx, sy, width, height, x, y, width, height);
                
                break;
            case 90 : 
                
                var width = (this.thumbEl.getWidth() / this.getScaleLevel() > this.imageEl.OriginHeight) ? this.imageEl.OriginHeight : (this.thumbEl.getWidth() / this.getScaleLevel());
                var height = (this.thumbEl.getHeight() / this.getScaleLevel() > this.imageEl.OriginWidth) ? this.imageEl.OriginWidth : (this.thumbEl.getHeight() / this.getScaleLevel());
                
                var x = (this.thumbEl.getLeft(true) > this.previewEl.getLeft(true)) ? 0 : ((this.previewEl.getLeft(true) - this.thumbEl.getLeft(true)) / this.getScaleLevel());
                var y = (this.thumbEl.getTop(true) > this.previewEl.getTop(true)) ? 0 : ((this.previewEl.getTop(true) - this.thumbEl.getTop(true)) / this.getScaleLevel());
                
                var targetWidth = this.minWidth - 2 * x;
                var targetHeight = this.minHeight - 2 * y;
                
                var scale = 1;
                
                if((x == 0 && y == 0) || (x == 0 && y > 0)){
                    scale = targetWidth / width;
                }
                
                if(x > 0 && y == 0){
                    scale = targetHeight / height;
                }
                
                if(x > 0 && y > 0){
                    scale = targetWidth / width;
                    
                    if(width < height){
                        scale = targetHeight / height;
                    }
                }
                
                context.scale(scale, scale);
                
                var sx = Math.min(this.canvasEl.width - this.thumbEl.getWidth(), this.thumbEl.getLeft(true) - this.previewEl.getLeft(true));
                var sy = Math.min(this.canvasEl.height - this.thumbEl.getHeight(), this.thumbEl.getTop(true) - this.previewEl.getTop(true));

                sx = sx < 0 ? 0 : (sx / this.getScaleLevel());
                sy = sy < 0 ? 0 : (sy / this.getScaleLevel());
                
                sx += (this.imageEl.OriginWidth > this.imageEl.OriginHeight) ? Math.abs(this.imageEl.OriginWidth - this.imageEl.OriginHeight) : 0;
                
                context.drawImage(imageCanvas, sx, sy, width, height, x, y, width, height);
                
                break;
            case 180 :
                
                var width = (this.thumbEl.getWidth() / this.getScaleLevel() > this.imageEl.OriginWidth) ? this.imageEl.OriginWidth : (this.thumbEl.getWidth() / this.getScaleLevel());
                var height = (this.thumbEl.getHeight() / this.getScaleLevel() > this.imageEl.OriginHeight) ? this.imageEl.OriginHeight : (this.thumbEl.getHeight() / this.getScaleLevel());
                
                var x = (this.thumbEl.getLeft(true) > this.previewEl.getLeft(true)) ? 0 : ((this.previewEl.getLeft(true) - this.thumbEl.getLeft(true)) / this.getScaleLevel());
                var y = (this.thumbEl.getTop(true) > this.previewEl.getTop(true)) ? 0 : ((this.previewEl.getTop(true) - this.thumbEl.getTop(true)) / this.getScaleLevel());
                
                var targetWidth = this.minWidth - 2 * x;
                var targetHeight = this.minHeight - 2 * y;
                
                var scale = 1;
                
                if((x == 0 && y == 0) || (x == 0 && y > 0)){
                    scale = targetWidth / width;
                }
                
                if(x > 0 && y == 0){
                    scale = targetHeight / height;
                }
                
                if(x > 0 && y > 0){
                    scale = targetWidth / width;
                    
                    if(width < height){
                        scale = targetHeight / height;
                    }
                }
                
                context.scale(scale, scale);
                
                var sx = Math.min(this.canvasEl.width - this.thumbEl.getWidth(), this.thumbEl.getLeft(true) - this.previewEl.getLeft(true));
                var sy = Math.min(this.canvasEl.height - this.thumbEl.getHeight(), this.thumbEl.getTop(true) - this.previewEl.getTop(true));

                sx = sx < 0 ? 0 : (sx / this.getScaleLevel());
                sy = sy < 0 ? 0 : (sy / this.getScaleLevel());

                sx += (this.imageEl.OriginWidth > this.imageEl.OriginHeight) ? 0 : Math.abs(this.imageEl.OriginWidth - this.imageEl.OriginHeight);
                sy += (this.imageEl.OriginWidth > this.imageEl.OriginHeight) ? Math.abs(this.imageEl.OriginWidth - this.imageEl.OriginHeight) : 0;
                
                context.drawImage(imageCanvas, sx, sy, width, height, x, y, width, height);
                
                break;
            case 270 :
                
                var width = (this.thumbEl.getWidth() / this.getScaleLevel() > this.imageEl.OriginHeight) ? this.imageEl.OriginHeight : (this.thumbEl.getWidth() / this.getScaleLevel());
                var height = (this.thumbEl.getHeight() / this.getScaleLevel() > this.imageEl.OriginWidth) ? this.imageEl.OriginWidth : (this.thumbEl.getHeight() / this.getScaleLevel());
                
                var x = (this.thumbEl.getLeft(true) > this.previewEl.getLeft(true)) ? 0 : ((this.previewEl.getLeft(true) - this.thumbEl.getLeft(true)) / this.getScaleLevel());
                var y = (this.thumbEl.getTop(true) > this.previewEl.getTop(true)) ? 0 : ((this.previewEl.getTop(true) - this.thumbEl.getTop(true)) / this.getScaleLevel());
                
                var targetWidth = this.minWidth - 2 * x;
                var targetHeight = this.minHeight - 2 * y;
                
                var scale = 1;
                
                if((x == 0 && y == 0) || (x == 0 && y > 0)){
                    scale = targetWidth / width;
                }
                
                if(x > 0 && y == 0){
                    scale = targetHeight / height;
                }
                
                if(x > 0 && y > 0){
                    scale = targetWidth / width;
                    
                    if(width < height){
                        scale = targetHeight / height;
                    }
                }
                
                context.scale(scale, scale);
                var sx = Math.min(this.canvasEl.width - this.thumbEl.getWidth(), this.thumbEl.getLeft(true) - this.previewEl.getLeft(true));
                var sy = Math.min(this.canvasEl.height - this.thumbEl.getHeight(), this.thumbEl.getTop(true) - this.previewEl.getTop(true));

                sx = sx < 0 ? 0 : (sx / this.getScaleLevel());
                sy = sy < 0 ? 0 : (sy / this.getScaleLevel());
                
                sy += (this.imageEl.OriginWidth > this.imageEl.OriginHeight) ? 0 : Math.abs(this.imageEl.OriginWidth - this.imageEl.OriginHeight);
                
                context.drawImage(imageCanvas, sx, sy, width, height, x, y, width, height);
                
                break;
            default : 
                break;
        }
        
        this.cropData = canvas.toDataURL(this.cropType);
        
        if(this.fireEvent('crop', this, this.cropData) !== false){
            this.process(this.file, this.cropData);
        }
        
        return;
        
    },
    
    setThumbBoxSize : function()
    {
        var width, height;
        
        if(this.isDocument && typeof(this.imageEl) != 'undefined'){
            width = (this.imageEl.OriginWidth > this.imageEl.OriginHeight) ? Math.max(this.minWidth, this.minHeight) : Math.min(this.minWidth, this.minHeight);
            height = (this.imageEl.OriginWidth > this.imageEl.OriginHeight) ? Math.min(this.minWidth, this.minHeight) : Math.max(this.minWidth, this.minHeight);
            
            this.minWidth = width;
            this.minHeight = height;
            
            if(this.rotate == 90 || this.rotate == 270){
                this.minWidth = height;
                this.minHeight = width;
            }
        }
        
        height = this.windowSize;
        width = Math.ceil(this.minWidth * height / this.minHeight);
        
        if(this.minWidth > this.minHeight){
            width = this.windowSize;
            height = Math.ceil(this.minHeight * width / this.minWidth);
        }
        
        this.thumbEl.setStyle({
            width : width + 'px',
            height : height + 'px'
        });

        return;
            
    },
    
    setThumbBoxPosition : function()
    {
        var x = Math.ceil((this.bodyEl.getWidth() - this.thumbEl.getWidth()) / 2 );
        var y = Math.ceil((this.bodyEl.getHeight() - this.thumbEl.getHeight()) / 2);
        
        this.thumbEl.setLeft(x);
        this.thumbEl.setTop(y);
        
    },
    
    baseRotateLevel : function()
    {
        this.baseRotate = 1;
        
        if(
                typeof(this.exif) != 'undefined' &&
                typeof(this.exif[Roo.panel.Cropbox['tags']['Orientation']]) != 'undefined' &&
                [1, 3, 6, 8].indexOf(this.exif[Roo.panel.Cropbox['tags']['Orientation']]) != -1
        ){
            this.baseRotate = this.exif[Roo.panel.Cropbox['tags']['Orientation']];
        }
        
        this.rotate = Roo.panel.Cropbox['Orientation'][this.baseRotate];
        
    },
    
    baseScaleLevel : function()
    {
        var width, height;
        
        if(this.isDocument){
            
            if(this.baseRotate == 6 || this.baseRotate == 8){
            
                height = this.thumbEl.getHeight();
                this.baseScale = height / this.imageEl.OriginWidth;

                if(this.imageEl.OriginHeight * this.baseScale > this.thumbEl.getWidth()){
                    width = this.thumbEl.getWidth();
                    this.baseScale = width / this.imageEl.OriginHeight;
                }

                return;
            }

            height = this.thumbEl.getHeight();
            this.baseScale = height / this.imageEl.OriginHeight;

            if(this.imageEl.OriginWidth * this.baseScale > this.thumbEl.getWidth()){
                width = this.thumbEl.getWidth();
                this.baseScale = width / this.imageEl.OriginWidth;
            }

            return;
        }
        
        if(this.baseRotate == 6 || this.baseRotate == 8){
            
            width = this.thumbEl.getHeight();
            this.baseScale = width / this.imageEl.OriginHeight;
            
            if(this.imageEl.OriginHeight * this.baseScale < this.thumbEl.getWidth()){
                height = this.thumbEl.getWidth();
                this.baseScale = height / this.imageEl.OriginHeight;
            }
            
            if(this.imageEl.OriginWidth > this.imageEl.OriginHeight){
                height = this.thumbEl.getWidth();
                this.baseScale = height / this.imageEl.OriginHeight;
                
                if(this.imageEl.OriginWidth * this.baseScale < this.thumbEl.getHeight()){
                    width = this.thumbEl.getHeight();
                    this.baseScale = width / this.imageEl.OriginWidth;
                }
            }
            
            return;
        }
        
        width = this.thumbEl.getWidth();
        this.baseScale = width / this.imageEl.OriginWidth;
        
        if(this.imageEl.OriginHeight * this.baseScale < this.thumbEl.getHeight()){
            height = this.thumbEl.getHeight();
            this.baseScale = height / this.imageEl.OriginHeight;
        }
        
        if(this.imageEl.OriginWidth > this.imageEl.OriginHeight){
            
            height = this.thumbEl.getHeight();
            this.baseScale = height / this.imageEl.OriginHeight;
            
            if(this.imageEl.OriginWidth * this.baseScale < this.thumbEl.getWidth()){
                width = this.thumbEl.getWidth();
                this.baseScale = width / this.imageEl.OriginWidth;
            }
            
        }

        if(this.imageEl.OriginWidth < this.minWidth || this.imageEl.OriginHeight < this.minHeight) {
            this.baseScale = width / this.minWidth;
        }

        return;
    },
    
    getScaleLevel : function()
    {
        return this.baseScale * Math.pow(1.02, this.scale);
    },
    
    onTouchStart : function(e)
    {
        if(!this.canvasLoaded){
            this.beforeSelectFile(e);
            return;
        }
        
        var touches = e.browserEvent.touches;
        
        if(!touches){
            return;
        }
        
        if(touches.length == 1){
            this.onMouseDown(e);
            return;
        }
        
        if(touches.length != 2){
            return;
        }
        
        var coords = [];
        
        for(var i = 0, finger; finger = touches[i]; i++){
            coords.push(finger.pageX, finger.pageY);
        }
        
        var x = Math.pow(coords[0] - coords[2], 2);
        var y = Math.pow(coords[1] - coords[3], 2);
        
        this.startDistance = Math.sqrt(x + y);
        
        this.startScale = this.scale;
        
        this.pinching = true;
        this.dragable = false;
        
    },
    
    onTouchMove : function(e)
    {
        if(!this.pinching && !this.dragable){
            return;
        }
        
        var touches = e.browserEvent.touches;
        
        if(!touches){
            return;
        }
        
        if(this.dragable){
            this.onMouseMove(e);
            return;
        }
        
        var coords = [];
        
        for(var i = 0, finger; finger = touches[i]; i++){
            coords.push(finger.pageX, finger.pageY);
        }
        
        var x = Math.pow(coords[0] - coords[2], 2);
        var y = Math.pow(coords[1] - coords[3], 2);
        
        this.endDistance = Math.sqrt(x + y);
        
        this.scale = this.startScale + Math.floor(Math.log(this.endDistance / this.startDistance) / Math.log(1.1));
        
        if(!this.zoomable()){
            this.scale = this.startScale;
            return;
        }
        
        this.draw();
        
    },
    
    onTouchEnd : function(e)
    {
        this.pinching = false;
        this.dragable = false;
        
    },
    
    process : function(file, crop)
    {
        if(this.loadMask){
            this.maskEl.mask(this.loadingText);
        }
        
        this.xhr = new XMLHttpRequest();
        
        file.xhr = this.xhr;

        this.xhr.open(this.method, this.url, true);
        
        var headers = {
            "Accept": "application/json",
            "Cache-Control": "no-cache",
            "X-Requested-With": "XMLHttpRequest"
        };
        
        for (var headerName in headers) {
            var headerValue = headers[headerName];
            if (headerValue) {
                this.xhr.setRequestHeader(headerName, headerValue);
            }
        }
        
        var _this = this;
        
        this.xhr.onload = function()
        {
            _this.xhrOnLoad(_this.xhr);
        }
        
        this.xhr.onerror = function()
        {
            _this.xhrOnError(_this.xhr);
        }
        
        var formData = new FormData();

        formData.append('returnHTML', 'NO');

        if(crop){
            formData.append('crop', crop);
            var blobBin = atob(crop.split(',')[1]);
            var array = [];
            for(var i = 0; i < blobBin.length; i++) {
                array.push(blobBin.charCodeAt(i));
            }
            var croppedFile =new Blob([new Uint8Array(array)], {type: this.cropType});
            formData.append(this.paramName, croppedFile, file.name);
        }
        
        if(typeof(file.filename) != 'undefined'){
            formData.append('filename', file.filename);
        }
        
        if(typeof(file.mimetype) != 'undefined'){
            formData.append('mimetype', file.mimetype);
        }

        if(this.fireEvent('arrange', this, formData) != false){
            this.xhr.send(formData);
        };
    },
    
    xhrOnLoad : function(xhr)
    {
        if(this.loadMask){
            this.maskEl.unmask();
        }
        
        if (xhr.readyState !== 4) {
            this.fireEvent('exception', this, xhr);
            return;
        }

        var response = Roo.decode(xhr.responseText);
        
        if(!response.success){
            this.fireEvent('exception', this, xhr);
            return;
        }
        
        var response = Roo.decode(xhr.responseText);
        
        this.fireEvent('upload', this, response);
        
    },
    
    xhrOnError : function()
    {
        if(this.loadMask){
            this.maskEl.unmask();
        }
        
        Roo.log('xhr on error');
        
        var response = Roo.decode(xhr.responseText);
          
        Roo.log(response);
        
    },
    
    prepare : function(file)
    {   
        if(this.loadMask){
            this.maskEl.mask(this.loadingText);
        }
        
        this.file = false;
        this.exif = {};
        
        if(typeof(file) === 'string'){
            this.loadCanvas(file);
            return;
        }
        
        if(!file || !this.urlAPI){
            return;
        }
        
        this.file = file;
        if(typeof(file.type) != 'undefined' && file.type.length != 0) {
            this.cropType = file.type;
        }
        
        var _this = this;
        
        if(this.fireEvent('prepare', this, this.file) != false){
            
            var reader = new FileReader();
            
            reader.onload = function (e) {
                if (e.target.error) {
                    Roo.log(e.target.error);
                    return;
                }
                
                var buffer = e.target.result,
                    dataView = new DataView(buffer),
                    offset = 2,
                    maxOffset = dataView.byteLength - 4,
                    markerBytes,
                    markerLength;
                
                if (dataView.getUint16(0) === 0xffd8) {
                    while (offset < maxOffset) {
                        markerBytes = dataView.getUint16(offset);
                        
                        if ((markerBytes >= 0xffe0 && markerBytes <= 0xffef) || markerBytes === 0xfffe) {
                            markerLength = dataView.getUint16(offset + 2) + 2;
                            if (offset + markerLength > dataView.byteLength) {
                                Roo.log('Invalid meta data: Invalid segment size.');
                                break;
                            }
                            
                            if(markerBytes == 0xffe1){
                                _this.parseExifData(
                                    dataView,
                                    offset,
                                    markerLength
                                );
                            }
                            
                            offset += markerLength;
                            
                            continue;
                        }
                        
                        break;
                    }
                    
                }
                
                var url = _this.urlAPI.createObjectURL(_this.file);
                
                _this.loadCanvas(url);
                
                return;
            }
            
            reader.readAsArrayBuffer(this.file);
            
        }
        
    },
    
    parseExifData : function(dataView, offset, length)
    {
        var tiffOffset = offset + 10,
            littleEndian,
            dirOffset;
    
        if (dataView.getUint32(offset + 4) !== 0x45786966) {
            // No Exif data, might be XMP data instead
            return;
        }
        
        // Check for the ASCII code for "Exif" (0x45786966):
        if (dataView.getUint32(offset + 4) !== 0x45786966) {
            // No Exif data, might be XMP data instead
            return;
        }
        if (tiffOffset + 8 > dataView.byteLength) {
            Roo.log('Invalid Exif data: Invalid segment size.');
            return;
        }
        // Check for the two null bytes:
        if (dataView.getUint16(offset + 8) !== 0x0000) {
            Roo.log('Invalid Exif data: Missing byte alignment offset.');
            return;
        }
        // Check the byte alignment:
        switch (dataView.getUint16(tiffOffset)) {
        case 0x4949:
            littleEndian = true;
            break;
        case 0x4D4D:
            littleEndian = false;
            break;
        default:
            Roo.log('Invalid Exif data: Invalid byte alignment marker.');
            return;
        }
        // Check for the TIFF tag marker (0x002A):
        if (dataView.getUint16(tiffOffset + 2, littleEndian) !== 0x002A) {
            Roo.log('Invalid Exif data: Missing TIFF marker.');
            return;
        }
        // Retrieve the directory offset bytes, usually 0x00000008 or 8 decimal:
        dirOffset = dataView.getUint32(tiffOffset + 4, littleEndian);
        
        this.parseExifTags(
            dataView,
            tiffOffset,
            tiffOffset + dirOffset,
            littleEndian
        );
    },
    
    parseExifTags : function(dataView, tiffOffset, dirOffset, littleEndian)
    {
        var tagsNumber,
            dirEndOffset,
            i;
        if (dirOffset + 6 > dataView.byteLength) {
            Roo.log('Invalid Exif data: Invalid directory offset.');
            return;
        }
        tagsNumber = dataView.getUint16(dirOffset, littleEndian);
        dirEndOffset = dirOffset + 2 + 12 * tagsNumber;
        if (dirEndOffset + 4 > dataView.byteLength) {
            Roo.log('Invalid Exif data: Invalid directory size.');
            return;
        }
        for (i = 0; i < tagsNumber; i += 1) {
            this.parseExifTag(
                dataView,
                tiffOffset,
                dirOffset + 2 + 12 * i, // tag offset
                littleEndian
            );
        }
        // Return the offset to the next directory:
        return dataView.getUint32(dirEndOffset, littleEndian);
    },
    
    parseExifTag : function (dataView, tiffOffset, offset, littleEndian) 
    {
        var tag = dataView.getUint16(offset, littleEndian);
        
        this.exif[tag] = this.getExifValue(
            dataView,
            tiffOffset,
            offset,
            dataView.getUint16(offset + 2, littleEndian), // tag type
            dataView.getUint32(offset + 4, littleEndian), // tag length
            littleEndian
        );
    },
    
    getExifValue : function (dataView, tiffOffset, offset, type, length, littleEndian)
    {
        var tagType = Roo.panel.Cropbox.exifTagTypes[type],
            tagSize,
            dataOffset,
            values,
            i,
            str,
            c;
    
        if (!tagType) {
            Roo.log('Invalid Exif data: Invalid tag type.');
            return;
        }
        
        tagSize = tagType.size * length;
        // Determine if the value is contained in the dataOffset bytes,
        // or if the value at the dataOffset is a pointer to the actual data:
        dataOffset = tagSize > 4 ?
                tiffOffset + dataView.getUint32(offset + 8, littleEndian) : (offset + 8);
        if (dataOffset + tagSize > dataView.byteLength) {
            Roo.log('Invalid Exif data: Invalid data offset.');
            return;
        }
        if (length === 1) {
            return tagType.getValue(dataView, dataOffset, littleEndian);
        }
        values = [];
        for (i = 0; i < length; i += 1) {
            values[i] = tagType.getValue(dataView, dataOffset + i * tagType.size, littleEndian);
        }
        
        if (tagType.ascii) {
            str = '';
            // Concatenate the chars:
            for (i = 0; i < values.length; i += 1) {
                c = values[i];
                // Ignore the terminating NULL byte(s):
                if (c === '\u0000') {
                    break;
                }
                str += c;
            }
            return str;
        }
        return values;
    }
    
});

Roo.apply(Roo.panel.Cropbox, {
    tags : {
        'Orientation': 0x0112
    },
    
    Orientation: {
            1: 0, //'top-left',
//            2: 'top-right',
            3: 180, //'bottom-right',
//            4: 'bottom-left',
//            5: 'left-top',
            6: 90, //'right-top',
//            7: 'right-bottom',
            8: 270 //'left-bottom'
    },
    
    exifTagTypes : {
        // byte, 8-bit unsigned int:
        1: {
            getValue: function (dataView, dataOffset) {
                return dataView.getUint8(dataOffset);
            },
            size: 1
        },
        // ascii, 8-bit byte:
        2: {
            getValue: function (dataView, dataOffset) {
                return String.fromCharCode(dataView.getUint8(dataOffset));
            },
            size: 1,
            ascii: true
        },
        // short, 16 bit int:
        3: {
            getValue: function (dataView, dataOffset, littleEndian) {
                return dataView.getUint16(dataOffset, littleEndian);
            },
            size: 2
        },
        // long, 32 bit int:
        4: {
            getValue: function (dataView, dataOffset, littleEndian) {
                return dataView.getUint32(dataOffset, littleEndian);
            },
            size: 4
        },
        // rational = two long values, first is numerator, second is denominator:
        5: {
            getValue: function (dataView, dataOffset, littleEndian) {
                return dataView.getUint32(dataOffset, littleEndian) /
                    dataView.getUint32(dataOffset + 4, littleEndian);
            },
            size: 8
        },
        // slong, 32 bit signed int:
        9: {
            getValue: function (dataView, dataOffset, littleEndian) {
                return dataView.getInt32(dataOffset, littleEndian);
            },
            size: 4
        },
        // srational, two slongs, first is numerator, second is denominator:
        10: {
            getValue: function (dataView, dataOffset, littleEndian) {
                return dataView.getInt32(dataOffset, littleEndian) /
                    dataView.getInt32(dataOffset + 4, littleEndian);
            },
            size: 8
        }
    },
    
    footer : {
        STANDARD : [
            {
                tag : 'div',
                cls : 'btn-group roo-upload-cropbox-rotate-left',
                action : 'rotate-left',
                cn : [
                    {
                        tag : 'button',
                        cls : 'btn btn-default',
                        html : '<i class="fa fa-undo"></i>'
                    }
                ]
            },
            {
                tag : 'div',
                cls : 'btn-group roo-upload-cropbox-picture',
                action : 'picture',
                cn : [
                    {
                        tag : 'button',
                        cls : 'btn btn-default',
                        html : '<i class="fa fa-picture-o"></i>'
                    }
                ]
            },
            {
                tag : 'div',
                cls : 'btn-group roo-upload-cropbox-rotate-right',
                action : 'rotate-right',
                cn : [
                    {
                        tag : 'button',
                        cls : 'btn btn-default',
                        html : '<i class="fa fa-repeat"></i>'
                    }
                ]
            }
        ],
        DOCUMENT : [
            {
                tag : 'div',
                cls : 'btn-group roo-upload-cropbox-rotate-left',
                action : 'rotate-left',
                cn : [
                    {
                        tag : 'button',
                        cls : 'btn btn-default',
                        html : '<i class="fa fa-undo"></i>'
                    }
                ]
            },
            {
                tag : 'div',
                cls : 'btn-group roo-upload-cropbox-download',
                action : 'download',
                cn : [
                    {
                        tag : 'button',
                        cls : 'btn btn-default',
                        html : '<i class="fa fa-download"></i>'
                    }
                ]
            },
            {
                tag : 'div',
                cls : 'btn-group roo-upload-cropbox-crop',
                action : 'crop',
                cn : [
                    {
                        tag : 'button',
                        cls : 'btn btn-default',
                        html : '<i class="fa fa-crop"></i>'
                    }
                ]
            },
            {
                tag : 'div',
                cls : 'btn-group roo-upload-cropbox-trash',
                action : 'trash',
                cn : [
                    {
                        tag : 'button',
                        cls : 'btn btn-default',
                        html : '<i class="fa fa-trash"></i>'
                    }
                ]
            },
            {
                tag : 'div',
                cls : 'btn-group roo-upload-cropbox-rotate-right',
                action : 'rotate-right',
                cn : [
                    {
                        tag : 'button',
                        cls : 'btn btn-default',
                        html : '<i class="fa fa-repeat"></i>'
                    }
                ]
            }
        ],
        ROTATOR : [
            {
                tag : 'div',
                cls : 'btn-group roo-upload-cropbox-rotate-left',
                action : 'rotate-left',
                cn : [
                    {
                        tag : 'button',
                        cls : 'btn btn-default',
                        html : '<i class="fa fa-undo"></i>'
                    }
                ]
            },
            {
                tag : 'div',
                cls : 'btn-group roo-upload-cropbox-rotate-right',
                action : 'rotate-right',
                cn : [
                    {
                        tag : 'button',
                        cls : 'btn btn-default',
                        html : '<i class="fa fa-repeat"></i>'
                    }
                ]
            }
        ],
        CENTER : [
            {
                tag : 'div',
                cls : 'btn-group roo-upload-cropbox-center',
                action : 'center',
                cn : [
                    {
                        tag : 'button',
                        cls : 'btn btn-default',
                        html : 'CENTER'
                    }
                ]
            }
        ]
    }
});
        /*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.panel.Tab
 * @extends Roo.util.Observable
 * A lightweight tab container.
 * <br><br>
 * Usage:
 * <pre><code>
// basic tabs 1, built from existing content
var tabs = new Roo.panel.Tab("tabs1");
tabs.addTab("script", "View Script");
tabs.addTab("markup", "View Markup");
tabs.activate("script");

// more advanced tabs, built from javascript
var jtabs = new Roo.panel.Tab("jtabs");
jtabs.addTab("jtabs-1", "Normal Tab", "My content was added during construction.");

// set up the UpdateManager
var tab2 = jtabs.addTab("jtabs-2", "Ajax Tab 1");
var updater = tab2.getUpdateManager();
updater.setDefaultUrl("ajax1.htm");
tab2.on('activate', updater.refresh, updater, true);

// Use setUrl for Ajax loading
var tab3 = jtabs.addTab("jtabs-3", "Ajax Tab 2");
tab3.setUrl("ajax2.htm", null, true);

// Disabled tab
var tab4 = jtabs.addTab("tabs1-5", "Disabled Tab", "Can't see me cause I'm disabled");
tab4.disable();

jtabs.activate("jtabs-1");
 * </code></pre>
 * @constructor
 * Create a new TabPanel.
 * @param {String/HTMLElement/Roo.Element} container The id, DOM element or Roo.Element container where this TabPanel is to be rendered.
 * @param {Object/Boolean} config Config object to set any properties for this TabPanel, or true to render the tabs on the bottom.
 */
Roo.panel.Tab = function(container, config){
    /**
    * The container element for this TabPanel.
    * @type Roo.Element
    */
    this.el = Roo.get(container, true);
    if(config){
        if(typeof config == "boolean"){
            this.tabPosition = config ? "bottom" : "top";
        }else{
            Roo.apply(this, config);
        }
    }
    if(this.tabPosition == "bottom"){
        this.bodyEl = Roo.get(this.createBody(this.el.dom));
        this.el.addClass("x-tabs-bottom");
    }
    this.stripWrap = Roo.get(this.createStrip(this.el.dom), true);
    this.stripEl = Roo.get(this.createStripList(this.stripWrap.dom), true);
    this.stripBody = Roo.get(this.stripWrap.dom.firstChild.firstChild, true);
    if(Roo.isIE){
        Roo.fly(this.stripWrap.dom.firstChild).setStyle("overflow-x", "hidden");
    }
    if(this.tabPosition != "bottom"){
        /** The body element that contains {@link Roo.panel.TabItem} bodies. +
         * @type Roo.Element
         */
        this.bodyEl = Roo.get(this.createBody(this.el.dom));
        this.el.addClass("x-tabs-top");
    }
    this.items = [];

    this.bodyEl.setStyle("position", "relative");

    this.active = null;
    this.activateDelegate = this.activate.createDelegate(this);

    this.addEvents({
        /**
         * @event tabchange
         * Fires when the active tab changes
         * @param {Roo.panel.Tab} this
         * @param {Roo.panel.TabItem} activePanel The new active tab
         */
        "tabchange": true,
        /**
         * @event beforetabchange
         * Fires before the active tab changes, set cancel to true on the "e" parameter to cancel the change
         * @param {Roo.panel.Tab} this
         * @param {Object} e Set cancel to true on this object to cancel the tab change
         * @param {Roo.panel.TabItem} tab The tab being changed to
         */
        "beforetabchange" : true
    });

    Roo.EventManager.onWindowResize(this.onResize, this);
    this.cpad = this.el.getPadding("lr");
    this.hiddenCount = 0;


    // toolbar on the tabbar support...
    if (this.toolbar) {
        var tcfg = this.toolbar;
        tcfg.container = this.stripEl.child('td.x-tab-strip-toolbar');  
        this.toolbar = new Roo.Toolbar(tcfg);
        if (Roo.isSafari) {
            var tbl = tcfg.container.child('table', true);
            tbl.setAttribute('width', '100%');
        }
        
    }
   


    Roo.panel.Tab.superclass.constructor.call(this);
};

Roo.extend(Roo.panel.Tab, Roo.util.Observable, {
    /*
     *@cfg {String} tabPosition "top" or "bottom" (defaults to "top")
     */
    tabPosition : "top",
    /*
     *@cfg {Number} currentTabWidth The width of the current tab (defaults to 0)
     */
    currentTabWidth : 0,
    /*
     *@cfg {Number} minTabWidth The minimum width of a tab (defaults to 40) (ignored if {@link #resizeTabs} is not true)
     */
    minTabWidth : 40,
    /*
     *@cfg {Number} maxTabWidth The maximum width of a tab (defaults to 250) (ignored if {@link #resizeTabs} is not true)
     */
    maxTabWidth : 250,
    /*
     *@cfg {Number} preferredTabWidth The preferred (default) width of a tab (defaults to 175) (ignored if {@link #resizeTabs} is not true)
     */
    preferredTabWidth : 175,
    /*
     *@cfg {Boolean} resizeTabs True to enable dynamic tab resizing (defaults to false)
     */
    resizeTabs : false,
    /*
     *@cfg {Boolean} monitorResize Set this to true to turn on window resize monitoring (ignored if {@link #resizeTabs} is not true) (defaults to true)
     */
    monitorResize : true,
    /*
     *@cfg {Object} toolbar xtype description of toolbar to show at the right of the tab bar. 
     */
    toolbar : false,

    /**
     * Creates a new {@link Roo.panel.TabItem} by looking for an existing element with the provided id -- if it's not found it creates one.
     * @param {String} id The id of the div to use <b>or create</b>
     * @param {String} text The text for the tab
     * @param {String} content (optional) Content to put in the TabPanelItem body
     * @param {Boolean} closable (optional) True to create a close icon on the tab
     * @return {Roo.panel.TabItem} The created TabPanelItem
     */
    addTab : function(id, text, content, closable){
        var item = new Roo.panel.TabItem(this, id, text, closable);
        this.addTabItem(item);
        if(content){
            item.setContent(content);
        }
        return item;
    },

    /**
     * Returns the {@link Roo.panel.TabItem} with the specified id/index
     * @param {String/Number} id The id or index of the TabPanelItem to fetch.
     * @return {Roo.panel.TabItem}
     */
    getTab : function(id){
        return this.items[id];
    },

    /**
     * Hides the {@link Roo.panel.TabItem} with the specified id/index
     * @param {String/Number} id The id or index of the TabPanelItem to hide.
     */
    hideTab : function(id){
        var t = this.items[id];
        if(!t.isHidden()){
           t.setHidden(true);
           this.hiddenCount++;
           this.autoSizeTabs();
        }
    },

    /**
     * "Unhides" the {@link Roo.panel.TabItem} with the specified id/index.
     * @param {String/Number} id The id or index of the TabPanelItem to unhide.
     */
    unhideTab : function(id){
        var t = this.items[id];
        if(t.isHidden()){
           t.setHidden(false);
           this.hiddenCount--;
           this.autoSizeTabs();
        }
    },

    /**
     * Adds an existing {@link Roo.panel.TabItem}.
     * @param {Roo.panel.TabItem} item The TabPanelItem to add
     */
    addTabItem : function(item){
        this.items[item.id] = item;
        this.items.push(item);
        if(this.resizeTabs){
           item.setWidth(this.currentTabWidth || this.preferredTabWidth);
           this.autoSizeTabs();
        }else{
            item.autoSize();
        }
    },

    /**
     * Removes a {@link Roo.panel.TabItem}.
     * @param {String/Number} id The id or index of the TabPanelItem to remove.
     */
    removeTab : function(id){
        var items = this.items;
        var tab = items[id];
        if(!tab) { return; }
        var index = items.indexOf(tab);
        if(this.active == tab && items.length > 1){
            var newTab = this.getNextAvailable(index);
            if(newTab) {
                newTab.activate();
            }
        }
        this.stripEl.dom.removeChild(tab.pnode.dom);
        if(tab.bodyEl.dom.parentNode == this.bodyEl.dom){ // if it was moved already prevent error
            this.bodyEl.dom.removeChild(tab.bodyEl.dom);
        }
        items.splice(index, 1);
        delete this.items[tab.id];
        tab.fireEvent("close", tab);
        tab.purgeListeners();
        this.autoSizeTabs();
    },

    getNextAvailable : function(start){
        var items = this.items;
        var index = start;
        // look for a next tab that will slide over to
        // replace the one being removed
        while(index < items.length){
            var item = items[++index];
            if(item && !item.isHidden()){
                return item;
            }
        }
        // if one isn't found select the previous tab (on the left)
        index = start;
        while(index >= 0){
            var item = items[--index];
            if(item && !item.isHidden()){
                return item;
            }
        }
        return null;
    },

    /**
     * Disables a {@link Roo.panel.TabItem}. It cannot be the active tab, if it is this call is ignored.
     * @param {String/Number} id The id or index of the TabPanelItem to disable.
     */
    disableTab : function(id){
        var tab = this.items[id];
        if(tab && this.active != tab){
            tab.disable();
        }
    },

    /**
     * Enables a {@link Roo.panel.TabItem} that is disabled.
     * @param {String/Number} id The id or index of the TabPanelItem to enable.
     */
    enableTab : function(id){
        var tab = this.items[id];
        tab.enable();
    },

    /**
     * Activates a {@link Roo.panel.TabItem}. The currently active one will be deactivated.
     * @param {String/Number} id The id or index of the TabPanelItem to activate.
     * @return {Roo.panel.TabItem} The TabPanelItem.
     */
    activate : function(id){
        var tab = this.items[id];
        if(!tab){
            return null;
        }
        if(tab == this.active || tab.disabled){
            return tab;
        }
        var e = {};
        this.fireEvent("beforetabchange", this, e, tab);
        if(e.cancel !== true && !tab.disabled){
            if(this.active){
                this.active.hide();
            }
            this.active = this.items[id];
            this.active.show();
            this.fireEvent("tabchange", this, this.active);
        }
        return tab;
    },

    /**
     * Gets the active {@link Roo.panel.TabItem}.
     * @return {Roo.panel.TabItem} The active TabPanelItem or null if none are active.
     */
    getActiveTab : function(){
        return this.active;
    },

    /**
     * Updates the tab body element to fit the height of the container element
     * for overflow scrolling
     * @param {Number} targetHeight (optional) Override the starting height from the elements height
     */
    syncHeight : function(targetHeight){
        var height = (targetHeight || this.el.getHeight())-this.el.getBorderWidth("tb")-this.el.getPadding("tb");
        var bm = this.bodyEl.getMargins();
        var newHeight = height-(this.stripWrap.getHeight()||0)-(bm.top+bm.bottom);
        this.bodyEl.setHeight(newHeight);
        return newHeight;
    },

    onResize : function(){
        if(this.monitorResize){
            this.autoSizeTabs();
        }
    },

    /**
     * Disables tab resizing while tabs are being added (if {@link #resizeTabs} is false this does nothing)
     */
    beginUpdate : function(){
        this.updating = true;
    },

    /**
     * Stops an update and resizes the tabs (if {@link #resizeTabs} is false this does nothing)
     */
    endUpdate : function(){
        this.updating = false;
        this.autoSizeTabs();
    },

    /**
     * Manual call to resize the tabs (if {@link #resizeTabs} is false this does nothing)
     */
    autoSizeTabs : function(){
        var count = this.items.length;
        var vcount = count - this.hiddenCount;
        if(!this.resizeTabs || count < 1 || vcount < 1 || this.updating) {
            return;
        }
        var w = Math.max(this.el.getWidth() - this.cpad, 10);
        var availWidth = Math.floor(w / vcount);
        var b = this.stripBody;
        if(b.getWidth() > w){
            var tabs = this.items;
            this.setTabWidth(Math.max(availWidth, this.minTabWidth)-2);
            if(availWidth < this.minTabWidth){
                /*if(!this.sleft){    // incomplete scrolling code
                    this.createScrollButtons();
                }
                this.showScroll();
                this.stripClip.setWidth(w - (this.sleft.getWidth()+this.sright.getWidth()));*/
            }
        }else{
            if(this.currentTabWidth < this.preferredTabWidth){
                this.setTabWidth(Math.min(availWidth, this.preferredTabWidth)-2);
            }
        }
    },

    /**
     * Returns the number of tabs in this TabPanel.
     * @return {Number}
     */
     getCount : function(){
         return this.items.length;
     },

    /**
     * Resizes all the tabs to the passed width
     * @param {Number} The new width
     */
    setTabWidth : function(width){
        this.currentTabWidth = width;
        for(var i = 0, len = this.items.length; i < len; i++) {
        	if(!this.items[i].isHidden()) {
                this.items[i].setWidth(width);
            }
        }
    },

    /**
     * Destroys this TabPanel
     * @param {Boolean} removeEl (optional) True to remove the element from the DOM as well (defaults to undefined)
     */
    destroy : function(removeEl){
        Roo.EventManager.removeResizeListener(this.onResize, this);
        for(var i = 0, len = this.items.length; i < len; i++){
            this.items[i].purgeListeners();
        }
        if(removeEl === true){
            this.el.update("");
            this.el.remove();
        }
    }
});


/** @private */
Roo.panel.Tab.prototype.createStripList = function(strip){
    // div wrapper for retard IE
    // returns the "tr" element.
    strip.innerHTML = '<div class="x-tabs-strip-wrap">'+
        '<table class="x-tabs-strip" cellspacing="0" cellpadding="0" border="0"><tbody><tr>'+
        '<td class="x-tab-strip-toolbar"></td></tr></tbody></table></div>';
    return strip.firstChild.firstChild.firstChild.firstChild;
};
/** @private */
Roo.panel.Tab.prototype.createBody = function(container){
    var body = document.createElement("div");
    Roo.id(body, "tab-body");
    Roo.fly(body).addClass("x-tabs-body");
    container.appendChild(body);
    return body;
};
/** @private */
Roo.panel.Tab.prototype.createItemBody = function(bodyEl, id){
    var body = Roo.getDom(id);
    if(!body){
        body = document.createElement("div");
        body.id = id;
    }
    Roo.fly(body).addClass("x-tabs-item-body");
    bodyEl.insertBefore(body, bodyEl.firstChild);
    return body;
};
/** @private */
Roo.panel.Tab.prototype.createStripElements = function(stripEl, text, closable){
    var td = document.createElement("td");
    stripEl.insertBefore(td, stripEl.childNodes[stripEl.childNodes.length-1]);
    //stripEl.appendChild(td);
    if(closable){
        td.className = "x-tabs-closable";
        if(!this.closeTpl){
            this.closeTpl = new Roo.Template(
               '<a href="#" class="x-tabs-right"><span class="x-tabs-left"><em class="x-tabs-inner">' +
               '<span unselectable="on"' + (this.disableTooltips ? '' : ' title="{text}"') +' class="x-tabs-text">{text}</span>' +
               '<div unselectable="on" class="close-icon">&#160;</div></em></span></a>'
            );
        }
        var el = this.closeTpl.overwrite(td, {"text": text});
        var close = el.getElementsByTagName("div")[0];
        var inner = el.getElementsByTagName("em")[0];
        return {"el": el, "close": close, "inner": inner};
    } else {
        if(!this.tabTpl){
            this.tabTpl = new Roo.Template(
               '<a href="#" class="x-tabs-right"><span class="x-tabs-left"><em class="x-tabs-inner">' +
               '<span unselectable="on"' + (this.disableTooltips ? '' : ' title="{text}"') +' class="x-tabs-text">{text}</span></em></span></a>'
            );
        }
        var el = this.tabTpl.overwrite(td, {"text": text});
        var inner = el.getElementsByTagName("em")[0];
        return {"el": el, "inner": inner};
    }
};/**
 * @class Roo.panel.TabItem
 * @extends Roo.util.Observable
 * Represents an individual item (tab plus body) in a TabPanel.
 * @param {Roo.panel.Tab} tabPanel The {@link Roo.panel.Tab} this TabPanelItem belongs to
 * @param {String} id The id of this TabPanelItem
 * @param {String} text The text for the tab of this TabPanelItem
 * @param {Boolean} closable True to allow this TabPanelItem to be closable (defaults to false)
 */
 Roo.panel.TabItem = function(tabPanel, id, text, closable){
    /**
     * The {@link Roo.panel.Tab} this TabPanelItem belongs to
     * @type Roo.panel.Tab
     */
    this.tabPanel = tabPanel;
    /**
     * The id for this TabPanelItem
     * @type String
     */
    this.id = id;
    /** @private */
    this.disabled = false;
    /** @private */
    this.text = text;
    /** @private */
    this.loaded = false;
    this.closable = closable;

    /**
     * The body element for this TabPanelItem.
     * @type Roo.Element
     */
    this.bodyEl = Roo.get(tabPanel.createItemBody(tabPanel.bodyEl.dom, id));
    this.bodyEl.setVisibilityMode(Roo.Element.VISIBILITY);
    this.bodyEl.setStyle("display", "block");
    this.bodyEl.setStyle("zoom", "1");
    this.hideAction();

    var els = tabPanel.createStripElements(tabPanel.stripEl.dom, text, closable);
    /** @private */
    this.el = Roo.get(els.el, true);
    this.inner = Roo.get(els.inner, true);
    this.textEl = Roo.get(this.el.dom.firstChild.firstChild.firstChild, true);
    this.pnode = Roo.get(els.el.parentNode, true);
    this.el.on("mousedown", this.onTabMouseDown, this);
    this.el.on("click", this.onTabClick, this);
    /** @private */
    if(closable){
        var c = Roo.get(els.close, true);
        c.dom.title = this.closeText;
        c.addClassOnOver("close-over");
        c.on("click", this.closeClick, this);
     }

    this.addEvents({
         /**
         * @event activate
         * Fires when this tab becomes the active tab.
         * @param {Roo.panel.Tab} tabPanel The parent TabPanel
         * @param {Roo.panel.TabItem} this
         */
        "activate": true,
        /**
         * @event beforeclose
         * Fires before this tab is closed. To cancel the close, set cancel to true on e (e.cancel = true).
         * @param {Roo.panel.TabItem} this
         * @param {Object} e Set cancel to true on this object to cancel the close.
         */
        "beforeclose": true,
        /**
         * @event close
         * Fires when this tab is closed.
         * @param {Roo.panel.TabItem} this
         */
         "close": true,
        /**
         * @event deactivate
         * Fires when this tab is no longer the active tab.
         * @param {Roo.panel.Tab} tabPanel The parent TabPanel
         * @param {Roo.panel.TabItem} this
         */
         "deactivate" : true
    });
    this.hidden = false;

    Roo.panel.TabItem.superclass.constructor.call(this);
};

Roo.extend(Roo.panel.TabItem, Roo.util.Observable, {
    purgeListeners : function(){
       Roo.util.Observable.prototype.purgeListeners.call(this);
       this.el.removeAllListeners();
    },
    /**
     * Shows this TabPanelItem -- this <b>does not</b> deactivate the currently active TabPanelItem.
     */
    show : function(){
        this.pnode.addClass("on");
        this.showAction();
        if(Roo.isOpera){
            this.tabPanel.stripWrap.repaint();
        }
        this.fireEvent("activate", this.tabPanel, this);
    },

    /**
     * Returns true if this tab is the active tab.
     * @return {Boolean}
     */
    isActive : function(){
        return this.tabPanel.getActiveTab() == this;
    },

    /**
     * Hides this TabPanelItem -- if you don't activate another TabPanelItem this could look odd.
     */
    hide : function(){
        this.pnode.removeClass("on");
        this.hideAction();
        this.fireEvent("deactivate", this.tabPanel, this);
    },

    hideAction : function(){
        this.bodyEl.hide();
        this.bodyEl.setStyle("position", "absolute");
        this.bodyEl.setLeft("-20000px");
        this.bodyEl.setTop("-20000px");
    },

    showAction : function(){
        this.bodyEl.setStyle("position", "relative");
        this.bodyEl.setTop("");
        this.bodyEl.setLeft("");
        this.bodyEl.show();
    },

    /**
     * Set the tooltip for the tab.
     * @param {String} tooltip The tab's tooltip
     */
    setTooltip : function(text){
        if(Roo.QuickTips && Roo.QuickTips.isEnabled()){
            this.textEl.dom.qtip = text;
            this.textEl.dom.removeAttribute('title');
        }else{
            this.textEl.dom.title = text;
        }
    },

    onTabClick : function(e){
        e.preventDefault();
        this.tabPanel.activate(this.id);
    },

    onTabMouseDown : function(e){
        e.preventDefault();
        this.tabPanel.activate(this.id);
    },

    getWidth : function(){
        return this.inner.getWidth();
    },

    setWidth : function(width){
        var iwidth = width - this.pnode.getPadding("lr");
        this.inner.setWidth(iwidth);
        this.textEl.setWidth(iwidth-this.inner.getPadding("lr"));
        this.pnode.setWidth(width);
    },

    /**
     * Show or hide the tab
     * @param {Boolean} hidden True to hide or false to show.
     */
    setHidden : function(hidden){
        this.hidden = hidden;
        this.pnode.setStyle("display", hidden ? "none" : "");
    },

    /**
     * Returns true if this tab is "hidden"
     * @return {Boolean}
     */
    isHidden : function(){
        return this.hidden;
    },

    /**
     * Returns the text for this tab
     * @return {String}
     */
    getText : function(){
        return this.text;
    },

    autoSize : function(){
        //this.el.beginMeasure();
        this.textEl.setWidth(1);
        /*
         *  #2804 [new] Tabs in Roojs
         *  increase the width by 2-4 pixels to prevent the ellipssis showing in chrome
         */
        this.setWidth(this.textEl.dom.scrollWidth+this.pnode.getPadding("lr")+this.inner.getPadding("lr") + 2);
        //this.el.endMeasure();
    },

    /**
     * Sets the text for the tab (Note: this also sets the tooltip text)
     * @param {String} text The tab's text and tooltip
     */
    setText : function(text){
        this.text = text;
        this.textEl.update(text);
        this.setTooltip(text);
        if(!this.tabPanel.resizeTabs){
            this.autoSize();
        }
    },
    /**
     * Activates this TabPanelItem -- this <b>does</b> deactivate the currently active TabPanelItem.
     */
    activate : function(){
        this.tabPanel.activate(this.id);
    },

    /**
     * Disables this TabPanelItem -- this does nothing if this is the active TabPanelItem.
     */
    disable : function(){
        if(this.tabPanel.active != this){
            this.disabled = true;
            this.pnode.addClass("disabled");
        }
    },

    /**
     * Enables this TabPanelItem if it was previously disabled.
     */
    enable : function(){
        this.disabled = false;
        this.pnode.removeClass("disabled");
    },

    /**
     * Sets the content for this TabPanelItem.
     * @param {String} content The content
     * @param {Boolean} loadScripts true to look for and load scripts
     */
    setContent : function(content, loadScripts){
        this.bodyEl.update(content, loadScripts);
    },

    /**
     * Gets the {@link Roo.UpdateManager} for the body of this TabPanelItem. Enables you to perform Ajax updates.
     * @return {Roo.UpdateManager} The UpdateManager
     */
    getUpdateManager : function(){
        return this.bodyEl.getUpdateManager();
    },

    /**
     * Set a URL to be used to load the content for this TabPanelItem.
     * @param {String/Function} url The URL to load the content from, or a function to call to get the URL
     * @param {String/Object} params (optional) The string params for the update call or an object of the params. See {@link Roo.UpdateManager#update} for more details. (Defaults to null)
     * @param {Boolean} loadOnce (optional) Whether to only load the content once. If this is false it makes the Ajax call every time this TabPanelItem is activated. (Defaults to false)
     * @return {Roo.UpdateManager} The UpdateManager
     */
    setUrl : function(url, params, loadOnce){
        if(this.refreshDelegate){
            this.un('activate', this.refreshDelegate);
        }
        this.refreshDelegate = this._handleRefresh.createDelegate(this, [url, params, loadOnce]);
        this.on("activate", this.refreshDelegate);
        return this.bodyEl.getUpdateManager();
    },

    /** @private */
    _handleRefresh : function(url, params, loadOnce){
        if(!loadOnce || !this.loaded){
            var updater = this.bodyEl.getUpdateManager();
            updater.update(url, params, this._setLoaded.createDelegate(this));
        }
    },

    /**
     *   Forces a content refresh from the URL specified in the {@link #setUrl} method.
     *   Will fail silently if the setUrl method has not been called.
     *   This does not activate the panel, just updates its content.
     */
    refresh : function(){
        if(this.refreshDelegate){
           this.loaded = false;
           this.refreshDelegate();
        }
    },

    /** @private */
    _setLoaded : function(){
        this.loaded = true;
    },

    /** @private */
    closeClick : function(e){
        var o = {};
        e.stopEvent();
        this.fireEvent("beforeclose", this, o);
        if(o.cancel !== true){
            this.tabPanel.removeTab(this.id);
        }
    },
    /**
     * The text displayed in the tooltip for the close icon.
     * @type String
     */
    closeText : "Close this tab"
});

/** @private */
Roo.panel.Tab.prototype.createStrip = function(container){
    var strip = document.createElement("div");
    strip.className = "x-tabs-wrap";
    container.appendChild(strip);
    return strip;
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.Button
 * @extends Roo.util.Observable
 * Simple Button class
 * @cfg {String} text The button text
 * @cfg {String} icon The path to an image to display in the button (the image will be set as the background-image
 * CSS property of the button by default, so if you want a mixed icon/text button, set cls:"x-btn-text-icon")
 * @cfg {Function} handler A function called when the button is clicked (can be used instead of click event)
 * @cfg {Object} scope The scope of the handler
 * @cfg {Number} minWidth The minimum width for this button (used to give a set of buttons a common width)
 * @cfg {String/Object} tooltip The tooltip for the button - can be a string or QuickTips config object
 * @cfg {Boolean} hidden True to start hidden (defaults to false)
 * @cfg {Boolean} disabled True to start disabled (defaults to false)
 * @cfg {Boolean} pressed True to start pressed (only if enableToggle = true)
 * @cfg {String} toggleGroup The group this toggle button is a member of (only 1 per group can be pressed, only
   applies if enableToggle = true)
 * @cfg {String/HTMLElement/Element} renderTo The element to append the button to
 * @cfg {Boolean/Object} repeat True to repeat fire the click event while the mouse is down. This can also be
  an {@link Roo.util.ClickRepeater} config object (defaults to false).
 * @constructor
 * Create a new button
 * @param {Object} config The config object
 */
Roo.Button = function(renderTo, config)
{
    if (!config) {
        config = renderTo;
        renderTo = config.renderTo || false;
    }
    
    Roo.apply(this, config);
    this.addEvents({
        /**
	     * @event click
	     * Fires when this button is clicked
	     * @param {Button} this
	     * @param {EventObject} e The click event
	     */
	    "click" : true,
        /**
	     * @event toggle
	     * Fires when the "pressed" state of this button changes (only if enableToggle = true)
	     * @param {Button} this
	     * @param {Boolean} pressed
	     */
	    "toggle" : true,
        /**
	     * @event mouseover
	     * Fires when the mouse hovers over the button
	     * @param {Button} this
	     * @param {Event} e The event object
	     */
        'mouseover' : true,
        /**
	     * @event mouseout
	     * Fires when the mouse exits the button
	     * @param {Button} this
	     * @param {Event} e The event object
	     */
        'mouseout': true,
         /**
	     * @event render
	     * Fires when the button is rendered
	     * @param {Button} this
	     */
        'render': true
    });
    if(this.menu){
        this.menu = Roo.menu.MenuMgr.get(this.menu);
    }
    // register listeners first!!  - so render can be captured..
    Roo.util.Observable.call(this);
    if(renderTo){
        this.render(renderTo);
    }
    
  
};

Roo.extend(Roo.Button, Roo.util.Observable, {
    /**
     * 
     */
    
    /**
     * Read-only. True if this button is hidden
     * @type Boolean
     */
    hidden : false,
    /**
     * Read-only. True if this button is disabled
     * @type Boolean
     */
    disabled : false,
    /**
     * Read-only. True if this button is pressed (only if enableToggle = true)
     * @type Boolean
     */
    pressed : false,

    /**
     * @cfg {Number} tabIndex 
     * The DOM tabIndex for this button (defaults to undefined)
     */
    tabIndex : undefined,

    /**
     * @cfg {Boolean} enableToggle
     * True to enable pressed/not pressed toggling (defaults to false)
     */
    enableToggle: false,
    /**
     * @cfg {Roo.menu.Menu} menu
     * Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).
     */
    menu : undefined,
    /**
     * @cfg {String} menuAlign
     * The position to align the menu to (see {@link Roo.Element#alignTo} for more details, defaults to 'tl-bl?').
     */
    menuAlign : "tl-bl?",

    /**
     * @cfg {String} iconCls
     * A css class which sets a background image to be used as the icon for this button (defaults to undefined).
     */
    iconCls : undefined,
    /**
     * @cfg {String} type
     * The button's type, corresponding to the DOM input element type attribute.  Either "submit," "reset" or "button" (default).
     */
    type : 'button',

    // private
    menuClassTarget: 'tr',

    /**
     * @cfg {String} clickEvent
     * The type of event to map to the button's event handler (defaults to 'click')
     */
    clickEvent : 'click',

    /**
     * @cfg {Boolean} handleMouseEvents
     * False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)
     */
    handleMouseEvents : true,

    /**
     * @cfg {String} tooltipType
     * The type of tooltip to use. Either "qtip" (default) for QuickTips or "title" for title attribute.
     */
    tooltipType : 'qtip',

    /**
     * @cfg {String} cls
     * A CSS class to apply to the button's main element.
     */
    
    /**
     * @cfg {Roo.Template} template (Optional)
     * An {@link Roo.Template} with which to create the Button's main element. This Template must
     * contain numeric substitution parameter 0 if it is to display the tRoo property. Changing the template could
     * require code modifications if required elements (e.g. a button) aren't present.
     */

    // private
    render : function(renderTo){
        var btn;
        if(this.hideParent){
            this.parentEl = Roo.get(renderTo);
        }
        if(!this.dhconfig){
            if(!this.template){
                if(!Roo.Button.buttonTemplate){
                    // hideous table template
                    Roo.Button.buttonTemplate = new Roo.Template(
                        '<table border="0" cellpadding="0" cellspacing="0" class="x-btn-wrap"><tbody><tr>',
                        '<td class="x-btn-left"><i>&#160;</i></td><td class="x-btn-center"><em unselectable="on"><button class="x-btn-text" type="{1}">{0}</button></em></td><td class="x-btn-right"><i>&#160;</i></td>',
                        "</tr></tbody></table>");
                }
                this.template = Roo.Button.buttonTemplate;
            }
            btn = this.template.append(renderTo, [this.text || '&#160;', this.type], true);
            var btnEl = btn.child("button:first");
            btnEl.on('focus', this.onFocus, this);
            btnEl.on('blur', this.onBlur, this);
            if(this.cls){
                btn.addClass(this.cls);
            }
            if(this.icon){
                btnEl.setStyle('background-image', 'url(' +this.icon +')');
            }
            if(this.iconCls){
                btnEl.addClass(this.iconCls);
                if(!this.cls){
                    btn.addClass(this.text ? 'x-btn-text-icon' : 'x-btn-icon');
                }
            }
            if(this.tabIndex !== undefined){
                btnEl.dom.tabIndex = this.tabIndex;
            }
            if(this.tooltip){
                if(typeof this.tooltip == 'object'){
                    Roo.QuickTips.tips(Roo.apply({
                          target: btnEl.id
                    }, this.tooltip));
                } else {
                    btnEl.dom[this.tooltipType] = this.tooltip;
                }
            }
        }else{
            btn = Roo.DomHelper.append(Roo.get(renderTo).dom, this.dhconfig, true);
        }
        this.el = btn;
        if(this.id){
            this.el.dom.id = this.el.id = this.id;
        }
        if(this.menu){
            this.el.child(this.menuClassTarget).addClass("x-btn-with-menu");
            this.menu.on("show", this.onMenuShow, this);
            this.menu.on("hide", this.onMenuHide, this);
        }
        btn.addClass("x-btn");
        if(Roo.isIE && !Roo.isIE7){
            this.autoWidth.defer(1, this);
        }else{
            this.autoWidth();
        }
        if(this.handleMouseEvents){
            btn.on("mouseover", this.onMouseOver, this);
            btn.on("mouseout", this.onMouseOut, this);
            btn.on("mousedown", this.onMouseDown, this);
        }
        btn.on(this.clickEvent, this.onClick, this);
        //btn.on("mouseup", this.onMouseUp, this);
        if(this.hidden){
            this.hide();
        }
        if(this.disabled){
            this.disable();
        }
        Roo.ButtonToggleMgr.register(this);
        if(this.pressed){
            this.el.addClass("x-btn-pressed");
        }
        if(this.repeat){
            var repeater = new Roo.util.ClickRepeater(btn,
                typeof this.repeat == "object" ? this.repeat : {}
            );
            repeater.on("click", this.onClick,  this);
        }
        
        this.fireEvent('render', this);
        
    },
    /**
     * Returns the button's underlying element
     * @return {Roo.Element} The element
     */
    getEl : function(){
        return this.el;  
    },
    
    /**
     * Destroys this Button and removes any listeners.
     */
    destroy : function(){
        Roo.ButtonToggleMgr.unregister(this);
        this.el.removeAllListeners();
        this.purgeListeners();
        this.el.remove();
    },

    // private
    autoWidth : function(){
        if(this.el){
            this.el.setWidth("auto");
            if(Roo.isIE7 && Roo.isStrict){
                var ib = this.el.child('button');
                if(ib && ib.getWidth() > 20){
                    ib.clip();
                    ib.setWidth(Roo.util.TextMetrics.measure(ib, this.text).width+ib.getFrameWidth('lr'));
                }
            }
            if(this.minWidth){
                if(this.hidden){
                    this.el.beginMeasure();
                }
                if(this.el.getWidth() < this.minWidth){
                    this.el.setWidth(this.minWidth);
                }
                if(this.hidden){
                    this.el.endMeasure();
                }
            }
        }
    },

    /**
     * Assigns this button's click handler
     * @param {Function} handler The function to call when the button is clicked
     * @param {Object} scope (optional) Scope for the function passed in
     */
    setHandler : function(handler, scope){
        this.handler = handler;
        this.scope = scope;  
    },
    
    /**
     * Sets this button's text
     * @param {String} text The button text
     */
    setText : function(text){
        this.text = text;
        if(this.el){
            this.el.child("td.x-btn-center button.x-btn-text").update(text);
        }
        this.autoWidth();
    },
    
    /**
     * Gets the text for this button
     * @return {String} The button text
     */
    getText : function(){
        return this.text;  
    },
    
    /**
     * Show this button
     */
    show: function(){
        this.hidden = false;
        if(this.el){
            this[this.hideParent? 'parentEl' : 'el'].setStyle("display", "");
        }
    },
    
    /**
     * Hide this button
     */
    hide: function(){
        this.hidden = true;
        if(this.el){
            this[this.hideParent? 'parentEl' : 'el'].setStyle("display", "none");
        }
    },
    
    /**
     * Convenience function for boolean show/hide
     * @param {Boolean} visible True to show, false to hide
     */
    setVisible: function(visible){
        if(visible) {
            this.show();
        }else{
            this.hide();
        }
    },
    /**
	 * Similar to toggle, but does not trigger event.
	 * @param {Boolean} state [required] Force a particular state
	 */
	setPressed : function(state)
	{
	    if(state != this.pressed){
            if(state){
                this.el.addClass("x-btn-pressed");
                this.pressed = true;
            }else{
                this.el.removeClass("x-btn-pressed");
                this.pressed = false;
            }
        }
	},
	
    /**
     * If a state it passed, it becomes the pressed state otherwise the current state is toggled.
     * @param {Boolean} state (optional) Force a particular state
     */
    toggle : function(state){
        state = state === undefined ? !this.pressed : state;
        if(state != this.pressed){
            if(state){
                this.el.addClass("x-btn-pressed");
                this.pressed = true;
                this.fireEvent("toggle", this, true);
            }else{
                this.el.removeClass("x-btn-pressed");
                this.pressed = false;
                this.fireEvent("toggle", this, false);
            }
            if(this.toggleHandler){
                this.toggleHandler.call(this.scope || this, this, state);
            }
        }
    },
    
	
	
    /**
     * Focus the button
     */
    focus : function(){
        this.el.child('button:first').focus();
    },
    
    /**
     * Disable this button
     */
    disable : function(){
        if(this.el){
            this.el.addClass("x-btn-disabled");
        }
        this.disabled = true;
    },
    
    /**
     * Enable this button
     */
    enable : function(){
        if(this.el){
            this.el.removeClass("x-btn-disabled");
        }
        this.disabled = false;
    },

    /**
     * Convenience function for boolean enable/disable
     * @param {Boolean} enabled True to enable, false to disable
     */
    setDisabled : function(v){
        this[v !== true ? "enable" : "disable"]();
    },

    // private
    onClick : function(e)
    {
        if(e){
            e.preventDefault();
        }
        if(e.button != 0){
            return;
        }
        if(!this.disabled){
            if(this.enableToggle){
                this.toggle();
            }
            if(this.menu && !this.menu.isVisible()){
                this.menu.show(this.el, this.menuAlign);
            }
            this.fireEvent("click", this, e);
            if(this.handler){
                this.el.removeClass("x-btn-over");
                this.handler.call(this.scope || this, this, e);
            }
        }
    },
    // private
    onMouseOver : function(e){
        if(!this.disabled){
            this.el.addClass("x-btn-over");
            this.fireEvent('mouseover', this, e);
        }
    },
    // private
    onMouseOut : function(e){
        if(!e.within(this.el,  true)){
            this.el.removeClass("x-btn-over");
            this.fireEvent('mouseout', this, e);
        }
    },
    // private
    onFocus : function(e){
        if(!this.disabled){
            this.el.addClass("x-btn-focus");
        }
    },
    // private
    onBlur : function(e){
        this.el.removeClass("x-btn-focus");
    },
    // private
    onMouseDown : function(e){
        if(!this.disabled && e.button == 0){
            this.el.addClass("x-btn-click");
            Roo.get(document).on('mouseup', this.onMouseUp, this);
        }
    },
    // private
    onMouseUp : function(e){
        if(e.button == 0){
            this.el.removeClass("x-btn-click");
            Roo.get(document).un('mouseup', this.onMouseUp, this);
        }
    },
    // private
    onMenuShow : function(e){
        this.el.addClass("x-btn-menu-active");
    },
    // private
    onMenuHide : function(e){
        this.el.removeClass("x-btn-menu-active");
    }   
});

// Private utility class used by Button
Roo.ButtonToggleMgr = function(){
   var groups = {};
   
   function toggleGroup(btn, state){
       if(state){
           var g = groups[btn.toggleGroup];
           for(var i = 0, l = g.length; i < l; i++){
               if(g[i] != btn){
                   g[i].toggle(false);
               }
           }
       }
   }
   
   return {
       register : function(btn){
           if(!btn.toggleGroup){
               return;
           }
           var g = groups[btn.toggleGroup];
           if(!g){
               g = groups[btn.toggleGroup] = [];
           }
           g.push(btn);
           btn.on("toggle", toggleGroup);
       },
       
       unregister : function(btn){
           if(!btn.toggleGroup){
               return;
           }
           var g = groups[btn.toggleGroup];
           if(g){
               g.remove(btn);
               btn.un("toggle", toggleGroup);
           }
       }
   };
}();/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.SplitButton
 * @extends Roo.Button
 * A split button that provides a built-in dropdown arrow that can fire an event separately from the default
 * click event of the button.  Typically this would be used to display a dropdown menu that provides additional
 * options to the primary button action, but any custom handler can provide the arrowclick implementation.
 * @cfg {Function} arrowHandler A function called when the arrow button is clicked (can be used instead of click event)
 * @cfg {String} arrowTooltip The title attribute of the arrow
 * @constructor
 * Create a new menu button
 * @param {String/HTMLElement/Element} renderTo The element to append the button to
 * @param {Object} config The config object
 */
Roo.SplitButton = function(renderTo, config){
    Roo.SplitButton.superclass.constructor.call(this, renderTo, config);
    /**
     * @event arrowclick
     * Fires when this button's arrow is clicked
     * @param {SplitButton} this
     * @param {EventObject} e The click event
     */
    this.addEvents({"arrowclick":true});
};

Roo.extend(Roo.SplitButton, Roo.Button, {
    render : function(renderTo){
        // this is one sweet looking template!
        var tpl = new Roo.Template(
            '<table cellspacing="0" class="x-btn-menu-wrap x-btn"><tr><td>',
            '<table cellspacing="0" class="x-btn-wrap x-btn-menu-text-wrap"><tbody>',
            '<tr><td class="x-btn-left"><i>&#160;</i></td><td class="x-btn-center"><button class="x-btn-text" type="{1}">{0}</button></td></tr>',
            "</tbody></table></td><td>",
            '<table cellspacing="0" class="x-btn-wrap x-btn-menu-arrow-wrap"><tbody>',
            '<tr><td class="x-btn-center"><button class="x-btn-menu-arrow-el" type="button">&#160;</button></td><td class="x-btn-right"><i>&#160;</i></td></tr>',
            "</tbody></table></td></tr></table>"
        );
        var btn = tpl.append(renderTo, [this.text, this.type], true);
        var btnEl = btn.child("button");
        if(this.cls){
            btn.addClass(this.cls);
        }
        if(this.icon){
            btnEl.setStyle('background-image', 'url(' +this.icon +')');
        }
        if(this.iconCls){
            btnEl.addClass(this.iconCls);
            if(!this.cls){
                btn.addClass(this.text ? 'x-btn-text-icon' : 'x-btn-icon');
            }
        }
        this.el = btn;
        if(this.handleMouseEvents){
            btn.on("mouseover", this.onMouseOver, this);
            btn.on("mouseout", this.onMouseOut, this);
            btn.on("mousedown", this.onMouseDown, this);
            btn.on("mouseup", this.onMouseUp, this);
        }
        btn.on(this.clickEvent, this.onClick, this);
        if(this.tooltip){
            if(typeof this.tooltip == 'object'){
                Roo.QuickTips.tips(Roo.apply({
                      target: btnEl.id
                }, this.tooltip));
            } else {
                btnEl.dom[this.tooltipType] = this.tooltip;
            }
        }
        if(this.arrowTooltip){
            btn.child("button:nth(2)").dom[this.tooltipType] = this.arrowTooltip;
        }
        if(this.hidden){
            this.hide();
        }
        if(this.disabled){
            this.disable();
        }
        if(this.pressed){
            this.el.addClass("x-btn-pressed");
        }
        if(Roo.isIE && !Roo.isIE7){
            this.autoWidth.defer(1, this);
        }else{
            this.autoWidth();
        }
        if(this.menu){
            this.menu.on("show", this.onMenuShow, this);
            this.menu.on("hide", this.onMenuHide, this);
        }
        this.fireEvent('render', this);
    },

    // private
    autoWidth : function(){
        if(this.el){
            var tbl = this.el.child("table:first");
            var tbl2 = this.el.child("table:last");
            this.el.setWidth("auto");
            tbl.setWidth("auto");
            if(Roo.isIE7 && Roo.isStrict){
                var ib = this.el.child('button:first');
                if(ib && ib.getWidth() > 20){
                    ib.clip();
                    ib.setWidth(Roo.util.TextMetrics.measure(ib, this.text).width+ib.getFrameWidth('lr'));
                }
            }
            if(this.minWidth){
                if(this.hidden){
                    this.el.beginMeasure();
                }
                if((tbl.getWidth()+tbl2.getWidth()) < this.minWidth){
                    tbl.setWidth(this.minWidth-tbl2.getWidth());
                }
                if(this.hidden){
                    this.el.endMeasure();
                }
            }
            this.el.setWidth(tbl.getWidth()+tbl2.getWidth());
        } 
    },
    /**
     * Sets this button's click handler
     * @param {Function} handler The function to call when the button is clicked
     * @param {Object} scope (optional) Scope for the function passed above
     */
    setHandler : function(handler, scope){
        this.handler = handler;
        this.scope = scope;  
    },
    
    /**
     * Sets this button's arrow click handler
     * @param {Function} handler The function to call when the arrow is clicked
     * @param {Object} scope (optional) Scope for the function passed above
     */
    setArrowHandler : function(handler, scope){
        this.arrowHandler = handler;
        this.scope = scope;  
    },
    
    /**
     * Focus the button
     */
    focus : function(){
        if(this.el){
            this.el.child("button:first").focus();
        }
    },

    // private
    onClick : function(e){
        e.preventDefault();
        if(!this.disabled){
            if(e.getTarget(".x-btn-menu-arrow-wrap")){
                if(this.menu && !this.menu.isVisible()){
                    this.menu.show(this.el, this.menuAlign);
                }
                this.fireEvent("arrowclick", this, e);
                if(this.arrowHandler){
                    this.arrowHandler.call(this.scope || this, this, e);
                }
            }else{
                this.fireEvent("click", this, e);
                if(this.handler){
                    this.handler.call(this.scope || this, this, e);
                }
            }
        }
    },
    // private
    onMouseDown : function(e){
        if(!this.disabled){
            Roo.fly(e.getTarget("table")).addClass("x-btn-click");
        }
    },
    // private
    onMouseUp : function(e){
        Roo.fly(e.getTarget("table")).removeClass("x-btn-click");
    }   
});


// backwards compat
Roo.MenuButton = Roo.SplitButton;/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.Toolbar
 * @children   Roo.Toolbar.Item Roo.Toolbar.Button Roo.Toolbar.SplitButton Roo.form.Field 
 * Basic Toolbar class.
 * @constructor
 * Creates a new Toolbar
 * @param {Object} container The config object
 */ 
Roo.Toolbar = function(container, buttons, config)
{
    /// old consturctor format still supported..
    if(container instanceof Array){ // omit the container for later rendering
        buttons = container;
        config = buttons;
        container = null;
    }
    if (typeof(container) == 'object' && container.xtype) {
        config = container;
        container = config.container;
        buttons = config.buttons || []; // not really - use items!!
    }
    var xitems = [];
    if (config && config.items) {
        xitems = config.items;
        delete config.items;
    }
    Roo.apply(this, config);
    this.buttons = buttons;
    
    if(container){
        this.render(container);
    }
    this.xitems = xitems;
    Roo.each(xitems, function(b) {
        this.add(b);
    }, this);
    
};

Roo.Toolbar.prototype = {
    /**
     * @cfg {Array} items
     * array of button configs or elements to add (will be converted to a MixedCollection)
     */
    items: false,
    /**
     * @cfg {String/HTMLElement/Element} container
     * The id or element that will contain the toolbar
     */
    // private
    render : function(ct){
        this.el = Roo.get(ct);
        if(this.cls){
            this.el.addClass(this.cls);
        }
        // using a table allows for vertical alignment
        // 100% width is needed by Safari...
        this.el.update('<div class="x-toolbar x-small-editor"><table cellspacing="0"><tr></tr></table></div>');
        this.tr = this.el.child("tr", true);
        var autoId = 0;
        this.items = new Roo.util.MixedCollection(false, function(o){
            return o.id || ("item" + (++autoId));
        });
        if(this.buttons){
            this.add.apply(this, this.buttons);
            delete this.buttons;
        }
    },

    /**
     * Adds element(s) to the toolbar -- this function takes a variable number of 
     * arguments of mixed type and adds them to the toolbar.
     * @param {Mixed} arg1 The following types of arguments are all valid:<br />
     * <ul>
     * <li>{@link Roo.Toolbar.Button} config: A valid button config object (equivalent to {@link #addButton})</li>
     * <li>HtmlElement: Any standard HTML element (equivalent to {@link #addElement})</li>
     * <li>Field: Any form field (equivalent to {@link #addField})</li>
     * <li>Item: Any subclass of {@link Roo.Toolbar.Item} (equivalent to {@link #addItem})</li>
     * <li>String: Any generic string (gets wrapped in a {@link Roo.Toolbar.TextItem}, equivalent to {@link #addText}).
     * Note that there are a few special strings that are treated differently as explained nRoo.</li>
     * <li>'separator' or '-': Creates a separator element (equivalent to {@link #addSeparator})</li>
     * <li>' ': Creates a spacer element (equivalent to {@link #addSpacer})</li>
     * <li>'->': Creates a fill element (equivalent to {@link #addFill})</li>
     * </ul>
     * @param {Mixed} arg2
     * @param {Mixed} etc.
     */
    add : function(){
        var a = arguments, l = a.length;
        for(var i = 0; i < l; i++){
            this._add(a[i]);
        }
    },
    // private..
    _add : function(el) {
        
        if (el.xtype) {
            el = Roo.factory(el, typeof(Roo.Toolbar[el.xtype]) == 'undefined' ? Roo.form : Roo.Toolbar);
        }
        
        if (el.applyTo){ // some kind of form field
            return this.addField(el);
        } 
        if (el.render){ // some kind of Toolbar.Item
            return this.addItem(el);
        }
        if (typeof el == "string"){ // string
            if(el == "separator" || el == "-"){
                return this.addSeparator();
            }
            if (el == " "){
                return this.addSpacer();
            }
            if(el == "->"){
                return this.addFill();
            }
            return this.addText(el);
            
        }
        if(el.tagName){ // element
            return this.addElement(el);
        }
        if(typeof el == "object"){ // must be button config?
            return this.addButton(el);
        }
        // and now what?!?!
        return false;
        
    },
    
    /**
     * Add an Xtype element
     * @param {Object} xtype Xtype Object
     * @return {Object} created Object
     */
    addxtype : function(e){
        return this.add(e);  
    },
    
    /**
     * Returns the Element for this toolbar.
     * @return {Roo.Element}
     */
    getEl : function(){
        return this.el;  
    },
    
    /**
     * Adds a separator
     * @return {Roo.Toolbar.Item} The separator item
     */
    addSeparator : function(){
        return this.addItem(new Roo.Toolbar.Separator());
    },

    /**
     * Adds a spacer element
     * @return {Roo.Toolbar.Spacer} The spacer item
     */
    addSpacer : function(){
        return this.addItem(new Roo.Toolbar.Spacer());
    },

    /**
     * Adds a fill element that forces subsequent additions to the right side of the toolbar
     * @return {Roo.Toolbar.Fill} The fill item
     */
    addFill : function(){
        return this.addItem(new Roo.Toolbar.Fill());
    },

    /**
     * Adds any standard HTML element to the toolbar
     * @param {String/HTMLElement/Element} el The element or id of the element to add
     * @return {Roo.Toolbar.Item} The element's item
     */
    addElement : function(el){
        return this.addItem(new Roo.Toolbar.Item(el));
    },
    /**
     * Collection of items on the toolbar.. (only Toolbar Items, so use fields to retrieve fields)
     * @type Roo.util.MixedCollection  
     */
    items : false,
     
    /**
     * Adds any Toolbar.Item or subclass
     * @param {Roo.Toolbar.Item} item
     * @return {Roo.Toolbar.Item} The item
     */
    addItem : function(item){
        var td = this.nextBlock();
        item.render(td);
        this.items.add(item);
        return item;
    },
    
    /**
     * Adds a button (or buttons). See {@link Roo.Toolbar.Button} for more info on the config.
     * @param {Object/Array} config A button config or array of configs
     * @return {Roo.Toolbar.Button/Array}
     */
    addButton : function(config){
        if(config instanceof Array){
            var buttons = [];
            for(var i = 0, len = config.length; i < len; i++) {
                buttons.push(this.addButton(config[i]));
            }
            return buttons;
        }
        var b = config;
        if(!(config instanceof Roo.Toolbar.Button)){
            b = config.split ?
                new Roo.Toolbar.SplitButton(config) :
                new Roo.Toolbar.Button(config);
        }
        var td = this.nextBlock();
        b.render(td);
        this.items.add(b);
        return b;
    },
    
    /**
     * Adds text to the toolbar
     * @param {String} text The text to add
     * @return {Roo.Toolbar.Item} The element's item
     */
    addText : function(text){
        return this.addItem(new Roo.Toolbar.TextItem(text));
    },
    
    /**
     * Inserts any {@link Roo.Toolbar.Item}/{@link Roo.Toolbar.Button} at the specified index.
     * @param {Number} index The index where the item is to be inserted
     * @param {Object/Roo.Toolbar.Item/Roo.Toolbar.Button (may be Array)} item The button, or button config object to be inserted.
     * @return {Roo.Toolbar.Button/Item}
     */
    insertButton : function(index, item){
        if(item instanceof Array){
            var buttons = [];
            for(var i = 0, len = item.length; i < len; i++) {
               buttons.push(this.insertButton(index + i, item[i]));
            }
            return buttons;
        }
        if (!(item instanceof Roo.Toolbar.Button)){
           item = new Roo.Toolbar.Button(item);
        }
        var td = document.createElement("td");
        this.tr.insertBefore(td, this.tr.childNodes[index]);
        item.render(td);
        this.items.insert(index, item);
        return item;
    },
    
    /**
     * Adds a new element to the toolbar from the passed {@link Roo.DomHelper} config.
     * @param {Object} config
     * @return {Roo.Toolbar.Item} The element's item
     */
    addDom : function(config, returnEl){
        var td = this.nextBlock();
        Roo.DomHelper.overwrite(td, config);
        var ti = new Roo.Toolbar.Item(td.firstChild);
        ti.render(td);
        this.items.add(ti);
        return ti;
    },

    /**
     * Collection of fields on the toolbar.. usefull for quering (value is false if there are no fields)
     * @type Roo.util.MixedCollection  
     */
    fields : false,
    
    /**
     * Adds a dynamically rendered Roo.form field (TextField, ComboBox, etc).
     * Note: the field should not have been rendered yet. For a field that has already been
     * rendered, use {@link #addElement}.
     * @param {Roo.form.Field} field
     * @return {Roo.ToolbarItem}
     */
     
      
    addField : function(field) {
        if (!this.fields) {
            var autoId = 0;
            this.fields = new Roo.util.MixedCollection(false, function(o){
                return o.id || ("item" + (++autoId));
            });

        }
        
        var td = this.nextBlock();
        field.render(td);
        var ti = new Roo.Toolbar.Item(td.firstChild);
        ti.render(td);
        this.items.add(ti);
        this.fields.add(field);
        return ti;
    },
    /**
     * Hide the toolbar
     * @method hide
     */
     
      
    hide : function()
    {
        this.el.child('div').setVisibilityMode(Roo.Element.DISPLAY);
        this.el.child('div').hide();
    },
    /**
     * Show the toolbar
     * @method show
     */
    show : function()
    {
        this.el.child('div').show();
    },
      
    // private
    nextBlock : function(){
        var td = document.createElement("td");
        this.tr.appendChild(td);
        return td;
    },

    // private
    destroy : function(){
        if(this.items){ // rendered?
            Roo.destroy.apply(Roo, this.items.items);
        }
        if(this.fields){ // rendered?
            Roo.destroy.apply(Roo, this.fields.items);
        }
        Roo.Element.uncache(this.el, this.tr);
    }
};

/**
 * @class Roo.Toolbar.Item
 * The base class that other classes should extend in order to get some basic common toolbar item functionality.
 * @constructor
 * Creates a new Item
 * @param {HTMLElement} el 
 */
Roo.Toolbar.Item = function(el){
    var cfg = {};
    if (typeof (el.xtype) != 'undefined') {
        cfg = el;
        el = cfg.el;
    }
    
    this.el = Roo.getDom(el);
    this.id = Roo.id(this.el);
    this.hidden = false;
    
    this.addEvents({
         /**
	     * @event render
	     * Fires when the button is rendered
	     * @param {Button} this
	     */
        'render': true
    });
    Roo.Toolbar.Item.superclass.constructor.call(this,cfg);
};
Roo.extend(Roo.Toolbar.Item, Roo.util.Observable, {
//Roo.Toolbar.Item.prototype = {
    
    /**
     * Get this item's HTML Element
     * @return {HTMLElement}
     */
    getEl : function(){
       return this.el;  
    },

    // private
    render : function(td){
        
         this.td = td;
        td.appendChild(this.el);
        
        this.fireEvent('render', this);
    },
    
    /**
     * Removes and destroys this item.
     */
    destroy : function(){
        this.td.parentNode.removeChild(this.td);
    },
    
    /**
     * Shows this item.
     */
    show: function(){
        this.hidden = false;
        this.td.style.display = "";
    },
    
    /**
     * Hides this item.
     */
    hide: function(){
        this.hidden = true;
        this.td.style.display = "none";
    },
    
    /**
     * Convenience function for boolean show/hide.
     * @param {Boolean} visible true to show/false to hide
     */
    setVisible: function(visible){
        if(visible) {
            this.show();
        }else{
            this.hide();
        }
    },
    
    /**
     * Try to focus this item.
     */
    focus : function(){
        Roo.fly(this.el).focus();
    },
    
    /**
     * Disables this item.
     */
    disable : function(){
        Roo.fly(this.td).addClass("x-item-disabled");
        this.disabled = true;
        this.el.disabled = true;
    },
    
    /**
     * Enables this item.
     */
    enable : function(){
        Roo.fly(this.td).removeClass("x-item-disabled");
        this.disabled = false;
        this.el.disabled = false;
    }
});


/**
 * @class Roo.Toolbar.Separator
 * @extends Roo.Toolbar.Item
 * A simple toolbar separator class
 * @constructor
 * Creates a new Separator
 */
Roo.Toolbar.Separator = function(cfg){
    
    var s = document.createElement("span");
    s.className = "ytb-sep";
    if (cfg) {
        cfg.el = s;
    }
    
    Roo.Toolbar.Separator.superclass.constructor.call(this, cfg || s);
};
Roo.extend(Roo.Toolbar.Separator, Roo.Toolbar.Item, {
    enable:Roo.emptyFn,
    disable:Roo.emptyFn,
    focus:Roo.emptyFn
});

/**
 * @class Roo.Toolbar.Spacer
 * @extends Roo.Toolbar.Item
 * A simple element that adds extra horizontal space to a toolbar.
 * @constructor
 * Creates a new Spacer
 */
Roo.Toolbar.Spacer = function(cfg){
    var s = document.createElement("div");
    s.className = "ytb-spacer";
    if (cfg) {
        cfg.el = s;
    }
    Roo.Toolbar.Spacer.superclass.constructor.call(this, cfg || s);
};
Roo.extend(Roo.Toolbar.Spacer, Roo.Toolbar.Item, {
    enable:Roo.emptyFn,
    disable:Roo.emptyFn,
    focus:Roo.emptyFn
});

/**
 * @class Roo.Toolbar.Fill
 * @extends Roo.Toolbar.Spacer
 * A simple element that adds a greedy (100% width) horizontal space to a toolbar.
 * @constructor
 * Creates a new Spacer
 */
Roo.Toolbar.Fill = Roo.extend(Roo.Toolbar.Spacer, {
    // private
    render : function(td){
        td.style.width = '100%';
        Roo.Toolbar.Fill.superclass.render.call(this, td);
    }
});

/**
 * @class Roo.Toolbar.TextItem
 * @extends Roo.Toolbar.Item
 * A simple class that renders text directly into a toolbar.
 * @constructor
 * Creates a new TextItem
 * @cfg {string} text 
 */
Roo.Toolbar.TextItem = function(cfg){
    var  text = cfg || "";
    if (typeof(cfg) == 'object') {
        text = cfg.text || "";
    }  else {
        cfg = null;
    }
    var s = document.createElement("span");
    s.className = "ytb-text";
    s.innerHTML = text;
    if (cfg) {
        cfg.el  = s;
    }
    
    Roo.Toolbar.TextItem.superclass.constructor.call(this, cfg ||  s);
};
Roo.extend(Roo.Toolbar.TextItem, Roo.Toolbar.Item, {
    
     
    enable:Roo.emptyFn,
    disable:Roo.emptyFn,
    focus:Roo.emptyFn,
     /**
     * Shows this button
     */
    show: function(){
        this.hidden = false;
        this.el.style.display = "";
    },
    
    /**
     * Hides this button
     */
    hide: function(){
        this.hidden = true;
        this.el.style.display = "none";
    }
    
});

/**
 * @class Roo.Toolbar.Button
 * @extends Roo.Button
 * A button that renders into a toolbar.
 * @constructor
 * Creates a new Button
 * @param {Object} config A standard {@link Roo.Button} config object
 */
Roo.Toolbar.Button = function(config){
    Roo.Toolbar.Button.superclass.constructor.call(this, null, config);
};
Roo.extend(Roo.Toolbar.Button, Roo.Button,
{
    
    
    render : function(td){
        this.td = td;
        Roo.Toolbar.Button.superclass.render.call(this, td);
    },
    
    /**
     * Removes and destroys this button
     */
    destroy : function(){
        Roo.Toolbar.Button.superclass.destroy.call(this);
        this.td.parentNode.removeChild(this.td);
    },
    
    /**
     * Shows this button
     */
    show: function(){
        this.hidden = false;
        this.td.style.display = "";
    },
    
    /**
     * Hides this button
     */
    hide: function(){
        this.hidden = true;
        this.td.style.display = "none";
    },

    /**
     * Disables this item
     */
    disable : function(){
        Roo.fly(this.td).addClass("x-item-disabled");
        this.disabled = true;
    },

    /**
     * Enables this item
     */
    enable : function(){
        Roo.fly(this.td).removeClass("x-item-disabled");
        this.disabled = false;
    }
});
// backwards compat
Roo.ToolbarButton = Roo.Toolbar.Button;

/**
 * @class Roo.Toolbar.SplitButton
 * @extends Roo.SplitButton
 * A menu button that renders into a toolbar.
 * @constructor
 * Creates a new SplitButton
 * @param {Object} config A standard {@link Roo.SplitButton} config object
 */
Roo.Toolbar.SplitButton = function(config){
    Roo.Toolbar.SplitButton.superclass.constructor.call(this, null, config);
};
Roo.extend(Roo.Toolbar.SplitButton, Roo.SplitButton, {
    render : function(td){
        this.td = td;
        Roo.Toolbar.SplitButton.superclass.render.call(this, td);
    },
    
    /**
     * Removes and destroys this button
     */
    destroy : function(){
        Roo.Toolbar.SplitButton.superclass.destroy.call(this);
        this.td.parentNode.removeChild(this.td);
    },
    
    /**
     * Shows this button
     */
    show: function(){
        this.hidden = false;
        this.td.style.display = "";
    },
    
    /**
     * Hides this button
     */
    hide: function(){
        this.hidden = true;
        this.td.style.display = "none";
    }
});

// backwards compat
Roo.Toolbar.MenuButton = Roo.Toolbar.SplitButton;/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.PagingToolbar
 * @extends Roo.Toolbar
 * @children   Roo.Toolbar.Item Roo.Toolbar.Button Roo.Toolbar.SplitButton Roo.form.Field
 * A specialized toolbar that is bound to a {@link Roo.data.Store} and provides automatic paging controls.
 * @constructor
 * Create a new PagingToolbar
 * @param {Object} config The config object
 */
Roo.PagingToolbar = function(el, ds, config)
{
    // old args format still supported... - xtype is prefered..
    if (typeof(el) == 'object' && el.xtype) {
        // created from xtype...
        config = el;
        ds = el.dataSource;
        el = config.container;
    }
    var items = [];
    if (config.items) {
        items = config.items;
        config.items = [];
    }
    
    Roo.PagingToolbar.superclass.constructor.call(this, el, null, config);
    this.ds = ds;
    this.cursor = 0;
    this.renderButtons(this.el);
    this.bind(ds);
    
    // supprot items array.
   
    Roo.each(items, function(e) {
        this.add(Roo.factory(e));
    },this);
    
};

Roo.extend(Roo.PagingToolbar, Roo.Toolbar, {
   
    /**
     * @cfg {String/HTMLElement/Element} container
     * container The id or element that will contain the toolbar
     */
    /**
     * @cfg {Boolean} displayInfo
     * True to display the displayMsg (defaults to false)
     */
    
    
    /**
     * @cfg {Number} pageSize
     * The number of records to display per page (defaults to 20)
     */
    pageSize: 20,
    /**
     * @cfg {String} displayMsg
     * The paging status message to display (defaults to "Displaying {start} - {end} of {total}")
     */
    displayMsg : 'Displaying {0} - {1} of {2}',
    /**
     * @cfg {String} emptyMsg
     * The message to display when no records are found (defaults to "No data to display")
     */
    emptyMsg : 'No data to display',
    /**
     * Customizable piece of the default paging text (defaults to "Page")
     * @type String
     */
    beforePageText : "Page",
    /**
     * Customizable piece of the default paging text (defaults to "of %0")
     * @type String
     */
    afterPageText : "of {0}",
    /**
     * Customizable piece of the default paging text (defaults to "First Page")
     * @type String
     */
    firstText : "First Page",
    /**
     * Customizable piece of the default paging text (defaults to "Previous Page")
     * @type String
     */
    prevText : "Previous Page",
    /**
     * Customizable piece of the default paging text (defaults to "Next Page")
     * @type String
     */
    nextText : "Next Page",
    /**
     * Customizable piece of the default paging text (defaults to "Last Page")
     * @type String
     */
    lastText : "Last Page",
    /**
     * Customizable piece of the default paging text (defaults to "Refresh")
     * @type String
     */
    refreshText : "Refresh",

    // private
    renderButtons : function(el){
        Roo.PagingToolbar.superclass.render.call(this, el);
        this.first = this.addButton({
            tooltip: this.firstText,
            cls: "x-btn-icon x-grid-page-first",
            disabled: true,
            handler: this.onClick.createDelegate(this, ["first"])
        });
        this.prev = this.addButton({
            tooltip: this.prevText,
            cls: "x-btn-icon x-grid-page-prev",
            disabled: true,
            handler: this.onClick.createDelegate(this, ["prev"])
        });
        //this.addSeparator();
        this.add(this.beforePageText);
        this.field = Roo.get(this.addDom({
           tag: "input",
           type: "text",
           size: "3",
           value: "1",
           cls: "x-grid-page-number"
        }).el);
        this.field.on("keydown", this.onPagingKeydown, this);
        this.field.on("focus", function(){this.dom.select();});
        this.afterTextEl = this.addText(String.format(this.afterPageText, 1));
        this.field.setHeight(18);
        //this.addSeparator();
        this.next = this.addButton({
            tooltip: this.nextText,
            cls: "x-btn-icon x-grid-page-next",
            disabled: true,
            handler: this.onClick.createDelegate(this, ["next"])
        });
        this.last = this.addButton({
            tooltip: this.lastText,
            cls: "x-btn-icon x-grid-page-last",
            disabled: true,
            handler: this.onClick.createDelegate(this, ["last"])
        });
        //this.addSeparator();
        this.loading = this.addButton({
            tooltip: this.refreshText,
            cls: "x-btn-icon x-grid-loading",
            handler: this.onClick.createDelegate(this, ["refresh"])
        });

        if(this.displayInfo){
            this.displayEl = Roo.fly(this.el.dom.firstChild).createChild({cls:'x-paging-info'});
        }
    },

    // private
    updateInfo : function(){
        if(this.displayEl){
            var count = this.ds.getCount();
            var msg = count == 0 ?
                this.emptyMsg :
                String.format(
                    this.displayMsg,
                    this.cursor+1, this.cursor+count, this.ds.getTotalCount()    
                );
            this.displayEl.update(msg);
        }
    },

    // private
    onLoad : function(ds, r, o){
       this.cursor = o.params ? o.params.start : 0;
       var d = this.getPageData(), ap = d.activePage, ps = d.pages;

       this.afterTextEl.el.innerHTML = String.format(this.afterPageText, d.pages);
       this.field.dom.value = ap;
       this.first.setDisabled(ap == 1);
       this.prev.setDisabled(ap == 1);
       this.next.setDisabled(ap == ps);
       this.last.setDisabled(ap == ps);
       this.loading.enable();
       this.updateInfo();
    },

    // private
    getPageData : function(){
        var total = this.ds.getTotalCount();
        return {
            total : total,
            activePage : Math.ceil((this.cursor+this.pageSize)/this.pageSize),
            pages :  total < this.pageSize ? 1 : Math.ceil(total/this.pageSize)
        };
    },

    // private
    onLoadError : function(){
        this.loading.enable();
    },

    // private
    onPagingKeydown : function(e){
        var k = e.getKey();
        var d = this.getPageData();
        if(k == e.RETURN){
            var v = this.field.dom.value, pageNum;
            if(!v || isNaN(pageNum = parseInt(v, 10))){
                this.field.dom.value = d.activePage;
                return;
            }
            pageNum = Math.min(Math.max(1, pageNum), d.pages) - 1;
            this.ds.load({params:{start: pageNum * this.pageSize, limit: this.pageSize}});
            e.stopEvent();
        }
        else if(k == e.HOME || (k == e.UP && e.ctrlKey) || (k == e.PAGEUP && e.ctrlKey) || (k == e.RIGHT && e.ctrlKey) || k == e.END || (k == e.DOWN && e.ctrlKey) || (k == e.LEFT && e.ctrlKey) || (k == e.PAGEDOWN && e.ctrlKey))
        {
          var pageNum = (k == e.HOME || (k == e.DOWN && e.ctrlKey) || (k == e.LEFT && e.ctrlKey) || (k == e.PAGEDOWN && e.ctrlKey)) ? 1 : d.pages;
          this.field.dom.value = pageNum;
          this.ds.load({params:{start: (pageNum - 1) * this.pageSize, limit: this.pageSize}});
          e.stopEvent();
        }
        else if(k == e.UP || k == e.RIGHT || k == e.PAGEUP || k == e.DOWN || k == e.LEFT || k == e.PAGEDOWN)
        {
          var v = this.field.dom.value, pageNum; 
          var increment = (e.shiftKey) ? 10 : 1;
          if(k == e.DOWN || k == e.LEFT || k == e.PAGEDOWN) {
            increment *= -1;
          }
          if(!v || isNaN(pageNum = parseInt(v, 10))) {
            this.field.dom.value = d.activePage;
            return;
          }
          else if(parseInt(v, 10) + increment >= 1 & parseInt(v, 10) + increment <= d.pages)
          {
            this.field.dom.value = parseInt(v, 10) + increment;
            pageNum = Math.min(Math.max(1, pageNum + increment), d.pages) - 1;
            this.ds.load({params:{start: pageNum * this.pageSize, limit: this.pageSize}});
          }
          e.stopEvent();
        }
    },

    // private
    beforeLoad : function(){
        if(this.loading){
            this.loading.disable();
        }
    },
    /**
     * event that occurs when you click on the navigation buttons - can be used to trigger load of a grid.
     * @param {String} which (first|prev|next|last|refresh)  which button to press.
     *
     */
    // private
    onClick : function(which){
        var ds = this.ds;
        switch(which){
            case "first":
                ds.load({params:{start: 0, limit: this.pageSize}});
            break;
            case "prev":
                ds.load({params:{start: Math.max(0, this.cursor-this.pageSize), limit: this.pageSize}});
            break;
            case "next":
                ds.load({params:{start: this.cursor+this.pageSize, limit: this.pageSize}});
            break;
            case "last":
                var total = ds.getTotalCount();
                var extra = total % this.pageSize;
                var lastStart = extra ? (total - extra) : total-this.pageSize;
                ds.load({params:{start: lastStart, limit: this.pageSize}});
            break;
            case "refresh":
                ds.load({params:{start: this.cursor, limit: this.pageSize}});
            break;
        }
    },

    /**
     * Unbinds the paging toolbar from the specified {@link Roo.data.Store}
     * @param {Roo.data.Store} store The data store to unbind
     */
    unbind : function(ds){
        ds.un("beforeload", this.beforeLoad, this);
        ds.un("load", this.onLoad, this);
        ds.un("loadexception", this.onLoadError, this);
        ds.un("remove", this.updateInfo, this);
        ds.un("add", this.updateInfo, this);
        this.ds = undefined;
    },

    /**
     * Binds the paging toolbar to the specified {@link Roo.data.Store}
     * @param {Roo.data.Store} store The data store to bind
     */
    bind : function(ds){
        ds.on("beforeload", this.beforeLoad, this);
        ds.on("load", this.onLoad, this);
        ds.on("loadexception", this.onLoadError, this);
        ds.on("remove", this.updateInfo, this);
        ds.on("add", this.updateInfo, this);
        this.ds = ds;
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.Resizable
 * @extends Roo.util.Observable
 * <p>Applies drag handles to an element to make it resizable. The drag handles are inserted into the element
 * and positioned absolute. Some elements, such as a textarea or image, don't support this. To overcome that, you can wrap
 * the textarea in a div and set "resizeChild" to true (or to the id of the element), <b>or</b> set wrap:true in your config and
 * the element will be wrapped for you automatically.</p>
 * <p>Here is the list of valid resize handles:</p>
 * <pre>
Value   Description
------  -------------------
 'n'     north
 's'     south
 'e'     east
 'w'     west
 'nw'    northwest
 'sw'    southwest
 'se'    southeast
 'ne'    northeast
 'hd'    horizontal drag
 'all'   all
</pre>
 * <p>Here's an example showing the creation of a typical Resizable:</p>
 * <pre><code>
var resizer = new Roo.Resizable("element-id", {
    handles: 'all',
    minWidth: 200,
    minHeight: 100,
    maxWidth: 500,
    maxHeight: 400,
    pinned: true
});
resizer.on("resize", myHandler);
</code></pre>
 * <p>To hide a particular handle, set its display to none in CSS, or through script:<br>
 * resizer.east.setDisplayed(false);</p>
 * @cfg {Boolean/String/Element} resizeChild True to resize the first child, or id/element to resize (defaults to false)
 * @cfg {Array/String} adjustments String "auto" or an array [width, height] with values to be <b>added</b> to the
 * resize operation's new size (defaults to [0, 0])
 * @cfg {Number} minWidth The minimum width for the element (defaults to 5)
 * @cfg {Number} minHeight The minimum height for the element (defaults to 5)
 * @cfg {Number} maxWidth The maximum width for the element (defaults to 10000)
 * @cfg {Number} maxHeight The maximum height for the element (defaults to 10000)
 * @cfg {Boolean} enabled False to disable resizing (defaults to true)
 * @cfg {Boolean} wrap True to wrap an element with a div if needed (required for textareas and images, defaults to false)
 * @cfg {Number} width The width of the element in pixels (defaults to null)
 * @cfg {Number} height The height of the element in pixels (defaults to null)
 * @cfg {Boolean} animate True to animate the resize (not compatible with dynamic sizing, defaults to false)
 * @cfg {Number} duration Animation duration if animate = true (defaults to .35)
 * @cfg {Boolean} dynamic True to resize the element while dragging instead of using a proxy (defaults to false)
 * @cfg {String} handles String consisting of the resize handles to display (defaults to undefined)
 * @cfg {Boolean} multiDirectional <b>Deprecated</b>.  The old style of adding multi-direction resize handles, deprecated
 * in favor of the handles config option (defaults to false)
 * @cfg {Boolean} disableTrackOver True to disable mouse tracking. This is only applied at config time. (defaults to false)
 * @cfg {String} easing Animation easing if animate = true (defaults to 'easingOutStrong')
 * @cfg {Number} widthIncrement The increment to snap the width resize in pixels (dynamic must be true, defaults to 0)
 * @cfg {Number} heightIncrement The increment to snap the height resize in pixels (dynamic must be true, defaults to 0)
 * @cfg {Boolean} pinned True to ensure that the resize handles are always visible, false to display them only when the
 * user mouses over the resizable borders. This is only applied at config time. (defaults to false)
 * @cfg {Boolean} preserveRatio True to preserve the original ratio between height and width during resize (defaults to false)
 * @cfg {Boolean} transparent True for transparent handles. This is only applied at config time. (defaults to false)
 * @cfg {Number} minX The minimum allowed page X for the element (only used for west resizing, defaults to 0)
 * @cfg {Number} minY The minimum allowed page Y for the element (only used for north resizing, defaults to 0)
 * @cfg {Boolean} draggable Convenience to initialize drag drop (defaults to false)
 * @constructor
 * Create a new resizable component
 * @param {String/HTMLElement/Roo.Element} el The id or element to resize
 * @param {Object} config configuration options
  */
Roo.Resizable = function(el, config)
{
    this.el = Roo.get(el);

    if(config && config.wrap){
        config.resizeChild = this.el;
        this.el = this.el.wrap(typeof config.wrap == "object" ? config.wrap : {cls:"xresizable-wrap"});
        this.el.id = this.el.dom.id = config.resizeChild.id + "-rzwrap";
        this.el.setStyle("overflow", "hidden");
        this.el.setPositioning(config.resizeChild.getPositioning());
        config.resizeChild.clearPositioning();
        if(!config.width || !config.height){
            var csize = config.resizeChild.getSize();
            this.el.setSize(csize.width, csize.height);
        }
        if(config.pinned && !config.adjustments){
            config.adjustments = "auto";
        }
    }

    this.proxy = this.el.createProxy({tag: "div", cls: "x-resizable-proxy", id: this.el.id + "-rzproxy"});
    this.proxy.unselectable();
    this.proxy.enableDisplayMode('block');

    Roo.apply(this, config);

    if(this.pinned){
        this.disableTrackOver = true;
        this.el.addClass("x-resizable-pinned");
    }
    // if the element isn't positioned, make it relative
    var position = this.el.getStyle("position");
    if(position != "absolute" && position != "fixed"){
        this.el.setStyle("position", "relative");
    }
    if(!this.handles){ // no handles passed, must be legacy style
        this.handles = 's,e,se';
        if(this.multiDirectional){
            this.handles += ',n,w';
        }
    }
    if(this.handles == "all"){
        this.handles = "n s e w ne nw se sw";
    }
    var hs = this.handles.split(/\s*?[,;]\s*?| /);
    var ps = Roo.Resizable.positions;
    for(var i = 0, len = hs.length; i < len; i++){
        if(hs[i] && ps[hs[i]]){
            var pos = ps[hs[i]];
            this[pos] = new Roo.Resizable.Handle(this, pos, this.disableTrackOver, this.transparent);
        }
    }
    // legacy
    this.corner = this.southeast;
    
    // updateBox = the box can move..
    if(this.handles.indexOf("n") != -1 || this.handles.indexOf("w") != -1 || this.handles.indexOf("hd") != -1) {
        this.updateBox = true;
    }

    this.activeHandle = null;

    if(this.resizeChild){
        if(typeof this.resizeChild == "boolean"){
            this.resizeChild = Roo.get(this.el.dom.firstChild, true);
        }else{
            this.resizeChild = Roo.get(this.resizeChild, true);
        }
    }
    
    if(this.adjustments == "auto"){
        var rc = this.resizeChild;
        var hw = this.west, he = this.east, hn = this.north, hs = this.south;
        if(rc && (hw || hn)){
            rc.position("relative");
            rc.setLeft(hw ? hw.el.getWidth() : 0);
            rc.setTop(hn ? hn.el.getHeight() : 0);
        }
        this.adjustments = [
            (he ? -he.el.getWidth() : 0) + (hw ? -hw.el.getWidth() : 0),
            (hn ? -hn.el.getHeight() : 0) + (hs ? -hs.el.getHeight() : 0) -1
        ];
    }

    if(this.draggable){
        this.dd = this.dynamic ?
            this.el.initDD(null) : this.el.initDDProxy(null, {dragElId: this.proxy.id});
        this.dd.setHandleElId(this.resizeChild ? this.resizeChild.id : this.el.id);
    }

    // public events
    this.addEvents({
        /**
         * @event beforeresize
         * Fired before resize is allowed. Set enabled to false to cancel resize.
         * @param {Roo.Resizable} this
         * @param {Roo.EventObject} e The mousedown event
         */
        "beforeresize" : true,
        /**
         * @event resizing
         * Fired a resizing.
         * @param {Roo.Resizable} this
         * @param {Number} x The new x position
         * @param {Number} y The new y position
         * @param {Number} w The new w width
         * @param {Number} h The new h hight
         * @param {Roo.EventObject} e The mouseup event
         */
        "resizing" : true,
        /**
         * @event resize
         * Fired after a resize.
         * @param {Roo.Resizable} this
         * @param {Number} width The new width
         * @param {Number} height The new height
         * @param {Roo.EventObject} e The mouseup event
         */
        "resize" : true
    });

    if(this.width !== null && this.height !== null){
        this.resizeTo(this.width, this.height);
    }else{
        this.updateChildSize();
    }
    if(Roo.isIE){
        this.el.dom.style.zoom = 1;
    }
    Roo.Resizable.superclass.constructor.call(this);
};

Roo.extend(Roo.Resizable, Roo.util.Observable, {
        resizeChild : false,
        adjustments : [0, 0],
        minWidth : 5,
        minHeight : 5,
        maxWidth : 10000,
        maxHeight : 10000,
        enabled : true,
        animate : false,
        duration : .35,
        dynamic : false,
        handles : false,
        multiDirectional : false,
        disableTrackOver : false,
        easing : 'easeOutStrong',
        widthIncrement : 0,
        heightIncrement : 0,
        pinned : false,
        width : null,
        height : null,
        preserveRatio : false,
        transparent: false,
        minX: 0,
        minY: 0,
        draggable: false,

        /**
         * @cfg {String/HTMLElement/Element} constrainTo Constrain the resize to a particular element
         */
        constrainTo: undefined,
        /**
         * @cfg {Roo.lib.Region} resizeRegion Constrain the resize to a particular region
         */
        resizeRegion: undefined,


    /**
     * Perform a manual resize
     * @param {Number} width
     * @param {Number} height
     */
    resizeTo : function(width, height){
        this.el.setSize(width, height);
        this.updateChildSize();
        this.fireEvent("resize", this, width, height, null);
    },

    // private
    startSizing : function(e, handle){
        this.fireEvent("beforeresize", this, e);
        if(this.enabled){ // 2nd enabled check in case disabled before beforeresize handler

            if(!this.overlay){
                this.overlay = this.el.createProxy({tag: "div", cls: "x-resizable-overlay", html: "&#160;"});
                this.overlay.unselectable();
                this.overlay.enableDisplayMode("block");
                this.overlay.on("mousemove", this.onMouseMove, this);
                this.overlay.on("mouseup", this.onMouseUp, this);
            }
            this.overlay.setStyle("cursor", handle.el.getStyle("cursor"));

            this.resizing = true;
            this.startBox = this.el.getBox();
            this.startPoint = e.getXY();
            this.offsets = [(this.startBox.x + this.startBox.width) - this.startPoint[0],
                            (this.startBox.y + this.startBox.height) - this.startPoint[1]];

            this.overlay.setSize(Roo.lib.Dom.getViewWidth(true), Roo.lib.Dom.getViewHeight(true));
            this.overlay.show();

            if(this.constrainTo) {
                var ct = Roo.get(this.constrainTo);
                this.resizeRegion = ct.getRegion().adjust(
                    ct.getFrameWidth('t'),
                    ct.getFrameWidth('l'),
                    -ct.getFrameWidth('b'),
                    -ct.getFrameWidth('r')
                );
            }

            this.proxy.setStyle('visibility', 'hidden'); // workaround display none
            this.proxy.show();
            this.proxy.setBox(this.startBox);
            if(!this.dynamic){
                this.proxy.setStyle('visibility', 'visible');
            }
        }
    },

    // private
    onMouseDown : function(handle, e){
        if(this.enabled){
            e.stopEvent();
            this.activeHandle = handle;
            this.startSizing(e, handle);
        }
    },

    // private
    onMouseUp : function(e){
        var size = this.resizeElement();
        this.resizing = false;
        this.handleOut();
        this.overlay.hide();
        this.proxy.hide();
        this.fireEvent("resize", this, size.width, size.height, e);
    },

    // private
    updateChildSize : function(){
        
        if(this.resizeChild){
            var el = this.el;
            var child = this.resizeChild;
            var adj = this.adjustments;
            if(el.dom.offsetWidth){
                var b = el.getSize(true);
                child.setSize(b.width+adj[0], b.height+adj[1]);
            }
            // Second call here for IE
            // The first call enables instant resizing and
            // the second call corrects scroll bars if they
            // exist
            if(Roo.isIE){
                setTimeout(function(){
                    if(el.dom.offsetWidth){
                        var b = el.getSize(true);
                        child.setSize(b.width+adj[0], b.height+adj[1]);
                    }
                }, 10);
            }
        }
    },

    // private
    snap : function(value, inc, min){
        if(!inc || !value) {
            return value;
        }
        var newValue = value;
        var m = value % inc;
        if(m > 0){
            if(m > (inc/2)){
                newValue = value + (inc-m);
            }else{
                newValue = value - m;
            }
        }
        return Math.max(min, newValue);
    },

    // private
    resizeElement : function(){
        var box = this.proxy.getBox();
        if(this.updateBox){
            this.el.setBox(box, false, this.animate, this.duration, null, this.easing);
        }else{
            this.el.setSize(box.width, box.height, this.animate, this.duration, null, this.easing);
        }
        this.updateChildSize();
        if(!this.dynamic){
            this.proxy.hide();
        }
        return box;
    },

    // private
    constrain : function(v, diff, m, mx){
        if(v - diff < m){
            diff = v - m;
        }else if(v - diff > mx){
            diff = mx - v;
        }
        return diff;
    },

    // private
    onMouseMove : function(e){
        
        if(this.enabled){
            try{// try catch so if something goes wrong the user doesn't get hung

            if(this.resizeRegion && !this.resizeRegion.contains(e.getPoint())) {
            	return;
            }

            //var curXY = this.startPoint;
            var curSize = this.curSize || this.startBox;
            var x = this.startBox.x, y = this.startBox.y;
            var ox = x, oy = y;
            var w = curSize.width, h = curSize.height;
            var ow = w, oh = h;
            var mw = this.minWidth, mh = this.minHeight;
            var mxw = this.maxWidth, mxh = this.maxHeight;
            var wi = this.widthIncrement;
            var hi = this.heightIncrement;

            var eventXY = e.getXY();
            var diffX = -(this.startPoint[0] - Math.max(this.minX, eventXY[0]));
            var diffY = -(this.startPoint[1] - Math.max(this.minY, eventXY[1]));

            var pos = this.activeHandle.position;

            switch(pos){
                case "east":
                    w += diffX;
                    w = Math.min(Math.max(mw, w), mxw);
                    break;
             
                case "south":
                    h += diffY;
                    h = Math.min(Math.max(mh, h), mxh);
                    break;
                case "southeast":
                    w += diffX;
                    h += diffY;
                    w = Math.min(Math.max(mw, w), mxw);
                    h = Math.min(Math.max(mh, h), mxh);
                    break;
                case "north":
                    diffY = this.constrain(h, diffY, mh, mxh);
                    y += diffY;
                    h -= diffY;
                    break;
                case "hdrag":
                    
                    if (wi) {
                        var adiffX = Math.abs(diffX);
                        var sub = (adiffX % wi); // how much 
                        if (sub > (wi/2)) { // far enough to snap
                            diffX = (diffX > 0) ? diffX-sub + wi : diffX+sub - wi;
                        } else {
                            // remove difference.. 
                            diffX = (diffX > 0) ? diffX-sub : diffX+sub;
                        }
                    }
                    x += diffX;
                    x = Math.max(this.minX, x);
                    break;
                case "west":
                    diffX = this.constrain(w, diffX, mw, mxw);
                    x += diffX;
                    w -= diffX;
                    break;
                case "northeast":
                    w += diffX;
                    w = Math.min(Math.max(mw, w), mxw);
                    diffY = this.constrain(h, diffY, mh, mxh);
                    y += diffY;
                    h -= diffY;
                    break;
                case "northwest":
                    diffX = this.constrain(w, diffX, mw, mxw);
                    diffY = this.constrain(h, diffY, mh, mxh);
                    y += diffY;
                    h -= diffY;
                    x += diffX;
                    w -= diffX;
                    break;
               case "southwest":
                    diffX = this.constrain(w, diffX, mw, mxw);
                    h += diffY;
                    h = Math.min(Math.max(mh, h), mxh);
                    x += diffX;
                    w -= diffX;
                    break;
            }

            var sw = this.snap(w, wi, mw);
            var sh = this.snap(h, hi, mh);
            if(sw != w || sh != h){
                switch(pos){
                    case "northeast":
                        y -= sh - h;
                    break;
                    case "north":
                        y -= sh - h;
                        break;
                    case "southwest":
                        x -= sw - w;
                    break;
                    case "west":
                        x -= sw - w;
                        break;
                    case "northwest":
                        x -= sw - w;
                        y -= sh - h;
                    break;
                }
                w = sw;
                h = sh;
            }

            if(this.preserveRatio){
                switch(pos){
                    case "southeast":
                    case "east":
                        h = oh * (w/ow);
                        h = Math.min(Math.max(mh, h), mxh);
                        w = ow * (h/oh);
                       break;
                    case "south":
                        w = ow * (h/oh);
                        w = Math.min(Math.max(mw, w), mxw);
                        h = oh * (w/ow);
                        break;
                    case "northeast":
                        w = ow * (h/oh);
                        w = Math.min(Math.max(mw, w), mxw);
                        h = oh * (w/ow);
                    break;
                    case "north":
                        var tw = w;
                        w = ow * (h/oh);
                        w = Math.min(Math.max(mw, w), mxw);
                        h = oh * (w/ow);
                        x += (tw - w) / 2;
                        break;
                    case "southwest":
                        h = oh * (w/ow);
                        h = Math.min(Math.max(mh, h), mxh);
                        var tw = w;
                        w = ow * (h/oh);
                        x += tw - w;
                        break;
                    case "west":
                        var th = h;
                        h = oh * (w/ow);
                        h = Math.min(Math.max(mh, h), mxh);
                        y += (th - h) / 2;
                        var tw = w;
                        w = ow * (h/oh);
                        x += tw - w;
                       break;
                    case "northwest":
                        var tw = w;
                        var th = h;
                        h = oh * (w/ow);
                        h = Math.min(Math.max(mh, h), mxh);
                        w = ow * (h/oh);
                        y += th - h;
                        x += tw - w;
                       break;

                }
            }
            if (pos == 'hdrag') {
                w = ow;
            }
            this.proxy.setBounds(x, y, w, h);
            if(this.dynamic){
                this.resizeElement();
            }
            }catch(e){}
        }
        this.fireEvent("resizing", this, x, y, w, h, e);
    },

    // private
    handleOver : function(){
        if(this.enabled){
            this.el.addClass("x-resizable-over");
        }
    },

    // private
    handleOut : function(){
        if(!this.resizing){
            this.el.removeClass("x-resizable-over");
        }
    },

    /**
     * Returns the element this component is bound to.
     * @return {Roo.Element}
     */
    getEl : function(){
        return this.el;
    },

    /**
     * Returns the resizeChild element (or null).
     * @return {Roo.Element}
     */
    getResizeChild : function(){
        return this.resizeChild;
    },
    groupHandler : function()
    {
        
    },
    /**
     * Destroys this resizable. If the element was wrapped and
     * removeEl is not true then the element remains.
     * @param {Boolean} removeEl (optional) true to remove the element from the DOM
     */
    destroy : function(removeEl){
        this.proxy.remove();
        if(this.overlay){
            this.overlay.removeAllListeners();
            this.overlay.remove();
        }
        var ps = Roo.Resizable.positions;
        for(var k in ps){
            if(typeof ps[k] != "function" && this[ps[k]]){
                var h = this[ps[k]];
                h.el.removeAllListeners();
                h.el.remove();
            }
        }
        if(removeEl){
            this.el.update("");
            this.el.remove();
        }
    }
});

// private
// hash to map config positions to true positions
Roo.Resizable.positions = {
    n: "north", s: "south", e: "east", w: "west", se: "southeast", sw: "southwest", nw: "northwest", ne: "northeast", 
    hd: "hdrag"
};

// private
Roo.Resizable.Handle = function(rz, pos, disableTrackOver, transparent){
    if(!this.tpl){
        // only initialize the template if resizable is used
        var tpl = Roo.DomHelper.createTemplate(
            {tag: "div", cls: "x-resizable-handle x-resizable-handle-{0}"}
        );
        tpl.compile();
        Roo.Resizable.Handle.prototype.tpl = tpl;
    }
    this.position = pos;
    this.rz = rz;
    // show north drag fro topdra
    var handlepos = pos == 'hdrag' ? 'north' : pos;
    
    this.el = this.tpl.append(rz.el.dom, [handlepos], true);
    if (pos == 'hdrag') {
        this.el.setStyle('cursor', 'pointer');
    }
    this.el.unselectable();
    if(transparent){
        this.el.setOpacity(0);
    }
    this.el.on("mousedown", this.onMouseDown, this);
    if(!disableTrackOver){
        this.el.on("mouseover", this.onMouseOver, this);
        this.el.on("mouseout", this.onMouseOut, this);
    }
};

// private
Roo.Resizable.Handle.prototype = {
    afterResize : function(rz){
        Roo.log('after?');
        // do nothing
    },
    // private
    onMouseDown : function(e){
        this.rz.onMouseDown(this, e);
    },
    // private
    onMouseOver : function(e){
        this.rz.handleOver(this, e);
    },
    // private
    onMouseOut : function(e){
        this.rz.handleOut(this, e);
    }
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.Editor
 * @extends Roo.Component
 * A base editor field that handles displaying/hiding on demand and has some built-in sizing and event handling logic.
 * @constructor
 * Create a new Editor
 * @param {Roo.form.Field} field The Field object (or descendant)
 * @param {Object} config The config object
 */
Roo.Editor = function(field, config){
    Roo.Editor.superclass.constructor.call(this, config);
    this.field = field;
    this.addEvents({
        /**
	     * @event beforestartedit
	     * Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning
	     * false from the handler of this event.
	     * @param {Editor} this
	     * @param {Roo.Element} boundEl The underlying element bound to this editor
	     * @param {Mixed} value The field value being set
	     */
        "beforestartedit" : true,
        /**
	     * @event startedit
	     * Fires when this editor is displayed
	     * @param {Roo.Element} boundEl The underlying element bound to this editor
	     * @param {Mixed} value The starting field value
	     */
        "startedit" : true,
        /**
	     * @event beforecomplete
	     * Fires after a change has been made to the field, but before the change is reflected in the underlying
	     * field.  Saving the change to the field can be canceled by returning false from the handler of this event.
	     * Note that if the value has not changed and ignoreNoChange = true, the editing will still end but this
	     * event will not fire since no edit actually occurred.
	     * @param {Editor} this
	     * @param {Mixed} value The current field value
	     * @param {Mixed} startValue The original field value
	     */
        "beforecomplete" : true,
        /**
	     * @event complete
	     * Fires after editing is complete and any changed value has been written to the underlying field.
	     * @param {Editor} this
	     * @param {Mixed} value The current field value
	     * @param {Mixed} startValue The original field value
	     */
        "complete" : true,
        /**
         * @event specialkey
         * Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check
         * {@link Roo.EventObject#getKey} to determine which key was pressed.
         * @param {Roo.form.Field} this
         * @param {Roo.EventObject} e The event object
         */
        "specialkey" : true
    });
};

Roo.extend(Roo.Editor, Roo.Component, {
    /**
     * @cfg {Boolean/String} autosize
     * True for the editor to automatically adopt the size of the underlying field, "width" to adopt the width only,
     * or "height" to adopt the height only (defaults to false)
     */
    /**
     * @cfg {Boolean} revertInvalid
     * True to automatically revert the field value and cancel the edit when the user completes an edit and the field
     * validation fails (defaults to true)
     */
    /**
     * @cfg {Boolean} ignoreNoChange
     * True to skip the the edit completion process (no save, no events fired) if the user completes an edit and
     * the value has not changed (defaults to false).  Applies only to string values - edits for other data types
     * will never be ignored.
     */
    /**
     * @cfg {Boolean} hideEl
     * False to keep the bound element visible while the editor is displayed (defaults to true)
     */
    /**
     * @cfg {Mixed} value
     * The data value of the underlying field (defaults to "")
     */
    value : "",
    /**
     * @cfg {String} alignment
     * The position to align to (see {@link Roo.Element#alignTo} for more details, defaults to "c-c?").
     */
    alignment: "c-c?",
    /**
     * @cfg {Boolean/String} shadow "sides" for sides/bottom only, "frame" for 4-way shadow, and "drop"
     * for bottom-right shadow (defaults to "frame")
     */
    shadow : "frame",
    /**
     * @cfg {Boolean} constrain True to constrain the editor to the viewport
     */
    constrain : false,
    /**
     * @cfg {Boolean} completeOnEnter True to complete the edit when the enter key is pressed (defaults to false)
     */
    completeOnEnter : false,
    /**
     * @cfg {Boolean} cancelOnEsc True to cancel the edit when the escape key is pressed (defaults to false)
     */
    cancelOnEsc : false,
    /**
     * @cfg {Boolean} updateEl True to update the innerHTML of the bound element when the update completes (defaults to false)
     */
    updateEl : false,

    // private
    onRender : function(ct, position){
        this.el = new Roo.Layer({
            shadow: this.shadow,
            cls: "x-editor",
            parentEl : ct,
            shim : this.shim,
            shadowOffset:4,
            id: this.id,
            constrain: this.constrain
        });
        this.el.setStyle("overflow", Roo.isGecko ? "auto" : "hidden");
        if(this.field.msgTarget != 'title'){
            this.field.msgTarget = 'qtip';
        }
        this.field.render(this.el);
        if(Roo.isGecko){
            this.field.el.dom.setAttribute('autocomplete', 'off');
        }
        this.field.on("specialkey", this.onSpecialKey, this);
        if(this.swallowKeys){
            this.field.el.swallowEvent(['keydown','keypress']);
        }
        this.field.show();
        this.field.on("blur", this.onBlur, this);
        if(this.field.grow){
            this.field.on("autosize", this.el.sync,  this.el, {delay:1});
        }
    },

    onSpecialKey : function(field, e)
    {
        //Roo.log('editor onSpecialKey');
        if(this.completeOnEnter && e.getKey() == e.ENTER){
            e.stopEvent();
            this.completeEdit();
            return;
        }
        // do not fire special key otherwise it might hide close the editor...
        if(e.getKey() == e.ENTER){    
            return;
        }
        if(this.cancelOnEsc && e.getKey() == e.ESC){
            this.cancelEdit();
            return;
        } 
        this.fireEvent('specialkey', field, e);
    
    },

    /**
     * Starts the editing process and shows the editor.
     * @param {String/HTMLElement/Element} el The element to edit
     * @param {String} value (optional) A value to initialize the editor with. If a value is not provided, it defaults
      * to the innerHTML of el.
     */
    startEdit : function(el, value){
        if(this.editing){
            this.completeEdit();
        }
        this.boundEl = Roo.get(el);
        var v = value !== undefined ? value : this.boundEl.dom.innerHTML;
        if(!this.rendered){
            this.render(this.parentEl || document.body);
        }
        if(this.fireEvent("beforestartedit", this, this.boundEl, v) === false){
            return;
        }
        this.startValue = v;
        this.field.setValue(v);
        if(this.autoSize){
            var sz = this.boundEl.getSize();
            switch(this.autoSize){
                case "width":
                this.setSize(sz.width,  "");
                break;
                case "height":
                this.setSize("",  sz.height);
                break;
                default:
                this.setSize(sz.width,  sz.height);
            }
        }
        this.el.alignTo(this.boundEl, this.alignment);
        this.editing = true;
        if(Roo.QuickTips){
            Roo.QuickTips.disable();
        }
        this.show();
    },

    /**
     * Sets the height and width of this editor.
     * @param {Number} width The new width
     * @param {Number} height The new height
     */
    setSize : function(w, h){
        this.field.setSize(w, h);
        if(this.el){
            this.el.sync();
        }
    },

    /**
     * Realigns the editor to the bound field based on the current alignment config value.
     */
    realign : function(){
        this.el.alignTo(this.boundEl, this.alignment);
    },

    /**
     * Ends the editing process, persists the changed value to the underlying field, and hides the editor.
     * @param {Boolean} remainVisible Override the default behavior and keep the editor visible after edit (defaults to false)
     */
    completeEdit : function(remainVisible){
        if(!this.editing){
            return;
        }
        var v = this.getValue();
        if(this.revertInvalid !== false && !this.field.isValid()){
            v = this.startValue;
            this.cancelEdit(true);
        }
        if(String(v) === String(this.startValue) && this.ignoreNoChange){
            this.editing = false;
            this.hide();
            return;
        }
        if(this.fireEvent("beforecomplete", this, v, this.startValue) !== false){
            this.editing = false;
            if(this.updateEl && this.boundEl){
                this.boundEl.update(v);
            }
            if(remainVisible !== true){
                this.hide();
            }
            this.fireEvent("complete", this, v, this.startValue);
        }
    },

    // private
    onShow : function(){
        this.el.show();
        if(this.hideEl !== false){
            this.boundEl.hide();
        }
        this.field.show();
        if(Roo.isIE && !this.fixIEFocus){ // IE has problems with focusing the first time
            this.fixIEFocus = true;
            this.deferredFocus.defer(50, this);
        }else{
            this.field.focus();
        }
        this.fireEvent("startedit", this.boundEl, this.startValue);
    },

    deferredFocus : function(){
        if(this.editing){
            this.field.focus();
        }
    },

    /**
     * Cancels the editing process and hides the editor without persisting any changes.  The field value will be
     * reverted to the original starting value.
     * @param {Boolean} remainVisible Override the default behavior and keep the editor visible after
     * cancel (defaults to false)
     */
    cancelEdit : function(remainVisible){
        if(this.editing){
            this.setValue(this.startValue);
            if(remainVisible !== true){
                this.hide();
            }
        }
    },

    // private
    onBlur : function(){
        if(this.allowBlur !== true && this.editing){
            this.completeEdit();
        }
    },

    // private
    onHide : function(){
        if(this.editing){
            this.completeEdit();
            return;
        }
        this.field.blur();
        if(this.field.collapse){
            this.field.collapse();
        }
        this.el.hide();
        if(this.hideEl !== false){
            this.boundEl.show();
        }
        if(Roo.QuickTips){
            Roo.QuickTips.enable();
        }
    },

    /**
     * Sets the data value of the editor
     * @param {Mixed} value Any valid value supported by the underlying field
     */
    setValue : function(v){
        this.field.setValue(v);
    },

    /**
     * Gets the data value of the editor
     * @return {Mixed} The data value
     */
    getValue : function(){
        return this.field.getValue();
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.BasicDialog
 * @extends Roo.util.Observable
 * @parent none builder
 * Lightweight Dialog Class.  The code below shows the creation of a typical dialog using existing HTML markup:
 * <pre><code>
var dlg = new Roo.BasicDialog("my-dlg", {
    height: 200,
    width: 300,
    minHeight: 100,
    minWidth: 150,
    modal: true,
    proxyDrag: true,
    shadow: true
});
dlg.addKeyListener(27, dlg.hide, dlg); // ESC can also close the dialog
dlg.addButton('OK', dlg.hide, dlg);    // Could call a save function instead of hiding
dlg.addButton('Cancel', dlg.hide, dlg);
dlg.show();
</code></pre>
  <b>A Dialog should always be a direct child of the body element.</b>
 * @cfg {Boolean/DomHelper} autoCreate True to auto create from scratch, or using a DomHelper Object (defaults to false)
 * @cfg {String} title Default text to display in the title bar (defaults to null)
 * @cfg {Number} width Width of the dialog in pixels (can also be set via CSS).  Determined by browser if unspecified.
 * @cfg {Number} height Height of the dialog in pixels (can also be set via CSS).  Determined by browser if unspecified.
 * @cfg {Number} x The default left page coordinate of the dialog (defaults to center screen)
 * @cfg {Number} y The default top page coordinate of the dialog (defaults to center screen)
 * @cfg {String/Element} animateTarget Id or element from which the dialog should animate while opening
 * (defaults to null with no animation)
 * @cfg {Boolean} maximizable True to show maximize button
 * @cfg {Boolean} resizable False to disable manual dialog resizing (defaults to true)
 * @cfg {String} resizeHandles Which resize handles to display - see the {@link Roo.Resizable} handles config
 * property for valid values (defaults to 'all')
 * @cfg {Number} minHeight The minimum allowable height for a resizable dialog (defaults to 80)
 * @cfg {Number} minWidth The minimum allowable width for a resizable dialog (defaults to 200)
 * @cfg {Boolean} modal True to show the dialog modally, preventing user interaction with the rest of the page (defaults to false)
 * @cfg {Boolean} autoScroll True to allow the dialog body contents to overflow and display scrollbars (defaults to false)
 * @cfg {Boolean} closable False to remove the built-in top-right corner close button (defaults to true)
 * @cfg {Boolean} collapsible False to remove the built-in top-right corner collapse button (defaults to true)
 * @cfg {Boolean} constraintoviewport True to keep the dialog constrained within the visible viewport boundaries (defaults to true)
 * @cfg {Boolean} syncHeightBeforeShow True to cause the dimensions to be recalculated before the dialog is shown (defaults to false)
 * @cfg {Boolean} draggable False to disable dragging of the dialog within the viewport (defaults to true)
 * @cfg {Boolean} autoTabs If true, all elements with class 'x-dlg-tab' will get automatically converted to tabs (defaults to false)
 * @cfg {String} tabTag The tag name of tab elements, used when autoTabs = true (defaults to 'div')
 * @cfg {Boolean} proxyDrag True to drag a lightweight proxy element rather than the dialog itself, used when
 * draggable = true (defaults to false)
 * @cfg {Boolean} fixedcenter True to ensure that anytime the dialog is shown or resized it gets centered (defaults to false)
 * @cfg {Boolean/String} shadow True or "sides" for the default effect, "frame" for 4-way shadow, and "drop" for bottom-right
 * shadow (defaults to false)
 * @cfg {Number} shadowOffset The number of pixels to offset the shadow if displayed (defaults to 5)
 * @cfg {String} buttonAlign Valid values are "left," "center" and "right" (defaults to "right")
 * @cfg {Number} minButtonWidth Minimum width of all dialog buttons (defaults to 75)
 * @cfg {Array} buttons Array of buttons
 * @cfg {Boolean} shim True to create an iframe shim that prevents selects from showing through (defaults to false)
 * @constructor
 * Create a new BasicDialog.
 * @param {String/HTMLElement/Roo.Element} el The container element or DOM node, or its id
 * @param {Object} config Configuration options
 */
Roo.BasicDialog = function(el, config){
    this.el = Roo.get(el);
    var dh = Roo.DomHelper;
    if(!this.el && config && config.autoCreate){
        if(typeof config.autoCreate == "object"){
            if(!config.autoCreate.id){
                config.autoCreate.id = el;
            }
            this.el = dh.append(document.body,
                        config.autoCreate, true);
        }else{
            this.el = dh.append(document.body,
                        {tag: "div", id: el, style:'visibility:hidden;'}, true);
        }
    }
    el = this.el;
    el.setDisplayed(true);
    el.hide = this.hideAction;
    this.id = el.id;
    el.addClass("x-dlg");

    Roo.apply(this, config);

    this.proxy = el.createProxy("x-dlg-proxy");
    this.proxy.hide = this.hideAction;
    this.proxy.setOpacity(.5);
    this.proxy.hide();

    if(config.width){
        el.setWidth(config.width);
    }
    if(config.height){
        el.setHeight(config.height);
    }
    this.size = el.getSize();
    if(typeof config.x != "undefined" && typeof config.y != "undefined"){
        this.xy = [config.x,config.y];
    }else{
        this.xy = el.getCenterXY(true);
    }
    /** The header element @type Roo.Element */
    this.header = el.child("> .x-dlg-hd");
    /** The body element @type Roo.Element */
    this.body = el.child("> .x-dlg-bd");
    /** The footer element @type Roo.Element */
    this.footer = el.child("> .x-dlg-ft");

    if(!this.header){
        this.header = el.createChild({tag: "div", cls:"x-dlg-hd", html: "&#160;"}, this.body ? this.body.dom : null);
    }
    if(!this.body){
        this.body = el.createChild({tag: "div", cls:"x-dlg-bd"});
    }

    this.header.unselectable();
    if(this.title){
        this.header.update(this.title);
    }
    // this element allows the dialog to be focused for keyboard event
    this.focusEl = el.createChild({tag: "a", href:"#", cls:"x-dlg-focus", tabIndex:"-1"});
    this.focusEl.swallowEvent("click", true);

    this.header.wrap({cls:"x-dlg-hd-right"}).wrap({cls:"x-dlg-hd-left"}, true);

    // wrap the body and footer for special rendering
    this.bwrap = this.body.wrap({tag: "div", cls:"x-dlg-dlg-body"});
    if(this.footer){
        this.bwrap.dom.appendChild(this.footer.dom);
    }

    this.bg = this.el.createChild({
        tag: "div", cls:"x-dlg-bg",
        html: '<div class="x-dlg-bg-left"><div class="x-dlg-bg-right"><div class="x-dlg-bg-center">&#160;</div></div></div>'
    });
    this.centerBg = this.bg.child("div.x-dlg-bg-center");


    if(this.autoScroll !== false && !this.autoTabs){
        this.body.setStyle("overflow", "auto");
    }

    this.toolbox = this.el.createChild({cls: "x-dlg-toolbox"});

    if(this.closable !== false){
        this.el.addClass("x-dlg-closable");
        this.close = this.toolbox.createChild({cls:"x-dlg-close"});
        this.close.on("click", this.closeClick, this);
        this.close.addClassOnOver("x-dlg-close-over");
    }
    if(this.collapsible !== false){
        this.collapseBtn = this.toolbox.createChild({cls:"x-dlg-collapse"});
        this.collapseBtn.on("click", this.collapseClick, this);
        this.collapseBtn.addClassOnOver("x-dlg-collapse-over");
        this.header.on("dblclick", this.collapseClick, this);
    }
    if(this.resizable !== false){
        this.el.addClass("x-dlg-resizable");
        this.resizer = new Roo.Resizable(el, {
            minWidth: this.minWidth || 80,
            minHeight:this.minHeight || 80,
            handles: this.resizeHandles || "all",
            pinned: true
        });
        this.resizer.on("beforeresize", this.beforeResize, this);
        this.resizer.on("resize", this.onResize, this);
    }
    if(this.maximizable === true) {
        // default maximize button
        this.maximizeBtn = this.toolbox.createChild({cls:"x-dlg-resize fas fa-window-maximize"});
        this.maximizeBtn.on("click", this.maximizeClick, this);
        if(this.closable === false) {
            this.maximizeBtn.setStyle('right', '6px');
        }
    }
    if(this.draggable !== false){
        el.addClass("x-dlg-draggable");
        if (!this.proxyDrag) {
            var dd = new Roo.dd.DD(el.dom.id, "WindowDrag");
        }
        else {
            var dd = new Roo.dd.DDProxy(el.dom.id, "WindowDrag", {dragElId: this.proxy.id});
        }
        dd.setHandleElId(this.header.id);
        dd.endDrag = this.endMove.createDelegate(this);
        dd.startDrag = this.startMove.createDelegate(this);
        dd.onDrag = this.onDrag.createDelegate(this);
        dd.scroll = false;
        this.dd = dd;
    }
    if(this.modal){
        this.mask = dh.append(document.body, {tag: "div", cls:"x-dlg-mask"}, true);
        this.mask.enableDisplayMode("block");
        this.mask.hide();
        this.el.addClass("x-dlg-modal");
    }
    if(this.shadow){
        this.shadow = new Roo.Shadow({
            mode : typeof this.shadow == "string" ? this.shadow : "sides",
            offset : this.shadowOffset
        });
    }else{
        this.shadowOffset = 0;
    }
    if(Roo.useShims && this.shim !== false){
        this.shim = this.el.createShim();
        this.shim.hide = this.hideAction;
        this.shim.hide();
    }else{
        this.shim = false;
    }
    if(this.autoTabs){
        this.initTabs();
    }
    if (this.buttons) { 
        var bts= this.buttons;
        this.buttons = [];
        Roo.each(bts, function(b) {
            this.addButton(b);
        }, this);
    }
    
    
    this.addEvents({
        /**
         * @event keydown
         * Fires when a key is pressed
         * @param {Roo.BasicDialog} this
         * @param {Roo.EventObject} e
         */
        "keydown" : true,
        /**
         * @event move
         * Fires when this dialog is moved by the user.
         * @param {Roo.BasicDialog} this
         * @param {Number} x The new page X
         * @param {Number} y The new page Y
         */
        "move" : true,
        /**
         * @event resize
         * Fires when this dialog is resized by the user.
         * @param {Roo.BasicDialog} this
         * @param {Number} width The new width
         * @param {Number} height The new height
         */
        "resize" : true,
        /**
         * @event beforehide
         * Fires before this dialog is hidden.
         * @param {Roo.BasicDialog} this
         */
        "beforehide" : true,
        /**
         * @event hide
         * Fires when this dialog is hidden.
         * @param {Roo.BasicDialog} this
         */
        "hide" : true,
        /**
         * @event beforeshow
         * Fires before this dialog is shown.
         * @param {Roo.BasicDialog} this
         */
        "beforeshow" : true,
        /**
         * @event show
         * Fires when this dialog is shown.
         * @param {Roo.BasicDialog} this
         */
        "show" : true
    });
    el.on("keydown", this.onKeyDown, this);
    el.on("mousedown", this.toFront, this);
    Roo.EventManager.onWindowResize(this.adjustViewport, this, true);
    this.el.hide();
    Roo.DialogManager.register(this);
    Roo.BasicDialog.superclass.constructor.call(this);
};

Roo.extend(Roo.BasicDialog, Roo.util.Observable, {
    shadowOffset: Roo.isIE ? 6 : 5,
    minHeight: 80,
    minWidth: 200,
    minButtonWidth: 75,
    defaultButton: null,
    buttonAlign: "right",
    tabTag: 'div',
    firstShow: true,

    /**
     * Sets the dialog title text
     * @param {String} text The title text to display
     * @return {Roo.BasicDialog} this
     */
    setTitle : function(text){
        this.header.update(text);
        return this;
    },

    // private
    closeClick : function(){
        this.hide();
    },

    // private
    collapseClick : function(){
        this[this.collapsed ? "expand" : "collapse"]();
    },

    maximizeClick: function() {

        // maximize
        if(this.maximizeBtn.hasClass('fa-window-maximize')) {
            this.originalWidth = this.size.width;
            this.originalHeight = this.size.height;
            this.resizeTo(Roo.lib.Dom.getViewWidth() - 50, Roo.lib.Dom.getViewHeight() - 50);
            this.moveTo(25, 25);
            this.maximizeBtn.removeClass('fa-window-maximize');
            this.maximizeBtn.addClass('fa-window-restore');
        }
        // restore
        else {
            this.resizeTo(this.originalWidth, this.originalHeight);
            this.moveTo((Roo.lib.Dom.getViewWidth() - this.originalWidth) / 2, (Roo.lib.Dom.getViewHeight() - this.originalHeight) / 2);
            this.maximizeBtn.removeClass('fa-window-restore');
            this.maximizeBtn.addClass('fa-window-maximize');
        }

        this.fireEvent("resize", this, this.size.width, this.size.height);
    },

    /**
     * Collapses the dialog to its minimized state (only the title bar is visible).
     * Equivalent to the user clicking the collapse dialog button.
     */
    collapse : function(){
        if(!this.collapsed){
            this.collapsed = true;
            this.el.addClass("x-dlg-collapsed");
            this.restoreHeight = this.el.getHeight();
            this.resizeTo(this.el.getWidth(), this.header.getHeight());
        }
    },

    /**
     * Expands a collapsed dialog back to its normal state.  Equivalent to the user
     * clicking the expand dialog button.
     */
    expand : function(){
        if(this.collapsed){
            this.collapsed = false;
            this.el.removeClass("x-dlg-collapsed");
            this.resizeTo(this.el.getWidth(), this.restoreHeight);
        }
    },

    /**
     * Reinitializes the tabs component, clearing out old tabs and finding new ones.
     * @return {Roo.panel.Tab} The tabs component
     */
    initTabs : function(){
        var tabs = this.getTabs();
        while(tabs.getTab(0)){
            tabs.removeTab(0);
        }
        this.el.select(this.tabTag+'.x-dlg-tab').each(function(el){
            var dom = el.dom;
            tabs.addTab(Roo.id(dom), dom.title);
            dom.title = "";
        });
        tabs.activate(0);
        return tabs;
    },

    // private
    beforeResize : function(){
        this.resizer.minHeight = Math.max(this.minHeight, this.getHeaderFooterHeight(true)+40);
    },

    // private
    onResize : function(){
        this.refreshSize();
        this.syncBodyHeight();
        this.adjustAssets();
        this.focus();
        this.fireEvent("resize", this, this.size.width, this.size.height);
    },

    // private
    onKeyDown : function(e){
        if(this.isVisible()){
            this.fireEvent("keydown", this, e);
        }
    },

    /**
     * Resizes the dialog.
     * @param {Number} width
     * @param {Number} height
     * @return {Roo.BasicDialog} this
     */
    resizeTo : function(width, height){
        this.el.setSize(width, height);
        this.size = {width: width, height: height};
        this.syncBodyHeight();
        if(this.fixedcenter){
            this.center();
        }
        if(this.isVisible()){
            this.constrainXY();
            this.adjustAssets();
        }
        this.fireEvent("resize", this, width, height);
        return this;
    },


    /**
     * Resizes the dialog to fit the specified content size.
     * @param {Number} width
     * @param {Number} height
     * @return {Roo.BasicDialog} this
     */
    setContentSize : function(w, h){
        h += this.getHeaderFooterHeight() + this.body.getMargins("tb");
        w += this.body.getMargins("lr") + this.bwrap.getMargins("lr") + this.centerBg.getPadding("lr");
        //if(!this.el.isBorderBox()){
            h +=  this.body.getPadding("tb") + this.bwrap.getBorderWidth("tb") + this.body.getBorderWidth("tb") + this.el.getBorderWidth("tb");
            w += this.body.getPadding("lr") + this.bwrap.getBorderWidth("lr") + this.body.getBorderWidth("lr") + this.bwrap.getPadding("lr") + this.el.getBorderWidth("lr");
        //}
        if(this.tabs){
            h += this.tabs.stripWrap.getHeight() + this.tabs.bodyEl.getMargins("tb") + this.tabs.bodyEl.getPadding("tb");
            w += this.tabs.bodyEl.getMargins("lr") + this.tabs.bodyEl.getPadding("lr");
        }
        this.resizeTo(w, h);
        return this;
    },

    /**
     * Adds a key listener for when this dialog is displayed.  This allows you to hook in a function that will be
     * executed in response to a particular key being pressed while the dialog is active.
     * @param {Number/Array/Object} key Either the numeric key code, array of key codes or an object with the following options:
     *                                  {key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}
     * @param {Function} fn The function to call
     * @param {Object} scope (optional) The scope of the function
     * @return {Roo.BasicDialog} this
     */
    addKeyListener : function(key, fn, scope){
        var keyCode, shift, ctrl, alt;
        if(typeof key == "object" && !(key instanceof Array)){
            keyCode = key["key"];
            shift = key["shift"];
            ctrl = key["ctrl"];
            alt = key["alt"];
        }else{
            keyCode = key;
        }
        var handler = function(dlg, e){
            if((!shift || e.shiftKey) && (!ctrl || e.ctrlKey) &&  (!alt || e.altKey)){
                var k = e.getKey();
                if(keyCode instanceof Array){
                    for(var i = 0, len = keyCode.length; i < len; i++){
                        if(keyCode[i] == k){
                          fn.call(scope || window, dlg, k, e);
                          return;
                        }
                    }
                }else{
                    if(k == keyCode){
                        fn.call(scope || window, dlg, k, e);
                    }
                }
            }
        };
        this.on("keydown", handler);
        return this;
    },

    /**
     * Returns the panel.Tab component (creates it if it doesn't exist).
     * Note: If you wish to simply check for the existence of tabs without creating them,
     * check for a null 'tabs' property.
     * @return {Roo.panel.Tab} The tabs component
     */
    getTabs : function(){
        if(!this.tabs){
            this.el.addClass("x-dlg-auto-tabs");
            this.body.addClass(this.tabPosition == "bottom" ? "x-tabs-bottom" : "x-tabs-top");
            this.tabs = new Roo.panel.Tab(this.body.dom, this.tabPosition == "bottom");
        }
        return this.tabs;
    },

    /**
     * Adds a button to the footer section of the dialog.
     * @param {String/Object} config A string becomes the button text, an object can either be a Button config
     * object or a valid Roo.DomHelper element config
     * @param {Function} handler The function called when the button is clicked
     * @param {Object} scope (optional) The scope of the handler function (accepts position as a property)
     * @return {Roo.Button} The new button
     */
    addButton : function(config, handler, scope){
        var dh = Roo.DomHelper;
        if(!this.footer){
            this.footer = dh.append(this.bwrap, {tag: "div", cls:"x-dlg-ft"}, true);
        }
        if(!this.btnContainer){
            var tb = this.footer.createChild({

                cls:"x-dlg-btns x-dlg-btns-"+this.buttonAlign,
                html:'<table cellspacing="0"><tbody><tr></tr></tbody></table><div class="x-clear"></div>'
            }, null, true);
            this.btnContainer = tb.firstChild.firstChild.firstChild;
        }
        var bconfig = {
            handler: handler,
            scope: scope,
            minWidth: this.minButtonWidth,
            hideParent:true
        };
        if(typeof config == "string"){
            bconfig.text = config;
        }else{
            if(config.tag){
                bconfig.dhconfig = config;
            }else{
                Roo.apply(bconfig, config);
            }
        }
        var fc = false;
        if ((typeof(bconfig.position) != 'undefined') && bconfig.position < this.btnContainer.childNodes.length-1) {
            bconfig.position = Math.max(0, bconfig.position);
            fc = this.btnContainer.childNodes[bconfig.position];
        }
         
        var btn = new Roo.Button(
            fc ? 
                this.btnContainer.insertBefore(document.createElement("td"),fc)
                : this.btnContainer.appendChild(document.createElement("td")),
            //Roo.get(this.btnContainer).createChild( { tag: 'td'},  fc ),
            bconfig
        );
        this.syncBodyHeight();
        if(!this.buttons){
            /**
             * Array of all the buttons that have been added to this dialog via addButton
             * @type Array
             */
            this.buttons = [];
        }
        this.buttons.push(btn);
        return btn;
    },

    /**
     * Sets the default button to be focused when the dialog is displayed.
     * @param {Roo.BasicDialog.Button} btn The button object returned by {@link #addButton}
     * @return {Roo.BasicDialog} this
     */
    setDefaultButton : function(btn){
        this.defaultButton = btn;
        return this;
    },

    // private
    getHeaderFooterHeight : function(safe){
        var height = 0;
        if(this.header){
           height += this.header.getHeight();
        }
        if(this.footer){
           var fm = this.footer.getMargins();
            height += (this.footer.getHeight()+fm.top+fm.bottom);
        }
        height += this.bwrap.getPadding("tb")+this.bwrap.getBorderWidth("tb");
        height += this.centerBg.getPadding("tb");
        return height;
    },

    // private
    syncBodyHeight : function()
    {
        var bd = this.body, // the text
            cb = this.centerBg, // wrapper around bottom.. but does not seem to be used..
            bw = this.bwrap;
        var height = this.size.height - this.getHeaderFooterHeight(false);
        bd.setHeight(height-bd.getMargins("tb"));
        var hh = this.header.getHeight();
        var h = this.size.height-hh;
        cb.setHeight(h);
        
        bw.setLeftTop(cb.getPadding("l"), hh+cb.getPadding("t"));
        bw.setHeight(h-cb.getPadding("tb"));
        
        bw.setWidth(this.el.getWidth(true)-cb.getPadding("lr"));
        bd.setWidth(bw.getWidth(true));
        if(this.tabs){
            this.tabs.syncHeight();
            if(Roo.isIE){
                this.tabs.el.repaint();
            }
        }
    },

    /**
     * Restores the previous state of the dialog if Roo.state is configured.
     * @return {Roo.BasicDialog} this
     */
    restoreState : function(){
        var box = Roo.state.Manager.get(this.stateId || (this.el.id + "-state"));
        if(box && box.width){
            this.xy = [box.x, box.y];
            this.resizeTo(box.width, box.height);
        }
        return this;
    },

    // private
    beforeShow : function(){
        this.expand();
        if(this.fixedcenter){
            this.xy = this.el.getCenterXY(true);
        }
        if(this.modal){
            Roo.get(document.body).addClass("x-body-masked");
            this.mask.setSize(Roo.lib.Dom.getViewWidth(true), Roo.lib.Dom.getViewHeight(true));
            this.mask.show();
        }
        this.constrainXY();
    },

    // private
    animShow : function(){
        var b = Roo.get(this.animateTarget).getBox();
        this.proxy.setSize(b.width, b.height);
        this.proxy.setLocation(b.x, b.y);
        this.proxy.show();
        this.proxy.setBounds(this.xy[0], this.xy[1], this.size.width, this.size.height,
                    true, .35, this.showEl.createDelegate(this));
    },

    /**
     * Shows the dialog.
     * @param {String/HTMLElement/Roo.Element} animateTarget (optional) Reset the animation target
     * @return {Roo.BasicDialog} this
     */
    show : function(animateTarget){
        if (this.fireEvent("beforeshow", this) === false){
            return;
        }
        if(this.syncHeightBeforeShow){
            this.syncBodyHeight();
        }else if(this.firstShow){
            this.firstShow = false;
            this.syncBodyHeight(); // sync the height on the first show instead of in the constructor
        }
        this.animateTarget = animateTarget || this.animateTarget;
        if(!this.el.isVisible()){
            this.beforeShow();
            if(this.animateTarget && Roo.get(this.animateTarget)){
                this.animShow();
            }else{
                this.showEl();
            }
        }
        return this;
    },

    // private
    showEl : function(){
        this.proxy.hide();
        this.el.setXY(this.xy);
        this.el.show();
        this.adjustAssets(true);
        this.toFront();
        this.focus();
        // IE peekaboo bug - fix found by Dave Fenwick
        if(Roo.isIE){
            this.el.repaint();
        }
        this.fireEvent("show", this);
    },

    /**
     * Focuses the dialog.  If a defaultButton is set, it will receive focus, otherwise the
     * dialog itself will receive focus.
     */
    focus : function(){
        if(this.defaultButton){
            this.defaultButton.focus();
        }else{
            this.focusEl.focus();
        }
    },

    // private
    constrainXY : function(){
        if(this.constraintoviewport !== false){
            if(!this.viewSize){
                if(this.container){
                    var s = this.container.getSize();
                    this.viewSize = [s.width, s.height];
                }else{
                    this.viewSize = [Roo.lib.Dom.getViewWidth(),Roo.lib.Dom.getViewHeight()];
                }
            }
            var s = Roo.get(this.container||document).getScroll();

            var x = this.xy[0], y = this.xy[1];
            var w = this.size.width, h = this.size.height;
            var vw = this.viewSize[0], vh = this.viewSize[1];
            // only move it if it needs it
            var moved = false;
            // first validate right/bottom
            if(x + w > vw+s.left){
                x = vw - w;
                moved = true;
            }
            if(y + h > vh+s.top){
                y = vh - h;
                moved = true;
            }
            // then make sure top/left isn't negative
            if(x < s.left){
                x = s.left;
                moved = true;
            }
            if(y < s.top){
                y = s.top;
                moved = true;
            }
            if(moved){
                // cache xy
                this.xy = [x, y];
                if(this.isVisible()){
                    this.el.setLocation(x, y);
                    this.adjustAssets();
                }
            }
        }
    },

    // private
    onDrag : function(){
        if(!this.proxyDrag){
            this.xy = this.el.getXY();
            this.adjustAssets();
        }
    },

    // private
    adjustAssets : function(doShow){
        var x = this.xy[0], y = this.xy[1];
        var w = this.size.width, h = this.size.height;
        if(doShow === true){
            if(this.shadow){
                this.shadow.show(this.el);
            }
            if(this.shim){
                this.shim.show();
            }
        }
        if(this.shadow && this.shadow.isVisible()){
            this.shadow.show(this.el);
        }
        if(this.shim && this.shim.isVisible()){
            this.shim.setBounds(x, y, w, h);
        }
    },

    // private
    adjustViewport : function(w, h){
        if(!w || !h){
            w = Roo.lib.Dom.getViewWidth();
            h = Roo.lib.Dom.getViewHeight();
        }
        // cache the size
        this.viewSize = [w, h];
        if(this.modal && this.mask.isVisible()){
            this.mask.setSize(w, h); // first make sure the mask isn't causing overflow
            this.mask.setSize(Roo.lib.Dom.getViewWidth(true), Roo.lib.Dom.getViewHeight(true));
        }
        if(this.isVisible()){
            this.constrainXY();
        }
    },

    /**
     * Destroys this dialog and all its supporting elements (including any tabs, shim,
     * shadow, proxy, mask, etc.)  Also removes all event listeners.
     * @param {Boolean} removeEl (optional) true to remove the element from the DOM
     */
    destroy : function(removeEl){
        if(this.isVisible()){
            this.animateTarget = null;
            this.hide();
        }
        Roo.EventManager.removeResizeListener(this.adjustViewport, this);
        if(this.tabs){
            this.tabs.destroy(removeEl);
        }
        Roo.destroy(
             this.shim,
             this.proxy,
             this.resizer,
             this.close,
             this.mask
        );
        if(this.dd){
            this.dd.unreg();
        }
        if(this.buttons){
           for(var i = 0, len = this.buttons.length; i < len; i++){
               this.buttons[i].destroy();
           }
        }
        this.el.removeAllListeners();
        if(removeEl === true){
            this.el.update("");
            this.el.remove();
        }
        Roo.DialogManager.unregister(this);
    },

    // private
    startMove : function(){
        if(this.proxyDrag){
            this.proxy.show();
        }
        if(this.constraintoviewport !== false){
            this.dd.constrainTo(document.body, {right: this.shadowOffset, bottom: this.shadowOffset});
        }
    },

    // private
    endMove : function(){
        if(!this.proxyDrag){
            Roo.dd.DD.prototype.endDrag.apply(this.dd, arguments);
        }else{
            Roo.dd.DDProxy.prototype.endDrag.apply(this.dd, arguments);
            this.proxy.hide();
        }
        this.refreshSize();
        this.adjustAssets();
        this.focus();
        this.fireEvent("move", this, this.xy[0], this.xy[1]);
    },

    /**
     * Brings this dialog to the front of any other visible dialogs
     * @return {Roo.BasicDialog} this
     */
    toFront : function(){
        Roo.DialogManager.bringToFront(this);
        return this;
    },

    /**
     * Sends this dialog to the back (under) of any other visible dialogs
     * @return {Roo.BasicDialog} this
     */
    toBack : function(){
        Roo.DialogManager.sendToBack(this);
        return this;
    },

    /**
     * Centers this dialog in the viewport
     * @return {Roo.BasicDialog} this
     */
    center : function(){
        var xy = this.el.getCenterXY(true);
        this.moveTo(xy[0], xy[1]);
        return this;
    },

    /**
     * Moves the dialog's top-left corner to the specified point
     * @param {Number} x
     * @param {Number} y
     * @return {Roo.BasicDialog} this
     */
    moveTo : function(x, y){
        this.xy = [x,y];
        if(this.isVisible()){
            this.el.setXY(this.xy);
            this.adjustAssets();
        }
        return this;
    },

    /**
     * Aligns the dialog to the specified element
     * @param {String/HTMLElement/Roo.Element} element The element to align to.
     * @param {String} position The position to align to (see {@link Roo.Element#alignTo} for more details).
     * @param {Array} offsets (optional) Offset the positioning by [x, y]
     * @return {Roo.BasicDialog} this
     */
    alignTo : function(element, position, offsets){
        this.xy = this.el.getAlignToXY(element, position, offsets);
        if(this.isVisible()){
            this.el.setXY(this.xy);
            this.adjustAssets();
        }
        return this;
    },

    /**
     * Anchors an element to another element and realigns it when the window is resized.
     * @param {String/HTMLElement/Roo.Element} element The element to align to.
     * @param {String} position The position to align to (see {@link Roo.Element#alignTo} for more details)
     * @param {Array} offsets (optional) Offset the positioning by [x, y]
     * @param {Boolean/Number} monitorScroll (optional) true to monitor body scroll and reposition. If this parameter
     * is a number, it is used as the buffer delay (defaults to 50ms).
     * @return {Roo.BasicDialog} this
     */
    anchorTo : function(el, alignment, offsets, monitorScroll){
        var action = function(){
            this.alignTo(el, alignment, offsets);
        };
        Roo.EventManager.onWindowResize(action, this);
        var tm = typeof monitorScroll;
        if(tm != 'undefined'){
            Roo.EventManager.on(window, 'scroll', action, this,
                {buffer: tm == 'number' ? monitorScroll : 50});
        }
        action.call(this);
        return this;
    },

    /**
     * Returns true if the dialog is visible
     * @return {Boolean}
     */
    isVisible : function(){
        return this.el.isVisible();
    },

    // private
    animHide : function(callback){
        var b = Roo.get(this.animateTarget).getBox();
        this.proxy.show();
        this.proxy.setBounds(this.xy[0], this.xy[1], this.size.width, this.size.height);
        this.el.hide();
        this.proxy.setBounds(b.x, b.y, b.width, b.height, true, .35,
                    this.hideEl.createDelegate(this, [callback]));
    },

    /**
     * Hides the dialog.
     * @param {Function} callback (optional) Function to call when the dialog is hidden
     * @return {Roo.BasicDialog} this
     */
    hide : function(callback){
        if (this.fireEvent("beforehide", this) === false){
            return;
        }
        if(this.shadow){
            this.shadow.hide();
        }
        if(this.shim) {
          this.shim.hide();
        }
        // sometimes animateTarget seems to get set.. causing problems...
        // this just double checks..
        if(this.animateTarget && Roo.get(this.animateTarget)) {
           this.animHide(callback);
        }else{
            this.el.hide();
            this.hideEl(callback);
        }
        return this;
    },

    // private
    hideEl : function(callback){
        this.proxy.hide();
        if(this.modal){
            this.mask.hide();
            Roo.get(document.body).removeClass("x-body-masked");
        }
        this.fireEvent("hide", this);
        if(typeof callback == "function"){
            callback();
        }
    },

    // private
    hideAction : function(){
        this.setLeft("-10000px");
        this.setTop("-10000px");
        this.setStyle("visibility", "hidden");
    },

    // private
    refreshSize : function(){
        this.size = this.el.getSize();
        this.xy = this.el.getXY();
        Roo.state.Manager.set(this.stateId || this.el.id + "-state", this.el.getBox());
    },

    // private
    // z-index is managed by the DialogManager and may be overwritten at any time
    setZIndex : function(index){
        if(this.modal){
            this.mask.setStyle("z-index", index);
        }
        if(this.shim){
            this.shim.setStyle("z-index", ++index);
        }
        if(this.shadow){
            this.shadow.setZIndex(++index);
        }
        this.el.setStyle("z-index", ++index);
        if(this.proxy){
            this.proxy.setStyle("z-index", ++index);
        }
        if(this.resizer){
            this.resizer.proxy.setStyle("z-index", ++index);
        }

        this.lastZIndex = index;
    },

    /**
     * Returns the element for this dialog
     * @return {Roo.Element} The underlying dialog Element
     */
    getEl : function(){
        return this.el;
    }
});

/**
 * @class Roo.DialogManager
 * Provides global access to BasicDialogs that have been created and
 * support for z-indexing (layering) multiple open dialogs.
 */
Roo.DialogManager = function(){
    var list = {};
    var accessList = [];
    var front = null;

    // private
    var sortDialogs = function(d1, d2){
        return (!d1._lastAccess || d1._lastAccess < d2._lastAccess) ? -1 : 1;
    };

    // private
    var orderDialogs = function(){
        accessList.sort(sortDialogs);
        var seed = Roo.DialogManager.zseed;
        for(var i = 0, len = accessList.length; i < len; i++){
            var dlg = accessList[i];
            if(dlg){
                dlg.setZIndex(seed + (i*10));
            }
        }
    };

    return {
        /**
         * The starting z-index for BasicDialogs (defaults to 9000)
         * @type Number The z-index value
         */
        zseed : 9000,

        // private
        register : function(dlg){
            list[dlg.id] = dlg;
            accessList.push(dlg);
        },

        // private
        unregister : function(dlg){
            delete list[dlg.id];
            var i=0;
            var len=0;
            if(!accessList.indexOf){
                for(  i = 0, len = accessList.length; i < len; i++){
                    if(accessList[i] == dlg){
                        accessList.splice(i, 1);
                        return;
                    }
                }
            }else{
                 i = accessList.indexOf(dlg);
                if(i != -1){
                    accessList.splice(i, 1);
                }
            }
        },

        /**
         * Gets a registered dialog by id
         * @param {String/Object} id The id of the dialog or a dialog
         * @return {Roo.BasicDialog} this
         */
        get : function(id){
            return typeof id == "object" ? id : list[id];
        },

        /**
         * Brings the specified dialog to the front
         * @param {String/Object} dlg The id of the dialog or a dialog
         * @return {Roo.BasicDialog} this
         */
        bringToFront : function(dlg){
            dlg = this.get(dlg);
            if(dlg != front){
                front = dlg;
                dlg._lastAccess = new Date().getTime();
                orderDialogs();
            }
            return dlg;
        },

        /**
         * Sends the specified dialog to the back
         * @param {String/Object} dlg The id of the dialog or a dialog
         * @return {Roo.BasicDialog} this
         */
        sendToBack : function(dlg){
            dlg = this.get(dlg);
            dlg._lastAccess = -(new Date().getTime());
            orderDialogs();
            return dlg;
        },

        /**
         * Hides all dialogs
         */
        hideAll : function(){
            for(var id in list){
                if(list[id] && typeof list[id] != "function" && list[id].isVisible()){
                    list[id].hide();
                }
            }
        }
    };
}();

/**
 * @class Roo.LayoutDialog
 * @extends Roo.BasicDialog
 * @children Roo.panel.Content
 * @parent builder none
 * Dialog which provides adjustments for working with a layout in a Dialog.
 * Add your necessary layout config options to the dialog's config.<br>
 * Example usage (including a nested layout):
 * <pre><code>
if(!dialog){
    dialog = new Roo.LayoutDialog("download-dlg", {
        modal: true,
        width:600,
        height:450,
        shadow:true,
        minWidth:500,
        minHeight:350,
        autoTabs:true,
        proxyDrag:true,
        // layout config merges with the dialog config
        center:{
            tabPosition: "top",
            alwaysShowTabs: true
        }
    });
    dialog.addKeyListener(27, dialog.hide, dialog);
    dialog.setDefaultButton(dialog.addButton("Close", dialog.hide, dialog));
    dialog.addButton("Build It!", this.getDownload, this);

    // we can even add nested layouts
    var innerLayout = new Roo.layout.Border("dl-inner", {
        east: {
            initialSize: 200,
            autoScroll:true,
            split:true
        },
        center: {
            autoScroll:true
        }
    });
    innerLayout.beginUpdate();
    innerLayout.add("east", new Roo.panel.Content("dl-details"));
    innerLayout.add("center", new Roo.panel.Content("selection-panel"));
    innerLayout.endUpdate(true);

    var layout = dialog.getLayout();
    layout.beginUpdate();
    layout.add("center", new Roo.panel.Content("standard-panel",
                        {title: "Download the Source", fitToFrame:true}));
    layout.add("center", new Roo.panel.NestedLayout(innerLayout,
               {title: "Build your own roo.js"}));
    layout.getRegion("center").showPanel(sp);
    layout.endUpdate();
}
</code></pre>
    * @constructor
    * @param {String/HTMLElement/Roo.Element} el The id of or container element, or config
    * @param {Object} config configuration options
  */
Roo.LayoutDialog = function(el, cfg){
    
    var config=  cfg;
    if (typeof(cfg) == 'undefined') {
        config = Roo.apply({}, el);
        // not sure why we use documentElement here.. - it should always be body.
        // IE7 borks horribly if we use documentElement.
        // webkit also does not like documentElement - it creates a body element...
        el = Roo.get( document.body || document.documentElement ).createChild();
        //config.autoCreate = true;
    }
    
    
    config.autoTabs = false;
    Roo.LayoutDialog.superclass.constructor.call(this, el, config);
    this.body.setStyle({overflow:"hidden", position:"relative"});
    this.layout = new Roo.layout.Border(this.body.dom, config);
    this.layout.monitorWindowResize = false;
    this.el.addClass("x-dlg-auto-layout");
    // fix case when center region overwrites center function
    this.center = Roo.BasicDialog.prototype.center;
    this.on("show", this.layout.layout, this.layout, true);
    if (config.items) {
        var xitems = config.items;
        delete config.items;
        Roo.each(xitems, this.addxtype, this);
    }
    
    
};
Roo.extend(Roo.LayoutDialog, Roo.BasicDialog, {
    
    
    /**
     * @cfg {Roo.layout.Region} east  
     */
    /**
     * @cfg {Roo.layout.Region} west
     */
    /**
     * @cfg {Roo.layout.Region} south
     */
    /**
     * @cfg {Roo.layout.Region} north
     */
    /**
     * @cfg {Roo.layout.Region} center
     */
    /**
     * @cfg {Roo.Button} buttons[]  Bottom buttons..
     */
    
    
    /**
     * Ends update of the layout <strike>and resets display to none</strike>. Use standard beginUpdate/endUpdate on the layout.
     * @deprecated
     */
    endUpdate : function(){
        this.layout.endUpdate();
    },

    /**
     * Begins an update of the layout <strike>and sets display to block and visibility to hidden</strike>. Use standard beginUpdate/endUpdate on the layout.
     *  @deprecated
     */
    beginUpdate : function(){
        this.layout.beginUpdate();
    },

    /**
     * Get the BorderLayout for this dialog
     * @return {Roo.layout.Border}
     */
    getLayout : function(){
        return this.layout;
    },

    showEl : function(){
        Roo.LayoutDialog.superclass.showEl.apply(this, arguments);
        if(Roo.isIE7){
            this.layout.layout();
        }
    },

    // private
    // Use the syncHeightBeforeShow config option to control this automatically
    syncBodyHeight : function(){
        Roo.LayoutDialog.superclass.syncBodyHeight.call(this);
        if(this.layout){this.layout.layout();}
    },
    
      /**
     * Add an xtype element (actually adds to the layout.)
     * @return {Object} xdata xtype object data.
     */
    
    addxtype : function(c) {
        return this.layout.addxtype(c);
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.MessageBox
 * @static
 * Utility class for generating different styles of message boxes.  The alias Roo.Msg can also be used.
 * Example usage:
 *<pre><code>
// Basic alert:
Roo.Msg.alert('Status', 'Changes saved successfully.');

// Prompt for user data:
Roo.Msg.prompt('Name', 'Please enter your name:', function(btn, text){
    if (btn == 'ok'){
        // process text value...
    }
});

// Show a dialog using config options:
Roo.Msg.show({
   title:'Save Changes?',
   msg: 'Your are closing a tab that has unsaved changes. Would you like to save your changes?',
   buttons: Roo.Msg.YESNOCANCEL,
   fn: processResult,
   animEl: 'elId'
});
</code></pre>
 * @static
 */
Roo.MessageBox = function(){
    var dlg, opt, mask, waitTimer;
    var bodyEl, msgEl, textboxEl, textareaEl, progressEl, pp;
    var buttons, activeTextEl, bwidth;

    // private
    var handleButton = function(button){
        dlg.hide();
        Roo.callback(opt.fn, opt.scope||window, [button, activeTextEl.dom.value], 1);
    };

    // private
    var handleHide = function(){
        if(opt && opt.cls){
            dlg.el.removeClass(opt.cls);
        }
        if(waitTimer){
            Roo.TaskMgr.stop(waitTimer);
            waitTimer = null;
        }
    };

    // private
    var updateButtons = function(b){
        var width = 0;
        if(!b){
            buttons["ok"].hide();
            buttons["cancel"].hide();
            buttons["yes"].hide();
            buttons["no"].hide();
            dlg.footer.dom.style.display = 'none';
            return width;
        }
        dlg.footer.dom.style.display = '';
        for(var k in buttons){
            if(typeof buttons[k] != "function"){
                if(b[k]){
                    buttons[k].show();
                    buttons[k].setText(typeof b[k] == "string" ? b[k] : Roo.MessageBox.buttonText[k]);
                    width += buttons[k].el.getWidth()+15;
                }else{
                    buttons[k].hide();
                }
            }
        }
        return width;
    };

    // private
    var handleEsc = function(d, k, e){
        if(opt && opt.closable !== false){
            dlg.hide();
        }
        if(e){
            e.stopEvent();
        }
    };

    return {
        /**
         * Returns a reference to the underlying {@link Roo.BasicDialog} element
         * @return {Roo.BasicDialog} The BasicDialog element
         */
        getDialog : function(){
           if(!dlg){
                dlg = new Roo.BasicDialog("x-msg-box", {
                    autoCreate : true,
                    shadow: true,
                    draggable: true,
                    resizable:false,
                    constraintoviewport:false,
                    fixedcenter:true,
                    collapsible : false,
                    shim:true,
                    modal: true,
                    width:400, height:100,
                    buttonAlign:"center",
                    closeClick : function(){
                        if(opt && opt.buttons && opt.buttons.no && !opt.buttons.cancel){
                            handleButton("no");
                        }else{
                            handleButton("cancel");
                        }
                    }
                });
              
                dlg.on("hide", handleHide);
                mask = dlg.mask;
                dlg.addKeyListener(27, handleEsc);
                buttons = {};
                var bt = this.buttonText;
                buttons["ok"] = dlg.addButton(bt["ok"], handleButton.createCallback("ok"));
                buttons["yes"] = dlg.addButton(bt["yes"], handleButton.createCallback("yes"));
                buttons["no"] = dlg.addButton(bt["no"], handleButton.createCallback("no"));
                buttons["cancel"] = dlg.addButton(bt["cancel"], handleButton.createCallback("cancel"));
                bodyEl = dlg.body.createChild({

                    html:'<span class="roo-mb-text"></span><br /><input type="text" class="roo-mb-input" /><textarea class="roo-mb-textarea"></textarea><div class="roo-mb-progress-wrap"><div class="roo-mb-progress"><div class="roo-mb-progress-bar">&#160;</div></div></div>'
                });
                msgEl = bodyEl.dom.firstChild;
                textboxEl = Roo.get(bodyEl.dom.childNodes[2]);
                textboxEl.enableDisplayMode();
                textboxEl.addKeyListener([10,13], function(){
                    if(dlg.isVisible() && opt && opt.buttons){
                        if(opt.buttons.ok){
                            handleButton("ok");
                        }else if(opt.buttons.yes){
                            handleButton("yes");
                        }
                    }
                });
                textareaEl = Roo.get(bodyEl.dom.childNodes[3]);
                textareaEl.enableDisplayMode();
                progressEl = Roo.get(bodyEl.dom.childNodes[4]);
                progressEl.enableDisplayMode();
                var pf = progressEl.dom.firstChild;
                if (pf) {
                    pp = Roo.get(pf.firstChild);
                    pp.setHeight(pf.offsetHeight);
                }
                
            }
            return dlg;
        },

        /**
         * Updates the message box body text
         * @param {String} text (optional) Replaces the message box element's innerHTML with the specified string (defaults to
         * the XHTML-compliant non-breaking space character '&amp;#160;')
         * @return {Roo.MessageBox} This message box
         */
        updateText : function(text){
            if(!dlg.isVisible() && !opt.width){
                dlg.resizeTo(this.maxWidth, 100); // resize first so content is never clipped from previous shows
            }
            msgEl.innerHTML = text || '&#160;';
      
            var cw =  Math.max(msgEl.offsetWidth, msgEl.parentNode.scrollWidth);
            //Roo.log("guesed size: " + JSON.stringify([cw,msgEl.offsetWidth, msgEl.parentNode.scrollWidth]));
            var w = Math.max(
                    Math.min(opt.width || cw , this.maxWidth), 
                    Math.max(opt.minWidth || this.minWidth, bwidth)
            );
            if(opt.prompt){
                activeTextEl.setWidth(w);
            }
            if(dlg.isVisible()){
                dlg.fixedcenter = false;
            }
            // to big, make it scroll. = But as usual stupid IE does not support
            // !important..
            
            if ( bodyEl.getHeight() > (Roo.lib.Dom.getViewHeight() - 100)) {
                bodyEl.setHeight ( Roo.lib.Dom.getViewHeight() - 100 );
                bodyEl.dom.style.overflowY = 'auto' + ( Roo.isIE ? '' : ' !important');
            } else {
                bodyEl.dom.style.height = '';
                bodyEl.dom.style.overflowY = '';
            }
            if (cw > w) {
                bodyEl.dom.style.get = 'auto' + ( Roo.isIE ? '' : ' !important');
            } else {
                bodyEl.dom.style.overflowX = '';
            }
            
            dlg.setContentSize(w, bodyEl.getHeight());
            if(dlg.isVisible()){
                dlg.fixedcenter = true;
            }
            return this;
        },

        /**
         * Updates a progress-style message box's text and progress bar.  Only relevant on message boxes
         * initiated via {@link Roo.MessageBox#progress} or by calling {@link Roo.MessageBox#show} with progress: true.
         * @param {Number} value Any number between 0 and 1 (e.g., .5)
         * @param {String} text (optional) If defined, the message box's body text is replaced with the specified string (defaults to undefined)
         * @return {Roo.MessageBox} This message box
         */
        updateProgress : function(value, text){
            if(text){
                this.updateText(text);
            }
            if (pp) { // weird bug on my firefox - for some reason this is not defined
                pp.setWidth(Math.floor(value*progressEl.dom.firstChild.offsetWidth));
            }
            return this;
        },        

        /**
         * Returns true if the message box is currently displayed
         * @return {Boolean} True if the message box is visible, else false
         */
        isVisible : function(){
            return dlg && dlg.isVisible();  
        },

        /**
         * Hides the message box if it is displayed
         */
        hide : function(){
            if(this.isVisible()){
                dlg.hide();
            }  
        },

        /**
         * Displays a new message box, or reinitializes an existing message box, based on the config options
         * passed in. All functions (e.g. prompt, alert, etc) on MessageBox call this function internally.
         * The following config object properties are supported:
         * <pre>
Property    Type             Description
----------  ---------------  ------------------------------------------------------------------------------------
animEl            String/Element   An id or Element from which the message box should animate as it opens and
                                   closes (defaults to undefined)
buttons           Object/Boolean   A button config object (e.g., Roo.MessageBox.OKCANCEL or {ok:'Foo',
                                   cancel:'Bar'}), or false to not show any buttons (defaults to false)
closable          Boolean          False to hide the top-right close button (defaults to true).  Note that
                                   progress and wait dialogs will ignore this property and always hide the
                                   close button as they can only be closed programmatically.
cls               String           A custom CSS class to apply to the message box element
defaultTextHeight Number           The default height in pixels of the message box's multiline textarea if
                                   displayed (defaults to 75)
fn                Function         A callback function to execute after closing the dialog.  The arguments to the
                                   function will be btn (the name of the button that was clicked, if applicable,
                                   e.g. "ok"), and text (the value of the active text field, if applicable).
                                   Progress and wait dialogs will ignore this option since they do not respond to
                                   user actions and can only be closed programmatically, so any required function
                                   should be called by the same code after it closes the dialog.
icon              String           A CSS class that provides a background image to be used as an icon for
                                   the dialog (e.g., Roo.MessageBox.WARNING or 'custom-class', defaults to '')
maxWidth          Number           The maximum width in pixels of the message box (defaults to 600)
minWidth          Number           The minimum width in pixels of the message box (defaults to 100)
modal             Boolean          False to allow user interaction with the page while the message box is
                                   displayed (defaults to true)
msg               String           A string that will replace the existing message box body text (defaults
                                   to the XHTML-compliant non-breaking space character '&#160;')
multiline         Boolean          True to prompt the user to enter multi-line text (defaults to false)
progress          Boolean          True to display a progress bar (defaults to false)
progressText      String           The text to display inside the progress bar if progress = true (defaults to '')
prompt            Boolean          True to prompt the user to enter single-line text (defaults to false)
proxyDrag         Boolean          True to display a lightweight proxy while dragging (defaults to false)
title             String           The title text
value             String           The string value to set into the active textbox element if displayed
wait              Boolean          True to display a progress bar (defaults to false)
width             Number           The width of the dialog in pixels
</pre>
         *
         * Example usage:
         * <pre><code>
Roo.Msg.show({
   title: 'Address',
   msg: 'Please enter your address:',
   width: 300,
   buttons: Roo.MessageBox.OKCANCEL,
   multiline: true,
   fn: saveAddress,
   animEl: 'addAddressBtn'
});
</code></pre>
         * @param {Object} config Configuration options
         * @return {Roo.MessageBox} This message box
         */
        show : function(options)
        {
            
            // this causes nightmares if you show one dialog after another
            // especially on callbacks..
             
            if(this.isVisible()){
                
                this.hide();
                Roo.log("[Roo.Messagebox] Show called while message displayed:" );
                Roo.log("Old Dialog Message:" +  msgEl.innerHTML );
                Roo.log("New Dialog Message:" +  options.msg )
                //this.alert("ERROR", "Multiple dialogs where displayed at the same time");
                //throw "Roo.MessageBox ERROR : Multiple dialogs where displayed at the same time";
                
            }
            var d = this.getDialog();
            opt = options;
            d.setTitle(opt.title || "&#160;");
            d.close.setDisplayed(opt.closable !== false);
            activeTextEl = textboxEl;
            opt.prompt = opt.prompt || (opt.multiline ? true : false);
            if(opt.prompt){
                if(opt.multiline){
                    textboxEl.hide();
                    textareaEl.show();
                    textareaEl.setHeight(typeof opt.multiline == "number" ?
                        opt.multiline : this.defaultTextHeight);
                    activeTextEl = textareaEl;
                }else{
                    textboxEl.show();
                    textareaEl.hide();
                }
            }else{
                textboxEl.hide();
                textareaEl.hide();
            }
            progressEl.setDisplayed(opt.progress === true);
            this.updateProgress(0);
            activeTextEl.dom.value = opt.value || "";
            (function() { 
                activeTextEl.dom.scrollTop = 0; // scroll to top
            }).defer(100);
            if(opt.prompt){
                dlg.setDefaultButton(activeTextEl);
            }else{
                var bs = opt.buttons;
                var db = null;
                if(bs && bs.ok){
                    db = buttons["ok"];
                }else if(bs && bs.yes){
                    db = buttons["yes"];
                }
                dlg.setDefaultButton(db);
            }
            bwidth = updateButtons(opt.buttons);
            this.updateText(opt.msg);
            if(opt.cls){
                d.el.addClass(opt.cls);
            }
            d.proxyDrag = opt.proxyDrag === true;
            d.modal = opt.modal !== false;
            d.mask = opt.modal !== false ? mask : false;
            if(!d.isVisible()){
                // force it to the end of the z-index stack so it gets a cursor in FF
                document.body.appendChild(dlg.el.dom);
                d.animateTarget = null;
                d.show(options.animEl);
            }
            dlg.toFront();
            return this;
        },

        getActiveTextEl: function() {
            return activeTextEl;
        },

        /**
         * Displays a message box with a progress bar.  This message box has no buttons and is not closeable by
         * the user.  You are responsible for updating the progress bar as needed via {@link Roo.MessageBox#updateProgress}
         * and closing the message box when the process is complete.
         * @param {String} title The title bar text
         * @param {String} msg The message box body text
         * @return {Roo.MessageBox} This message box
         */
        progress : function(title, msg){
            this.show({
                title : title,
                msg : msg,
                buttons: false,
                progress:true,
                closable:false,
                minWidth: this.minProgressWidth,
                modal : true
            });
            return this;
        },

        /**
         * Displays a standard read-only message box with an OK button (comparable to the basic JavaScript Window.alert).
         * If a callback function is passed it will be called after the user clicks the button, and the
         * id of the button that was clicked will be passed as the only parameter to the callback
         * (could also be the top-right close button).
         * @param {String} title The title bar text
         * @param {String} msg The message box body text
         * @param {Function} fn (optional) The callback function invoked after the message box is closed
         * @param {Object} scope (optional) The scope of the callback function
         * @return {Roo.MessageBox} This message box
         */
        alert : function(title, msg, fn, scope){
            this.show({
                title : title,
                msg : msg,
                buttons: this.OK,
                fn: fn,
                scope : scope,
                modal : true
            });
            return this;
        },

        /**
         * Displays a message box with an infinitely auto-updating progress bar.  This can be used to block user
         * interaction while waiting for a long-running process to complete that does not have defined intervals.
         * You are responsible for closing the message box when the process is complete.
         * @param {String} msg The message box body text
         * @param {String} title (optional) The title bar text
         * @return {Roo.MessageBox} This message box
         */
        wait : function(msg, title){
            this.show({
                title : title,
                msg : msg,
                buttons: false,
                closable:false,
                progress:true,
                modal:true,
                width:300,
                wait:true
            });
            waitTimer = Roo.TaskMgr.start({
                run: function(i){
                    Roo.MessageBox.updateProgress(((((i+20)%20)+1)*5)*.01);
                },
                interval: 1000
            });
            return this;
        },

        /**
         * Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's Window.confirm).
         * If a callback function is passed it will be called after the user clicks either button, and the id of the
         * button that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).
         * @param {String} title The title bar text
         * @param {String} msg The message box body text
         * @param {Function} fn (optional) The callback function invoked after the message box is closed
         * @param {Object} scope (optional) The scope of the callback function
         * @return {Roo.MessageBox} This message box
         */
        confirm : function(title, msg, fn, scope){
            this.show({
                title : title,
                msg : msg,
                buttons: this.YESNO,
                fn: fn,
                scope : scope,
                modal : true
            });
            return this;
        },

        /**
         * Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to
         * JavaScript's Window.prompt).  The prompt can be a single-line or multi-line textbox.  If a callback function
         * is passed it will be called after the user clicks either button, and the id of the button that was clicked
         * (could also be the top-right close button) and the text that was entered will be passed as the two
         * parameters to the callback.
         * @param {String} title The title bar text
         * @param {String} msg The message box body text
         * @param {Function} fn (optional) The callback function invoked after the message box is closed
         * @param {Object} scope (optional) The scope of the callback function
         * @param {Boolean/Number} multiline (optional) True to create a multiline textbox using the defaultTextHeight
         * property, or the height in pixels to create the textbox (defaults to false / single-line)
         * @return {Roo.MessageBox} This message box
         */
        prompt : function(title, msg, fn, scope, multiline){
            this.show({
                title : title,
                msg : msg,
                buttons: this.OKCANCEL,
                fn: fn,
                minWidth:250,
                scope : scope,
                prompt:true,
                multiline: multiline,
                modal : true
            });
            return this;
        },

        /**
         * Button config that displays a single OK button
         * @type Object
         */
        OK : {ok:true},
        /**
         * Button config that displays Yes and No buttons
         * @type Object
         */
        YESNO : {yes:true, no:true},
        /**
         * Button config that displays OK and Cancel buttons
         * @type Object
         */
        OKCANCEL : {ok:true, cancel:true},
        /**
         * Button config that displays Yes, No and Cancel buttons
         * @type Object
         */
        YESNOCANCEL : {yes:true, no:true, cancel:true},

        /**
         * The default height in pixels of the message box's multiline textarea if displayed (defaults to 75)
         * @type Number
         */
        defaultTextHeight : 75,
        /**
         * The maximum width in pixels of the message box (defaults to 600)
         * @type Number
         */
        maxWidth : 600,
        /**
         * The minimum width in pixels of the message box (defaults to 100)
         * @type Number
         */
        minWidth : 100,
        /**
         * The minimum width in pixels of the message box if it is a progress-style dialog.  This is useful
         * for setting a different minimum width than text-only dialogs may need (defaults to 250)
         * @type Number
         */
        minProgressWidth : 250,
        /**
         * An object containing the default button text strings that can be overriden for localized language support.
         * Supported properties are: ok, cancel, yes and no.
         * Customize the default text like so: Roo.MessageBox.buttonText.yes = "S?";
         * @type Object
         */
        buttonText : {
            ok : "OK",
            cancel : "Cancel",
            yes : "Yes",
            no : "No"
        }
    };
}();

/**
 * Shorthand for {@link Roo.MessageBox}
 */
Roo.Msg = Roo.MessageBox;/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.QuickTips
 * Provides attractive and customizable tooltips for any element.
 * @static
 */
Roo.QuickTips = function(){
    var el, tipBody, tipBodyText, tipTitle, tm, cfg, close, tagEls = {}, esc, removeCls = null, bdLeft, bdRight;
    var ce, bd, xy, dd;
    var visible = false, disabled = true, inited = false;
    var showProc = 1, hideProc = 1, dismissProc = 1, locks = [];
    
    var onOver = function(e){
        if(disabled){
            return;
        }
        var t = e.getTarget();
        if(!t || t.nodeType !== 1 || t == document || t == document.body){
            return;
        }
        if(ce && t == ce.el){
            clearTimeout(hideProc);
            return;
        }
        if(t && tagEls[t.id]){
            tagEls[t.id].el = t;
            showProc = show.defer(tm.showDelay, tm, [tagEls[t.id]]);
            return;
        }
        var ttp, et = Roo.fly(t);
        var ns = cfg.namespace;
        if(tm.interceptTitles && t.title){
            ttp = t.title;
            t.qtip = ttp;
            t.removeAttribute("title");
            e.preventDefault();
        }else{
            ttp = t.qtip || et.getAttributeNS(ns, cfg.attribute) || et.getAttributeNS(cfg.alt_namespace, cfg.attribute) ;
        }
        if(ttp){
            showProc = show.defer(tm.showDelay, tm, [{
                el: t, 
                text: ttp.replace(/\\n/g,'<br/>'),
                width: et.getAttributeNS(ns, cfg.width),
                autoHide: et.getAttributeNS(ns, cfg.hide) != "user",
                title: et.getAttributeNS(ns, cfg.title),
           	    cls: et.getAttributeNS(ns, cfg.cls)
            }]);
        }
    };
    
    var onOut = function(e){
        clearTimeout(showProc);
        var t = e.getTarget();
        if(t && ce && ce.el == t && (tm.autoHide && ce.autoHide !== false)){
            hideProc = setTimeout(hide, tm.hideDelay);
        }
    };
    
    var onMove = function(e){
        if(disabled){
            return;
        }
        xy = e.getXY();
        xy[1] += 18;
        if(tm.trackMouse && ce){
            el.setXY(xy);
        }
    };
    
    var onDown = function(e){
        clearTimeout(showProc);
        clearTimeout(hideProc);
        if(!e.within(el)){
            if(tm.hideOnClick){
                hide();
                tm.disable();
                tm.enable.defer(100, tm);
            }
        }
    };
    
    var getPad = function(){
        return 2;//bdLeft.getPadding('l')+bdRight.getPadding('r');
    };

    var show = function(o){
        if(disabled){
            return;
        }
        clearTimeout(dismissProc);
        ce = o;
        if(removeCls){ // in case manually hidden
            el.removeClass(removeCls);
            removeCls = null;
        }
        if(ce.cls){
            el.addClass(ce.cls);
            removeCls = ce.cls;
        }
        if(ce.title){
            tipTitle.update(ce.title);
            tipTitle.show();
        }else{
            tipTitle.update('');
            tipTitle.hide();
        }
        el.dom.style.width  = tm.maxWidth+'px';
        //tipBody.dom.style.width = '';
        tipBodyText.update(o.text);
        var p = getPad(), w = ce.width;
        if(!w){
            var td = tipBodyText.dom;
            var aw = Math.max(td.offsetWidth, td.clientWidth, td.scrollWidth);
            if(aw > tm.maxWidth){
                w = tm.maxWidth;
            }else if(aw < tm.minWidth){
                w = tm.minWidth;
            }else{
                w = aw;
            }
        }
        //tipBody.setWidth(w);
        el.setWidth(parseInt(w, 10) + p);
        if(ce.autoHide === false){
            close.setDisplayed(true);
            if(dd){
                dd.unlock();
            }
        }else{
            close.setDisplayed(false);
            if(dd){
                dd.lock();
            }
        }
        if(xy){
            el.avoidY = xy[1]-18;
            el.setXY(xy);
        }
        if(tm.animate){
            el.setOpacity(.1);
            el.setStyle("visibility", "visible");
            el.fadeIn({callback: afterShow});
        }else{
            afterShow();
        }
    };
    
    var afterShow = function(){
        if(ce){
            el.show();
            esc.enable();
            if(tm.autoDismiss && ce.autoHide !== false){
                dismissProc = setTimeout(hide, tm.autoDismissDelay);
            }
        }
    };
    
    var hide = function(noanim){
        clearTimeout(dismissProc);
        clearTimeout(hideProc);
        ce = null;
        if(el.isVisible()){
            esc.disable();
            if(noanim !== true && tm.animate){
                el.fadeOut({callback: afterHide});
            }else{
                afterHide();
            } 
        }
    };
    
    var afterHide = function(){
        el.hide();
        if(removeCls){
            el.removeClass(removeCls);
            removeCls = null;
        }
    };
    
    return {
        /**
        * @cfg {Number} minWidth
        * The minimum width of the quick tip (defaults to 40)
        */
       minWidth : 40,
        /**
        * @cfg {Number} maxWidth
        * The maximum width of the quick tip (defaults to 300)
        */
       maxWidth : 300,
        /**
        * @cfg {Boolean} interceptTitles
        * True to automatically use the element's DOM title value if available (defaults to false)
        */
       interceptTitles : false,
        /**
        * @cfg {Boolean} trackMouse
        * True to have the quick tip follow the mouse as it moves over the target element (defaults to false)
        */
       trackMouse : false,
        /**
        * @cfg {Boolean} hideOnClick
        * True to hide the quick tip if the user clicks anywhere in the document (defaults to true)
        */
       hideOnClick : true,
        /**
        * @cfg {Number} showDelay
        * Delay in milliseconds before the quick tip displays after the mouse enters the target element (defaults to 500)
        */
       showDelay : 500,
        /**
        * @cfg {Number} hideDelay
        * Delay in milliseconds before the quick tip hides when autoHide = true (defaults to 200)
        */
       hideDelay : 200,
        /**
        * @cfg {Boolean} autoHide
        * True to automatically hide the quick tip after the mouse exits the target element (defaults to true).
        * Used in conjunction with hideDelay.
        */
       autoHide : true,
        /**
        * @cfg {Boolean}
        * True to automatically hide the quick tip after a set period of time, regardless of the user's actions
        * (defaults to true).  Used in conjunction with autoDismissDelay.
        */
       autoDismiss : true,
        /**
        * @cfg {Number}
        * Delay in milliseconds before the quick tip hides when autoDismiss = true (defaults to 5000)
        */
       autoDismissDelay : 5000,
       /**
        * @cfg {Boolean} animate
        * True to turn on fade animation. Defaults to false (ClearType/scrollbar flicker issues in IE7).
        */
       animate : false,

       /**
        * @cfg {String} title
        * Title text to display (defaults to '').  This can be any valid HTML markup.
        */
        title: '',
       /**
        * @cfg {String} text
        * Body text to display (defaults to '').  This can be any valid HTML markup.
        */
        text : '',
       /**
        * @cfg {String} cls
        * A CSS class to apply to the base quick tip element (defaults to '').
        */
        cls : '',
       /**
        * @cfg {Number} width
        * Width in pixels of the quick tip (defaults to auto).  Width will be ignored if it exceeds the bounds of
        * minWidth or maxWidth.
        */
        width : null,

    /**
     * Initialize and enable QuickTips for first use.  This should be called once before the first attempt to access
     * or display QuickTips in a page.
     */
       init : function(){
          tm = Roo.QuickTips;
          cfg = tm.tagConfig;
          if(!inited){
              if(!Roo.isReady){ // allow calling of init() before onReady
                  Roo.onReady(Roo.QuickTips.init, Roo.QuickTips);
                  return;
              }
              el = new Roo.Layer({cls:"x-tip", shadow:"drop", shim: true, constrain:true, shadowOffset:4});
              el.fxDefaults = {stopFx: true};
              // maximum custom styling
              //el.update('<div class="x-tip-top-left"><div class="x-tip-top-right"><div class="x-tip-top"></div></div></div><div class="x-tip-bd-left"><div class="x-tip-bd-right"><div class="x-tip-bd"><div class="x-tip-close"></div><h3></h3><div class="x-tip-bd-inner"></div><div class="x-clear"></div></div></div></div><div class="x-tip-ft-left"><div class="x-tip-ft-right"><div class="x-tip-ft"></div></div></div>');
              el.update('<div class="x-tip-bd"><div class="x-tip-close"></div><h3></h3><div class="x-tip-bd-inner"></div><div class="x-clear"></div></div>');              
              tipTitle = el.child('h3');
              tipTitle.enableDisplayMode("block");
              tipBody = el.child('div.x-tip-bd');
              tipBodyText = el.child('div.x-tip-bd-inner');
              //bdLeft = el.child('div.x-tip-bd-left');
              //bdRight = el.child('div.x-tip-bd-right');
              close = el.child('div.x-tip-close');
              close.enableDisplayMode("block");
              close.on("click", hide);
              var d = Roo.get(document);
              d.on("mousedown", onDown);
              d.on("mouseover", onOver);
              d.on("mouseout", onOut);
              d.on("mousemove", onMove);
              esc = d.addKeyListener(27, hide);
              esc.disable();
              if(Roo.dd.DD){
                  dd = el.initDD("default", null, {
                      onDrag : function(){
                          el.sync();  
                      }
                  });
                  dd.setHandleElId(tipTitle.id);
                  dd.lock();
              }
              inited = true;
          }
          this.enable(); 
       },

    /**
     * Configures a new quick tip instance and assigns it to a target element.  The following config options
     * are supported:
     * <pre>
Property    Type                   Description
----------  ---------------------  ------------------------------------------------------------------------
target      Element/String/Array   An Element, id or array of ids that this quick tip should be tied to
     * </ul>
     * @param {Object} config The config object
     */
       register : function(config){
           var cs = config instanceof Array ? config : arguments;
           for(var i = 0, len = cs.length; i < len; i++) {
               var c = cs[i];
               var target = c.target;
               if(target){
                   if(target instanceof Array){
                       for(var j = 0, jlen = target.length; j < jlen; j++){
                           tagEls[target[j]] = c;
                       }
                   }else{
                       tagEls[typeof target == 'string' ? target : Roo.id(target)] = c;
                   }
               }
           }
       },

    /**
     * Removes this quick tip from its element and destroys it.
     * @param {String/HTMLElement/Element} el The element from which the quick tip is to be removed.
     */
       unregister : function(el){
           delete tagEls[Roo.id(el)];
       },

    /**
     * Enable this quick tip.
     */
       enable : function(){
           if(inited && disabled){
               locks.pop();
               if(locks.length < 1){
                   disabled = false;
               }
           }
       },

    /**
     * Disable this quick tip.
     */
       disable : function(){
          disabled = true;
          clearTimeout(showProc);
          clearTimeout(hideProc);
          clearTimeout(dismissProc);
          if(ce){
              hide(true);
          }
          locks.push(1);
       },

    /**
     * Returns true if the quick tip is enabled, else false.
     */
       isEnabled : function(){
            return !disabled;
       },

        // private
       tagConfig : {
           namespace : "roo", // was ext?? this may break..
           alt_namespace : "ext",
           attribute : "qtip",
           width : "width",
           target : "target",
           title : "qtitle",
           hide : "hide",
           cls : "qclass"
       }
   };
}();

// backwards compat
Roo.QuickTips.tips = Roo.QuickTips.register;/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.tree.TreePanel
 * @extends Roo.data.Tree
 * @cfg {Roo.tree.TreeNode} root The root node
 * @cfg {Boolean} rootVisible false to hide the root node (defaults to true)
 * @cfg {Boolean} lines false to disable tree lines (defaults to true)
 * @cfg {Boolean} enableDD true to enable drag and drop
 * @cfg {Boolean} enableDrag true to enable just drag
 * @cfg {Boolean} enableDrop true to enable just drop
 * @cfg {Object} dragConfig Custom config to pass to the {@link Roo.tree.TreeDragZone} instance
 * @cfg {Object} dropConfig Custom config to pass to the {@link Roo.tree.TreeDropZone} instance
 * @cfg {String} ddGroup The DD group this TreePanel belongs to
 * @cfg {String} ddAppendOnly True if the tree should only allow append drops (use for trees which are sorted)
 * @cfg {Boolean} ddScroll true to enable YUI body scrolling
 * @cfg {Boolean} containerScroll true to register this container with ScrollManager
 * @cfg {Boolean} hlDrop false to disable node highlight on drop (defaults to the value of Roo.enableFx)
 * @cfg {String} hlColor The color of the node highlight (defaults to C3DAF9)
 * @cfg {Boolean} animate true to enable animated expand/collapse (defaults to the value of Roo.enableFx)
 * @cfg {Boolean} singleExpand true if only 1 node per branch may be expanded
 * @cfg {Boolean} selModel A tree selection model to use with this TreePanel (defaults to a {@link Roo.tree.DefaultSelectionModel})
 * @cfg {Roo.tree.TreeLoader} loader A TreeLoader for use with this TreePanel
 * @cfg {Roo.tree.TreeEditor} editor The TreeEditor to display when clicked.
 * @cfg {String} pathSeparator The token used to separate sub-paths in path strings (defaults to '/')
 * @cfg {Function} renderer DEPRECATED - use TreeLoader:create event / Sets the rendering (formatting) function for the nodes. to return HTML markup for the tree view. The render function is called with  the following parameters:<ul><li>The {Object} The data for the node.</li></ul>
 * @cfg {Function} rendererTip DEPRECATED - use TreeLoader:create event / Sets the rendering (formatting) function for the nodes hovertip to return HTML markup for the tree view. The render function is called with  the following parameters:<ul><li>The {Object} The data for the node.</li></ul>
 * 
 * @constructor
 * @param {String/HTMLElement/Element} el The container element
 * @param {Object} config
 */
Roo.tree.TreePanel = function(el, config){
    var root = false;
    var loader = false;
    if (config.root) {
        root = config.root;
        delete config.root;
    }
    if (config.loader) {
        loader = config.loader;
        delete config.loader;
    }
    
    Roo.apply(this, config);
    Roo.tree.TreePanel.superclass.constructor.call(this);
    this.el = Roo.get(el);
    this.el.addClass('x-tree');
    //console.log(root);
    if (root) {
        this.setRootNode( Roo.factory(root, Roo.tree));
    }
    if (loader) {
        this.loader = Roo.factory(loader, Roo.tree);
    }
   /**
    * Read-only. The id of the container element becomes this TreePanel's id.
    */
    this.id = this.el.id;
    this.addEvents({
        /**
        * @event beforeload
        * Fires before a node is loaded, return false to cancel
        * @param {Node} node The node being loaded
        */
        "beforeload" : true,
        /**
        * @event load
        * Fires when a node is loaded
        * @param {Node} node The node that was loaded
        */
        "load" : true,
        /**
        * @event textchange
        * Fires when the text for a node is changed
        * @param {Node} node The node
        * @param {String} text The new text
        * @param {String} oldText The old text
        */
        "textchange" : true,
        /**
        * @event beforeexpand
        * Fires before a node is expanded, return false to cancel.
        * @param {Node} node The node
        * @param {Boolean} deep
        * @param {Boolean} anim
        */
        "beforeexpand" : true,
        /**
        * @event beforecollapse
        * Fires before a node is collapsed, return false to cancel.
        * @param {Node} node The node
        * @param {Boolean} deep
        * @param {Boolean} anim
        */
        "beforecollapse" : true,
        /**
        * @event expand
        * Fires when a node is expanded
        * @param {Node} node The node
        */
        "expand" : true,
        /**
        * @event disabledchange
        * Fires when the disabled status of a node changes
        * @param {Node} node The node
        * @param {Boolean} disabled
        */
        "disabledchange" : true,
        /**
        * @event collapse
        * Fires when a node is collapsed
        * @param {Node} node The node
        */
        "collapse" : true,
        /**
        * @event beforeclick
        * Fires before click processing on a node. Return false to cancel the default action.
        * @param {Node} node The node
        * @param {Roo.EventObject} e The event object
        */
        "beforeclick":true,
        /**
        * @event checkchange
        * Fires when a node with a checkbox's checked property changes
        * @param {Node} this This node
        * @param {Boolean} checked
        */
        "checkchange":true,
        /**
        * @event click
        * Fires when a node is clicked
        * @param {Node} node The node
        * @param {Roo.EventObject} e The event object
        */
        "click":true,
        /**
        * @event dblclick
        * Fires when a node is double clicked
        * @param {Node} node The node
        * @param {Roo.EventObject} e The event object
        */
        "dblclick":true,
        /**
        * @event contextmenu
        * Fires when a node is right clicked
        * @param {Node} node The node
        * @param {Roo.EventObject} e The event object
        */
        "contextmenu":true,
        /**
        * @event beforechildrenrendered
        * Fires right before the child nodes for a node are rendered
        * @param {Node} node The node
        */
        "beforechildrenrendered":true,
        /**
        * @event startdrag
        * Fires when a node starts being dragged
        * @param {Roo.tree.TreePanel} this
        * @param {Roo.tree.TreeNode} node
        * @param {event} e The raw browser event
        */ 
       "startdrag" : true,
       /**
        * @event enddrag
        * Fires when a drag operation is complete
        * @param {Roo.tree.TreePanel} this
        * @param {Roo.tree.TreeNode} node
        * @param {event} e The raw browser event
        */
       "enddrag" : true,
       /**
        * @event dragdrop
        * Fires when a dragged node is dropped on a valid DD target
        * @param {Roo.tree.TreePanel} this
        * @param {Roo.tree.TreeNode} node
        * @param {DD} dd The dd it was dropped on
        * @param {event} e The raw browser event
        */
       "dragdrop" : true,
       /**
        * @event beforenodedrop
        * Fires when a DD object is dropped on a node in this tree for preprocessing. Return false to cancel the drop. The dropEvent
        * passed to handlers has the following properties:<br />
        * <ul style="padding:5px;padding-left:16px;">
        * <li>tree - The TreePanel</li>
        * <li>target - The node being targeted for the drop</li>
        * <li>data - The drag data from the drag source</li>
        * <li>point - The point of the drop - append, above or below</li>
        * <li>source - The drag source</li>
        * <li>rawEvent - Raw mouse event</li>
        * <li>dropNode - Drop node(s) provided by the source <b>OR</b> you can supply node(s)
        * to be inserted by setting them on this object.</li>
        * <li>cancel - Set this to true to cancel the drop.</li>
        * </ul>
        * @param {Object} dropEvent
        */
       "beforenodedrop" : true,
       /**
        * @event nodedrop
        * Fires after a DD object is dropped on a node in this tree. The dropEvent
        * passed to handlers has the following properties:<br />
        * <ul style="padding:5px;padding-left:16px;">
        * <li>tree - The TreePanel</li>
        * <li>target - The node being targeted for the drop</li>
        * <li>data - The drag data from the drag source</li>
        * <li>point - The point of the drop - append, above or below</li>
        * <li>source - The drag source</li>
        * <li>rawEvent - Raw mouse event</li>
        * <li>dropNode - Dropped node(s).</li>
        * </ul>
        * @param {Object} dropEvent
        */
       "nodedrop" : true,
        /**
        * @event nodedragover
        * Fires when a tree node is being targeted for a drag drop, return false to signal drop not allowed. The dragOverEvent
        * passed to handlers has the following properties:<br />
        * <ul style="padding:5px;padding-left:16px;">
        * <li>tree - The TreePanel</li>
        * <li>target - The node being targeted for the drop</li>
        * <li>data - The drag data from the drag source</li>
        * <li>point - The point of the drop - append, above or below</li>
        * <li>source - The drag source</li>
        * <li>rawEvent - Raw mouse event</li>
        * <li>dropNode - Drop node(s) provided by the source.</li>
        * <li>cancel - Set this to true to signal drop not allowed.</li>
        * </ul>
        * @param {Object} dragOverEvent
        */
       "nodedragover" : true,
       /**
        * @event appendnode
        * Fires when append node to the tree
        * @param {Roo.tree.TreePanel} this
        * @param {Roo.tree.TreeNode} node
        * @param {Number} index The index of the newly appended node
        */
       "appendnode" : true
        
    });
    if(this.singleExpand){
       this.on("beforeexpand", this.restrictExpand, this);
    }
    if (this.editor) {
        this.editor.tree = this;
        this.editor = Roo.factory(this.editor, Roo.tree);
    }
    
    if (this.selModel) {
        this.selModel = Roo.factory(this.selModel, Roo.tree);
    }
   
};
Roo.extend(Roo.tree.TreePanel, Roo.data.Tree, {
    rootVisible : true,
    animate: Roo.enableFx,
    lines : true,
    enableDD : false,
    hlDrop : Roo.enableFx,
  
    renderer: false,
    
    rendererTip: false,
    // private
    restrictExpand : function(node){
        var p = node.parentNode;
        if(p){
            if(p.expandedChild && p.expandedChild.parentNode == p){
                p.expandedChild.collapse();
            }
            p.expandedChild = node;
        }
    },

    // private override
    setRootNode : function(node){
        Roo.tree.TreePanel.superclass.setRootNode.call(this, node);
        if(!this.rootVisible){
            node.ui = new Roo.tree.RootTreeNodeUI(node);
        }
        return node;
    },

    /**
     * Returns the container element for this TreePanel
     */
    getEl : function(){
        return this.el;
    },

    /**
     * Returns the default TreeLoader for this TreePanel
     */
    getLoader : function(){
        return this.loader;
    },

    /**
     * Expand all nodes
     */
    expandAll : function(){
        this.root.expand(true);
    },

    /**
     * Collapse all nodes
     */
    collapseAll : function(){
        this.root.collapse(true);
    },

    /**
     * Returns the selection model used by this TreePanel
     */
    getSelectionModel : function(){
        if(!this.selModel){
            this.selModel = new Roo.tree.DefaultSelectionModel();
        }
        return this.selModel;
    },

    /**
     * Retrieve an array of checked nodes, or an array of a specific attribute of checked nodes (e.g. "id")
     * @param {String} attribute (optional) Defaults to null (return the actual nodes)
     * @param {TreeNode} startNode (optional) The node to start from, defaults to the root
     * @return {Array}
     */
    getChecked : function(a, startNode){
        startNode = startNode || this.root;
        var r = [];
        var f = function(){
            if(this.attributes.checked){
                r.push(!a ? this : (a == 'id' ? this.id : this.attributes[a]));
            }
        }
        startNode.cascade(f);
        return r;
    },

    /**
     * Expands a specified path in this TreePanel. A path can be retrieved from a node with {@link Roo.data.Node#getPath}
     * @param {String} path
     * @param {String} attr (optional) The attribute used in the path (see {@link Roo.data.Node#getPath} for more info)
     * @param {Function} callback (optional) The callback to call when the expand is complete. The callback will be called with
     * (bSuccess, oLastNode) where bSuccess is if the expand was successful and oLastNode is the last node that was expanded.
     */
    expandPath : function(path, attr, callback){
        attr = attr || "id";
        var keys = path.split(this.pathSeparator);
        var curNode = this.root;
        if(curNode.attributes[attr] != keys[1]){ // invalid root
            if(callback){
                callback(false, null);
            }
            return;
        }
        var index = 1;
        var f = function(){
            if(++index == keys.length){
                if(callback){
                    callback(true, curNode);
                }
                return;
            }
            var c = curNode.findChild(attr, keys[index]);
            if(!c){
                if(callback){
                    callback(false, curNode);
                }
                return;
            }
            curNode = c;
            c.expand(false, false, f);
        };
        curNode.expand(false, false, f);
    },

    /**
     * Selects the node in this tree at the specified path. A path can be retrieved from a node with {@link Roo.data.Node#getPath}
     * @param {String} path
     * @param {String} attr (optional) The attribute used in the path (see {@link Roo.data.Node#getPath} for more info)
     * @param {Function} callback (optional) The callback to call when the selection is complete. The callback will be called with
     * (bSuccess, oSelNode) where bSuccess is if the selection was successful and oSelNode is the selected node.
     */
    selectPath : function(path, attr, callback){
        attr = attr || "id";
        var keys = path.split(this.pathSeparator);
        var v = keys.pop();
        if(keys.length > 0){
            var f = function(success, node){
                if(success && node){
                    var n = node.findChild(attr, v);
                    if(n){
                        n.select();
                        if(callback){
                            callback(true, n);
                        }
                    }else if(callback){
                        callback(false, n);
                    }
                }else{
                    if(callback){
                        callback(false, n);
                    }
                }
            };
            this.expandPath(keys.join(this.pathSeparator), attr, f);
        }else{
            this.root.select();
            if(callback){
                callback(true, this.root);
            }
        }
    },

    getTreeEl : function(){
        return this.el;
    },

    /**
     * Trigger rendering of this TreePanel
     */
    render : function(){
        if (this.innerCt) {
            return this; // stop it rendering more than once!!
        }
        
        this.innerCt = this.el.createChild({tag:"ul",
               cls:"x-tree-root-ct " +
               (this.lines ? "x-tree-lines" : "x-tree-no-lines")});

        if(this.containerScroll){
            Roo.dd.ScrollManager.register(this.el);
        }
        if((this.enableDD || this.enableDrop) && !this.dropZone){
           /**
            * The dropZone used by this tree if drop is enabled
            * @type Roo.tree.TreeDropZone
            */
             this.dropZone = new Roo.tree.TreeDropZone(this, this.dropConfig || {
               ddGroup: this.ddGroup || "TreeDD", appendOnly: this.ddAppendOnly === true
           });
        }
        if((this.enableDD || this.enableDrag) && !this.dragZone){
           /**
            * The dragZone used by this tree if drag is enabled
            * @type Roo.tree.TreeDragZone
            */
            this.dragZone = new Roo.tree.TreeDragZone(this, this.dragConfig || {
               ddGroup: this.ddGroup || "TreeDD",
               scroll: this.ddScroll
           });
        }
        this.getSelectionModel().init(this);
        if (!this.root) {
            Roo.log("ROOT not set in tree");
            return this;
        }
        this.root.render();
        if(!this.rootVisible){
            this.root.renderChildren();
        }
        return this;
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.tree.DefaultSelectionModel
 * @extends Roo.util.Observable
 * The default single selection for a TreePanel.
 * @param {Object} cfg Configuration
 */
Roo.tree.DefaultSelectionModel = function(cfg){
   this.selNode = null;
   
   
   
   this.addEvents({
       /**
        * @event selectionchange
        * Fires when the selected node changes
        * @param {DefaultSelectionModel} this
        * @param {TreeNode} node the new selection
        */
       "selectionchange" : true,

       /**
        * @event beforeselect
        * Fires before the selected node changes, return false to cancel the change
        * @param {DefaultSelectionModel} this
        * @param {TreeNode} node the new selection
        * @param {TreeNode} node the old selection
        */
       "beforeselect" : true
   });
   
    Roo.tree.DefaultSelectionModel.superclass.constructor.call(this,cfg);
};

Roo.extend(Roo.tree.DefaultSelectionModel, Roo.util.Observable, {
    init : function(tree){
        this.tree = tree;
        tree.getTreeEl().on("keydown", this.onKeyDown, this);
        tree.on("click", this.onNodeClick, this);
    },
    
    onNodeClick : function(node, e){
        if (e.ctrlKey && this.selNode == node)  {
            this.unselect(node);
            return;
        }
        this.select(node);
    },
    
    /**
     * Select a node.
     * @param {TreeNode} node The node to select
     * @return {TreeNode} The selected node
     */
    select : function(node){
        var last = this.selNode;
        if(last != node && this.fireEvent('beforeselect', this, node, last) !== false){
            if(last){
                last.ui.onSelectedChange(false);
            }
            this.selNode = node;
            node.ui.onSelectedChange(true);
            this.fireEvent("selectionchange", this, node, last);
        }
        return node;
    },
    
    /**
     * Deselect a node.
     * @param {TreeNode} node The node to unselect
     */
    unselect : function(node){
        if(this.selNode == node){
            this.clearSelections();
        }    
    },
    
    /**
     * Clear all selections
     */
    clearSelections : function(){
        var n = this.selNode;
        if(n){
            n.ui.onSelectedChange(false);
            this.selNode = null;
            this.fireEvent("selectionchange", this, null);
        }
        return n;
    },
    
    /**
     * Get the selected node
     * @return {TreeNode} The selected node
     */
    getSelectedNode : function(){
        return this.selNode;    
    },
    
    /**
     * Returns true if the node is selected
     * @param {TreeNode} node The node to check
     * @return {Boolean}
     */
    isSelected : function(node){
        return this.selNode == node;  
    },

    /**
     * Selects the node above the selected node in the tree, intelligently walking the nodes
     * @return TreeNode The new selection
     */
    selectPrevious : function(){
        var s = this.selNode || this.lastSelNode;
        if(!s){
            return null;
        }
        var ps = s.previousSibling;
        if(ps){
            if(!ps.isExpanded() || ps.childNodes.length < 1){
                return this.select(ps);
            } else{
                var lc = ps.lastChild;
                while(lc && lc.isExpanded() && lc.childNodes.length > 0){
                    lc = lc.lastChild;
                }
                return this.select(lc);
            }
        } else if(s.parentNode && (this.tree.rootVisible || !s.parentNode.isRoot)){
            return this.select(s.parentNode);
        }
        return null;
    },

    /**
     * Selects the node above the selected node in the tree, intelligently walking the nodes
     * @return TreeNode The new selection
     */
    selectNext : function(){
        var s = this.selNode || this.lastSelNode;
        if(!s){
            return null;
        }
        if(s.firstChild && s.isExpanded()){
             return this.select(s.firstChild);
         }else if(s.nextSibling){
             return this.select(s.nextSibling);
         }else if(s.parentNode){
            var newS = null;
            s.parentNode.bubble(function(){
                if(this.nextSibling){
                    newS = this.getOwnerTree().selModel.select(this.nextSibling);
                    return false;
                }
            });
            return newS;
         }
        return null;
    },

    onKeyDown : function(e){
        var s = this.selNode || this.lastSelNode;
        // undesirable, but required
        var sm = this;
        if(!s){
            return;
        }
        var k = e.getKey();
        switch(k){
             case e.DOWN:
                 e.stopEvent();
                 this.selectNext();
             break;
             case e.UP:
                 e.stopEvent();
                 this.selectPrevious();
             break;
             case e.RIGHT:
                 e.preventDefault();
                 if(s.hasChildNodes()){
                     if(!s.isExpanded()){
                         s.expand();
                     }else if(s.firstChild){
                         this.select(s.firstChild, e);
                     }
                 }
             break;
             case e.LEFT:
                 e.preventDefault();
                 if(s.hasChildNodes() && s.isExpanded()){
                     s.collapse();
                 }else if(s.parentNode && (this.tree.rootVisible || s.parentNode != this.tree.getRootNode())){
                     this.select(s.parentNode, e);
                 }
             break;
        };
    }
});

/**
 * @class Roo.tree.MultiSelectionModel
 * @extends Roo.util.Observable
 * Multi selection for a TreePanel.
 * @param {Object} cfg Configuration
 */
Roo.tree.MultiSelectionModel = function(){
   this.selNodes = [];
   this.selMap = {};
   this.addEvents({
       /**
        * @event selectionchange
        * Fires when the selected nodes change
        * @param {MultiSelectionModel} this
        * @param {Array} nodes Array of the selected nodes
        */
       "selectionchange" : true
   });
   Roo.tree.MultiSelectionModel.superclass.constructor.call(this,cfg);
   
};

Roo.extend(Roo.tree.MultiSelectionModel, Roo.util.Observable, {
    init : function(tree){
        this.tree = tree;
        tree.getTreeEl().on("keydown", this.onKeyDown, this);
        tree.on("click", this.onNodeClick, this);
    },
    
    onNodeClick : function(node, e){
        this.select(node, e, e.ctrlKey);
    },
    
    /**
     * Select a node.
     * @param {TreeNode} node The node to select
     * @param {EventObject} e (optional) An event associated with the selection
     * @param {Boolean} keepExisting True to retain existing selections
     * @return {TreeNode} The selected node
     */
    select : function(node, e, keepExisting){
        if(keepExisting !== true){
            this.clearSelections(true);
        }
        if(this.isSelected(node)){
            this.lastSelNode = node;
            return node;
        }
        this.selNodes.push(node);
        this.selMap[node.id] = node;
        this.lastSelNode = node;
        node.ui.onSelectedChange(true);
        this.fireEvent("selectionchange", this, this.selNodes);
        return node;
    },
    
    /**
     * Deselect a node.
     * @param {TreeNode} node The node to unselect
     */
    unselect : function(node){
        if(this.selMap[node.id]){
            node.ui.onSelectedChange(false);
            var sn = this.selNodes;
            var index = -1;
            if(sn.indexOf){
                index = sn.indexOf(node);
            }else{
                for(var i = 0, len = sn.length; i < len; i++){
                    if(sn[i] == node){
                        index = i;
                        break;
                    }
                }
            }
            if(index != -1){
                this.selNodes.splice(index, 1);
            }
            delete this.selMap[node.id];
            this.fireEvent("selectionchange", this, this.selNodes);
        }
    },
    
    /**
     * Clear all selections
     */
    clearSelections : function(suppressEvent){
        var sn = this.selNodes;
        if(sn.length > 0){
            for(var i = 0, len = sn.length; i < len; i++){
                sn[i].ui.onSelectedChange(false);
            }
            this.selNodes = [];
            this.selMap = {};
            if(suppressEvent !== true){
                this.fireEvent("selectionchange", this, this.selNodes);
            }
        }
    },
    
    /**
     * Returns true if the node is selected
     * @param {TreeNode} node The node to check
     * @return {Boolean}
     */
    isSelected : function(node){
        return this.selMap[node.id] ? true : false;  
    },
    
    /**
     * Returns an array of the selected nodes
     * @return {Array}
     */
    getSelectedNodes : function(){
        return this.selNodes;    
    },

    onKeyDown : Roo.tree.DefaultSelectionModel.prototype.onKeyDown,

    selectNext : Roo.tree.DefaultSelectionModel.prototype.selectNext,

    selectPrevious : Roo.tree.DefaultSelectionModel.prototype.selectPrevious
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.tree.TreeNode
 * @extends Roo.data.Node
 * @cfg {String} text The text for this node
 * @cfg {Boolean} expanded true to start the node expanded
 * @cfg {Boolean} allowDrag false to make this node undraggable if DD is on (defaults to true)
 * @cfg {Boolean} allowDrop false if this node cannot be drop on
 * @cfg {Boolean} disabled true to start the node disabled
 * @cfg {String} icon The path to an icon for the node. The preferred way to do this
 *    is to use the cls or iconCls attributes and add the icon via a CSS background image.
 * @cfg {String} cls A css class to be added to the node
 * @cfg {String} iconCls A css class to be added to the nodes icon element for applying css background images
 * @cfg {String} href URL of the link used for the node (defaults to #)
 * @cfg {String} hrefTarget target frame for the link
 * @cfg {String} qtip An Ext QuickTip for the node
 * @cfg {String} qtipCfg An Ext QuickTip config for the node (used instead of qtip)
 * @cfg {Boolean} singleClickExpand True for single click expand on this node
 * @cfg {Function} uiProvider A UI <b>class</b> to use for this node (defaults to Roo.tree.TreeNodeUI)
 * @cfg {Boolean} checked True to render a checked checkbox for this node, false to render an unchecked checkbox
 * (defaults to undefined with no checkbox rendered)
 * @constructor
 * @param {Object/String} attributes The attributes/config for the node or just a string with the text for the node
 */
Roo.tree.TreeNode = function(attributes){
    attributes = attributes || {};
    if(typeof attributes == "string"){
        attributes = {text: attributes};
    }
    this.childrenRendered = false;
    this.rendered = false;
    Roo.tree.TreeNode.superclass.constructor.call(this, attributes);
    this.expanded = attributes.expanded === true;
    this.isTarget = attributes.isTarget !== false;
    this.draggable = attributes.draggable !== false && attributes.allowDrag !== false;
    this.allowChildren = attributes.allowChildren !== false && attributes.allowDrop !== false;

    /**
     * Read-only. The text for this node. To change it use setText().
     * @type String
     */
    this.text = attributes.text;
    /**
     * True if this node is disabled.
     * @type Boolean
     */
    this.disabled = attributes.disabled === true;

    this.addEvents({
        /**
        * @event textchange
        * Fires when the text for this node is changed
        * @param {Node} this This node
        * @param {String} text The new text
        * @param {String} oldText The old text
        */
        "textchange" : true,
        /**
        * @event beforeexpand
        * Fires before this node is expanded, return false to cancel.
        * @param {Node} this This node
        * @param {Boolean} deep
        * @param {Boolean} anim
        */
        "beforeexpand" : true,
        /**
        * @event beforecollapse
        * Fires before this node is collapsed, return false to cancel.
        * @param {Node} this This node
        * @param {Boolean} deep
        * @param {Boolean} anim
        */
        "beforecollapse" : true,
        /**
        * @event expand
        * Fires when this node is expanded
        * @param {Node} this This node
        */
        "expand" : true,
        /**
        * @event disabledchange
        * Fires when the disabled status of this node changes
        * @param {Node} this This node
        * @param {Boolean} disabled
        */
        "disabledchange" : true,
        /**
        * @event collapse
        * Fires when this node is collapsed
        * @param {Node} this This node
        */
        "collapse" : true,
        /**
        * @event beforeclick
        * Fires before click processing. Return false to cancel the default action.
        * @param {Node} this This node
        * @param {Roo.EventObject} e The event object
        */
        "beforeclick":true,
        /**
        * @event checkchange
        * Fires when a node with a checkbox's checked property changes
        * @param {Node} this This node
        * @param {Boolean} checked
        */
        "checkchange":true,
        /**
        * @event click
        * Fires when this node is clicked
        * @param {Node} this This node
        * @param {Roo.EventObject} e The event object
        */
        "click":true,
        /**
        * @event dblclick
        * Fires when this node is double clicked
        * @param {Node} this This node
        * @param {Roo.EventObject} e The event object
        */
        "dblclick":true,
        /**
        * @event contextmenu
        * Fires when this node is right clicked
        * @param {Node} this This node
        * @param {Roo.EventObject} e The event object
        */
        "contextmenu":true,
        /**
        * @event beforechildrenrendered
        * Fires right before the child nodes for this node are rendered
        * @param {Node} this This node
        */
        "beforechildrenrendered":true
    });

    var uiClass = this.attributes.uiProvider || Roo.tree.TreeNodeUI;

    /**
     * Read-only. The UI for this node
     * @type TreeNodeUI
     */
    this.ui = new uiClass(this);
    
    // finally support items[]
    if (typeof(this.attributes.items) == 'undefined' || !this.attributes.items) {
        return;
    }
    
    
    Roo.each(this.attributes.items, function(c) {
        this.appendChild(Roo.factory(c,Roo.Tree));
    }, this);
    delete this.attributes.items;
    
    
    
};
Roo.extend(Roo.tree.TreeNode, Roo.data.Node, {
    preventHScroll: true,
    /**
     * Returns true if this node is expanded
     * @return {Boolean}
     */
    isExpanded : function(){
        return this.expanded;
    },

    /**
     * Returns the UI object for this node
     * @return {TreeNodeUI}
     */
    getUI : function(){
        return this.ui;
    },

    // private override
    setFirstChild : function(node){
        var of = this.firstChild;
        Roo.tree.TreeNode.superclass.setFirstChild.call(this, node);
        if(this.childrenRendered && of && node != of){
            of.renderIndent(true, true);
        }
        if(this.rendered){
            this.renderIndent(true, true);
        }
    },

    // private override
    setLastChild : function(node){
        var ol = this.lastChild;
        Roo.tree.TreeNode.superclass.setLastChild.call(this, node);
        if(this.childrenRendered && ol && node != ol){
            ol.renderIndent(true, true);
        }
        if(this.rendered){
            this.renderIndent(true, true);
        }
    },

    // these methods are overridden to provide lazy rendering support
    // private override
    appendChild : function()
    {
        var node = Roo.tree.TreeNode.superclass.appendChild.apply(this, arguments);
        if(node && this.childrenRendered){
            node.render();
        }
        this.ui.updateExpandIcon();
        return node;
    },

    // private override
    removeChild : function(node){
        this.ownerTree.getSelectionModel().unselect(node);
        Roo.tree.TreeNode.superclass.removeChild.apply(this, arguments);
        // if it's been rendered remove dom node
        if(this.childrenRendered){
            node.ui.remove();
        }
        if(this.childNodes.length < 1){
            this.collapse(false, false);
        }else{
            this.ui.updateExpandIcon();
        }
        if(!this.firstChild) {
            this.childrenRendered = false;
        }
        return node;
    },

    // private override
    insertBefore : function(node, refNode){
        var newNode = Roo.tree.TreeNode.superclass.insertBefore.apply(this, arguments);
        if(newNode && refNode && this.childrenRendered){
            node.render();
        }
        this.ui.updateExpandIcon();
        return newNode;
    },

    /**
     * Sets the text for this node
     * @param {String} text
     */
    setText : function(text){
        var oldText = this.text;
        this.text = text;
        this.attributes.text = text;
        if(this.rendered){ // event without subscribing
            this.ui.onTextChange(this, text, oldText);
        }
        this.fireEvent("textchange", this, text, oldText);
    },

    /**
     * Triggers selection of this node
     */
    select : function(){
        this.getOwnerTree().getSelectionModel().select(this);
    },

    /**
     * Triggers deselection of this node
     */
    unselect : function(){
        this.getOwnerTree().getSelectionModel().unselect(this);
    },

    /**
     * Returns true if this node is selected
     * @return {Boolean}
     */
    isSelected : function(){
        return this.getOwnerTree().getSelectionModel().isSelected(this);
    },

    /**
     * Expand this node.
     * @param {Boolean} deep (optional) True to expand all children as well
     * @param {Boolean} anim (optional) false to cancel the default animation
     * @param {Function} callback (optional) A callback to be called when
     * expanding this node completes (does not wait for deep expand to complete).
     * Called with 1 parameter, this node.
     */
    expand : function(deep, anim, callback){
        if(!this.expanded){
            if(this.fireEvent("beforeexpand", this, deep, anim) === false){
                return;
            }
            if(!this.childrenRendered){
                this.renderChildren();
            }
            this.expanded = true;
            
            if(!this.isHiddenRoot() && (this.getOwnerTree() && this.getOwnerTree().animate && anim !== false) || anim){
                this.ui.animExpand(function(){
                    this.fireEvent("expand", this);
                    if(typeof callback == "function"){
                        callback(this);
                    }
                    if(deep === true){
                        this.expandChildNodes(true);
                    }
                }.createDelegate(this));
                return;
            }else{
                this.ui.expand();
                this.fireEvent("expand", this);
                if(typeof callback == "function"){
                    callback(this);
                }
            }
        }else{
           if(typeof callback == "function"){
               callback(this);
           }
        }
        if(deep === true){
            this.expandChildNodes(true);
        }
    },

    isHiddenRoot : function(){
        return this.isRoot && !this.getOwnerTree().rootVisible;
    },

    /**
     * Collapse this node.
     * @param {Boolean} deep (optional) True to collapse all children as well
     * @param {Boolean} anim (optional) false to cancel the default animation
     */
    collapse : function(deep, anim){
        if(this.expanded && !this.isHiddenRoot()){
            if(this.fireEvent("beforecollapse", this, deep, anim) === false){
                return;
            }
            this.expanded = false;
            if((this.getOwnerTree().animate && anim !== false) || anim){
                this.ui.animCollapse(function(){
                    this.fireEvent("collapse", this);
                    if(deep === true){
                        this.collapseChildNodes(true);
                    }
                }.createDelegate(this));
                return;
            }else{
                this.ui.collapse();
                this.fireEvent("collapse", this);
            }
        }
        if(deep === true){
            var cs = this.childNodes;
            for(var i = 0, len = cs.length; i < len; i++) {
            	cs[i].collapse(true, false);
            }
        }
    },

    // private
    delayedExpand : function(delay){
        if(!this.expandProcId){
            this.expandProcId = this.expand.defer(delay, this);
        }
    },

    // private
    cancelExpand : function(){
        if(this.expandProcId){
            clearTimeout(this.expandProcId);
        }
        this.expandProcId = false;
    },

    /**
     * Toggles expanded/collapsed state of the node
     */
    toggle : function(){
        if(this.expanded){
            this.collapse();
        }else{
            this.expand();
        }
    },

    /**
     * Ensures all parent nodes are expanded
     */
    ensureVisible : function(callback){
        var tree = this.getOwnerTree();
        tree.expandPath(this.parentNode.getPath(), false, function(){
            tree.getTreeEl().scrollChildIntoView(this.ui.anchor);
            Roo.callback(callback);
        }.createDelegate(this));
    },

    /**
     * Expand all child nodes
     * @param {Boolean} deep (optional) true if the child nodes should also expand their child nodes
     */
    expandChildNodes : function(deep){
        var cs = this.childNodes;
        for(var i = 0, len = cs.length; i < len; i++) {
        	cs[i].expand(deep);
        }
    },

    /**
     * Collapse all child nodes
     * @param {Boolean} deep (optional) true if the child nodes should also collapse their child nodes
     */
    collapseChildNodes : function(deep){
        var cs = this.childNodes;
        for(var i = 0, len = cs.length; i < len; i++) {
        	cs[i].collapse(deep);
        }
    },

    /**
     * Disables this node
     */
    disable : function(){
        this.disabled = true;
        this.unselect();
        if(this.rendered && this.ui.onDisableChange){ // event without subscribing
            this.ui.onDisableChange(this, true);
        }
        this.fireEvent("disabledchange", this, true);
    },

    /**
     * Enables this node
     */
    enable : function(){
        this.disabled = false;
        if(this.rendered && this.ui.onDisableChange){ // event without subscribing
            this.ui.onDisableChange(this, false);
        }
        this.fireEvent("disabledchange", this, false);
    },

    // private
    renderChildren : function(suppressEvent){
        if(suppressEvent !== false){
            this.fireEvent("beforechildrenrendered", this);
        }
        var cs = this.childNodes;
        for(var i = 0, len = cs.length; i < len; i++){
            cs[i].render(true);
        }
        this.childrenRendered = true;
    },

    // private
    sort : function(fn, scope){
        Roo.tree.TreeNode.superclass.sort.apply(this, arguments);
        if(this.childrenRendered){
            var cs = this.childNodes;
            for(var i = 0, len = cs.length; i < len; i++){
                cs[i].render(true);
            }
        }
    },

    // private
    render : function(bulkRender){
        this.ui.render(bulkRender);
        if(!this.rendered){
            this.rendered = true;
            if(this.expanded){
                this.expanded = false;
                this.expand(false, false);
            }
        }
    },

    // private
    renderIndent : function(deep, refresh){
        if(refresh){
            this.ui.childIndent = null;
        }
        this.ui.renderIndent();
        if(deep === true && this.childrenRendered){
            var cs = this.childNodes;
            for(var i = 0, len = cs.length; i < len; i++){
                cs[i].renderIndent(true, refresh);
            }
        }
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.tree.AsyncTreeNode
 * @extends Roo.tree.TreeNode
 * @cfg {TreeLoader} loader A TreeLoader to be used by this node (defaults to the loader defined on the tree)
 * @constructor
 * @param {Object/String} attributes The attributes/config for the node or just a string with the text for the node 
 */
 Roo.tree.AsyncTreeNode = function(config){
    this.loaded = false;
    this.loading = false;
    Roo.tree.AsyncTreeNode.superclass.constructor.apply(this, arguments);
    /**
    * @event beforeload
    * Fires before this node is loaded, return false to cancel
    * @param {Node} this This node
    */
    this.addEvents({'beforeload':true, 'load': true});
    /**
    * @event load
    * Fires when this node is loaded
    * @param {Node} this This node
    */
    /**
     * The loader used by this node (defaults to using the tree's defined loader)
     * @type TreeLoader
     * @property loader
     */
};
Roo.extend(Roo.tree.AsyncTreeNode, Roo.tree.TreeNode, {
    expand : function(deep, anim, callback){
        if(this.loading){ // if an async load is already running, waiting til it's done
            var timer;
            var f = function(){
                if(!this.loading){ // done loading
                    clearInterval(timer);
                    this.expand(deep, anim, callback);
                }
            }.createDelegate(this);
            timer = setInterval(f, 200);
            return;
        }
        if(!this.loaded){
            if(this.fireEvent("beforeload", this) === false){
                return;
            }
            this.loading = true;
            this.ui.beforeLoad(this);
            var loader = this.loader || this.attributes.loader || this.getOwnerTree().getLoader();
            if(loader){
                loader.load(this, this.loadComplete.createDelegate(this, [deep, anim, callback]));
                return;
            }
        }
        Roo.tree.AsyncTreeNode.superclass.expand.call(this, deep, anim, callback);
    },
    
    /**
     * Returns true if this node is currently loading
     * @return {Boolean}
     */
    isLoading : function(){
        return this.loading;  
    },
    
    loadComplete : function(deep, anim, callback){
        this.loading = false;
        this.loaded = true;
        this.ui.afterLoad(this);
        this.fireEvent("load", this);
        this.expand(deep, anim, callback);
    },
    
    /**
     * Returns true if this node has been loaded
     * @return {Boolean}
     */
    isLoaded : function(){
        return this.loaded;
    },
    
    hasChildNodes : function(){
        if(!this.isLeaf() && !this.loaded){
            return true;
        }else{
            return Roo.tree.AsyncTreeNode.superclass.hasChildNodes.call(this);
        }
    },

    /**
     * Trigger a reload for this node
     * @param {Function} callback
     */
    reload : function(callback){
        this.collapse(false, false);
        while(this.firstChild){
            this.removeChild(this.firstChild);
        }
        this.childrenRendered = false;
        this.loaded = false;
        if(this.isHiddenRoot()){
            this.expanded = false;
        }
        this.expand(false, false, callback);
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.tree.TreeNodeUI
 * @constructor
 * @param {Object} node The node to render
 * The TreeNode UI implementation is separate from the
 * tree implementation. Unless you are customizing the tree UI,
 * you should never have to use this directly.
 */
Roo.tree.TreeNodeUI = function(node){
    this.node = node;
    this.rendered = false;
    this.animating = false;
    this.emptyIcon = Roo.BLANK_IMAGE_URL;
};

Roo.tree.TreeNodeUI.prototype = {
    removeChild : function(node){
        if(this.rendered){
            this.ctNode.removeChild(node.ui.getEl());
        }
    },

    beforeLoad : function(){
         this.addClass("x-tree-node-loading");
    },

    afterLoad : function(){
         this.removeClass("x-tree-node-loading");
    },

    onTextChange : function(node, text, oldText){
        if(this.rendered){
            this.textNode.innerHTML = text;
        }
    },

    onDisableChange : function(node, state){
        this.disabled = state;
        if(state){
            this.addClass("x-tree-node-disabled");
        }else{
            this.removeClass("x-tree-node-disabled");
        }
    },

    onSelectedChange : function(state){
        if(state){
            this.focus();
            this.addClass("x-tree-selected");
        }else{
            //this.blur();
            this.removeClass("x-tree-selected");
        }
    },

    onMove : function(tree, node, oldParent, newParent, index, refNode){
        this.childIndent = null;
        if(this.rendered){
            var targetNode = newParent.ui.getContainer();
            if(!targetNode){//target not rendered
                this.holder = document.createElement("div");
                this.holder.appendChild(this.wrap);
                return;
            }
            var insertBefore = refNode ? refNode.ui.getEl() : null;
            if(insertBefore){
                targetNode.insertBefore(this.wrap, insertBefore);
            }else{
                targetNode.appendChild(this.wrap);
            }
            this.node.renderIndent(true);
        }
    },

    addClass : function(cls){
        if(this.elNode){
            Roo.fly(this.elNode).addClass(cls);
        }
    },

    removeClass : function(cls){
        if(this.elNode){
            Roo.fly(this.elNode).removeClass(cls);
        }
    },

    remove : function(){
        if(this.rendered){
            this.holder = document.createElement("div");
            this.holder.appendChild(this.wrap);
        }
    },

    fireEvent : function(){
        return this.node.fireEvent.apply(this.node, arguments);
    },

    initEvents : function(){
        this.node.on("move", this.onMove, this);
        var E = Roo.EventManager;
        var a = this.anchor;

        var el = Roo.fly(a, '_treeui');

        if(Roo.isOpera){ // opera render bug ignores the CSS
            el.setStyle("text-decoration", "none");
        }

        el.on("click", this.onClick, this);
        el.on("dblclick", this.onDblClick, this);

        if(this.checkbox){
            Roo.EventManager.on(this.checkbox,
                    Roo.isIE ? 'click' : 'change', this.onCheckChange, this);
        }

        el.on("contextmenu", this.onContextMenu, this);

        var icon = Roo.fly(this.iconNode);
        icon.on("click", this.onClick, this);
        icon.on("dblclick", this.onDblClick, this);
        icon.on("contextmenu", this.onContextMenu, this);
        E.on(this.ecNode, "click", this.ecClick, this, true);

        if(this.node.disabled){
            this.addClass("x-tree-node-disabled");
        }
        if(this.node.hidden){
            this.addClass("x-tree-node-disabled");
        }
        var ot = this.node.getOwnerTree();
        var dd = ot ? (ot.enableDD || ot.enableDrag || ot.enableDrop) : false;
        if(dd && (!this.node.isRoot || ot.rootVisible)){
            Roo.dd.Registry.register(this.elNode, {
                node: this.node,
                handles: this.getDDHandles(),
                isHandle: false
            });
        }
    },

    getDDHandles : function(){
        return [this.iconNode, this.textNode];
    },

    hide : function(){
        if(this.rendered){
            this.wrap.style.display = "none";
        }
    },

    show : function(){
        if(this.rendered){
            this.wrap.style.display = "";
        }
    },

    onContextMenu : function(e){
        if (this.node.hasListener("contextmenu") || this.node.getOwnerTree().hasListener("contextmenu")) {
            e.preventDefault();
            this.focus();
            this.fireEvent("contextmenu", this.node, e);
        }
    },

    onClick : function(e){
        if(this.dropping){
            e.stopEvent();
            return;
        }
        if(this.fireEvent("beforeclick", this.node, e) !== false){
            if(!this.disabled && this.node.attributes.href){
                this.fireEvent("click", this.node, e);
                return;
            }
            e.preventDefault();
            if(this.disabled){
                return;
            }

            if(this.node.attributes.singleClickExpand && !this.animating && this.node.hasChildNodes()){
                this.node.toggle();
            }

            this.fireEvent("click", this.node, e);
        }else{
            e.stopEvent();
        }
    },

    onDblClick : function(e){
        e.preventDefault();
        if(this.disabled){
            return;
        }
        if(this.checkbox){
            this.toggleCheck();
        }
        if(!this.animating && this.node.hasChildNodes()){
            this.node.toggle();
        }
        this.fireEvent("dblclick", this.node, e);
    },

    onCheckChange : function(){
        var checked = this.checkbox.checked;
        this.node.attributes.checked = checked;
        this.fireEvent('checkchange', this.node, checked);
    },

    ecClick : function(e){
        if(!this.animating && this.node.hasChildNodes()){
            this.node.toggle();
        }
    },

    startDrop : function(){
        this.dropping = true;
    },

    // delayed drop so the click event doesn't get fired on a drop
    endDrop : function(){
       setTimeout(function(){
           this.dropping = false;
       }.createDelegate(this), 50);
    },

    expand : function(){
        this.updateExpandIcon();
        this.ctNode.style.display = "";
    },

    focus : function(){
        if(!this.node.preventHScroll){
            try{this.anchor.focus();
            }catch(e){}
        }else if(!Roo.isIE){
            try{
                var noscroll = this.node.getOwnerTree().getTreeEl().dom;
                var l = noscroll.scrollLeft;
                this.anchor.focus();
                noscroll.scrollLeft = l;
            }catch(e){}
        }
    },

    toggleCheck : function(value){
        var cb = this.checkbox;
        if(cb){
            cb.checked = (value === undefined ? !cb.checked : value);
        }
    },

    blur : function(){
        try{
            this.anchor.blur();
        }catch(e){}
    },

    animExpand : function(callback){
        var ct = Roo.get(this.ctNode);
        ct.stopFx();
        if(!this.node.hasChildNodes()){
            this.updateExpandIcon();
            this.ctNode.style.display = "";
            Roo.callback(callback);
            return;
        }
        this.animating = true;
        this.updateExpandIcon();

        ct.slideIn('t', {
           callback : function(){
               this.animating = false;
               Roo.callback(callback);
            },
            scope: this,
            duration: this.node.ownerTree.duration || .25
        });
    },

    highlight : function(){
        var tree = this.node.getOwnerTree();
        Roo.fly(this.wrap).highlight(
            tree.hlColor || "C3DAF9",
            {endColor: tree.hlBaseColor}
        );
    },

    collapse : function(){
        this.updateExpandIcon();
        this.ctNode.style.display = "none";
    },

    animCollapse : function(callback){
        var ct = Roo.get(this.ctNode);
        ct.enableDisplayMode('block');
        ct.stopFx();

        this.animating = true;
        this.updateExpandIcon();

        ct.slideOut('t', {
            callback : function(){
               this.animating = false;
               Roo.callback(callback);
            },
            scope: this,
            duration: this.node.ownerTree.duration || .25
        });
    },

    getContainer : function(){
        return this.ctNode;
    },

    getEl : function(){
        return this.wrap;
    },

    appendDDGhost : function(ghostNode){
        ghostNode.appendChild(this.elNode.cloneNode(true));
    },

    getDDRepairXY : function(){
        return Roo.lib.Dom.getXY(this.iconNode);
    },

    onRender : function(){
        this.render();
    },

    render : function(bulkRender){
        var n = this.node, a = n.attributes;
        var targetNode = n.parentNode ?
              n.parentNode.ui.getContainer() : n.ownerTree.innerCt.dom;

        if(!this.rendered){
            this.rendered = true;

            this.renderElements(n, a, targetNode, bulkRender);

            if(a.qtip){
               if(this.textNode.setAttributeNS){
                   this.textNode.setAttributeNS("ext", "qtip", a.qtip);
                   if(a.qtipTitle){
                       this.textNode.setAttributeNS("ext", "qtitle", a.qtipTitle);
                   }
               }else{
                   this.textNode.setAttribute("ext:qtip", a.qtip);
                   if(a.qtipTitle){
                       this.textNode.setAttribute("ext:qtitle", a.qtipTitle);
                   }
               }
            }else if(a.qtipCfg){
                a.qtipCfg.target = Roo.id(this.textNode);
                Roo.QuickTips.register(a.qtipCfg);
            }
            this.initEvents();
            if(!this.node.expanded){
                this.updateExpandIcon();
            }
        }else{
            if(bulkRender === true) {
                targetNode.appendChild(this.wrap);
            }
        }
    },

    renderElements : function(n, a, targetNode, bulkRender)
    {
        // add some indent caching, this helps performance when rendering a large tree
        this.indentMarkup = n.parentNode ? n.parentNode.ui.getChildIndent() : '';
        var t = n.getOwnerTree();
        var txt = t && t.renderer ? t.renderer(n.attributes) : Roo.util.Format.htmlEncode(n.text);
        if (typeof(n.attributes.html) != 'undefined') {
            txt = n.attributes.html;
        }
        var tip = t && t.rendererTip ? t.rendererTip(n.attributes) : txt;
        var cb = typeof a.checked == 'boolean';
        var href = a.href ? a.href : Roo.isGecko ? "" : "#";
        var buf = ['<li class="x-tree-node"><div class="x-tree-node-el ', a.cls,'">',
            '<span class="x-tree-node-indent">',this.indentMarkup,"</span>",
            '<img src="', this.emptyIcon, '" class="x-tree-ec-icon" />',
            '<img src="', a.icon || this.emptyIcon, '" class="x-tree-node-icon',(a.icon ? " x-tree-node-inline-icon" : ""),(a.iconCls ? " "+a.iconCls : ""),'" unselectable="on" />',
            cb ? ('<input class="x-tree-node-cb" type="checkbox" ' + (a.checked ? 'checked="checked" />' : ' />')) : '',
            '<a hidefocus="on" href="',href,'" tabIndex="1" ',
             a.hrefTarget ? ' target="'+a.hrefTarget+'"' : "", 
                '><span unselectable="on" qtip="' , tip ,'">',txt,"</span></a></div>",
            '<ul class="x-tree-node-ct" style="display:none;"></ul>',
            "</li>"];

        if(bulkRender !== true && n.nextSibling && n.nextSibling.ui.getEl()){
            this.wrap = Roo.DomHelper.insertHtml("beforeBegin",
                                n.nextSibling.ui.getEl(), buf.join(""));
        }else{
            this.wrap = Roo.DomHelper.insertHtml("beforeEnd", targetNode, buf.join(""));
        }

        this.elNode = this.wrap.childNodes[0];
        this.ctNode = this.wrap.childNodes[1];
        var cs = this.elNode.childNodes;
        this.indentNode = cs[0];
        this.ecNode = cs[1];
        this.iconNode = cs[2];
        var index = 3;
        if(cb){
            this.checkbox = cs[3];
            index++;
        }
        this.anchor = cs[index];
        this.textNode = cs[index].firstChild;
    },

    getAnchor : function(){
        return this.anchor;
    },

    getTextEl : function(){
        return this.textNode;
    },

    getIconEl : function(){
        return this.iconNode;
    },

    isChecked : function(){
        return this.checkbox ? this.checkbox.checked : false;
    },

    updateExpandIcon : function(){
        if(this.rendered){
            var n = this.node, c1, c2;
            var cls = n.isLast() ? "x-tree-elbow-end" : "x-tree-elbow";
            var hasChild = n.hasChildNodes();
            if(hasChild){
                if(n.expanded){
                    cls += "-minus";
                    c1 = "x-tree-node-collapsed";
                    c2 = "x-tree-node-expanded";
                }else{
                    cls += "-plus";
                    c1 = "x-tree-node-expanded";
                    c2 = "x-tree-node-collapsed";
                }
                if(this.wasLeaf){
                    this.removeClass("x-tree-node-leaf");
                    this.wasLeaf = false;
                }
                if(this.c1 != c1 || this.c2 != c2){
                    Roo.fly(this.elNode).replaceClass(c1, c2);
                    this.c1 = c1; this.c2 = c2;
                }
            }else{
                // this changes non-leafs into leafs if they have no children.
                // it's not very rational behaviour..
                
                if(!this.wasLeaf && this.node.leaf){
                    Roo.fly(this.elNode).replaceClass("x-tree-node-expanded", "x-tree-node-leaf");
                    delete this.c1;
                    delete this.c2;
                    this.wasLeaf = true;
                }
            }
            var ecc = "x-tree-ec-icon "+cls;
            if(this.ecc != ecc){
                this.ecNode.className = ecc;
                this.ecc = ecc;
            }
        }
    },

    getChildIndent : function(){
        if(!this.childIndent){
            var buf = [];
            var p = this.node;
            while(p){
                if(!p.isRoot || (p.isRoot && p.ownerTree.rootVisible)){
                    if(!p.isLast()) {
                        buf.unshift('<img src="'+this.emptyIcon+'" class="x-tree-elbow-line" />');
                    } else {
                        buf.unshift('<img src="'+this.emptyIcon+'" class="x-tree-icon" />');
                    }
                }
                p = p.parentNode;
            }
            this.childIndent = buf.join("");
        }
        return this.childIndent;
    },

    renderIndent : function(){
        if(this.rendered){
            var indent = "";
            var p = this.node.parentNode;
            if(p){
                indent = p.ui.getChildIndent();
            }
            if(this.indentMarkup != indent){ // don't rerender if not required
                this.indentNode.innerHTML = indent;
                this.indentMarkup = indent;
            }
            this.updateExpandIcon();
        }
    }
};

Roo.tree.RootTreeNodeUI = function(){
    Roo.tree.RootTreeNodeUI.superclass.constructor.apply(this, arguments);
};
Roo.extend(Roo.tree.RootTreeNodeUI, Roo.tree.TreeNodeUI, {
    render : function(){
        if(!this.rendered){
            var targetNode = this.node.ownerTree.innerCt.dom;
            this.node.expanded = true;
            targetNode.innerHTML = '<div class="x-tree-root-node"></div>';
            this.wrap = this.ctNode = targetNode.firstChild;
        }
    },
    collapse : function(){
    },
    expand : function(){
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.tree.TreeLoader
 * @extends Roo.util.Observable
 * A TreeLoader provides for lazy loading of an {@link Roo.tree.TreeNode}'s child
 * nodes from a specified URL. The response must be a javascript Array definition
 * who's elements are node definition objects. eg:
 * <pre><code>
{  success : true,
   data :      [
   
    { 'id': 1, 'text': 'A folder Node', 'leaf': false },
    { 'id': 2, 'text': 'A leaf Node', 'leaf': true }
    ]
}


</code></pre>
 * <br><br>
 * The old style respose with just an array is still supported, but not recommended.
 * <br><br>
 *
 * A server request is sent, and child nodes are loaded only when a node is expanded.
 * The loading node's id is passed to the server under the parameter name "node" to
 * enable the server to produce the correct child nodes.
 * <br><br>
 * To pass extra parameters, an event handler may be attached to the "beforeload"
 * event, and the parameters specified in the TreeLoader's baseParams property:
 * <pre><code>
    myTreeLoader.on("beforeload", function(treeLoader, node) {
        this.baseParams.category = node.attributes.category;
    }, this);
    
</code></pre>
 *
 * This would pass an HTTP parameter called "category" to the server containing
 * the value of the Node's "category" attribute.
 * @constructor
 * Creates a new Treeloader.
 * @param {Object} config A config object containing config properties.
 */
Roo.tree.TreeLoader = function(config){
    this.baseParams = {};
    this.requestMethod = "POST";
    Roo.apply(this, config);

    this.addEvents({
    
        /**
         * @event beforeload
         * Fires before a network request is made to retrieve the Json text which specifies a node's children.
         * @param {Object} This TreeLoader object.
         * @param {Object} node The {@link Roo.tree.TreeNode} object being loaded.
         * @param {Object} callback The callback function specified in the {@link #load} call.
         */
        beforeload : true,
        /**
         * @event load
         * Fires when the node has been successfuly loaded.
         * @param {Object} This TreeLoader object.
         * @param {Object} node The {@link Roo.tree.TreeNode} object being loaded.
         * @param {Object} response The response object containing the data from the server.
         */
        load : true,
        /**
         * @event loadexception
         * Fires if the network request failed.
         * @param {Object} This TreeLoader object.
         * @param {Object} node The {@link Roo.tree.TreeNode} object being loaded.
         * @param {Object} response The response object containing the data from the server.
         */
        loadexception : true,
        /**
         * @event create
         * Fires before a node is created, enabling you to return custom Node types 
         * @param {Object} This TreeLoader object.
         * @param {Object} attr - the data returned from the AJAX call (modify it to suit)
         */
        create : true
    });

    Roo.tree.TreeLoader.superclass.constructor.call(this);
};

Roo.extend(Roo.tree.TreeLoader, Roo.util.Observable, {
    /**
    * @cfg {String} dataUrl The URL from which to request a Json string which
    * specifies an array of node definition object representing the child nodes
    * to be loaded.
    */
    /**
    * @cfg {String} requestMethod either GET or POST
    * defaults to POST (due to BC)
    * to be loaded.
    */
    /**
    * @cfg {Object} baseParams (optional) An object containing properties which
    * specify HTTP parameters to be passed to each request for child nodes.
    */
    /**
    * @cfg {Object} baseAttrs (optional) An object containing attributes to be added to all nodes
    * created by this loader. If the attributes sent by the server have an attribute in this object,
    * they take priority.
    */
    /**
    * @cfg {Object} uiProviders (optional) An object containing properties which
    * 
    * DEPRECATED - use 'create' event handler to modify attributes - which affect creation.
    * specify custom {@link Roo.tree.TreeNodeUI} implementations. If the optional
    * <i>uiProvider</i> attribute of a returned child node is a string rather
    * than a reference to a TreeNodeUI implementation, this that string value
    * is used as a property name in the uiProviders object. You can define the provider named
    * 'default' , and this will be used for all nodes (if no uiProvider is delivered by the node data)
    */
    uiProviders : {},

    /**
    * @cfg {Boolean} clearOnLoad (optional) Default to true. Remove previously existing
    * child nodes before loading.
    */
    clearOnLoad : true,

    /**
    * @cfg {String} root (optional) Default to false. Use this to read data from an object 
    * property on loading, rather than expecting an array. (eg. more compatible to a standard
    * Grid query { data : [ .....] }
    */
    
    root : false,
     /**
    * @cfg {String} queryParam (optional) 
    * Name of the query as it will be passed on the querystring (defaults to 'node')
    * eg. the request will be ?node=[id]
    */
    
    
    queryParam: false,
    
    /**
     * Load an {@link Roo.tree.TreeNode} from the URL specified in the constructor.
     * This is called automatically when a node is expanded, but may be used to reload
     * a node (or append new children if the {@link #clearOnLoad} option is false.)
     * @param {Roo.tree.TreeNode} node
     * @param {Function} callback
     */
    load : function(node, callback){
        if(this.clearOnLoad){
            while(node.firstChild){
                node.removeChild(node.firstChild);
            }
        }
        if(node.attributes.children){ // preloaded json children
            var cs = node.attributes.children;
            for(var i = 0, len = cs.length; i < len; i++){
                node.appendChild(this.createNode(cs[i]));
            }
            if(typeof callback == "function"){
                callback();
            }
        }else if(this.dataUrl){
            this.requestData(node, callback);
        }
    },

    getParams: function(node){
        var buf = [], bp = this.baseParams;
        for(var key in bp){
            if(typeof bp[key] != "function"){
                buf.push(encodeURIComponent(key), "=", encodeURIComponent(bp[key]), "&");
            }
        }
        var n = this.queryParam === false ? 'node' : this.queryParam;
        buf.push(n + "=", encodeURIComponent(node.id));
        return buf.join("");
    },

    requestData : function(node, callback){
        if(this.fireEvent("beforeload", this, node, callback) !== false){
            this.transId = Roo.Ajax.request({
                method:this.requestMethod,
                url: this.dataUrl||this.url,
                success: this.handleResponse,
                failure: this.handleFailure,
                scope: this,
                argument: {callback: callback, node: node},
                params: this.getParams(node)
            });
        }else{
            // if the load is cancelled, make sure we notify
            // the node that we are done
            if(typeof callback == "function"){
                callback();
            }
        }
    },

    isLoading : function(){
        return this.transId ? true : false;
    },

    abort : function(){
        if(this.isLoading()){
            Roo.Ajax.abort(this.transId);
        }
    },

    // private
    createNode : function(attr)
    {
        // apply baseAttrs, nice idea Corey!
        if(this.baseAttrs){
            Roo.applyIf(attr, this.baseAttrs);
        }
        if(this.applyLoader !== false){
            attr.loader = this;
        }
        // uiProvider = depreciated..
        
        if(typeof(attr.uiProvider) == 'string'){
           attr.uiProvider = this.uiProviders[attr.uiProvider] || 
                /**  eval:var:attr */ eval(attr.uiProvider);
        }
        if(typeof(this.uiProviders['default']) != 'undefined') {
            attr.uiProvider = this.uiProviders['default'];
        }
        
        this.fireEvent('create', this, attr);
        
        attr.leaf  = typeof(attr.leaf) == 'string' ? attr.leaf * 1 : attr.leaf;
        return(attr.leaf ?
                        new Roo.tree.TreeNode(attr) :
                        new Roo.tree.AsyncTreeNode(attr));
    },

    processResponse : function(response, node, callback)
    {
        var json = response.responseText;
        try {
            
            var o = Roo.decode(json);
            
            if (this.root === false && typeof(o.success) != undefined) {
                this.root = 'data'; // the default behaviour for list like data..
                }
                
            if (this.root !== false &&  !o.success) {
                // it's a failure condition.
                var a = response.argument;
                this.fireEvent("loadexception", this, a.node, response);
                Roo.log("Load failed - should have a handler really");
                return;
            }
            
            
            
            if (this.root !== false) {
                 o = o[this.root];
            }
            
            for(var i = 0, len = o.length; i < len; i++){
                var n = this.createNode(o[i]);
                if(n){
                    node.appendChild(n);
                }
            }
            if(typeof callback == "function"){
                callback(this, node);
            }
        }catch(e){
            this.handleFailure(response);
        }
    },

    handleResponse : function(response){
        this.transId = false;
        var a = response.argument;
        this.processResponse(response, a.node, a.callback);
        this.fireEvent("load", this, a.node, response);
    },

    handleFailure : function(response)
    {
        // should handle failure better..
        this.transId = false;
        var a = response.argument;
        this.fireEvent("loadexception", this, a.node, response);
        if(typeof a.callback == "function"){
            a.callback(this, a.node);
        }
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
* @class Roo.tree.TreeFilter
* Note this class is experimental and doesn't update the indent (lines) or expand collapse icons of the nodes
* @param {TreePanel} tree
* @param {Object} config (optional)
 */
Roo.tree.TreeFilter = function(tree, config){
    this.tree = tree;
    this.filtered = {};
    Roo.apply(this, config);
};

Roo.tree.TreeFilter.prototype = {
    clearBlank:false,
    reverse:false,
    autoClear:false,
    remove:false,

     /**
     * Filter the data by a specific attribute.
     * @param {String/RegExp} value Either string that the attribute value
     * should start with or a RegExp to test against the attribute
     * @param {String} attr (optional) The attribute passed in your node's attributes collection. Defaults to "text".
     * @param {TreeNode} startNode (optional) The node to start the filter at.
     */
    filter : function(value, attr, startNode){
        attr = attr || "text";
        var f;
        if(typeof value == "string"){
            var vlen = value.length;
            // auto clear empty filter
            if(vlen == 0 && this.clearBlank){
                this.clear();
                return;
            }
            value = value.toLowerCase();
            f = function(n){
                return n.attributes[attr].substr(0, vlen).toLowerCase() == value;
            };
        }else if(value.exec){ // regex?
            f = function(n){
                return value.test(n.attributes[attr]);
            };
        }else{
            throw 'Illegal filter type, must be string or regex';
        }
        this.filterBy(f, null, startNode);
	},

    /**
     * Filter by a function. The passed function will be called with each
     * node in the tree (or from the startNode). If the function returns true, the node is kept
     * otherwise it is filtered. If a node is filtered, its children are also filtered.
     * @param {Function} fn The filter function
     * @param {Object} scope (optional) The scope of the function (defaults to the current node)
     */
    filterBy : function(fn, scope, startNode){
        startNode = startNode || this.tree.root;
        if(this.autoClear){
            this.clear();
        }
        var af = this.filtered, rv = this.reverse;
        var f = function(n){
            if(n == startNode){
                return true;
            }
            if(af[n.id]){
                return false;
            }
            var m = fn.call(scope || n, n);
            if(!m || rv){
                af[n.id] = n;
                n.ui.hide();
                return false;
            }
            return true;
        };
        startNode.cascade(f);
        if(this.remove){
           for(var id in af){
               if(typeof id != "function"){
                   var n = af[id];
                   if(n && n.parentNode){
                       n.parentNode.removeChild(n);
                   }
               }
           }
        }
    },

    /**
     * Clears the current filter. Note: with the "remove" option
     * set a filter cannot be cleared.
     */
    clear : function(){
        var t = this.tree;
        var af = this.filtered;
        for(var id in af){
            if(typeof id != "function"){
                var n = af[id];
                if(n){
                    n.ui.show();
                }
            }
        }
        this.filtered = {};
    }
};
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.tree.TreeSorter
 * Provides sorting of nodes in a TreePanel
 * 
 * @cfg {Boolean} folderSort True to sort leaf nodes under non leaf nodes
 * @cfg {String} property The named attribute on the node to sort by (defaults to text)
 * @cfg {String} dir The direction to sort (asc or desc) (defaults to asc)
 * @cfg {String} leafAttr The attribute used to determine leaf nodes in folder sort (defaults to "leaf")
 * @cfg {Boolean} caseSensitive true for case sensitive sort (defaults to false)
 * @cfg {Function} sortType A custom "casting" function used to convert node values before sorting
 * @constructor
 * @param {TreePanel} tree
 * @param {Object} config
 */
Roo.tree.TreeSorter = function(tree, config){
    Roo.apply(this, config);
    tree.on("beforechildrenrendered", this.doSort, this);
    tree.on("append", this.updateSort, this);
    tree.on("insert", this.updateSort, this);
    
    var dsc = this.dir && this.dir.toLowerCase() == "desc";
    var p = this.property || "text";
    var sortType = this.sortType;
    var fs = this.folderSort;
    var cs = this.caseSensitive === true;
    var leafAttr = this.leafAttr || 'leaf';

    this.sortFn = function(n1, n2){
        if(fs){
            if(n1.attributes[leafAttr] && !n2.attributes[leafAttr]){
                return 1;
            }
            if(!n1.attributes[leafAttr] && n2.attributes[leafAttr]){
                return -1;
            }
        }
    	var v1 = sortType ? sortType(n1) : (cs ? n1.attributes[p] : n1.attributes[p].toUpperCase());
    	var v2 = sortType ? sortType(n2) : (cs ? n2.attributes[p] : n2.attributes[p].toUpperCase());
    	if(v1 < v2){
			return dsc ? +1 : -1;
		}else if(v1 > v2){
			return dsc ? -1 : +1;
        }else{
	    	return 0;
        }
    };
};

Roo.tree.TreeSorter.prototype = {
    doSort : function(node){
        node.sort(this.sortFn);
    },
    
    compareNodes : function(n1, n2){
        return (n1.text.toUpperCase() > n2.text.toUpperCase() ? 1 : -1);
    },
    
    updateSort : function(tree, node){
        if(node.childrenRendered){
            this.doSort.defer(1, this, [node]);
        }
    }
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

if(Roo.dd.DropZone){
    
Roo.tree.TreeDropZone = function(tree, config){
    this.allowParentInsert = false;
    this.allowContainerDrop = false;
    this.appendOnly = false;
    Roo.tree.TreeDropZone.superclass.constructor.call(this, tree.innerCt, config);
    this.tree = tree;
    this.lastInsertClass = "x-tree-no-status";
    this.dragOverData = {};
};

Roo.extend(Roo.tree.TreeDropZone, Roo.dd.DropZone, {
    ddGroup : "TreeDD",
    scroll:  true,
    
    expandDelay : 1000,
    
    expandNode : function(node){
        if(node.hasChildNodes() && !node.isExpanded()){
            node.expand(false, null, this.triggerCacheRefresh.createDelegate(this));
        }
    },
    
    queueExpand : function(node){
        this.expandProcId = this.expandNode.defer(this.expandDelay, this, [node]);
    },
    
    cancelExpand : function(){
        if(this.expandProcId){
            clearTimeout(this.expandProcId);
            this.expandProcId = false;
        }
    },
    
    isValidDropPoint : function(n, pt, dd, e, data){
        if(!n || !data){ return false; }
        var targetNode = n.node;
        var dropNode = data.node;
        // default drop rules
        if(!(targetNode && targetNode.isTarget && pt)){
            return false;
        }
        if(pt == "append" && targetNode.allowChildren === false){
            return false;
        }
        if((pt == "above" || pt == "below") && (targetNode.parentNode && targetNode.parentNode.allowChildren === false)){
            return false;
        }
        if(dropNode && (targetNode == dropNode || dropNode.contains(targetNode))){
            return false;
        }
        // reuse the object
        var overEvent = this.dragOverData;
        overEvent.tree = this.tree;
        overEvent.target = targetNode;
        overEvent.data = data;
        overEvent.point = pt;
        overEvent.source = dd;
        overEvent.rawEvent = e;
        overEvent.dropNode = dropNode;
        overEvent.cancel = false;  
        var result = this.tree.fireEvent("nodedragover", overEvent);
        return overEvent.cancel === false && result !== false;
    },
    
    getDropPoint : function(e, n, dd)
    {
        var tn = n.node;
        if(tn.isRoot){
            return tn.allowChildren !== false ? "append" : false; // always append for root
        }
        var dragEl = n.ddel;
        var t = Roo.lib.Dom.getY(dragEl), b = t + dragEl.offsetHeight;
        var y = Roo.lib.Event.getPageY(e);
        //var noAppend = tn.allowChildren === false || tn.isLeaf();
        
        // we may drop nodes anywhere, as long as allowChildren has not been set to false..
        var noAppend = tn.allowChildren === false;
        if(this.appendOnly || tn.parentNode.allowChildren === false){
            return noAppend ? false : "append";
        }
        var noBelow = false;
        if(!this.allowParentInsert){
            noBelow = tn.hasChildNodes() && tn.isExpanded();
        }
        var q = (b - t) / (noAppend ? 2 : 3);
        if(y >= t && y < (t + q)){
            return "above";
        }else if(!noBelow && (noAppend || y >= b-q && y <= b)){
            return "below";
        }else{
            return "append";
        }
    },
    
    onNodeEnter : function(n, dd, e, data)
    {
        this.cancelExpand();
    },
    
    onNodeOver : function(n, dd, e, data)
    {
       
        var pt = this.getDropPoint(e, n, dd);
        var node = n.node;
        
        // auto node expand check
        if(!this.expandProcId && pt == "append" && node.hasChildNodes() && !n.node.isExpanded()){
            this.queueExpand(node);
        }else if(pt != "append"){
            this.cancelExpand();
        }
        
        // set the insert point style on the target node
        var returnCls = this.dropNotAllowed;
        if(this.isValidDropPoint(n, pt, dd, e, data)){
           if(pt){
               var el = n.ddel;
               var cls;
               if(pt == "above"){
                   returnCls = n.node.isFirst() ? "x-tree-drop-ok-above" : "x-tree-drop-ok-between";
                   cls = "x-tree-drag-insert-above";
               }else if(pt == "below"){
                   returnCls = n.node.isLast() ? "x-tree-drop-ok-below" : "x-tree-drop-ok-between";
                   cls = "x-tree-drag-insert-below";
               }else{
                   returnCls = "x-tree-drop-ok-append";
                   cls = "x-tree-drag-append";
               }
               if(this.lastInsertClass != cls){
                   Roo.fly(el).replaceClass(this.lastInsertClass, cls);
                   this.lastInsertClass = cls;
               }
           }
       }
       return returnCls;
    },
    
    onNodeOut : function(n, dd, e, data){
        
        this.cancelExpand();
        this.removeDropIndicators(n);
    },
    
    onNodeDrop : function(n, dd, e, data){
        var point = this.getDropPoint(e, n, dd);
        var targetNode = n.node;
        targetNode.ui.startDrop();
        if(!this.isValidDropPoint(n, point, dd, e, data)){
            targetNode.ui.endDrop();
            return false;
        }
        // first try to find the drop node
        var dropNode = data.node || (dd.getTreeNode ? dd.getTreeNode(data, targetNode, point, e) : null);
        var dropEvent = {
            tree : this.tree,
            target: targetNode,
            data: data,
            point: point,
            source: dd,
            rawEvent: e,
            dropNode: dropNode,
            cancel: !dropNode   
        };
        var retval = this.tree.fireEvent("beforenodedrop", dropEvent);
        if(retval === false || dropEvent.cancel === true || !dropEvent.dropNode){
            targetNode.ui.endDrop();
            return false;
        }
        // allow target changing
        targetNode = dropEvent.target;
        if(point == "append" && !targetNode.isExpanded()){
            targetNode.expand(false, null, function(){
                this.completeDrop(dropEvent);
            }.createDelegate(this));
        }else{
            this.completeDrop(dropEvent);
        }
        return true;
    },
    
    completeDrop : function(de){
        var ns = de.dropNode, p = de.point, t = de.target;
        if(!(ns instanceof Array)){
            ns = [ns];
        }
        var n;
        for(var i = 0, len = ns.length; i < len; i++){
            n = ns[i];
            if(p == "above"){
                t.parentNode.insertBefore(n, t);
            }else if(p == "below"){
                t.parentNode.insertBefore(n, t.nextSibling);
            }else{
                t.appendChild(n);
            }
        }
        n.ui.focus();
        if(this.tree.hlDrop){
            n.ui.highlight();
        }
        t.ui.endDrop();
        this.tree.fireEvent("nodedrop", de);
    },
    
    afterNodeMoved : function(dd, data, e, targetNode, dropNode){
        if(this.tree.hlDrop){
            dropNode.ui.focus();
            dropNode.ui.highlight();
        }
        this.tree.fireEvent("nodedrop", this.tree, targetNode, data, dd, e);
    },
    
    getTree : function(){
        return this.tree;
    },
    
    removeDropIndicators : function(n){
        if(n && n.ddel){
            var el = n.ddel;
            Roo.fly(el).removeClass([
                    "x-tree-drag-insert-above",
                    "x-tree-drag-insert-below",
                    "x-tree-drag-append"]);
            this.lastInsertClass = "_noclass";
        }
    },
    
    beforeDragDrop : function(target, e, id){
        this.cancelExpand();
        return true;
    },
    
    afterRepair : function(data){
        if(data && Roo.enableFx){
            data.node.ui.highlight();
        }
        this.hideProxy();
    } 
    
});

}
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

if(Roo.dd.DragZone){
Roo.tree.TreeDragZone = function(tree, config){
    Roo.tree.TreeDragZone.superclass.constructor.call(this, tree.getTreeEl(), config);
    this.tree = tree;
};

Roo.extend(Roo.tree.TreeDragZone, Roo.dd.DragZone, {
    ddGroup : "TreeDD",
   
    onBeforeDrag : function(data, e){
        var n = data.node;
        return n && n.draggable && !n.disabled;
    },
     
    
    onInitDrag : function(e){
        var data = this.dragData;
        this.tree.getSelectionModel().select(data.node);
        this.proxy.update("");
        data.node.ui.appendDDGhost(this.proxy.ghost.dom);
        this.tree.fireEvent("startdrag", this.tree, data.node, e);
    },
    
    getRepairXY : function(e, data){
        return data.node.ui.getDDRepairXY();
    },
    
    onEndDrag : function(data, e){
        this.tree.fireEvent("enddrag", this.tree, data.node, e);
        
        
    },
    
    onValidDrop : function(dd, e, id){
        this.tree.fireEvent("dragdrop", this.tree, this.dragData.node, dd, e);
        this.hideProxy();
    },
    
    beforeInvalidDrop : function(e, id){
        // this scrolls the original position back into view
        var sm = this.tree.getSelectionModel();
        sm.clearSelections();
        sm.select(this.dragData.node);
    }
});
}/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.tree.TreeEditor
 * @extends Roo.Editor
 * Provides editor functionality for inline tree node editing.  Any valid {@link Roo.form.Field} can be used
 * as the editor field.
 * @constructor
 * @param {Object} config (used to be the tree panel.)
 * @param {Object} oldconfig DEPRECIATED Either a prebuilt {@link Roo.form.Field} instance or a Field config object
 * 
 * @cfg {Roo.tree.TreePanel} tree The tree to bind to.
 * @cfg {Roo.form.TextField} field [required] The field configuration
 *
 * 
 */
Roo.tree.TreeEditor = function(config, oldconfig) { // was -- (tree, config){
    var tree = config;
    var field;
    if (oldconfig) { // old style..
        field = oldconfig.events ? oldconfig : new Roo.form.TextField(oldconfig);
    } else {
        // new style..
        tree = config.tree;
        config.field = config.field  || {};
        config.field.xtype = 'TextField';
        field = Roo.factory(config.field, Roo.form);
    }
    config = config || {};
    
    
    this.addEvents({
        /**
         * @event beforenodeedit
         * Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning
         * false from the handler of this event.
         * @param {Editor} this
         * @param {Roo.tree.Node} node 
         */
        "beforenodeedit" : true
    });
    
    //Roo.log(config);
    Roo.tree.TreeEditor.superclass.constructor.call(this, field, config);

    this.tree = tree;

    tree.on('beforeclick', this.beforeNodeClick, this);
    tree.getTreeEl().on('mousedown', this.hide, this);
    this.on('complete', this.updateNode, this);
    this.on('beforestartedit', this.fitToTree, this);
    this.on('startedit', this.bindScroll, this, {delay:10});
    this.on('specialkey', this.onSpecialKey, this);
};

Roo.extend(Roo.tree.TreeEditor, Roo.Editor, {
    /**
     * @cfg {String} alignment
     * The position to align to (see {@link Roo.Element#alignTo} for more details, defaults to "l-l").
     */
    alignment: "l-l",
    // inherit
    autoSize: false,
    /**
     * @cfg {Boolean} hideEl
     * True to hide the bound element while the editor is displayed (defaults to false)
     */
    hideEl : false,
    /**
     * @cfg {String} cls
     * CSS class to apply to the editor (defaults to "x-small-editor x-tree-editor")
     */
    cls: "x-small-editor x-tree-editor",
    /**
     * @cfg {Boolean} shim
     * True to shim the editor if selects/iframes could be displayed beneath it (defaults to false)
     */
    shim:false,
    // inherit
    shadow:"frame",
    /**
     * @cfg {Number} maxWidth
     * The maximum width in pixels of the editor field (defaults to 250).  Note that if the maxWidth would exceed
     * the containing tree element's size, it will be automatically limited for you to the container width, taking
     * scroll and client offsets into account prior to each edit.
     */
    maxWidth: 250,

    editDelay : 350,

    // private
    fitToTree : function(ed, el){
        var td = this.tree.getTreeEl().dom, nd = el.dom;
        if(td.scrollLeft >  nd.offsetLeft){ // ensure the node left point is visible
            td.scrollLeft = nd.offsetLeft;
        }
        var w = Math.min(
                this.maxWidth,
                (td.clientWidth > 20 ? td.clientWidth : td.offsetWidth) - Math.max(0, nd.offsetLeft-td.scrollLeft) - /*cushion*/5);
        this.setSize(w, '');
        
        return this.fireEvent('beforenodeedit', this, this.editNode);
        
    },

    // private
    triggerEdit : function(node){
        this.completeEdit();
        this.editNode = node;
        this.startEdit(node.ui.textNode, node.text);
    },

    // private
    bindScroll : function(){
        this.tree.getTreeEl().on('scroll', this.cancelEdit, this);
    },

    // private
    beforeNodeClick : function(node, e){
        var sinceLast = (this.lastClick ? this.lastClick.getElapsed() : 0);
        this.lastClick = new Date();
        if(sinceLast > this.editDelay && this.tree.getSelectionModel().isSelected(node)){
            e.stopEvent();
            this.triggerEdit(node);
            return false;
        }
        return true;
    },

    // private
    updateNode : function(ed, value){
        this.tree.getTreeEl().un('scroll', this.cancelEdit, this);
        this.editNode.setText(value);
    },

    // private
    onHide : function(){
        Roo.tree.TreeEditor.superclass.onHide.call(this);
        if(this.editNode){
            this.editNode.ui.focus();
        }
    },

    // private
    onSpecialKey : function(field, e){
        var k = e.getKey();
        if(k == e.ESC){
            e.stopEvent();
            this.cancelEdit();
        }else if(k == e.ENTER && !e.hasModifier()){
            e.stopEvent();
            this.completeEdit();
        }
    }
});//<Script type="text/javascript">
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * Not documented??? - probably should be...
 */

Roo.tree.ColumnNodeUI = Roo.extend(Roo.tree.TreeNodeUI, {
    //focus: Roo.emptyFn, // prevent odd scrolling behavior
    
    renderElements : function(n, a, targetNode, bulkRender){
        //consel.log("renderElements?");
        this.indentMarkup = n.parentNode ? n.parentNode.ui.getChildIndent() : '';

        var t = n.getOwnerTree();
        var tid = Pman.Tab.Document_TypesTree.tree.el.id;
        
        var cols = t.columns;
        var bw = t.borderWidth;
        var c = cols[0];
        var href = a.href ? a.href : Roo.isGecko ? "" : "#";
         var cb = typeof a.checked == "boolean";
        var tx = String.format('{0}',n.text || (c.renderer ? c.renderer(a[c.dataIndex], n, a) : a[c.dataIndex]));
        var colcls = 'x-t-' + tid + '-c0';
        var buf = [
            '<li class="x-tree-node">',
            
                
                '<div class="x-tree-node-el ', a.cls,'">',
                    // extran...
                    '<div class="x-tree-col ', colcls, '" style="width:', c.width-bw, 'px;">',
                
                
                        '<span class="x-tree-node-indent">',this.indentMarkup,'</span>',
                        '<img src="', this.emptyIcon, '" class="x-tree-ec-icon  " />',
                        '<img src="', a.icon || this.emptyIcon, '" class="x-tree-node-icon',
                           (a.icon ? ' x-tree-node-inline-icon' : ''),
                           (a.iconCls ? ' '+a.iconCls : ''),
                           '" unselectable="on" />',
                        (cb ? ('<input class="x-tree-node-cb" type="checkbox" ' + 
                             (a.checked ? 'checked="checked" />' : ' />')) : ''),
                             
                        '<a class="x-tree-node-anchor" hidefocus="on" href="',href,'" tabIndex="1" ',
                            (a.hrefTarget ? ' target="' +a.hrefTarget + '"' : ''), '>',
                            '<span unselectable="on" qtip="' + tx + '">',
                             tx,
                             '</span></a>' ,
                    '</div>',
                     '<a class="x-tree-node-anchor" hidefocus="on" href="',href,'" tabIndex="1" ',
                            (a.hrefTarget ? ' target="' +a.hrefTarget + '"' : ''), '>'
                 ];
        for(var i = 1, len = cols.length; i < len; i++){
            c = cols[i];
            colcls = 'x-t-' + tid + '-c' +i;
            tx = String.format('{0}', (c.renderer ? c.renderer(a[c.dataIndex], n, a) : a[c.dataIndex]));
            buf.push('<div class="x-tree-col ', colcls, ' ' ,(c.cls?c.cls:''),'" style="width:',c.width-bw,'px;">',
                        '<div class="x-tree-col-text" qtip="' + tx +'">',tx,"</div>",
                      "</div>");
         }
         
         buf.push(
            '</a>',
            '<div class="x-clear"></div></div>',
            '<ul class="x-tree-node-ct" style="display:none;"></ul>',
            "</li>");
        
        if(bulkRender !== true && n.nextSibling && n.nextSibling.ui.getEl()){
            this.wrap = Roo.DomHelper.insertHtml("beforeBegin",
                                n.nextSibling.ui.getEl(), buf.join(""));
        }else{
            this.wrap = Roo.DomHelper.insertHtml("beforeEnd", targetNode, buf.join(""));
        }
        var el = this.wrap.firstChild;
        this.elRow = el;
        this.elNode = el.firstChild;
        this.ranchor = el.childNodes[1];
        this.ctNode = this.wrap.childNodes[1];
        var cs = el.firstChild.childNodes;
        this.indentNode = cs[0];
        this.ecNode = cs[1];
        this.iconNode = cs[2];
        var index = 3;
        if(cb){
            this.checkbox = cs[3];
            index++;
        }
        this.anchor = cs[index];
        
        this.textNode = cs[index].firstChild;
        
        //el.on("click", this.onClick, this);
        //el.on("dblclick", this.onDblClick, this);
        
        
       // console.log(this);
    },
    initEvents : function(){
        Roo.tree.ColumnNodeUI.superclass.initEvents.call(this);
        
            
        var a = this.ranchor;

        var el = Roo.get(a);

        if(Roo.isOpera){ // opera render bug ignores the CSS
            el.setStyle("text-decoration", "none");
        }

        el.on("click", this.onClick, this);
        el.on("dblclick", this.onDblClick, this);
        el.on("contextmenu", this.onContextMenu, this);
        
    },
    
    /*onSelectedChange : function(state){
        if(state){
            this.focus();
            this.addClass("x-tree-selected");
        }else{
            //this.blur();
            this.removeClass("x-tree-selected");
        }
    },*/
    addClass : function(cls){
        if(this.elRow){
            Roo.fly(this.elRow).addClass(cls);
        }
        
    },
    
    
    removeClass : function(cls){
        if(this.elRow){
            Roo.fly(this.elRow).removeClass(cls);
        }
    }

    
    
});//<Script type="text/javascript">

/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.tree.ColumnTree
 * @extends Roo.tree.TreePanel
 * @cfg {Object} columns  Including width, header, renderer, cls, dataIndex 
 * @cfg {int} borderWidth  compined right/left border allowance
 * @constructor
 * @param {String/HTMLElement/Element} el The container element
 * @param {Object} config
 */
Roo.tree.ColumnTree =  function(el, config)
{
   Roo.tree.ColumnTree.superclass.constructor.call(this, el , config);
   this.addEvents({
        /**
        * @event resize
        * Fire this event on a container when it resizes
        * @param {int} w Width
        * @param {int} h Height
        */
       "resize" : true
    });
    this.on('resize', this.onResize, this);
};

Roo.extend(Roo.tree.ColumnTree, Roo.tree.TreePanel, {
    //lines:false,
    
    
    borderWidth: Roo.isBorderBox ? 0 : 2, 
    headEls : false,
    
    render : function(){
        // add the header.....
       
        Roo.tree.ColumnTree.superclass.render.apply(this);
        
        this.el.addClass('x-column-tree');
        
        this.headers = this.el.createChild(
            {cls:'x-tree-headers'},this.innerCt.dom);
   
        var cols = this.columns, c;
        var totalWidth = 0;
        this.headEls = [];
        var  len = cols.length;
        for(var i = 0; i < len; i++){
             c = cols[i];
             totalWidth += c.width;
            this.headEls.push(this.headers.createChild({
                 cls:'x-tree-hd ' + (c.cls?c.cls+'-hd':''),
                 cn: {
                     cls:'x-tree-hd-text',
                     html: c.header
                 },
                 style:'width:'+(c.width-this.borderWidth)+'px;'
             }));
        }
        this.headers.createChild({cls:'x-clear'});
        // prevent floats from wrapping when clipped
        this.headers.setWidth(totalWidth);
        //this.innerCt.setWidth(totalWidth);
        this.innerCt.setStyle({ overflow: 'auto' });
        this.onResize(this.width, this.height);
             
        
    },
    onResize : function(w,h)
    {
        this.height = h;
        this.width = w;
        // resize cols..
        this.innerCt.setWidth(this.width);
        this.innerCt.setHeight(this.height-20);
        
        // headers...
        var cols = this.columns, c;
        var totalWidth = 0;
        var expEl = false;
        var len = cols.length;
        for(var i = 0; i < len; i++){
            c = cols[i];
            if (this.autoExpandColumn !== false && c.dataIndex == this.autoExpandColumn) {
                // it's the expander..
                expEl  = this.headEls[i];
                continue;
            }
            totalWidth += c.width;
            
        }
        if (expEl) {
            expEl.setWidth(  ((w - totalWidth)-this.borderWidth - 20));
        }
        this.headers.setWidth(w-20);

        
        
        
    }
});
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.menu.Menu
 * @extends Roo.util.Observable
 * @children Roo.menu.Item Roo.menu.Separator Roo.menu.TextItem
 * A menu object.  This is the container to which you add all other menu items.  Menu can also serve a as a base class
 * when you want a specialzed menu based off of another component (like {@link Roo.menu.DateMenu} for example).
 * @constructor
 * Creates a new Menu
 * @param {Object} config Configuration options
 */
Roo.menu.Menu = function(config){
    
    Roo.menu.Menu.superclass.constructor.call(this, config);
    
    this.id = this.id || Roo.id();
    this.addEvents({
        /**
         * @event beforeshow
         * Fires before this menu is displayed
         * @param {Roo.menu.Menu} this
         */
        beforeshow : true,
        /**
         * @event beforehide
         * Fires before this menu is hidden
         * @param {Roo.menu.Menu} this
         */
        beforehide : true,
        /**
         * @event show
         * Fires after this menu is displayed
         * @param {Roo.menu.Menu} this
         */
        show : true,
        /**
         * @event hide
         * Fires after this menu is hidden
         * @param {Roo.menu.Menu} this
         */
        hide : true,
        /**
         * @event click
         * Fires when this menu is clicked (or when the enter key is pressed while it is active)
         * @param {Roo.menu.Menu} this
         * @param {Roo.menu.Item} menuItem The menu item that was clicked
         * @param {Roo.EventObject} e
         */
        click : true,
        /**
         * @event mouseover
         * Fires when the mouse is hovering over this menu
         * @param {Roo.menu.Menu} this
         * @param {Roo.EventObject} e
         * @param {Roo.menu.Item} menuItem The menu item that was clicked
         */
        mouseover : true,
        /**
         * @event mouseout
         * Fires when the mouse exits this menu
         * @param {Roo.menu.Menu} this
         * @param {Roo.EventObject} e
         * @param {Roo.menu.Item} menuItem The menu item that was clicked
         */
        mouseout : true,
        /**
         * @event itemclick
         * Fires when a menu item contained in this menu is clicked
         * @param {Roo.menu.BaseItem} baseItem The BaseItem that was clicked
         * @param {Roo.EventObject} e
         */
        itemclick: true
    });
    if (this.registerMenu) {
        Roo.menu.MenuMgr.register(this);
    }
    
    var mis = this.items;
    this.items = new Roo.util.MixedCollection();
    if(mis){
        this.add.apply(this, mis);
    }
};

Roo.extend(Roo.menu.Menu, Roo.util.Observable, {
    /**
     * @cfg {Number} minWidth The minimum width of the menu in pixels (defaults to 120)
     */
    minWidth : 120,
    /**
     * @cfg {Boolean/String} shadow True or "sides" for the default effect, "frame" for 4-way shadow, and "drop"
     * for bottom-right shadow (defaults to "sides")
     */
    shadow : "sides",
    /**
     * @cfg {String} subMenuAlign The {@link Roo.Element#alignTo} anchor position value to use for submenus of
     * this menu (defaults to "tl-tr?")
     */
    subMenuAlign : "tl-tr?",
    /**
     * @cfg {String} defaultAlign The default {@link Roo.Element#alignTo) anchor position value for this menu
     * relative to its element of origin (defaults to "tl-bl?")
     */
    defaultAlign : "tl-bl?",
    /**
     * @cfg {Boolean} allowOtherMenus True to allow multiple menus to be displayed at the same time (defaults to false)
     */
    allowOtherMenus : false,
    /**
     * @cfg {Boolean} registerMenu True (default) - means that clicking on screen etc. hides it.
     */
    registerMenu : true,

    hidden:true,

    // private
    render : function(){
        if(this.el){
            return;
        }
        var el = this.el = new Roo.Layer({
            cls: "x-menu",
            shadow:this.shadow,
            constrain: false,
            parentEl: this.parentEl || document.body,
            zindex:15000
        });

        this.keyNav = new Roo.menu.MenuNav(this);

        if(this.plain){
            el.addClass("x-menu-plain");
        }
        if(this.cls){
            el.addClass(this.cls);
        }
        // generic focus element
        this.focusEl = el.createChild({
            tag: "a", cls: "x-menu-focus", href: "#", onclick: "return false;", tabIndex:"-1"
        });
        var ul = el.createChild({tag: "ul", cls: "x-menu-list"});
        //disabling touch- as it's causing issues ..
        //ul.on(Roo.isTouch ? 'touchstart' : 'click'   , this.onClick, this);
        ul.on('click'   , this.onClick, this);
        
        
        ul.on("mouseover", this.onMouseOver, this);
        ul.on("mouseout", this.onMouseOut, this);
        this.items.each(function(item){
            if (item.hidden) {
                return;
            }
            
            var li = document.createElement("li");
            li.className = "x-menu-list-item";
            ul.dom.appendChild(li);
            item.render(li, this);
        }, this);
        this.ul = ul;
        this.autoWidth();
    },

    // private
    autoWidth : function(){
        var el = this.el, ul = this.ul;
        if(!el){
            return;
        }
        var w = this.width;
        if(w){
            el.setWidth(w);
        }else if(Roo.isIE){
            el.setWidth(this.minWidth);
            var t = el.dom.offsetWidth; // force recalc
            el.setWidth(ul.getWidth()+el.getFrameWidth("lr"));
        }
    },

    // private
    delayAutoWidth : function(){
        if(this.rendered){
            if(!this.awTask){
                this.awTask = new Roo.util.DelayedTask(this.autoWidth, this);
            }
            this.awTask.delay(20);
        }
    },

    // private
    findTargetItem : function(e){
        var t = e.getTarget(".x-menu-list-item", this.ul,  true);
        if(t && t.menuItemId){
            return this.items.get(t.menuItemId);
        }
    },

    // private
    onClick : function(e){
        Roo.log("menu.onClick");
        var t = this.findTargetItem(e);
        if(!t){
            return;
        }
        Roo.log(e);
        if (Roo.isTouch && e.type == 'touchstart' && t.menu  && !t.disabled) {
            if(t == this.activeItem && t.shouldDeactivate(e)){
                this.activeItem.deactivate();
                delete this.activeItem;
                return;
            }
            if(t.canActivate){
                this.setActiveItem(t, true);
            }
            return;
            
            
        }
        
        t.onClick(e);
        this.fireEvent("click", this, t, e);
    },

    // private
    setActiveItem : function(item, autoExpand){
        if(item != this.activeItem){
            if(this.activeItem){
                this.activeItem.deactivate();
            }
            this.activeItem = item;
            item.activate(autoExpand);
        }else if(autoExpand){
            item.expandMenu();
        }
    },

    // private
    tryActivate : function(start, step){
        var items = this.items;
        for(var i = start, len = items.length; i >= 0 && i < len; i+= step){
            var item = items.get(i);
            if(!item.disabled && item.canActivate){
                this.setActiveItem(item, false);
                return item;
            }
        }
        return false;
    },

    // private
    onMouseOver : function(e){
        var t;
        if(t = this.findTargetItem(e)){
            if(t.canActivate && !t.disabled){
                this.setActiveItem(t, true);
            }
        }
        this.fireEvent("mouseover", this, e, t);
    },

    // private
    onMouseOut : function(e){
        var t;
        if(t = this.findTargetItem(e)){
            if(t == this.activeItem && t.shouldDeactivate(e)){
                this.activeItem.deactivate();
                delete this.activeItem;
            }
        }
        this.fireEvent("mouseout", this, e, t);
    },

    /**
     * Read-only.  Returns true if the menu is currently displayed, else false.
     * @type Boolean
     */
    isVisible : function(){
        return this.el && !this.hidden;
    },

    /**
     * Displays this menu relative to another element
     * @param {String/HTMLElement/Roo.Element} element The element to align to
     * @param {String} position (optional) The {@link Roo.Element#alignTo} anchor position to use in aligning to
     * the element (defaults to this.defaultAlign)
     * @param {Roo.menu.Menu} parentMenu (optional) This menu's parent menu, if applicable (defaults to undefined)
     */
    show : function(el, pos, parentMenu){
        this.parentMenu = parentMenu;
        if(!this.el){
            this.render();
        }
        this.fireEvent("beforeshow", this);
        this.showAt(this.el.getAlignToXY(el, pos || this.defaultAlign), parentMenu, false);
    },

    /**
     * Displays this menu at a specific xy position
     * @param {Array} xyPosition Contains X & Y [x, y] values for the position at which to show the menu (coordinates are page-based)
     * @param {Roo.menu.Menu} parentMenu (optional) This menu's parent menu, if applicable (defaults to undefined)
     */
    showAt : function(xy, parentMenu, /* private: */_e){
        this.parentMenu = parentMenu;
        if(!this.el){
            this.render();
        }
        if(_e !== false){
            this.fireEvent("beforeshow", this);
            xy = this.el.adjustForConstraints(xy);
        }
        this.el.setXY(xy);
        this.el.show();
        this.hidden = false;
        this.focus();
        this.fireEvent("show", this);
    },

    focus : function(){
        if(!this.hidden){
            this.doFocus.defer(50, this);
        }
    },

    doFocus : function(){
        if(!this.hidden){
            this.focusEl.focus();
        }
    },

    /**
     * Hides this menu and optionally all parent menus
     * @param {Boolean} deep (optional) True to hide all parent menus recursively, if any (defaults to false)
     */
    hide : function(deep){
        if(this.el && this.isVisible()){
            this.fireEvent("beforehide", this);
            if(this.activeItem){
                this.activeItem.deactivate();
                this.activeItem = null;
            }
            this.el.hide();
            this.hidden = true;
            this.fireEvent("hide", this);
        }
        if(deep === true && this.parentMenu){
            this.parentMenu.hide(true);
        }
    },

    /**
     * Addds one or more items of any type supported by the Menu class, or that can be converted into menu items.
     * Any of the following are valid:
     * <ul>
     * <li>Any menu item object based on {@link Roo.menu.Item}</li>
     * <li>An HTMLElement object which will be converted to a menu item</li>
     * <li>A menu item config object that will be created as a new menu item</li>
     * <li>A string, which can either be '-' or 'separator' to add a menu separator, otherwise
     * it will be converted into a {@link Roo.menu.TextItem} and added</li>
     * </ul>
     * Usage:
     * <pre><code>
// Create the menu
var menu = new Roo.menu.Menu();

// Create a menu item to add by reference
var menuItem = new Roo.menu.Item({ text: 'New Item!' });

// Add a bunch of items at once using different methods.
// Only the last item added will be returned.
var item = menu.add(
    menuItem,                // add existing item by ref
    'Dynamic Item',          // new TextItem
    '-',                     // new separator
    { text: 'Config Item' }  // new item by config
);
</code></pre>
     * @param {Mixed} args One or more menu items, menu item configs or other objects that can be converted to menu items
     * @return {Roo.menu.Item} The menu item that was added, or the last one if multiple items were added
     */
    add : function(){
        var a = arguments, l = a.length, item;
        for(var i = 0; i < l; i++){
            var el = a[i];
            if ((typeof(el) == "object") && el.xtype && el.xns) {
                el = Roo.factory(el, Roo.menu);
            }
            
            if(el.render){ // some kind of Item
                item = this.addItem(el);
            }else if(typeof el == "string"){ // string
                if(el == "separator" || el == "-"){
                    item = this.addSeparator();
                }else{
                    item = this.addText(el);
                }
            }else if(el.tagName || el.el){ // element
                item = this.addElement(el);
            }else if(typeof el == "object"){ // must be menu item config?
                item = this.addMenuItem(el);
            }
        }
        return item;
    },

    /**
     * Returns this menu's underlying {@link Roo.Element} object
     * @return {Roo.Element} The element
     */
    getEl : function(){
        if(!this.el){
            this.render();
        }
        return this.el;
    },

    /**
     * Adds a separator bar to the menu
     * @return {Roo.menu.Item} The menu item that was added
     */
    addSeparator : function(){
        return this.addItem(new Roo.menu.Separator());
    },

    /**
     * Adds an {@link Roo.Element} object to the menu
     * @param {String/HTMLElement/Roo.Element} el The element or DOM node to add, or its id
     * @return {Roo.menu.Item} The menu item that was added
     */
    addElement : function(el){
        return this.addItem(new Roo.menu.BaseItem(el));
    },

    /**
     * Adds an existing object based on {@link Roo.menu.Item} to the menu
     * @param {Roo.menu.Item} item The menu item to add
     * @return {Roo.menu.Item} The menu item that was added
     */
    addItem : function(item){
        this.items.add(item);
        if(this.ul){
            var li = document.createElement("li");
            li.className = "x-menu-list-item";
            this.ul.dom.appendChild(li);
            item.render(li, this);
            this.delayAutoWidth();
        }
        return item;
    },

    /**
     * Creates a new {@link Roo.menu.Item} based an the supplied config object and adds it to the menu
     * @param {Object} config A MenuItem config object
     * @return {Roo.menu.Item} The menu item that was added
     */
    addMenuItem : function(config){
        if(!(config instanceof Roo.menu.Item)){
            if(typeof config.checked == "boolean"){ // must be check menu item config?
                config = new Roo.menu.CheckItem(config);
            }else{
                config = new Roo.menu.Item(config);
            }
        }
        return this.addItem(config);
    },

    /**
     * Creates a new {@link Roo.menu.TextItem} with the supplied text and adds it to the menu
     * @param {String} text The text to display in the menu item
     * @return {Roo.menu.Item} The menu item that was added
     */
    addText : function(text){
        return this.addItem(new Roo.menu.TextItem({ text : text }));
    },

    /**
     * Inserts an existing object based on {@link Roo.menu.Item} to the menu at a specified index
     * @param {Number} index The index in the menu's list of current items where the new item should be inserted
     * @param {Roo.menu.Item} item The menu item to add
     * @return {Roo.menu.Item} The menu item that was added
     */
    insert : function(index, item){
        this.items.insert(index, item);
        if(this.ul){
            var li = document.createElement("li");
            li.className = "x-menu-list-item";
            this.ul.dom.insertBefore(li, this.ul.dom.childNodes[index]);
            item.render(li, this);
            this.delayAutoWidth();
        }
        return item;
    },

    /**
     * Removes an {@link Roo.menu.Item} from the menu and destroys the object
     * @param {Roo.menu.Item} item The menu item to remove
     */
    remove : function(item){
        this.items.removeKey(item.id);
        item.destroy();
    },

    /**
     * Removes and destroys all items in the menu
     */
    removeAll : function(){
        var f;
        while(f = this.items.first()){
            this.remove(f);
        }
    }
});

// MenuNav is a private utility class used internally by the Menu
Roo.menu.MenuNav = function(menu){
    Roo.menu.MenuNav.superclass.constructor.call(this, menu.el);
    this.scope = this.menu = menu;
};

Roo.extend(Roo.menu.MenuNav, Roo.KeyNav, {
    doRelay : function(e, h){
        var k = e.getKey();
        if(!this.menu.activeItem && e.isNavKeyPress() && k != e.SPACE && k != e.RETURN){
            this.menu.tryActivate(0, 1);
            return false;
        }
        return h.call(this.scope || this, e, this.menu);
    },

    up : function(e, m){
        if(!m.tryActivate(m.items.indexOf(m.activeItem)-1, -1)){
            m.tryActivate(m.items.length-1, -1);
        }
    },

    down : function(e, m){
        if(!m.tryActivate(m.items.indexOf(m.activeItem)+1, 1)){
            m.tryActivate(0, 1);
        }
    },

    right : function(e, m){
        if(m.activeItem){
            m.activeItem.expandMenu(true);
        }
    },

    left : function(e, m){
        m.hide();
        if(m.parentMenu && m.parentMenu.activeItem){
            m.parentMenu.activeItem.activate();
        }
    },

    enter : function(e, m){
        if(m.activeItem){
            e.stopPropagation();
            m.activeItem.onClick(e);
            m.fireEvent("click", this, m.activeItem);
            return true;
        }
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.menu.MenuMgr
 * Provides a common registry of all menu items on a page so that they can be easily accessed by id.
 * @static
 */
Roo.menu.MenuMgr = function(){
   var menus, active, groups = {}, attached = false, lastShow = new Date();

   // private - called when first menu is created
   function init(){
       menus = {};
       active = new Roo.util.MixedCollection();
       Roo.get(document).addKeyListener(27, function(){
           if(active.length > 0){
               hideAll();
           }
       });
   }

   // private
   function hideAll(){
       if(active && active.length > 0){
           var c = active.clone();
           c.each(function(m){
               m.hide();
           });
       }
   }

   // private
   function onHide(m){
       active.remove(m);
       if(active.length < 1){
           Roo.get(document).un("mousedown", onMouseDown);
           attached = false;
       }
   }

   // private
   function onShow(m){
       var last = active.last();
       lastShow = new Date();
       active.add(m);
       if(!attached){
           Roo.get(document).on("mousedown", onMouseDown);
           attached = true;
       }
       if(m.parentMenu){
          m.getEl().setZIndex(parseInt(m.parentMenu.getEl().getStyle("z-index"), 10) + 3);
          m.parentMenu.activeChild = m;
       }else if(last && last.isVisible()){
          m.getEl().setZIndex(parseInt(last.getEl().getStyle("z-index"), 10) + 3);
       }
   }

   // private
   function onBeforeHide(m){
       if(m.activeChild){
           m.activeChild.hide();
       }
       if(m.autoHideTimer){
           clearTimeout(m.autoHideTimer);
           delete m.autoHideTimer;
       }
   }

   // private
   function onBeforeShow(m){
       var pm = m.parentMenu;
       if(!pm && !m.allowOtherMenus){
           hideAll();
       }else if(pm && pm.activeChild && active != m){
           pm.activeChild.hide();
       }
   }

   // private
   function onMouseDown(e){
       if(lastShow.getElapsed() > 50 && active.length > 0 && !e.getTarget(".x-menu")){
           hideAll();
       }
   }

   // private
   function onBeforeCheck(mi, state){
       if(state){
           var g = groups[mi.group];
           for(var i = 0, l = g.length; i < l; i++){
               if(g[i] != mi){
                   g[i].setChecked(false);
               }
           }
       }
   }

   return {

       /**
        * Hides all menus that are currently visible
        */
       hideAll : function(){
            hideAll();  
       },

       // private
       register : function(menu){
           if(!menus){
               init();
           }
           menus[menu.id] = menu;
           menu.on("beforehide", onBeforeHide);
           menu.on("hide", onHide);
           menu.on("beforeshow", onBeforeShow);
           menu.on("show", onShow);
           var g = menu.group;
           if(g && menu.events["checkchange"]){
               if(!groups[g]){
                   groups[g] = [];
               }
               groups[g].push(menu);
               menu.on("checkchange", onCheck);
           }
       },

        /**
         * Returns a {@link Roo.menu.Menu} object
         * @param {String/Object} menu The string menu id, an existing menu object reference, or a Menu config that will
         * be used to generate and return a new Menu instance.
         */
       get : function(menu){
           if(typeof menu == "string"){ // menu id
               return menus[menu];
           }else if(menu.events){  // menu instance
               return menu;
           }else if(typeof menu.length == 'number'){ // array of menu items?
               return new Roo.menu.Menu({items:menu});
           }else{ // otherwise, must be a config
               return new Roo.menu.Menu(menu);
           }
       },

       // private
       unregister : function(menu){
           delete menus[menu.id];
           menu.un("beforehide", onBeforeHide);
           menu.un("hide", onHide);
           menu.un("beforeshow", onBeforeShow);
           menu.un("show", onShow);
           var g = menu.group;
           if(g && menu.events["checkchange"]){
               groups[g].remove(menu);
               menu.un("checkchange", onCheck);
           }
       },

       // private
       registerCheckable : function(menuItem){
           var g = menuItem.group;
           if(g){
               if(!groups[g]){
                   groups[g] = [];
               }
               groups[g].push(menuItem);
               menuItem.on("beforecheckchange", onBeforeCheck);
           }
       },

       // private
       unregisterCheckable : function(menuItem){
           var g = menuItem.group;
           if(g){
               groups[g].remove(menuItem);
               menuItem.un("beforecheckchange", onBeforeCheck);
           }
       }
   };
}();/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.menu.BaseItem
 * @extends Roo.Component
 * @abstract
 * The base class for all items that render into menus.  BaseItem provides default rendering, activated state
 * management and base configuration options shared by all menu components.
 * @constructor
 * Creates a new BaseItem
 * @param {Object} config Configuration options
 */
Roo.menu.BaseItem = function(config){
    Roo.menu.BaseItem.superclass.constructor.call(this, config);

    this.addEvents({
        /**
         * @event click
         * Fires when this item is clicked
         * @param {Roo.menu.BaseItem} this
         * @param {Roo.EventObject} e
         */
        click: true,
        /**
         * @event activate
         * Fires when this item is activated
         * @param {Roo.menu.BaseItem} this
         */
        activate : true,
        /**
         * @event deactivate
         * Fires when this item is deactivated
         * @param {Roo.menu.BaseItem} this
         */
        deactivate : true
    });

    if(this.handler){
        this.on("click", this.handler, this.scope, true);
    }
};

Roo.extend(Roo.menu.BaseItem, Roo.Component, {
    /**
     * @cfg {Function} handler
     * A function that will handle the click event of this menu item (defaults to undefined)
     */
    /**
     * @cfg {Boolean} canActivate True if this item can be visually activated (defaults to false)
     */
    canActivate : false,
    
     /**
     * @cfg {Boolean} hidden True to prevent creation of this menu item (defaults to false)
     */
    hidden: false,
    
    /**
     * @cfg {String} activeClass The CSS class to use when the item becomes activated (defaults to "x-menu-item-active")
     */
    activeClass : "x-menu-item-active",
    /**
     * @cfg {Boolean} hideOnClick True to hide the containing menu after this item is clicked (defaults to true)
     */
    hideOnClick : true,
    /**
     * @cfg {Number} hideDelay Length of time in milliseconds to wait before hiding after a click (defaults to 100)
     */
    hideDelay : 100,

    // private
    ctype: "Roo.menu.BaseItem",

    // private
    actionMode : "container",

    // private
    render : function(container, parentMenu){
        this.parentMenu = parentMenu;
        Roo.menu.BaseItem.superclass.render.call(this, container);
        this.container.menuItemId = this.id;
    },

    // private
    onRender : function(container, position){
        this.el = Roo.get(this.el);
        container.dom.appendChild(this.el.dom);
    },

    // private
    onClick : function(e){
        if(!this.disabled && this.fireEvent("click", this, e) !== false
                && this.parentMenu.fireEvent("itemclick", this, e) !== false){
            this.handleClick(e);
        }else{
            e.stopEvent();
        }
    },

    // private
    activate : function(){
        if(this.disabled){
            return false;
        }
        var li = this.container;
        li.addClass(this.activeClass);
        this.region = li.getRegion().adjust(2, 2, -2, -2);
        this.fireEvent("activate", this);
        return true;
    },

    // private
    deactivate : function(){
        this.container.removeClass(this.activeClass);
        this.fireEvent("deactivate", this);
    },

    // private
    shouldDeactivate : function(e){
        return !this.region || !this.region.contains(e.getPoint());
    },

    // private
    handleClick : function(e){
        if(this.hideOnClick){
            this.parentMenu.hide.defer(this.hideDelay, this.parentMenu, [true]);
        }
    },

    // private
    expandMenu : function(autoActivate){
        // do nothing
    },

    // private
    hideMenu : function(){
        // do nothing
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.menu.Adapter
 * @extends Roo.menu.BaseItem
 * @abstract
 * A base utility class that adapts a non-menu component so that it can be wrapped by a menu item and added to a menu.
 * It provides basic rendering, activation management and enable/disable logic required to work in menus.
 * @constructor
 * Creates a new Adapter
 * @param {Object} config Configuration options
 */
Roo.menu.Adapter = function(component, config){
    Roo.menu.Adapter.superclass.constructor.call(this, config);
    this.component = component;
};
Roo.extend(Roo.menu.Adapter, Roo.menu.BaseItem, {
    // private
    canActivate : true,

    // private
    onRender : function(container, position){
        this.component.render(container);
        this.el = this.component.getEl();
    },

    // private
    activate : function(){
        if(this.disabled){
            return false;
        }
        this.component.focus();
        this.fireEvent("activate", this);
        return true;
    },

    // private
    deactivate : function(){
        this.fireEvent("deactivate", this);
    },

    // private
    disable : function(){
        this.component.disable();
        Roo.menu.Adapter.superclass.disable.call(this);
    },

    // private
    enable : function(){
        this.component.enable();
        Roo.menu.Adapter.superclass.enable.call(this);
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.menu.TextItem
 * @extends Roo.menu.BaseItem
 * Adds a static text string to a menu, usually used as either a heading or group separator.
 * Note: old style constructor with text is still supported.
 * 
 * @constructor
 * Creates a new TextItem
 * @param {Object} cfg Configuration
 */
Roo.menu.TextItem = function(cfg){
    if (typeof(cfg) == 'string') {
        this.text = cfg;
    } else {
        Roo.apply(this,cfg);
    }
    
    Roo.menu.TextItem.superclass.constructor.call(this);
};

Roo.extend(Roo.menu.TextItem, Roo.menu.BaseItem, {
    /**
     * @cfg {String} text Text to show on item.
     */
    text : '',
    
    /**
     * @cfg {Boolean} hideOnClick True to hide the containing menu after this item is clicked (defaults to false)
     */
    hideOnClick : false,
    /**
     * @cfg {String} itemCls The default CSS class to use for text items (defaults to "x-menu-text")
     */
    itemCls : "x-menu-text",

    // private
    onRender : function(){
        var s = document.createElement("span");
        s.className = this.itemCls;
        s.innerHTML = this.text;
        this.el = s;
        Roo.menu.TextItem.superclass.onRender.apply(this, arguments);
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.menu.Separator
 * @extends Roo.menu.BaseItem
 * Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will
 * add one of these by using "-" in you call to add() or in your items config rather than creating one directly.
 * @constructor
 * @param {Object} config Configuration options
 */
Roo.menu.Separator = function(config){
    Roo.menu.Separator.superclass.constructor.call(this, config);
};

Roo.extend(Roo.menu.Separator, Roo.menu.BaseItem, {
    /**
     * @cfg {String} itemCls The default CSS class to use for separators (defaults to "x-menu-sep")
     */
    itemCls : "x-menu-sep",
    /**
     * @cfg {Boolean} hideOnClick True to hide the containing menu after this item is clicked (defaults to false)
     */
    hideOnClick : false,

    // private
    onRender : function(li){
        var s = document.createElement("span");
        s.className = this.itemCls;
        s.innerHTML = "&#160;";
        this.el = s;
        li.addClass("x-menu-sep-li");
        Roo.menu.Separator.superclass.onRender.apply(this, arguments);
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.menu.Item
 * @extends Roo.menu.BaseItem
 * A base class for all menu items that require menu-related functionality (like sub-menus) and are not static
 * display items.  Item extends the base functionality of {@link Roo.menu.BaseItem} by adding menu-specific
 * activation and click handling.
 * @constructor
 * Creates a new Item
 * @param {Object} config Configuration options
 */
Roo.menu.Item = function(config){
    Roo.menu.Item.superclass.constructor.call(this, config);
    if(this.menu){
        this.menu = Roo.menu.MenuMgr.get(this.menu);
    }
};
Roo.extend(Roo.menu.Item, Roo.menu.BaseItem, {
    /**
     * @cfg {Roo.menu.Menu} menu
     * A Sub menu
     */
    /**
     * @cfg {String} text
     * The text to show on the menu item.
     */
    text: '',
     /**
     * @cfg {String} html to render in menu
     * The text to show on the menu item (HTML version).
     */
    html: '',
    /**
     * @cfg {String} icon
     * The path to an icon to display in this menu item (defaults to Roo.BLANK_IMAGE_URL)
     */
    icon: undefined,
    /**
     * @cfg {String} itemCls The default CSS class to use for menu items (defaults to "x-menu-item")
     */
    itemCls : "x-menu-item",
    /**
     * @cfg {Boolean} canActivate True if this item can be visually activated (defaults to true)
     */
    canActivate : true,
    /**
     * @cfg {Number} showDelay Length of time in milliseconds to wait before showing this item (defaults to 200)
     */
    showDelay: 200,
    // doc'd in BaseItem
    hideDelay: 200,

    // private
    ctype: "Roo.menu.Item",
    
    // private
    onRender : function(container, position){
        var el = document.createElement("a");
        el.hideFocus = true;
        el.unselectable = "on";
        el.href = this.href || "#";
        if(this.hrefTarget){
            el.target = this.hrefTarget;
        }
        el.className = this.itemCls + (this.menu ?  " x-menu-item-arrow" : "") + (this.cls ?  " " + this.cls : "");
        
        var html = this.html.length ? this.html  : String.format('{0}',this.text);
        
        el.innerHTML = String.format(
                '<img src="{0}" class="x-menu-item-icon {1}" />' + html,
                this.icon || Roo.BLANK_IMAGE_URL, this.iconCls || '');
        this.el = el;
        Roo.menu.Item.superclass.onRender.call(this, container, position);
    },

    /**
     * Sets the text to display in this menu item
     * @param {String} text The text to display
     * @param {Boolean} isHTML true to indicate text is pure html.
     */
    setText : function(text, isHTML){
        if (isHTML) {
            this.html = text;
        } else {
            this.text = text;
            this.html = '';
        }
        if(this.rendered){
            var html = this.html.length ? this.html  : String.format('{0}',this.text);
     
            this.el.update(String.format(
                '<img src="{0}" class="x-menu-item-icon {2}">' + html,
                this.icon || Roo.BLANK_IMAGE_URL, this.text, this.iconCls || ''));
            this.parentMenu.autoWidth();
        }
    },

    // private
    handleClick : function(e){
        if(!this.href){ // if no link defined, stop the event automatically
            e.stopEvent();
        }
        Roo.menu.Item.superclass.handleClick.apply(this, arguments);
    },

    // private
    activate : function(autoExpand){
        if(Roo.menu.Item.superclass.activate.apply(this, arguments)){
            this.focus();
            if(autoExpand){
                this.expandMenu();
            }
        }
        return true;
    },

    // private
    shouldDeactivate : function(e){
        if(Roo.menu.Item.superclass.shouldDeactivate.call(this, e)){
            if(this.menu && this.menu.isVisible()){
                return !this.menu.getEl().getRegion().contains(e.getPoint());
            }
            return true;
        }
        return false;
    },

    // private
    deactivate : function(){
        Roo.menu.Item.superclass.deactivate.apply(this, arguments);
        this.hideMenu();
    },

    // private
    expandMenu : function(autoActivate){
        if(!this.disabled && this.menu){
            clearTimeout(this.hideTimer);
            delete this.hideTimer;
            if(!this.menu.isVisible() && !this.showTimer){
                this.showTimer = this.deferExpand.defer(this.showDelay, this, [autoActivate]);
            }else if (this.menu.isVisible() && autoActivate){
                this.menu.tryActivate(0, 1);
            }
        }
    },

    // private
    deferExpand : function(autoActivate){
        delete this.showTimer;
        this.menu.show(this.container, this.parentMenu.subMenuAlign || "tl-tr?", this.parentMenu);
        if(autoActivate){
            this.menu.tryActivate(0, 1);
        }
    },

    // private
    hideMenu : function(){
        clearTimeout(this.showTimer);
        delete this.showTimer;
        if(!this.hideTimer && this.menu && this.menu.isVisible()){
            this.hideTimer = this.deferHide.defer(this.hideDelay, this);
        }
    },

    // private
    deferHide : function(){
        delete this.hideTimer;
        this.menu.hide();
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.menu.CheckItem
 * @extends Roo.menu.Item
 * Adds a menu item that contains a checkbox by default, but can also be part of a radio group.
 * @constructor
 * Creates a new CheckItem
 * @param {Object} config Configuration options
 */
Roo.menu.CheckItem = function(config){
    Roo.menu.CheckItem.superclass.constructor.call(this, config);
    this.addEvents({
        /**
         * @event beforecheckchange
         * Fires before the checked value is set, providing an opportunity to cancel if needed
         * @param {Roo.menu.CheckItem} this
         * @param {Boolean} checked The new checked value that will be set
         */
        "beforecheckchange" : true,
        /**
         * @event checkchange
         * Fires after the checked value has been set
         * @param {Roo.menu.CheckItem} this
         * @param {Boolean} checked The checked value that was set
         */
        "checkchange" : true
    });
    if(this.checkHandler){
        this.on('checkchange', this.checkHandler, this.scope);
    }
};
Roo.extend(Roo.menu.CheckItem, Roo.menu.Item, {
    /**
     * @cfg {String} group
     * All check items with the same group name will automatically be grouped into a single-select
     * radio button group (defaults to '')
     */
    /**
     * @cfg {String} itemCls The default CSS class to use for check items (defaults to "x-menu-item x-menu-check-item")
     */
    itemCls : "x-menu-item x-menu-check-item",
    /**
     * @cfg {String} groupClass The default CSS class to use for radio group check items (defaults to "x-menu-group-item")
     */
    groupClass : "x-menu-group-item",

    /**
     * @cfg {Boolean} checked True to initialize this checkbox as checked (defaults to false).  Note that
     * if this checkbox is part of a radio group (group = true) only the last item in the group that is
     * initialized with checked = true will be rendered as checked.
     */
    checked: false,

    // private
    ctype: "Roo.menu.CheckItem",

    // private
    onRender : function(c){
        Roo.menu.CheckItem.superclass.onRender.apply(this, arguments);
        if(this.group){
            this.el.addClass(this.groupClass);
        }
        Roo.menu.MenuMgr.registerCheckable(this);
        if(this.checked){
            this.checked = false;
            this.setChecked(true, true);
        }
    },

    // private
    destroy : function(){
        if(this.rendered){
            Roo.menu.MenuMgr.unregisterCheckable(this);
        }
        Roo.menu.CheckItem.superclass.destroy.apply(this, arguments);
    },

    /**
     * Set the checked state of this item
     * @param {Boolean} checked The new checked value
     * @param {Boolean} suppressEvent (optional) True to prevent the checkchange event from firing (defaults to false)
     */
    setChecked : function(state, suppressEvent){
        if(this.checked != state && this.fireEvent("beforecheckchange", this, state) !== false){
            if(this.container){
                this.container[state ? "addClass" : "removeClass"]("x-menu-item-checked");
            }
            this.checked = state;
            if(suppressEvent !== true){
                this.fireEvent("checkchange", this, state);
            }
        }
    },

    // private
    handleClick : function(e){
       if(!this.disabled && !(this.checked && this.group)){// disable unselect on radio item
           this.setChecked(!this.checked);
       }
       Roo.menu.CheckItem.superclass.handleClick.apply(this, arguments);
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.menu.DateItem
 * @extends Roo.menu.Adapter
 * A menu item that wraps the {@link Roo.DatPicker} component.
 * @constructor
 * Creates a new DateItem
 * @param {Object} config Configuration options
 */
Roo.menu.DateItem = function(config){
    Roo.menu.DateItem.superclass.constructor.call(this, new Roo.DatePicker(config), config);
    /** The Roo.DatePicker object @type Roo.DatePicker */
    this.picker = this.component;
    this.addEvents({select: true});
    
    this.picker.on("render", function(picker){
        picker.getEl().swallowEvent("click");
        picker.container.addClass("x-menu-date-item");
    });

    this.picker.on("select", this.onSelect, this);
};

Roo.extend(Roo.menu.DateItem, Roo.menu.Adapter, {
    // private
    onSelect : function(picker, date){
        this.fireEvent("select", this, date, picker);
        Roo.menu.DateItem.superclass.handleClick.call(this);
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.menu.ColorItem
 * @extends Roo.menu.Adapter
 * A menu item that wraps the {@link Roo.ColorPalette} component.
 * @constructor
 * Creates a new ColorItem
 * @param {Object} config Configuration options
 */
Roo.menu.ColorItem = function(config){
    Roo.menu.ColorItem.superclass.constructor.call(this, new Roo.ColorPalette(config), config);
    /** The Roo.ColorPalette object @type Roo.ColorPalette */
    this.palette = this.component;
    this.relayEvents(this.palette, ["select"]);
    if(this.selectHandler){
        this.on('select', this.selectHandler, this.scope);
    }
};
Roo.extend(Roo.menu.ColorItem, Roo.menu.Adapter);/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.menu.DateMenu
 * @extends Roo.menu.Menu
 * A menu containing a {@link Roo.menu.DateItem} component (which provides a date picker).
 * @constructor
 * Creates a new DateMenu
 * @param {Object} config Configuration options
 */
Roo.menu.DateMenu = function(config){
    Roo.menu.DateMenu.superclass.constructor.call(this, config);
    this.plain = true;
    var di = new Roo.menu.DateItem(config);
    this.add(di);
    /**
     * The {@link Roo.DatePicker} instance for this DateMenu
     * @type DatePicker
     */
    this.picker = di.picker;
    /**
     * @event select
     * @param {DatePicker} picker
     * @param {Date} date
     */
    this.relayEvents(di, ["select"]);
    this.on('beforeshow', function(){
        if(this.picker){
            this.picker.hideMonthPicker(false);
        }
    }, this);
};
Roo.extend(Roo.menu.DateMenu, Roo.menu.Menu, {
    cls:'x-date-menu'
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.menu.ColorMenu
 * @extends Roo.menu.Menu
 * A menu containing a {@link Roo.menu.ColorItem} component (which provides a basic color picker).
 * @constructor
 * Creates a new ColorMenu
 * @param {Object} config Configuration options
 */
Roo.menu.ColorMenu = function(config){
    Roo.menu.ColorMenu.superclass.constructor.call(this, config);
    this.plain = true;
    var ci = new Roo.menu.ColorItem(config);
    this.add(ci);
    /**
     * The {@link Roo.ColorPalette} instance for this ColorMenu
     * @type ColorPalette
     */
    this.palette = ci.palette;
    /**
     * @event select
     * @param {ColorPalette} palette
     * @param {String} color
     */
    this.relayEvents(ci, ["select"]);
};
Roo.extend(Roo.menu.ColorMenu, Roo.menu.Menu);/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.form.TextItem
 * @extends Roo.BoxComponent
 * Base class for form fields that provides default event handling, sizing, value handling and other functionality.
 * @constructor
 * Creates a new TextItem
 * @param {Object} config Configuration options
 */
Roo.form.TextItem = function(config){
    Roo.form.TextItem.superclass.constructor.call(this, config);
};

Roo.extend(Roo.form.TextItem, Roo.BoxComponent,  {
    
    /**
     * @cfg {String} tag the tag for this item (default div)
     */
    tag : 'div',
    /**
     * @cfg {String} html the content for this item
     */
    html : '',
    
    getAutoCreate : function()
    {
        var cfg = {
            id: this.id,
            tag: this.tag,
            html: this.html,
            cls: 'x-form-item'
        };
        
        return cfg;
        
    },
    
    onRender : function(ct, position)
    {
        Roo.form.TextItem.superclass.onRender.call(this, ct, position);
        
        if(!this.el){
            var cfg = this.getAutoCreate();
            if(!cfg.name){
                cfg.name = typeof(this.name) == 'undefined' ? this.id : this.name;
            }
            if (!cfg.name.length) {
                delete cfg.name;
            }
            this.el = ct.createChild(cfg, position);
        }
    },
    /*
     * setHTML
     * @param {String} html update the Contents of the element.
     */
    setHTML : function(html)
    {
        this.fieldEl.dom.innerHTML = html;
    }
    
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.form.Field
 * @extends Roo.BoxComponent
 * Base class for form fields that provides default event handling, sizing, value handling and other functionality.
 * @constructor
 * Creates a new Field
 * @param {Object} config Configuration options
 */
Roo.form.Field = function(config){
    Roo.form.Field.superclass.constructor.call(this, config);
};

Roo.extend(Roo.form.Field, Roo.BoxComponent,  {
    /**
     * @cfg {String} fieldLabel Label to use when rendering a form.
     */
	/**
     * @cfg {String} labelSeparator the ':' after a field label (default :)  = set it to empty string to hide the field label.
     */
       /**
     * @cfg {String} qtip Mouse over tip
     */
     
    /**
     * @cfg {String} invalidClass The CSS class to use when marking a field invalid (defaults to "x-form-invalid")
     */
    invalidClass : "x-form-invalid",
    /**
     * @cfg {String} invalidText The error text to use when marking a field invalid and no message is provided (defaults to "The value in this field is invalid")
     */
    invalidText : "The value in this field is invalid",
    /**
     * @cfg {String} focusClass The CSS class to use when the field receives focus (defaults to "x-form-focus")
     */
    focusClass : "x-form-focus",
    /**
     * @cfg {String/Boolean} validationEvent The event that should initiate field validation. Set to false to disable
      automatic validation (defaults to "keyup").
     */
    validationEvent : "keyup",
    /**
     * @cfg {Boolean} validateOnBlur Whether the field should validate when it loses focus (defaults to true).
     */
    validateOnBlur : true,
    /**
     * @cfg {Number} validationDelay The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)
     */
    validationDelay : 250,
    /**
     * @cfg {String/Object} autoCreate A DomHelper element spec, or true for a default element spec (defaults to
     * {tag: "input", type: "text", size: "20", autocomplete: "off"})
     */
    defaultAutoCreate : {tag: "input", type: "text", size: "20", autocomplete: "new-password"},
    /**
     * @cfg {String} fieldClass The default CSS class for the field (defaults to "x-form-field")
     */
    fieldClass : "x-form-field",
    /**
     * @cfg {String} msgTarget The location where error text should display.  Should be one of the following values (defaults to 'qtip'):
     *<pre>
Value         Description
-----------   ----------------------------------------------------------------------
qtip          Display a quick tip when the user hovers over the field
title         Display a default browser title attribute popup
under         Add a block div beneath the field containing the error text
side          Add an error icon to the right of the field with a popup on hover
[element id]  Add the error text directly to the innerHTML of the specified element
</pre>
     */
    msgTarget : 'qtip',
    /**
     * @cfg {String} msgFx <b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').
     */
    msgFx : 'normal',

    /**
     * @cfg {Boolean} readOnly True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.
     */
    readOnly : false,

    /**
     * @cfg {Boolean} disabled True to disable the field (defaults to false).
     */
    disabled : false,

    /**
     * @cfg {String} inputType The type attribute for input fields -- e.g. radio, text, password (defaults to "text").
     */
    inputType : undefined,
    
    /**
     * @cfg {Number} tabIndex The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).
	 */
	tabIndex : undefined,
	
    // private
    isFormField : true,

    // private
    hasFocus : false,
    /**
     * @property {Roo.Element} fieldEl
     * Element Containing the rendered Field (with label etc.)
     */
    /**
     * @cfg {Mixed} value A value to initialize this field with.
     */
    value : undefined,

    /**
     * @cfg {String} name The field's HTML name attribute.
     */
    /**
     * @cfg {String} cls A CSS class to apply to the field's underlying element.
     */
    // private
    loadedValue : false,
     
     
	// private ??
	initComponent : function(){
        Roo.form.Field.superclass.initComponent.call(this);
        this.addEvents({
            /**
             * @event focus
             * Fires when this field receives input focus.
             * @param {Roo.form.Field} this
             */
            focus : true,
            /**
             * @event blur
             * Fires when this field loses input focus.
             * @param {Roo.form.Field} this
             */
            blur : true,
            /**
             * @event specialkey
             * Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check
             * {@link Roo.EventObject#getKey} to determine which key was pressed.
             * @param {Roo.form.Field} this
             * @param {Roo.EventObject} e The event object
             */
            specialkey : true,
            /**
             * @event change
             * Fires just before the field blurs if the field value has changed.
             * @param {Roo.form.Field} this
             * @param {Mixed} newValue The new value
             * @param {Mixed} oldValue The original value
             */
            change : true,
            /**
             * @event invalid
             * Fires after the field has been marked as invalid.
             * @param {Roo.form.Field} this
             * @param {String} msg The validation message
             */
            invalid : true,
            /**
             * @event valid
             * Fires after the field has been validated with no errors.
             * @param {Roo.form.Field} this
             */
            valid : true,
             /**
             * @event keyup
             * Fires after the key up
             * @param {Roo.form.Field} this
             * @param {Roo.EventObject}  e The event Object
             */
            keyup : true
        });
    },

    /**
     * Returns the name attribute of the field if available
     * @return {String} name The field name
     */
    getName: function(){
         return this.rendered && this.el.dom.name ? this.el.dom.name : (this.hiddenName || '');
    },

    // private
    onRender : function(ct, position){
        Roo.form.Field.superclass.onRender.call(this, ct, position);
        if(!this.el){
            var cfg = this.getAutoCreate();
            if(!cfg.name){
                cfg.name = typeof(this.name) == 'undefined' ? this.id : this.name;
            }
            if (!cfg.name.length) {
                delete cfg.name;
            }
            if(this.inputType){
                cfg.type = this.inputType;
            }
            this.el = ct.createChild(cfg, position);
        }
        var type = this.el.dom.type;
        if(type){
            if(type == 'password'){
                type = 'text';
            }
            this.el.addClass('x-form-'+type);
        }
        if(this.readOnly){
            this.el.dom.readOnly = true;
        }
        if(this.tabIndex !== undefined){
            this.el.dom.setAttribute('tabIndex', this.tabIndex);
        }

        this.el.addClass([this.fieldClass, this.cls]);
        this.initValue();
    },

    /**
     * Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>
     * @param {String/HTMLElement/Element} el The id of the node, a DOM node or an existing Element
     * @return {Roo.form.Field} this
     */
    applyTo : function(target){
        this.allowDomMove = false;
        this.el = Roo.get(target);
        this.render(this.el.dom.parentNode);
        return this;
    },

    // private
    initValue : function(){
        if(this.value !== undefined){
            this.setValue(this.value);
        }else if(this.el.dom.value.length > 0){
            this.setValue(this.el.dom.value);
        }
    },

    /**
     * Returns true if this field has been changed since it was originally loaded and is not disabled.
     * DEPRICATED  - it never worked well - use hasChanged/resetHasChanged.
     */
    isDirty : function() {
        if(this.disabled) {
            return false;
        }
        return String(this.getValue()) !== String(this.originalValue);
    },

    /**
     * stores the current value in loadedValue
     */
    resetHasChanged : function()
    {
        this.loadedValue = String(this.getValue());
    },
    /**
     * checks the current value against the 'loaded' value.
     * Note - will return false if 'resetHasChanged' has not been called first.
     */
    hasChanged : function()
    {
        if(this.disabled || this.readOnly) {
            return false;
        }
        return this.loadedValue !== false && String(this.getValue()) !== this.loadedValue;
    },
    
    
    
    // private
    afterRender : function(){
        Roo.form.Field.superclass.afterRender.call(this);
        this.initEvents();
    },

    // private
    fireKey : function(e){
        //Roo.log('field ' + e.getKey());
        if(e.isNavKeyPress()){
            this.fireEvent("specialkey", this, e);
        }
    },

    /**
     * Resets the current field value to the originally loaded value and clears any validation messages
     */
    reset : function(){
        this.setValue(this.resetValue);
        this.originalValue = this.getValue();
        this.clearInvalid();
    },

    // private
    initEvents : function(){
        // safari killled keypress - so keydown is now used..
        this.el.on("keydown" , this.fireKey,  this);
        this.el.on("focus", this.onFocus,  this);
        this.el.on("blur", this.onBlur,  this);
        this.el.relayEvent('keyup', this);

        // reference to original value for reset
        this.originalValue = this.getValue();
        this.resetValue =  this.getValue();
    },

    // private
    onFocus : function(){
        if(!Roo.isOpera && this.focusClass){ // don't touch in Opera
            this.el.addClass(this.focusClass);
        }
        if(!this.hasFocus){
            this.hasFocus = true;
            this.startValue = this.getValue();
            this.fireEvent("focus", this);
        }
    },

    beforeBlur : Roo.emptyFn,

    // private
    onBlur : function(){
        this.beforeBlur();
        if(!Roo.isOpera && this.focusClass){ // don't touch in Opera
            this.el.removeClass(this.focusClass);
        }
        this.hasFocus = false;
        if(this.validationEvent !== false && this.validateOnBlur && this.validationEvent != "blur"){
            this.validate();
        }
        var v = this.getValue();
        if(String(v) !== String(this.startValue)){
            this.fireEvent('change', this, v, this.startValue);
        }
        this.fireEvent("blur", this);
    },

    /**
     * Returns whether or not the field value is currently valid
     * @param {Boolean} preventMark True to disable marking the field invalid
     * @return {Boolean} True if the value is valid, else false
     */
    isValid : function(preventMark){
        if(this.disabled){
            return true;
        }
        var restore = this.preventMark;
        this.preventMark = preventMark === true;
        var v = this.validateValue(this.processValue(this.getRawValue()));
        this.preventMark = restore;
        return v;
    },

    /**
     * Validates the field value
     * @return {Boolean} True if the value is valid, else false
     */
    validate : function(){
        if(this.disabled || this.validateValue(this.processValue(this.getRawValue()))){
            this.clearInvalid();
            return true;
        }
        return false;
    },

    processValue : function(value){
        return value;
    },

    // private
    // Subclasses should provide the validation implementation by overriding this
    validateValue : function(value){
        return true;
    },

    /**
     * Mark this field as invalid
     * @param {String} msg The validation message
     */
    markInvalid : function(msg){
        if(!this.rendered || this.preventMark){ // not rendered
            return;
        }
        
        var obj = (typeof(this.combo) != 'undefined') ? this.combo : this; // fix the combox array!!
        
        obj.el.addClass(this.invalidClass);
        msg = msg || this.invalidText;
        switch(this.msgTarget){
            case 'qtip':
                obj.el.dom.qtip = msg;
                obj.el.dom.qclass = 'x-form-invalid-tip';
                if(Roo.QuickTips){ // fix for floating editors interacting with DND
                    Roo.QuickTips.enable();
                }
                break;
            case 'title':
                this.el.dom.title = msg;
                break;
            case 'under':
                if(!this.errorEl){
                    var elp = this.el.findParent('.x-form-element', 5, true);
                    this.errorEl = elp.createChild({cls:'x-form-invalid-msg'});
                    this.errorEl.setWidth(elp.getWidth(true)-20);
                }
                this.errorEl.update(msg);
                Roo.form.Field.msgFx[this.msgFx].show(this.errorEl, this);
                break;
            case 'side':
                if(!this.errorIcon){
                    var elp = this.el.findParent('.x-form-element', 5, true);
                    this.errorIcon = elp.createChild({cls:'x-form-invalid-icon'});
                }
                this.alignErrorIcon();
                this.errorIcon.dom.qtip = msg;
                this.errorIcon.dom.qclass = 'x-form-invalid-tip';
                this.errorIcon.show();
                this.on('resize', this.alignErrorIcon, this);
                break;
            default:
                var t = Roo.getDom(this.msgTarget);
                t.innerHTML = msg;
                t.style.display = this.msgDisplay;
                break;
        }
        this.fireEvent('invalid', this, msg);
    },

    // private
    alignErrorIcon : function(){
        this.errorIcon.alignTo(this.el, 'tl-tr', [2, 0]);
    },

    /**
     * Clear any invalid styles/messages for this field
     */
    clearInvalid : function(){
        if(!this.rendered || this.preventMark){ // not rendered
            return;
        }
        var obj = (typeof(this.combo) != 'undefined') ? this.combo : this; // fix the combox array!!
        
        obj.el.removeClass(this.invalidClass);
        switch(this.msgTarget){
            case 'qtip':
                obj.el.dom.qtip = '';
                break;
            case 'title':
                this.el.dom.title = '';
                break;
            case 'under':
                if(this.errorEl){
                    Roo.form.Field.msgFx[this.msgFx].hide(this.errorEl, this);
                }
                break;
            case 'side':
                if(this.errorIcon){
                    this.errorIcon.dom.qtip = '';
                    this.errorIcon.hide();
                    this.un('resize', this.alignErrorIcon, this);
                }
                break;
            default:
                var t = Roo.getDom(this.msgTarget);
                t.innerHTML = '';
                t.style.display = 'none';
                break;
        }
        this.fireEvent('valid', this);
    },

    /**
     * Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.
     * @return {Mixed} value The field value
     */
    getRawValue : function(){
        var v = this.el.getValue();
        
        return v;
    },

    /**
     * Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.
     * @return {Mixed} value The field value
     */
    getValue : function(){
        var v = this.el.getValue();
         
        return v;
    },

    /**
     * Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.
     * @param {Mixed} value The value to set
     */
    setRawValue : function(v){
        return this.el.dom.value = (v === null || v === undefined ? '' : v);
    },

    /**
     * Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.
     * @param {Mixed} value The value to set
     */
    setValue : function(v){
        this.value = v;
        if(this.rendered){
            this.el.dom.value = (v === null || v === undefined ? '' : v);
             this.validate();
        }
    },

    adjustSize : function(w, h){
        var s = Roo.form.Field.superclass.adjustSize.call(this, w, h);
        s.width = this.adjustWidth(this.el.dom.tagName, s.width);
        return s;
    },

    adjustWidth : function(tag, w){
        tag = tag.toLowerCase();
        if(typeof w == 'number' && Roo.isStrict && !Roo.isSafari){
            if(Roo.isIE && (tag == 'input' || tag == 'textarea')){
                if(tag == 'input'){
                    return w + 2;
                }
                if(tag == 'textarea'){
                    return w-2;
                }
            }else if(Roo.isOpera){
                if(tag == 'input'){
                    return w + 2;
                }
                if(tag == 'textarea'){
                    return w-2;
                }
            }
        }
        return w;
    }
});


// anything other than normal should be considered experimental
Roo.form.Field.msgFx = {
    normal : {
        show: function(msgEl, f){
            msgEl.setDisplayed('block');
        },

        hide : function(msgEl, f){
            msgEl.setDisplayed(false).update('');
        }
    },

    slide : {
        show: function(msgEl, f){
            msgEl.slideIn('t', {stopFx:true});
        },

        hide : function(msgEl, f){
            msgEl.slideOut('t', {stopFx:true,useDisplay:true});
        }
    },

    slideRight : {
        show: function(msgEl, f){
            msgEl.fixDisplay();
            msgEl.alignTo(f.el, 'tl-tr');
            msgEl.slideIn('l', {stopFx:true});
        },

        hide : function(msgEl, f){
            msgEl.slideOut('l', {stopFx:true,useDisplay:true});
        }
    }
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.form.TextField
 * @extends Roo.form.Field
 * Basic text field.  Can be used as a direct replacement for traditional text inputs, or as the base
 * class for more sophisticated input controls (like {@link Roo.form.TextArea} and {@link Roo.form.ComboBox}).
 * @constructor
 * Creates a new TextField
 * @param {Object} config Configuration options
 */
Roo.form.TextField = function(config){
    Roo.form.TextField.superclass.constructor.call(this, config);
    this.addEvents({
        /**
         * @event autosize
         * Fires when the autosize function is triggered.  The field may or may not have actually changed size
         * according to the default logic, but this event provides a hook for the developer to apply additional
         * logic at runtime to resize the field if needed.
	     * @param {Roo.form.Field} this This text field
	     * @param {Number} width The new field width
	     */
        autosize : true
    });
};

Roo.extend(Roo.form.TextField, Roo.form.Field,  {
    /**
     * @cfg {Boolean} grow True if this field should automatically grow and shrink to its content
     */
    grow : false,
    /**
     * @cfg {Number} growMin The minimum width to allow when grow = true (defaults to 30)
     */
    growMin : 30,
    /**
     * @cfg {Number} growMax The maximum width to allow when grow = true (defaults to 800)
     */
    growMax : 800,
    /**
     * @cfg {String} vtype A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)
     */
    vtype : null,
    /**
     * @cfg {String} maskRe An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)
     */
    maskRe : null,
    /**
     * @cfg {Boolean} disableKeyFilter True to disable input keystroke filtering (defaults to false)
     */
    disableKeyFilter : false,
    /**
     * @cfg {Boolean} allowBlank False to validate that the value length > 0 (defaults to true)
     */
    allowBlank : true,
    /**
     * @cfg {Number} minLength Minimum input field length required (defaults to 0)
     */
    minLength : 0,
    /**
     * @cfg {Number} maxLength Maximum input field length allowed (defaults to Number.MAX_VALUE)
     */
    maxLength : Number.MAX_VALUE,
    /**
     * @cfg {String} minLengthText Error text to display if the minimum length validation fails (defaults to "The minimum length for this field is {minLength}")
     */
    minLengthText : "The minimum length for this field is {0}",
    /**
     * @cfg {String} maxLengthText Error text to display if the maximum length validation fails (defaults to "The maximum length for this field is {maxLength}")
     */
    maxLengthText : "The maximum length for this field is {0}",
    /**
     * @cfg {Boolean} selectOnFocus True to automatically select any existing field text when the field receives input focus (defaults to false)
     */
    selectOnFocus : false,
    /**
     * @cfg {Boolean} allowLeadingSpace True to prevent the stripping of leading white space 
     */    
    allowLeadingSpace : false,
    /**
     * @cfg {String} blankText Error text to display if the allow blank validation fails (defaults to "This field is required")
     */
    blankText : "This field is required",
    /**
     * @cfg {Function} validator A custom validation function to be called during field validation (defaults to null).
     * If available, this function will be called only after the basic validators all return true, and will be passed the
     * current field value and expected to return boolean true if the value is valid or a string error message if invalid.
     */
    validator : null,
    /**
     * @cfg {RegExp} regex A JavaScript RegExp object to be tested against the field value during validation (defaults to null).
     * If available, this regex will be evaluated only after the basic validators all return true, and will be passed the
     * current field value.  If the test fails, the field will be marked invalid using {@link #regexText}.
     */
    regex : null,
    /**
     * @cfg {String} regexText The error text to display if {@link #regex} is used and the test fails during validation (defaults to "")
     */
    regexText : "",
    /**
     * @cfg {String} emptyText The default text to display in an empty field - placeholder... (defaults to null).
     */
    emptyText : null,
   

    // private
    initEvents : function()
    {
        if (this.emptyText) {
            this.el.attr('placeholder', this.emptyText);
        }
        
        Roo.form.TextField.superclass.initEvents.call(this);
        if(this.validationEvent == 'keyup'){
            this.validationTask = new Roo.util.DelayedTask(this.validate, this);
            this.el.on('keyup', this.filterValidation, this);
        }
        else if(this.validationEvent !== false){
            this.el.on(this.validationEvent, this.validate, this, {buffer: this.validationDelay});
        }
        
        if(this.selectOnFocus){
            this.on("focus", this.preFocus, this);
        }
		if (!this.allowLeadingSpace) {
			this.on('blur', this.cleanLeadingSpace, this);
		}
	
        if(this.maskRe || (this.vtype && this.disableKeyFilter !== true && (this.maskRe = Roo.form.VTypes[this.vtype+'Mask']))){
            this.el.on("keypress", this.filterKeys, this);
        }
        if(this.grow){
            this.el.on("keyup", this.onKeyUp,  this, {buffer:50});
            this.el.on("click", this.autoSize,  this);
        }
        if(this.el.is('input[type=password]') && Roo.isSafari){
            this.el.on('keydown', this.SafariOnKeyDown, this);
        }
    },

    processValue : function(value){
        if(this.stripCharsRe){
            var newValue = value.replace(this.stripCharsRe, '');
            if(newValue !== value){
                this.setRawValue(newValue);
                return newValue;
            }
        }
        return value;
    },

    filterValidation : function(e){
        if(!e.isNavKeyPress()){
            this.validationTask.delay(this.validationDelay);
        }
    },

    // private
    onKeyUp : function(e){
        if(!e.isNavKeyPress()){
            this.autoSize();
        }
    },
    // private - clean the leading white space
    cleanLeadingSpace : function(e)
    {
        if ( this.inputType == 'file') {
            return;
        }
        
        this.setValue((this.getValue() + '').replace(/^\s+/,''));
    },
    /**
     * Resets the current field value to the originally-loaded value and clears any validation messages.
     *  
     */
    reset : function(){
        Roo.form.TextField.superclass.reset.call(this);
       
    }, 
    // private
    preFocus : function(){
        
        if(this.selectOnFocus){
            this.el.dom.select();
        }
    },

    
    // private
    filterKeys : function(e){
        var k = e.getKey();
        if(!Roo.isIE && (e.isNavKeyPress() || k == e.BACKSPACE || (k == e.DELETE && e.button == -1))){
            return;
        }
        var c = e.getCharCode(), cc = String.fromCharCode(c);
        if(Roo.isIE && (e.isSpecialKey() || !cc)){
            return;
        }
        if(!this.maskRe.test(cc)){
            e.stopEvent();
        }
    },

    setValue : function(v){
        
        Roo.form.TextField.superclass.setValue.apply(this, arguments);
        
        this.autoSize();
    },

    /**
     * Validates a value according to the field's validation rules and marks the field as invalid
     * if the validation fails
     * @param {Mixed} value The value to validate
     * @return {Boolean} True if the value is valid, else false
     */
    validateValue : function(value){
        if(value.length < 1)  { // if it's blank
             if(this.allowBlank){
                this.clearInvalid();
                return true;
             }else{
                this.markInvalid(this.blankText);
                return false;
             }
        }
        if(value.length < this.minLength){
            this.markInvalid(String.format(this.minLengthText, this.minLength));
            return false;
        }
        if(value.length > this.maxLength){
            this.markInvalid(String.format(this.maxLengthText, this.maxLength));
            return false;
        }
        if(this.vtype){
            var vt = Roo.form.VTypes;
			if (value.trim() != value) { // trim before checking email (and other stuf??)
				value = value.trim();
				this.el.dom.value  = value;
			}
			
            if(!vt[this.vtype](value, this)){
                this.markInvalid(this.vtypeText || vt[this.vtype +'Text']);
                return false;
            }
        }
        if(typeof this.validator == "function"){
            var msg = this.validator(value);
            if(msg !== true){
                this.markInvalid(msg);
                return false;
            }
        }
        if(this.regex && !this.regex.test(value)){
            this.markInvalid(this.regexText);
            return false;
        }
        return true;
    },

    /**
     * Selects text in this field
     * @param {Number} start (optional) The index where the selection should start (defaults to 0)
     * @param {Number} end (optional) The index where the selection should end (defaults to the text length)
     */
    selectText : function(start, end){
        var v = this.getRawValue();
        if(v.length > 0){
            start = start === undefined ? 0 : start;
            end = end === undefined ? v.length : end;
            var d = this.el.dom;
            if(d.setSelectionRange){
                d.setSelectionRange(start, end);
            }else if(d.createTextRange){
                var range = d.createTextRange();
                range.moveStart("character", start);
                range.moveEnd("character", v.length-end);
                range.select();
            }
        }
    },

    /**
     * Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.
     * This only takes effect if grow = true, and fires the autosize event.
     */
    autoSize : function(){
        if(!this.grow || !this.rendered){
            return;
        }
        if(!this.metrics){
            this.metrics = Roo.util.TextMetrics.createInstance(this.el);
        }
        var el = this.el;
        var v = el.dom.value;
        var d = document.createElement('div');
        d.appendChild(document.createTextNode(v));
        v = d.innerHTML;
        d = null;
        v += "&#160;";
        var w = Math.min(this.growMax, Math.max(this.metrics.getWidth(v) + /* add extra padding */ 10, this.growMin));
        this.el.setWidth(w);
        this.fireEvent("autosize", this, w);
    },
    
    // private
    SafariOnKeyDown : function(event)
    {
        // ingore ctrl press
		
		 
        if ([ 16, 17 ].indexOf(event.keyCode)) {
			return;
		}
		// this is a workaround for a password hang bug on chrome/ webkit.		
        var isSelectAll = false;
        
        if(this.el.dom.selectionEnd > 0){
            isSelectAll = (this.el.dom.selectionEnd - this.el.dom.selectionStart - this.getValue().length == 0) ? true : false;
        }
        if(((event.getKey() == 8 || event.getKey() == 46) && this.getValue().length ==1)){ // backspace and delete key
            event.preventDefault();
            this.setValue('');
            return;
        }
        
        // skip handling paste
        if(isSelectAll && event.getCharCode() > 31 && !(event.ctrlKey && event.getCharCode() == 86)){ // backspace and delete key
            
            event.preventDefault();
            // this is very hacky as keydown always get's upper case.
            
            var cc = String.fromCharCode(event.getCharCode());
            
            
            this.setValue( event.shiftKey ?  cc : cc.toLowerCase());
            
        }
        
        
    }
});/**
 * @class Roo.form.Password
 * @extends  Roo.form.TextField
 * Passsword entry with show password button
 * @constructor
 * Creates a new Password field
 * @param {Object} config Configuration options
 */

Roo.form.Password = function(config){
    Roo.form.Password.superclass.constructor.call(this, config);

    this.inputType = 'password';
};

Roo.extend(Roo.form.Password, Roo.form.TextField,  {
    onRender : function(ct, position)
    {
        Roo.form.Password.superclass.onRender.call(this, ct, position);

        this.parentEl().addClass('form-password');

        this.wrap = this.el.wrap({
            cls : 'password-wrap'
        });

        this.toggle = this.wrap.createChild({
            tag : 'Button',
            cls : 'password-toggle'
        });


        this.toggleEl().addClass('password-hidden');

        this.toggleEl().on('click', this.onToggleClick, this);;
    },
    
    parentEl : function()
    {
        return this.el.findParent('.x-form-element', 5, true);
    },

    toggleEl: function()
    {
        return this.parentEl().select('button.password-toggle',true).first();
    },

    onToggleClick : function(e) 
    {
        var input = this.el;
        var toggle = this.toggleEl();

        toggle.removeClass(['password-visible', 'password-hidden']);

        if(input.attr('type') == 'password') {
            input.attr('type', 'text');
            toggle.addClass('password-visible');
        }
        else {
            input.attr('type', 'password');
            toggle.addClass('password-hidden');
        }
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.form.Hidden
 * @extends Roo.form.TextField
 * Simple Hidden element used on forms 
 * 
 * usage: form.add(new Roo.form.HiddenField({ 'name' : 'test1' }));
 * 
 * @constructor
 * Creates a new Hidden form element.
 * @param {Object} config Configuration options
 */



// easy hidden field...
Roo.form.Hidden = function(config){
    Roo.form.Hidden.superclass.constructor.call(this, config);
};
  
Roo.extend(Roo.form.Hidden, Roo.form.TextField, {
    fieldLabel:      '',
    inputType:      'hidden',
    width:          50,
    allowBlank:     true,
    labelSeparator: '',
    hidden:         true,
    itemCls :       'x-form-item-display-none'


});


/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.form.TriggerField
 * @extends Roo.form.TextField
 * Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).
 * The trigger has no default action, so you must assign a function to implement the trigger click handler by
 * overriding {@link #onTriggerClick}. You can create a TriggerField directly, as it renders exactly like a combobox
 * for which you can provide a custom implementation.  For example:
 * <pre><code>
var trigger = new Roo.form.TriggerField();
trigger.onTriggerClick = myTriggerFn;
trigger.applyTo('my-field');
</code></pre>
 *
 * However, in general you will most likely want to use TriggerField as the base class for a reusable component.
 * {@link Roo.form.DateField} and {@link Roo.form.ComboBox} are perfect examples of this.
 * @cfg {String} triggerClass An additional CSS class used to style the trigger button.  The trigger will always get the
 * class 'x-form-trigger' by default and triggerClass will be <b>appended</b> if specified.
 * @constructor
 * Create a new TriggerField.
 * @param {Object} config Configuration options (valid {@Roo.form.TextField} config options will also be applied
 * to the base TextField)
 */
Roo.form.TriggerField = function(config){
    this.mimicing = false;
    Roo.form.TriggerField.superclass.constructor.call(this, config);
};

Roo.extend(Roo.form.TriggerField, Roo.form.TextField,  {
    /**
     * @cfg {String} triggerClass A CSS class to apply to the trigger
     */
    /**
     * @cfg {String/Object} autoCreate A DomHelper element spec, or true for a default element spec (defaults to
     * {tag: "input", type: "text", size: "16", autocomplete: "off"})
     */
    defaultAutoCreate : {tag: "input", type: "text", size: "16", autocomplete: "new-password"},
    /**
     * @cfg {Boolean} hideTrigger True to hide the trigger element and display only the base text field (defaults to false)
     */
    hideTrigger:false,

    /** @cfg {Boolean} grow @hide */
    /** @cfg {Number} growMin @hide */
    /** @cfg {Number} growMax @hide */

    /**
     * @hide 
     * @method
     */
    autoSize: Roo.emptyFn,
    // private
    monitorTab : true,
    // private
    deferHeight : true,

    
    actionMode : 'wrap',
    // private
    onResize : function(w, h){
        Roo.form.TriggerField.superclass.onResize.apply(this, arguments);
        if(typeof w == 'number'){
            var x = w - this.trigger.getWidth();
            this.el.setWidth(this.adjustWidth('input', x));
            this.trigger.setStyle('left', x+'px');
        }
    },

    // private
    adjustSize : Roo.BoxComponent.prototype.adjustSize,

    // private
    getResizeEl : function(){
        return this.wrap;
    },

    // private
    getPositionEl : function(){
        return this.wrap;
    },

    // private
    alignErrorIcon : function(){
        this.errorIcon.alignTo(this.wrap, 'tl-tr', [2, 0]);
    },

    // private
    onRender : function(ct, position){
        Roo.form.TriggerField.superclass.onRender.call(this, ct, position);
        this.wrap = this.el.wrap({cls: "x-form-field-wrap"});
        this.trigger = this.wrap.createChild(this.triggerConfig ||
                {tag: "img", src: Roo.BLANK_IMAGE_URL, cls: "x-form-trigger " + this.triggerClass});
        if(this.hideTrigger){
            this.trigger.setDisplayed(false);
        }
        this.initTrigger();
        if(!this.width){
            this.wrap.setWidth(this.el.getWidth()+this.trigger.getWidth());
        }
    },

    // private
    initTrigger : function(){
        this.trigger.on("click", this.onTriggerClick, this, {preventDefault:true});
        this.trigger.addClassOnOver('x-form-trigger-over');
        this.trigger.addClassOnClick('x-form-trigger-click');
    },

    // private
    onDestroy : function(){
        if(this.trigger){
            this.trigger.removeAllListeners();
            this.trigger.remove();
        }
        if(this.wrap){
            this.wrap.remove();
        }
        Roo.form.TriggerField.superclass.onDestroy.call(this);
    },

    // private
    onFocus : function(){
        Roo.form.TriggerField.superclass.onFocus.call(this);
        if(!this.mimicing){
            this.wrap.addClass('x-trigger-wrap-focus');
            this.mimicing = true;
            Roo.get(Roo.isIE ? document.body : document).on("mousedown", this.mimicBlur, this);
            if(this.monitorTab){
                this.el.on("keydown", this.checkTab, this);
            }
        }
    },

    // private
    checkTab : function(e){
        if(e.getKey() == e.TAB){
            this.triggerBlur();
        }
    },

    // private
    onBlur : function(){
        // do nothing
    },

    // private
    mimicBlur : function(e, t){
        if(!this.wrap.contains(t) && this.validateBlur()){
            this.triggerBlur();
        }
    },

    // private
    triggerBlur : function(){
        this.mimicing = false;
        Roo.get(Roo.isIE ? document.body : document).un("mousedown", this.mimicBlur);
        if(this.monitorTab){
            this.el.un("keydown", this.checkTab, this);
        }
        this.wrap.removeClass('x-trigger-wrap-focus');
        Roo.form.TriggerField.superclass.onBlur.call(this);
    },

    // private
    // This should be overriden by any subclass that needs to check whether or not the field can be blurred.
    validateBlur : function(e, t){
        return true;
    },

    // private
    onDisable : function(){
        Roo.form.TriggerField.superclass.onDisable.call(this);
        if(this.wrap){
            this.wrap.addClass('x-item-disabled');
        }
    },

    // private
    onEnable : function(){
        Roo.form.TriggerField.superclass.onEnable.call(this);
        if(this.wrap){
            this.wrap.removeClass('x-item-disabled');
        }
    },

    // private
    onShow : function(){
        var ae = this.getActionEl();
        
        if(ae){
            ae.dom.style.display = '';
            ae.dom.style.visibility = 'visible';
        }
    },

    // private
    
    onHide : function(){
        var ae = this.getActionEl();
        ae.dom.style.display = 'none';
    },

    /**
     * The function that should handle the trigger's click event.  This method does nothing by default until overridden
     * by an implementing function.
     * @method
     * @param {EventObject} e
     */
    onTriggerClick : Roo.emptyFn
});

// TwinTriggerField is not a public class to be used directly.  It is meant as an abstract base class
// to be extended by an implementing class.  For an example of implementing this class, see the custom
// SearchField implementation here: http://extjs.com/deploy/ext/examples/form/custom.html
Roo.form.TwinTriggerField = Roo.extend(Roo.form.TriggerField, {
    initComponent : function(){
        Roo.form.TwinTriggerField.superclass.initComponent.call(this);

        this.triggerConfig = {
            tag:'span', cls:'x-form-twin-triggers', cn:[
            {tag: "img", src: Roo.BLANK_IMAGE_URL, cls: "x-form-trigger " + this.trigger1Class},
            {tag: "img", src: Roo.BLANK_IMAGE_URL, cls: "x-form-trigger " + this.trigger2Class}
        ]};
    },

    getTrigger : function(index){
        return this.triggers[index];
    },

    initTrigger : function(){
        var ts = this.trigger.select('.x-form-trigger', true);
        this.wrap.setStyle('overflow', 'hidden');
        var triggerField = this;
        ts.each(function(t, all, index){
            t.hide = function(){
                var w = triggerField.wrap.getWidth();
                this.dom.style.display = 'none';
                triggerField.el.setWidth(w-triggerField.trigger.getWidth());
            };
            t.show = function(){
                var w = triggerField.wrap.getWidth();
                this.dom.style.display = '';
                triggerField.el.setWidth(w-triggerField.trigger.getWidth());
            };
            var triggerIndex = 'Trigger'+(index+1);

            if(this['hide'+triggerIndex]){
                t.dom.style.display = 'none';
            }
            t.on("click", this['on'+triggerIndex+'Click'], this, {preventDefault:true});
            t.addClassOnOver('x-form-trigger-over');
            t.addClassOnClick('x-form-trigger-click');
        }, this);
        this.triggers = ts.elements;
    },

    onTrigger1Click : Roo.emptyFn,
    onTrigger2Click : Roo.emptyFn
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.form.TextArea
 * @extends Roo.form.TextField
 * Multiline text field.  Can be used as a direct replacement for traditional textarea fields, plus adds
 * support for auto-sizing.
 * @constructor
 * Creates a new TextArea
 * @param {Object} config Configuration options
 */
Roo.form.TextArea = function(config){
    Roo.form.TextArea.superclass.constructor.call(this, config);
    // these are provided exchanges for backwards compat
    // minHeight/maxHeight were replaced by growMin/growMax to be
    // compatible with TextField growing config values
    if(this.minHeight !== undefined){
        this.growMin = this.minHeight;
    }
    if(this.maxHeight !== undefined){
        this.growMax = this.maxHeight;
    }
};

Roo.extend(Roo.form.TextArea, Roo.form.TextField,  {
    /**
     * @cfg {Number} growMin The minimum height to allow when grow = true (defaults to 60)
     */
    growMin : 60,
    /**
     * @cfg {Number} growMax The maximum height to allow when grow = true (defaults to 1000)
     */
    growMax: 1000,
    /**
     * @cfg {Boolean} preventScrollbars True to prevent scrollbars from appearing regardless of how much text is
     * in the field (equivalent to setting overflow: hidden, defaults to false)
     */
    preventScrollbars: false,
    /**
     * @cfg {String/Object} autoCreate A DomHelper element spec, or true for a default element spec (defaults to
     * {tag: "textarea", style: "width:300px;height:60px;", autocomplete: "off"})
     */

    // private
    onRender : function(ct, position){
        if(!this.el){
            this.defaultAutoCreate = {
                tag: "textarea",
                style:"width:300px;height:60px;",
                autocomplete: "new-password"
            };
        }
        Roo.form.TextArea.superclass.onRender.call(this, ct, position);
        if(this.grow){
            this.textSizeEl = Roo.DomHelper.append(document.body, {
                tag: "pre", cls: "x-form-grow-sizer"
            });
            if(this.preventScrollbars){
                this.el.setStyle("overflow", "hidden");
            }
            this.el.setHeight(this.growMin);
        }
    },

    onDestroy : function(){
        if(this.textSizeEl){
            this.textSizeEl.parentNode.removeChild(this.textSizeEl);
        }
        Roo.form.TextArea.superclass.onDestroy.call(this);
    },

    // private
    onKeyUp : function(e){
        if(!e.isNavKeyPress() || e.getKey() == e.ENTER){
            this.autoSize();
        }
    },

    /**
     * Automatically grows the field to accomodate the height of the text up to the maximum field height allowed.
     * This only takes effect if grow = true, and fires the autosize event if the height changes.
     */
    autoSize : function(){
        if(!this.grow || !this.textSizeEl){
            return;
        }
        var el = this.el;
        var v = el.dom.value;
        var ts = this.textSizeEl;

        ts.innerHTML = '';
        ts.appendChild(document.createTextNode(v));
        v = ts.innerHTML;

        Roo.fly(ts).setWidth(this.el.getWidth());
        if(v.length < 1){
            v = "&#160;&#160;";
        }else{
            if(Roo.isIE){
                v = v.replace(/\n/g, '<p>&#160;</p>');
            }
            v += "&#160;\n&#160;";
        }
        ts.innerHTML = v;
        var h = Math.min(this.growMax, Math.max(ts.offsetHeight, this.growMin));
        if(h != this.lastHeight){
            this.lastHeight = h;
            this.el.setHeight(h);
            this.fireEvent("autosize", this, h);
        }
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.form.NumberField
 * @extends Roo.form.TextField
 * Numeric text field that provides automatic keystroke filtering and numeric validation.
 * @constructor
 * Creates a new NumberField
 * @param {Object} config Configuration options
 */
Roo.form.NumberField = function(config){
    Roo.form.NumberField.superclass.constructor.call(this, config);
};

Roo.extend(Roo.form.NumberField, Roo.form.TextField,  {
    /**
     * @cfg {String} fieldClass The default CSS class for the field (defaults to "x-form-field x-form-num-field")
     */
    fieldClass: "x-form-field x-form-num-field",
    /**
     * @cfg {Boolean} allowDecimals False to disallow decimal values (defaults to true)
     */
    allowDecimals : true,
    /**
     * @cfg {String} decimalSeparator Character(s) to allow as the decimal separator (defaults to '.')
     */
    decimalSeparator : ".",
    /**
     * @cfg {String} thousandSeparator Character(s) to allow as the thousand separator (defaults to '') - set to ',' for example
     */
    thousandSeparator : "",
    /**
     * @cfg {Number} decimalPrecision The maximum precision to display after the decimal separator (defaults to 2)
     */
    decimalPrecision : 2,
    /**
     * @cfg {Boolean} allowNegative False to prevent entering a negative sign (defaults to true)
     */
    allowNegative : true,
    /**
     * @cfg {Number} minValue The minimum allowed value (defaults to Number.NEGATIVE_INFINITY)
     */
    minValue : Number.NEGATIVE_INFINITY,
    /**
     * @cfg {Number} maxValue The maximum allowed value (defaults to Number.MAX_VALUE)
     */
    maxValue : Number.MAX_VALUE,
    /**
     * @cfg {String} minText Error text to display if the minimum value validation fails (defaults to "The minimum value for this field is {minValue}")
     */
    minText : "The minimum value for this field is {0}",
    /**
     * @cfg {String} maxText Error text to display if the maximum value validation fails (defaults to "The maximum value for this field is {maxValue}")
     */
    maxText : "The maximum value for this field is {0}",
    /**
     * @cfg {String} nanText Error text to display if the value is not a valid number.  For example, this can happen
     * if a valid character like '.' or '-' is left in the field with no number (defaults to "{value} is not a valid number")
     */
    nanText : "{0} is not a valid number",
    
    hiddenField : false,
     
    onRender : function(ct, position)
    {
        Roo.form.TextField.superclass.onRender.call(this, ct, position);
    
            //this.el.dom.removeAttribute('name'); 
        Roo.log("Changing name?");
        if (this.thousandSeparator != '') {
            this.el.dom.setAttribute('name', this.name + '____hidden___' ); 
            this.hiddenField = this.el.insertSibling({ tag:'input', type:'hidden', name: this.name },
                        'before', true);
            this.hiddenField.value = this.value ? this.parseValue(this.value) : '';
            
        }
        this.el.on('blur', this.onBlur, this);
            // prevent input submission
        
            
            
    },
     onBlur : function(){
        this.beforeBlur();
        if(!Roo.isOpera && this.focusClass){ // don't touch in Opera
            this.el.removeClass(this.focusClass);
        }
        this.hasFocus = false;
        if(this.validationEvent !== false && this.validateOnBlur && this.validationEvent != "blur"){
            this.validate();
        }
        var v = this.getValue();
        if(String(v) !== String(this.startValue)){
            this.setValue( this.parseValue(v));
            this.fireEvent('change', this, v, this.startValue);
        }
        this.fireEvent("blur", this);
    },
    
    // override name, so that it works with hidden field.
    getName: function(){
        if (this.thousandSeparator != '') {
            return this.name;
        }
        return Roo.form.TextField.superclass.getName.call(this);
    },
    // private
    initEvents : function(){
          
        var allowed = "0123456789";
        if(this.allowDecimals){
            allowed += this.decimalSeparator;
        }
        allowed += this.thousandSeparator;
        if(this.allowNegative){
            allowed += "-";
        }
        this.stripCharsRe = new RegExp('[^'+allowed+']', 'gi');
        var keyPress = function(e){
            var k = e.getKey();
            if(!Roo.isIE && (e.isSpecialKey() || k == e.BACKSPACE || k == e.DELETE)){
                return;
            }
            var c = e.getCharCode();
            if(allowed.indexOf(String.fromCharCode(c)) === -1){
                e.stopEvent();
            }
        };
        this.el.on("keypress", keyPress, this);
    },

    // private
    validateValue : function(value){
        if(!Roo.form.NumberField.superclass.validateValue.call(this, value)){
            return false;
        }
        if(value.length < 1){ // if it's blank and textfield didn't flag it then it's valid
             return true;
        }
        var num = this.parseValue(value);
        if(isNaN(num)){
            this.markInvalid(String.format(this.nanText, value));
            return false;
        }
        if(num < this.minValue){
            this.markInvalid(String.format(this.minText, this.minValue));
            return false;
        }
        if(num > this.maxValue){
            this.markInvalid(String.format(this.maxText, this.maxValue));
            return false;
        }
        return true;
    },

    getValue : function(){
        return this.fixPrecision(this.parseValue(Roo.form.NumberField.superclass.getValue.call(this)));
    },

    // private
    parseValue : function(value){
        value = parseFloat(String(value).replace(this.decimalSeparator, ".").split(this.thousandSeparator).join(''));
        return isNaN(value) ? '' : value;
    },

    // private
    fixPrecision : function(value){
        var nan = isNaN(value);
        if(!this.allowDecimals || this.decimalPrecision == -1 || nan || !value){
            return nan ? '' : value;
        }
        return parseFloat(value).toFixed(this.decimalPrecision);
    },

    setValue : function(v){
        v = this.fixPrecision(v);
        if(this.thousandSeparator != ''){
            v = Roo.util.Format.number(v, this.decimalPrecision, this.thousandSeparator);
        } 
        Roo.form.NumberField.superclass.setValue.call(this, String(v).replace(".", this.decimalSeparator));
        if (this.hiddenField !== false) {
            this.hiddenField.value = v ? this.parseValue(v) : '';
        }
        

    },

    // private
    decimalPrecisionFcn : function(v){
        return Math.floor(v);
    },

    beforeBlur : function(){
        var v = this.parseValue(this.getRawValue());
        if(v){
            this.setValue(v);
        }
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.form.DateField
 * @extends Roo.form.TriggerField
 * Provides a date input field with a {@link Roo.DatePicker} dropdown and automatic date validation.
* @constructor
* Create a new DateField
* @param {Object} config
 */
Roo.form.DateField = function(config)
{
    Roo.form.DateField.superclass.constructor.call(this, config);
    
      this.addEvents({
         
        /**
         * @event select
         * Fires when a date is selected
	     * @param {Roo.form.DateField} combo This combo box
	     * @param {Date} date The date selected
	     */
        'select' : true
         
    });
    
    
    if(typeof this.minValue == "string") {
        this.minValue = this.parseDate(this.minValue);
    }
    if(typeof this.maxValue == "string") {
        this.maxValue = this.parseDate(this.maxValue);
    }
    this.ddMatch = null;
    if(this.disabledDates){
        var dd = this.disabledDates;
        var re = "(?:";
        for(var i = 0; i < dd.length; i++){
            re += dd[i];
            if(i != dd.length-1) {
                re += "|";
            }
        }
        this.ddMatch = new RegExp(re + ")");
    }
};

Roo.extend(Roo.form.DateField, Roo.form.TriggerField,  {
    /**
     * @cfg {String} format
     * The default date format string which can be overriden for localization support.  The format must be
     * valid according to {@link Date#parseDate} (defaults to 'm/d/y').
     */
    format : "m/d/y",
    /**
     * @cfg {String} altFormats
     * Multiple date formats separated by "|" to try when parsing a user input value and it doesn't match the defined
     * format (defaults to 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d').
     */
    altFormats : "m/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d",
    /**
     * @cfg {Array} disabledDays
     * An array of days to disable, 0 based. For example, [0, 6] disables Sunday and Saturday (defaults to null).
     */
    disabledDays : null,
    /**
     * @cfg {String} disabledDaysText
     * The tooltip to display when the date falls on a disabled day (defaults to 'Disabled')
     */
    disabledDaysText : "Disabled",
    /**
     * @cfg {Array} disabledDates
     * An array of "dates" to disable, as strings. These strings will be used to build a dynamic regular
     * expression so they are very powerful. Some examples:
     * <ul>
     * <li>["03/08/2003", "09/16/2003"] would disable those exact dates</li>
     * <li>["03/08", "09/16"] would disable those days for every year</li>
     * <li>["^03/08"] would only match the beginning (useful if you are using short years)</li>
     * <li>["03/../2006"] would disable every day in March 2006</li>
     * <li>["^03"] would disable every day in every March</li>
     * </ul>
     * In order to support regular expressions, if you are using a date format that has "." in it, you will have to
     * escape the dot when restricting dates. For example: ["03\\.08\\.03"].
     */
    disabledDates : null,
    /**
     * @cfg {String} disabledDatesText
     * The tooltip text to display when the date falls on a disabled date (defaults to 'Disabled')
     */
    disabledDatesText : "Disabled",
	
	
	/**
     * @cfg {Date/String} zeroValue
     * if the date is less that this number, then the field is rendered as empty
     * default is 1800
     */
	zeroValue : '1800-01-01',
	
	
    /**
     * @cfg {Date/String} minValue
     * The minimum allowed date. Can be either a Javascript date object or a string date in a
     * valid format (defaults to null).
     */
    minValue : null,
    /**
     * @cfg {Date/String} maxValue
     * The maximum allowed date. Can be either a Javascript date object or a string date in a
     * valid format (defaults to null).
     */
    maxValue : null,
    /**
     * @cfg {String} minText
     * The error text to display when the date in the cell is before minValue (defaults to
     * 'The date in this field must be after {minValue}').
     */
    minText : "The date in this field must be equal to or after {0}",
    /**
     * @cfg {String} maxText
     * The error text to display when the date in the cell is after maxValue (defaults to
     * 'The date in this field must be before {maxValue}').
     */
    maxText : "The date in this field must be equal to or before {0}",
    /**
     * @cfg {String} invalidText
     * The error text to display when the date in the field is invalid (defaults to
     * '{value} is not a valid date - it must be in the format {format}').
     */
    invalidText : "{0} is not a valid date - it must be in the format {1}",
    /**
     * @cfg {String} triggerClass
     * An additional CSS class used to style the trigger button.  The trigger will always get the
     * class 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-date-trigger'
     * which displays a calendar icon).
     */
    triggerClass : 'x-form-date-trigger',
    

    /**
     * @cfg {Boolean} useIso
     * if enabled, then the date field will use a hidden field to store the 
     * real value as iso formated date. default (false)
     */ 
    useIso : false,
    /**
     * @cfg {String/Object} autoCreate
     * A DomHelper element spec, or true for a default element spec (defaults to
     * {tag: "input", type: "text", size: "10", autocomplete: "off"})
     */ 
    // private
    defaultAutoCreate : {tag: "input", type: "text", size: "10", autocomplete: "off"},
    
    // private
    hiddenField: false,
    
    onRender : function(ct, position)
    {
        Roo.form.DateField.superclass.onRender.call(this, ct, position);
        if (this.useIso) {
            //this.el.dom.removeAttribute('name'); 
            Roo.log("Changing name?");
            this.el.dom.setAttribute('name', this.name + '____hidden___' ); 
            this.hiddenField = this.el.insertSibling({ tag:'input', type:'hidden', name: this.name },
                    'before', true);
            this.hiddenField.value = this.value ? this.formatDate(this.value, 'Y-m-d') : '';
            // prevent input submission
            this.hiddenName = this.name;
        }
            
            
    },
    
    // private
    validateValue : function(value)
    {
        value = this.formatDate(value);
        if(!Roo.form.DateField.superclass.validateValue.call(this, value)){
            Roo.log('super failed');
            return false;
        }
        if(value.length < 1){ // if it's blank and textfield didn't flag it then it's valid
             return true;
        }
        var svalue = value;
        value = this.parseDate(value);
        if(!value){
            Roo.log('parse date failed' + svalue);
            this.markInvalid(String.format(this.invalidText, svalue, this.format));
            return false;
        }
        var time = value.getTime();
        if(this.minValue && time < this.minValue.getTime()){
            this.markInvalid(String.format(this.minText, this.formatDate(this.minValue)));
            return false;
        }
        if(this.maxValue && time > this.maxValue.getTime()){
            this.markInvalid(String.format(this.maxText, this.formatDate(this.maxValue)));
            return false;
        }
        if(this.disabledDays){
            var day = value.getDay();
            for(var i = 0; i < this.disabledDays.length; i++) {
            	if(day === this.disabledDays[i]){
            	    this.markInvalid(this.disabledDaysText);
                    return false;
            	}
            }
        }
        var fvalue = this.formatDate(value);
        if(this.ddMatch && this.ddMatch.test(fvalue)){
            this.markInvalid(String.format(this.disabledDatesText, fvalue));
            return false;
        }
        return true;
    },

    // private
    // Provides logic to override the default TriggerField.validateBlur which just returns true
    validateBlur : function(){
        return !this.menu || !this.menu.isVisible();
    },
    
    getName: function()
    {
        // returns hidden if it's set..
        if (!this.rendered) {return ''};
        return !this.hiddenName && this.el.dom.name  ? this.el.dom.name : (this.hiddenName || '');
        
    },

    /**
     * Returns the current date value of the date field.
     * @return {Date} The date value
     */
    getValue : function(){
        
        return  this.hiddenField ?
                this.hiddenField.value :
                this.parseDate(Roo.form.DateField.superclass.getValue.call(this)) || "";
    },

    /**
     * Sets the value of the date field.  You can pass a date object or any string that can be parsed into a valid
     * date, using DateField.format as the date format, according to the same rules as {@link Date#parseDate}
     * (the default format used is "m/d/y").
     * <br />Usage:
     * <pre><code>
//All of these calls set the same date value (May 4, 2006)

//Pass a date object:
var dt = new Date('5/4/06');
dateField.setValue(dt);

//Pass a date string (default format):
dateField.setValue('5/4/06');

//Pass a date string (custom format):
dateField.format = 'Y-m-d';
dateField.setValue('2006-5-4');
</code></pre>
     * @param {String/Date} date The date or valid date string
     */
    setValue : function(date){
        if (this.hiddenField) {
            this.hiddenField.value = this.formatDate(this.parseDate(date), 'Y-m-d');
        }
        Roo.form.DateField.superclass.setValue.call(this, this.formatDate(this.parseDate(date)));
        // make sure the value field is always stored as a date..
        this.value = this.parseDate(date);
        
        
    },

    // private
    parseDate : function(value){
		
		if (value instanceof Date) {
			if (value < Date.parseDate(this.zeroValue, 'Y-m-d') ) {
				return  '';
			}
			return value;
		}
		
		
        if(!value || value instanceof Date){
            return value;
        }
        var v = Date.parseDate(value, this.format);
         if (!v && this.useIso) {
            v = Date.parseDate(value, 'Y-m-d');
        }
        if(!v && this.altFormats){
            if(!this.altFormatsArray){
                this.altFormatsArray = this.altFormats.split("|");
            }
            for(var i = 0, len = this.altFormatsArray.length; i < len && !v; i++){
                v = Date.parseDate(value, this.altFormatsArray[i]);
            }
        }
		if (v < Date.parseDate(this.zeroValue, 'Y-m-d') ) {
			v = '';
		}
        return v;
    },

    // private
    formatDate : function(date, fmt){
        return (!date || !(date instanceof Date)) ?
               date : date.dateFormat(fmt || this.format);
    },

    // private
    menuListeners : {
        select: function(m, d){
            
            this.setValue(d);
            this.fireEvent('select', this, d);
        },
        show : function(){ // retain focus styling
            this.onFocus();
        },
        hide : function(){
            this.focus.defer(10, this);
            var ml = this.menuListeners;
            this.menu.un("select", ml.select,  this);
            this.menu.un("show", ml.show,  this);
            this.menu.un("hide", ml.hide,  this);
        }
    },

    // private
    // Implements the default empty TriggerField.onTriggerClick function to display the DatePicker
    onTriggerClick : function(){
        if(this.disabled || this.readOnly){
            return;
        }
        if(this.menu == null){
            this.menu = new Roo.menu.DateMenu();
        }
        Roo.apply(this.menu.picker,  {
            showClear: this.allowBlank,
            minDate : this.minValue,
            maxDate : this.maxValue,
            disabledDatesRE : this.ddMatch,
            disabledDatesText : this.disabledDatesText,
            disabledDays : this.disabledDays,
            disabledDaysText : this.disabledDaysText,
            format : this.useIso ? 'Y-m-d' : this.format,
            minText : String.format(this.minText, this.formatDate(this.minValue)),
            maxText : String.format(this.maxText, this.formatDate(this.maxValue))
        });
        this.menu.on(Roo.apply({}, this.menuListeners, {
            scope:this
        }));
        this.menu.picker.setValue(this.getValue() || new Date());
        this.menu.show(this.el, "tl-bl?");
    },

    beforeBlur : function(){
        var v = this.parseDate(this.getRawValue());
        if(v){
            this.setValue(v);
        }
    },

    /*@
     * overide
     * 
     */
    isDirty : function() {
        if(this.disabled) {
            return false;
        }
        
        if(typeof(this.startValue) === 'undefined'){
            return false;
        }
        
        return String(this.getValue()) !== String(this.startValue);
        
    },
    // @overide
    cleanLeadingSpace : function(e)
    {
       return;
    }
    
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.form.MonthField
 * @extends Roo.form.TriggerField
 * Provides a date input field with a {@link Roo.DatePicker} dropdown and automatic date validation.
* @constructor
* Create a new MonthField
* @param {Object} config
 */
Roo.form.MonthField = function(config){
    
    Roo.form.MonthField.superclass.constructor.call(this, config);
    
      this.addEvents({
         
        /**
         * @event select
         * Fires when a date is selected
	     * @param {Roo.form.MonthFieeld} combo This combo box
	     * @param {Date} date The date selected
	     */
        'select' : true
         
    });
    
    
    if(typeof this.minValue == "string") {
        this.minValue = this.parseDate(this.minValue);
    }
    if(typeof this.maxValue == "string") {
        this.maxValue = this.parseDate(this.maxValue);
    }
    this.ddMatch = null;
    if(this.disabledDates){
        var dd = this.disabledDates;
        var re = "(?:";
        for(var i = 0; i < dd.length; i++){
            re += dd[i];
            if(i != dd.length-1) {
                re += "|";
            }
        }
        this.ddMatch = new RegExp(re + ")");
    }
};

Roo.extend(Roo.form.MonthField, Roo.form.TriggerField,  {
    /**
     * @cfg {String} format
     * The default date format string which can be overriden for localization support.  The format must be
     * valid according to {@link Date#parseDate} (defaults to 'm/d/y').
     */
    format : "M Y",
    /**
     * @cfg {String} altFormats
     * Multiple date formats separated by "|" to try when parsing a user input value and it doesn't match the defined
     * format (defaults to 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d').
     */
    altFormats : "M Y|m/Y|m-y|m-Y|my|mY",
    /**
     * @cfg {Array} disabledDays
     * An array of days to disable, 0 based. For example, [0, 6] disables Sunday and Saturday (defaults to null).
     */
    disabledDays : [0,1,2,3,4,5,6],
    /**
     * @cfg {String} disabledDaysText
     * The tooltip to display when the date falls on a disabled day (defaults to 'Disabled')
     */
    disabledDaysText : "Disabled",
    /**
     * @cfg {Array} disabledDates
     * An array of "dates" to disable, as strings. These strings will be used to build a dynamic regular
     * expression so they are very powerful. Some examples:
     * <ul>
     * <li>["03/08/2003", "09/16/2003"] would disable those exact dates</li>
     * <li>["03/08", "09/16"] would disable those days for every year</li>
     * <li>["^03/08"] would only match the beginning (useful if you are using short years)</li>
     * <li>["03/../2006"] would disable every day in March 2006</li>
     * <li>["^03"] would disable every day in every March</li>
     * </ul>
     * In order to support regular expressions, if you are using a date format that has "." in it, you will have to
     * escape the dot when restricting dates. For example: ["03\\.08\\.03"].
     */
    disabledDates : null,
    /**
     * @cfg {String} disabledDatesText
     * The tooltip text to display when the date falls on a disabled date (defaults to 'Disabled')
     */
    disabledDatesText : "Disabled",
    /**
     * @cfg {Date/String} minValue
     * The minimum allowed date. Can be either a Javascript date object or a string date in a
     * valid format (defaults to null).
     */
    minValue : null,
    /**
     * @cfg {Date/String} maxValue
     * The maximum allowed date. Can be either a Javascript date object or a string date in a
     * valid format (defaults to null).
     */
    maxValue : null,
    /**
     * @cfg {String} minText
     * The error text to display when the date in the cell is before minValue (defaults to
     * 'The date in this field must be after {minValue}').
     */
    minText : "The date in this field must be equal to or after {0}",
    /**
     * @cfg {String} maxTextf
     * The error text to display when the date in the cell is after maxValue (defaults to
     * 'The date in this field must be before {maxValue}').
     */
    maxText : "The date in this field must be equal to or before {0}",
    /**
     * @cfg {String} invalidText
     * The error text to display when the date in the field is invalid (defaults to
     * '{value} is not a valid date - it must be in the format {format}').
     */
    invalidText : "{0} is not a valid date - it must be in the format {1}",
    /**
     * @cfg {String} triggerClass
     * An additional CSS class used to style the trigger button.  The trigger will always get the
     * class 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-date-trigger'
     * which displays a calendar icon).
     */
    triggerClass : 'x-form-date-trigger',
    

    /**
     * @cfg {Boolean} useIso
     * if enabled, then the date field will use a hidden field to store the 
     * real value as iso formated date. default (true)
     */ 
    useIso : true,
    /**
     * @cfg {String/Object} autoCreate
     * A DomHelper element spec, or true for a default element spec (defaults to
     * {tag: "input", type: "text", size: "10", autocomplete: "off"})
     */ 
    // private
    defaultAutoCreate : {tag: "input", type: "text", size: "10", autocomplete: "new-password"},
    
    // private
    hiddenField: false,
    
    hideMonthPicker : false,
    
    onRender : function(ct, position)
    {
        Roo.form.MonthField.superclass.onRender.call(this, ct, position);
        if (this.useIso) {
            this.el.dom.removeAttribute('name'); 
            this.hiddenField = this.el.insertSibling({ tag:'input', type:'hidden', name: this.name },
                    'before', true);
            this.hiddenField.value = this.value ? this.formatDate(this.value, 'Y-m-d') : '';
            // prevent input submission
            this.hiddenName = this.name;
        }
            
            
    },
    
    // private
    validateValue : function(value)
    {
        value = this.formatDate(value);
        if(!Roo.form.MonthField.superclass.validateValue.call(this, value)){
            return false;
        }
        if(value.length < 1){ // if it's blank and textfield didn't flag it then it's valid
             return true;
        }
        var svalue = value;
        value = this.parseDate(value);
        if(!value){
            this.markInvalid(String.format(this.invalidText, svalue, this.format));
            return false;
        }
        var time = value.getTime();
        if(this.minValue && time < this.minValue.getTime()){
            this.markInvalid(String.format(this.minText, this.formatDate(this.minValue)));
            return false;
        }
        if(this.maxValue && time > this.maxValue.getTime()){
            this.markInvalid(String.format(this.maxText, this.formatDate(this.maxValue)));
            return false;
        }
        /*if(this.disabledDays){
            var day = value.getDay();
            for(var i = 0; i < this.disabledDays.length; i++) {
            	if(day === this.disabledDays[i]){
            	    this.markInvalid(this.disabledDaysText);
                    return false;
            	}
            }
        }
        */
        var fvalue = this.formatDate(value);
        /*if(this.ddMatch && this.ddMatch.test(fvalue)){
            this.markInvalid(String.format(this.disabledDatesText, fvalue));
            return false;
        }
        */
        return true;
    },

    // private
    // Provides logic to override the default TriggerField.validateBlur which just returns true
    validateBlur : function(){
        return !this.menu || !this.menu.isVisible();
    },

    /**
     * Returns the current date value of the date field.
     * @return {Date} The date value
     */
    getValue : function(){
        
        
        
        return  this.hiddenField ?
                this.hiddenField.value :
                this.parseDate(Roo.form.MonthField.superclass.getValue.call(this)) || "";
    },

    /**
     * Sets the value of the date field.  You can pass a date object or any string that can be parsed into a valid
     * date, using MonthField.format as the date format, according to the same rules as {@link Date#parseDate}
     * (the default format used is "m/d/y").
     * <br />Usage:
     * <pre><code>
//All of these calls set the same date value (May 4, 2006)

//Pass a date object:
var dt = new Date('5/4/06');
monthField.setValue(dt);

//Pass a date string (default format):
monthField.setValue('5/4/06');

//Pass a date string (custom format):
monthField.format = 'Y-m-d';
monthField.setValue('2006-5-4');
</code></pre>
     * @param {String/Date} date The date or valid date string
     */
    setValue : function(date){
        Roo.log('month setValue' + date);
        // can only be first of month..
        
        var val = this.parseDate(date);
        
        if (this.hiddenField) {
            this.hiddenField.value = this.formatDate(this.parseDate(date), 'Y-m-d');
        }
        Roo.form.MonthField.superclass.setValue.call(this, this.formatDate(this.parseDate(date)));
        this.value = this.parseDate(date);
    },

    // private
    parseDate : function(value){
        if(!value || value instanceof Date){
            value = value ? Date.parseDate(value.format('Y-m') + '-01', 'Y-m-d') : null;
            return value;
        }
        var v = Date.parseDate(value, this.format);
        if (!v && this.useIso) {
            v = Date.parseDate(value, 'Y-m-d');
        }
        if (v) {
            // 
            v = Date.parseDate(v.format('Y-m') +'-01', 'Y-m-d');
        }
        
        
        if(!v && this.altFormats){
            if(!this.altFormatsArray){
                this.altFormatsArray = this.altFormats.split("|");
            }
            for(var i = 0, len = this.altFormatsArray.length; i < len && !v; i++){
                v = Date.parseDate(value, this.altFormatsArray[i]);
            }
        }
        return v;
    },

    // private
    formatDate : function(date, fmt){
        return (!date || !(date instanceof Date)) ?
               date : date.dateFormat(fmt || this.format);
    },

    // private
    menuListeners : {
        select: function(m, d){
            this.setValue(d);
            this.fireEvent('select', this, d);
        },
        show : function(){ // retain focus styling
            this.onFocus();
        },
        hide : function(){
            this.focus.defer(10, this);
            var ml = this.menuListeners;
            this.menu.un("select", ml.select,  this);
            this.menu.un("show", ml.show,  this);
            this.menu.un("hide", ml.hide,  this);
        }
    },
    // private
    // Implements the default empty TriggerField.onTriggerClick function to display the DatePicker
    onTriggerClick : function(){
        if(this.disabled){
            return;
        }
        if(this.menu == null){
            this.menu = new Roo.menu.DateMenu();
           
        }
        
        Roo.apply(this.menu.picker,  {
            
            showClear: this.allowBlank,
            minDate : this.minValue,
            maxDate : this.maxValue,
            disabledDatesRE : this.ddMatch,
            disabledDatesText : this.disabledDatesText,
            
            format : this.useIso ? 'Y-m-d' : this.format,
            minText : String.format(this.minText, this.formatDate(this.minValue)),
            maxText : String.format(this.maxText, this.formatDate(this.maxValue))
            
        });
         this.menu.on(Roo.apply({}, this.menuListeners, {
            scope:this
        }));
       
        
        var m = this.menu;
        var p = m.picker;
        
        // hide month picker get's called when we called by 'before hide';
        
        var ignorehide = true;
        p.hideMonthPicker  = function(disableAnim){
            if (ignorehide) {
                return;
            }
             if(this.monthPicker){
                Roo.log("hideMonthPicker called");
                if(disableAnim === true){
                    this.monthPicker.hide();
                }else{
                    this.monthPicker.slideOut('t', {duration:.2});
                    p.setValue(new Date(m.picker.mpSelYear, m.picker.mpSelMonth, 1));
                    p.fireEvent("select", this, this.value);
                    m.hide();
                }
            }
        }
        
        Roo.log('picker set value');
        Roo.log(this.getValue());
        p.setValue(this.getValue() ? this.parseDate(this.getValue()) : new Date());
        m.show(this.el, 'tl-bl?');
        ignorehide  = false;
        // this will trigger hideMonthPicker..
        
        
        // hidden the day picker
        Roo.select('.x-date-picker table', true).first().dom.style.visibility = "hidden";
        
        
        
      
        
        p.showMonthPicker.defer(100, p);
    
        
       
    },

    beforeBlur : function(){
        var v = this.parseDate(this.getRawValue());
        if(v){
            this.setValue(v);
        }
    }

    /** @cfg {Boolean} grow @hide */
    /** @cfg {Number} growMin @hide */
    /** @cfg {Number} growMax @hide */
    /**
     * @hide
     * @method autoSize
     */
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.form.ComboBox
 * @extends Roo.form.TriggerField
 * A combobox control with support for autocomplete, remote-loading, paging and many other features.
 * @constructor
 * Create a new ComboBox.
 * @param {Object} config Configuration options
 */
Roo.form.ComboBox = function(config){
    Roo.form.ComboBox.superclass.constructor.call(this, config);
    this.addEvents({
        /**
         * @event expand
         * Fires when the dropdown list is expanded
	     * @param {Roo.form.ComboBox} combo This combo box
	     */
        'expand' : true,
        /**
         * @event collapse
         * Fires when the dropdown list is collapsed
	     * @param {Roo.form.ComboBox} combo This combo box
	     */
        'collapse' : true,
        /**
         * @event beforeselect
         * Fires before a list item is selected. Return false to cancel the selection.
	     * @param {Roo.form.ComboBox} combo This combo box
	     * @param {Roo.data.Record} record The data record returned from the underlying store
	     * @param {Number} index The index of the selected item in the dropdown list
	     */
        'beforeselect' : true,
        /**
         * @event select
         * Fires when a list item is selected
	     * @param {Roo.form.ComboBox} combo This combo box
	     * @param {Roo.data.Record} record The data record returned from the underlying store (or false on clear)
	     * @param {Number} index The index of the selected item in the dropdown list
	     */
        'select' : true,
        /**
         * @event beforequery
         * Fires before all queries are processed. Return false to cancel the query or set cancel to true.
         * The event object passed has these properties:
	     * @param {Roo.form.ComboBox} combo This combo box
	     * @param {String} query The query
	     * @param {Boolean} forceAll true to force "all" query
	     * @param {Boolean} cancel true to cancel the query
	     * @param {Object} e The query event object
	     */
        'beforequery': true,
         /**
         * @event add
         * Fires when the 'add' icon is pressed (add a listener to enable add button)
	     * @param {Roo.form.ComboBox} combo This combo box
	     */
        'add' : true,
        /**
         * @event edit
         * Fires when the 'edit' icon is pressed (add a listener to enable add button)
	     * @param {Roo.form.ComboBox} combo This combo box
	     * @param {Roo.data.Record|false} record The data record returned from the underlying store (or false on nothing selected)
	     */
        'edit' : true
        
        
    });
    if(this.transform){
        this.allowDomMove = false;
        var s = Roo.getDom(this.transform);
        if(!this.hiddenName){
            this.hiddenName = s.name;
        }
        if(!this.store){
            this.mode = 'local';
            var d = [], opts = s.options;
            for(var i = 0, len = opts.length;i < len; i++){
                var o = opts[i];
                var value = (Roo.isIE ? o.getAttributeNode('value').specified : o.hasAttribute('value')) ? o.value : o.text;
                if(o.selected) {
                    this.value = value;
                }
                d.push([value, o.text]);
            }
            this.store = new Roo.data.SimpleStore({
                'id': 0,
                fields: ['value', 'text'],
                data : d
            });
            this.valueField = 'value';
            this.displayField = 'text';
        }
        s.name = Roo.id(); // wipe out the name in case somewhere else they have a reference
        if(!this.lazyRender){
            this.target = true;
            this.el = Roo.DomHelper.insertBefore(s, this.autoCreate || this.defaultAutoCreate);
            s.parentNode.removeChild(s); // remove it
            this.render(this.el.parentNode);
        }else{
            s.parentNode.removeChild(s); // remove it
        }

    }
    if (this.store) {
        this.store = Roo.factory(this.store, Roo.data);
    }
    
    this.selectedIndex = -1;
    if(this.mode == 'local'){
        if(config.queryDelay === undefined){
            this.queryDelay = 10;
        }
        if(config.minChars === undefined){
            this.minChars = 0;
        }
    }
};

Roo.extend(Roo.form.ComboBox, Roo.form.TriggerField, {
    /**
     * @cfg {String/HTMLElement/Element} transform The id, DOM node or element of an existing select to convert to a ComboBox
     */
    /**
     * @cfg {Boolean} lazyRender True to prevent the ComboBox from rendering until requested (should always be used when
     * rendering into an Roo.Editor, defaults to false)
     */
    /**
     * @cfg {Boolean/Object} autoCreate A DomHelper element spec, or true for a default element spec (defaults to:
     * {tag: "input", type: "text", size: "24", autocomplete: "off"})
     */
    /**
     * @cfg {Roo.data.Store} store The data store to which this combo is bound (defaults to undefined)
     */
    /**
     * @cfg {String} title If supplied, a header element is created containing this text and added into the top of
     * the dropdown list (defaults to undefined, with no header element)
     */

     /**
     * @cfg {String/Roo.Template} tpl The template to use to render the output
     */
     
    // private
    defaultAutoCreate : {tag: "input", type: "text", size: "24", autocomplete: "off"},
    /**
     * @cfg {Number} listWidth The width in pixels of the dropdown list (defaults to the width of the ComboBox field)
     */
    listWidth: undefined,
    /**
     * @cfg {String} displayField The underlying data field name to bind to this CombBox (defaults to undefined if
     * mode = 'remote' or 'text' if mode = 'local')
     */
    displayField: undefined,
    /**
     * @cfg {String} valueField The underlying data value name to bind to this CombBox (defaults to undefined if
     * mode = 'remote' or 'value' if mode = 'local'). 
     * Note: use of a valueField requires the user make a selection
     * in order for a value to be mapped.
     */
    valueField: undefined,
    
    
    /**
     * @cfg {String} hiddenName If specified, a hidden form field with this name is dynamically generated to store the
     * field's data value (defaults to the underlying DOM element's name)
     */
    hiddenName: undefined,
    /**
     * @cfg {String} listClass CSS class to apply to the dropdown list element (defaults to '')
     */
    listClass: '',
    /**
     * @cfg {String} selectedClass CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')
     */
    selectedClass: 'x-combo-selected',
    /**
     * @cfg {String} triggerClass An additional CSS class used to style the trigger button.  The trigger will always get the
     * class 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-arrow-trigger'
     * which displays a downward arrow icon).
     */
    triggerClass : 'x-form-arrow-trigger',
    /**
     * @cfg {Boolean/String} shadow True or "sides" for the default effect, "frame" for 4-way shadow, and "drop" for bottom-right
     */
    shadow:'sides',
    /**
     * @cfg {String} listAlign A valid anchor position value. See {@link Roo.Element#alignTo} for details on supported
     * anchor positions (defaults to 'tl-bl')
     */
    listAlign: 'tl-bl?',
    /**
     * @cfg {Number} maxHeight The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)
     */
    maxHeight: 300,
    /**
     * @cfg {String} triggerAction The action to execute when the trigger field is activated.  Use 'all' to run the
     * query specified by the allQuery config option (defaults to 'query')
     */
    triggerAction: 'query',
    /**
     * @cfg {Number} minChars The minimum number of characters the user must type before autocomplete and typeahead activate
     * (defaults to 4, does not apply if editable = false)
     */
    minChars : 4,
    /**
     * @cfg {Boolean} typeAhead True to populate and autoselect the remainder of the text being typed after a configurable
     * delay (typeAheadDelay) if it matches a known value (defaults to false)
     */
    typeAhead: false,
    /**
     * @cfg {Number} queryDelay The length of time in milliseconds to delay between the start of typing and sending the
     * query to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local')
     */
    queryDelay: 500,
    /**
     * @cfg {Number} pageSize If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the
     * filter queries will execute with page start and limit parameters.  Only applies when mode = 'remote' (defaults to 0)
     */
    pageSize: 0,
    /**
     * @cfg {Boolean} selectOnFocus True to select any existing text in the field immediately on focus.  Only applies
     * when editable = true (defaults to false)
     */
    selectOnFocus:false,
    /**
     * @cfg {String} queryParam Name of the query as it will be passed on the querystring (defaults to 'query')
     */
    queryParam: 'query',
    /**
     * @cfg {String} loadingText The text to display in the dropdown list while data is loading.  Only applies
     * when mode = 'remote' (defaults to 'Loading...')
     */
    loadingText: 'Loading...',
    /**
     * @cfg {Boolean} resizable True to add a resize handle to the bottom of the dropdown list (defaults to false)
     */
    resizable: false,
    /**
     * @cfg {Number} handleHeight The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8)
     */
    handleHeight : 8,
    /**
     * @cfg {Boolean} editable False to prevent the user from typing text directly into the field, just like a
     * traditional select (defaults to true)
     */
    editable: true,
    /**
     * @cfg {String} allQuery The text query to send to the server to return all records for the list with no filtering (defaults to '')
     */
    allQuery: '',
    /**
     * @cfg {String} mode Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)
     */
    mode: 'remote',
    /**
     * @cfg {Number} minListWidth The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if
     * listWidth has a higher value)
     */
    minListWidth : 70,
    /**
     * @cfg {Boolean} forceSelection True to restrict the selected value to one of the values in the list, false to
     * allow the user to set arbitrary text into the field (defaults to false)
     */
    forceSelection:false,
    /**
     * @cfg {Number} typeAheadDelay The length of time in milliseconds to wait until the typeahead text is displayed
     * if typeAhead = true (defaults to 250)
     */
    typeAheadDelay : 250,
    /**
     * @cfg {String} valueNotFoundText When using a name/value combo, if the value passed to setValue is not found in
     * the store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)
     */
    valueNotFoundText : undefined,
    /**
     * @cfg {Boolean} blockFocus Prevents all focus calls, so it can work with things like HTML edtor bar
     */
    blockFocus : false,
    
    /**
     * @cfg {Boolean} disableClear Disable showing of clear button.
     */
    disableClear : false,
    /**
     * @cfg {Boolean} alwaysQuery  Disable caching of results, and always send query
     */
    alwaysQuery : false,
    
    //private
    addicon : false,
    editicon: false,
    
    // element that contains real text value.. (when hidden is used..)
     
    // private
    onRender : function(ct, position)
    {
        Roo.form.ComboBox.superclass.onRender.call(this, ct, position);
        
		if(this.hiddenName){
            this.hiddenField = this.el.insertSibling({tag:'input', type:'hidden', name: this.hiddenName, id:  (this.hiddenId||this.hiddenName)},
                    'before', true);
            this.hiddenField.value =
                this.hiddenValue !== undefined ? this.hiddenValue :
                this.value !== undefined ? this.value : '';

            // prevent input submission
            this.el.dom.removeAttribute('name');
             
             
        }
	
        if(Roo.isGecko){
            this.el.dom.setAttribute('autocomplete', 'off');
        }

        var cls = 'x-combo-list';

        this.list = new Roo.Layer({
            shadow: this.shadow, cls: [cls, this.listClass].join(' '), constrain:false
        });

        var lw = this.listWidth || Math.max(this.wrap.getWidth(), this.minListWidth);
        this.list.setWidth(lw);
        this.list.swallowEvent('mousewheel');
        this.assetHeight = 0;

        if(this.title){
            this.header = this.list.createChild({cls:cls+'-hd', html: this.title});
            this.assetHeight += this.header.getHeight();
        }

        this.innerList = this.list.createChild({cls:cls+'-inner'});
        this.innerList.on('mouseover', this.onViewOver, this);
        this.innerList.on('mousemove', this.onViewMove, this);
        this.innerList.setWidth(lw - this.list.getFrameWidth('lr'));
        
        if(this.allowBlank && !this.pageSize && !this.disableClear){
            this.footer = this.list.createChild({cls:cls+'-ft'});
            this.pageTb = new Roo.Toolbar(this.footer);
           
        }
        if(this.pageSize){
            this.footer = this.list.createChild({cls:cls+'-ft'});
            this.pageTb = new Roo.PagingToolbar(this.footer, this.store,
                    {pageSize: this.pageSize});
            
        }
        
        if (this.pageTb && this.allowBlank && !this.disableClear) {
            var _this = this;
            this.pageTb.add(new Roo.Toolbar.Fill(), {
                cls: 'x-btn-icon x-btn-clear',
                text: '&#160;',
                handler: function()
                {
                    _this.collapse();
                    _this.clearValue();
                    _this.onSelect(false, -1);
                }
            });
        }
        if (this.footer) {
            this.assetHeight += this.footer.getHeight();
        }
        

        if(!this.tpl){
            this.tpl = '<div class="'+cls+'-item">{' + this.displayField + '}</div>';
        }

        this.view = new Roo.View(this.innerList, this.tpl, {
            singleSelect:true,
	    store: this.store,
	    selectedClass: this.selectedClass
        });

        this.view.on('click', this.onViewClick, this);

        this.store.on('beforeload', this.onBeforeLoad, this);
        this.store.on('load', this.onLoad, this);
        this.store.on('loadexception', this.onLoadException, this);

        if(this.resizable){
            this.resizer = new Roo.Resizable(this.list,  {
               pinned:true, handles:'se'
            });
            this.resizer.on('resize', function(r, w, h){
                this.maxHeight = h-this.handleHeight-this.list.getFrameWidth('tb')-this.assetHeight;
                this.listWidth = w;
                this.innerList.setWidth(w - this.list.getFrameWidth('lr'));
                this.restrictHeight();
            }, this);
            this[this.pageSize?'footer':'innerList'].setStyle('margin-bottom', this.handleHeight+'px');
        }
        if(!this.editable){
            this.editable = true;
            this.setEditable(false);
        }  
        
        
        if (typeof(this.events.add.listeners) != 'undefined') {
            
            this.addicon = this.wrap.createChild(
                {tag: 'img', src: Roo.BLANK_IMAGE_URL, cls: 'x-form-combo-add' });  
       
            this.addicon.on('click', function(e) {
                this.fireEvent('add', this);
            }, this);
        }
        if (typeof(this.events.edit.listeners) != 'undefined') {
            
            this.editicon = this.wrap.createChild(
                {tag: 'img', src: Roo.BLANK_IMAGE_URL, cls: 'x-form-combo-edit' });  
            if (this.addicon) {
                this.editicon.setStyle('margin-left', '40px');
            }
            this.editicon.on('click', function(e) {
                
                // we fire even  if inothing is selected..
                this.fireEvent('edit', this, this.lastData );
                
            }, this);
        }
        
        
        
    },

    // private
    initEvents : function(){
        Roo.form.ComboBox.superclass.initEvents.call(this);

        this.keyNav = new Roo.KeyNav(this.el, {
            "up" : function(e){
                this.inKeyMode = true;
                this.selectPrev();
            },

            "down" : function(e){
                if(!this.isExpanded()){
                    this.onTriggerClick();
                }else{
                    this.inKeyMode = true;
                    this.selectNext();
                }
            },

            "enter" : function(e){
                this.onViewClick();
                //return true;
            },

            "esc" : function(e){
                this.collapse();
            },

            "tab" : function(e){
                this.onViewClick(false);
                this.fireEvent("specialkey", this, e);
                return true;
            },

            scope : this,

            doRelay : function(foo, bar, hname){
                if(hname == 'down' || this.scope.isExpanded()){
                   return Roo.KeyNav.prototype.doRelay.apply(this, arguments);
                }
                return true;
            },

            forceKeyDown: true
        });
        this.queryDelay = Math.max(this.queryDelay || 10,
                this.mode == 'local' ? 10 : 250);
        this.dqTask = new Roo.util.DelayedTask(this.initQuery, this);
        if(this.typeAhead){
            this.taTask = new Roo.util.DelayedTask(this.onTypeAhead, this);
        }
        if(this.editable !== false){
            this.el.on("keyup", this.onKeyUp, this);
        }
        if(this.forceSelection){
            this.on('blur', this.doForce, this);
        }
    },

    onDestroy : function(){
        if(this.view){
            this.view.setStore(null);
            this.view.el.removeAllListeners();
            this.view.el.remove();
            this.view.purgeListeners();
        }
        if(this.list){
            this.list.destroy();
        }
        if(this.store){
            this.store.un('beforeload', this.onBeforeLoad, this);
            this.store.un('load', this.onLoad, this);
            this.store.un('loadexception', this.onLoadException, this);
        }
        Roo.form.ComboBox.superclass.onDestroy.call(this);
    },

    // private
    fireKey : function(e){
        if(e.isNavKeyPress() && !this.list.isVisible()){
            this.fireEvent("specialkey", this, e);
        }
    },

    // private
    onResize: function(w, h){
        Roo.form.ComboBox.superclass.onResize.apply(this, arguments);
        
        if(typeof w != 'number'){
            // we do not handle it!?!?
            return;
        }
        var tw = this.trigger.getWidth();
        tw += this.addicon ? this.addicon.getWidth() : 0;
        tw += this.editicon ? this.editicon.getWidth() : 0;
        var x = w - tw;
        this.el.setWidth( this.adjustWidth('input', x));
            
        this.trigger.setStyle('left', x+'px');
        
        if(this.list && this.listWidth === undefined){
            var lw = Math.max(x + this.trigger.getWidth(), this.minListWidth);
            this.list.setWidth(lw);
            this.innerList.setWidth(lw - this.list.getFrameWidth('lr'));
        }
        
    
        
    },

    /**
     * Allow or prevent the user from directly editing the field text.  If false is passed,
     * the user will only be able to select from the items defined in the dropdown list.  This method
     * is the runtime equivalent of setting the 'editable' config option at config time.
     * @param {Boolean} value True to allow the user to directly edit the field text
     */
    setEditable : function(value){
        if(value == this.editable){
            return;
        }
        this.editable = value;
        if(!value){
            this.el.dom.setAttribute('readOnly', true);
            this.el.on('mousedown', this.onTriggerClick,  this);
            this.el.addClass('x-combo-noedit');
        }else{
            this.el.dom.setAttribute('readOnly', false);
            this.el.un('mousedown', this.onTriggerClick,  this);
            this.el.removeClass('x-combo-noedit');
        }
    },

    // private
    onBeforeLoad : function(){
        if(!this.hasFocus){
            return;
        }
        this.innerList.update(this.loadingText ?
               '<div class="loading-indicator">'+this.loadingText+'</div>' : '');
        this.restrictHeight();
        this.selectedIndex = -1;
    },

    // private
    onLoad : function(){
        if(!this.hasFocus){
            return;
        }
        if(this.store.getCount() > 0){
            this.expand();
            this.restrictHeight();
            if(this.lastQuery == this.allQuery){
                if(this.editable){
                    this.el.dom.select();
                }
                if(!this.selectByValue(this.value, true)){
                    this.select(0, true);
                }
            }else{
                this.selectNext();
                if(this.typeAhead && this.lastKey != Roo.EventObject.BACKSPACE && this.lastKey != Roo.EventObject.DELETE){
                    this.taTask.delay(this.typeAheadDelay);
                }
            }
        }else{
            this.onEmptyResults();
        }
        //this.el.focus();
    },
    // private
    onLoadException : function()
    {
        this.collapse();
        Roo.log(this.store.reader.jsonData);
        if (this.store && typeof(this.store.reader.jsonData.errorMsg) != 'undefined') {
            Roo.MessageBox.alert("Error loading",this.store.reader.jsonData.errorMsg);
        }
        
        
    },
    // private
    onTypeAhead : function(){
        if(this.store.getCount() > 0){
            var r = this.store.getAt(0);
            var newValue = r.data[this.displayField];
            var len = newValue.length;
            var selStart = this.getRawValue().length;
            if(selStart != len){
                this.setRawValue(newValue);
                this.selectText(selStart, newValue.length);
            }
        }
    },

    // private
    onSelect : function(record, index){
        if(this.fireEvent('beforeselect', this, record, index) !== false){
            this.setFromData(index > -1 ? record.data : false);
            this.collapse();
            this.fireEvent('select', this, record, index);
        }
    },

    /**
     * Returns the currently selected field value or empty string if no value is set.
     * @return {String} value The selected value
     */
    getValue : function(){
        if(this.valueField){
            return typeof this.value != 'undefined' ? this.value : '';
        }
        return Roo.form.ComboBox.superclass.getValue.call(this);
    },

    /**
     * Clears any text/value currently set in the field
     */
    clearValue : function(){
        if(this.hiddenField){
            this.hiddenField.value = '';
        }
        this.value = '';
        this.setRawValue('');
        this.lastSelectionText = '';
        
    },

    /**
     * Sets the specified value into the field.  If the value finds a match, the corresponding record text
     * will be displayed in the field.  If the value does not match the data value of an existing item,
     * and the valueNotFoundText config option is defined, it will be displayed as the default field text.
     * Otherwise the field will be blank (although the value will still be set).
     * @param {String} value The value to match
     */
    setValue : function(v){
        var text = v;
        if(this.valueField){
            var r = this.findRecord(this.valueField, v);
            if(r){
                text = r.data[this.displayField];
            }else if(this.valueNotFoundText !== undefined){
                text = this.valueNotFoundText;
            }
        }
        this.lastSelectionText = text;
        if(this.hiddenField){
            this.hiddenField.value = v;
        }
        Roo.form.ComboBox.superclass.setValue.call(this, text);
        this.value = v;
    },
    /**
     * @property {Object} the last set data for the element
     */
    
    lastData : false,
    /**
     * Sets the value of the field based on a object which is related to the record format for the store.
     * @param {Object} value the value to set as. or false on reset?
     */
    setFromData : function(o){
        var dv = ''; // display value
        var vv = ''; // value value..
        this.lastData = o;
        if (this.displayField) {
            dv = !o || typeof(o[this.displayField]) == 'undefined' ? '' : o[this.displayField];
        } else {
            // this is an error condition!!!
            Roo.log('no  displayField value set for '+ (this.name ? this.name : this.id));
        }
        
        if(this.valueField){
            vv = !o || typeof(o[this.valueField]) == 'undefined' ? dv : o[this.valueField];
        }
        if(this.hiddenField){
            this.hiddenField.value = vv;
            
            this.lastSelectionText = dv;
            Roo.form.ComboBox.superclass.setValue.call(this, dv);
            this.value = vv;
            return;
        }
        // no hidden field.. - we store the value in 'value', but still display
        // display field!!!!
        this.lastSelectionText = dv;
        Roo.form.ComboBox.superclass.setValue.call(this, dv);
        this.value = vv;
        
        
    },
    // private
    reset : function(){
        // overridden so that last data is reset..
        this.setValue(this.resetValue);
        this.originalValue = this.getValue();
        this.clearInvalid();
        this.lastData = false;
        if (this.view) {
            this.view.clearSelections();
        }
    },
    // private
    findRecord : function(prop, value){
        var record;
        if(this.store.getCount() > 0){
            this.store.each(function(r){
                if(r.data[prop] == value){
                    record = r;
                    return false;
                }
                return true;
            });
        }
        return record;
    },
    
    getName: function()
    {
        // returns hidden if it's set..
        if (!this.rendered) {return ''};
        return !this.hiddenName && this.el.dom.name  ? this.el.dom.name : (this.hiddenName || '');
        
    },
    // private
    onViewMove : function(e, t){
        this.inKeyMode = false;
    },

    // private
    onViewOver : function(e, t){
        if(this.inKeyMode){ // prevent key nav and mouse over conflicts
            return;
        }
        var item = this.view.findItemFromChild(t);
        if(item){
            var index = this.view.indexOf(item);
            this.select(index, false);
        }
    },

    // private
    onViewClick : function(doFocus)
    {
        var index = this.view.getSelectedIndexes()[0];
        var r = this.store.getAt(index);
        if(r){
            this.onSelect(r, index);
        }
        if(doFocus !== false && !this.blockFocus){
            this.el.focus();
        }
    },

    // private
    restrictHeight : function(){
        this.innerList.dom.style.height = '';
        var inner = this.innerList.dom;
        var h = Math.max(inner.clientHeight, inner.offsetHeight, inner.scrollHeight);
        this.innerList.setHeight(h < this.maxHeight ? 'auto' : this.maxHeight);
        this.list.beginUpdate();
        this.list.setHeight(this.innerList.getHeight()+this.list.getFrameWidth('tb')+(this.resizable?this.handleHeight:0)+this.assetHeight);
        this.list.alignTo(this.el, this.listAlign);
        this.list.endUpdate();
    },

    // private
    onEmptyResults : function(){
        this.collapse();
    },

    /**
     * Returns true if the dropdown list is expanded, else false.
     */
    isExpanded : function(){
        return this.list.isVisible();
    },

    /**
     * Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.
     * The store must be loaded and the list expanded for this function to work, otherwise use setValue.
     * @param {String} value The data value of the item to select
     * @param {Boolean} scrollIntoView False to prevent the dropdown list from autoscrolling to display the
     * selected item if it is not currently in view (defaults to true)
     * @return {Boolean} True if the value matched an item in the list, else false
     */
    selectByValue : function(v, scrollIntoView){
        if(v !== undefined && v !== null){
            var r = this.findRecord(this.valueField || this.displayField, v);
            if(r){
                this.select(this.store.indexOf(r), scrollIntoView);
                return true;
            }
        }
        return false;
    },

    /**
     * Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.
     * The store must be loaded and the list expanded for this function to work, otherwise use setValue.
     * @param {Number} index The zero-based index of the list item to select
     * @param {Boolean} scrollIntoView False to prevent the dropdown list from autoscrolling to display the
     * selected item if it is not currently in view (defaults to true)
     */
    select : function(index, scrollIntoView){
        this.selectedIndex = index;
        this.view.select(index);
        if(scrollIntoView !== false){
            var el = this.view.getNode(index);
            if(el){
                this.innerList.scrollChildIntoView(el, false);
            }
        }
    },

    // private
    selectNext : function(){
        var ct = this.store.getCount();
        if(ct > 0){
            if(this.selectedIndex == -1){
                this.select(0);
            }else if(this.selectedIndex < ct-1){
                this.select(this.selectedIndex+1);
            }
        }
    },

    // private
    selectPrev : function(){
        var ct = this.store.getCount();
        if(ct > 0){
            if(this.selectedIndex == -1){
                this.select(0);
            }else if(this.selectedIndex != 0){
                this.select(this.selectedIndex-1);
            }
        }
    },

    // private
    onKeyUp : function(e){
        if(this.editable !== false && !e.isSpecialKey()){
            this.lastKey = e.getKey();
            this.dqTask.delay(this.queryDelay);
        }
    },

    // private
    validateBlur : function(){
        return !this.list || !this.list.isVisible();   
    },

    // private
    initQuery : function(){
        this.doQuery(this.getRawValue());
    },

    // private
    doForce : function(){
        if(this.el.dom.value.length > 0){
            this.el.dom.value =
                this.lastSelectionText === undefined ? '' : this.lastSelectionText;
             
        }
    },

    /**
     * Execute a query to filter the dropdown list.  Fires the beforequery event prior to performing the
     * query allowing the query action to be canceled if needed.
     * @param {String} query The SQL query to execute
     * @param {Boolean} forceAll True to force the query to execute even if there are currently fewer characters
     * in the field than the minimum specified by the minChars config option.  It also clears any filter previously
     * saved in the current store (defaults to false)
     */
    doQuery : function(q, forceAll){
        if(q === undefined || q === null){
            q = '';
        }
        var qe = {
            query: q,
            forceAll: forceAll,
            combo: this,
            cancel:false
        };
        if(this.fireEvent('beforequery', qe)===false || qe.cancel){
            return false;
        }
        q = qe.query;
        forceAll = qe.forceAll;
        if(forceAll === true || (q.length >= this.minChars)){
            if(this.lastQuery != q || this.alwaysQuery){
                this.lastQuery = q;
                if(this.mode == 'local'){
                    this.selectedIndex = -1;
                    if(forceAll){
                        this.store.clearFilter();
                    }else{
                        this.store.filter(this.displayField, q);
                    }
                    this.onLoad();
                }else{
                    this.store.baseParams[this.queryParam] = q;
                    this.store.load({
                        params: this.getParams(q)
                    });
                    this.expand();
                }
            }else{
                this.selectedIndex = -1;
                this.onLoad();   
            }
        }
    },

    // private
    getParams : function(q){
        var p = {};
        //p[this.queryParam] = q;
        if(this.pageSize){
            p.start = 0;
            p.limit = this.pageSize;
        }
        return p;
    },

    /**
     * Hides the dropdown list if it is currently expanded. Fires the 'collapse' event on completion.
     */
    collapse : function(){
        if(!this.isExpanded()){
            return;
        }
        this.list.hide();
        Roo.get(document).un('mousedown', this.collapseIf, this);
        Roo.get(document).un('mousewheel', this.collapseIf, this);
        if (!this.editable) {
            Roo.get(document).un('keydown', this.listKeyPress, this);
        }
        this.fireEvent('collapse', this);
    },

    // private
    collapseIf : function(e){
        if(!e.within(this.wrap) && !e.within(this.list)){
            this.collapse();
        }
    },

    /**
     * Expands the dropdown list if it is currently hidden. Fires the 'expand' event on completion.
     */
    expand : function(){
        if(this.isExpanded() || !this.hasFocus){
            return;
        }
        this.list.alignTo(this.el, this.listAlign);
        this.list.show();
        Roo.get(document).on('mousedown', this.collapseIf, this);
        Roo.get(document).on('mousewheel', this.collapseIf, this);
        if (!this.editable) {
            Roo.get(document).on('keydown', this.listKeyPress, this);
        }
        
        this.fireEvent('expand', this);
    },

    // private
    // Implements the default empty TriggerField.onTriggerClick function
    onTriggerClick : function(){
        if(this.disabled){
            return;
        }
        if(this.isExpanded()){
            this.collapse();
            if (!this.blockFocus) {
                this.el.focus();
            }
            
        }else {
            this.hasFocus = true;
            if(this.triggerAction == 'all') {
                this.doQuery(this.allQuery, true);
            } else {
                this.doQuery(this.getRawValue());
            }
            if (!this.blockFocus) {
                this.el.focus();
            }
        }
    },
    listKeyPress : function(e)
    {
        //Roo.log('listkeypress');
        // scroll to first matching element based on key pres..
        if (e.isSpecialKey()) {
            return false;
        }
        var k = String.fromCharCode(e.getKey()).toUpperCase();
        //Roo.log(k);
        var match  = false;
        var csel = this.view.getSelectedNodes();
        var cselitem = false;
        if (csel.length) {
            var ix = this.view.indexOf(csel[0]);
            cselitem  = this.store.getAt(ix);
            if (!cselitem.get(this.displayField) || cselitem.get(this.displayField).substring(0,1).toUpperCase() != k) {
                cselitem = false;
            }
            
        }
        
        this.store.each(function(v) { 
            if (cselitem) {
                // start at existing selection.
                if (cselitem.id == v.id) {
                    cselitem = false;
                }
                return;
            }
                
            if (v.get(this.displayField) && v.get(this.displayField).substring(0,1).toUpperCase() == k) {
                match = this.store.indexOf(v);
                return false;
            }
        }, this);
        
        if (match === false) {
            return true; // no more action?
        }
        // scroll to?
        this.view.select(match);
        var sn = Roo.get(this.view.getSelectedNodes()[0]);
        sn.scrollIntoView(sn.dom.parentNode, false);
    },
	cleanLeadingSpace : function()
	{
		// override textfield strip white space (trigers set on blur)
	}

    /** 
    * @cfg {Boolean} grow 
    * @hide 
    */
    /** 
    * @cfg {Number} growMin 
    * @hide 
    */
    /** 
    * @cfg {Number} growMax 
    * @hide 
    */
    /**
     * @hide
     * @method autoSize
     */
});/*
 * Copyright(c) 2010-2012, Roo J Solutions Limited
 *
 * Licence LGPL
 *
 */

/**
 * @class Roo.form.ComboBoxArray
 * @extends Roo.form.TextField
 * A facebook style adder... for lists of email / people / countries  etc...
 * pick multiple items from a combo box, and shows each one.
 *
 *  Fred [x]  Brian [x]  [Pick another |v]
 *
 *
 *  For this to work: it needs various extra information
 *    - normal combo problay has
 *      name, hiddenName
 *    + displayField, valueField
 *
 *    For our purpose...
 *
 *
 *   If we change from 'extends' to wrapping...
 *   
 *  
 *
 
 
 * @constructor
 * Create a new ComboBoxArray.
 * @param {Object} config Configuration options
 */
 

Roo.form.ComboBoxArray = function(config)
{
    this.addEvents({
        /**
         * @event beforeremove
         * Fires before remove the value from the list
	     * @param {Roo.form.ComboBoxArray} _self This combo box array
             * @param {Roo.form.ComboBoxArray.Item} item removed item
	     */
        'beforeremove' : true,
        /**
         * @event remove
         * Fires when remove the value from the list
	     * @param {Roo.form.ComboBoxArray} _self This combo box array
             * @param {Roo.form.ComboBoxArray.Item} item removed item
	     */
        'remove' : true
        
        
    });
    
    Roo.form.ComboBoxArray.superclass.constructor.call(this, config);
    
    this.items = new Roo.util.MixedCollection(false);
    
    // construct the child combo...
    
    
    
    
   
    
}

 
Roo.extend(Roo.form.ComboBoxArray, Roo.form.TextField,
{ 
    /**
     * @cfg {Roo.form.ComboBox} combo [required] The combo box that is wrapped
     */
    
    lastData : false,
    
    // behavies liek a hiddne field
    inputType:      'hidden',
    /**
     * @cfg {Number} width The width of the box that displays the selected element
     */ 
    width:          300,

    
    
    /**
     * @cfg {String} name    The name of the visable items on this form (eg. titles not ids)
     */
    name : false,
    /**
     * @cfg {String} hiddenName    The hidden name of the field, often contains an comma seperated list of names
     */
    hiddenName : false,
      /**
     * @cfg {String} seperator    The value seperator normally ',' 
     */
    seperator : ',',
    
    
	// private the array of items that are displayed..
    items  : false,
    // private - the hidden field el.
    hiddenEl : false,
    // private - the filed el..
    el : false,
    
    //validateValue : function() { return true; }, // all values are ok!
    //onAddClick: function() { },
    
    onRender : function(ct, position) 
    {
        
        // create the standard hidden element
        //Roo.form.ComboBoxArray.superclass.onRender.call(this, ct, position);
        
        
        // give fake names to child combo;
        this.combo.hiddenName = this.hiddenName ? (this.hiddenName+'-subcombo') : this.hiddenName;
        this.combo.name = this.name ? (this.name+'-subcombo') : this.name;
        if (this.readOnly) {
			this.combo.readOnly = true;
			this.combo.disabled = true;
			
		}
        this.combo = Roo.factory(this.combo, Roo.form);
        this.combo.onRender(ct, position);
        if (typeof(this.combo.width) != 'undefined') {
            this.combo.onResize(this.combo.width,0);
        }
        
        this.combo.initEvents();
        if (this.readOnly) {
			this.combo.hide();
		}
        // assigned so form know we need to do this..
        this.store          = this.combo.store;
        this.valueField     = this.combo.valueField;
        this.displayField   = this.combo.displayField ;
        
        
        this.combo.wrap.addClass('x-cbarray-grp');
        
        var cbwrap = this.combo.wrap.createChild(
            {tag: 'div', cls: 'x-cbarray-cb'},
            this.combo.el.dom
        );
        
             
        this.hiddenEl = this.combo.wrap.createChild({
            tag: 'input',  type:'hidden' , name: this.hiddenName, value : ''
        });
        this.el = this.combo.wrap.createChild({
            tag: 'input',  type:'hidden' , name: this.name, value : ''
        });
         //   this.el.dom.removeAttribute("name");
        
        
        this.outerWrap = this.combo.wrap;
        this.wrap = cbwrap;
        
        this.outerWrap.setWidth(this.width);
        this.outerWrap.dom.removeChild(this.el.dom);
        
        this.wrap.dom.appendChild(this.el.dom);
        this.outerWrap.dom.removeChild(this.combo.trigger.dom);
        this.combo.wrap.dom.appendChild(this.combo.trigger.dom);
        
        this.combo.trigger.setStyle('position','relative');
        this.combo.trigger.setStyle('left', '0px');
        this.combo.trigger.setStyle('top', '2px');
        
        this.combo.el.setStyle('vertical-align', 'text-bottom');
        
        //this.trigger.setStyle('vertical-align', 'top');
        
        // this should use the code from combo really... on('add' ....)
        if (this.adder) {
            
        
            this.adder = this.outerWrap.createChild(
                {tag: 'img', src: Roo.BLANK_IMAGE_URL, cls: 'x-form-adder', style: 'margin-left:2px'});  
            var _t = this;
            this.adder.on('click', function(e) {
                _t.fireEvent('adderclick', this, e);
            }, _t);
        }
        //var _t = this;
        //this.adder.on('click', this.onAddClick, _t);
        
        
        this.combo.on('select', function(cb, rec, ix) {
            this.addItem(rec.data);
            
            cb.setValue('');
            cb.el.dom.value = '';
            //cb.lastData = rec.data;
            // add to list
            
        }, this);
         
	
	
	    
    },
    
	
    
    getName: function()
    {
        // returns hidden if it's set..
        if (!this.rendered) {return ''};
        return  this.hiddenName ? this.hiddenName : this.name;
        
    },
    
    
    onResize: function(w, h){
        
        return;
        // not sure if this is needed..
        //this.combo.onResize(w,h);
        
        if(typeof w != 'number'){
            // we do not handle it!?!?
            return;
        }
        var tw = this.combo.trigger.getWidth();
        tw += this.addicon ? this.addicon.getWidth() : 0;
        tw += this.editicon ? this.editicon.getWidth() : 0;
        var x = w - tw;
        this.combo.el.setWidth( this.combo.adjustWidth('input', x));
            
        this.combo.trigger.setStyle('left', '0px');
        
        if(this.list && this.listWidth === undefined){
            var lw = Math.max(x + this.combo.trigger.getWidth(), this.combo.minListWidth);
            this.list.setWidth(lw);
            this.innerList.setWidth(lw - this.list.getFrameWidth('lr'));
        }
        
    
        
    },
    
    addItem: function(rec)
    {
        var valueField = this.combo.valueField;
        var displayField = this.combo.displayField;
		
		
        if (this.items.indexOfKey(rec[valueField]) > -1) {
            //console.log("GOT " + rec.data.id);
            return;
        }
        var old = this.getValue();
        var x = new Roo.form.ComboBoxArray.Item({
            //id : rec[this.idField],
            data : rec,
            displayField : displayField ,
            tipField : displayField ,
            cb : this
        });
        // use the 
        this.items.add(rec[valueField],x);
        // add it before the element..
        this.updateHiddenEl();
        x.render(this.outerWrap, this.wrap.dom);
		this.fireEvent('change', this, this.getValue(), old);
        // add the image handler..
    },
    
    updateHiddenEl : function()
    {
        this.validate();
        if (!this.hiddenEl) {
            return;
        }
        var ar = [];
        var idField = this.combo.valueField;
        
        this.items.each(function(f) {
            ar.push(f.data[idField]);
        });
        this.hiddenEl.dom.value = ar.join(this.seperator);
        this.validate();
    },
    
    reset : function()
    {
        this.items.clear();
        
        Roo.each(this.outerWrap.select('.x-cbarray-item', true).elements, function(el){
           el.remove();
        });
        
        this.el.dom.value = '';
        if (this.hiddenEl) {
            this.hiddenEl.dom.value = '';
        }
        
    },
    getValue: function()
    {
        return this.hiddenEl ? this.hiddenEl.dom.value : '';
    },
    setValue: function(v) // not a valid action - must use addItems..
    {
        
        this.reset();
         
        if (this.store.isLocal && (typeof(v) == 'string')) {
            // then we can use the store to find the values..
            // comma seperated at present.. this needs to allow JSON based encoding..
            this.hiddenEl.value  = v;
            var v_ar = [];
            Roo.each(v.split(this.seperator), function(k) {
                Roo.log("CHECK " + this.valueField + ',' + k);
                var li = this.store.query(this.valueField, k);
                if (!li.length) {
                    return;
                }
                var add = {};
                add[this.valueField] = k;
                add[this.displayField] = li.item(0).data[this.displayField];
                
                this.addItem(add);
            }, this) 
             
        }
        if (typeof(v) == 'object' ) {
            // then let's assume it's an array of objects..
            Roo.each(v, function(l) {
                var add = l;
                if (typeof(l) == 'string') {
                    add = {};
                    add[this.valueField] = l;
                    add[this.displayField] = l
                }
                this.addItem(add);
            }, this);
             
        }
        
        
    },
	/**
	 * Get the key/value data from the contents.
	 * 
	 * @returns Array of objects 
	 */
	
	getItemsValue: function()
	{
		var ret  = [];
		this.items.each(function(v) {
			ret.push(v.data);
		});
		return ret;
	},
	
	
    setFromData: function(v )
    {
        
		 
		// this recieves an object, if setValues is called.
        this.reset();
        this.el.dom.value = v[this.displayField];
        this.hiddenEl.dom.value = v[this.valueField];
		if (typeof(v[this.valueField]) == 'object' && v[this.valueField].length) {
		   //value is an array of objects?
		    for (var i = 0 ; i < v[this.valueField].length; i++) {
				this.addItem(v[this.valueField][i]);
			}
			return;
		}
		
		
        if (typeof(v[this.valueField]) != 'string' || !v[this.valueField].length) {
            return;
        }
        var kv = v[this.valueField];
        var dv = v[this.displayField];
        kv = typeof(kv) != 'string' ? '' : kv;
        dv = typeof(dv) != 'string' ? '' : dv;
        
        
        var keys = kv.split(this.seperator);
        var display = dv.split(this.seperator);
        for (var i = 0 ; i < keys.length; i++) {
            add = {};
            add[this.valueField] = keys[i];
            add[this.displayField] = display[i];
            this.addItem(add);
        }
      
        
    },
    
    /**
     * Validates the combox array value
     * @return {Boolean} True if the value is valid, else false
     */
    validate : function(){
        if(this.disabled || this.validateValue(this.processValue(this.getValue()))){
            this.clearInvalid();
            return true;
        }
        return false;
    },
    
    validateValue : function(value){
        return Roo.form.ComboBoxArray.superclass.validateValue.call(this, this.getValue());
        
    },
    
    /*@
     * overide
     * 
     */
    isDirty : function() {
        if(this.disabled) {
            return false;
        }
        
        try {
            var d = Roo.decode(String(this.originalValue));
        } catch (e) {
            return String(this.getValue()) !== String(this.originalValue);
        }
        
        var originalValue = [];
        
        for (var i = 0; i < d.length; i++){
            originalValue.push(d[i][this.valueField]);
        }
        
        return String(this.getValue()) !== String(originalValue.join(this.seperator));
        
    }
    
});



/**
 * @class Roo.form.ComboBoxArray.Item
 * @extends Roo.BoxComponent
 * A selected item in the list
 *  Fred [x]  Brian [x]  [Pick another |v]
 * 
 * @constructor
 * Create a new item.
 * @param {Object} config Configuration options
 */
 
Roo.form.ComboBoxArray.Item = function(config) {
    config.id = Roo.id();
    Roo.form.ComboBoxArray.Item.superclass.constructor.call(this, config);
}

Roo.extend(Roo.form.ComboBoxArray.Item, Roo.BoxComponent, {
    data : {},
    cb: false,
    displayField : false,
    tipField : false,
     
    
    defaultAutoCreate : {
        tag: 'div',
        cls: 'x-cbarray-item',
        cn : [ 
            { tag: 'div' },
            {
                tag: 'img',
                width:16,
                height : 16,
                src : Roo.BLANK_IMAGE_URL ,
                align: 'center'
            }
        ]
        
    },
    
 
    onRender : function(ct, position)
    {
        Roo.form.Field.superclass.onRender.call(this, ct, position);
        
        if(!this.el){
            var cfg = this.getAutoCreate();
            this.el = ct.createChild(cfg, position);
        }
        
        this.el.child('img').dom.setAttribute('src', Roo.BLANK_IMAGE_URL);
        
        this.el.child('div').dom.innerHTML = this.cb.renderer ? 
            this.cb.renderer(this.data) :
            String.format('{0}',this.data[this.displayField]);
        
            
        this.el.child('div').dom.setAttribute('qtip',
                        String.format('{0}',this.data[this.tipField])
        );
    	this.el.child('img').on('click', this.remove, this);
		if (this.cb.readOnly) {
			this.el.child('img').hide();
		}
        
        
    },
   
    remove : function()
    {
        if(this.cb.disabled || this.cb.readOnly){
            return;
        }
        
        if(false !== this.cb.fireEvent('beforeremove', this.cb, this)){
			var old = this.cb.getValue();
            this.cb.items.remove(this);
            this.el.child('img').un('click', this.remove, this);
            this.el.remove();
            this.cb.updateHiddenEl();
			
            this.cb.fireEvent('remove', this.cb, this);
			this.cb.fireEvent('change', this.cb, this.cb.getValue(), old);
			
        }
        
    }
});/*
 * RooJS Library 1.1.1
 * Copyright(c) 2008-2011  Alan Knowles
 *
 * License - LGPL
 */
 

/**
 * @class Roo.form.ComboNested
 * @extends Roo.form.ComboBox
 * A combobox for that allows selection of nested items in a list,
 * eg.
 *
 *  Book
 *    -> red
 *    -> green
 *  Table
 *    -> square
 *      ->red
 *      ->green
 *    -> rectangle
 *      ->green
 *      
 * 
 * @constructor
 * Create a new ComboNested
 * @param {Object} config Configuration options
 */
Roo.form.ComboNested = function(config){
    Roo.form.ComboCheck.superclass.constructor.call(this, config);
    // should verify some data...
    // like
    // hiddenName = required..
    // displayField = required
    // valudField == required
    var req= [ 'hiddenName', 'displayField', 'valueField' ];
    var _t = this;
    Roo.each(req, function(e) {
        if ((typeof(_t[e]) == 'undefined' ) || !_t[e].length) {
            throw "Roo.form.ComboNested : missing value for: " + e;
        }
    });
     
    
};

Roo.extend(Roo.form.ComboNested, Roo.form.ComboBox, {
   
    /*
     * @config {Number} max Number of columns to show
     */
    
    maxColumns : 3,
   
    list : null, // the outermost div..
    innerLists : null, // the
    views : null,
    stores : null,
    // private
    loadingChildren : false,
    
    onRender : function(ct, position)
    {
        Roo.form.ComboBox.superclass.onRender.call(this, ct, position); // skip parent call - got to above..
        
        if(this.hiddenName){
            this.hiddenField = this.el.insertSibling({tag:'input', type:'hidden', name: this.hiddenName, id:  (this.hiddenId||this.hiddenName)},
                    'before', true);
            this.hiddenField.value =
                this.hiddenValue !== undefined ? this.hiddenValue :
                this.value !== undefined ? this.value : '';

            // prevent input submission
            this.el.dom.removeAttribute('name');
             
             
        }
	
        if(Roo.isGecko){
            this.el.dom.setAttribute('autocomplete', 'off');
        }

        var cls = 'x-combo-list';

        this.list = new Roo.Layer({
            shadow: this.shadow, cls: [cls, this.listClass].join(' '), constrain:false
        });

        var lw = this.listWidth || Math.max(this.wrap.getWidth(), this.minListWidth);
        this.list.setWidth(lw);
        this.list.swallowEvent('mousewheel');
        this.assetHeight = 0;

        if(this.title){
            this.header = this.list.createChild({cls:cls+'-hd', html: this.title});
            this.assetHeight += this.header.getHeight();
        }
        this.innerLists = [];
        this.views = [];
        this.stores = [];
        for (var i =0 ; i < this.maxColumns; i++) {
            this.onRenderList( cls, i);
        }
        
        // always needs footer, as we are going to have an 'OK' button.
        this.footer = this.list.createChild({cls:cls+'-ft'});
        this.pageTb = new Roo.Toolbar(this.footer);  
        var _this = this;
        this.pageTb.add(  {
            
            text: 'Done',
            handler: function()
            {
                _this.collapse();
            }
        });
        
        if ( this.allowBlank && !this.disableClear) {
            
            this.pageTb.add(new Roo.Toolbar.Fill(), {
                cls: 'x-btn-icon x-btn-clear',
                text: '&#160;',
                handler: function()
                {
                    _this.collapse();
                    _this.clearValue();
                    _this.onSelect(false, -1);
                }
            });
        }
        if (this.footer) {
            this.assetHeight += this.footer.getHeight();
        }
        
    },
    onRenderList : function (  cls, i)
    {
        
        var lw = Math.floor(
                ((this.listWidth * this.maxColumns || Math.max(this.wrap.getWidth(), this.minListWidth)) - this.list.getFrameWidth('lr')) / this.maxColumns
        );
        
        this.list.setWidth(lw); // default to '1'

        var il = this.innerLists[i] = this.list.createChild({cls:cls+'-inner'});
        //il.on('mouseover', this.onViewOver, this, { list:  i });
        //il.on('mousemove', this.onViewMove, this, { list:  i });
        il.setWidth(lw);
        il.setStyle({ 'overflow-x' : 'hidden'});

        if(!this.tpl){
            this.tpl = new Roo.Template({
                html :  '<div class="'+cls+'-item '+cls+'-item-{cn:this.isEmpty}">{' + this.displayField + '}</div>',
                isEmpty: function (value, allValues) {
                    //Roo.log(value);
                    var dl = typeof(value.data) != 'undefined' ? value.data.length : value.length; ///json is a nested response..
                    return dl ? 'has-children' : 'no-children'
                }
            });
        }
        
        var store  = this.store;
        if (i > 0) {
            store  = new Roo.data.SimpleStore({
                //fields : this.store.reader.meta.fields,
                reader : this.store.reader,
                data : [ ]
            });
        }
        this.stores[i]  = store;
                  
        var view = this.views[i] = new Roo.View(
            il,
            this.tpl,
            {
                singleSelect:true,
                store: store,
                selectedClass: this.selectedClass
            }
        );
        view.getEl().setWidth(lw);
        view.getEl().setStyle({
            position: i < 1 ? 'relative' : 'absolute',
            top: 0,
            left: (i * lw ) + 'px',
            display : i > 0 ? 'none' : 'block'
        });
        view.on('selectionchange', this.onSelectChange.createDelegate(this, {list : i }, true));
        view.on('dblclick', this.onDoubleClick.createDelegate(this, {list : i }, true));
        //view.on('click', this.onViewClick, this, { list : i });

        store.on('beforeload', this.onBeforeLoad, this);
        store.on('load',  this.onLoad, this, { list  : i});
        store.on('loadexception', this.onLoadException, this);

        // hide the other vies..
        
        
        
    },
      
    restrictHeight : function()
    {
        var mh = 0;
        Roo.each(this.innerLists, function(il,i) {
            var el = this.views[i].getEl();
            el.dom.style.height = '';
            var inner = el.dom;
            var h = Math.max(il.clientHeight, il.offsetHeight, il.scrollHeight);
            // only adjust heights on other ones..
            mh = Math.max(h, mh);
            if (i < 1) {
                
                el.setHeight(h < this.maxHeight ? 'auto' : this.maxHeight);
                il.setHeight(h < this.maxHeight ? 'auto' : this.maxHeight);
               
            }
            
            
        }, this);
        
        this.list.beginUpdate();
        this.list.setHeight(mh+this.list.getFrameWidth('tb')+this.assetHeight);
        this.list.alignTo(this.el, this.listAlign);
        this.list.endUpdate();
        
    },
     
    
    // -- store handlers..
    // private
    onBeforeLoad : function()
    {
        if(!this.hasFocus){
            return;
        }
        this.innerLists[0].update(this.loadingText ?
               '<div class="loading-indicator">'+this.loadingText+'</div>' : '');
        this.restrictHeight();
        this.selectedIndex = -1;
    },
    // private
    onLoad : function(a,b,c,d)
    {
        if (!this.loadingChildren) {
            // then we are loading the top level. - hide the children
            for (var i = 1;i < this.views.length; i++) {
                this.views[i].getEl().setStyle({ display : 'none' });
            }
            var lw = Math.floor(
                ((this.listWidth * this.maxColumns || Math.max(this.wrap.getWidth(), this.minListWidth)) - this.list.getFrameWidth('lr')) / this.maxColumns
            );
        
             this.list.setWidth(lw); // default to '1'

            
        }
        if(!this.hasFocus){
            return;
        }
        
        if(this.store.getCount() > 0) {
            this.expand();
            this.restrictHeight();   
        } else {
            this.onEmptyResults();
        }
        
        if (!this.loadingChildren) {
            this.selectActive();
        }
        /*
        this.stores[1].loadData([]);
        this.stores[2].loadData([]);
        this.views
        */    
    
        //this.el.focus();
    },
    
    
    // private
    onLoadException : function()
    {
        this.collapse();
        Roo.log(this.store.reader.jsonData);
        if (this.store && typeof(this.store.reader.jsonData.errorMsg) != 'undefined') {
            Roo.MessageBox.alert("Error loading",this.store.reader.jsonData.errorMsg);
        }
        
        
    },
    // no cleaning of leading spaces on blur here.
    cleanLeadingSpace : function(e) { },
    

    onSelectChange : function (view, sels, opts )
    {
        var ix = view.getSelectedIndexes();
         
        if (opts.list > this.maxColumns - 2) {
            if (view.store.getCount()<  1) {
                this.views[opts.list ].getEl().setStyle({ display :   'none' });

            } else  {
                if (ix.length) {
                    // used to clear ?? but if we are loading unselected 
                    this.setFromData(view.store.getAt(ix[0]).data);
                }
                
            }
            
            return;
        }
        
        if (!ix.length) {
            // this get's fired when trigger opens..
           // this.setFromData({});
            var str = this.stores[opts.list+1];
            str.data.clear(); // removeall wihtout the fire events..
            return;
        }
        
        var rec = view.store.getAt(ix[0]);
         
        this.setFromData(rec.data);
        this.fireEvent('select', this, rec, ix[0]);
        
        var lw = Math.floor(
             (
                (this.listWidth * this.maxColumns || Math.max(this.wrap.getWidth(), this.minListWidth)) - this.list.getFrameWidth('lr')
             ) / this.maxColumns
        );
        this.loadingChildren = true;
        this.stores[opts.list+1].loadDataFromChildren( rec );
        this.loadingChildren = false;
        var dl = this.stores[opts.list+1]. getTotalCount();
        
        this.views[opts.list+1].getEl().setHeight( this.innerLists[0].getHeight());
        
        this.views[opts.list+1].getEl().setStyle({ display : dl ? 'block' : 'none' });
        for (var i = opts.list+2; i < this.views.length;i++) {
            this.views[i].getEl().setStyle({ display : 'none' });
        }
        
        this.innerLists[opts.list+1].setHeight( this.innerLists[0].getHeight());
        this.list.setWidth(lw * (opts.list + (dl ? 2 : 1)));
        
        if (this.isLoading) {
           // this.selectActive(opts.list);
        }
         
    },
    
    
    
    
    onDoubleClick : function()
    {
        this.collapse(); //??
    },
    
     
    
    
    
    // private
    recordToStack : function(store, prop, value, stack)
    {
        var cstore = new Roo.data.SimpleStore({
            //fields : this.store.reader.meta.fields, // we need array reader.. for
            reader : this.store.reader,
            data : [ ]
        });
        var _this = this;
        var record  = false;
        var srec = false;
        if(store.getCount() < 1){
            return false;
        }
        store.each(function(r){
            if(r.data[prop] == value){
                record = r;
            srec = r;
                return false;
            }
            if (r.data.cn && r.data.cn.length) {
                cstore.loadDataFromChildren( r);
                var cret = _this.recordToStack(cstore, prop, value, stack);
                if (cret !== false) {
                    record = cret;
                    srec = r;
                    return false;
                }
            }
             
            return true;
        });
        if (record == false) {
            return false
        }
        stack.unshift(srec);
        return record;
    },
    
    /*
     * find the stack of stores that match our value.
     *
     * 
     */
    
    selectActive : function ()
    {
	// if store is not loaded, then we will need to wait for that to happen first.
        var stack = [];
        this.recordToStack(this.store, this.valueField, this.getValue(), stack);
        for (var i = 0; i < stack.length; i++ ) {
            this.views[i].select(stack[i].store.indexOf(stack[i]), false, false );
        }
	
    }
	
	 
    
    
    
    
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.form.Checkbox
 * @extends Roo.form.Field
 * Single checkbox field.  Can be used as a direct replacement for traditional checkbox fields.
 * @constructor
 * Creates a new Checkbox
 * @param {Object} config Configuration options
 */
Roo.form.Checkbox = function(config){
    Roo.form.Checkbox.superclass.constructor.call(this, config);
    this.addEvents({
        /**
         * @event check
         * Fires when the checkbox is checked or unchecked.
	     * @param {Roo.form.Checkbox} this This checkbox
	     * @param {Boolean} checked The new checked value
	     */
        check : true
    });
};

Roo.extend(Roo.form.Checkbox, Roo.form.Field,  {
    /**
     * @cfg {String} focusClass The CSS class to use when the checkbox receives focus (defaults to undefined)
     */
    focusClass : undefined,
    /**
     * @cfg {String} fieldClass The default CSS class for the checkbox (defaults to "x-form-field")
     */
    fieldClass: "x-form-field",
    /**
     * @cfg {Boolean} checked True if the the checkbox should render already checked (defaults to false)
     */
    checked: false,
    /**
     * @cfg {String/Object} autoCreate A DomHelper element spec, or true for a default element spec (defaults to
     * {tag: "input", type: "checkbox", autocomplete: "off"})
     */
    defaultAutoCreate : { tag: "input", type: 'hidden', autocomplete: "off"},
    /**
     * @cfg {String} boxLabel The text that appears beside the checkbox
     */
    boxLabel : "",
    /**
     * @cfg {String} inputValue The value that should go into the generated input element's value attribute
     */  
    inputValue : '1',
    /**
     * @cfg {String} valueOff The value that should go into the generated input element's value when unchecked.
     */
     valueOff: '0', // value when not checked..

    actionMode : 'viewEl', 
    //
    // private
    itemCls : 'x-menu-check-item x-form-item',
    groupClass : 'x-menu-group-item',
    inputType : 'hidden',
    
    
    inSetChecked: false, // check that we are not calling self...
    
    inputElement: false, // real input element?
    basedOn: false, // ????
    
    isFormField: true, // not sure where this is needed!!!!

    onResize : function(){
        Roo.form.Checkbox.superclass.onResize.apply(this, arguments);
        if(!this.boxLabel){
            this.el.alignTo(this.wrap, 'c-c');
        }
    },

    initEvents : function(){
        Roo.form.Checkbox.superclass.initEvents.call(this);
        this.el.on("click", this.onClick,  this);
        this.el.on("change", this.onClick,  this);
    },


    getResizeEl : function(){
        return this.wrap;
    },

    getPositionEl : function(){
        return this.wrap;
    },

    // private
    onRender : function(ct, position){
        Roo.form.Checkbox.superclass.onRender.call(this, ct, position);
        /*
        if(this.inputValue !== undefined){
            this.el.dom.value = this.inputValue;
        }
        */
        //this.wrap = this.el.wrap({cls: "x-form-check-wrap"});
        this.wrap = this.el.wrap({cls: 'x-menu-check-item '});
        var viewEl = this.wrap.createChild({ 
            tag: 'img', cls: 'x-menu-item-icon', style: 'margin: 0px;' ,src : Roo.BLANK_IMAGE_URL });
        this.viewEl = viewEl;   
        this.wrap.on('click', this.onClick,  this); 
        
        this.el.on('DOMAttrModified', this.setFromHidden,  this); //ff
        this.el.on('propertychange', this.setFromHidden,  this);  //ie
        
        
        
        if(this.boxLabel){
            this.wrap.createChild({tag: 'label', htmlFor: this.el.id, cls: 'x-form-cb-label', html: this.boxLabel});
        //    viewEl.on('click', this.onClick,  this); 
        }
        //if(this.checked){
            this.setChecked(this.checked);
        //}else{
            //this.checked = this.el.dom;
        //}

    },

    // private
    initValue : Roo.emptyFn,

    /**
     * Returns the checked state of the checkbox.
     * @return {Boolean} True if checked, else false
     */
    getValue : function(){
        if(this.el){
            return String(this.el.dom.value) == String(this.inputValue ) ? this.inputValue : this.valueOff;
        }
        return this.valueOff;
        
    },

	// private
    onClick : function(){ 
        if (this.disabled) {
            return;
        }
        this.setChecked(!this.checked);

        //if(this.el.dom.checked != this.checked){
        //    this.setValue(this.el.dom.checked);
       // }
    },

    /**
     * Sets the checked state of the checkbox.
     * On is always based on a string comparison between inputValue and the param.
     * @param {Boolean/String} value - the value to set 
     * @param {Boolean/String} suppressEvent - whether to suppress the checkchange event.
     */
    setValue : function(v,suppressEvent){
        
        
        //this.checked = (v === true || v === 'true' || v == '1' || String(v).toLowerCase() == 'on');
        //if(this.el && this.el.dom){
        //    this.el.dom.checked = this.checked;
        //    this.el.dom.defaultChecked = this.checked;
        //}
        this.setChecked(String(v) === String(this.inputValue), suppressEvent);
        //this.fireEvent("check", this, this.checked);
    },
    // private..
    setChecked : function(state,suppressEvent)
    {
        if (this.inSetChecked) {
            this.checked = state;
            return;
        }
        
    
        if(this.wrap){
            this.wrap[state ? 'addClass' : 'removeClass']('x-menu-item-checked');
        }
        this.checked = state;
        if(suppressEvent !== true){
            this.fireEvent('check', this, state);
        }
        this.inSetChecked = true;
		 
		this.el.dom.value = state ? this.inputValue : this.valueOff;
		 
        this.inSetChecked = false;
        
    },
    // handle setting of hidden value by some other method!!?!?
    setFromHidden: function()
    {
        if(!this.el){
            return;
        }
        //console.log("SET FROM HIDDEN");
        //alert('setFrom hidden');
        this.setValue(this.el.dom.value);
    },
    
    onDestroy : function()
    {
        if(this.viewEl){
            Roo.get(this.viewEl).remove();
        }
         
        Roo.form.Checkbox.superclass.onDestroy.call(this);
    },
    
    setBoxLabel : function(str)
    {
        this.wrap.select('.x-form-cb-label', true).first().dom.innerHTML = str;
    }

});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.form.Radio
 * @extends Roo.form.Checkbox
 * Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.
 * Radio grouping is handled automatically by the browser if you give each radio in a group the same name.
 * @constructor
 * Creates a new Radio
 * @param {Object} config Configuration options
 */
Roo.form.Radio = function(){
    Roo.form.Radio.superclass.constructor.apply(this, arguments);
};
Roo.extend(Roo.form.Radio, Roo.form.Checkbox, {
    inputType: 'radio',

    /**
     * If this radio is part of a group, it will return the selected value
     * @return {String}
     */
    getGroupValue : function(){
        return this.el.up('form').child('input[name='+this.el.dom.name+']:checked', true).value;
    },
    
    
    onRender : function(ct, position){
        Roo.form.Checkbox.superclass.onRender.call(this, ct, position);
        
        if(this.inputValue !== undefined){
            this.el.dom.value = this.inputValue;
        }
         
        this.wrap = this.el.wrap({cls: "x-form-check-wrap"});
        //this.wrap = this.el.wrap({cls: 'x-menu-check-item '});
        //var viewEl = this.wrap.createChild({ 
        //    tag: 'img', cls: 'x-menu-item-icon', style: 'margin: 0px;' ,src : Roo.BLANK_IMAGE_URL });
        //this.viewEl = viewEl;   
        //this.wrap.on('click', this.onClick,  this); 
        
        //this.el.on('DOMAttrModified', this.setFromHidden,  this); //ff
        //this.el.on('propertychange', this.setFromHidden,  this);  //ie
        
        
        
        if(this.boxLabel){
            this.wrap.createChild({tag: 'label', htmlFor: this.el.id, cls: 'x-form-cb-label', html: this.boxLabel});
        //    viewEl.on('click', this.onClick,  this); 
        }
         if(this.checked){
            this.el.dom.checked =   'checked' ;
        }
         
    },
    /**
     * Sets the checked state of the checkbox.
     * On is always based on a string comparison between inputValue and the param.
     * @param {Boolean/String} value - the value to set 
     * @param {Boolean/String} suppressEvent - whether to suppress the checkchange event.
     */
    setValue : function(v,suppressEvent){
        
        
        //this.checked = (v === true || v === 'true' || v == '1' || String(v).toLowerCase() == 'on');
        //if(this.el && this.el.dom){
        //    this.el.dom.checked = this.checked;
        //    this.el.dom.defaultChecked = this.checked;
        //}
        this.setChecked(String(v) === String(this.inputValue), suppressEvent);
        
        this.el.dom.form[this.name].value = v;
     
        //this.fireEvent("check", this, this.checked);
    },
    // private..
    setChecked : function(state,suppressEvent)
    {
         
        if(this.wrap){
            this.wrap[state ? 'addClass' : 'removeClass']('x-menu-item-checked');
        }
        this.checked = state;
        if(suppressEvent !== true){
            this.fireEvent('check', this, state);
        }
		 
		  
       
        
    },
    reset : function(){
        // this.setValue(this.resetValue);
        //this.originalValue = this.getValue();
        this.clearInvalid();
    } 
    
});Roo.rtf = {}; // namespace
Roo.rtf.Hex = function(hex)
{
    this.hexstr = hex;
};
Roo.rtf.Paragraph = function(opts)
{
    this.content = []; ///??? is that used?
};Roo.rtf.Span = function(opts)
{
    this.value = opts.value;
};

Roo.rtf.Group = function(parent)
{
    // we dont want to acutally store parent - it will make debug a nightmare..
    this.content = [];
    this.cn  = [];
     
       
    
};

Roo.rtf.Group.prototype = {
    ignorable : false,
    content: false,
    cn: false,
    addContent : function(node) {
        // could set styles...
        this.content.push(node);
    },
    addChild : function(cn)
    {
        this.cn.push(cn);
    },
    // only for images really...
    toDataURL : function()
    {
        var mimetype = false;
        switch(true) {
            case this.content.filter(function(a) { return a.value == 'pngblip' } ).length > 0: 
                mimetype = "image/png";
                break;
             case this.content.filter(function(a) { return a.value == 'jpegblip' } ).length > 0:
                mimetype = "image/jpeg";
                break;
            default :
                return 'about:blank'; // ?? error?
        }
        
        var hexstring = this.content[this.content.length-1].value;
        
        return 'data:' + mimetype + ';base64,' + btoa(hexstring.match(/\w{2}/g).map(function(a) {
            return String.fromCharCode(parseInt(a, 16));
        }).join(""));
    }
    
};
// this looks like it's normally the {rtf{ .... }}
Roo.rtf.Document = function()
{
    // we dont want to acutally store parent - it will make debug a nightmare..
    this.rtlch  = [];
    this.content = [];
    this.cn = [];
    
};
Roo.extend(Roo.rtf.Document, Roo.rtf.Group, { 
    addChild : function(cn)
    {
        this.cn.push(cn);
        switch(cn.type) {
            case 'rtlch': // most content seems to be inside this??
            case 'listtext':
            case 'shpinst':
                this.rtlch.push(cn);
                return;
            default:
                this[cn.type] = cn;
        }
        
    },
    
    getElementsByType : function(type)
    {
        var ret =  [];
        this._getElementsByType(type, ret, this.cn, 'rtf');
        return ret;
    },
    _getElementsByType : function (type, ret, search_array, path)
    {
        search_array.forEach(function(n,i) {
            if (n.type == type) {
                n.path = path + '/' + n.type + ':' + i;
                ret.push(n);
            }
            if (n.cn.length > 0) {
                this._getElementsByType(type, ret, n.cn, path + '/' + n.type+':'+i);
            }
        },this);
    }
    
});
 
Roo.rtf.Ctrl = function(opts)
{
    this.value = opts.value;
    this.param = opts.param;
};
/**
 *
 *
 * based on this https://github.com/iarna/rtf-parser
 * it's really only designed to extract pict from pasted RTF 
 *
 * usage:
 *
 *  var images = new Roo.rtf.Parser().parse(a_string).filter(function(g) { return g.type == 'pict'; });
 *  
 *
 */

 



Roo.rtf.Parser = function(text) {
    this.input = text;


    //super({objectMode: true})
    this.text = '';
    this.parserState = this.parseText;
    
    // these are for interpeter...
    this.doc = {};
    ///this.parserState = this.parseTop
    this.groupStack = [];
    this.hexStore = [];
    this.doc = false;
    
    this.groups = []; // where we put the return.
    
    for (this.ii = 0; this.ii < text.length; ++this.ii) {
        ++this.cpos;
        
        if (text[this.ii] === '\n') {
            ++this.row;
            this.col = 1;
        } else {
            ++this.col;
        }

        this.parserState(text[this.ii]);
    }
    
    
    
};
Roo.rtf.Parser.prototype = {
    text : '', // string being parsed..
    controlWord : '',
    controlWordParam :  '',
    hexChar : '',
    doc : false,
    group: false,
    groupStack : false,
    hexStore : false,
    
    
    cpos : 0, 
    row : 1, // reportin?
    col : 1, //
    ii : 0,
     
    push : function (el)
    {
        var m = 'cmd'+ el.type;
        if (typeof(this[m]) == 'undefined') {
            Roo.log('invalid cmd:' + el.type);
            return;
        }
        this[m](el);
        //Roo.log(el);
    },
    flushHexStore : function()
    {
        if (this.hexStore.length < 1) {
            return;
        }
        var hexstr = this.hexStore.map(
            function(cmd) {
                return cmd.value;
        }).join('');
        
        this.group.addContent( new Roo.rtf.Hex( hexstr ));
              
            
        this.hexStore.splice(0)
        
    },
    
    cmdgroupstart : function()
    {
        this.flushHexStore();
        if (this.group) {
            this.groupStack.push(this.group);
        }
         // parent..
        if (this.doc === false) {
            this.group = this.doc = new Roo.rtf.Document();
            return;
            
        }
        this.group = new Roo.rtf.Group(this.group);
    },
    cmdignorable : function()
    {
        this.flushHexStore();
        this.group.ignorable = true;
    },
    cmdendparagraph : function()
    {
        this.flushHexStore();
        this.group.addContent(new Roo.rtf.Paragraph());
    },
    cmdgroupend : function ()
    {
        this.flushHexStore();
        var endingGroup = this.group;
        
        
        this.group = this.groupStack.pop();
        if (this.group) {
            this.group.addChild(endingGroup);
        }
        
        
        
        var doc = this.group || this.doc;
        //if (endingGroup instanceof FontTable) {
        //  doc.fonts = endingGroup.table
        //} else if (endingGroup instanceof ColorTable) {
        //  doc.colors = endingGroup.table
        //} else if (endingGroup !== this.doc && !endingGroup.get('ignorable')) {
        if (endingGroup.ignorable === false) {
            //code
            this.groups.push(endingGroup);
           // Roo.log( endingGroup );
        }
            //Roo.each(endingGroup.content, function(item)) {
            //    doc.addContent(item);
            //}
            //process.emit('debug', 'GROUP END', endingGroup.type, endingGroup.get('ignorable'))
        //}
    },
    cmdtext : function (cmd)
    {
        this.flushHexStore();
        if (!this.group) { // an RTF fragment, missing the {\rtf1 header
            //this.group = this.doc
            return;  // we really don't care about stray text...
        }
        this.group.addContent(new Roo.rtf.Span(cmd));
    },
    cmdcontrolword : function (cmd)
    {
        this.flushHexStore();
        if (!this.group.type) {
            this.group.type = cmd.value;
            return;
        }
        this.group.addContent(new Roo.rtf.Ctrl(cmd));
        // we actually don't care about ctrl words...
        return ;
        /*
        var method = 'ctrl$' + cmd.value.replace(/-(.)/g, (_, char) => char.toUpperCase())
        if (this[method]) {
            this[method](cmd.param)
        } else {
            if (!this.group.get('ignorable')) process.emit('debug', method, cmd.param)
        }
        */
    },
    cmdhexchar : function(cmd) {
        this.hexStore.push(cmd);
    },
    cmderror : function(cmd) {
        throw cmd.value;
    },
    
    /*
      _flush (done) {
        if (this.text !== '\u0000') this.emitText()
        done()
      }
      */
      
      
    parseText : function(c)
    {
        if (c === '\\') {
            this.parserState = this.parseEscapes;
        } else if (c === '{') {
            this.emitStartGroup();
        } else if (c === '}') {
            this.emitEndGroup();
        } else if (c === '\x0A' || c === '\x0D') {
            // cr/lf are noise chars
        } else {
            if(this.group && this.group.type == 'pict') {
                var startIndex = this.ii;
                var endIndex = this.input.indexOf('}', startIndex + 1);
                this.text = this.input.substring(startIndex, endIndex);
                this.ii = endIndex - 1;
                return;
            }
            this.text += c;
        }
    },
    
    parseEscapes: function (c)
    {
        if (c === '\\' || c === '{' || c === '}') {
            this.text += c;
            this.parserState = this.parseText;
        } else {
            this.parserState = this.parseControlSymbol;
            this.parseControlSymbol(c);
        }
    },
    parseControlSymbol: function(c)
    {
        if (c === '~') {
            this.text += '\u00a0'; // nbsp
            this.parserState = this.parseText
        } else if (c === '-') {
             this.text += '\u00ad'; // soft hyphen
        } else if (c === '_') {
            this.text += '\u2011'; // non-breaking hyphen
        } else if (c === '*') {
            this.emitIgnorable();
            this.parserState = this.parseText;
        } else if (c === "'") {
            this.parserState = this.parseHexChar;
        } else if (c === '|') { // formula cacter
            this.emitFormula();
            this.parserState = this.parseText;
        } else if (c === ':') { // subentry in an index entry
            this.emitIndexSubEntry();
            this.parserState = this.parseText;
        } else if (c === '\x0a') {
            this.emitEndParagraph();
            this.parserState = this.parseText;
        } else if (c === '\x0d') {
            this.emitEndParagraph();
            this.parserState = this.parseText;
        } else {
            this.parserState = this.parseControlWord;
            this.parseControlWord(c);
        }
    },
    parseHexChar: function (c)
    {
        if (/^[A-Fa-f0-9]$/.test(c)) {
            this.hexChar += c;
            if (this.hexChar.length >= 2) {
              this.emitHexChar();
              this.parserState = this.parseText;
            }
            return;
        }
        this.emitError("Invalid character \"" + c + "\" in hex literal.");
        this.parserState = this.parseText;
        
    },
    parseControlWord : function(c)
    {
        if (c === ' ') {
            this.emitControlWord();
            this.parserState = this.parseText;
        } else if (/^[-\d]$/.test(c)) {
            this.parserState = this.parseControlWordParam;
            this.controlWordParam += c;
        } else if (/^[A-Za-z]$/.test(c)) {
          this.controlWord += c;
        } else {
          this.emitControlWord();
          this.parserState = this.parseText;
          this.parseText(c);
        }
    },
    parseControlWordParam : function (c) {
        if (/^\d$/.test(c)) {
          this.controlWordParam += c;
        } else if (c === ' ') {
          this.emitControlWord();
          this.parserState = this.parseText;
        } else {
          this.emitControlWord();
          this.parserState = this.parseText;
          this.parseText(c);
        }
    },
    
    
    
    
    emitText : function () {
        if (this.text === '') {
            return;
        }
        this.push({
            type: 'text',
            value: this.text,
            pos: this.cpos,
            row: this.row,
            col: this.col
        });
        this.text = ''
    },
    emitControlWord : function ()
    {
        this.emitText();
        if (this.controlWord === '') {
            // do we want to track this - it seems just to cause problems.
            //this.emitError('empty control word');
        } else {
            this.push({
                type: 'controlword',
                value: this.controlWord,
                param: this.controlWordParam !== '' && Number(this.controlWordParam),
                pos: this.cpos,
                row: this.row,
                col: this.col
            });
        }
        this.controlWord = '';
        this.controlWordParam = '';
    },
    emitStartGroup : function ()
    {
        this.emitText();
        this.push({
            type: 'groupstart',
            pos: this.cpos,
            row: this.row,
            col: this.col
        });
    },
    emitEndGroup : function ()
    {
        this.emitText();
        this.push({
            type: 'groupend',
            pos: this.cpos,
            row: this.row,
            col: this.col
        });
    },
    emitIgnorable : function ()
    {
        this.emitText();
        this.push({
            type: 'ignorable',
            pos: this.cpos,
            row: this.row,
            col: this.col
        });
    },
    emitHexChar : function ()
    {
        this.emitText();
        this.push({
            type: 'hexchar',
            value: this.hexChar,
            pos: this.cpos,
            row: this.row,
            col: this.col
        });
        this.hexChar = ''
    },
    emitError : function (message)
    {
      this.emitText();
      this.push({
            type: 'error',
            value: message,
            row: this.row,
            col: this.col,
            char: this.cpos //,
            //stack: new Error().stack
        });
    },
    emitEndParagraph : function () {
        this.emitText();
        this.push({
            type: 'endparagraph',
            pos: this.cpos,
            row: this.row,
            col: this.col
        });
    }
     
} ;
Roo.htmleditor = {};
 
/**
 * @class Roo.htmleditor.Filter
 * Base Class for filtering htmleditor stuff. - do not use this directly - extend it.
 * @cfg {DomElement} node The node to iterate and filter
 * @cfg {boolean|String|Array} tag Tags to replace 
 * @constructor
 * Create a new Filter.
 * @param {Object} config Configuration options
 */



Roo.htmleditor.Filter = function(cfg) {
    Roo.apply(this.cfg);
    // this does not actually call walk as it's really just a abstract class
}


Roo.htmleditor.Filter.prototype = {
    
    node: false,
    
    tag: false,

    // overrride to do replace comments.
    replaceComment : false,
    
    // overrride to do replace or do stuff with tags..
    replaceTag : false,
    
    walk : function(dom)
    {
        Roo.each( Array.from(dom.childNodes), function( e ) {
            switch(true) {
                
                case e.nodeType == 8 &&  this.replaceComment  !== false: // comment
                    this.replaceComment(e);
                    return;
                
                case e.nodeType != 1: //not a node.
                    return;
                
                case this.tag === true: // everything
                case e.tagName.indexOf(":") > -1 && typeof(this.tag) == 'object' && this.tag.indexOf(":") > -1:
                case e.tagName.indexOf(":") > -1 && typeof(this.tag) == 'string' && this.tag == ":":
                case typeof(this.tag) == 'object' && this.tag.indexOf(e.tagName) > -1: // array and it matches.
                case typeof(this.tag) == 'string' && this.tag == e.tagName: // array and it matches.
                    if (this.replaceTag && false === this.replaceTag(e)) {
                        return;
                    }
                    if (e.hasChildNodes()) {
                        this.walk(e);
                    }
                    return;
                
                default:    // tags .. that do not match.
                    if (e.hasChildNodes()) {
                        this.walk(e);
                    }
            }
            
        }, this);
        
    },
    
    
    removeNodeKeepChildren : function( node)
    {
    
        ar = Array.from(node.childNodes);
        for (var i = 0; i < ar.length; i++) {
         
            node.removeChild(ar[i]);
            // what if we need to walk these???
            node.parentNode.insertBefore(ar[i], node);
           
        }
        node.parentNode.removeChild(node);
    },

    searchTag : function(dom)
    {
        if(this.tag === false) {
            return;
        }

        var els = dom.getElementsByTagName(this.tag);

        Roo.each(Array.from(els), function(e){
            if(e.parentNode == null) {
                return;
            }
            if(this.replaceTag) {
                this.replaceTag(e);
            }
        }, this);
    }
}; 

/**
 * @class Roo.htmleditor.FilterAttributes
 * clean attributes and  styles including http:// etc.. in attribute
 * @constructor
* Run a new Attribute Filter
* @param {Object} config Configuration options
 */
Roo.htmleditor.FilterAttributes = function(cfg)
{
    Roo.apply(this, cfg);
    this.lang = this.lang || 'en';
    this.attrib_black = this.attrib_black || [];
    this.attrib_white = this.attrib_white || [];

    this.attrib_clean = this.attrib_clean || [];
    this.style_white = this.style_white || [];
    this.style_black = this.style_black || [];
    this.walk(cfg.node);
}

Roo.extend(Roo.htmleditor.FilterAttributes, Roo.htmleditor.Filter,
{
    tag: true, // all tags
    
    attrib_black : false, // array
    attrib_clean : false,
    attrib_white : false,

    style_white : false,
    style_black : false,
     
     
    replaceTag : function(node)
    {
        if (!node.attributes || !node.attributes.length) {
            return true;
        }
        
        for (var i = node.attributes.length-1; i > -1 ; i--) {
            if(i >= node.attributes.length) {
                continue;
            }
            var a = node.attributes[i];
            //console.log(a);
            if (this.attrib_white.length && this.attrib_white.indexOf(a.name.toLowerCase()) < 0) {
                node.removeAttribute(a.name);
                continue;
            }
            
            
            
            if (a.name.toLowerCase().substr(0,2)=='on')  {
                node.removeAttribute(a.name);
                continue;
            }
            
            
            if (this.attrib_black.indexOf(a.name.toLowerCase()) > -1) {
                node.removeAttribute(a.name);
                continue;
            }
            if (this.attrib_clean.indexOf(a.name.toLowerCase()) > -1) {
                this.cleanAttr(node,a.name,a.value); // fixme..
                continue;
            }
            if (a.name == 'style') {
                this.cleanStyle(node,a.name,a.value);
                continue;
            }
            /// clean up MS crap..
            // tecnically this should be a list of valid class'es..
            
            
            if (a.name == 'class') {
                if (a.value.match(/^Mso/)) {
                    node.removeAttribute('class');
                    continue;
                }
                
                if (a.value.match(/^body$/)) {
                    node.removeAttribute('class');
                }
                continue;
            }
            
            // style cleanup!?
            // class cleanup?

            if(a.name == 'dir') {
                var documentDir = ['ar', 'he', 'fa', 'ur', 'ps', 'syr', 'dv', 'arc', 'nqo', 'sam', 'tzm', 'ug', 'yi'].includes(this.lang) ? 'rtl' : 'ltr';
                var nodeDir = a.value.toLowerCase();

                // remove span dir if it is same as the document dir
                if(node.tagName.toLowerCase() == 'span' && nodeDir == documentDir) {
                    node.removeAttribute(a.name);
                }
            }
            
        }
        return true; // clean children
    },
        
    cleanAttr: function(node, n,v)
    {
        
        if (v.match(/^\./) || v.match(/^\//)) {
            return;
        }
        if (v.match(/^(http|https):\/\//)
            || v.match(/^mailto:/) 
            || v.match(/^ftp:/)
            || v.match(/^data:/)
            ) {
            return;
        }
        if (v.match(/^#/)) {
            return;
        }
        if (v.match(/^\{/)) { // allow template editing.
            return;
        }
//            Roo.log("(REMOVE TAG)"+ node.tagName +'.' + n + '=' + v);
        node.removeAttribute(n);
        
    },
    cleanStyle : function(node,  n,v)
    {
        if (v.match(/expression/)) { //XSS?? should we even bother..
            node.removeAttribute(n);
            return;
        }
        
        var parts = v.split(/;/);
        var clean = [];
        
        Roo.each(parts, function(p) {
            p = p.replace(/^\s+/g,'').replace(/\s+$/g,'');
            if (!p.length) {
                return true;
            }
            var l = p.split(':').shift().replace(/\s+/g,'');
            l = l.replace(/^\s+/g,'').replace(/\s+$/g,'');
            
            if ( this.style_black.length && (this.style_black.indexOf(l) > -1 || this.style_black.indexOf(l.toLowerCase()) > -1)) {
                return true;
            }
            //Roo.log()
            // only allow 'c whitelisted system attributes'
            if ( this.style_white.length &&  style_white.indexOf(l) < 0 && style_white.indexOf(l.toLowerCase()) < 0 ) {
                return true;
            }
            
            
            clean.push(p);
            return true;
        },this);
        if (clean.length) { 
            node.setAttribute(n, clean.join(';'));
        } else {
            node.removeAttribute(n);
        }
        
    }
        
        
        
    
});/**
 * @class Roo.htmleditor.FilterBlack
 * remove blacklisted elements.
 * @constructor
 * Run a new Blacklisted Filter
 * @param {Object} config Configuration options
 */

Roo.htmleditor.FilterBlack = function(cfg)
{
    Roo.apply(this, cfg);
    this.walk(cfg.node);
}

Roo.extend(Roo.htmleditor.FilterBlack, Roo.htmleditor.Filter,
{
    tag : true, // all elements.
   
    replaceTag : function(n)
    {
        n.parentNode.removeChild(n);
    }
});
/**
 * @class Roo.htmleditor.FilterComment
 * remove comments.
 * @constructor
* Run a new Comments Filter
* @param {Object} config Configuration options
 */
Roo.htmleditor.FilterComment = function(cfg)
{
    this.walk(cfg.node);
}

Roo.extend(Roo.htmleditor.FilterComment, Roo.htmleditor.Filter,
{
  
    replaceComment : function(n)
    {
        n.parentNode.removeChild(n);
    }
});/**
 * @class Roo.htmleditor.FilterEmpty
 * filter empty elements
 * @constructor
 * Run a new Empty Filter
 * @param {Object} config Configuration options
 */

Roo.htmleditor.FilterEmpty = function(cfg)
{
    // no need to apply config.
    this.walk(cfg.node);
}

Roo.extend(Roo.htmleditor.FilterEmpty, Roo.htmleditor.FilterBlack,
{
     
    tag : true,
     
 
    replaceTag : function(node)
    {
        // start from leaf node
        if(node.hasChildNodes()) {
            this.walk(node);
        }

        // only filter empty leaf element with certain tags
        if(
            ['B', 'I', 'U', 'S'].indexOf(node.tagName) < 0
            ||
            node.attributes && node.attributes.length > 0
            ||
            node.hasChildNodes()
        ) {
            return false; // don't walk
        }

        Roo.htmleditor.FilterBlack.prototype.replaceTag.call(this, node);
        return false; // don't walk
     
    }
    
});/**
 * @class Roo.htmleditor.FilterKeepChildren
 * remove tags but keep children
 * @constructor
 * Run a new Keep Children Filter
 * @param {Object} config Configuration options
 */

Roo.htmleditor.FilterKeepChildren = function(cfg)
{
    Roo.apply(this, cfg);
    if (this.tag === false) {
        return; // dont walk.. (you can use this to use this just to do a child removal on a single tag )
    }
    // hacky?
    if ((typeof(this.tag) == 'object' && this.tag.indexOf(":") > -1)) {
        this.cleanNamespace = true;
    }
        
    this.walk(cfg.node);
}

Roo.extend(Roo.htmleditor.FilterKeepChildren, Roo.htmleditor.FilterBlack,
{
    cleanNamespace : false, // should really be an option, rather than using ':' inside of this tag.
  
    replaceTag : function(node)
    {
        // walk children...
        //Roo.log(node.tagName);
        var ar = Array.from(node.childNodes);
        //remove first..
        
        for (var i = 0; i < ar.length; i++) {
            var e = ar[i];
            if (e.nodeType == 1) {
                if (
                    (typeof(this.tag) == 'object' && this.tag.indexOf(e.tagName) > -1)
                    || // array and it matches
                    (typeof(this.tag) == 'string' && this.tag == e.tagName)
                    ||
                    (e.tagName.indexOf(":") > -1 && typeof(this.tag) == 'object' && this.tag.indexOf(":") > -1)
                    ||
                    (e.tagName.indexOf(":") > -1 && typeof(this.tag) == 'string' && this.tag == ":")
                ) {
                    this.replaceTag(ar[i]); // child is blacklisted as well...
                    continue;
                }
            }
        }  
        ar = Array.from(node.childNodes);
        for (var i = 0; i < ar.length; i++) {
         
            node.removeChild(ar[i]);
            // what if we need to walk these???
            node.parentNode.insertBefore(ar[i], node);
            if (this.tag !== false) {
                this.walk(ar[i]);
                
            }
        }
        //Roo.log("REMOVE:" + node.tagName);
        node.parentNode.removeChild(node);
        return false; // don't walk children
        
        
    }
});/**
 * @class Roo.htmleditor.FilterParagraph
 * paragraphs cause a nightmare for shared content - this filter is designed to be called ? at various points when editing
 * like on 'push' to remove the <p> tags and replace them with line breaks.
 * @constructor
 * Run a new Paragraph Filter
 * @param {Object} config Configuration options
 */

Roo.htmleditor.FilterParagraph = function(cfg)
{
    this.lang = cfg.lang || 'en';
    // no need to apply config.
    this.searchTag(cfg.node);
}

Roo.extend(Roo.htmleditor.FilterParagraph, Roo.htmleditor.Filter,
{
    
     
    tag : 'P',
    
     
    replaceTag : function(node)
    {
        
        if (node.childNodes.length == 1 &&
            node.childNodes[0].nodeType == 3 &&
            node.childNodes[0].textContent.trim().length < 1
            ) {
            // remove and replace with '<BR>';
            node.parentNode.replaceChild(node.ownerDocument.createElement('BR'),node);
            return false; // no need to walk..
        }

        var documentDir = ['ar', 'he', 'fa', 'ur', 'ps', 'syr', 'dv', 'arc', 'nqo', 'sam', 'tzm', 'ug', 'yi'].includes(this.lang) ? 'rtl' : 'ltr';
        var nodeDir = node.hasAttribute('dir') ? node.getAttribute('dir').toLowerCase() : false;
        var span = node.ownerDocument.createElement('span');

        var ar = Array.from(node.childNodes);
        for (var i = 0; i < ar.length; i++) {
            node.removeChild(ar[i]);

            // copy content to span with if the direction is needed
            if(nodeDir && nodeDir != documentDir) {
                span.appendChild(ar[i]);
                continue;
            }

            // what if we need to walk these???
            node.parentNode.insertBefore(ar[i], node);
        }

        if(nodeDir && nodeDir != documentDir) {
            // keep direction
            span.setAttribute('dir', nodeDir);
            node.parentNode.insertBefore(span, node);
        }

        // now what about this?
        // <p> &nbsp; </p>
        
        // double BR.
        node.parentNode.insertBefore(node.ownerDocument.createElement('BR'), node);
        node.parentNode.insertBefore(node.ownerDocument.createElement('BR'), node);
        node.parentNode.removeChild(node);
        
        return false;

    }
    
});/**
 * @class Roo.htmleditor.FilterHashLink
 * remove hash link
 * @constructor
 * Run a new Hash Link Filter
 * @param {Object} config Configuration options
 */

 Roo.htmleditor.FilterHashLink = function(cfg)
 {
     // no need to apply config.
    //  this.walk(cfg.node);
    this.searchTag(cfg.node);
 }
 
 Roo.extend(Roo.htmleditor.FilterHashLink, Roo.htmleditor.Filter,
 {
      
     tag : 'A',
     
      
     replaceTag : function(node)
     {
         for(var i = 0; i < node.attributes.length; i ++) {
             var a = node.attributes[i];

             if(a.name.toLowerCase() == 'href' && a.value.startsWith('#')) {
                 this.removeNodeKeepChildren(node);
             }
         }
         
         return false;
 
     }
     
 });/**
 * @class Roo.htmleditor.FilterSpan
 * filter span's with no attributes out..
 * @constructor
 * Run a new Span Filter
 * @param {Object} config Configuration options
 */

Roo.htmleditor.FilterSpan = function(cfg)
{
    // no need to apply config.
    this.searchTag(cfg.node);
}

Roo.extend(Roo.htmleditor.FilterSpan, Roo.htmleditor.FilterKeepChildren,
{
     
    tag : 'SPAN',
     
 
    replaceTag : function(node)
    {
        if (node.attributes && node.attributes.length > 0 && node.textContent.trim().length > 0) {
            return true; // walk if there are any.
        }

        Roo.htmleditor.FilterKeepChildren.prototype.replaceTag.call(this, node);
        return false;
     
    }
    
});/**
 * @class Roo.htmleditor.FilterTableWidth
  try and remove table width data - as that frequently messes up other stuff.
 * 
 *      was cleanTableWidths.
 *
 * Quite often pasting from word etc.. results in tables with column and widths.
 * This does not work well on fluid HTML layouts - like emails. - so this code should hunt an destroy them..
 *
 * @constructor
 * Run a new Table Filter
 * @param {Object} config Configuration options
 */

Roo.htmleditor.FilterTableWidth = function(cfg)
{
    // no need to apply config.
    this.tag = ['TABLE', 'TD', 'TR', 'TH', 'THEAD', 'TBODY' ];
    this.walk(cfg.node);
}

Roo.extend(Roo.htmleditor.FilterTableWidth, Roo.htmleditor.Filter,
{
     
     
    
    replaceTag: function(node) {
        
        
      
        if (node.hasAttribute('width')) {
            node.removeAttribute('width');
        }
        
         
        if (node.hasAttribute("style")) {
            // pretty basic...
            
            var styles = node.getAttribute("style").split(";");
            var nstyle = [];
            Roo.each(styles, function(s) {
                if (!s.match(/:/)) {
                    return;
                }
                var kv = s.split(":");
                if (kv[0].match(/^\s*(width|min-width)\s*$/)) {
                    return;
                }
                // what ever is left... we allow.
                nstyle.push(s);
            });
            node.setAttribute("style", nstyle.length ? nstyle.join(';') : '');
            if (!nstyle.length) {
                node.removeAttribute('style');
            }
        }
        
        return true; // continue doing children..
    }
});/**
 * @class Roo.htmleditor.FilterWord
 * try and clean up all the mess that Word generates.
 * 
 * This is the 'nice version' - see 'Heavy' that white lists a very short list of elements, and multi-filters 
 
 * @constructor
 * Run a new Span Filter
 * @param {Object} config Configuration options
 */

Roo.htmleditor.FilterWord = function(cfg)
{
    // no need to apply config.
    this.replaceDocBullets(cfg.node);
    
    this.replaceAname(cfg.node);
    // this is disabled as the removal is done by other filters;
   // this.walk(cfg.node);
    this.replaceImageTable(cfg.node);
    
}

Roo.extend(Roo.htmleditor.FilterWord, Roo.htmleditor.Filter,
{
    tag: true,
     
    
    /**
     * Clean up MS wordisms...
     */
    replaceTag : function(node)
    {
         
        // no idea what this does - span with text, replaceds with just text.
        if(
                node.nodeName == 'SPAN' &&
                !node.hasAttributes() &&
                node.childNodes.length == 1 &&
                node.firstChild.nodeName == "#text"  
        ) {
            var textNode = node.firstChild;
            node.removeChild(textNode);
            if (node.getAttribute('lang') != 'zh-CN') {   // do not space pad on chinese characters..
                node.parentNode.insertBefore(node.ownerDocument.createTextNode(" "), node);
            }
            node.parentNode.insertBefore(textNode, node);
            if (node.getAttribute('lang') != 'zh-CN') {   // do not space pad on chinese characters..
                node.parentNode.insertBefore(node.ownerDocument.createTextNode(" ") , node);
            }
            
            node.parentNode.removeChild(node);
            return false; // dont do chidren - we have remove our node - so no need to do chdhilren?
        }
        
   
        
        if (node.tagName.toLowerCase().match(/^(style|script|applet|embed|noframes|noscript)$/)) {
            node.parentNode.removeChild(node);
            return false; // dont do chidlren
        }
        //Roo.log(node.tagName);
        // remove - but keep children..
        if (node.tagName.toLowerCase().match(/^(meta|link|\\?xml:|st1:|o:|v:|font)/)) {
            //Roo.log('-- removed');
            while (node.childNodes.length) {
                var cn = node.childNodes[0];
                node.removeChild(cn);
                node.parentNode.insertBefore(cn, node);
                // move node to parent - and clean it..
                if (cn.nodeType == 1) {
                    this.replaceTag(cn);
                }
                
            }
            node.parentNode.removeChild(node);
            /// no need to iterate chidlren = it's got none..
            //this.iterateChildren(node, this.cleanWord);
            return false; // no need to iterate children.
        }
        // clean styles
        if (node.className.length) {
            
            var cn = node.className.split(/\W+/);
            var cna = [];
            Roo.each(cn, function(cls) {
                if (cls.match(/Mso[a-zA-Z]+/)) {
                    return;
                }
                cna.push(cls);
            });
            node.className = cna.length ? cna.join(' ') : '';
            if (!cna.length) {
                node.removeAttribute("class");
            }
        }
        
        if (node.hasAttribute("lang")) {
            node.removeAttribute("lang");
        }
        
        if (node.hasAttribute("style")) {
            
            var styles = node.getAttribute("style").split(";");
            var nstyle = [];
            Roo.each(styles, function(s) {
                if (!s.match(/:/)) {
                    return;
                }
                var kv = s.split(":");
                if (kv[0].match(/^(mso-|line|font|background|margin|padding|color)/)) {
                    return;
                }
                // what ever is left... we allow.
                nstyle.push(s);
            });
            node.setAttribute("style", nstyle.length ? nstyle.join(';') : '');
            if (!nstyle.length) {
                node.removeAttribute('style');
            }
        }
        return true; // do children
        
        
        
    },
    
    styleToObject: function(node)
    {
        var styles = (node.getAttribute("style") || '').split(";");
        var ret = {};
        Roo.each(styles, function(s) {
            if (!s.match(/:/)) {
                return;
            }
            var kv = s.split(":");
             
            // what ever is left... we allow.
            ret[kv[0].trim()] = kv[1];
        });
        return ret;
    },
    
    
    replaceAname : function (doc)
    {
        // replace all the a/name without..
        var aa = Array.from(doc.getElementsByTagName('a'));
        for (var i = 0; i  < aa.length; i++) {
            var a = aa[i];
            if (a.hasAttribute("name")) {
                a.removeAttribute("name");
            }
            if (a.hasAttribute("href")) {
                continue;
            }
            // reparent children.
            this.removeNodeKeepChildren(a);
            
        }
        
        
        
    },

    
    
    replaceDocBullets : function(doc)
    {
        // this is a bit odd - but it appears some indents use ql-indent-1
         //Roo.log(doc.innerHTML);
        
        var listpara = Array.from(doc.getElementsByClassName('MsoListParagraphCxSpFirst'));
        for( var i = 0; i < listpara.length; i ++) {
            listpara[i].className = "MsoListParagraph";
        }
        
        listpara =  Array.from(doc.getElementsByClassName('MsoListParagraphCxSpMiddle'));
        for( var i = 0; i < listpara.length; i ++) {
            listpara[i].className = "MsoListParagraph";
        }
        listpara =  Array.from(doc.getElementsByClassName('MsoListParagraphCxSpLast'));
        for( var i = 0; i < listpara.length; i ++) {
            listpara[i].className = "MsoListParagraph";
        }
        listpara =  Array.from(doc.getElementsByClassName('ql-indent-1'));
        for( var i = 0; i < listpara.length; i ++) {
            listpara[i].className = "MsoListParagraph";
        }
        
        // this is a bit hacky - we had one word document where h2 had a miso-list attribute.
        var htwo =  Array.from(doc.getElementsByTagName('h2'));
        for( var i = 0; i < htwo.length; i ++) {
            if (htwo[i].hasAttribute('style') && htwo[i].getAttribute('style').match(/mso-list:/)) {
                htwo[i].className = "MsoListParagraph";
            }
        }
        listpara =  Array.from(doc.getElementsByClassName('MsoNormal'));
        for( var i = 0; i < listpara.length; i ++) {
            if (listpara[i].hasAttribute('style') && listpara[i].getAttribute('style').match(/mso-list:/)) {
                listpara[i].className = "MsoListParagraph";
            } else {
                listpara[i].className = "MsoNormalx";
            }
        }
       
        listpara = doc.getElementsByClassName('MsoListParagraph');

        while(listpara.length) {
            this.replaceDocListItem(listpara.item(0));
        }
      
    },

    getNextListItem: function (currentItem)
    {

        // special case : current item is last li inside ol or ul
        if(['OL', 'UL'].includes(currentItem.parentNode.tagName) && currentItem.parentNode.lastElementChild == currentItem && currentItem.tagName == 'LI') {
            currentItem = currentItem.parentNode;
        }

        currentItem = currentItem.nextElementSibling;

        if(!currentItem) {
            return false;
        }

        // special case : next item is first li inside ol or ul
        if(['OL', 'UL'].includes(currentItem.tagName) && currentItem.firstElementChild.tagName == 'LI') {
            currentItem = currentItem.firstElementChild;
        }

        if(!currentItem.className.match(/(MsoListParagraph)/i)) {
            return false;
        }

        return currentItem;
    },

    replaceDocListItem: function(item)
    {
        var currentItem = item;
        var listItems = [];
        var levelToMargin = [];

        while(currentItem) {
            var style = this.styleToObject(currentItem);
            var spans = currentItem.getElementsByTagName('span');
            if(
                typeof(style['mso-list']) == 'undefined' // no mso-list in style
                ||
                !spans.length // no span
            ) {
                var oldItem = currentItem;
                currentItem = this.getNextListItem(currentItem);
                oldItem.parentNode.removeChild(oldItem); // removed
                continue;
            }

            var listItem = {
                'node' : currentItem
            };

            // get the type of list
            var fontFamily = false;
            var span = false;
            for(var i = 0; i < spans.length; i ++) {
                if(spans[i].hasAttribute('style') && spans[i].style.fontFamily != '') {
                    fontFamily = spans[i].style.fontFamily;
                    span = spans[i];
                    break;
                }
            }

            var type = (fontFamily !== false && !fontFamily.match(/(Symbol|Wingdings)/) && "●○■".indexOf(span.innerText.trim()) < 0) ? 'ol' : 'ul';

            if(currentItem.tagName == 'LI' && currentItem.parentNode.tagName == 'OL') { // special case : current item is li inside ol
                type = 'ol';
            }

            if(currentItem.tagName == 'LI' && currentItem.parentNode.tagName == 'UL') { // special case : current item is li inside ul
                type = 'ul';   
            }

            listItem['type'] = type;

            // get the level of list
            var level = listItems.length ? listItems[listItems.length - 1]['level'] + 1 : levelToMargin.length;
            var margin = style['margin-left'];
            if(typeof(margin) == 'undefined') {
                margin = 'undefined';
            }
            margin = margin + type;

            if(levelToMargin.includes(margin)) {
                for(var i = 0; i < levelToMargin.length; i ++) {
                    if(levelToMargin[i] == margin) {
                        level = i;
                    }
                }
            }
            else {
                if(level > 0) {
                    previousMargin = levelToMargin[level - 1];
                    if(
                        margin.substr(margin.length - 2) == previousMargin.substr(previousMargin.length - 2) // same type
                        &&
                        margin.substr(0, margin.length - 2) != 'undefined' // current margin is defined
                        &&
                        previousMargin.substr(0, previousMargin.length - 2) == 'undefined' // previous margin is undefined
                    ) {
                        // set current level to previous level
                        level --;
                        // replace undefined by the current margin
                        levelToMargin[level] = margin;
                    }

                    if(
                        margin.substr(margin.length - 2) == previousMargin.substr(previousMargin.length - 2) // same type
                        &&
                        margin.substr(0, margin.length - 2) == 'undefined' // current margin is undefined
                        &&
                        previousMargin.substr(0, previousMargin.length - 2) != 'undefined' // previous margin is defined
                    ) {
                        // set current level to previous level
                        level --;
                        // replace undefined by the margin of of previous level
                        margin = levelToMargin[level];
                    }
                }

                levelToMargin[level] = margin;
            }

            listItem['level'] = level;

            listItems.push(listItem);

            currentItem = this.getNextListItem(currentItem);
        }

        if (!listItems.length) {
            return;
        }


        if(item.tagName == 'LI' && ['OL', 'UL'].includes(item.parentNode.tagName)) {
            item = item.parentNode;
        }
        var parent = item.parentNode;
        var doc = parent.ownerDocument;

        var list = doc.createElement(listItems[0]['type']);
        parent.insertBefore(list, item);
        var level = 0;
        var stack = [list];
        var li = false;

        listItems.forEach(function(listItem) {
            var node = listItem['node'];

            var spans = node.getElementsByTagName('span');

            var style = {};
            for(var i = 0; i < spans.length; i++) {
            
                style = this.styleToObject(spans[i]);
                if (typeof(style['mso-list']) == 'undefined') {
                    continue;
                }
                spans[i].parentNode.removeChild(spans[i]); // remove the fake bullet.
                break;
            }

            var listLevel = listItem['level'];
             
            if (listLevel > level) {
                var newList = doc.createElement(listItem['type']);
                li.appendChild(newList);
                stack[listLevel] = newList;
                
            }

            level = listLevel;

            li = stack[level].appendChild(doc.createElement('li'));
            li.innerHTML = node.innerHTML;
            if(node.tagName == 'LI' && ['OL', 'UL'].includes(node.parentNode.tagName)) {
                node = node.parentNode;
            }
            if(node.parentNode) {
                node.parentNode.removeChild(node);
            }
            
        },this);
    },
    
    replaceImageTable : function(doc)
    {
         /*
          <table cellpadding=0 cellspacing=0 align=left>
  <tr>
   <td width=423 height=0></td>
  </tr>
  <tr>
   <td></td>
   <td><img width=601 height=401
   src="file:///C:/Users/Alan/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg"
   v:shapes="Picture_x0020_2"></td>
  </tr>
 </table>
 */
        var imgs = Array.from(doc.getElementsByTagName('img'));
        Roo.each(imgs, function(img) {
            var td = img.parentNode;
            if (td.nodeName !=  'TD') {
                return;
            }
            var tr = td.parentNode;
            if (tr.nodeName !=  'TR') {
                return;
            }
            var tbody = tr.parentNode;
            if (tbody.nodeName !=  'TBODY') {
                return;
            }
            var table = tbody.parentNode;
            if (table.nodeName !=  'TABLE') {
                return;
            }
            // first row..
            
            if (table.getElementsByTagName('tr').length != 2) {
                return;
            }
            if (table.getElementsByTagName('td').length != 3) {
                return;
            }
            if (table.innerText.trim() != '') {
                return;
            }
            var p = table.parentNode;
            img.parentNode.removeChild(img);
            p.insertBefore(img, table);
            p.removeChild(table);
            
            
            
        });
        
      
    }
    
});
/**
 * @class Roo.htmleditor.FilterStyleToTag
 * part of the word stuff... - certain 'styles' should be converted to tags.
 * eg.
 *   font-weight: bold -> bold
 *   ?? super / subscrit etc..
 * 
 * @constructor
* Run a new style to tag filter.
* @param {Object} config Configuration options
 */
Roo.htmleditor.FilterStyleToTag = function(cfg)
{
    
    this.tags = {
        B  : [ 'fontWeight' , 'bold', 'font-weight'],
        I :  [ 'fontStyle' , 'italic', 'font-style'],
        //pre :  [ 'font-style' , 'italic'],
        // h1.. h6 ?? font-size?
        SUP : [ 'verticalAlign' , 'super', 'vertical-align'],
        SUB : [ 'verticalAlign' , 'sub', 'vertical-align']
        
        
    };
    
    Roo.apply(this, cfg);
     
    
    this.walk(cfg.node);
    
    
    
}


Roo.extend(Roo.htmleditor.FilterStyleToTag, Roo.htmleditor.Filter,
{
    tag: true, // all tags
    
    tags : false,
    
    
    replaceTag : function(node)
    {
        
        
        if (node.getAttribute("style") === null) {
            return true;
        }
        var inject = [];
        for (var k in this.tags) {
            if (node.style[this.tags[k][0]] == this.tags[k][1]) {
                inject.push(k);
                node.style.removeProperty(this.tags[k][2]);
            }
        }
        if (!inject.length) {
            return true; 
        }
        var cn = Array.from(node.childNodes);
        var nn = node;
        Roo.each(inject, function(t) {
            var nc = node.ownerDocument.createElement(t);
            nn.appendChild(nc);
            nn = nc;
        });
        for(var i = 0;i < cn.length;i++) {
            node.removeChild(cn[i]);
            nn.appendChild(cn[i]);
        }
        return true /// iterate thru
    }
    
})/**
 * @class Roo.htmleditor.FilterLongBr
 * BR/BR/BR - keep a maximum of 2...
 * @constructor
 * Run a new Long BR Filter
 * @param {Object} config Configuration options
 */

Roo.htmleditor.FilterLongBr = function(cfg)
{
    // no need to apply config.
    this.searchTag(cfg.node);
}

Roo.extend(Roo.htmleditor.FilterLongBr, Roo.htmleditor.Filter,
{
    
     
    tag : 'BR',
    
     
    replaceTag : function(node)
    {
        
        var ps = node.nextSibling;
        while (ps && ps.nodeType == 3 && ps.nodeValue.trim().length < 1) {
            ps = ps.nextSibling;
        }
        
        if (!ps &&  [ 'TD', 'TH', 'LI', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6' ].indexOf(node.parentNode.tagName) > -1) { 
            node.parentNode.removeChild(node); // remove last BR inside one fo these tags
            return false;
        }
        
        if (!ps || ps.nodeType != 1) {
            return false;
        }
        
        if (!ps || ps.tagName != 'BR') {
           
            return false;
        }
        
        
        
        if (!node.previousSibling) {
            return false;
        }
        var ps = node.previousSibling;
        
        while (ps && ps.nodeType == 3 && ps.nodeValue.trim().length < 1) {
            ps = ps.previousSibling;
        }
        if (!ps || ps.nodeType != 1) {
            return false;
        }
        // if header or BR before.. then it's a candidate for removal.. - as we only want '2' of these..
        if (!ps || [ 'BR', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6' ].indexOf(ps.tagName) < 0) {
            return false;
        }
        
        node.parentNode.removeChild(node); // remove me...
        
        return false; // no need to do children

    }
    
}); 

/**
 * @class Roo.htmleditor.FilterBlock
 * removes id / data-block and contenteditable that are associated with blocks
 * usage should be done on a cloned copy of the dom
 * @constructor
* Run a new Attribute Filter { node : xxxx }}
* @param {Object} config Configuration options
 */
Roo.htmleditor.FilterBlock = function(cfg)
{
    Roo.apply(this, cfg);
    var qa = cfg.node.querySelectorAll;
    this.removeAttributes('data-block');
    this.removeAttributes('contenteditable');
    this.removeAttributes('id');
    
}

Roo.apply(Roo.htmleditor.FilterBlock.prototype,
{
    node: true, // all tags
     
     
    removeAttributes : function(attr)
    {
        var ar = this.node.querySelectorAll('*[' + attr + ']');
        for (var i =0;i<ar.length;i++) {
            ar[i].removeAttribute(attr);
        }
    }
        
        
        
    
});
/***
 * This is based loosely on tinymce 
 * @class Roo.htmleditor.TidySerializer
 * https://github.com/thorn0/tinymce.html/blob/master/tinymce.html.js
 * @constructor
 * @method Serializer
 * @param {Object} settings Name/value settings object.
 */


Roo.htmleditor.TidySerializer = function(settings)
{
    Roo.apply(this, settings);
    
    this.writer = new Roo.htmleditor.TidyWriter(settings);
    
    

};
Roo.htmleditor.TidySerializer.prototype = {
    
    /**
     * @param {boolean} inner do the inner of the node.
     */
    inner : false,
    
    writer : false,
    
    /**
    * Serializes the specified node into a string.
    *
    * @example
    * new tinymce.html.Serializer().serialize(new tinymce.html.DomParser().parse('<p>text</p>'));
    * @method serialize
    * @param {DomElement} node Node instance to serialize.
    * @return {String} String with HTML based on DOM tree.
    */
    serialize : function(node) {
        
        // = settings.validate;
        var writer = this.writer;
        var self  = this;
        this.handlers = {
            // #text
            3: function(node) {
                
                writer.text(node.nodeValue, node);
            },
            // #comment
            8: function(node) {
                writer.comment(node.nodeValue);
            },
            // Processing instruction
            7: function(node) {
                writer.pi(node.name, node.nodeValue);
            },
            // Doctype
            10: function(node) {
                writer.doctype(node.nodeValue);
            },
            // CDATA
            4: function(node) {
                writer.cdata(node.nodeValue);
            },
            // Document fragment
            11: function(node) {
                node = node.firstChild;
                if (!node) {
                    return;
                }
                while(node) {
                    self.walk(node);
                    node = node.nextSibling
                }
            }
        };
        writer.reset();
        1 != node.nodeType || this.inner ? this.handlers[11](node) : this.walk(node);
        return writer.getContent();
    },

    walk: function(node)
    {
        var attrName, attrValue, sortedAttrs, i, l, elementRule,
            handler = this.handlers[node.nodeType];
            
        if (handler) {
            handler(node);
            return;
        }
    
        var name = node.nodeName;
        var isEmpty = node.childNodes.length < 1;
      
        var writer = this.writer;
        var attrs = node.attributes;
        // Sort attributes
        
        writer.start(node.nodeName, attrs, isEmpty, node);
        if (isEmpty) {
            return;
        }
        node = node.firstChild;
        if (!node) {
            writer.end(name);
            return;
        }
        while (node) {
            this.walk(node);
            node = node.nextSibling;
        }
        writer.end(name);
        
    
    }
    // Serialize element and treat all non elements as fragments
   
}; 

/***
 * This is based loosely on tinymce 
 * @class Roo.htmleditor.TidyWriter
 * https://github.com/thorn0/tinymce.html/blob/master/tinymce.html.js
 *
 * Known issues?
 * - not tested much with 'PRE' formated elements.
 * 
 *
 *
 */

Roo.htmleditor.TidyWriter = function(settings)
{
    
    // indent, indentBefore, indentAfter, encode, htmlOutput, html = [];
    Roo.apply(this, settings);
    this.html = [];
    this.state = [];
     
    this.encode = Roo.htmleditor.TidyEntities.getEncodeFunc(settings.entity_encoding || 'raw', settings.entities);
  
}
Roo.htmleditor.TidyWriter.prototype = {

 
    state : false,
    
    indent :  '  ',
    
    // part of state...
    indentstr : '',
    in_pre: false,
    in_inline : false,
    last_inline : false,
    encode : false,
     
    
            /**
    * Writes the a start element such as <p id="a">.
    *
    * @method start
    * @param {String} name Name of the element.
    * @param {Array} attrs Optional attribute array or undefined if it hasn't any.
    * @param {Boolean} empty Optional empty state if the tag should end like <br />.
    */
    start: function(name, attrs, empty, node)
    {
        var i, l, attr, value;
        
        // there are some situations where adding line break && indentation will not work. will not work.
        // <span / b / i ... formating?
        
        var in_inline = this.in_inline || Roo.htmleditor.TidyWriter.inline_elements.indexOf(name) > -1;
        var in_pre    = this.in_pre    || Roo.htmleditor.TidyWriter.whitespace_elements.indexOf(name) > -1;
        
        var is_short   = empty ? Roo.htmleditor.TidyWriter.shortend_elements.indexOf(name) > -1 : false;
        
        var add_lb = name == 'BR' ? false : in_inline;
        
        if (!add_lb && !this.in_pre && this.lastElementEndsWS()) {
            i_inline = false;
        }

        var indentstr =  this.indentstr;
        
        // e_inline = elements that can be inline, but still allow \n before and after?
        // only 'BR' ??? any others?
        
        // ADD LINE BEFORE tage
        if (!this.in_pre) {
            if (in_inline) {
                //code
                if (name == 'BR') {
                    this.addLine();
                } else if (this.lastElementEndsWS()) {
                    this.addLine();
                } else{
                    // otherwise - no new line. (and dont indent.)
                    indentstr = '';
                }
                
            } else {
                this.addLine();
            }
        } else {
            indentstr = '';
        }
        
        this.html.push(indentstr + '<', name.toLowerCase());
        
        if (attrs) {
            for (i = 0, l = attrs.length; i < l; i++) {
                attr = attrs[i];
                this.html.push(' ', attr.name, '="', this.encode(attr.value, true), '"');
            }
        }
     
        if (empty) {
            if (is_short) {
                this.html[this.html.length] = '/>';
            } else {
                this.html[this.html.length] = '></' + name.toLowerCase() + '>';
            }
            var e_inline = name == 'BR' ? false : this.in_inline;
            
            if (!e_inline && !this.in_pre) {
                this.addLine();
            }
            return;
        
        }
        // not empty..
        this.html[this.html.length] = '>';
        
        // there is a special situation, where we need to turn on in_inline - if any of the imediate chidlren are one of these.
        /*
        if (!in_inline && !in_pre) {
            var cn = node.firstChild;
            while(cn) {
                if (Roo.htmleditor.TidyWriter.inline_elements.indexOf(cn.nodeName) > -1) {
                    in_inline = true
                    break;
                }
                cn = cn.nextSibling;
            }
             
        }
        */
        
        
        this.pushState({
            indentstr : in_pre   ? '' : (this.indentstr + this.indent),
            in_pre : in_pre,
            in_inline :  in_inline
        });
        // add a line after if we are not in a
        
        if (!in_inline && !in_pre) {
            this.addLine();
        }
        
            
         
        
    },
    
    lastElementEndsWS : function()
    {
        var value = this.html.length > 0 ? this.html[this.html.length-1] : false;
        if (value === false) {
            return true;
        }
        return value != "　" && value.match(/\s+$/);
        
    },
    
    /**
     * Writes the a end element such as </p>.
     *
     * @method end
     * @param {String} name Name of the element.
     */
    end: function(name) {
        var value;
        this.popState();
        var indentstr = '';
        var in_inline = this.in_inline || Roo.htmleditor.TidyWriter.inline_elements.indexOf(name) > -1;
        
        if (!this.in_pre && !in_inline) {
            this.addLine();
            indentstr  = this.indentstr;
        }
        this.html.push(indentstr + '</', name.toLowerCase(), '>');
        this.last_inline = in_inline;
        
        // pop the indent state..
    },
    /**
     * Writes a text node.
     *
     * In pre - we should not mess with the contents.
     * 
     *
     * @method text
     * @param {String} text String to write out.
     * @param {Boolean} raw Optional raw state if true the contents wont get encoded.
     */
    text: function(in_text, node)
    {
        // if not in whitespace critical
        if (in_text.length < 1) {
            return;
        }
        var text = new XMLSerializer().serializeToString(document.createTextNode(in_text)); // escape it properly?
        
        if (this.in_pre) {
            this.html[this.html.length] =  text;
            return;   
        }
        
        if (this.in_inline) {
            if (text != "　") {
                text = text.replace(/\s+/g,' '); // all white space inc line breaks to a slingle' '
            }
            if (text != ' ') {
                if (text != "　") { // we allow <span>&emsp</span> - as a special space char.
                    text = text.replace(/\s+/,' ');  // all white space to single white space
                }
                
                
                    
                // if next tag is '<BR>', then we can trim right..
                if (node.nextSibling &&
                    node.nextSibling.nodeType == 1 &&
                    node.nextSibling.nodeName == 'BR' )
                {
                    text = text.replace(/\s+$/g,'');
                }
                // if previous tag was a BR, we can also trim..
                if (node.previousSibling &&
                    node.previousSibling.nodeType == 1 &&
                    node.previousSibling.nodeName == 'BR' )
                {
                    text = this.indentstr +  text.replace(/^\s+/g,'');
                }
                if (text.match(/\n/)) {
                    text = text.replace(
                        /(?![^\n]{1,64}$)([^\n]{1,64})\s/g, '$1\n' + this.indentstr
                    );
                    // remoeve the last whitespace / line break.
                    text = text.replace(/\n\s+$/,'');
                }
                // repace long lines
                
            }
             
            this.html[this.html.length] =  text;
            return;   
        }
        // see if previous element was a inline element.
        var indentstr = this.indentstr;
        if (text != "　") { 
            text = text.replace(/\s+/g," "); // all whitespace into single white space.
        }
        
        // should trim left?
        if (node.previousSibling &&
            node.previousSibling.nodeType == 1 &&
            Roo.htmleditor.TidyWriter.inline_elements.indexOf(node.previousSibling.nodeName) > -1)
        {
            indentstr = '';
            
        } else {
            this.addLine();
            if (text != "　") { 
                text = text.replace(/^\s+/,''); // trim left
            }
          
        }
        // should trim right?
        if (node.nextSibling &&
            node.nextSibling.nodeType == 1 &&
            Roo.htmleditor.TidyWriter.inline_elements.indexOf(node.nextSibling.nodeName) > -1)
        {
          // noop
            
        }  else {
            if (text != "　") { 
                text = text.replace(/\s+$/,''); // trim right
            }
        }
         
              
        
        
        
        if (text.length < 1 ||   text == "　") {
            return;
        }
        if (!text.match(/\n/)) {
            this.html.push(indentstr + text);
            return;
        }
        
        text = this.indentstr + text.replace(
            /(?![^\n]{1,64}$)([^\n]{1,64})\s/g, '$1\n' + this.indentstr
        );
        // remoeve the last whitespace / line break.
        text = text.replace(/\s+$/,''); 
        
        this.html.push(text);
        
        // split and indent..
        
        
    },
    /**
     * Writes a cdata node such as <![CDATA[data]]>.
     *
     * @method cdata
     * @param {String} text String to write out inside the cdata.
     */
    cdata: function(text) {
        this.html.push('<![CDATA[', text, ']]>');
    },
    /**
    * Writes a comment node such as <!-- Comment -->.
    *
    * @method cdata
    * @param {String} text String to write out inside the comment.
    */
   comment: function(text) {
       this.html.push('<!--', text, '-->');
   },
    /**
     * Writes a PI node such as <?xml attr="value" ?>.
     *
     * @method pi
     * @param {String} name Name of the pi.
     * @param {String} text String to write out inside the pi.
     */
    pi: function(name, text) {
        text ? this.html.push('<?', name, ' ', this.encode(text), '?>') : this.html.push('<?', name, '?>');
        this.indent != '' && this.html.push('\n');
    },
    /**
     * Writes a doctype node such as <!DOCTYPE data>.
     *
     * @method doctype
     * @param {String} text String to write out inside the doctype.
     */
    doctype: function(text) {
        this.html.push('<!DOCTYPE', text, '>', this.indent != '' ? '\n' : '');
    },
    /**
     * Resets the internal buffer if one wants to reuse the writer.
     *
     * @method reset
     */
    reset: function() {
        this.html.length = 0;
        this.state = [];
        this.pushState({
            indentstr : '',
            in_pre : false, 
            in_inline : false
        })
    },
    /**
     * Returns the contents that got serialized.
     *
     * @method getContent
     * @return {String} HTML contents that got written down.
     */
    getContent: function() {
        return this.html.join('').replace(/\n$/, '');
    },
    
    pushState : function(cfg)
    {
        this.state.push(cfg);
        Roo.apply(this, cfg);
    },
    
    popState : function()
    {
        if (this.state.length < 1) {
            return; // nothing to push
        }
        var cfg = {
            in_pre: false,
            indentstr : ''
        };
        this.state.pop();
        if (this.state.length > 0) {
            cfg = this.state[this.state.length-1]; 
        }
        Roo.apply(this, cfg);
    },
    
    addLine: function()
    {
        if (this.html.length < 1) {
            return;
        }
        
        
        var value = this.html[this.html.length - 1];
        if (value.length > 0 && '\n' !== value) {
            this.html.push('\n');
        }
    }
    
    
//'pre script noscript style textarea video audio iframe object code'
// shortended... 'area base basefont br col frame hr img input isindex link  meta param embed source wbr track');
// inline 
};

Roo.htmleditor.TidyWriter.inline_elements = [
        'SPAN','STRONG','B','EM','I','FONT','STRIKE','U','VAR',
        'CITE','DFN','CODE','MARK','Q','SUP','SUB','SAMP', 'A'
];
Roo.htmleditor.TidyWriter.shortend_elements = [
    'AREA','BASE','BASEFONT','BR','COL','FRAME','HR','IMG','INPUT',
    'ISINDEX','LINK','','META','PARAM','EMBED','SOURCE','WBR','TRACK'
];

Roo.htmleditor.TidyWriter.whitespace_elements = [
    'PRE','SCRIPT','NOSCRIPT','STYLE','TEXTAREA','VIDEO','AUDIO','IFRAME','OBJECT','CODE'
];/***
 * This is based loosely on tinymce 
 * @class Roo.htmleditor.TidyEntities
 * @static
 * https://github.com/thorn0/tinymce.html/blob/master/tinymce.html.js
 *
 * Not 100% sure this is actually used or needed.
 */

Roo.htmleditor.TidyEntities = {
    
    /**
     * initialize data..
     */
    init : function (){
     
        this.namedEntities = this.buildEntitiesLookup(this.namedEntitiesData, 32);
       
    },


    buildEntitiesLookup: function(items, radix) {
        var i, chr, entity, lookup = {};
        if (!items) {
            return {};
        }
        items = typeof(items) == 'string' ? items.split(',') : items;
        radix = radix || 10;
        // Build entities lookup table
        for (i = 0; i < items.length; i += 2) {
            chr = String.fromCharCode(parseInt(items[i], radix));
            // Only add non base entities
            if (!this.baseEntities[chr]) {
                entity = '&' + items[i + 1] + ';';
                lookup[chr] = entity;
                lookup[entity] = chr;
            }
        }
        return lookup;
        
    },
    
    asciiMap : {
            128: '€',
            130: '‚',
            131: 'ƒ',
            132: '„',
            133: '…',
            134: '†',
            135: '‡',
            136: 'ˆ',
            137: '‰',
            138: 'Š',
            139: '‹',
            140: 'Œ',
            142: 'Ž',
            145: '‘',
            146: '’',
            147: '“',
            148: '”',
            149: '•',
            150: '–',
            151: '—',
            152: '˜',
            153: '™',
            154: 'š',
            155: '›',
            156: 'œ',
            158: 'ž',
            159: 'Ÿ'
    },
    // Raw entities
    baseEntities : {
        '"': '&quot;',
        // Needs to be escaped since the YUI compressor would otherwise break the code
        '\'': '&#39;',
        '<': '&lt;',
        '>': '&gt;',
        '&': '&amp;',
        '`': '&#96;'
    },
    // Reverse lookup table for raw entities
    reverseEntities : {
        '&lt;': '<',
        '&gt;': '>',
        '&amp;': '&',
        '&quot;': '"',
        '&apos;': '\''
    },
    
    attrsCharsRegExp : /[&<>\"\u0060\u007E-\uD7FF\uE000-\uFFEF]|[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
    textCharsRegExp : /[<>&\u007E-\uD7FF\uE000-\uFFEF]|[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
    rawCharsRegExp : /[<>&\"\']/g,
    entityRegExp : /&#([a-z0-9]+);?|&([a-z0-9]+);/gi,
    namedEntities  : false,
    namedEntitiesData : [ 
        '50',
        'nbsp',
        '51',
        'iexcl',
        '52',
        'cent',
        '53',
        'pound',
        '54',
        'curren',
        '55',
        'yen',
        '56',
        'brvbar',
        '57',
        'sect',
        '58',
        'uml',
        '59',
        'copy',
        '5a',
        'ordf',
        '5b',
        'laquo',
        '5c',
        'not',
        '5d',
        'shy',
        '5e',
        'reg',
        '5f',
        'macr',
        '5g',
        'deg',
        '5h',
        'plusmn',
        '5i',
        'sup2',
        '5j',
        'sup3',
        '5k',
        'acute',
        '5l',
        'micro',
        '5m',
        'para',
        '5n',
        'middot',
        '5o',
        'cedil',
        '5p',
        'sup1',
        '5q',
        'ordm',
        '5r',
        'raquo',
        '5s',
        'frac14',
        '5t',
        'frac12',
        '5u',
        'frac34',
        '5v',
        'iquest',
        '60',
        'Agrave',
        '61',
        'Aacute',
        '62',
        'Acirc',
        '63',
        'Atilde',
        '64',
        'Auml',
        '65',
        'Aring',
        '66',
        'AElig',
        '67',
        'Ccedil',
        '68',
        'Egrave',
        '69',
        'Eacute',
        '6a',
        'Ecirc',
        '6b',
        'Euml',
        '6c',
        'Igrave',
        '6d',
        'Iacute',
        '6e',
        'Icirc',
        '6f',
        'Iuml',
        '6g',
        'ETH',
        '6h',
        'Ntilde',
        '6i',
        'Ograve',
        '6j',
        'Oacute',
        '6k',
        'Ocirc',
        '6l',
        'Otilde',
        '6m',
        'Ouml',
        '6n',
        'times',
        '6o',
        'Oslash',
        '6p',
        'Ugrave',
        '6q',
        'Uacute',
        '6r',
        'Ucirc',
        '6s',
        'Uuml',
        '6t',
        'Yacute',
        '6u',
        'THORN',
        '6v',
        'szlig',
        '70',
        'agrave',
        '71',
        'aacute',
        '72',
        'acirc',
        '73',
        'atilde',
        '74',
        'auml',
        '75',
        'aring',
        '76',
        'aelig',
        '77',
        'ccedil',
        '78',
        'egrave',
        '79',
        'eacute',
        '7a',
        'ecirc',
        '7b',
        'euml',
        '7c',
        'igrave',
        '7d',
        'iacute',
        '7e',
        'icirc',
        '7f',
        'iuml',
        '7g',
        'eth',
        '7h',
        'ntilde',
        '7i',
        'ograve',
        '7j',
        'oacute',
        '7k',
        'ocirc',
        '7l',
        'otilde',
        '7m',
        'ouml',
        '7n',
        'divide',
        '7o',
        'oslash',
        '7p',
        'ugrave',
        '7q',
        'uacute',
        '7r',
        'ucirc',
        '7s',
        'uuml',
        '7t',
        'yacute',
        '7u',
        'thorn',
        '7v',
        'yuml',
        'ci',
        'fnof',
        'sh',
        'Alpha',
        'si',
        'Beta',
        'sj',
        'Gamma',
        'sk',
        'Delta',
        'sl',
        'Epsilon',
        'sm',
        'Zeta',
        'sn',
        'Eta',
        'so',
        'Theta',
        'sp',
        'Iota',
        'sq',
        'Kappa',
        'sr',
        'Lambda',
        'ss',
        'Mu',
        'st',
        'Nu',
        'su',
        'Xi',
        'sv',
        'Omicron',
        't0',
        'Pi',
        't1',
        'Rho',
        't3',
        'Sigma',
        't4',
        'Tau',
        't5',
        'Upsilon',
        't6',
        'Phi',
        't7',
        'Chi',
        't8',
        'Psi',
        't9',
        'Omega',
        'th',
        'alpha',
        'ti',
        'beta',
        'tj',
        'gamma',
        'tk',
        'delta',
        'tl',
        'epsilon',
        'tm',
        'zeta',
        'tn',
        'eta',
        'to',
        'theta',
        'tp',
        'iota',
        'tq',
        'kappa',
        'tr',
        'lambda',
        'ts',
        'mu',
        'tt',
        'nu',
        'tu',
        'xi',
        'tv',
        'omicron',
        'u0',
        'pi',
        'u1',
        'rho',
        'u2',
        'sigmaf',
        'u3',
        'sigma',
        'u4',
        'tau',
        'u5',
        'upsilon',
        'u6',
        'phi',
        'u7',
        'chi',
        'u8',
        'psi',
        'u9',
        'omega',
        'uh',
        'thetasym',
        'ui',
        'upsih',
        'um',
        'piv',
        '812',
        'bull',
        '816',
        'hellip',
        '81i',
        'prime',
        '81j',
        'Prime',
        '81u',
        'oline',
        '824',
        'frasl',
        '88o',
        'weierp',
        '88h',
        'image',
        '88s',
        'real',
        '892',
        'trade',
        '89l',
        'alefsym',
        '8cg',
        'larr',
        '8ch',
        'uarr',
        '8ci',
        'rarr',
        '8cj',
        'darr',
        '8ck',
        'harr',
        '8dl',
        'crarr',
        '8eg',
        'lArr',
        '8eh',
        'uArr',
        '8ei',
        'rArr',
        '8ej',
        'dArr',
        '8ek',
        'hArr',
        '8g0',
        'forall',
        '8g2',
        'part',
        '8g3',
        'exist',
        '8g5',
        'empty',
        '8g7',
        'nabla',
        '8g8',
        'isin',
        '8g9',
        'notin',
        '8gb',
        'ni',
        '8gf',
        'prod',
        '8gh',
        'sum',
        '8gi',
        'minus',
        '8gn',
        'lowast',
        '8gq',
        'radic',
        '8gt',
        'prop',
        '8gu',
        'infin',
        '8h0',
        'ang',
        '8h7',
        'and',
        '8h8',
        'or',
        '8h9',
        'cap',
        '8ha',
        'cup',
        '8hb',
        'int',
        '8hk',
        'there4',
        '8hs',
        'sim',
        '8i5',
        'cong',
        '8i8',
        'asymp',
        '8j0',
        'ne',
        '8j1',
        'equiv',
        '8j4',
        'le',
        '8j5',
        'ge',
        '8k2',
        'sub',
        '8k3',
        'sup',
        '8k4',
        'nsub',
        '8k6',
        'sube',
        '8k7',
        'supe',
        '8kl',
        'oplus',
        '8kn',
        'otimes',
        '8l5',
        'perp',
        '8m5',
        'sdot',
        '8o8',
        'lceil',
        '8o9',
        'rceil',
        '8oa',
        'lfloor',
        '8ob',
        'rfloor',
        '8p9',
        'lang',
        '8pa',
        'rang',
        '9ea',
        'loz',
        '9j0',
        'spades',
        '9j3',
        'clubs',
        '9j5',
        'hearts',
        '9j6',
        'diams',
        'ai',
        'OElig',
        'aj',
        'oelig',
        'b0',
        'Scaron',
        'b1',
        'scaron',
        'bo',
        'Yuml',
        'm6',
        'circ',
        'ms',
        'tilde',
        '802',
        'ensp',
        '803',
        'emsp',
        '809',
        'thinsp',
        '80c',
        'zwnj',
        '80d',
        'zwj',
        '80e',
        'lrm',
        '80f',
        'rlm',
        '80j',
        'ndash',
        '80k',
        'mdash',
        '80o',
        'lsquo',
        '80p',
        'rsquo',
        '80q',
        'sbquo',
        '80s',
        'ldquo',
        '80t',
        'rdquo',
        '80u',
        'bdquo',
        '810',
        'dagger',
        '811',
        'Dagger',
        '81g',
        'permil',
        '81p',
        'lsaquo',
        '81q',
        'rsaquo',
        '85c',
        'euro'
    ],

         
    /**
     * Encodes the specified string using raw entities. This means only the required XML base entities will be encoded.
     *
     * @method encodeRaw
     * @param {String} text Text to encode.
     * @param {Boolean} attr Optional flag to specify if the text is attribute contents.
     * @return {String} Entity encoded text.
     */
    encodeRaw: function(text, attr)
    {
        var t = this;
        return text.replace(attr ? this.attrsCharsRegExp : this.textCharsRegExp, function(chr) {
            return t.baseEntities[chr] || chr;
        });
    },
    /**
     * Encoded the specified text with both the attributes and text entities. This function will produce larger text contents
     * since it doesn't know if the context is within a attribute or text node. This was added for compatibility
     * and is exposed as the DOMUtils.encode function.
     *
     * @method encodeAllRaw
     * @param {String} text Text to encode.
     * @return {String} Entity encoded text.
     */
    encodeAllRaw: function(text) {
        var t = this;
        return ('' + text).replace(this.rawCharsRegExp, function(chr) {
            return t.baseEntities[chr] || chr;
        });
    },
    /**
     * Encodes the specified string using numeric entities. The core entities will be
     * encoded as named ones but all non lower ascii characters will be encoded into numeric entities.
     *
     * @method encodeNumeric
     * @param {String} text Text to encode.
     * @param {Boolean} attr Optional flag to specify if the text is attribute contents.
     * @return {String} Entity encoded text.
     */
    encodeNumeric: function(text, attr) {
        var t = this;
        return text.replace(attr ? this.attrsCharsRegExp : this.textCharsRegExp, function(chr) {
            // Multi byte sequence convert it to a single entity
            if (chr.length > 1) {
                return '&#' + (1024 * (chr.charCodeAt(0) - 55296) + (chr.charCodeAt(1) - 56320) + 65536) + ';';
            }
            return t.baseEntities[chr] || '&#' + chr.charCodeAt(0) + ';';
        });
    },
    /**
     * Encodes the specified string using named entities. The core entities will be encoded
     * as named ones but all non lower ascii characters will be encoded into named entities.
     *
     * @method encodeNamed
     * @param {String} text Text to encode.
     * @param {Boolean} attr Optional flag to specify if the text is attribute contents.
     * @param {Object} entities Optional parameter with entities to use.
     * @return {String} Entity encoded text.
     */
    encodeNamed: function(text, attr, entities) {
        var t = this;
        entities = entities || this.namedEntities;
        return text.replace(attr ? this.attrsCharsRegExp : this.textCharsRegExp, function(chr) {
            return t.baseEntities[chr] || entities[chr] || chr;
        });
    },
    /**
     * Returns an encode function based on the name(s) and it's optional entities.
     *
     * @method getEncodeFunc
     * @param {String} name Comma separated list of encoders for example named,numeric.
     * @param {String} entities Optional parameter with entities to use instead of the built in set.
     * @return {function} Encode function to be used.
     */
    getEncodeFunc: function(name, entities) {
        entities = this.buildEntitiesLookup(entities) || this.namedEntities;
        var t = this;
        function encodeNamedAndNumeric(text, attr) {
            return text.replace(attr ? t.attrsCharsRegExp : t.textCharsRegExp, function(chr) {
                return t.baseEntities[chr] || entities[chr] || '&#' + chr.charCodeAt(0) + ';' || chr;
            });
        }

        function encodeCustomNamed(text, attr) {
            return t.encodeNamed(text, attr, entities);
        }
        // Replace + with , to be compatible with previous TinyMCE versions
        name = this.makeMap(name.replace(/\+/g, ','));
        // Named and numeric encoder
        if (name.named && name.numeric) {
            return this.encodeNamedAndNumeric;
        }
        // Named encoder
        if (name.named) {
            // Custom names
            if (entities) {
                return encodeCustomNamed;
            }
            return this.encodeNamed;
        }
        // Numeric
        if (name.numeric) {
            return this.encodeNumeric;
        }
        // Raw encoder
        return this.encodeRaw;
    },
    /**
     * Decodes the specified string, this will replace entities with raw UTF characters.
     *
     * @method decode
     * @param {String} text Text to entity decode.
     * @return {String} Entity decoded string.
     */
    decode: function(text)
    {
        var  t = this;
        return text.replace(this.entityRegExp, function(all, numeric) {
            if (numeric) {
                numeric = 'x' === numeric.charAt(0).toLowerCase() ? parseInt(numeric.substr(1), 16) : parseInt(numeric, 10);
                // Support upper UTF
                if (numeric > 65535) {
                    numeric -= 65536;
                    return String.fromCharCode(55296 + (numeric >> 10), 56320 + (1023 & numeric));
                }
                return t.asciiMap[numeric] || String.fromCharCode(numeric);
            }
            return t.reverseEntities[all] || t.namedEntities[all] || t.nativeDecode(all);
        });
    },
    nativeDecode : function (text) {
        return text;
    },
    makeMap : function (items, delim, map) {
		var i;
		items = items || [];
		delim = delim || ',';
		if (typeof items == "string") {
			items = items.split(delim);
		}
		map = map || {};
		i = items.length;
		while (i--) {
			map[items[i]] = {};
		}
		return map;
	}
};
    
    
    
Roo.htmleditor.TidyEntities.init();
/**
 * @class Roo.htmleditor.KeyEnter
 * Handle Enter press..
 * @cfg {Roo.HtmlEditorCore} core the editor.
 * @constructor
 * Create a new Filter.
 * @param {Object} config Configuration options
 */





Roo.htmleditor.KeyEnter = function(cfg) {
    Roo.apply(this, cfg);
    // this does not actually call walk as it's really just a abstract class
 
    Roo.get(this.core.doc.body).on('keypress', this.keypress, this);
}

//Roo.htmleditor.KeyEnter.i = 0;


Roo.htmleditor.KeyEnter.prototype = {
    
    core : false,
    
    keypress : function(e)
    {
        if (e.charCode != 13 && e.charCode != 10) {
            Roo.log([e.charCode,e]);
            return true;
        }
        e.preventDefault();
        // https://stackoverflow.com/questions/18552336/prevent-contenteditable-adding-div-on-enter-chrome
        var doc = this.core.doc;
          //add a new line
       
    
        var sel = this.core.getSelection();
        var range = sel.getRangeAt(0);
        var n = range.commonAncestorContainer;
        var pc = range.closest([ 'ol', 'ul']);
        var pli = range.closest('li');
        if (!pc || e.ctrlKey) {
            // on it list, or ctrl pressed.
            if (!e.ctrlKey) {
                sel.insertNode('br', 'after'); 
            } else {
                // only do this if we have ctrl key..
                var br = doc.createElement('br');
                br.className = 'clear';
                br.setAttribute('style', 'clear: both');
                sel.insertNode(br, 'after'); 
            }
            
         
            this.core.undoManager.addEvent();
            this.core.fireEditorEvent(e);
            return false;
        }
        
        // deal with <li> insetion
        if (pli.innerText.trim() == '' &&
            pli.previousSibling &&
            pli.previousSibling.nodeName == 'LI' &&
            pli.previousSibling.innerText.trim() ==  '') {
            pli.parentNode.removeChild(pli.previousSibling);
            sel.cursorAfter(pc);
            this.core.undoManager.addEvent();
            this.core.fireEditorEvent(e);
            return false;
        }
    
        var li = doc.createElement('LI');
        li.innerHTML = '&nbsp;';
        if (!pli || !pli.firstSibling) {
            pc.appendChild(li);
        } else {
            pli.parentNode.insertBefore(li, pli.firstSibling);
        }
        sel.cursorText (li.firstChild);
      
        this.core.undoManager.addEvent();
        this.core.fireEditorEvent(e);

        return false;
        
    
        
        
         
    }
};
     
/**
 * @class Roo.htmleditor.Block
 * Base class for html editor blocks - do not use it directly .. extend it..
 * @cfg {DomElement} node The node to apply stuff to.
 * @cfg {String} friendly_name the name that appears in the context bar about this block
 * @cfg {Object} Context menu - see Roo.form.HtmlEditor.ToolbarContext
 
 * @constructor
 * Create a new Filter.
 * @param {Object} config Configuration options
 */

Roo.htmleditor.Block  = function(cfg)
{
    // do nothing .. should not be called really.
}
/**
 * factory method to get the block from an element (using cache if necessary)
 * @static
 * @param {HtmlElement} the dom element
 */
Roo.htmleditor.Block.factory = function(node)
{
    var cc = Roo.htmleditor.Block.cache;
    var id = Roo.get(node).id;
    if (typeof(cc[id]) != 'undefined' && (!cc[id].node || cc[id].node.closest('body'))) {
        Roo.htmleditor.Block.cache[id].readElement(node);
        return Roo.htmleditor.Block.cache[id];
    }
    var db  = node.getAttribute('data-block');
    if (!db) {
        db = node.nodeName.toLowerCase().toUpperCaseFirst();
    }
    var cls = Roo.htmleditor['Block' + db];
    if (typeof(cls) == 'undefined') {
        //Roo.log(node.getAttribute('data-block'));
        Roo.log("OOps missing block : " + 'Block' + db);
        return false;
    }
    Roo.htmleditor.Block.cache[id] = new cls({ node: node });
    return Roo.htmleditor.Block.cache[id];  /// should trigger update element
};

/**
 * initalize all Elements from content that are 'blockable'
 * @static
 * @param the body element
 */
Roo.htmleditor.Block.initAll = function(body, type)
{
    if (typeof(type) == 'undefined') {
        var ia = Roo.htmleditor.Block.initAll;
        ia(body,'table');
        ia(body,'td');
        ia(body,'figure');
        return;
    }
    Roo.each(Roo.get(body).query(type), function(e) {
        Roo.htmleditor.Block.factory(e);    
    },this);
};
// question goes here... do we need to clear out this cache sometimes?
// or show we make it relivant to the htmleditor.
Roo.htmleditor.Block.cache = {};

Roo.htmleditor.Block.prototype = {
    
    node : false,
    
     // used by context menu
    friendly_name : 'Based Block',
    
    // text for button to delete this element
    deleteTitle : false,
    
    context : false,
    /**
     * Update a node with values from this object
     * @param {DomElement} node
     */
    updateElement : function(node)
    {
        Roo.DomHelper.update(node === undefined ? this.node : node, this.toObject());
    },
     /**
     * convert to plain HTML for calling insertAtCursor..
     */
    toHTML : function()
    {
        return Roo.DomHelper.markup(this.toObject());
    },
    /**
     * used by readEleemnt to extract data from a node
     * may need improving as it's pretty basic
     
     * @param {DomElement} node
     * @param {String} tag - tag to find, eg. IMG ?? might be better to use DomQuery ?
     * @param {String} attribute (use html - for contents, style for using next param as style, or false to return the node)
     * @param {String} style the style property - eg. text-align
     */
    getVal : function(node, tag, attr, style)
    {
        var n = node;
        if (tag !== true && n.tagName != tag.toUpperCase()) {
            // in theory we could do figure[3] << 3rd figure? or some more complex search..?
            // but kiss for now.
            n = node.getElementsByTagName(tag).item(0);
        }
        if (!n) {
            return '';
        }
        if (attr === false) {
            return n;
        }
        if (attr == 'html') {
            return n.innerHTML;
        }
        if (attr == 'style') {
            return n.style[style]; 
        }
        
        return n.hasAttribute(attr) ? n.getAttribute(attr) : '';
            
    },
    /**
     * create a DomHelper friendly object - for use with 
     * Roo.DomHelper.markup / overwrite / etc..
     * (override this)
     */
    toObject : function()
    {
        return {};
    },
      /**
     * Read a node that has a 'data-block' property - and extract the values from it.
     * @param {DomElement} node - the node
     */
    readElement : function(node)
    {
        
    } 
    
    
};

 

/**
 * @class Roo.htmleditor.BlockFigure
 * Block that has an image and a figcaption
 * @cfg {String} image_src the url for the image
 * @cfg {String} align (left|right) alignment for the block default left
 * @cfg {String} caption the text to appear below  (and in the alt tag)
 * @cfg {String} caption_display (block|none) display or not the caption
 * @cfg {String|number} image_width the width of the image number or %?
 * @cfg {String|number} image_height the height of the image number or %?
 * 
 * @constructor
 * Create a new Filter.
 * @param {Object} config Configuration options
 */

Roo.htmleditor.BlockFigure = function(cfg)
{
    if (cfg.node) {
        this.readElement(cfg.node);
        this.updateElement(cfg.node);
    }
    Roo.apply(this, cfg);
}
Roo.extend(Roo.htmleditor.BlockFigure, Roo.htmleditor.Block, {
 
    
    // setable values.
    image_src: '',
    align: 'center',
    caption : '',
    caption_display : 'block',
    width : '100%',
    cls : '',
    href: '',
    video_url : '',
    
    // margin: '2%', not used
    
    text_align: 'left', //   (left|right) alignment for the text caption default left. - not used at present

    
    // used by context menu
    friendly_name : 'Image with caption',
    deleteTitle : "Delete Image and Caption",
    
    contextMenu : function(toolbar)
    {
        
        var block = function() {
            return Roo.htmleditor.Block.factory(toolbar.tb.selectedNode);
        };
        
        var rooui =  typeof(Roo.bootstrap.form) == 'undefined' ? Roo : Roo.bootstrap;
        
        var syncValue = toolbar.editorcore.syncValue;
        
        var fields = {};
        
        return [
             {
                xtype : 'TextItem',
                text : "Source: ",
                xns : rooui.Toolbar  //Boostrap?
            },
            {
                xtype : 'Button',
                text: 'Change Image URL',
                 
                listeners : {
                    click: function (btn, state)
                    {
                        var b = block();
                        
                        Roo.MessageBox.show({
                            title : "Image Source URL",
                            msg : "Enter the url for the image",
                            buttons: Roo.MessageBox.OKCANCEL,
                            fn: function(btn, val){
                                if (btn != 'ok') {
                                    return;
                                }
                                b.image_src = val;
                                b.updateElement();
                                syncValue();
                                toolbar.editorcore.onEditorEvent();
                            },
                            minWidth:250,
                            prompt:true,
                            //multiline: multiline,
                            modal : true,
                            value : b.image_src
                        });
                    }
                },
                xns : rooui.Toolbar
            },
         
            {
                xtype : 'Button',
                text: 'Change Link URL',
                onPromptKeyUp: function(e) {
                    var b = block();
                    var isYoutube = b.cls == 'youtube';

                    if(!isYoutube) {
                        return;
                    }

                    var msg = "Enter the url for the link - leave blank to have no link";
                    var video_url = "//www.youtube.com/embed/" + e.target.value.split('/').pop().split('?').shift();
                    msg += "<br>Embed Link: <a href='" + video_url + "' target='_blank'>" + video_url + "</a>";

                    Roo.MessageBox.updateText(msg);
                },
                listeners : {
                    click: function (btn, state)
                    {
                        var b = block();

                        var isYoutube = b.cls == 'youtube';

                        var msg = "Enter the url for the link - leave blank to have no link";
                        if(isYoutube) {
                            msg += "<br>Embed Link: <a href='" + b.video_url + "' target='_blank'>" + b.video_url + "</a>";
                        }
                        
                        Roo.MessageBox.show({
                            title : "Link URL",
                            msg : msg,
                            buttons: Roo.MessageBox.OKCANCEL,
                            fn: function(btn, val){
                                if (btn != 'ok') {
                                    return;
                                }
                                b.href = val;
                                if(isYoutube) {
                                    b.video_url = "//www.youtube.com/embed/" + val.split('/').pop().split('?').shift();
                                }
                                b.updateElement();
                                syncValue();
                                toolbar.editorcore.onEditorEvent();
                            },
                            minWidth:250,
                            prompt:true,
                            //multiline: multiline,
                            modal : true,
                            value : b.href
                        });
                        
                        var activeTextEl = Roo.MessageBox.getActiveTextEl();
                        activeTextEl.removeListener('keyup', btn.onPromptKeyUp);
                        if(isYoutube) {
                            activeTextEl.addListener('keyup', btn.onPromptKeyUp);
                        }
                    }
                },
                xns : rooui.Toolbar
            },
            {
                xtype : 'Button',
                cls: 'x-toolbar-figure-show-video-url',
                text: 'Show Video URL',
                listeners : {
                    click: function (btn, state)
                    {
                        Roo.MessageBox.alert("Video URL",
                            block().video_url == '' ? 'This image is not linked ot a video' :
                                'The image is linked to: <a target="_new" href="' + block().video_url + '">' + block().video_url + '</a>');
                    }
                },
                xns : rooui.Toolbar
            },
            
            {
                xtype : 'TextItem',
                text : "Width: ",
                xns : rooui.Toolbar  //Boostrap?
            },
            {
                xtype : 'ComboBox',
                
                allowBlank : false,
                displayField : 'val',
                editable : true,
                listWidth : 100,
                triggerAction : 'all',
                typeAhead : true,
                valueField : 'val',
                width : 70,
                name : 'width',
                listeners : {
                    select : function (combo, r, index)
                    {
                        toolbar.editorcore.selectNode(toolbar.tb.selectedNode);
                        var b = block();
                        b.width = r.get('val');
                        b.updateElement();
                        syncValue();
                        toolbar.editorcore.onEditorEvent();
                    }
                },
                xns : rooui.form,
                store : {
                    xtype : 'SimpleStore',
                    data : [
                        ['100%'],
                        ['80%'],
                        ['50%'],
                        ['20%'],
                        ['10%']
                    ],
                    fields : [ 'val'],
                    xns : Roo.data
                }
            },
            {
                xtype : 'TextItem',
                text : "Align: ",
                xns : rooui.Toolbar  //Boostrap?
            },
            {
                xtype : 'ComboBox',
                allowBlank : false,
                displayField : 'val',
                editable : true,
                listWidth : 100,
                triggerAction : 'all',
                typeAhead : true,
                valueField : 'val',
                width : 70,
                name : 'align',
                listeners : {
                    select : function (combo, r, index)
                    {
                        toolbar.editorcore.selectNode(toolbar.tb.selectedNode);
                        var b = block();
                        b.align = r.get('val');
                        b.updateElement();
                        syncValue();
                        toolbar.editorcore.onEditorEvent();
                    }
                },
                xns : rooui.form,
                store : {
                    xtype : 'SimpleStore',
                    data : [
                        ['left'],
                        ['right'],
                        ['center']
                    ],
                    fields : [ 'val'],
                    xns : Roo.data
                }
            },
            
              
            {
                xtype : 'Button',
                text: 'Hide Caption',
                name : 'caption_display',
                pressed : false,
                enableToggle : true,
                setValue : function(v) {
                    // this trigger toggle.
                     
                    this.setText(v ? "Hide Caption" : "Show Caption");
                    this.setPressed(v != 'block');
                },
                listeners : {
                    toggle: function (btn, state)
                    {
                        var b  = block();
                        b.caption_display = b.caption_display == 'block' ? 'none' : 'block';
                        this.setText(b.caption_display == 'block' ? "Hide Caption" : "Show Caption");
                        b.updateElement();
                        syncValue();
                        toolbar.editorcore.selectNode(toolbar.tb.selectedNode);
                        toolbar.editorcore.onEditorEvent();
                    }
                },
                xns : rooui.Toolbar
            }
        ];
        
    },
    /**
     * create a DomHelper friendly object - for use with
     * Roo.DomHelper.markup / overwrite / etc..
     */
    toObject : function()
    {
        var d = document.createElement('div');
        d.innerHTML = this.caption;
        
        var m = this.width != '100%' && this.align == 'center' ? '0 auto' : 0; 
        
        var iw = this.align == 'center' ? this.width : '100%';
        var img =   {
            tag : 'img',
            contenteditable : 'false',
            src : this.image_src,
            // removeHTML and reduce spaces and show double quotation marks
            alt : d.innerText.replace(/\n/g, " ").replace(/\s+/g, ' ').replaceAll(/"/g, "&quot;").trim(),
            style: {
                width : iw,
                maxWidth : iw + ' !important', // this is not getting rendered?
                margin : m  
                
            },
            width: this.align == 'center' ?  this.width : '100%' 

        };
        
        /*
        '<div class="{0}" width="420" height="315" src="{1}" frameborder="0" allowfullscreen>' +
                    '<a href="{2}">' + 
                        '<img class="{0}-thumbnail" src="{3}/Images/{4}/{5}#image-{4}" />' + 
                    '</a>' + 
                '</div>',
        */
                
        if (this.href.length > 0) {
            img = {
                tag : 'a',
                href: this.href,
                contenteditable : 'true',
                cn : [
                    img
                ]
            };
        }
        
        
        if (this.video_url.length > 0) {
            img = {
                tag : 'div',
                cls : this.cls,
                frameborder : 0,
                allowfullscreen : true,
                width : 420,  // these are for video tricks - that we replace the outer
                height : 315,
                src : this.video_url,
                cn : [
                    img
                ]
            };
        }


  
        var ret =   {
            tag: 'figure',
            'data-block' : 'Figure',
            'data-width' : this.width,
            'data-caption' : this.caption, 
            'data-caption-display' : this.caption_display,
            contenteditable : 'false',
            
            style : {
                display: 'block',
                float :  this.align ,
                maxWidth :  this.align == 'center' ? '100% !important' : (this.width + ' !important'),
                width : this.align == 'center' ? '100%' : this.width,
                margin:  '0px',
                padding: this.align == 'center' ? '0' : '0 10px' ,
                textAlign : this.align   // seems to work for email..
                
            },
            
            align : this.align,
            cn : [
                img
            ]
        };

        // show figcaption only if caption_display is 'block'
        if(this.caption_display == 'block') {
            ret['cn'].push({
                tag: 'figcaption',
                style : {
                    textAlign : 'left',
                    fontSize : '16px',
                    lineHeight : '24px',
                    display : this.caption_display,
                    maxWidth : (this.align == 'center' ?  this.width : '100%' ) + ' !important',
                    margin: m,
                    width: this.align == 'center' ?  this.width : '100%' 
                
                     
                },
                cls : this.cls.length > 0 ? (this.cls  + '-thumbnail' ) : '',
                cn : [
                    {
                        tag: 'div',
                        style  : {
                            marginTop : '16px',
                            textAlign : 'start'
                        },
                        align: 'left',
                        cn : [
                            {
                                // we can not rely on yahoo syndication to use CSS elements - so have to use  '<i>' to encase stuff.
                                tag : 'i',
                                contenteditable : Roo.htmleditor.BlockFigure.caption_edit,
                                html : this.caption.length ? this.caption : "Caption" // fake caption
                            }
                            
                        ]
                    }
                    
                ]
                
            });
        }
        return ret;
         
    },
    
    readElement : function(node)
    {
        // this should not really come from the link...
        this.video_url = this.getVal(node, 'div', 'src');
        this.cls = this.getVal(node, 'div', 'class');
        this.href = this.getVal(node, 'a', 'href');
        
        
        this.image_src = this.getVal(node, 'img', 'src');
         
        this.align = this.getVal(node, 'figure', 'align');

        // caption display is stored in figure
        this.caption_display = this.getVal(node, true, 'data-caption-display');

        // backward compatible
        // it was stored in figcaption
        if(this.caption_display == '') {
            this.caption_display = this.getVal(node, 'figcaption', 'data-display');
        }

        // read caption from figcaption
        var figcaption = this.getVal(node, 'figcaption', false);

        if (figcaption !== '') {
            this.caption = this.getVal(figcaption, 'i', 'html');
        }
                

        // read caption from data-caption in figure if no caption from figcaption
        var dc = this.getVal(node, true, 'data-caption');

        if(this.caption_display == 'none' && dc && dc.length){
            this.caption = dc;
        }

        this.caption = this.caption.replaceAll(/"/g, "&quot;");

        //this.text_align = this.getVal(node, 'figcaption', 'style','text-align');
        this.width = this.getVal(node, true, 'data-width');
        //this.margin = this.getVal(node, 'figure', 'style', 'margin');
        
    },
    removeNode : function()
    {
        return this.node;
    }
    
  
   
     
    
    
    
    
});

Roo.apply(Roo.htmleditor.BlockFigure, {
    caption_edit : true
});

 

/**
 * @class Roo.htmleditor.BlockTable
 * Block that manages a table
 * 
 * @constructor
 * Create a new Filter.
 * @param {Object} config Configuration options
 */

Roo.htmleditor.BlockTable = function(cfg)
{
    if (cfg.node) {
        this.readElement(cfg.node);
        this.updateElement(cfg.node);
    }
    Roo.apply(this, cfg);
    if (!cfg.node) {
        this.rows = [];
        for(var r = 0; r < this.no_row; r++) {
            this.rows[r] = [];
            for(var c = 0; c < this.no_col; c++) {
                this.rows[r][c] = this.emptyCell();
            }
        }
    }
    
    
}
Roo.extend(Roo.htmleditor.BlockTable, Roo.htmleditor.Block, {
 
    rows : false,
    no_col : 1,
    no_row : 1,
    
    
    width: '100%',
    
    // used by context menu
    friendly_name : 'Table',
    deleteTitle : 'Delete Table',
    // context menu is drawn once..
    
    contextMenu : function(toolbar)
    {
        
        var block = function() {
            return Roo.htmleditor.Block.factory(toolbar.tb.selectedNode);
        };
        
        
        var rooui =  typeof(Roo.bootstrap.form) == 'undefined' ? Roo : Roo.bootstrap;
        
        var syncValue = toolbar.editorcore.syncValue;
        
        var fields = {};
        
        return [
            {
                xtype : 'TextItem',
                text : "Width: ",
                xns : rooui.Toolbar  //Boostrap?
            },
            {
                xtype : 'ComboBox',
                allowBlank : false,
                displayField : 'val',
                editable : true,
                listWidth : 100,
                triggerAction : 'all',
                typeAhead : true,
                valueField : 'val',
                width : 100,
                name : 'width',
                listeners : {
                    select : function (combo, r, index)
                    {
                        toolbar.editorcore.selectNode(toolbar.tb.selectedNode);
                        var b = block();
                        b.width = r.get('val');
                        b.updateElement();
                        syncValue();
                        toolbar.editorcore.onEditorEvent();
                    }
                },
                xns : rooui.form,
                store : {
                    xtype : 'SimpleStore',
                    data : [
                        ['100%'],
                        ['auto']
                    ],
                    fields : [ 'val'],
                    xns : Roo.data
                }
            },
            // -------- Cols
            
            {
                xtype : 'TextItem',
                text : "Columns: ",
                xns : rooui.Toolbar  //Boostrap?
            },
         
            {
                xtype : 'Button',
                text: '-',
                listeners : {
                    click : function (_self, e)
                    {
                        toolbar.editorcore.selectNode(toolbar.tb.selectedNode);
                        block().removeColumn();
                        syncValue();
                        toolbar.editorcore.onEditorEvent();
                    }
                },
                xns : rooui.Toolbar
            },
            {
                xtype : 'Button',
                text: '+',
                listeners : {
                    click : function (_self, e)
                    {
                        toolbar.editorcore.selectNode(toolbar.tb.selectedNode);
                        block().addColumn();
                        syncValue();
                        toolbar.editorcore.onEditorEvent();
                    }
                },
                xns : rooui.Toolbar
            },
            // -------- ROWS
            {
                xtype : 'TextItem',
                text : "Rows: ",
                xns : rooui.Toolbar  //Boostrap?
            },
         
            {
                xtype : 'Button',
                text: '-',
                listeners : {
                    click : function (_self, e)
                    {
                        toolbar.editorcore.selectNode(toolbar.tb.selectedNode);
                        block().removeRow();
                        syncValue();
                        toolbar.editorcore.onEditorEvent();
                    }
                },
                xns : rooui.Toolbar
            },
            {
                xtype : 'Button',
                text: '+',
                listeners : {
                    click : function (_self, e)
                    {
                        block().addRow();
                        syncValue();
                        toolbar.editorcore.onEditorEvent();
                    }
                },
                xns : rooui.Toolbar
            },
            // -------- ROWS
            {
                xtype : 'Button',
                text: 'Reset Column Widths',
                listeners : {
                    
                    click : function (_self, e)
                    {
                        block().resetWidths();
                        syncValue();
                        toolbar.editorcore.onEditorEvent();
                    }
                },
                xns : rooui.Toolbar
            } 
            
            
            
        ];
        
    },
    
    
  /**
     * create a DomHelper friendly object - for use with
     * Roo.DomHelper.markup / overwrite / etc..
     * ?? should it be called with option to hide all editing features?
     */
    toObject : function()
    {
        
        var ret = {
            tag : 'table',
            contenteditable : 'false', // this stops cell selection from picking the table.
            'data-block' : 'Table',
            style : {
                width:  this.width,
                border : 'solid 1px #000', // ??? hard coded?
                'border-collapse' : 'collapse' 
            },
            cn : [
                { tag : 'tbody' , cn : [] }
            ]
        };
        
        // do we have a head = not really 
        var ncols = 0;
        Roo.each(this.rows, function( row ) {
            var tr = {
                tag: 'tr',
                style : {
                    margin: '6px',
                    border : 'solid 1px #000',
                    textAlign : 'left' 
                },
                cn : [ ]
            };
            
            ret.cn[0].cn.push(tr);
            // does the row have any properties? ?? height?
            var nc = 0;
            Roo.each(row, function( cell ) {
                
                var td = {
                    tag : 'td',
                    contenteditable :  'true',
                    'data-block' : 'Td',
                    html : cell.html,
                    style : cell.style
                };
                if (cell.colspan > 1) {
                    td.colspan = cell.colspan ;
                    nc += cell.colspan;
                } else {
                    nc++;
                }
                if (cell.rowspan > 1) {
                    td.rowspan = cell.rowspan ;
                }
                
                
                // widths ?
                tr.cn.push(td);
                    
                
            }, this);
            ncols = Math.max(nc, ncols);
            
            
        }, this);
        // add the header row..
        
        ncols++;
         
        
        return ret;
         
    },
    
    readElement : function(node)
    {
        node  = node ? node : this.node ;
        this.width = this.getVal(node, true, 'style', 'width') || '100%';
        
        this.rows = [];
        this.no_row = 0;
        var trs = Array.from(node.rows);
        trs.forEach(function(tr) {
            var row =  [];
            this.rows.push(row);
            
            this.no_row++;
            var no_column = 0;
            Array.from(tr.cells).forEach(function(td) {
                
                var add = {
                    colspan : td.hasAttribute('colspan') ? td.getAttribute('colspan')*1 : 1,
                    rowspan : td.hasAttribute('rowspan') ? td.getAttribute('rowspan')*1 : 1,
                    style : td.hasAttribute('style') ? td.getAttribute('style') : '',
                    html : td.innerHTML
                };
                no_column += add.colspan;
                     
                
                row.push(add);
                
                
            },this);
            this.no_col = Math.max(this.no_col, no_column);
            
            
        },this);
        
        
    },
    normalizeRows: function()
    {
        var ret= [];
        var rid = -1;
        this.rows.forEach(function(row) {
            rid++;
            ret[rid] = [];
            row = this.normalizeRow(row);
            var cid = 0;
            row.forEach(function(c) {
                while (typeof(ret[rid][cid]) != 'undefined') {
                    cid++;
                }
                if (typeof(ret[rid]) == 'undefined') {
                    ret[rid] = [];
                }
                ret[rid][cid] = c;
                c.row = rid;
                c.col = cid;
                if (c.rowspan < 2) {
                    return;
                }
                
                for(var i = 1 ;i < c.rowspan; i++) {
                    if (typeof(ret[rid+i]) == 'undefined') {
                        ret[rid+i] = [];
                    }
                    ret[rid+i][cid] = c;
                }
            });
        }, this);
        return ret;
    
    },
    
    normalizeRow: function(row)
    {
        var ret= [];
        row.forEach(function(c) {
            if (c.colspan < 2) {
                ret.push(c);
                return;
            }
            for(var i =0 ;i < c.colspan; i++) {
                ret.push(c);
            }
        });
        return ret;
    
    },
    
    deleteColumn : function(sel)
    {
        if (!sel || sel.type != 'col') {
            return;
        }
        if (this.no_col < 2) {
            return;
        }
        
        this.rows.forEach(function(row) {
            var cols = this.normalizeRow(row);
            var col = cols[sel.col];
            if (col.colspan > 1) {
                col.colspan --;
            } else {
                row.remove(col);
            }
            
        }, this);
        this.no_col--;
        
    },
    removeColumn : function()
    {
        this.deleteColumn({
            type: 'col',
            col : this.no_col-1
        });
        this.updateElement();
    },
    
     
    addColumn : function()
    {
        
        this.rows.forEach(function(row) {
            row.push(this.emptyCell());
           
        }, this);
        this.updateElement();
    },
    
    deleteRow : function(sel)
    {
        if (!sel || sel.type != 'row') {
            return;
        }
        
        if (this.no_row < 2) {
            return;
        }
        
        var rows = this.normalizeRows();
        
        
        rows[sel.row].forEach(function(col) {
            if (col.rowspan > 1) {
                col.rowspan--;
            } else {
                col.remove = 1; // flage it as removed.
            }
            
        }, this);
        var newrows = [];
        this.rows.forEach(function(row) {
            newrow = [];
            row.forEach(function(c) {
                if (typeof(c.remove) == 'undefined') {
                    newrow.push(c);
                }
                
            });
            if (newrow.length > 0) {
                newrows.push(row);
            }
        });
        this.rows =  newrows;
        
        
        
        this.no_row--;
        this.updateElement();
        
    },
    removeRow : function()
    {
        this.deleteRow({
            type: 'row',
            row : this.no_row-1
        });
        
    },
    
     
    addRow : function()
    {
        
        var row = [];
        for (var i = 0; i < this.no_col; i++ ) {
            
            row.push(this.emptyCell());
           
        }
        this.rows.push(row);
        this.updateElement();
        
    },
     
    // the default cell object... at present...
    emptyCell : function() {
        return (new Roo.htmleditor.BlockTd({})).toObject();
        
     
    },
    
    removeNode : function()
    {
        return this.node;
    },
    
    
    
    resetWidths : function()
    {
        Array.from(this.node.getElementsByTagName('td')).forEach(function(n) {
            var nn = Roo.htmleditor.Block.factory(n);
            nn.width = '';
            nn.updateElement(n);
        });
    }
    
    
    
    
})

/**
 *
 * editing a TD?
 *
 * since selections really work on the table cell, then editing really should work from there
 *
 * The original plan was to support merging etc... - but that may not be needed yet..
 *
 * So this simple version will support:
 *   add/remove cols
 *   adjust the width +/-
 *   reset the width...
 *   
 *
 */


 

/**
 * @class Roo.htmleditor.BlockTable
 * Block that manages a table
 * 
 * @constructor
 * Create a new Filter.
 * @param {Object} config Configuration options
 */

Roo.htmleditor.BlockTd = function(cfg)
{
    if (cfg.node) {
        this.readElement(cfg.node);
        this.updateElement(cfg.node);
    }
    Roo.apply(this, cfg);
     
    
    
}
Roo.extend(Roo.htmleditor.BlockTd, Roo.htmleditor.Block, {
 
    node : false,
    
    width: '',
    textAlign : 'left',
    valign : 'top',
    
    colspan : 1,
    rowspan : 1,
    
    
    // used by context menu
    friendly_name : 'Table Cell',
    deleteTitle : false, // use our customer delete
    
    // context menu is drawn once..
    
    contextMenu : function(toolbar)
    {
        
        var cell = function() {
            return Roo.htmleditor.Block.factory(toolbar.tb.selectedNode);
        };
        
        var table = function() {
            return Roo.htmleditor.Block.factory(toolbar.tb.selectedNode.closest('table'));
        };
        
        var lr = false;
        var saveSel = function()
        {
            lr = toolbar.editorcore.getSelection().getRangeAt(0);
        }
        var restoreSel = function()
        {
            if (lr) {
                (function() {
                    toolbar.editorcore.focus();
                    var cr = toolbar.editorcore.getSelection();
                    cr.removeAllRanges();
                    cr.addRange(lr);
                    toolbar.editorcore.onEditorEvent();
                }).defer(10, this);
                
                
            }
        }
        
        var rooui =  typeof(Roo.bootstrap.form) == 'undefined' ? Roo : Roo.bootstrap;
        
        var syncValue = toolbar.editorcore.syncValue;
        
        var fields = {};
        
        return [
            {
                xtype : 'Button',
                text : 'Edit Table',
                listeners : {
                    click : function() {
                        var t = toolbar.tb.selectedNode.closest('table');
                        toolbar.editorcore.selectNode(t);
                        toolbar.editorcore.onEditorEvent();                        
                    }
                }
                
            },
              
           
             
            {
                xtype : 'TextItem',
                text : "Column Width: ",
                 xns : rooui.Toolbar 
               
            },
            {
                xtype : 'Button',
                text: '-',
                listeners : {
                    click : function (_self, e)
                    {
                        toolbar.editorcore.selectNode(toolbar.tb.selectedNode);
                        cell().shrinkColumn();
                        syncValue();
                         toolbar.editorcore.onEditorEvent();
                    }
                },
                xns : rooui.Toolbar
            },
            {
                xtype : 'Button',
                text: '+',
                listeners : {
                    click : function (_self, e)
                    {
                        toolbar.editorcore.selectNode(toolbar.tb.selectedNode);
                        cell().growColumn();
                        syncValue();
                        toolbar.editorcore.onEditorEvent();
                    }
                },
                xns : rooui.Toolbar
            },
            
            {
                xtype : 'TextItem',
                text : "Vertical Align: ",
                xns : rooui.Toolbar  //Boostrap?
            },
            {
                xtype : 'ComboBox',
                allowBlank : false,
                displayField : 'val',
                editable : true,
                listWidth : 100,
                triggerAction : 'all',
                typeAhead : true,
                valueField : 'val',
                width : 100,
                name : 'valign',
                listeners : {
                    select : function (combo, r, index)
                    {
                        toolbar.editorcore.selectNode(toolbar.tb.selectedNode);
                        var b = cell();
                        b.valign = r.get('val');
                        b.updateElement();
                        syncValue();
                        toolbar.editorcore.onEditorEvent();
                    }
                },
                xns : rooui.form,
                store : {
                    xtype : 'SimpleStore',
                    data : [
                        ['top'],
                        ['middle'],
                        ['bottom'] // there are afew more... 
                    ],
                    fields : [ 'val'],
                    xns : Roo.data
                }
            },
            
            {
                xtype : 'TextItem',
                text : "Merge Cells: ",
                 xns : rooui.Toolbar 
               
            },
            
            
            {
                xtype : 'Button',
                text: 'Right',
                listeners : {
                    click : function (_self, e)
                    {
                        toolbar.editorcore.selectNode(toolbar.tb.selectedNode);
                        cell().mergeRight();
                        //block().growColumn();
                        syncValue();
                        toolbar.editorcore.onEditorEvent();
                    }
                },
                xns : rooui.Toolbar
            },
             
            {
                xtype : 'Button',
                text: 'Below',
                listeners : {
                    click : function (_self, e)
                    {
                        toolbar.editorcore.selectNode(toolbar.tb.selectedNode);
                        cell().mergeBelow();
                        //block().growColumn();
                        syncValue();
                        toolbar.editorcore.onEditorEvent();
                    }
                },
                xns : rooui.Toolbar
            },
            {
                xtype : 'TextItem',
                text : "| ",
                 xns : rooui.Toolbar 
               
            },
            
            {
                xtype : 'Button',
                text: 'Split',
                listeners : {
                    click : function (_self, e)
                    {
                        //toolbar.editorcore.selectNode(toolbar.tb.selectedNode);
                        cell().split();
                        syncValue();
                        toolbar.editorcore.selectNode(toolbar.tb.selectedNode);
                        toolbar.editorcore.onEditorEvent();
                                             
                    }
                },
                xns : rooui.Toolbar
            },
            {
                xtype : 'Fill',
                xns : rooui.Toolbar 
               
            },
        
          
            {
                xtype : 'Button',
                text: 'Delete',
                 
                xns : rooui.Toolbar,
                menu : {
                    xtype : 'Menu',
                    xns : rooui.menu,
                    items : [
                        {
                            xtype : 'Item',
                            html: 'Column',
                            listeners : {
                                click : function (_self, e)
                                {
                                    var t = table();
                                    
                                    cell().deleteColumn();
                                    syncValue();
                                    toolbar.editorcore.selectNode(t.node);
                                    toolbar.editorcore.onEditorEvent();   
                                }
                            },
                            xns : rooui.menu
                        },
                        {
                            xtype : 'Item',
                            html: 'Row',
                            listeners : {
                                click : function (_self, e)
                                {
                                    var t = table();
                                    cell().deleteRow();
                                    syncValue();
                                    
                                    toolbar.editorcore.selectNode(t.node);
                                    toolbar.editorcore.onEditorEvent();   
                                                         
                                }
                            },
                            xns : rooui.menu
                        },
                       {
                            xtype : 'Separator',
                            xns : rooui.menu
                        },
                        {
                            xtype : 'Item',
                            html: 'Table',
                            listeners : {
                                click : function (_self, e)
                                {
                                    var t = table();
                                    var nn = t.node.nextSibling || t.node.previousSibling;
                                    t.node.parentNode.removeChild(t.node);
                                    if (nn) { 
                                        toolbar.editorcore.selectNode(nn, true);
                                    }
                                    toolbar.editorcore.onEditorEvent();   
                                                         
                                }
                            },
                            xns : rooui.menu
                        }
                    ]
                }
            }
            
            // align... << fixme
            
        ];
        
    },
    
    
  /**
     * create a DomHelper friendly object - for use with
     * Roo.DomHelper.markup / overwrite / etc..
     * ?? should it be called with option to hide all editing features?
     */
 /**
     * create a DomHelper friendly object - for use with
     * Roo.DomHelper.markup / overwrite / etc..
     * ?? should it be called with option to hide all editing features?
     */
    toObject : function()
    {
        var ret = {
            tag : 'td',
            contenteditable : 'true', // this stops cell selection from picking the table.
            'data-block' : 'Td',
            valign : this.valign,
            style : {  
                'text-align' :  this.textAlign,
                border : 'solid 1px rgb(0, 0, 0)', // ??? hard coded?
                'border-collapse' : 'collapse',
                padding : '6px', // 8 for desktop / 4 for mobile
                'vertical-align': this.valign
            },
            html : this.html
        };
        if (this.width != '') {
            ret.width = this.width;
            ret.style.width = this.width;
        }
        
        
        if (this.colspan > 1) {
            ret.colspan = this.colspan ;
        } 
        if (this.rowspan > 1) {
            ret.rowspan = this.rowspan ;
        }
        
           
        
        return ret;
         
    },
    
    readElement : function(node)
    {
        node  = node ? node : this.node ;
        this.width = node.style.width;
        this.colspan = Math.max(1,1*node.getAttribute('colspan'));
        this.rowspan = Math.max(1,1*node.getAttribute('rowspan'));
        this.html = node.innerHTML;
        if (node.style.textAlign != '') {
            this.textAlign = node.style.textAlign;
        }
        
        
    },
     
    // the default cell object... at present...
    emptyCell : function() {
        return {
            colspan :  1,
            rowspan :  1,
            textAlign : 'left',
            html : "&nbsp;" // is this going to be editable now?
        };
     
    },
    
    removeNode : function()
    {
        return this.node.closest('table');
         
    },
    
    cellData : false,
    
    colWidths : false,
    
    toTableArray  : function()
    {
        var ret = [];
        var tab = this.node.closest('tr').closest('table');
        Array.from(tab.rows).forEach(function(r, ri){
            ret[ri] = [];
        });
        var rn = 0;
        this.colWidths = [];
        var all_auto = true;
        Array.from(tab.rows).forEach(function(r, ri){
            
            var cn = 0;
            Array.from(r.cells).forEach(function(ce, ci){
                var c =  {
                    cell : ce,
                    row : rn,
                    col: cn,
                    colspan : ce.colSpan,
                    rowspan : ce.rowSpan
                };
                if (ce.isEqualNode(this.node)) {
                    this.cellData = c;
                }
                // if we have been filled up by a row?
                if (typeof(ret[rn][cn]) != 'undefined') {
                    while(typeof(ret[rn][cn]) != 'undefined') {
                        cn++;
                    }
                    c.col = cn;
                }
                
                if (typeof(this.colWidths[cn]) == 'undefined' && c.colspan < 2) {
                    this.colWidths[cn] =   ce.style.width;
                    if (this.colWidths[cn] != '') {
                        all_auto = false;
                    }
                }
                
                
                if (c.colspan < 2 && c.rowspan < 2 ) {
                    ret[rn][cn] = c;
                    cn++;
                    return;
                }
                for(var j = 0; j < c.rowspan; j++) {
                    if (typeof(ret[rn+j]) == 'undefined') {
                        continue; // we have a problem..
                    }
                    ret[rn+j][cn] = c;
                    for(var i = 0; i < c.colspan; i++) {
                        ret[rn+j][cn+i] = c;
                    }
                }
                
                cn += c.colspan;
            }, this);
            rn++;
        }, this);
        
        // initalize widths.?
        // either all widths or no widths..
        if (all_auto) {
            this.colWidths[0] = false; // no widths flag.
        }
        
        
        return ret;
        
    },
    
    
    
    
    mergeRight: function()
    {
         
        // get the contents of the next cell along..
        var tr = this.node.closest('tr');
        var i = Array.prototype.indexOf.call(tr.childNodes, this.node);
        if (i >= tr.childNodes.length - 1) {
            return; // no cells on right to merge with.
        }
        var table = this.toTableArray();
        
        if (typeof(table[this.cellData.row][this.cellData.col+this.cellData.colspan]) == 'undefined') {
            return; // nothing right?
        }
        var rc = table[this.cellData.row][this.cellData.col+this.cellData.colspan];
        // right cell - must be same rowspan and on the same row.
        if (rc.rowspan != this.cellData.rowspan || rc.row != this.cellData.row) {
            return; // right hand side is not same rowspan.
        }
        
        
        
        this.node.innerHTML += ' ' + rc.cell.innerHTML;
        tr.removeChild(rc.cell);
        this.colspan += rc.colspan;
        this.node.setAttribute('colspan', this.colspan);

        var table = this.toTableArray();
        this.normalizeWidths(table);
        this.updateWidths(table);
    },
    
    
    mergeBelow : function()
    {
        var table = this.toTableArray();
        if (typeof(table[this.cellData.row+this.cellData.rowspan]) == 'undefined') {
            return; // no row below
        }
        if (typeof(table[this.cellData.row+this.cellData.rowspan][this.cellData.col]) == 'undefined') {
            return; // nothing right?
        }
        var rc = table[this.cellData.row+this.cellData.rowspan][this.cellData.col];
        
        if (rc.colspan != this.cellData.colspan || rc.col != this.cellData.col) {
            return; // right hand side is not same rowspan.
        }
        this.node.innerHTML =  this.node.innerHTML + rc.cell.innerHTML ;
        rc.cell.parentNode.removeChild(rc.cell);
        this.rowspan += rc.rowspan;
        this.node.setAttribute('rowspan', this.rowspan);
    },
    
    split: function()
    {
        if (this.node.rowSpan < 2 && this.node.colSpan < 2) {
            return;
        }
        var table = this.toTableArray();
        var cd = this.cellData;
        this.rowspan = 1;
        this.colspan = 1;
        
        for(var r = cd.row; r < cd.row + cd.rowspan; r++) {
             
            
            for(var c = cd.col; c < cd.col + cd.colspan; c++) {
                if (r == cd.row && c == cd.col) {
                    this.node.removeAttribute('rowspan');
                    this.node.removeAttribute('colspan');
                }
                 
                var ntd = this.node.cloneNode(); // which col/row should be 0..
                ntd.removeAttribute('id'); 
                ntd.style.width  = this.colWidths[c];
                ntd.innerHTML = '';
                table[r][c] = { cell : ntd, col : c, row: r , colspan : 1 , rowspan : 1   };
            }
            
        }
        this.redrawAllCells(table);
        
    },
    
    
    
    redrawAllCells: function(table)
    {
        
         
        var tab = this.node.closest('tr').closest('table');
        var ctr = tab.rows[0].parentNode;
        Array.from(tab.rows).forEach(function(r, ri){
            
            Array.from(r.cells).forEach(function(ce, ci){
                ce.parentNode.removeChild(ce);
            });
            r.parentNode.removeChild(r);
        });
        for(var r = 0 ; r < table.length; r++) {
            var re = tab.rows[r];
            
            var re = tab.ownerDocument.createElement('tr');
            ctr.appendChild(re);
            for(var c = 0 ; c < table[r].length; c++) {
                if (table[r][c].cell === false) {
                    continue;
                }
                
                re.appendChild(table[r][c].cell);
                 
                table[r][c].cell = false;
            }
        }
        
    },
    updateWidths : function(table)
    {
        for(var r = 0 ; r < table.length; r++) {
           
            for(var c = 0 ; c < table[r].length; c++) {
                if (table[r][c].cell === false) {
                    continue;
                }
                
                if (this.colWidths[0] != false && table[r][c].colspan < 2) {
                    var el = Roo.htmleditor.Block.factory(table[r][c].cell);
                    el.width = Math.floor(this.colWidths[c])  +'%';
                    el.updateElement(el.node);
                }
                if (this.colWidths[0] != false && table[r][c].colspan > 1) {
                    var el = Roo.htmleditor.Block.factory(table[r][c].cell);
                    var width = 0;
                    var lv = false;
                    for(var i = 0; i < table[r][c].colspan; i ++) {
                        if (typeof(this.colWidths[c + i]) != 'undefined') {
                            lv = this.colWidths[c + i];
                        } else {
                            this.colWidths[c + i] = lv;
                        }
                        width += Math.floor(this.colWidths[c + i]);
                    }
                    el.width = width  +'%';
                    el.updateElement(el.node);
                }
                table[r][c].cell = false; // done
            }
        }
    },
    normalizeWidths : function(table)
    {
        if (this.colWidths[0] === false) {
            var nw = 100.0 / this.colWidths.length;
            this.colWidths.forEach(function(w,i) {
                this.colWidths[i] = nw;
            },this);
            return;
        }
    
        var t = 0, missing = [];
        
        this.colWidths.forEach(function(w,i) {
            //if you mix % and
            this.colWidths[i] = this.colWidths[i] == '' ? 0 : (this.colWidths[i]+'').replace(/[^0-9]+/g,'')*1;
            var add =  this.colWidths[i];
            if (add > 0) {
                t+=add;
                return;
            }
            missing.push(i);
            
            
        },this);
        var nc = this.colWidths.length;
        if (missing.length) {
            var mult = (nc - missing.length) / (1.0 * nc);
            var t = mult * t;
            var ew = (100 -t) / (1.0 * missing.length);
            this.colWidths.forEach(function(w,i) {
                if (w > 0) {
                    this.colWidths[i] = w * mult;
                    return;
                }
                
                this.colWidths[i] = ew;
            }, this);
            // have to make up numbers..
             
        }
        // now we should have all the widths..
        
    
    },
    
    shrinkColumn : function()
    {
        var table = this.toTableArray();
        this.normalizeWidths(table);
        var col = this.cellData.col;
        var nw = this.colWidths[col] * 0.8;
        if (nw < 5) {
            return;
        }
        var otherAdd = (this.colWidths[col]  * 0.2) / (this.colWidths.length -1);
        this.colWidths.forEach(function(w,i) {
            if (i == col) {
                 this.colWidths[i] = nw;
                return;
            }
            if (typeof(this.colWidths[i]) == 'undefined') {
                this.colWidths[i] = otherAdd;
            } else {
                this.colWidths[i] += otherAdd;
            }
        }, this);
        this.updateWidths(table);
         
    },
    growColumn : function()
    {
        var table = this.toTableArray();
        this.normalizeWidths(table);
        var col = this.cellData.col;
        var nw = this.colWidths[col] * 1.2;
        if (nw > 90) {
            return;
        }
        var otherSub = (this.colWidths[col]  * 0.2) / (this.colWidths.length -1);
        this.colWidths.forEach(function(w,i) {
            if (i == col) {
                this.colWidths[i] = nw;
                return;
            }
            if (typeof(this.colWidths[i]) == 'undefined') {
                this.colWidths[i] = otherSub;
            } else {
                this.colWidths[i] -= otherSub;
            }
            
        }, this);
        this.updateWidths(table);
         
    },
    deleteRow : function()
    {
        // delete this rows 'tr'
        // if any of the cells in this row have a rowspan > 1 && row!= this row..
        // then reduce the rowspan.
        var table = this.toTableArray();
        // this.cellData.row;
        for (var i =0;i< table[this.cellData.row].length ; i++) {
            var c = table[this.cellData.row][i];
            if (c.row != this.cellData.row) {
                
                c.rowspan--;
                c.cell.setAttribute('rowspan', c.rowspan);
                continue;
            }
            if (c.rowspan > 1) {
                c.rowspan--;
                c.cell.setAttribute('rowspan', c.rowspan);
            }
        }
        table.splice(this.cellData.row,1);
        this.redrawAllCells(table);
        
    },
    deleteColumn : function()
    {
        var table = this.toTableArray();
        
        for (var i =0;i< table.length ; i++) {
            var c = table[i][this.cellData.col];
            if (c.col != this.cellData.col) {
                table[i][this.cellData.col].colspan--;
            } else if (c.colspan > 1) {
                c.colspan--;
                c.cell.setAttribute('colspan', c.colspan);
            }
            table[i].splice(this.cellData.col,1);
        }
        
        this.redrawAllCells(table);
    }
    
    
    
    
})

//<script type="text/javascript">

/*
 * Based  Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 * LGPL
 *
 */
 
/**
 * @class Roo.HtmlEditorCore
 * @extends Roo.Component
 * Provides a the editing component for the HTML editors in Roo. (bootstrap and Roo.form)
 *
 * any element that has display set to 'none' can cause problems in Safari and Firefox.<br/><br/>
 */

Roo.HtmlEditorCore = function(config){
    
    
    Roo.HtmlEditorCore.superclass.constructor.call(this, config);
    
    
    this.addEvents({
        /**
         * @event initialize
         * Fires when the editor is fully initialized (including the iframe)
         * @param {Roo.HtmlEditorCore} this
         */
        initialize: true,
        /**
         * @event activate
         * Fires when the editor is first receives the focus. Any insertion must wait
         * until after this event.
         * @param {Roo.HtmlEditorCore} this
         */
        activate: true,
         /**
         * @event beforesync
         * Fires before the textarea is updated with content from the editor iframe. Return false
         * to cancel the sync.
         * @param {Roo.HtmlEditorCore} this
         * @param {String} html
         */
        beforesync: true,
         /**
         * @event beforepush
         * Fires before the iframe editor is updated with content from the textarea. Return false
         * to cancel the push.
         * @param {Roo.HtmlEditorCore} this
         * @param {String} html
         */
        beforepush: true,
         /**
         * @event sync
         * Fires when the textarea is updated with content from the editor iframe.
         * @param {Roo.HtmlEditorCore} this
         * @param {String} html
         */
        sync: true,
         /**
         * @event push
         * Fires when the iframe editor is updated with content from the textarea.
         * @param {Roo.HtmlEditorCore} this
         * @param {String} html
         */
        push: true,
        
        /**
         * @event editorevent
         * Fires when on any editor (mouse up/down cursor movement etc.) - used for toolbar hooks.
         * @param {Roo.HtmlEditorCore} this
         */
        editorevent: true 
        
        
    });
    
    // at this point this.owner is set, so we can start working out the whitelisted / blacklisted elements
    
    // defaults : white / black...
    this.applyBlacklists();
    
    
    
};


Roo.extend(Roo.HtmlEditorCore, Roo.Component,  {


     /**
     * @cfg {Roo.form.HtmlEditor|Roo.bootstrap.HtmlEditor} the owner field 
     */
    
    owner : false,
    
     /**
     * @cfg {String} css styling for resizing. (used on bootstrap only)
     */
    resize : false,
     /**
     * @cfg {Number} height (in pixels)
     */   
    height: 300,
   /**
     * @cfg {Number} width (in pixels)
     */   
    width: 500,
     /**
     * @cfg {boolean} autoClean - default true - loading and saving will remove quite a bit of formating,
     *         if you are doing an email editor, this probably needs disabling, it's designed
     */
    autoClean: true,
    
    /**
     * @cfg {boolean} enableBlocks - default true - if the block editor (table and figure should be enabled)
     */
    enableBlocks : true,
    /**
     * @cfg {Array} stylesheets url of stylesheets. set to [] to disable stylesheets.
     * 
     */
    stylesheets: false,
     /**
     * @cfg {String} language default en - language of text (usefull for rtl languages)
     * 
     */
    language: 'en',
    
    /**
     * @cfg {boolean} allowComments - default false - allow comments in HTML source
     *          - by default they are stripped - if you are editing email you may need this.
     */
    allowComments: false,
    // id of frame..
    frameId: false,
    
    // private properties
    validationEvent : false,
    deferHeight: true,
    initialized : false,
    activated : false,
    sourceEditMode : false,
    onFocus : Roo.emptyFn,
    iframePad:3,
    hideMode:'offsets',
    
    clearUp: true,
    
    // blacklist + whitelisted elements..
    black: false,
    white: false,
     
    bodyCls : '',

    
    undoManager : false,
    /**
     * Protected method that will not generally be called directly. It
     * is called when the editor initializes the iframe with HTML contents. Override this method if you
     * want to change the initialization markup of the iframe (e.g. to add stylesheets).
     */
    getDocMarkup : function(){
        // body styles..
        var st = '';
        
        // inherit styels from page...?? 
        if (this.stylesheets === false) {
            
            Roo.get(document.head).select('style').each(function(node) {
                st += node.dom.outerHTML || new XMLSerializer().serializeToString(node.dom);
            });
            
            Roo.get(document.head).select('link').each(function(node) { 
                st += node.dom.outerHTML || new XMLSerializer().serializeToString(node.dom);
            });
            
        } else if (!this.stylesheets.length) {
                // simple..
                st = '<style type="text/css">' +
                    'body{border:0;margin:0;padding:3px;height:98%;cursor:text;}' +
                   '</style>';
        } else {
            for (var i in this.stylesheets) {
                if (typeof(this.stylesheets[i]) != 'string') {
                    continue;
                }
                st += '<link rel="stylesheet" href="' + this.stylesheets[i] +'" type="text/css">';
            }
            
        }
        
        st +=  '<style type="text/css">' +
            'IMG { cursor: pointer } ' +
        '</style>';
        
        st += '<meta name="google" content="notranslate">';
        
        var cls = 'notranslate roo-htmleditor-body';
        
        if(this.bodyCls.length){
            cls += ' ' + this.bodyCls;
        }
        
        return '<html  class="notranslate" translate="no"><head>' + st  +
            //<style type="text/css">' +
            //'body{border:0;margin:0;padding:3px;height:98%;cursor:text;}' +
            //'</style>' +
            ' </head><body contenteditable="true" data-enable-grammerly="true" class="' +  cls + '"></body></html>';
    },

    // private
    onRender : function(ct, position)
    {
        var _t = this;
        //Roo.HtmlEditorCore.superclass.onRender.call(this, ct, position);
        this.el = this.owner.inputEl ? this.owner.inputEl() : this.owner.el;
        
        
        this.el.dom.style.border = '0 none';
        this.el.dom.setAttribute('tabIndex', -1);
        this.el.addClass('x-hidden hide');
        
        
        
        if(Roo.isIE){ // fix IE 1px bogus margin
            this.el.applyStyles('margin-top:-1px;margin-bottom:-1px;')
        }
       
        
        this.frameId = Roo.id();
        
        var ifcfg = {
            tag: 'iframe',
            cls: 'form-control', // bootstrap..
            id: this.frameId,
            name: this.frameId,
            frameBorder : 'no',
            'src' : Roo.SSL_SECURE_URL ? Roo.SSL_SECURE_URL  :  "javascript:false"
        };
        if (this.resize) {
            ifcfg.style = { resize : this.resize };
        }
        
        var iframe = this.owner.wrap.createChild(ifcfg, this.el); 
        
        
        this.iframe = iframe.dom;

        this.assignDocWin();
        
        this.doc.designMode = 'on';
       
        this.doc.open();
        this.doc.write(this.getDocMarkup());
        this.doc.close();

        
        var task = { // must defer to wait for browser to be ready
            run : function(){
                //console.log("run task?" + this.doc.readyState);
                this.assignDocWin();
                if(this.doc.body || this.doc.readyState == 'complete'){
                    try {
                        this.doc.designMode="on";
                        
                    } catch (e) {
                        return;
                    }
                    Roo.TaskMgr.stop(task);
                    this.initEditor.defer(10, this);
                }
            },
            interval : 10,
            duration: 10000,
            scope: this
        };
        Roo.TaskMgr.start(task);

    },

    // private
    onResize : function(w, h)
    {
         Roo.log('resize: ' +w + ',' + h );
        //Roo.HtmlEditorCore.superclass.onResize.apply(this, arguments);
        if(!this.iframe){
            return;
        }
        if(typeof w == 'number'){
            
            this.iframe.style.width = w + 'px';
        }
        if(typeof h == 'number'){
            
            this.iframe.style.height = h + 'px';
            if(this.doc){
                (this.doc.body || this.doc.documentElement).style.height = (h - (this.iframePad*2)) + 'px';
            }
        }
        
    },

    /**
     * Toggles the editor between standard and source edit mode.
     * @param {Boolean} sourceEdit (optional) True for source edit, false for standard
     */
    toggleSourceEdit : function(sourceEditMode){
        
        this.sourceEditMode = sourceEditMode === true;
        
        if(this.sourceEditMode){
 
            Roo.get(this.iframe).addClass(['x-hidden','hide', 'd-none']);     //FIXME - what's the BS styles for these
            
        }else{
            Roo.get(this.iframe).removeClass(['x-hidden','hide', 'd-none']);
            //this.iframe.className = '';
            this.deferFocus();
        }
        //this.setSize(this.owner.wrap.getSize());
        //this.fireEvent('editmodechange', this, this.sourceEditMode);
    },

    
  

    /**
     * Protected method that will not generally be called directly. If you need/want
     * custom HTML cleanup, this is the method you should override.
     * @param {String} html The HTML to be cleaned
     * return {String} The cleaned HTML
     */
    cleanHtml : function(html)
    {
        html = String(html);
        if(html.length > 5){
            if(Roo.isSafari){ // strip safari nonsense
                html = html.replace(/\sclass="(?:Apple-style-span|khtml-block-placeholder)"/gi, '');
            }
        }
        if(html == '&nbsp;'){
            html = '';
        }
        return html;
    },

    /**
     * HTML Editor -> Textarea
     * Protected method that will not generally be called directly. Syncs the contents
     * of the editor iframe with the textarea.
     */
    syncValue : function()
    {
        //Roo.log("HtmlEditorCore:syncValue (EDITOR->TEXT)");
        if(this.initialized){
            
            if (this.undoManager) {
                this.undoManager.addEvent();
            }

            
            var bd = (this.doc.body || this.doc.documentElement);
           
            
            var sel = this.win.getSelection();
            
            var div = document.createElement('div');
            div.innerHTML = bd.innerHTML;
            var gtx = div.getElementsByClassName('gtx-trans-icon'); // google translate - really annoying and difficult to get rid of.
            if (gtx.length > 0) {
                var rm = gtx.item(0).parentNode;
                rm.parentNode.removeChild(rm);
            }
            
           
            if (this.enableBlocks) {
                Array.from(bd.getElementsByTagName('img')).forEach(function(img) {
                    var fig = img.closest('figure');
                    if (fig) {
                        var bf = new Roo.htmleditor.BlockFigure({
                            node : fig
                        });
                        bf.updateElement();
                    }
                    
                });
                new Roo.htmleditor.FilterBlock({ node : div });
            }
            
            var html = div.innerHTML;
            
            //?? tidy?
            if (this.autoClean) {
                new Roo.htmleditor.FilterBlack({ node : div, tag : this.black});
                new Roo.htmleditor.FilterAttributes({
                    node : div,
                    lang : this.language,
                    attrib_white : [
                            'href',
                            'src',
                            'name',
                            'align',
                            'colspan',
                            'rowspan',
                            'data-display',
                            'data-caption-display',
                            'data-width',
                            'data-caption',
                            'start' ,
                            'dir',
                            'style',
                            // youtube embed.
                            'class',
                            'allowfullscreen',
                            'frameborder',
                            'width',
                            'height',
                            'alt'
                            ],
                    attrib_clean : ['href', 'src' ] 
                });
                new Roo.htmleditor.FilterEmpty({ node : div});
                
                var tidy = new Roo.htmleditor.TidySerializer({
                    inner:  true
                });
                html  = tidy.serialize(div);
                
            }
            
            
            if(Roo.isSafari){
                var bs = bd.getAttribute('style'); // Safari puts text-align styles on the body element!
                var m = bs ? bs.match(/text-align:(.*?);/i) : false;
                if(m && m[1]){
                    html = '<div style="'+m[0]+'">' + html + '</div>';
                }
            }
            html = this.cleanHtml(html);
            // fix up the special chars.. normaly like back quotes in word...
            // however we do not want to do this with chinese..
            html = html.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]|[\u0080-\uFFFF]/g, function(match) {
                
                var cc = match.charCodeAt();

                // Get the character value, handling surrogate pairs
                if (match.length == 2) {
                    // It's a surrogate pair, calculate the Unicode code point
                    var high = match.charCodeAt(0) - 0xD800;
                    var low  = match.charCodeAt(1) - 0xDC00;
                    cc = (high * 0x400) + low + 0x10000;
                }  else if (
                    (cc >= 0x4E00 && cc < 0xA000 ) ||
                    (cc >= 0x3400 && cc < 0x4E00 ) ||
                    (cc >= 0xf900 && cc < 0xfb00 )
                ) {
                        return match;
                }  
         
                // No, use a numeric entity. Here we brazenly (and possibly mistakenly)
                return "&#" + cc + ";";
                
                
            });
            
            
             
            if(this.owner.fireEvent('beforesync', this, html) !== false){
                this.el.dom.value = html;
                this.owner.fireEvent('sync', this, html);
            }
        }
    },

    /**
     * TEXTAREA -> EDITABLE
     * Protected method that will not generally be called directly. Pushes the value of the textarea
     * into the iframe editor.
     */
    pushValue : function()
    {
        //Roo.log("HtmlEditorCore:pushValue (TEXT->EDITOR)");
        if(this.initialized){
            var v = this.el.dom.value.trim();
            
            
            if(this.owner.fireEvent('beforepush', this, v) !== false){
                var d = (this.doc.body || this.doc.documentElement);
                d.innerHTML = v;
                 
                this.el.dom.value = d.innerHTML;
                this.owner.fireEvent('push', this, v);
            }
            if (this.autoClean) {
                new Roo.htmleditor.FilterParagraph({node : this.doc.body, lang: this.language}); // paragraphs
                new Roo.htmleditor.FilterSpan({node : this.doc.body}); // empty spans
            }
            if (this.enableBlocks) {
                Roo.htmleditor.Block.initAll(this.doc.body);
            }
            
            this.updateLanguage();
            
            var lc = this.doc.body.lastChild;
            if (lc && lc.nodeType == 1 && lc.getAttribute("contenteditable") == "false") {
                // add an extra line at the end.
                this.doc.body.appendChild(this.doc.createElement('br'));
            }
            
            
        }
    },

    // private
    deferFocus : function(){
        this.focus.defer(10, this);
    },

    // doc'ed in Field
    focus : function(){
        if(this.win && !this.sourceEditMode){
            this.win.focus();
        }else{
            this.el.focus();
        }
    },
    
    assignDocWin: function()
    {
        var iframe = this.iframe;
        
         if(Roo.isIE){
            this.doc = iframe.contentWindow.document;
            this.win = iframe.contentWindow;
        } else {
//            if (!Roo.get(this.frameId)) {
//                return;
//            }
//            this.doc = (iframe.contentDocument || Roo.get(this.frameId).dom.document);
//            this.win = Roo.get(this.frameId).dom.contentWindow;
            
            if (!Roo.get(this.frameId) && !iframe.contentDocument) {
                return;
            }
            
            this.doc = (iframe.contentDocument || Roo.get(this.frameId).dom.document);
            this.win = (iframe.contentWindow || Roo.get(this.frameId).dom.contentWindow);
        }
    },
    
    // private
    initEditor : function(){
        //console.log("INIT EDITOR");
        this.assignDocWin();
        
        
        
        this.doc.designMode="on";
        this.doc.open();
        this.doc.write(this.getDocMarkup());
        this.doc.close();
        
        var dbody = (this.doc.body || this.doc.documentElement);
        //var ss = this.el.getStyles('font-size', 'font-family', 'background-image', 'background-repeat');
        // this copies styles from the containing element into thsi one..
        // not sure why we need all of this..
        //var ss = this.el.getStyles('font-size', 'background-image', 'background-repeat');
        
        //var ss = this.el.getStyles( 'background-image', 'background-repeat');
        //ss['background-attachment'] = 'fixed'; // w3c
        dbody.bgProperties = 'fixed'; // ie
        dbody.setAttribute("translate", "no");
        
        //Roo.DomHelper.applyStyles(dbody, ss);
        Roo.EventManager.on(this.doc, {
             
            'mouseup': this.onEditorEvent,
            'dblclick': this.onEditorEvent,
            'click': this.onEditorEvent,
            'keyup': this.onEditorEvent,
            
            buffer:100,
            scope: this
        });
        Roo.EventManager.on(this.doc, {
            'paste': this.onPasteEvent,
            scope : this
        });
        if(Roo.isGecko){
            Roo.EventManager.on(this.doc, 'keypress', this.mozKeyPress, this);
        }
        //??? needed???
        if(Roo.isIE || Roo.isSafari || Roo.isOpera){
            Roo.EventManager.on(this.doc, 'keydown', this.fixKeys, this);
        }
        this.initialized = true;

        
        // initialize special key events - enter
        new Roo.htmleditor.KeyEnter({core : this});
        
         
        
        this.owner.fireEvent('initialize', this);
        this.pushValue();
    },
    // this is to prevent a href clicks resulting in a redirect?
   
    onPasteEvent : function(e,v)
    {
        
        // I think we better assume paste is going to be a dirty load of rubish from word..
        
        // even pasting into a 'email version' of this widget will have to clean up that mess.
        var cd = (e.browserEvent.clipboardData || window.clipboardData);

        // check what type of paste - if it's an image, then handle it differently.
        if (cd.files && cd.files.length > 0 && cd.types.indexOf('text/html') < 0) {
            // pasting images? 
            var urlAPI = (window.createObjectURL && window) || 
                (window.URL && URL.revokeObjectURL && URL) || 
                (window.webkitURL && webkitURL);
            
            var r = new FileReader();
            var t = this;
            r.addEventListener('load',function()
            {
                
                var d = (new DOMParser().parseFromString('<img src="' + r.result+ '">', 'text/html')).body;
                // is insert asycn?
                if (t.enableBlocks) {
                    
                    Array.from(d.getElementsByTagName('img')).forEach(function(img) {
                        if (img.closest('figure')) { // assume!! that it's aready
                            return;
                        }
                        var fig  = new Roo.htmleditor.BlockFigure({
                            image_src  : img.src
                        });
                        fig.updateElement(img); // replace it..
                        
                    });
                }
                t.insertAtCursor(d.innerHTML.replace(/&nbsp;/g,' '));
                t.owner.fireEvent('paste', this);
            });
            r.readAsDataURL(cd.files[0]);
            
            e.preventDefault();
            
            return false;
        }
        if (cd.types.indexOf('text/html') < 0 ) {
            return false;
        }

        var html = cd.getData('text/html'); // clipboard event

        
        html = this.cleanWordChars(html);

        
        var d = (new DOMParser().parseFromString(html, 'text/html')).body;
        
        var sn = this.getParentElement();
        // check if d contains a table, and prevent nesting??
        //Roo.log(d.getElementsByTagName('table'));
        //Roo.log(sn);
        //Roo.log(sn.closest('table'));
        if (d.getElementsByTagName('table').length && sn && sn.closest('table')) {
            e.preventDefault();
            this.insertAtCursor("You can not nest tables");
            //Roo.log("prevent?"); // fixme - 
            return false;
        }

        var rtfData = cd.types.indexOf('text/rtf') > -1 ? cd.getData('text/rtf') : false;

        e.preventDefault();
        this.owner.fireEvent('beforepaste', this);
        setTimeout(this.filterPaste.bind(this, d, rtfData), 0);
    },

    filterPaste : function(d, rtfData)
    {
        
        var images = [];
        if (rtfData !== false) {
            var parser = new Roo.rtf.Parser(rtfData);
            images = parser.doc ? parser.doc.getElementsByType('pict') : [];
        }

        // Roo.log(images);
        // Roo.log(imgs);
        // fixme..
        images = images.filter(function(g) { return !g.path.match(/^rtf\/(head|pgdsctbl|listtable|footerf)/); }) // ignore headers/footers etc.
                       .map(function(g) { return g.toDataURL(); })
                       .filter(function(g) { return g != 'about:blank'; });
        
        
        
        if (images.length > 0) {
            // replace all v:imagedata - with img.
            var ar = Array.from(d.getElementsByTagName('v:imagedata'));
            Roo.each(ar, function(node) {
                node.parentNode.insertBefore(d.ownerDocument.createElement('img'), node );
                node.parentNode.removeChild(node);
            });
            
            
            Roo.each(d.getElementsByTagName('img'), function(img, i) {
                img.setAttribute('src', images[i]);
            });
        }

        if (this.autoClean) {
            new Roo.htmleditor.FilterWord({ node : d });
            new Roo.htmleditor.FilterStyleToTag({ node : d });
            new Roo.htmleditor.FilterAttributes({
                node : d,
                lang : this.language,
                attrib_white : [
                    'href',
                    'src',
                    'name',
                    'align',
                    'colspan',
                    'rowspan',
                    'start',
                    'dir'
                /*  THESE ARE NOT ALLWOED FOR PASTE
                 *    'data-display',
                    'data-caption-display',
                    'data-width',
                    'data-caption',
                    'style',
                    // youtube embed.
                    'class',
                    'allowfullscreen',
                    'frameborder',
                    'width',
                    'height',
                    'alt'
                    */
                    ],
                attrib_clean : ['href', 'src' ] 
            });
            new Roo.htmleditor.FilterBlack({ node : d, tag : this.black});
            // should be fonts..
            new Roo.htmleditor.FilterKeepChildren({node : d, tag : [ 'FONT', ':' ]} );
            new Roo.htmleditor.FilterParagraph({ node : d, lang: this.language });
            new Roo.htmleditor.FilterHashLink({node : d});
            new Roo.htmleditor.FilterSpan({ node : d });
            new Roo.htmleditor.FilterLongBr({ node : d });
            new Roo.htmleditor.FilterComment({ node : d });
            new Roo.htmleditor.FilterEmpty({ node : d});
            
            
        }
        if (this.enableBlocks) {
                
            Array.from(d.getElementsByTagName('img')).forEach(function(img) {
                if (img.closest('figure')) { // assume!! that it's aready
                    return;
                }
                var fig  = new Roo.htmleditor.BlockFigure({
                    image_src  : img.src
                });
                fig.updateElement(img); // replace it..
                
            });

            Array.from(d.getElementsByTagName('img')).forEach(function(img) {
                var fig = img.closest('figure');
                if(fig) {
                    var parent = fig.parentNode;

                    if(parent.tagName == 'A') {
                        parent.parentNode.insertBefore(fig, parent);
                        parent.parentNode.removeChild(parent);
                    }
                }
                
            });
        }
        
        
        this.insertAtCursor(d.innerHTML.replace(/&nbsp;/g,' '));
        if (this.enableBlocks) {
            Roo.htmleditor.Block.initAll(this.doc.body);
        }
         
        
        this.owner.fireEvent('paste', this);
        return false;
        // default behaveiour should be our local cleanup paste? (optional?)
        // for simple editor - we want to hammer the paste and get rid of everything... - so over-rideable..
        //this.owner.fireEvent('paste', e, v);
    },

    // private
    onDestroy : function(){
        
        
        
        if(this.rendered){
            
            //for (var i =0; i < this.toolbars.length;i++) {
            //    // fixme - ask toolbars for heights?
            //    this.toolbars[i].onDestroy();
           // }
            
            //this.wrap.dom.innerHTML = '';
            //this.wrap.remove();
        }
    },

    // private
    onFirstFocus : function(){
        
        this.assignDocWin();
        this.undoManager = new Roo.lib.UndoManager(100,(this.doc.body || this.doc.documentElement));
        
        this.activated = true;
         
    
        if(Roo.isGecko){ // prevent silly gecko errors
            this.win.focus();
            var s = this.win.getSelection();
            if(!s.focusNode || s.focusNode.nodeType != 3){
                var r = s.getRangeAt(0);
                r.selectNodeContents((this.doc.body || this.doc.documentElement));
                r.collapse(true);
                this.deferFocus();
            }
            try{
                this.execCmd('useCSS', true);
                this.execCmd('styleWithCSS', false);
            }catch(e){}
        }
        this.owner.fireEvent('activate', this);
    },

    // private
    adjustFont: function(btn){
        var adjust = btn.cmd == 'increasefontsize' ? 1 : -1;
        //if(Roo.isSafari){ // safari
        //    adjust *= 2;
       // }
        var v = parseInt(this.doc.queryCommandValue('FontSize')|| 3, 10);
        if(Roo.isSafari){ // safari
            var sm = { 10 : 1, 13: 2, 16:3, 18:4, 24: 5, 32:6, 48: 7 };
            v =  (v < 10) ? 10 : v;
            v =  (v > 48) ? 48 : v;
            v = typeof(sm[v]) == 'undefined' ? 1 : sm[v];
            
        }
        
        
        v = Math.max(1, v+adjust);
        
        this.execCmd('FontSize', v  );
    },

    onEditorEvent : function(e)
    {
         
        
        if (e && (e.ctrlKey || e.metaKey) && e.keyCode === 90) {
            return; // we do not handle this.. (undo manager does..)
        }
        // clicking a 'block'?
        
        // in theory this detects if the last element is not a br, then we try and do that.
        // its so clicking in space at bottom triggers adding a br and moving the cursor.
        if (e &&
            e.target.nodeName == 'BODY' &&
            e.type == "mouseup" &&
            this.doc.body.lastChild
           ) {
            var lc = this.doc.body.lastChild;
            // gtx-trans is google translate plugin adding crap.
            while ((lc.nodeType == 3 && lc.nodeValue == '') || lc.id == 'gtx-trans') {
                lc = lc.previousSibling;
            }
            if (lc.nodeType == 1 && lc.nodeName != 'BR') {
            // if last element is <BR> - then dont do anything.
            
                var ns = this.doc.createElement('br');
                this.doc.body.appendChild(ns);
                range = this.doc.createRange();
                range.setStartAfter(ns);
                range.collapse(true);
                var sel = this.win.getSelection();
                sel.removeAllRanges();
                sel.addRange(range);
            }
        }
        
        
        
        this.fireEditorEvent(e);
      //  this.updateToolbar();
        this.syncValue(); //we can not sync so often.. sync cleans, so this breaks stuff
    },
    
    fireEditorEvent: function(e)
    {
        this.owner.fireEvent('editorevent', this, e);
    },

    insertTag : function(tg)
    {
        // could be a bit smarter... -> wrap the current selected tRoo..
        if (tg.toLowerCase() == 'span' ||
            tg.toLowerCase() == 'code' ||
            tg.toLowerCase() == 'sup' ||
            tg.toLowerCase() == 'sub' 
            ) {
            
            range = this.createRange(this.getSelection());
            var wrappingNode = this.doc.createElement(tg.toLowerCase());
            wrappingNode.appendChild(range.extractContents());
            range.insertNode(wrappingNode);

            return;
            
            
            
        }
        this.execCmd("formatblock",   tg);
        this.undoManager.addEvent(); 
    },
    
    insertText : function(txt)
    {
        
        
        var range = this.createRange();
        range.deleteContents();
               //alert(Sender.getAttribute('label'));
               
        range.insertNode(this.doc.createTextNode(txt));
        this.undoManager.addEvent();
    } ,
    
     

    /**
     * Executes a Midas editor command on the editor document and performs necessary focus and
     * toolbar updates. <b>This should only be called after the editor is initialized.</b>
     * @param {String} cmd The Midas command
     * @param {String/Boolean} value (optional) The value to pass to the command (defaults to null)
     */
    relayCmd : function(cmd, value)
    {
        
        switch (cmd) {
            case 'justifyleft':
            case 'justifyright':
            case 'justifycenter':
                // if we are in a cell, then we will adjust the
                var n = this.getParentElement();
                var td = n.closest('td');
                if (td) {
                    var bl = Roo.htmleditor.Block.factory(td);
                    bl.textAlign = cmd.replace('justify','');
                    bl.updateElement();
                    this.owner.fireEvent('editorevent', this);
                    return;
                }
                this.execCmd('styleWithCSS', true); // 
                break;
            case 'bold':
            case 'italic':
            case 'underline':                
                // if there is no selection, then we insert, and set the curson inside it..
                this.execCmd('styleWithCSS', false); 
                break;
                
        
            default:
                break;
        }
        
        
        this.win.focus();
        this.execCmd(cmd, value);
        this.owner.fireEvent('editorevent', this);
        //this.updateToolbar();
        this.owner.deferFocus();
    },

    /**
     * Executes a Midas editor command directly on the editor document.
     * For visual commands, you should use {@link #relayCmd} instead.
     * <b>This should only be called after the editor is initialized.</b>
     * @param {String} cmd The Midas command
     * @param {String/Boolean} value (optional) The value to pass to the command (defaults to null)
     */
    execCmd : function(cmd, value){
        this.doc.execCommand(cmd, false, value === undefined ? null : value);
        this.syncValue();
    },
 
 
   
    /**
     * Inserts the passed text at the current cursor position. Note: the editor must be initialized and activated
     * to insert tRoo.
     * @param {String} text | dom node.. 
     */
    insertAtCursor : function(text)
    {
        
        if(!this.activated){
            return;
        }
         
        if(Roo.isGecko || Roo.isOpera || Roo.isSafari){
            this.win.focus();
            
            
            // from jquery ui (MIT licenced)
            var range, node;
            var win = this.win;
            
            if (win.getSelection && win.getSelection().getRangeAt) {
                
                // delete the existing?
                
                this.createRange(this.getSelection()).deleteContents();
                range = win.getSelection().getRangeAt(0);
                node = typeof(text) == 'string' ? range.createContextualFragment(text) : text;
                range.insertNode(node);
                range = range.cloneRange();
                range.collapse(false);
                 
                win.getSelection().removeAllRanges();
                win.getSelection().addRange(range);
                
                
                
            } else if (win.document.selection && win.document.selection.createRange) {
                // no firefox support
                var txt = typeof(text) == 'string' ? text : text.outerHTML;
                win.document.selection.createRange().pasteHTML(txt);
            
            } else {
                // no firefox support
                var txt = typeof(text) == 'string' ? text : text.outerHTML;
                this.execCmd('InsertHTML', txt);
            } 
            this.syncValue();
            
            this.deferFocus();
        }
    },
 // private
    mozKeyPress : function(e){
        if(e.ctrlKey){
            var c = e.getCharCode(), cmd;
          
            if(c > 0){
                c = String.fromCharCode(c).toLowerCase();
                switch(c){
                    case 'b':
                        cmd = 'bold';
                        break;
                    case 'i':
                        cmd = 'italic';
                        break;
                    
                    case 'u':
                        cmd = 'underline';
                        break;
                    
                    //case 'v':
                      //  this.cleanUpPaste.defer(100, this);
                      //  return;
                        
                }
                if(cmd){
                    
                    this.relayCmd(cmd);
                    //this.win.focus();
                    //this.execCmd(cmd);
                    //this.deferFocus();
                    e.preventDefault();
                }
                
            }
        }
    },

    // private
    fixKeys : function(){ // load time branching for fastest keydown performance
        
        
        if(Roo.isIE){
            return function(e){
                var k = e.getKey(), r;
                if(k == e.TAB){
                    e.stopEvent();
                    r = this.doc.selection.createRange();
                    if(r){
                        r.collapse(true);
                        r.pasteHTML('&#160;&#160;&#160;&#160;');
                        this.deferFocus();
                    }
                    return;
                }
                /// this is handled by Roo.htmleditor.KeyEnter
                 /*
                if(k == e.ENTER){
                    r = this.doc.selection.createRange();
                    if(r){
                        var target = r.parentElement();
                        if(!target || target.tagName.toLowerCase() != 'li'){
                            e.stopEvent();
                            r.pasteHTML('<br/>');
                            r.collapse(false);
                            r.select();
                        }
                    }
                }
                */
                //if (String.fromCharCode(k).toLowerCase() == 'v') { // paste
                //    this.cleanUpPaste.defer(100, this);
                //    return;
                //}
                
                
            };
        }else if(Roo.isOpera){
            return function(e){
                var k = e.getKey();
                if(k == e.TAB){
                    e.stopEvent();
                    this.win.focus();
                    this.execCmd('InsertHTML','&#160;&#160;&#160;&#160;');
                    this.deferFocus();
                }
               
                //if (String.fromCharCode(k).toLowerCase() == 'v') { // paste
                //    this.cleanUpPaste.defer(100, this);
                 //   return;
                //}
                
            };
        }else if(Roo.isSafari){
            return function(e){
                var k = e.getKey();
                
                if(k == e.TAB){
                    e.stopEvent();
                    this.execCmd('InsertText','\t');
                    this.deferFocus();
                    return;
                }
                 this.mozKeyPress(e);
                
               //if (String.fromCharCode(k).toLowerCase() == 'v') { // paste
                 //   this.cleanUpPaste.defer(100, this);
                 //   return;
               // }
                
             };
        }
    }(),
    
    getAllAncestors: function()
    {
        var p = this.getSelectedNode();
        var a = [];
        if (!p) {
            a.push(p); // push blank onto stack..
            p = this.getParentElement();
        }
        
        
        while (p && (p.nodeType == 1) && (p.tagName.toLowerCase() != 'body')) {
            a.push(p);
            p = p.parentNode;
        }
        a.push(this.doc.body);
        return a;
    },
    lastSel : false,
    lastSelNode : false,
    
    
    getSelection : function() 
    {
        this.assignDocWin();
        return Roo.lib.Selection.wrap(Roo.isIE ? this.doc.selection : this.win.getSelection(), this.doc);
    },
    /**
     * Select a dom node
     * @param {DomElement} node the node to select
     */
    selectNode : function(node, collapse)
    {
        var nodeRange = node.ownerDocument.createRange();
        try {
            nodeRange.selectNode(node);
        } catch (e) {
            nodeRange.selectNodeContents(node);
        }
        if (collapse === true) {
            nodeRange.collapse(true);
        }
        //
        var s = this.win.getSelection();
        s.removeAllRanges();
        s.addRange(nodeRange);
    },
    
    getSelectedNode: function() 
    {
        // this may only work on Gecko!!!
        
        // should we cache this!!!!
        
         
         
        var range = this.createRange(this.getSelection()).cloneRange();
        
        if (Roo.isIE) {
            var parent = range.parentElement();
            while (true) {
                var testRange = range.duplicate();
                testRange.moveToElementText(parent);
                if (testRange.inRange(range)) {
                    break;
                }
                if ((parent.nodeType != 1) || (parent.tagName.toLowerCase() == 'body')) {
                    break;
                }
                parent = parent.parentElement;
            }
            return parent;
        }
        
        // is ancestor a text element.
        var ac =  range.commonAncestorContainer;
        if (ac.nodeType == 3) {
            ac = ac.parentNode;
        }
        
        var ar = ac.childNodes;
         
        var nodes = [];
        var other_nodes = [];
        var has_other_nodes = false;
        for (var i=0;i<ar.length;i++) {
            if ((ar[i].nodeType == 3) && (!ar[i].data.length)) { // empty text ? 
                continue;
            }
            // fullly contained node.
            
            if (this.rangeIntersectsNode(range,ar[i]) && this.rangeCompareNode(range,ar[i]) == 3) {
                nodes.push(ar[i]);
                continue;
            }
            
            // probably selected..
            if ((ar[i].nodeType == 1) && this.rangeIntersectsNode(range,ar[i]) && (this.rangeCompareNode(range,ar[i]) > 0)) {
                other_nodes.push(ar[i]);
                continue;
            }
            // outer..
            if (!this.rangeIntersectsNode(range,ar[i])|| (this.rangeCompareNode(range,ar[i]) == 0))  {
                continue;
            }
            
            
            has_other_nodes = true;
        }
        if (!nodes.length && other_nodes.length) {
            nodes= other_nodes;
        }
        if (has_other_nodes || !nodes.length || (nodes.length > 1)) {
            return false;
        }
        
        return nodes[0];
    },
    
    
    createRange: function(sel)
    {
        // this has strange effects when using with 
        // top toolbar - not sure if it's a great idea.
        //this.editor.contentWindow.focus();
        if (typeof sel != "undefined") {
            try {
                return sel.getRangeAt ? sel.getRangeAt(0) : sel.createRange();
            } catch(e) {
                return this.doc.createRange();
            }
        } else {
            return this.doc.createRange();
        }
    },
    getParentElement: function()
    {
        
        this.assignDocWin();
        var sel = Roo.isIE ? this.doc.selection : this.win.getSelection();
        
        var range = this.createRange(sel);
         
        try {
            var p = range.commonAncestorContainer;
            while (p.nodeType == 3) { // text node
                p = p.parentNode;
            }
            return p;
        } catch (e) {
            return null;
        }
    
    },
    /***
     *
     * Range intersection.. the hard stuff...
     *  '-1' = before
     *  '0' = hits..
     *  '1' = after.
     *         [ -- selected range --- ]
     *   [fail]                        [fail]
     *
     *    basically..
     *      if end is before start or  hits it. fail.
     *      if start is after end or hits it fail.
     *
     *   if either hits (but other is outside. - then it's not 
     *   
     *    
     **/
    
    
    // @see http://www.thismuchiknow.co.uk/?p=64.
    rangeIntersectsNode : function(range, node)
    {
        var nodeRange = node.ownerDocument.createRange();
        try {
            nodeRange.selectNode(node);
        } catch (e) {
            nodeRange.selectNodeContents(node);
        }
    
        var rangeStartRange = range.cloneRange();
        rangeStartRange.collapse(true);
    
        var rangeEndRange = range.cloneRange();
        rangeEndRange.collapse(false);
    
        var nodeStartRange = nodeRange.cloneRange();
        nodeStartRange.collapse(true);
    
        var nodeEndRange = nodeRange.cloneRange();
        nodeEndRange.collapse(false);
    
        return rangeStartRange.compareBoundaryPoints(
                 Range.START_TO_START, nodeEndRange) == -1 &&
               rangeEndRange.compareBoundaryPoints(
                 Range.START_TO_START, nodeStartRange) == 1;
        
         
    },
    rangeCompareNode : function(range, node)
    {
        var nodeRange = node.ownerDocument.createRange();
        try {
            nodeRange.selectNode(node);
        } catch (e) {
            nodeRange.selectNodeContents(node);
        }
        
        
        range.collapse(true);
    
        nodeRange.collapse(true);
     
        var ss = range.compareBoundaryPoints( Range.START_TO_START, nodeRange);
        var ee = range.compareBoundaryPoints(  Range.END_TO_END, nodeRange);
         
        //Roo.log(node.tagName + ': ss='+ss +', ee='+ee)
        
        var nodeIsBefore   =  ss == 1;
        var nodeIsAfter    = ee == -1;
        
        if (nodeIsBefore && nodeIsAfter) {
            return 0; // outer
        }
        if (!nodeIsBefore && nodeIsAfter) {
            return 1; //right trailed.
        }
        
        if (nodeIsBefore && !nodeIsAfter) {
            return 2;  // left trailed.
        }
        // fully contined.
        return 3;
    },
 
    cleanWordChars : function(input) {// change the chars to hex code
        
       var swapCodes  = [ 
            [    8211, "&#8211;" ], 
            [    8212, "&#8212;" ], 
            [    8216,  "'" ],  
            [    8217, "'" ],  
            [    8220, '"' ],  
            [    8221, '"' ],  
            [    8226, "*" ],  
            [    8230, "..." ]
        ]; 
        var output = input;
        Roo.each(swapCodes, function(sw) { 
            var swapper = new RegExp("\\u" + sw[0].toString(16), "g"); // hex codes
            
            output = output.replace(swapper, sw[1]);
        });
        
        return output;
    },
    
     
    
        
    
    cleanUpChild : function (node)
    {
        
        new Roo.htmleditor.FilterComment({node : node});
        new Roo.htmleditor.FilterAttributes({
                node : node,
                lang : this.language,
                attrib_black : this.ablack,
                attrib_clean : this.aclean,
                style_white : this.cwhite,
                style_black : this.cblack
        });
        new Roo.htmleditor.FilterBlack({ node : node, tag : this.black});
        new Roo.htmleditor.FilterKeepChildren({node : node, tag : this.tag_remove} );
         
        
    },
    
    /**
     * Clean up MS wordisms...
     * @deprecated - use filter directly
     */
    cleanWord : function(node)
    {
        new Roo.htmleditor.FilterWord({ node : node ? node : this.doc.body });
        new Roo.htmleditor.FilterKeepChildren({node : node ? node : this.doc.body, tag : [ 'FONT', ':' ]} );
        
    },
   
    
    /**

     * @deprecated - use filters
     */
    cleanTableWidths : function(node)
    {
        new Roo.htmleditor.FilterTableWidth({ node : node ? node : this.doc.body});
        
 
    },
    
     
        
    applyBlacklists : function()
    {
        var w = typeof(this.owner.white) != 'undefined' && this.owner.white ? this.owner.white  : [];
        var b = typeof(this.owner.black) != 'undefined' && this.owner.black ? this.owner.black :  [];
        
        this.aclean = typeof(this.owner.aclean) != 'undefined' && this.owner.aclean ? this.owner.aclean :  Roo.HtmlEditorCore.aclean;
        this.ablack = typeof(this.owner.ablack) != 'undefined' && this.owner.ablack ? this.owner.ablack :  Roo.HtmlEditorCore.ablack;
        this.tag_remove = typeof(this.owner.tag_remove) != 'undefined' && this.owner.tag_remove ? this.owner.tag_remove :  Roo.HtmlEditorCore.tag_remove;
        
        this.white = [];
        this.black = [];
        Roo.each(Roo.HtmlEditorCore.white, function(tag) {
            if (b.indexOf(tag) > -1) {
                return;
            }
            this.white.push(tag);
            
        }, this);
        
        Roo.each(w, function(tag) {
            if (b.indexOf(tag) > -1) {
                return;
            }
            if (this.white.indexOf(tag) > -1) {
                return;
            }
            this.white.push(tag);
            
        }, this);
        
        
        Roo.each(Roo.HtmlEditorCore.black, function(tag) {
            if (w.indexOf(tag) > -1) {
                return;
            }
            this.black.push(tag);
            
        }, this);
        
        Roo.each(b, function(tag) {
            if (w.indexOf(tag) > -1) {
                return;
            }
            if (this.black.indexOf(tag) > -1) {
                return;
            }
            this.black.push(tag);
            
        }, this);
        
        
        w = typeof(this.owner.cwhite) != 'undefined' && this.owner.cwhite ? this.owner.cwhite  : [];
        b = typeof(this.owner.cblack) != 'undefined' && this.owner.cblack ? this.owner.cblack :  [];
        
        this.cwhite = [];
        this.cblack = [];
        Roo.each(Roo.HtmlEditorCore.cwhite, function(tag) {
            if (b.indexOf(tag) > -1) {
                return;
            }
            this.cwhite.push(tag);
            
        }, this);
        
        Roo.each(w, function(tag) {
            if (b.indexOf(tag) > -1) {
                return;
            }
            if (this.cwhite.indexOf(tag) > -1) {
                return;
            }
            this.cwhite.push(tag);
            
        }, this);
        
        
        Roo.each(Roo.HtmlEditorCore.cblack, function(tag) {
            if (w.indexOf(tag) > -1) {
                return;
            }
            this.cblack.push(tag);
            
        }, this);
        
        Roo.each(b, function(tag) {
            if (w.indexOf(tag) > -1) {
                return;
            }
            if (this.cblack.indexOf(tag) > -1) {
                return;
            }
            this.cblack.push(tag);
            
        }, this);
    },
    
    setStylesheets : function(stylesheets)
    {
        if(typeof(stylesheets) == 'string'){
            Roo.get(this.iframe.contentDocument.head).createChild({
                tag : 'link',
                rel : 'stylesheet',
                type : 'text/css',
                href : stylesheets
            });
            
            return;
        }
        var _this = this;
     
        Roo.each(stylesheets, function(s) {
            if(!s.length){
                return;
            }
            
            Roo.get(_this.iframe.contentDocument.head).createChild({
                tag : 'link',
                rel : 'stylesheet',
                type : 'text/css',
                href : s
            });
        });

        
    },
    
    
    updateLanguage : function()
    {
        if (!this.iframe || !this.iframe.contentDocument) {
            return;
        }
        Roo.get(this.iframe.contentDocument.body).attr("lang", this.language);
    },
    
    
    removeStylesheets : function()
    {
        var _this = this;
        
        Roo.each(Roo.get(_this.iframe.contentDocument.head).select('link[rel=stylesheet]', true).elements, function(s){
            s.remove();
        });
    },
    
    setStyle : function(style)
    {
        Roo.get(this.iframe.contentDocument.head).createChild({
            tag : 'style',
            type : 'text/css',
            html : style
        });

        return;
    }
    
    // hide stuff that is not compatible
    /**
     * @event blur
     * @hide
     */
    /**
     * @event change
     * @hide
     */
    /**
     * @event focus
     * @hide
     */
    /**
     * @event specialkey
     * @hide
     */
    /**
     * @cfg {String} fieldClass @hide
     */
    /**
     * @cfg {String} focusClass @hide
     */
    /**
     * @cfg {String} autoCreate @hide
     */
    /**
     * @cfg {String} inputType @hide
     */
    /**
     * @cfg {String} invalidClass @hide
     */
    /**
     * @cfg {String} invalidText @hide
     */
    /**
     * @cfg {String} msgFx @hide
     */
    /**
     * @cfg {String} validateOnBlur @hide
     */
});

Roo.HtmlEditorCore.white = [
        'AREA', 'BR', 'IMG', 'INPUT', 'HR', 'WBR',
        
       'ADDRESS', 'BLOCKQUOTE', 'CENTER', 'DD',      'DIR',       'DIV', 
       'DL',      'DT',         'H1',     'H2',      'H3',        'H4', 
       'H5',      'H6',         'HR',     'ISINDEX', 'LISTING',   'MARQUEE', 
       'MENU',    'MULTICOL',   'OL',     'P',       'PLAINTEXT', 'PRE', 
       'TABLE',   'UL',         'XMP', 
       
       'CAPTION', 'COL', 'COLGROUP', 'TBODY', 'TD', 'TFOOT', 'TH', 
      'THEAD',   'TR', 
     
      'DIR', 'MENU', 'OL', 'UL', 'DL',
       
      'EMBED',  'OBJECT'
];


Roo.HtmlEditorCore.black = [
    //    'embed',  'object', // enable - backend responsiblity to clean thiese
        'APPLET', // 
        'BASE',   'BASEFONT', 'BGSOUND', 'BLINK',  'BODY', 
        'FRAME',  'FRAMESET', 'HEAD',    'HTML',   'ILAYER', 
        'IFRAME', 'LAYER',  'LINK',     'META',    'OBJECT',   
        'SCRIPT', 'STYLE' ,'TITLE',  'XML',
        //'FONT' // CLEAN LATER..
        'COLGROUP', 'COL'   // messy tables.
        
        
];
Roo.HtmlEditorCore.clean = [ // ?? needed???
     'SCRIPT', 'STYLE', 'TITLE', 'XML'
];
Roo.HtmlEditorCore.tag_remove = [
    'FONT', 'TBODY'  
];
// attributes..

Roo.HtmlEditorCore.ablack = [
    'on'
];
    
Roo.HtmlEditorCore.aclean = [ 
    'action', 'background', 'codebase', 'dynsrc', 'href', 'lowsrc' 
];

// protocols..
Roo.HtmlEditorCore.pwhite= [
        'http',  'https',  'mailto'
];

// white listed style attributes.
Roo.HtmlEditorCore.cwhite= [
      //  'text-align', /// default is to allow most things..
      
         
//        'font-size'//??
];

// black listed style attributes.
Roo.HtmlEditorCore.cblack= [
      //  'font-size' -- this can be set by the project 
];




    
//<script type="text/javascript">

/*
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 * Licence LGPL
 * 
 */
 
 
Roo.form.HtmlEditor = function(config){
    
    
    
    Roo.form.HtmlEditor.superclass.constructor.call(this, config);
    
    if (!this.toolbars) {
        this.toolbars = [];
    }
    this.editorcore = new Roo.HtmlEditorCore(Roo.apply({ owner : this} , config));
    
    
};

/**
 * @class Roo.form.HtmlEditor
 * @extends Roo.form.Field
 * Provides a lightweight HTML Editor component.
 *
 * This has been tested on Fireforx / Chrome.. IE may not be so great..
 * 
 * <br><br><b>Note: The focus/blur and validation marking functionality inherited from Ext.form.Field is NOT
 * supported by this editor.</b><br/><br/>
 * An Editor is a sensitive component that can't be used in all spots standard fields can be used. Putting an Editor within
 * any element that has display set to 'none' can cause problems in Safari and Firefox.<br/><br/>
 */
Roo.extend(Roo.form.HtmlEditor, Roo.form.Field, {
    /**
     * @cfg {Boolean} clearUp
     */
    clearUp : true,
      /**
     * @cfg {Array} toolbars Array of toolbars. - defaults to just the Standard one
     */
    toolbars : false,
   
     /**
     * @cfg {String} resizable  's' or 'se' or 'e' - wrapps the element in a
     *                        Roo.resizable.
     */
    resizable : false,
     /**
     * @cfg {Number} height (in pixels)
     */   
    height: 300,
   /**
     * @cfg {Number} width (in pixels)
     */   
    width: 500,
    
    /**
     * @cfg {Array} stylesheets url of stylesheets. set to [] to disable stylesheets - this is usally a good idea  rootURL + '/roojs1/css/undoreset.css',   .
     * 
     */
    stylesheets: false,
    
    
     /**
     * @cfg {Array} blacklist of css styles style attributes (blacklist overrides whitelist)
     * 
     */
    cblack: false,
    /**
     * @cfg {Array} whitelist of css styles style attributes (blacklist overrides whitelist)
     * 
     */
    cwhite: false,
    
     /**
     * @cfg {Array} blacklist of html tags - in addition to standard blacklist.
     * 
     */
    black: false,
    /**
     * @cfg {Array} whitelist of html tags - in addition to statndard whitelist
     * 
     */
    white: false,
    /**
     * @cfg {boolean} allowComments - default false - allow comments in HTML source - by default they are stripped - if you are editing email you may need this.
     */
    allowComments: false,
    /**
     * @cfg {boolean} enableBlocks - default true - if the block editor (table and figure should be enabled)
     */
    enableBlocks : true,
    
    /**
     * @cfg {boolean} autoClean - default true - loading and saving will remove quite a bit of formating,
     *         if you are doing an email editor, this probably needs disabling, it's designed
     */
    autoClean: true,
    /**
     * @cfg {string} bodyCls default '' default classes to add to body of editable area - usually undoreset is a good start..
     */
    bodyCls : '',
    /**
     * @cfg {String} language default en - language of text (usefull for rtl languages)
     * 
     */
    language: 'en',
    
     
    // id of frame..
    frameId: false,
    
    // private properties
    validationEvent : false,
    deferHeight: true,
    initialized : false,
    activated : false,
    
    onFocus : Roo.emptyFn,
    iframePad:3,
    hideMode:'offsets',
    
    actionMode : 'container', // defaults to hiding it...
    
    defaultAutoCreate : { // modified by initCompnoent..
        tag: "textarea",
        style:"width:500px;height:300px;",
        autocomplete: "new-password"
    },

    // private
    initComponent : function(){
        this.addEvents({
            /**
             * @event initialize
             * Fires when the editor is fully initialized (including the iframe)
             * @param {HtmlEditor} this
             */
            initialize: true,
            /**
             * @event activate
             * Fires when the editor is first receives the focus. Any insertion must wait
             * until after this event.
             * @param {HtmlEditor} this
             */
            activate: true,
             /**
             * @event beforesync
             * Fires before the textarea is updated with content from the editor iframe. Return false
             * to cancel the sync.
             * @param {HtmlEditor} this
             * @param {String} html
             */
            beforesync: true,
             /**
             * @event beforepush
             * Fires before the iframe editor is updated with content from the textarea. Return false
             * to cancel the push.
             * @param {HtmlEditor} this
             * @param {String} html
             */
            beforepush: true,
             /**
             * @event sync
             * Fires when the textarea is updated with content from the editor iframe.
             * @param {HtmlEditor} this
             * @param {String} html
             */
            sync: true,
             /**
             * @event push
             * Fires when the iframe editor is updated with content from the textarea.
             * @param {HtmlEditor} this
             * @param {String} html
             */
            push: true,
             /**
             * @event editmodechange
             * Fires when the editor switches edit modes
             * @param {HtmlEditor} this
             * @param {Boolean} sourceEdit True if source edit, false if standard editing.
             */
            editmodechange: true,
            /**
             * @event editorevent
             * Fires when on any editor (mouse up/down cursor movement etc.) - used for toolbar hooks.
             * @param {HtmlEditor} this
             */
            editorevent: true,
            /**
             * @event firstfocus
             * Fires when on first focus - needed by toolbars..
             * @param {HtmlEditor} this
             */
            firstfocus: true,
            /**
             * @event autosave
             * Auto save the htmlEditor value as a file into Events
             * @param {HtmlEditor} this
             */
            autosave: true,
            /**
             * @event savedpreview
             * preview the saved version of htmlEditor
             * @param {HtmlEditor} this
             */
            savedpreview: true,
            
            /**
            * @event stylesheetsclick
            * Fires when press the Sytlesheets button
            * @param {Roo.HtmlEditorCore} this
            */
            stylesheetsclick: true,
            /**
             * @event beforepaste
             * Fires before the paste event occur
             * @param {Roo.HtmlEditorCore} this
             */
            beforepaste: true,
            /**
            * @event paste
            * Fires when press user pastes into the editor
            * @param {Roo.HtmlEditorCore} this
            */
            paste: true 
            
        });
        this.defaultAutoCreate =  {
            tag: "textarea",
            style:'width: ' + this.width + 'px;height: ' + this.height + 'px;',
            autocomplete: "new-password"
        };
    },

    /**
     * Protected method that will not generally be called directly. It
     * is called when the editor creates its toolbar. Override this method if you need to
     * add custom toolbar buttons.
     * @param {HtmlEditor} editor
     */
    createToolbar : function(editor){
        Roo.log("create toolbars");
        if (!editor.toolbars || !editor.toolbars.length) {
            editor.toolbars = [ new Roo.form.HtmlEditor.ToolbarStandard() ]; // can be empty?
        }
        
        for (var i =0 ; i < editor.toolbars.length;i++) {
            editor.toolbars[i] = Roo.factory(
                    typeof(editor.toolbars[i]) == 'string' ?
                        { xtype: editor.toolbars[i]} : editor.toolbars[i],
                Roo.form.HtmlEditor);
            editor.toolbars[i].init(editor);
        }
         
        
    },
    /**
     * get the Context selected node
     * @returns {DomElement|boolean} selected node if active or false if none
     * 
     */
    getSelectedNode : function()
    {
        if (this.toolbars.length < 2 || !this.toolbars[1].tb) {
            return false;
        }
        return this.toolbars[1].tb.selectedNode;
    
    },
    // private
    onRender : function(ct, position)
    {
        var _t = this;
        Roo.form.HtmlEditor.superclass.onRender.call(this, ct, position);
        
        this.wrap = this.el.wrap({
            cls:'x-html-editor-wrap', cn:{cls:'x-html-editor-tb'}
        });
        
        this.editorcore.onRender(ct, position);
         
        if (this.resizable) {
            this.resizeEl = new Roo.Resizable(this.wrap, {
                pinned : true,
                wrap: true,
                dynamic : true,
                minHeight : this.height,
                height: this.height,
                handles : this.resizable,
                width: this.width,
                listeners : {
                    resize : function(r, w, h) {
                        _t.onResize(w,h); // -something
                    }
                }
            });
            
        }
        this.createToolbar(this);
       
        
        if(!this.width){
            this.setSize(this.wrap.getSize());
        }
        if (this.resizeEl) {
            this.resizeEl.resizeTo.defer(100, this.resizeEl,[ this.width,this.height ] );
            // should trigger onReize..
        }
        
        this.keyNav = new Roo.KeyNav(this.el, {
            
            "tab" : function(e){
                e.preventDefault();
                
                var value = this.getValue();
                
                var start = this.el.dom.selectionStart;
                var end = this.el.dom.selectionEnd;
                
                if(!e.shiftKey){
                    
                    this.setValue(value.substring(0, start) + "\t" + value.substring(end));
                    this.el.dom.setSelectionRange(end + 1, end + 1);
                    return;
                }
                
                var f = value.substring(0, start).split("\t");
                
                if(f.pop().length != 0){
                    return;
                }
                
                this.setValue(f.join("\t") + value.substring(end));
                this.el.dom.setSelectionRange(start - 1, start - 1);
                
            },
            
            "home" : function(e){
                e.preventDefault();
                
                var curr = this.el.dom.selectionStart;
                var lines = this.getValue().split("\n");
                
                if(!lines.length){
                    return;
                }
                
                if(e.ctrlKey){
                    this.el.dom.setSelectionRange(0, 0);
                    return;
                }
                
                var pos = 0;
                
                for (var i = 0; i < lines.length;i++) {
                    pos += lines[i].length;
                    
                    if(i != 0){
                        pos += 1;
                    }
                    
                    if(pos < curr){
                        continue;
                    }
                    
                    pos -= lines[i].length;
                    
                    break;
                }
                
                if(!e.shiftKey){
                    this.el.dom.setSelectionRange(pos, pos);
                    return;
                }
                
                this.el.dom.selectionStart = pos;
                this.el.dom.selectionEnd = curr;
            },
            
            "end" : function(e){
                e.preventDefault();
                
                var curr = this.el.dom.selectionStart;
                var lines = this.getValue().split("\n");
                
                if(!lines.length){
                    return;
                }
                
                if(e.ctrlKey){
                    this.el.dom.setSelectionRange(this.getValue().length, this.getValue().length);
                    return;
                }
                
                var pos = 0;
                
                for (var i = 0; i < lines.length;i++) {
                    
                    pos += lines[i].length;
                    
                    if(i != 0){
                        pos += 1;
                    }
                    
                    if(pos < curr){
                        continue;
                    }
                    
                    break;
                }
                
                if(!e.shiftKey){
                    this.el.dom.setSelectionRange(pos, pos);
                    return;
                }
                
                this.el.dom.selectionStart = curr;
                this.el.dom.selectionEnd = pos;
            },

            scope : this,

            doRelay : function(foo, bar, hname){
                return Roo.KeyNav.prototype.doRelay.apply(this, arguments);
            },

            forceKeyDown: true
        });
        
//        if(this.autosave && this.w){
//            this.autoSaveFn = setInterval(this.autosave, 1000);
//        }
    },

    // private
    onResize : function(w, h)
    {
        Roo.form.HtmlEditor.superclass.onResize.apply(this, arguments);
        var ew = false;
        var eh = false;
        
        if(this.el ){
            if(typeof w == 'number'){
                var aw = w - this.wrap.getFrameWidth('lr');
                this.el.setWidth(this.adjustWidth('textarea', aw));
                ew = aw;
            }
            if(typeof h == 'number'){
                var tbh = 0;
                for (var i =0; i < this.toolbars.length;i++) {
                    // fixme - ask toolbars for heights?
                    tbh += this.toolbars[i].tb.el.getHeight();
                    if (this.toolbars[i].footer) {
                        tbh += this.toolbars[i].footer.el.getHeight();
                    }
                }
                
                
                
                
                var ah = h - this.wrap.getFrameWidth('tb') - tbh;// this.tb.el.getHeight();
                ah -= 5; // knock a few pixes off for look..
//                Roo.log(ah);
                this.el.setHeight(this.adjustWidth('textarea', ah));
                var eh = ah;
            }
        }
        Roo.log('onResize:' + [w,h,ew,eh].join(',') );
        this.editorcore.onResize(ew,eh);
        
    },

    /**
     * Toggles the editor between standard and source edit mode.
     * @param {Boolean} sourceEdit (optional) True for source edit, false for standard
     */
    toggleSourceEdit : function(sourceEditMode)
    {
        this.editorcore.toggleSourceEdit(sourceEditMode);
        
        if(this.editorcore.sourceEditMode){
            Roo.log('editor - showing textarea');
            
//            Roo.log('in');
//            Roo.log(this.syncValue());
            this.editorcore.syncValue();
            this.el.removeClass('x-hidden');
            this.el.dom.removeAttribute('tabIndex');
            this.el.focus();
            this.el.dom.scrollTop = 0;
            
            
            for (var i = 0; i < this.toolbars.length; i++) {
                if(this.toolbars[i] instanceof Roo.form.HtmlEditor.ToolbarContext){
                    this.toolbars[i].tb.hide();
                    this.toolbars[i].footer.hide();
                }
            }
            
        }else{
            Roo.log('editor - hiding textarea');
//            Roo.log('out')
//            Roo.log(this.pushValue()); 
            this.editorcore.pushValue();
            
            this.el.addClass('x-hidden');
            this.el.dom.setAttribute('tabIndex', -1);
            
            for (var i = 0; i < this.toolbars.length; i++) {
                if(this.toolbars[i] instanceof Roo.form.HtmlEditor.ToolbarContext){
                    this.toolbars[i].tb.show();
                    this.toolbars[i].footer.show();
                }
            }
            
            //this.deferFocus();
        }
        
        this.setSize(this.wrap.getSize());
        this.onResize(this.wrap.getSize().width, this.wrap.getSize().height);
        
        this.fireEvent('editmodechange', this, this.editorcore.sourceEditMode);
    },
 
    // private (for BoxComponent)
    adjustSize : Roo.BoxComponent.prototype.adjustSize,

    // private (for BoxComponent)
    getResizeEl : function(){
        return this.wrap;
    },

    // private (for BoxComponent)
    getPositionEl : function(){
        return this.wrap;
    },

    // private
    initEvents : function(){
        this.originalValue = this.getValue();
    },

    /**
     * Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide
     * @method
     */
    markInvalid : Roo.emptyFn,
    /**
     * Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide
     * @method
     */
    clearInvalid : Roo.emptyFn,

    setValue : function(v){
        Roo.form.HtmlEditor.superclass.setValue.call(this, v);
        this.editorcore.pushValue();
    },

    /**
     * update the language in the body - really done by core
     * @param {String} language - eg. en / ar / zh-CN etc..
     */
    updateLanguage : function(lang)
    {
        this.language = lang;
        this.editorcore.language = lang;
        this.editorcore.updateLanguage();
     
    },
    // private
    deferFocus : function(){
        this.focus.defer(10, this);
    },

    // doc'ed in Field
    focus : function(){
        this.editorcore.focus();
        
    },
      

    // private
    onDestroy : function(){
        
        
        
        if(this.rendered){
            
            for (var i =0; i < this.toolbars.length;i++) {
                // fixme - ask toolbars for heights?
                this.toolbars[i].onDestroy();
            }
            
            this.wrap.dom.innerHTML = '';
            this.wrap.remove();
        }
    },

    // private
    onFirstFocus : function(){
        //Roo.log("onFirstFocus");
        this.editorcore.onFirstFocus();
         for (var i =0; i < this.toolbars.length;i++) {
            this.toolbars[i].onFirstFocus();
        }
        
    },
    
    // private
    syncValue : function()
    {
        this.editorcore.syncValue();
    },
    
    pushValue : function()
    {
        this.editorcore.pushValue();
    },
    
    setStylesheets : function(stylesheets)
    {
        this.editorcore.setStylesheets(stylesheets);
    },
    
    removeStylesheets : function()
    {
        this.editorcore.removeStylesheets();
    }
     
    
    // hide stuff that is not compatible
    /**
     * @event blur
     * @hide
     */
    /**
     * @event change
     * @hide
     */
    /**
     * @event focus
     * @hide
     */
    /**
     * @event specialkey
     * @hide
     */
    /**
     * @cfg {String} fieldClass @hide
     */
    /**
     * @cfg {String} focusClass @hide
     */
    /**
     * @cfg {String} autoCreate @hide
     */
    /**
     * @cfg {String} inputType @hide
     */
    /**
     * @cfg {String} invalidClass @hide
     */
    /**
     * @cfg {String} invalidText @hide
     */
    /**
     * @cfg {String} msgFx @hide
     */
    /**
     * @cfg {String} validateOnBlur @hide
     */
});
 
    /*
 * Based on
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *  
 
 */

/**
 * @class Roo.form.HtmlEditor.ToolbarStandard
 * Basic Toolbar

 * Usage:
 *
 new Roo.form.HtmlEditor({
    ....
    toolbars : [
        new Roo.form.HtmlEditorToolbar1({
            disable : { fonts: 1 , format: 1, ..., ... , ...],
            btns : [ .... ]
        })
    }
     
 * 
 * @cfg {Object} disable List of elements to disable..
 * @cfg {Roo.Toolbar.Item|Roo.Toolbar.Button|Roo.Toolbar.SplitButton|Roo.form.Field} btns[] List of additional buttons.
 * 
 * 
 * NEEDS Extra CSS? 
 * .x-html-editor-tb .x-edit-none .x-btn-text { background: none; }
 */
 
Roo.form.HtmlEditor.ToolbarStandard = function(config)
{
    
    Roo.apply(this, config);
    
    // default disabled, based on 'good practice'..
    this.disable = this.disable || {};
    Roo.applyIf(this.disable, {
        fontSize : true,
        colors : true,
        specialElements : true
    });
    
    
    //Roo.form.HtmlEditorToolbar1.superclass.constructor.call(this, editor.wrap.dom.firstChild, [], config);
    // dont call parent... till later.
}

Roo.form.HtmlEditor.ToolbarStandard.prototype = {
    
    tb: false,
    
    rendered: false,
    
    editor : false,
    editorcore : false,
    /**
     * @cfg {Object} disable  List of toolbar elements to disable
         
     */
    disable : false,
    
    
     /**
     * @cfg {String} createLinkText The default text for the create link prompt
     */
    createLinkText : 'Please enter the URL for the link:',
    /**
     * @cfg {String} defaultLinkValue The default value for the create link prompt (defaults to http:/ /)
     */
    defaultLinkValue : 'http:/'+'/',
   
    
      /**
     * @cfg {Array} fontFamilies An array of available font families
     */
    fontFamilies : [
        'Arial',
        'Courier New',
        'Tahoma',
        'Times New Roman',
        'Verdana'
    ],
    
    specialChars : [
           "&#169;",
          "&#174;",     
          "&#8482;",    
          "&#163;" ,    
         // "&#8212;",    
          "&#8230;",    
          "&#247;" ,    
        //  "&#225;" ,     ?? a acute?
           "&#8364;"    , //Euro
       //   "&#8220;"    ,
        //  "&#8221;"    ,
        //  "&#8226;"    ,
          "&#176;"  //   , // degrees

         // "&#233;"     , // e ecute
         // "&#250;"     , // u ecute?
    ],
    
    specialElements : [
        {
            text: "Insert Table",
            xtype: 'MenuItem',
            xns : Roo.Menu,
            ihtml :  '<table><tr><td>Cell</td></tr></table>' 
                
        },
        {    
            text: "Insert Image",
            xtype: 'MenuItem',
            xns : Roo.Menu,
            ihtml : '<img src="about:blank"/>'
            
        }
        
         
    ],
    
    
    inputElements : [ 
            "form", "input:text", "input:hidden", "input:checkbox", "input:radio", "input:password", 
            "input:submit", "input:button", "select", "textarea", "label" ],
    formats : [
        ["p"] ,  
        ["h1"],["h2"],["h3"],["h4"],["h5"],["h6"], 
        ["pre"],[ "code"], 
        ["abbr"],[ "acronym"],[ "address"],[ "cite"],[ "samp"],[ "var"],
        ['div'],['span'],
        ['sup'],['sub']
    ],
    
    cleanStyles : [
        "font-size"
    ],
     /**
     * @cfg {String} defaultFont default font to use.
     */
    defaultFont: 'tahoma',
   
    fontSelect : false,
    
    
    formatCombo : false,
    
    init : function(editor)
    {
        this.editor = editor;
        this.editorcore = editor.editorcore ? editor.editorcore : editor;
        var editorcore = this.editorcore;
        
        var _t = this;
        
        var fid = editorcore.frameId;
        var etb = this;
        function btn(id, toggle, handler){
            var xid = fid + '-'+ id ;
            return {
                id : xid,
                cmd : id,
                cls : 'x-btn-icon x-edit-'+id,
                enableToggle:toggle !== false,
                scope: _t, // was editor...
                handler:handler||_t.relayBtnCmd,
                clickEvent:'mousedown',
                tooltip: etb.buttonTips[id] || undefined, ///tips ???
                tabIndex:-1
            };
        }
        
        
        
        var tb = new Roo.Toolbar(editor.wrap.dom.firstChild);
        this.tb = tb;
         // stop form submits
        tb.el.on('click', function(e){
            e.preventDefault(); // what does this do?
        });

        if(!this.disable.font) { // && !Roo.isSafari){
            /* why no safari for fonts 
            editor.fontSelect = tb.el.createChild({
                tag:'select',
                tabIndex: -1,
                cls:'x-font-select',
                html: this.createFontOptions()
            });
            
            editor.fontSelect.on('change', function(){
                var font = editor.fontSelect.dom.value;
                editor.relayCmd('fontname', font);
                editor.deferFocus();
            }, editor);
            
            tb.add(
                editor.fontSelect.dom,
                '-'
            );
            */
            
        };
        if(!this.disable.formats){
            this.formatCombo = new Roo.form.ComboBox({
                store: new Roo.data.SimpleStore({
                    id : 'tag',
                    fields: ['tag'],
                    data : this.formats // from states.js
                }),
                blockFocus : true,
                name : '',
                //autoCreate : {tag: "div",  size: "20"},
                displayField:'tag',
                typeAhead: false,
                mode: 'local',
                editable : false,
                triggerAction: 'all',
                emptyText:'Add tag',
                selectOnFocus:true,
                width:135,
                listeners : {
                    'select': function(c, r, i) {
                        editorcore.insertTag(r.get('tag'));
                        editor.focus();
                    }
                }

            });
            tb.addField(this.formatCombo);
            
        }
        
        if(!this.disable.format){
            tb.add(
                btn('bold'),
                btn('italic'),
                btn('underline'),
                btn('strikethrough')
            );
        };
        if(!this.disable.fontSize){
            tb.add(
                '-',
                
                
                btn('increasefontsize', false, editorcore.adjustFont),
                btn('decreasefontsize', false, editorcore.adjustFont)
            );
        };
        
        
        if(!this.disable.colors){
            tb.add(
                '-', {
                    id:editorcore.frameId +'-forecolor',
                    cls:'x-btn-icon x-edit-forecolor',
                    clickEvent:'mousedown',
                    tooltip: this.buttonTips['forecolor'] || undefined,
                    tabIndex:-1,
                    menu : new Roo.menu.ColorMenu({
                        allowReselect: true,
                        focus: Roo.emptyFn,
                        value:'000000',
                        plain:true,
                        selectHandler: function(cp, color){
                            editorcore.execCmd('forecolor', Roo.isSafari || Roo.isIE ? '#'+color : color);
                            editor.deferFocus();
                        },
                        scope: editorcore,
                        clickEvent:'mousedown'
                    })
                }, {
                    id:editorcore.frameId +'backcolor',
                    cls:'x-btn-icon x-edit-backcolor',
                    clickEvent:'mousedown',
                    tooltip: this.buttonTips['backcolor'] || undefined,
                    tabIndex:-1,
                    menu : new Roo.menu.ColorMenu({
                        focus: Roo.emptyFn,
                        value:'FFFFFF',
                        plain:true,
                        allowReselect: true,
                        selectHandler: function(cp, color){
                            if(Roo.isGecko){
                                editorcore.execCmd('useCSS', false);
                                editorcore.execCmd('hilitecolor', color);
                                editorcore.execCmd('useCSS', true);
                                editor.deferFocus();
                            }else{
                                editorcore.execCmd(Roo.isOpera ? 'hilitecolor' : 'backcolor', 
                                    Roo.isSafari || Roo.isIE ? '#'+color : color);
                                editor.deferFocus();
                            }
                        },
                        scope:editorcore,
                        clickEvent:'mousedown'
                    })
                }
            );
        };
        // now add all the items...
        

        if(!this.disable.alignments){
            tb.add(
                '-',
                btn('justifyleft'),
                btn('justifycenter'),
                btn('justifyright')
            );
        };

        //if(!Roo.isSafari){
            if(!this.disable.links){
                tb.add(
                    '-',
                    btn('createlink', false, this.createLink)    /// MOVE TO HERE?!!?!?!?!
                );
            };

            if(!this.disable.lists){
                tb.add(
                    '-',
                    btn('insertorderedlist'),
                    btn('insertunorderedlist')
                );
            }
            if(!this.disable.sourceEdit){
                tb.add(
                    '-',
                    btn('sourceedit', true, function(btn){
                        this.toggleSourceEdit(btn.pressed);
                    })
                );
            }
        //}
        
        var smenu = { };
        // special menu.. - needs to be tidied up..
        if (!this.disable.special) {
            smenu = {
                text: "&#169;",
                cls: 'x-edit-none',
                
                menu : {
                    items : []
                }
            };
            for (var i =0; i < this.specialChars.length; i++) {
                smenu.menu.items.push({
                    
                    html: this.specialChars[i],
                    handler: function(a,b) {
                        editorcore.insertAtCursor(String.fromCharCode(a.html.replace('&#','').replace(';', '')));
                        //editor.insertAtCursor(a.html);
                        
                    },
                    tabIndex:-1
                });
            }
            
            
            tb.add(smenu);
            
            
        }
        
        var cmenu = { };
        if (!this.disable.cleanStyles) {
            cmenu = {
                cls: 'x-btn-icon x-btn-clear',
                
                menu : {
                    items : []
                }
            };
            for (var i =0; i < this.cleanStyles.length; i++) {
                cmenu.menu.items.push({
                    actiontype : this.cleanStyles[i],
                    html: 'Remove ' + this.cleanStyles[i],
                    handler: function(a,b) {
//                        Roo.log(a);
//                        Roo.log(b);
                        var c = Roo.get(editorcore.doc.body);
                        c.select('[style]').each(function(s) {
                            s.dom.style.removeProperty(a.actiontype);
                        });
                        editorcore.syncValue();
                    },
                    tabIndex:-1
                });
            }
            cmenu.menu.items.push({
                actiontype : 'tablewidths',
                html: 'Remove Table Widths',
                handler: function(a,b) {
                    editorcore.cleanTableWidths();
                    editorcore.syncValue();
                },
                tabIndex:-1
            });
            cmenu.menu.items.push({
                actiontype : 'word',
                html: 'Remove MS Word Formating',
                handler: function(a,b) {
                    editorcore.cleanWord();
                    editorcore.syncValue();
                },
                tabIndex:-1
            });
            
            cmenu.menu.items.push({
                actiontype : 'all',
                html: 'Remove All Styles',
                handler: function(a,b) {
                    
                    var c = Roo.get(editorcore.doc.body);
                    c.select('[style]').each(function(s) {
                        s.dom.removeAttribute('style');
                    });
                    editorcore.syncValue();
                },
                tabIndex:-1
            });
            
            cmenu.menu.items.push({
                actiontype : 'all',
                html: 'Remove All CSS Classes',
                handler: function(a,b) {
                    
                    var c = Roo.get(editorcore.doc.body);
                    c.select('[class]').each(function(s) {
                        s.dom.removeAttribute('class');
                    });
                    editorcore.cleanWord();
                    editorcore.syncValue();
                },
                tabIndex:-1
            });
            
             cmenu.menu.items.push({
                actiontype : 'tidy',
                html: 'Tidy HTML Source',
                handler: function(a,b) {
                    new Roo.htmleditor.Tidy(editorcore.doc.body);
                    editorcore.syncValue();
                },
                tabIndex:-1
            });

            cmenu.menu.items.push({
                actiontype : 'dir',
                html: 'Change Selected Text Direction',
                handler: function(a, b) {
                    var sel = editorcore.getSelection();
                    var range = sel.getRangeAt();
                    // select plain text within same container
                    if(range.startContainer == range.endContainer && range.startContainer.nodeType == 3) {
                        var ancestors = editorcore.getAllAncestors();
                        var removeDir = false;
                        for(var i = 0; i < ancestors.length; i++) {
                            var node = ancestors[i];
                            // find closest span
                            if(node.tagName && node.tagName.toLowerCase() == 'span') {
                                // remove dir if exists
                                if(node.hasAttribute('dir')) {
                                    node.removeAttribute('dir');
    
                                    removeDir = true;
    
                                    // remove span if no attribute
                                    if(node.attributes.length == 0) {

                                        ar = Array.from(node.childNodes);
                                        for (var i = 0; i < ar.length; i++) {
                                         
                                            node.removeChild(ar[i]);
                                            node.parentNode.insertBefore(ar[i], node);
                                           
                                        }
                                        node.parentNode.removeChild(node);

                                        // only plain text inside the removed span
                                        if(ar.length == 1 && ar[0].nodeType == 3) {
                                            var textNode = ar[0];

                                            var prev = textNode.previousSibling;
                                            var next = textNode.nextSibling;

                                            // merge adjacent text nodes

                                            var text = '';

                                            if(prev.nodeType == 3) {
                                                text += prev.textContent;
                                                textNode.parentNode.removeChild(prev);
                                            }
                                            text += textNode.textContent;
                                            if(next.nodeType == 3) {
                                                text += next.textContent;
                                                textNode.parentNode.removeChild(next);
                                            }

                                            textNode.parentNode.insertBefore(document.createTextNode(text), textNode);
                                            textNode.parentNode.removeChild(textNode);
                                        }
                                    }
                                }
                                break;
                            }
                        }
    
                        // if no dir removed
                        if(!removeDir) {
                            var nodeDir = ['ar', 'he', 'fa', 'ur', 'ps', 'syr', 'dv', 'arc', 'nqo', 'sam', 'tzm', 'ug', 'yi'].includes(editorcore.language) ? 'ltr' : 'rtl';
                            var span = editorcore.doc.createElement('span');
                            span.setAttribute('dir', nodeDir);
                            range.surroundContents(span);
                        }

                    }
                },
                tabIndex: -1
            });
            
            
            tb.add(cmenu);
        }
         
        if (!this.disable.specialElements) {
            var semenu = {
                text: "Other;",
                cls: 'x-edit-none',
                menu : {
                    items : []
                }
            };
            for (var i =0; i < this.specialElements.length; i++) {
                semenu.menu.items.push(
                    Roo.apply({ 
                        handler: function(a,b) {
                            editor.insertAtCursor(this.ihtml);
                        }
                    }, this.specialElements[i])
                );
                    
            }
            
            tb.add(semenu);
            
            
        }
         
        
        if (this.btns) {
            for(var i =0; i< this.btns.length;i++) {
                var b = Roo.factory(this.btns[i],this.btns[i].xns || Roo.form);
                b.cls =  'x-edit-none';
                
                if(typeof(this.btns[i].cls) != 'undefined' && this.btns[i].cls.indexOf('x-init-enable') !== -1){
                    b.cls += ' x-init-enable';
                }
                
                b.scope = editorcore;
                tb.add(b);
            }
        
        }
        
        
        
        // disable everything...
        
        this.tb.items.each(function(item){
            
           if(
                item.id != editorcore.frameId+ '-sourceedit' && 
                (typeof(item.cls) != 'undefined' && item.cls.indexOf('x-init-enable') === -1)
            ){
                
                item.disable();
            }
        });
        this.rendered = true;
        
        // the all the btns;
        editor.on('editorevent', this.updateToolbar, this);
        // other toolbars need to implement this..
        //editor.on('editmodechange', this.updateToolbar, this);
    },
    
    
    relayBtnCmd : function(btn) {
        this.editorcore.relayCmd(btn.cmd);
    },
    // private used internally
    createLink : function(){
        //Roo.log("create link?");
        var ec = this.editorcore;
        var ar = ec.getAllAncestors();
        var n = false;
        for(var i = 0;i< ar.length;i++) {
            if (ar[i] && ar[i].nodeName == 'A') {
                n = ar[i];
                break;
            }
        }
        
        (function() {
            
            Roo.MessageBox.show({
                title : "Add / Edit Link URL",
                msg : "Enter the url for the link",
                buttons: Roo.MessageBox.OKCANCEL,
                fn: function(btn, url){
                    if (btn != 'ok') {
                        return;
                    }
                    if(url && url != 'http:/'+'/'){
                        if (n) {
                            n.setAttribute('href', url);
                        } else {
                            ec.relayCmd('createlink', url);
                        }
                    }
                },
                minWidth:250,
                prompt:true,
                //multiline: multiline,
                modal : true,
                value :  n  ? n.getAttribute('href') : '' 
            });
            
             
        }).defer(100, this); // we have to defer this , otherwise the mouse click gives focus to the main window.
        
    },

    
    /**
     * Protected method that will not generally be called directly. It triggers
     * a toolbar update by reading the markup state of the current selection in the editor.
     */
    updateToolbar: function(){

        if(!this.editorcore.activated){
            this.editor.onFirstFocus();
            return;
        }

        var btns = this.tb.items.map, 
            doc = this.editorcore.doc,
            frameId = this.editorcore.frameId;

        if(!this.disable.font && !Roo.isSafari){
            /*
            var name = (doc.queryCommandValue('FontName')||this.editor.defaultFont).toLowerCase();
            if(name != this.fontSelect.dom.value){
                this.fontSelect.dom.value = name;
            }
            */
        }
        if(!this.disable.format){
            btns[frameId + '-bold'].toggle(doc.queryCommandState('bold'));
            btns[frameId + '-italic'].toggle(doc.queryCommandState('italic'));
            btns[frameId + '-underline'].toggle(doc.queryCommandState('underline'));
            btns[frameId + '-strikethrough'].toggle(doc.queryCommandState('strikethrough'));
        }
        if(!this.disable.alignments){
            btns[frameId + '-justifyleft'].toggle(doc.queryCommandState('justifyleft'));
            btns[frameId + '-justifycenter'].toggle(doc.queryCommandState('justifycenter'));
            btns[frameId + '-justifyright'].toggle(doc.queryCommandState('justifyright'));
        }
        if(!Roo.isSafari && !this.disable.lists){
            btns[frameId + '-insertorderedlist'].toggle(doc.queryCommandState('insertorderedlist'));
            btns[frameId + '-insertunorderedlist'].toggle(doc.queryCommandState('insertunorderedlist'));
        }
        
        var ans = this.editorcore.getAllAncestors();
        if (this.formatCombo) {
            
            
            var store = this.formatCombo.store;
            this.formatCombo.setValue("");
            for (var i =0; i < ans.length;i++) {
                if (ans[i] && store.query('tag',ans[i].tagName.toLowerCase(), false).length) {
                    // select it..
                    this.formatCombo.setValue(ans[i].tagName.toLowerCase());
                    break;
                }
            }
        }
        
        
        
        // hides menus... - so this cant be on a menu...
        Roo.menu.MenuMgr.hideAll();

        //this.editorsyncValue();
    },
   
    
    createFontOptions : function(){
        var buf = [], fs = this.fontFamilies, ff, lc;
        
        
        
        for(var i = 0, len = fs.length; i< len; i++){
            ff = fs[i];
            lc = ff.toLowerCase();
            buf.push(
                '<option value="',lc,'" style="font-family:',ff,';"',
                    (this.defaultFont == lc ? ' selected="true">' : '>'),
                    ff,
                '</option>'
            );
        }
        return buf.join('');
    },
    
    toggleSourceEdit : function(sourceEditMode){
        
        Roo.log("toolbar toogle");
        if(sourceEditMode === undefined){
            sourceEditMode = !this.sourceEditMode;
        }
        this.sourceEditMode = sourceEditMode === true;
        var btn = this.tb.items.get(this.editorcore.frameId +'-sourceedit');
        // just toggle the button?
        if(btn.pressed !== this.sourceEditMode){
            btn.toggle(this.sourceEditMode);
            return;
        }
        
        if(sourceEditMode){
            Roo.log("disabling buttons");
            this.tb.items.each(function(item){
                if(item.cmd != 'sourceedit' && (typeof(item.cls) != 'undefined' && item.cls.indexOf('x-init-enable') === -1)){
                    item.disable();
                }
            });
          
        }else{
            Roo.log("enabling buttons");
            if(this.editorcore.initialized){
                this.tb.items.each(function(item){
                    item.enable();
                });
                // initialize 'blocks'
                Roo.each(Roo.get(this.editorcore.doc.body).query('*[data-block]'), function(e) {
                    Roo.htmleditor.Block.factory(e).updateElement(e);
                },this);
            
            }
            
        }
        Roo.log("calling toggole on editor");
        // tell the editor that it's been pressed..
        this.editor.toggleSourceEdit(sourceEditMode);
       
    },
     /**
     * Object collection of toolbar tooltips for the buttons in the editor. The key
     * is the command id associated with that button and the value is a valid QuickTips object.
     * For example:
<pre><code>
{
    bold : {
        title: 'Bold (Ctrl+B)',
        text: 'Make the selected text bold.',
        cls: 'x-html-editor-tip'
    },
    italic : {
        title: 'Italic (Ctrl+I)',
        text: 'Make the selected text italic.',
        cls: 'x-html-editor-tip'
    },
    ...
</code></pre>
    * @type Object
     */
    buttonTips : {
        bold : {
            title: 'Bold (Ctrl+B)',
            text: 'Make the selected text bold.',
            cls: 'x-html-editor-tip'
        },
        italic : {
            title: 'Italic (Ctrl+I)',
            text: 'Make the selected text italic.',
            cls: 'x-html-editor-tip'
        },
        underline : {
            title: 'Underline (Ctrl+U)',
            text: 'Underline the selected text.',
            cls: 'x-html-editor-tip'
        },
        strikethrough : {
            title: 'Strikethrough',
            text: 'Strikethrough the selected text.',
            cls: 'x-html-editor-tip'
        },
        increasefontsize : {
            title: 'Grow Text',
            text: 'Increase the font size.',
            cls: 'x-html-editor-tip'
        },
        decreasefontsize : {
            title: 'Shrink Text',
            text: 'Decrease the font size.',
            cls: 'x-html-editor-tip'
        },
        backcolor : {
            title: 'Text Highlight Color',
            text: 'Change the background color of the selected text.',
            cls: 'x-html-editor-tip'
        },
        forecolor : {
            title: 'Font Color',
            text: 'Change the color of the selected text.',
            cls: 'x-html-editor-tip'
        },
        justifyleft : {
            title: 'Align Text Left',
            text: 'Align text to the left.',
            cls: 'x-html-editor-tip'
        },
        justifycenter : {
            title: 'Center Text',
            text: 'Center text in the editor.',
            cls: 'x-html-editor-tip'
        },
        justifyright : {
            title: 'Align Text Right',
            text: 'Align text to the right.',
            cls: 'x-html-editor-tip'
        },
        insertunorderedlist : {
            title: 'Bullet List',
            text: 'Start a bulleted list.',
            cls: 'x-html-editor-tip'
        },
        insertorderedlist : {
            title: 'Numbered List',
            text: 'Start a numbered list.',
            cls: 'x-html-editor-tip'
        },
        createlink : {
            title: 'Hyperlink',
            text: 'Make the selected text a hyperlink.',
            cls: 'x-html-editor-tip'
        },
        sourceedit : {
            title: 'Source Edit',
            text: 'Switch to source editing mode.',
            cls: 'x-html-editor-tip'
        }
    },
    // private
    onDestroy : function(){
        if(this.rendered){
            
            this.tb.items.each(function(item){
                if(item.menu){
                    item.menu.removeAll();
                    if(item.menu.el){
                        item.menu.el.destroy();
                    }
                }
                item.destroy();
            });
             
        }
    },
    onFirstFocus: function() {
        this.tb.items.each(function(item){
           item.enable();
        });
    }
};




// <script type="text/javascript">
/*
 * Based on
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *  
 
 */

 
/**
 * @class Roo.form.HtmlEditor.ToolbarContext
 * Context Toolbar
 * 
 * Usage:
 *
 new Roo.form.HtmlEditor({
    ....
    toolbars : [
        { xtype: 'ToolbarStandard', styles : {} }
        { xtype: 'ToolbarContext', disable : {} }
    ]
})

     
 * 
 * @config : {Object} disable List of elements to disable.. (not done yet.)
 * @config : {Object} styles  Map of styles available.
 * 
 */

Roo.form.HtmlEditor.ToolbarContext = function(config)
{
    
    Roo.apply(this, config);
    //Roo.form.HtmlEditorToolbar1.superclass.constructor.call(this, editor.wrap.dom.firstChild, [], config);
    // dont call parent... till later.
    this.styles = this.styles || {};
}

 

Roo.form.HtmlEditor.ToolbarContext.types = {
    'IMG' : [
        {
            name : 'width',
            title: "Width",
            width: 40
        },
        {
            name : 'height',
            title: "Height",
            width: 40
        },
        {
            name : 'align',
            title: "Align",
            opts : [ [""],[ "left"],[ "right"],[ "center"],[ "top"]],
            width : 80
            
        },
        {
            name : 'border',
            title: "Border",
            width: 40
        },
        {
            name : 'alt',
            title: "Alt",
            width: 120
        },
        {
            name : 'src',
            title: "Src",
            width: 220
        }
        
    ],
    
    'FIGURE' : [
        {
            name : 'align',
            title: "Align",
            opts : [ [""],[ "left"],[ "right"],[ "center"],[ "top"]],
            width : 80  
        }
    ],
    'A' : [
        {
            name : 'name',
            title: "Name",
            width: 50
        },
        {
            name : 'target',
            title: "Target",
            width: 120
        },
        {
            name : 'href',
            title: "Href",
            width: 220
        } // border?
        
    ],
    
    'INPUT' : [
        {
            name : 'name',
            title: "name",
            width: 120
        },
        {
            name : 'value',
            title: "Value",
            width: 120
        },
        {
            name : 'width',
            title: "Width",
            width: 40
        }
    ],
    'LABEL' : [
         {
            name : 'for',
            title: "For",
            width: 120
        }
    ],
    'TEXTAREA' : [
        {
            name : 'name',
            title: "name",
            width: 120
        },
        {
            name : 'rows',
            title: "Rows",
            width: 20
        },
        {
            name : 'cols',
            title: "Cols",
            width: 20
        }
    ],
    'SELECT' : [
        {
            name : 'name',
            title: "name",
            width: 120
        },
        {
            name : 'selectoptions',
            title: "Options",
            width: 200
        }
    ],
    
    // should we really allow this??
    // should this just be 
    'BODY' : [
        
        {
            name : 'title',
            title: "Title",
            width: 200,
            disabled : true
        }
    ],
 
    '*' : [
        // empty.
    ]

};

// this should be configurable.. - you can either set it up using stores, or modify options somehwere..
Roo.form.HtmlEditor.ToolbarContext.stores = false;

Roo.form.HtmlEditor.ToolbarContext.options = {
        'font-family'  : [ 
                [ 'Helvetica,Arial,sans-serif', 'Helvetica'],
                [ 'Courier New', 'Courier New'],
                [ 'Tahoma', 'Tahoma'],
                [ 'Times New Roman,serif', 'Times'],
                [ 'Verdana','Verdana' ]
        ]
};

// fixme - these need to be configurable..
 

//Roo.form.HtmlEditor.ToolbarContext.types


Roo.apply(Roo.form.HtmlEditor.ToolbarContext.prototype,  {
    
    tb: false,
    
    rendered: false,
    
    editor : false,
    editorcore : false,
    /**
     * @cfg {Object} disable  List of toolbar elements to disable
         
     */
    disable : false,
    /**
     * @cfg {Object} styles List of styles 
     *    eg. { '*' : [ 'headline' ] , 'TD' : [ 'underline', 'double-underline' ] } 
     *
     * These must be defined in the page, so they get rendered correctly..
     * .headline { }
     * TD.underline { }
     * 
     */
    styles : false,
    
    options: false,
    
    toolbars : false,
    
    init : function(editor)
    {
        this.editor = editor;
        this.editorcore = editor.editorcore ? editor.editorcore : editor;
        var editorcore = this.editorcore;
        
        var fid = editorcore.frameId;
        var etb = this;
        function btn(id, toggle, handler){
            var xid = fid + '-'+ id ;
            return {
                id : xid,
                cmd : id,
                cls : 'x-btn-icon x-edit-'+id,
                enableToggle:toggle !== false,
                scope: editorcore, // was editor...
                handler:handler||editorcore.relayBtnCmd,
                clickEvent:'mousedown',
                tooltip: etb.buttonTips[id] || undefined, ///tips ???
                tabIndex:-1
            };
        }
        // create a new element.
        var wdiv = editor.wrap.createChild({
                tag: 'div'
            }, editor.wrap.dom.firstChild.nextSibling, true);
        
        // can we do this more than once??
        
         // stop form submits
      
 
        // disable everything...
        var ty= Roo.form.HtmlEditor.ToolbarContext.types;
        this.toolbars = {};
        // block toolbars are built in updateToolbar when needed.
        for (var i in  ty) {
            
            this.toolbars[i] = this.buildToolbar(ty[i],i);
        }
        this.tb = this.toolbars.BODY;
        this.tb.el.show();
        this.buildFooter();
        this.footer.show();
        editor.on('hide', function( ) { this.footer.hide() }, this);
        editor.on('show', function( ) { this.footer.show() }, this);
        
         
        this.rendered = true;
        
        // the all the btns;
        editor.on('editorevent', this.updateToolbar, this);
        // other toolbars need to implement this..
        //editor.on('editmodechange', this.updateToolbar, this);
    },
    
    
    
    /**
     * Protected method that will not generally be called directly. It triggers
     * a toolbar update by reading the markup state of the current selection in the editor.
     *
     * Note you can force an update by calling on('editorevent', scope, false)
     */
    updateToolbar: function(editor ,ev, sel)
    {
        
        if (ev) {
            ev.stopEvent(); // se if we can stop this looping with mutiple events.
        }
        
        //Roo.log(ev);
        // capture mouse up - this is handy for selecting images..
        // perhaps should go somewhere else...
        if(!this.editorcore.activated){
             this.editor.onFirstFocus();
            return;
        }
        //Roo.log(ev ? ev.target : 'NOTARGET');
        
        
        // http://developer.yahoo.com/yui/docs/simple-editor.js.html
        // selectNode - might want to handle IE?
        
        
        
        if (ev &&
            (ev.type == 'mouseup' || ev.type == 'click' ) &&
            ev.target && ev.target.tagName != 'BODY' ) { // && ev.target.tagName == 'IMG') {
            // they have click on an image...
            // let's see if we can change the selection...
            sel = ev.target;
            
            // this triggers looping?
            //this.editorcore.selectNode(sel);
             
        }
        
        // this forces an id..
        Array.from(this.editorcore.doc.body.querySelectorAll('.roo-ed-selection')).forEach(function(e) {
             e.classList.remove('roo-ed-selection');
        });
        //Roo.select('.roo-ed-selection', false, this.editorcore.doc).removeClass('roo-ed-selection');
        //Roo.get(node).addClass('roo-ed-selection');
      
        //var updateFooter = sel ? false : true; 
        
        
        var ans = this.editorcore.getAllAncestors();
        
        // pick
        var ty = Roo.form.HtmlEditor.ToolbarContext.types;
        
        if (!sel) { 
            sel = ans.length ? (ans[0] ?  ans[0]  : ans[1]) : this.editorcore.doc.body;
            sel = sel ? sel : this.editorcore.doc.body;
            sel = sel.tagName.length ? sel : this.editorcore.doc.body;
            
        }
        
        var tn = sel.tagName.toUpperCase();
        var lastSel = this.tb.selectedNode;
        this.tb.selectedNode = sel;
        var left_label = tn;
        
        // ok see if we are editing a block?
        
        var db = false;
        // you are not actually selecting the block.
        if (sel && sel.hasAttribute('data-block')) {
            db = sel;
        } else if (sel && sel.closest('[data-block]')) {
            
            db = sel.closest('[data-block]');
            //var cepar = sel.closest('[contenteditable=true]');
            //if (db && cepar && cepar.tagName != 'BODY') {
            //   db = false; // we are inside an editable block.. = not sure how we are going to handle nested blocks!?
            //}   
        }
        
        
        var block = false;
        //if (db && !sel.hasAttribute('contenteditable') && sel.getAttribute('contenteditable') != 'true' ) {
        if (db && this.editorcore.enableBlocks) {
            block = Roo.htmleditor.Block.factory(db);
            
            
            if (block) {
                 db.className = (
                        db.classList.length > 0  ? db.className + ' ' : ''
                    )  + 'roo-ed-selection';
                 
                 // since we removed it earlier... its not there..
                tn = 'BLOCK.' + db.getAttribute('data-block');
                
                //this.editorcore.selectNode(db);
                if (typeof(this.toolbars[tn]) == 'undefined') {
                   this.toolbars[tn] = this.buildToolbar( false  ,tn ,block.friendly_name, block);
                }
                this.toolbars[tn].selectedNode = db;
                left_label = block.friendly_name;
                ans = this.editorcore.getAllAncestors();
            }
            
                
            
        }
        
        
        if (this.tb.name == tn && lastSel == this.tb.selectedNode && ev !== false) {
            return; // no change?
        }
        
        
          
        this.tb.el.hide();
        ///console.log("show: " + tn);
        this.tb =  typeof(this.toolbars[tn]) != 'undefined' ? this.toolbars[tn] : this.toolbars['*'];
        
        this.tb.el.show();
        // update name
        this.tb.items.first().el.innerHTML = left_label + ':&nbsp;';

        if(this.tb.name == 'BLOCK.Figure' && this.tb.items && block) {
            this.tb.items.each(function(item) {
                if(item.cls && item.cls == 'x-toolbar-figure-show-video-url') {
                    if(block.cls == 'youtube') {
                        item.hide();
                        return;
                    }
                    item.show();
                }
            });
        }
        
        // update attributes
        if (block && this.tb.fields) {
             
            this.tb.fields.each(function(e) {
                e.setValue(block[e.name]);
            });
            
            
        } else  if (this.tb.fields && this.tb.selectedNode) {
            this.tb.fields.each( function(e) {
                if (e.stylename) {
                    e.setValue(this.tb.selectedNode.style[e.stylename]);
                    return;
                } 
                e.setValue(this.tb.selectedNode.getAttribute(e.attrname));
            }, this);
            this.updateToolbarStyles(this.tb.selectedNode);  
        }
        
        
       
        Roo.menu.MenuMgr.hideAll();

        
        
    
        // update the footer
        //
        this.updateFooter(ans);
             
    },
    
    updateToolbarStyles : function(sel)
    {
        var hasStyles = false;
        for(var i in this.styles) {
            hasStyles = true;
            break;
        }
        
        // update styles
        if (hasStyles && this.tb.hasStyles) { 
            var st = this.tb.fields.item(0);
            
            st.store.removeAll();
            var cn = sel.className.split(/\s+/);
            
            var avs = [];
            if (this.styles['*']) {
                
                Roo.each(this.styles['*'], function(v) {
                    avs.push( [ v , cn.indexOf(v) > -1 ? 1 : 0 ] );         
                });
            }
            if (this.styles[tn]) { 
                Roo.each(this.styles[tn], function(v) {
                    avs.push( [ v , cn.indexOf(v) > -1 ? 1 : 0 ] );         
                });
            }
            
            st.store.loadData(avs);
            st.collapse();
            st.setValue(cn);
        }
    },
    
     
    updateFooter : function(ans)
    {
        var html = '';
        if (ans === false) {
            this.footDisp.dom.innerHTML = '';
            return;
        }
        
        this.footerEls = ans.reverse();
        Roo.each(this.footerEls, function(a,i) {
            if (!a) { return; }
            html += html.length ? ' &gt; '  :  '';
            
            html += '<span class="x-ed-loc-' + i + '">' + a.tagName + '</span>';
            
        });
       
        // 
        var sz = this.footDisp.up('td').getSize();
        this.footDisp.dom.style.width = (sz.width -10) + 'px';
        this.footDisp.dom.style.marginLeft = '5px';
        
        this.footDisp.dom.style.overflow = 'hidden';
        
        this.footDisp.dom.innerHTML = html;
            
        
    },
   
       
    // private
    onDestroy : function(){
        if(this.rendered){
            
            this.tb.items.each(function(item){
                if(item.menu){
                    item.menu.removeAll();
                    if(item.menu.el){
                        item.menu.el.destroy();
                    }
                }
                item.destroy();
            });
             
        }
    },
    onFirstFocus: function() {
        // need to do this for all the toolbars..
        this.tb.items.each(function(item){
           item.enable();
        });
    },
    buildToolbar: function(tlist, nm, friendly_name, block)
    {
        var editor = this.editor;
        var editorcore = this.editorcore;
         // create a new element.
        var wdiv = editor.wrap.createChild({
                tag: 'div'
            }, editor.wrap.dom.firstChild.nextSibling, true);
        
       
        var tb = new Roo.Toolbar(wdiv);
        ///this.tb = tb; // << this sets the active toolbar..
        if (tlist === false && block) {
            tlist = block.contextMenu(this);
        }
        
        tb.hasStyles = false;
        tb.name = nm;
        
        tb.add((typeof(friendly_name) == 'undefined' ? nm : friendly_name) + ":&nbsp;");
        
        var styles = Array.from(this.styles);
        
        
        // styles...
        if (styles && styles.length) {
            tb.hasStyles = true;
            // this needs a multi-select checkbox...
            tb.addField( new Roo.form.ComboBox({
                store: new Roo.data.SimpleStore({
                    id : 'val',
                    fields: ['val', 'selected'],
                    data : [] 
                }),
                name : '-roo-edit-className',
                attrname : 'className',
                displayField: 'val',
                typeAhead: false,
                mode: 'local',
                editable : false,
                triggerAction: 'all',
                emptyText:'Select Style',
                selectOnFocus:true,
                width: 130,
                listeners : {
                    'select': function(c, r, i) {
                        // initial support only for on class per el..
                        tb.selectedNode.className =  r ? r.get('val') : '';
                        editorcore.syncValue();
                    }
                }
    
            }));
        }
        
        var tbc = Roo.form.HtmlEditor.ToolbarContext;
        
        
        for (var i = 0; i < tlist.length; i++) {
            
            // newer versions will use xtype cfg to create menus.
            if (typeof(tlist[i].xtype) != 'undefined') {
                
                tb[typeof(tlist[i].name)== 'undefined' ? 'add' : 'addField'](Roo.factory(tlist[i]));
                
                
                continue;
            }
            
            var item = tlist[i];
            tb.add(item.title + ":&nbsp;");
            
            
            //optname == used so you can configure the options available..
            var opts = item.opts ? item.opts : false;
            if (item.optname) { // use the b
                opts = Roo.form.HtmlEditor.ToolbarContext.options[item.optname];
           
            }
            
            if (opts) {
                // opts == pulldown..
                tb.addField( new Roo.form.ComboBox({
                    store:   typeof(tbc.stores[i]) != 'undefined' ?  Roo.factory(tbc.stores[i],Roo.data) : new Roo.data.SimpleStore({
                        id : 'val',
                        fields: ['val', 'display'],
                        data : opts  
                    }),
                    name : '-roo-edit-' + tlist[i].name,
                    
                    attrname : tlist[i].name,
                    stylename : item.style ? item.style : false,
                    
                    displayField: item.displayField ? item.displayField : 'val',
                    valueField :  'val',
                    typeAhead: false,
                    mode: typeof(tbc.stores[tlist[i].name]) != 'undefined'  ? 'remote' : 'local',
                    editable : false,
                    triggerAction: 'all',
                    emptyText:'Select',
                    selectOnFocus:true,
                    width: item.width ? item.width  : 130,
                    listeners : {
                        'select': function(c, r, i) {
                             
                            
                            if (c.stylename) {
                                tb.selectedNode.style[c.stylename] =  r.get('val');
                                editorcore.syncValue();
                                return;
                            }
                            if (r === false) {
                                tb.selectedNode.removeAttribute(c.attrname);
                                editorcore.syncValue();
                                return;
                            }
                            tb.selectedNode.setAttribute(c.attrname, r.get('val'));
                            editorcore.syncValue();
                        }
                    }

                }));
                continue;
                    
                 
                /*
                tb.addField( new Roo.form.TextField({
                    name: i,
                    width: 100,
                    //allowBlank:false,
                    value: ''
                }));
                continue;
                */
            }
            tb.addField( new Roo.form.TextField({
                name: '-roo-edit-' + tlist[i].name,
                attrname : tlist[i].name,
                
                width: item.width,
                //allowBlank:true,
                value: '',
                listeners: {
                    'change' : function(f, nv, ov) {
                        
                         
                        tb.selectedNode.setAttribute(f.attrname, nv);
                        editorcore.syncValue();
                    }
                }
            }));
             
        }
        
        var _this = this;
        var show_delete = !block || block.deleteTitle !== false;
        if(nm == 'BODY'){
            show_delete = false;
            tb.addSeparator();
        
            tb.addButton( {
                text: 'Stylesheets',

                listeners : {
                    click : function ()
                    {
                        _this.editor.fireEvent('stylesheetsclick', _this.editor);
                    }
                }
            });
        }
        
        tb.addFill();
        if (show_delete) {
            tb.addButton({
                text: block && block.deleteTitle ? block.deleteTitle  : 'Remove Block or Formating', // remove the tag, and puts the children outside...
        
                listeners : {
                    click : function ()
                    {
                        var sn = tb.selectedNode;
                        if (block) {
                            sn = Roo.htmleditor.Block.factory(tb.selectedNode).removeNode();
                            
                        }
                        if (!sn) {
                            return;
                        }
                        var stn =  sn.childNodes[0] || sn.nextSibling || sn.previousSibling || sn.parentNode;
                        if (sn.hasAttribute('data-block')) {
                            stn =  sn.nextSibling || sn.previousSibling || sn.parentNode;
                            sn.parentNode.removeChild(sn);
                            
                        } else if (sn && sn.tagName != 'BODY') {
                            // remove and keep parents.
                            a = new Roo.htmleditor.FilterKeepChildren({tag : false});
                            a.replaceTag(sn);
                        }
                        
                        
                        var range = editorcore.createRange();
            
                        range.setStart(stn,0);
                        range.setEnd(stn,0); 
                        var selection = editorcore.getSelection();
                        selection.removeAllRanges();
                        selection.addRange(range);
                        
                        
                        //_this.updateToolbar(null, null, pn);
                        _this.updateToolbar(null, null, null);
                        _this.updateFooter(false);
                        
                    }
                }
                
                        
                    
                
            });
        }    
        
        tb.el.on('click', function(e){
            e.preventDefault(); // what does this do?
        });
        tb.el.setVisibilityMode( Roo.Element.DISPLAY);
        tb.el.hide();
        
        // dont need to disable them... as they will get hidden
        return tb;
         
        
    },
    buildFooter : function()
    {
        
        var fel = this.editor.wrap.createChild();
        this.footer = new Roo.Toolbar(fel);
        // toolbar has scrolly on left / right?
        var footDisp= new Roo.Toolbar.Fill();
        var _t = this;
        this.footer.add(
            {
                text : '&lt;',
                xtype: 'Button',
                handler : function() {
                    _t.footDisp.scrollTo('left',0,true)
                }
            }
        );
        this.footer.add( footDisp );
        this.footer.add( 
            {
                text : '&gt;',
                xtype: 'Button',
                handler : function() {
                    // no animation..
                    _t.footDisp.select('span').last().scrollIntoView(_t.footDisp,true);
                }
            }
        );
        var fel = Roo.get(footDisp.el);
        fel.addClass('x-editor-context');
        this.footDispWrap = fel; 
        this.footDispWrap.overflow  = 'hidden';
        
        this.footDisp = fel.createChild();
        this.footDispWrap.on('click', this.onContextClick, this)
        
        
    },
    // when the footer contect changes
    onContextClick : function (ev,dom)
    {
        ev.preventDefault();
        var  cn = dom.className;
        //Roo.log(cn);
        if (!cn.match(/x-ed-loc-/)) {
            return;
        }
        var n = cn.split('-').pop();
        var ans = this.footerEls;
        var sel = ans[n];
        
        this.editorcore.selectNode(sel);
        
        
        this.updateToolbar(null, null, sel);
        
        
    }
    
    
    
    
    
});





/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.form.BasicForm
 * @extends Roo.util.Observable
 * Supplies the functionality to do "actions" on forms and initialize Roo.form.Field types on existing markup.
 * @constructor
 * @param {String/HTMLElement/Roo.Element} el The form element or its id
 * @param {Object} config Configuration options
 */
Roo.form.BasicForm = function(el, config){
    this.allItems = [];
    this.childForms = [];
    Roo.apply(this, config);
    /*
     * The Roo.form.Field items in this form.
     * @type MixedCollection
     */
     
     
    this.items = new Roo.util.MixedCollection(false, function(o){
        return o.id || (o.id = Roo.id());
    });
    this.addEvents({
        /**
         * @event beforeaction
         * Fires before any action is performed. Return false to cancel the action.
         * @param {Form} this
         * @param {Action} action The action to be performed
         */
        beforeaction: true,
        /**
         * @event actionfailed
         * Fires when an action fails.
         * @param {Form} this
         * @param {Action} action The action that failed
         */
        actionfailed : true,
        /**
         * @event actioncomplete
         * Fires when an action is completed.
         * @param {Form} this
         * @param {Action} action The action that completed
         */
        actioncomplete : true
    });
    if(el){
        this.initEl(el);
    }
    Roo.form.BasicForm.superclass.constructor.call(this);
    
    Roo.form.BasicForm.popover.apply();
};

Roo.extend(Roo.form.BasicForm, Roo.util.Observable, {
    /**
     * @cfg {String} method
     * The request method to use (GET or POST) for form actions if one isn't supplied in the action options.
     */
    /**
     * @cfg {DataReader} reader
     * An Roo.data.DataReader (e.g. {@link Roo.data.XmlReader}) to be used to read data when executing "load" actions.
     * This is optional as there is built-in support for processing JSON.
     */
    /**
     * @cfg {DataReader} errorReader
     * An Roo.data.DataReader (e.g. {@link Roo.data.XmlReader}) to be used to read data when reading validation errors on "submit" actions.
     * This is completely optional as there is built-in support for processing JSON.
     */
    /**
     * @cfg {String} url
     * The URL to use for form actions if one isn't supplied in the action options.
     */
    /**
     * @cfg {Boolean} fileUpload
     * Set to true if this form is a file upload.
     */
     
    /**
     * @cfg {Object} baseParams
     * Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.
     */
     /**
     
    /**
     * @cfg {Number} timeout Timeout for form actions in seconds (default is 30 seconds).
     */
    timeout: 30,

    // private
    activeAction : null,

    /**
     * @cfg {Boolean} trackResetOnLoad If set to true, form.reset() resets to the last loaded
     * or setValues() data instead of when the form was first created.
     */
    trackResetOnLoad : false,
    
    
    /**
     * childForms - used for multi-tab forms
     * @type {Array}
     */
    childForms : false,
    
    /**
     * allItems - full list of fields.
     * @type {Array}
     */
    allItems : false,
    
    /**
     * By default wait messages are displayed with Roo.MessageBox.wait. You can target a specific
     * element by passing it or its id or mask the form itself by passing in true.
     * @type Mixed
     */
    waitMsgTarget : false,
    
    /**
     * @type Boolean
     */
    disableMask : false,
    
    /**
     * @cfg {Boolean} errorMask Should the form be masked (and the active element highlighted on error - default false
     */
    errorMask : false,
    
    /**
     * @cfg {Number} maskOffset space around form element to mask if there is an error Default 100
     */
    maskOffset : 100,

    // private
    initEl : function(el){
        this.el = Roo.get(el);
        this.id = this.el.id || Roo.id();
        this.el.on('submit', this.onSubmit, this);
        this.el.addClass('x-form');
    },

    // private
    onSubmit : function(e){
        e.stopEvent();
    },

    /**
     * Returns true if client-side validation on the form is successful.
     * @return Boolean
     */
    isValid : function(){
        var valid = true;
        var target = false;
        this.items.each(function(f){
            if(f.validate()){
                return;
            }
            
            valid = false;
                
            if(!target && f.el.isVisible(true)){
                target = f;
            }
        });
        
        if(this.errorMask && !valid){
            Roo.form.BasicForm.popover.mask(this, target);
        }
        
        return valid;
    },
    /**
     * Returns array of invalid form fields.
     * @return Array
     */
    
    invalidFields : function()
    {
        var ret = [];
        this.items.each(function(f){
            if(f.validate()){
                return;
            }
            ret.push(f);
            
        });
        
        return ret;
    },
    
    
    /**
     * DEPRICATED Returns true if any fields in this form have changed since their original load. 
     * @return Boolean
     */
    isDirty : function(){
        var dirty = false;
        this.items.each(function(f){
           if(f.isDirty()){
               dirty = true;
               return false;
           }
        });
        return dirty;
    },
    
    /**
     * Returns true if any fields in this form have changed since their original load. (New version)
     * @return Boolean
     */
    
    hasChanged : function()
    {
        var dirty = false;
        this.items.each(function(f){
           if(f.hasChanged()){
               dirty = true;
               return false;
           }
        });
        return dirty;
        
    },
    /**
     * Resets all hasChanged to 'false' -
     * The old 'isDirty' used 'original value..' however this breaks reset() and a few other things.
     * So hasChanged storage is only to be used for this purpose
     * @return Boolean
     */
    resetHasChanged : function()
    {
        this.items.each(function(f){
           f.resetHasChanged();
        });
        
    },
    
    
    /**
     * Performs a predefined action (submit or load) or custom actions you define on this form.
     * @param {String} actionName The name of the action type
     * @param {Object} options (optional) The options to pass to the action.  All of the config options listed
     * below are supported by both the submit and load actions unless otherwise noted (custom actions could also
     * accept other config options):
     * <pre>
Property          Type             Description
----------------  ---------------  ----------------------------------------------------------------------------------
url               String           The url for the action (defaults to the form's url)
method            String           The form method to use (defaults to the form's method, or POST if not defined)
params            String/Object    The params to pass (defaults to the form's baseParams, or none if not defined)
clientValidation  Boolean          Applies to submit only.  Pass true to call form.isValid() prior to posting to
                                   validate the form on the client (defaults to false)
     * </pre>
     * @return {BasicForm} this
     */
    doAction : function(action, options){
        if(typeof action == 'string'){
            action = new Roo.form.Action.ACTION_TYPES[action](this, options);
        }
        if(this.fireEvent('beforeaction', this, action) !== false){
            this.beforeAction(action);
            action.run.defer(100, action);
        }
        return this;
    },

    /**
     * Shortcut to do a submit action.
     * @param {Object} options The options to pass to the action (see {@link #doAction} for details)
     * @return {BasicForm} this
     */
    submit : function(options){
        this.doAction('submit', options);
        return this;
    },

    /**
     * Shortcut to do a load action.
     * @param {Object} options The options to pass to the action (see {@link #doAction} for details)
     * @return {BasicForm} this
     */
    load : function(options){
        this.doAction('load', options);
        return this;
    },

    /**
     * Persists the values in this form into the passed Roo.data.Record object in a beginEdit/endEdit block.
     * @param {Record} record The record to edit
     * @return {BasicForm} this
     */
    updateRecord : function(record){
        record.beginEdit();
        var fs = record.fields;
        fs.each(function(f){
            var field = this.findField(f.name);
            if(field){
                record.set(f.name, field.getValue());
            }
        }, this);
        record.endEdit();
        return this;
    },

    /**
     * Loads an Roo.data.Record into this form.
     * @param {Record} record The record to load
     * @return {BasicForm} this
     */
    loadRecord : function(record){
        this.setValues(record.data);
        return this;
    },

    // private
    beforeAction : function(action){
        var o = action.options;
        
        if(!this.disableMask) {
            if(this.waitMsgTarget === true){
                this.el.mask(o.waitMsg || "Sending", 'x-mask-loading');
            }else if(this.waitMsgTarget){
                this.waitMsgTarget = Roo.get(this.waitMsgTarget);
                this.waitMsgTarget.mask(o.waitMsg || "Sending", 'x-mask-loading');
            }else {
                Roo.MessageBox.wait(o.waitMsg || "Sending", o.waitTitle || this.waitTitle || 'Please Wait...');
            }
        }
        
         
    },

    // private
    afterAction : function(action, success){
        this.activeAction = null;
        var o = action.options;
        
        if(!this.disableMask) {
            if(this.waitMsgTarget === true){
                this.el.unmask();
            }else if(this.waitMsgTarget){
                this.waitMsgTarget.unmask();
            }else{
                Roo.MessageBox.updateProgress(1);
                Roo.MessageBox.hide();
            }
        }
        
        if(success){
            if(o.reset){
                this.reset();
            }
            Roo.callback(o.success, o.scope, [this, action]);
            this.fireEvent('actioncomplete', this, action);
            
        }else{
            
            // failure condition..
            // we have a scenario where updates need confirming.
            // eg. if a locking scenario exists..
            // we look for { errors : { needs_confirm : true }} in the response.
            if (
                (typeof(action.result) != 'undefined')  &&
                (typeof(action.result.errors) != 'undefined')  &&
                (typeof(action.result.errors.needs_confirm) != 'undefined')
           ){
                var _t = this;
                Roo.MessageBox.confirm(
                    "Change requires confirmation",
                    action.result.errorMsg,
                    function(r) {
                        if (r != 'yes') {
                            return;
                        }
                        _t.doAction('submit', { params :  { _submit_confirmed : 1 } }  );
                    }
                    
                );
                
                
                
                return;
            }
            
            Roo.callback(o.failure, o.scope, [this, action]);
            // show an error message if no failed handler is set..
            if (!this.hasListener('actionfailed')) {
                Roo.MessageBox.alert("Error",
                    (typeof(action.result) != 'undefined' && typeof(action.result.errorMsg) != 'undefined') ?
                        action.result.errorMsg :
                        "Saving Failed, please check your entries or try again"
                );
            }
            
            this.fireEvent('actionfailed', this, action);
        }
        
    },

    /**
     * Find a Roo.form.Field in this form by id, dataIndex, name or hiddenName
     * @param {String} id The value to search for
     * @return Field
     */
    findField : function(id){
        var field = this.items.get(id);
        if(!field){
            this.items.each(function(f){
                if(f.isFormField && (f.dataIndex == id || f.id == id || f.getName() == id)){
                    field = f;
                    return false;
                }
            });
        }
        return field || null;
    },

    /**
     * Add a secondary form to this one, 
     * Used to provide tabbed forms. One form is primary, with hidden values 
     * which mirror the elements from the other forms.
     * 
     * @param {Roo.form.Form} form to add.
     * 
     */
    addForm : function(form)
    {
       
        if (this.childForms.indexOf(form) > -1) {
            // already added..
            return;
        }
        this.childForms.push(form);
        var n = '';
        Roo.each(form.allItems, function (fe) {
            
            n = typeof(fe.getName) == 'undefined' ? fe.name : fe.getName();
            if (this.findField(n)) { // already added..
                return;
            }
            var add = new Roo.form.Hidden({
                name : n
            });
            add.render(this.el);
            
            this.add( add );
        }, this);
        
    },
    /**
     * Mark fields in this form invalid in bulk.
     * @param {Array/Object} errors Either an array in the form [{id:'fieldId', msg:'The message'},...] or an object hash of {id: msg, id2: msg2}
     * @return {BasicForm} this
     */
    markInvalid : function(errors){
        if(errors instanceof Array){
            for(var i = 0, len = errors.length; i < len; i++){
                var fieldError = errors[i];
                var f = this.findField(fieldError.id);
                if(f){
                    f.markInvalid(fieldError.msg);
                }
            }
        }else{
            var field, id;
            for(id in errors){
                if(typeof errors[id] != 'function' && (field = this.findField(id))){
                    field.markInvalid(errors[id]);
                }
            }
        }
        Roo.each(this.childForms || [], function (f) {
            f.markInvalid(errors);
        });
        
        return this;
    },

    /**
     * Set values for fields in this form in bulk.
     * @param {Array/Object} values Either an array in the form [{id:'fieldId', value:'foo'},...] or an object hash of {id: value, id2: value2}
     * @return {BasicForm} this
     */
    setValues : function(values){
        if(values instanceof Array){ // array of objects
            for(var i = 0, len = values.length; i < len; i++){
                var v = values[i];
                var f = this.findField(v.id);
                if(f){
                    f.setValue(v.value);
                    if(this.trackResetOnLoad){
                        f.originalValue = f.getValue();
                    }
                }
            }
        }else{ // object hash
            var field, id;
            for(id in values){
                if(typeof values[id] != 'function' && (field = this.findField(id))){
                    
                    
                    
                    
                    if (field.setFromData && 
                        field.valueField && 
                        field.displayField &&
                        // combos' with local stores can 
                        // be queried via setValue()
                        // to set their value..
                        (field.store && !field.store.isLocal)
                        ) {
                        // it's a combo
                        var sd = { };
                        sd[field.valueField] = typeof(values[field.hiddenName]) == 'undefined' ? '' : values[field.hiddenName];
                        sd[field.displayField] = typeof(values[field.name]) == 'undefined' ? '' : values[field.name];
                        field.setFromData(sd);
                        
                    } else if (field.inputType && field.inputType == 'radio') {
                        
                        field.setValue(values[id]);
                    } else {
                        field.setValue(values[id]);
                    }
                    
                    
                    if(this.trackResetOnLoad){
                        field.originalValue = field.getValue();
                    }
                }
            }
        }
        this.resetHasChanged();
        
        
        Roo.each(this.childForms || [], function (f) {
            f.setValues(values);
            f.resetHasChanged();
        });
                
        return this;
    },
 
    /**
     * Returns the fields in this form as an object with key/value pairs. If multiple fields exist with the same name
     * they are returned as an array.
     * @param {Boolean} asString (def)
     * @return {Object}
     */
    getValues : function(asString)
    {
        if (this.childForms) {
            // copy values from the child forms
            Roo.each(this.childForms, function (f) {
                this.setValues(f.getFieldValues()); // get the full set of data, as we might be copying comboboxes from external into this one.
            }, this);
        }
        
        // use formdata
        if (typeof(FormData) != 'undefined' && asString !== true) {
            // this relies on a 'recent' version of chrome apparently...
            try {
                var fd = (new FormData(this.el.dom)).entries();
                var ret = {};
                var ent = fd.next();
                while (!ent.done) {
                    ret[ent.value[0]] = ent.value[1]; // not sure how this will handle duplicates..
                    ent = fd.next();
                };
                return ret;
            } catch(e) {
                
            }
            
        }
        
        
        var fs = Roo.lib.Ajax.serializeForm(this.el.dom);
        if(asString === true){
            return fs;
        }
        return Roo.urlDecode(fs);
    },
    
    /**
     * Returns the fields in this form as an object with key/value pairs. 
     * This differs from getValues as it calls getValue on each child item, rather than using dom data.
     * Normally this will not return readOnly data 
     * @param {Boolean} with_readonly return readonly field data.
     * @return {Object}
     */
    getFieldValues : function(with_readonly)
    {
        if (this.childForms) {
            // copy values from the child forms
            // should this call getFieldValues - probably not as we do not currently copy
            // hidden fields when we generate..
            Roo.each(this.childForms, function (f) {
                this.setValues(f.getFieldValues());
            }, this);
        }
        
        var ret = {};
        this.items.each(function(f){
            
            if (f.readOnly && with_readonly !== true) {
                return; // skip read only values. - this is in theory to stop 'old' values being copied over new ones
                        // if a subform contains a copy of them.
                        // if you have subforms with the same editable data, you will need to copy the data back
                        // and forth.
            }
            
            if (!f.getName()) {
                return;
            }
            var v = f.getValue();
            if (f.inputType =='radio') {
                if (typeof(ret[f.getName()]) == 'undefined') {
                    ret[f.getName()] = ''; // empty..
                }
                
                if (!f.el.dom.checked) {
                    return;
                    
                }
                v = f.el.dom.value;
                
            }
            
            // not sure if this supported any more..
            if ((typeof(v) == 'object') && f.getRawValue) {
                v = f.getRawValue() ; // dates..
            }
            // combo boxes where name != hiddenName...
            if (f.name != f.getName()) {
                ret[f.name] = f.getRawValue();
            }
            ret[f.getName()] = v;
        });
        
        return ret;
    },

    /**
     * Clears all invalid messages in this form.
     * @return {BasicForm} this
     */
    clearInvalid : function(){
        this.items.each(function(f){
           f.clearInvalid();
        });
        
        Roo.each(this.childForms || [], function (f) {
            f.clearInvalid();
        });
        
        
        return this;
    },

    /**
     * Resets this form.
     * @return {BasicForm} this
     */
    reset : function(){
        this.items.each(function(f){
            f.reset();
        });
        
        Roo.each(this.childForms || [], function (f) {
            f.reset();
        });
        this.resetHasChanged();
        
        return this;
    },

    /**
     * Add Roo.form components to this form.
     * @param {Field} field1
     * @param {Field} field2 (optional)
     * @param {Field} etc (optional)
     * @return {BasicForm} this
     */
    add : function(){
        this.items.addAll(Array.prototype.slice.call(arguments, 0));
        return this;
    },


    /**
     * Removes a field from the items collection (does NOT remove its markup).
     * @param {Field} field
     * @return {BasicForm} this
     */
    remove : function(field){
        this.items.remove(field);
        return this;
    },

    /**
     * Looks at the fields in this form, checks them for an id attribute,
     * and calls applyTo on the existing dom element with that id.
     * @return {BasicForm} this
     */
    render : function(){
        this.items.each(function(f){
            if(f.isFormField && !f.rendered && document.getElementById(f.id)){ // if the element exists
                f.applyTo(f.id);
            }
        });
        return this;
    },

    /**
     * Calls {@link Ext#apply} for all fields in this form with the passed object.
     * @param {Object} values
     * @return {BasicForm} this
     */
    applyToFields : function(o){
        this.items.each(function(f){
           Roo.apply(f, o);
        });
        return this;
    },

    /**
     * Calls {@link Ext#applyIf} for all field in this form with the passed object.
     * @param {Object} values
     * @return {BasicForm} this
     */
    applyIfToFields : function(o){
        this.items.each(function(f){
           Roo.applyIf(f, o);
        });
        return this;
    }
});

// back compat
Roo.BasicForm = Roo.form.BasicForm;

Roo.apply(Roo.form.BasicForm, {
    
    popover : {
        
        padding : 5,
        
        isApplied : false,
        
        isMasked : false,
        
        form : false,
        
        target : false,
        
        intervalID : false,
        
        maskEl : false,
        
        apply : function()
        {
            if(this.isApplied){
                return;
            }
            
            this.maskEl = {
                top : Roo.DomHelper.append(Roo.get(document.body), { tag: "div", cls:"x-dlg-mask roo-form-top-mask" }, true),
                left : Roo.DomHelper.append(Roo.get(document.body), { tag: "div", cls:"x-dlg-mask roo-form-left-mask" }, true),
                bottom : Roo.DomHelper.append(Roo.get(document.body), { tag: "div", cls:"x-dlg-mask roo-form-bottom-mask" }, true),
                right : Roo.DomHelper.append(Roo.get(document.body), { tag: "div", cls:"x-dlg-mask roo-form-right-mask" }, true)
            };
            
            this.maskEl.top.enableDisplayMode("block");
            this.maskEl.left.enableDisplayMode("block");
            this.maskEl.bottom.enableDisplayMode("block");
            this.maskEl.right.enableDisplayMode("block");
            
            Roo.get(document.body).on('click', function(){
                this.unmask();
            }, this);
            
            Roo.get(document.body).on('touchstart', function(){
                this.unmask();
            }, this);
            
            this.isApplied = true
        },
        
        mask : function(form, target)
        {
            this.form = form;
            
            this.target = target;
            
            if(!this.form.errorMask || !target.el){
                return;
            }
            
            var scrollable = this.target.el.findScrollableParent() || this.target.el.findParent('div.x-layout-active-content', 100, true) || Roo.get(document.body);
            
            var ot = this.target.el.calcOffsetsTo(scrollable);
            
            var scrollTo = ot[1] - this.form.maskOffset;
            
            scrollTo = Math.min(scrollTo, scrollable.dom.scrollHeight);
            
            scrollable.scrollTo('top', scrollTo);
            
            var el = this.target.wrap || this.target.el;
            
            var box = el.getBox();
            
            this.maskEl.top.setStyle('position', 'absolute');
            this.maskEl.top.setStyle('z-index', 10000);
            this.maskEl.top.setSize(Roo.lib.Dom.getDocumentWidth(), box.y - this.padding);
            this.maskEl.top.setLeft(0);
            this.maskEl.top.setTop(0);
            this.maskEl.top.show();
            
            this.maskEl.left.setStyle('position', 'absolute');
            this.maskEl.left.setStyle('z-index', 10000);
            this.maskEl.left.setSize(box.x - this.padding, box.height + this.padding * 2);
            this.maskEl.left.setLeft(0);
            this.maskEl.left.setTop(box.y - this.padding);
            this.maskEl.left.show();

            this.maskEl.bottom.setStyle('position', 'absolute');
            this.maskEl.bottom.setStyle('z-index', 10000);
            this.maskEl.bottom.setSize(Roo.lib.Dom.getDocumentWidth(), Roo.lib.Dom.getDocumentHeight() - box.bottom - this.padding);
            this.maskEl.bottom.setLeft(0);
            this.maskEl.bottom.setTop(box.bottom + this.padding);
            this.maskEl.bottom.show();

            this.maskEl.right.setStyle('position', 'absolute');
            this.maskEl.right.setStyle('z-index', 10000);
            this.maskEl.right.setSize(Roo.lib.Dom.getDocumentWidth() - box.right - this.padding, box.height + this.padding * 2);
            this.maskEl.right.setLeft(box.right + this.padding);
            this.maskEl.right.setTop(box.y - this.padding);
            this.maskEl.right.show();

            this.intervalID = window.setInterval(function() {
                Roo.form.BasicForm.popover.unmask();
            }, 10000);

            window.onwheel = function(){ return false;};
            
            (function(){ this.isMasked = true; }).defer(500, this);
            
        },
        
        unmask : function()
        {
            if(!this.isApplied || !this.isMasked || !this.form || !this.target || !this.form.errorMask){
                return;
            }
            
            this.maskEl.top.setStyle('position', 'absolute');
            this.maskEl.top.setSize(0, 0).setXY([0, 0]);
            this.maskEl.top.hide();

            this.maskEl.left.setStyle('position', 'absolute');
            this.maskEl.left.setSize(0, 0).setXY([0, 0]);
            this.maskEl.left.hide();

            this.maskEl.bottom.setStyle('position', 'absolute');
            this.maskEl.bottom.setSize(0, 0).setXY([0, 0]);
            this.maskEl.bottom.hide();

            this.maskEl.right.setStyle('position', 'absolute');
            this.maskEl.right.setSize(0, 0).setXY([0, 0]);
            this.maskEl.right.hide();
            
            window.onwheel = function(){ return true;};
            
            if(this.intervalID){
                window.clearInterval(this.intervalID);
                this.intervalID = false;
            }
            
            this.isMasked = false;
            
        }
        
    }
    
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.form.Form
 * @extends Roo.form.BasicForm
 * @children Roo.form.Column Roo.form.FieldSet Roo.form.Row Roo.form.Field Roo.Button Roo.form.TextItem
 * Adds the ability to dynamically render forms with JavaScript to {@link Roo.form.BasicForm}.
 * @constructor
 * @param {Object} config Configuration options
 */
Roo.form.Form = function(config){
    var xitems =  [];
    if (config.items) {
        xitems = config.items;
        delete config.items;
    }
   
    
    Roo.form.Form.superclass.constructor.call(this, null, config);
    this.url = this.url || this.action;
    if(!this.root){
        this.root = new Roo.form.Layout(Roo.applyIf({
            id: Roo.id()
        }, config));
    }
    this.active = this.root;
    /**
     * Array of all the buttons that have been added to this form via {@link addButton}
     * @type Array
     */
    this.buttons = [];
    this.allItems = [];
    this.addEvents({
        /**
         * @event clientvalidation
         * If the monitorValid config option is true, this event fires repetitively to notify of valid state
         * @param {Form} this
         * @param {Boolean} valid true if the form has passed client-side validation
         */
        clientvalidation: true,
        /**
         * @event rendered
         * Fires when the form is rendered
         * @param {Roo.form.Form} form
         */
        rendered : true
    });
    
    if (this.progressUrl) {
            // push a hidden field onto the list of fields..
            this.addxtype( {
                    xns: Roo.form, 
                    xtype : 'Hidden', 
                    name : 'UPLOAD_IDENTIFIER' 
            });
        }
        
    
    Roo.each(xitems, this.addxtype, this);
    
};

Roo.extend(Roo.form.Form, Roo.form.BasicForm, {
     /**
     * @cfg {Roo.Button} buttons[] buttons at bottom of form
     */
    
    /**
     * @cfg {Number} labelWidth The width of labels. This property cascades to child containers.
     */
    /**
     * @cfg {String} itemCls A css class to apply to the x-form-item of fields. This property cascades to child containers.
     */
    /**
     * @cfg {String} buttonAlign (left|center|right)  Valid values are "left," "center" and "right" (defaults to "center")
     */
    buttonAlign:'center',

    /**
     * @cfg {Number} minButtonWidth Minimum width of all buttons in pixels (defaults to 75)
     */
    minButtonWidth:75,

    /**
     * @cfg {String} labelAlign (left|top|right) Valid values are "left," "top" and "right" (defaults to "left").
     * This property cascades to child containers if not set.
     */
    labelAlign:'left',

    /**
     * @cfg {Boolean} monitorValid If true the form monitors its valid state <b>client-side</b> and
     * fires a looping event with that state. This is required to bind buttons to the valid
     * state using the config value formBind:true on the button.
     */
    monitorValid : false,

    /**
     * @cfg {Number} monitorPoll The milliseconds to poll valid state, ignored if monitorValid is not true (defaults to 200)
     */
    monitorPoll : 200,
    
    /**
     * @cfg {String} progressUrl - Url to return progress data 
     */
    
    progressUrl : false,
    /**
     * @cfg {boolean|FormData} formData - true to use new 'FormData' post, or set to a new FormData({dom form}) Object, if
     * sending a formdata with extra parameters - eg uploaded elements.
     */
    
    formData : false,
    
    /**
     * Opens a new {@link Roo.form.Column} container in the layout stack. If fields are passed after the config, the
     * fields are added and the column is closed. If no fields are passed the column remains open
     * until end() is called.
     * @param {Object} config The config to pass to the column
     * @param {Field} field1 (optional)
     * @param {Field} field2 (optional)
     * @param {Field} etc (optional)
     * @return Column The column container object
     */
    column : function(c){
        var col = new Roo.form.Column(c);
        this.start(col);
        if(arguments.length > 1){ // duplicate code required because of Opera
            this.add.apply(this, Array.prototype.slice.call(arguments, 1));
            this.end();
        }
        return col;
    },

    /**
     * Opens a new {@link Roo.form.FieldSet} container in the layout stack. If fields are passed after the config, the
     * fields are added and the fieldset is closed. If no fields are passed the fieldset remains open
     * until end() is called.
     * @param {Object} config The config to pass to the fieldset
     * @param {Field} field1 (optional)
     * @param {Field} field2 (optional)
     * @param {Field} etc (optional)
     * @return FieldSet The fieldset container object
     */
    fieldset : function(c){
        var fs = new Roo.form.FieldSet(c);
        this.start(fs);
        if(arguments.length > 1){ // duplicate code required because of Opera
            this.add.apply(this, Array.prototype.slice.call(arguments, 1));
            this.end();
        }
        return fs;
    },

    /**
     * Opens a new {@link Roo.form.Layout} container in the layout stack. If fields are passed after the config, the
     * fields are added and the container is closed. If no fields are passed the container remains open
     * until end() is called.
     * @param {Object} config The config to pass to the Layout
     * @param {Field} field1 (optional)
     * @param {Field} field2 (optional)
     * @param {Field} etc (optional)
     * @return Layout The container object
     */
    container : function(c){
        var l = new Roo.form.Layout(c);
        this.start(l);
        if(arguments.length > 1){ // duplicate code required because of Opera
            this.add.apply(this, Array.prototype.slice.call(arguments, 1));
            this.end();
        }
        return l;
    },

    /**
     * Opens the passed container in the layout stack. The container can be any {@link Roo.form.Layout} or subclass.
     * @param {Object} container A Roo.form.Layout or subclass of Layout
     * @return {Form} this
     */
    start : function(c){
        // cascade label info
        Roo.applyIf(c, {'labelAlign': this.active.labelAlign, 'labelWidth': this.active.labelWidth, 'itemCls': this.active.itemCls});
        this.active.stack.push(c);
        c.ownerCt = this.active;
        this.active = c;
        return this;
    },

    /**
     * Closes the current open container
     * @return {Form} this
     */
    end : function(){
        if(this.active == this.root){
            return this;
        }
        this.active = this.active.ownerCt;
        return this;
    },

    /**
     * Add Roo.form components to the current open container (e.g. column, fieldset, etc.).  Fields added via this method
     * can also be passed with an additional property of fieldLabel, which if supplied, will provide the text to display
     * as the label of the field.
     * @param {Field} field1
     * @param {Field} field2 (optional)
     * @param {Field} etc. (optional)
     * @return {Form} this
     */
    add : function(){
        this.active.stack.push.apply(this.active.stack, arguments);
        this.allItems.push.apply(this.allItems,arguments);
        var r = [];
        for(var i = 0, a = arguments, len = a.length; i < len; i++) {
            if(a[i].isFormField){
                r.push(a[i]);
            }
        }
        if(r.length > 0){
            Roo.form.Form.superclass.add.apply(this, r);
        }
        return this;
    },
    

    
    
    
     /**
     * Find any element that has been added to a form, using it's ID or name
     * This can include framesets, columns etc. along with regular fields..
     * @param {String} id - id or name to find.
     
     * @return {Element} e - or false if nothing found.
     */
    findbyId : function(id)
    {
        var ret = false;
        if (!id) {
            return ret;
        }
        Roo.each(this.allItems, function(f){
            if (f.id == id || f.name == id ){
                ret = f;
                return false;
            }
        });
        return ret;
    },

    
    
    /**
     * Render this form into the passed container. This should only be called once!
     * @param {String/HTMLElement/Element} container The element this component should be rendered into
     * @return {Form} this
     */
    render : function(ct)
    {
        
        
        
        ct = Roo.get(ct);
        var o = this.autoCreate || {
            tag: 'form',
            method : this.method || 'POST',
            id : this.id || Roo.id()
        };
        this.initEl(ct.createChild(o));

        this.root.render(this.el);
        
       
             
        this.items.each(function(f){
            f.render('x-form-el-'+f.id);
        });

        if(this.buttons.length > 0){
            // tables are required to maintain order and for correct IE layout
            var tb = this.el.createChild({cls:'x-form-btns-ct', cn: {
                cls:"x-form-btns x-form-btns-"+this.buttonAlign,
                html:'<table cellspacing="0"><tbody><tr></tr></tbody></table><div class="x-clear"></div>'
            }}, null, true);
            var tr = tb.getElementsByTagName('tr')[0];
            for(var i = 0, len = this.buttons.length; i < len; i++) {
                var b = this.buttons[i];
                var td = document.createElement('td');
                td.className = 'x-form-btn-td';
                b.render(tr.appendChild(td));
            }
        }
        if(this.monitorValid){ // initialize after render
            this.startMonitoring();
        }
        this.fireEvent('rendered', this);
        return this;
    },

    /**
     * Adds a button to the footer of the form - this <b>must</b> be called before the form is rendered.
     * @param {String/Object} config A string becomes the button text, an object can either be a Button config
     * object or a valid Roo.DomHelper element config
     * @param {Function} handler The function called when the button is clicked
     * @param {Object} scope (optional) The scope of the handler function
     * @return {Roo.Button}
     */
    addButton : function(config, handler, scope){
        var bc = {
            handler: handler,
            scope: scope,
            minWidth: this.minButtonWidth,
            hideParent:true
        };
        if(typeof config == "string"){
            bc.text = config;
        }else{
            Roo.apply(bc, config);
        }
        var btn = new Roo.Button(null, bc);
        this.buttons.push(btn);
        return btn;
    },

     /**
     * Adds a series of form elements (using the xtype property as the factory method.
     * Valid xtypes are:  TextField, TextArea .... Button, Layout, FieldSet, Column, (and 'end' to close a block)
     * @param {Object} config 
     */
    
    addxtype : function()
    {
        var ar = Array.prototype.slice.call(arguments, 0);
        var ret = false;
        for(var i = 0; i < ar.length; i++) {
            if (!ar[i]) {
                continue; // skip -- if this happends something invalid got sent, we 
                // should ignore it, as basically that interface element will not show up
                // and that should be pretty obvious!!
            }
            
            if (Roo.form[ar[i].xtype]) {
                ar[i].form = this;
                var fe = Roo.factory(ar[i], Roo.form);
                if (!ret) {
                    ret = fe;
                }
                fe.form = this;
                if (fe.store) {
                    fe.store.form = this;
                }
                if (fe.isLayout) {  
                         
                    this.start(fe);
                    this.allItems.push(fe);
                    if (fe.items && fe.addxtype) {
                        fe.addxtype.apply(fe, fe.items);
                        delete fe.items;
                    }
                     this.end();
                    continue;
                }
                
                
                 
                this.add(fe);
              //  console.log('adding ' + ar[i].xtype);
            }
            if (ar[i].xtype == 'Button') {  
                //console.log('adding button');
                //console.log(ar[i]);
                this.addButton(ar[i]);
                this.allItems.push(fe);
                continue;
            }
            
            if (ar[i].xtype == 'end') { // so we can add fieldsets... / layout etc.
                alert('end is not supported on xtype any more, use items');
            //    this.end();
            //    //console.log('adding end');
            }
            
        }
        return ret;
    },
    
    /**
     * Starts monitoring of the valid state of this form. Usually this is done by passing the config
     * option "monitorValid"
     */
    startMonitoring : function(){
        if(!this.bound){
            this.bound = true;
            Roo.TaskMgr.start({
                run : this.bindHandler,
                interval : this.monitorPoll || 200,
                scope: this
            });
        }
    },

    /**
     * Stops monitoring of the valid state of this form
     */
    stopMonitoring : function(){
        this.bound = false;
    },

    // private
    bindHandler : function(){
        if(!this.bound){
            return false; // stops binding
        }
        var valid = true;
        this.items.each(function(f){
            if(!f.isValid(true)){
                valid = false;
                return false;
            }
        });
        for(var i = 0, len = this.buttons.length; i < len; i++){
            var btn = this.buttons[i];
            if(btn.formBind === true && btn.disabled === valid){
                btn.setDisabled(!valid);
            }
        }
        this.fireEvent('clientvalidation', this, valid);
    }
    
    
    
    
    
    
    
    
});


// back compat
Roo.Form = Roo.form.Form;
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

// as we use this in bootstrap.
Roo.namespace('Roo.form');
 /**
 * @class Roo.form.Action
 * Internal Class used to handle form actions
 * @constructor
 * @param {Roo.form.BasicForm} el The form element or its id
 * @param {Object} config Configuration options
 */

 
 
// define the action interface
Roo.form.Action = function(form, options){
    this.form = form;
    this.options = options || {};
};
/**
 * Client Validation Failed
 * @const 
 */
Roo.form.Action.CLIENT_INVALID = 'client';
/**
 * Server Validation Failed
 * @const 
 */
Roo.form.Action.SERVER_INVALID = 'server';
 /**
 * Connect to Server Failed
 * @const 
 */
Roo.form.Action.CONNECT_FAILURE = 'connect';
/**
 * Reading Data from Server Failed
 * @const 
 */
Roo.form.Action.LOAD_FAILURE = 'load';

Roo.form.Action.prototype = {
    type : 'default',
    failureType : undefined,
    response : undefined,
    result : undefined,

    // interface method
    run : function(options){

    },

    // interface method
    success : function(response){

    },

    // interface method
    handleResponse : function(response){

    },

    // default connection failure
    failure : function(response){
        
        this.response = response;
        this.failureType = Roo.form.Action.CONNECT_FAILURE;
        this.form.afterAction(this, false);
    },

    processResponse : function(response){
        this.response = response;
        if(!response.responseText){
            return true;
        }
        this.result = this.handleResponse(response);
        return this.result;
    },

    // utility functions used internally
    getUrl : function(appendParams){
        var url = this.options.url || this.form.url || this.form.el.dom.action;
        if(appendParams){
            var p = this.getParams();
            if(p){
                url += (url.indexOf('?') != -1 ? '&' : '?') + p;
            }
        }
        return url;
    },

    getMethod : function(){
        return (this.options.method || this.form.method || this.form.el.dom.method || 'POST').toUpperCase();
    },

    getParams : function(){
        var bp = this.form.baseParams;
        var p = this.options.params;
        if(p){
            if(typeof p == "object"){
                p = Roo.urlEncode(Roo.applyIf(p, bp));
            }else if(typeof p == 'string' && bp){
                p += '&' + Roo.urlEncode(bp);
            }
        }else if(bp){
            p = Roo.urlEncode(bp);
        }
        return p;
    },

    createCallback : function(){
        return {
            success: this.success,
            failure: this.failure,
            scope: this,
            timeout: (this.form.timeout*1000),
            upload: this.form.fileUpload ? this.success : undefined
        };
    }
};

Roo.form.Action.Submit = function(form, options){
    Roo.form.Action.Submit.superclass.constructor.call(this, form, options);
};

Roo.extend(Roo.form.Action.Submit, Roo.form.Action, {
    type : 'submit',

    haveProgress : false,
    uploadComplete : false,
    
    // uploadProgress indicator.
    uploadProgress : function()
    {
        if (!this.form.progressUrl) {
            return;
        }
        
        if (!this.haveProgress) {
            Roo.MessageBox.progress("Uploading", "Uploading");
        }
        if (this.uploadComplete) {
           Roo.MessageBox.hide();
           return;
        }
        
        this.haveProgress = true;
   
        var uid = this.form.findField('UPLOAD_IDENTIFIER').getValue();
        
        var c = new Roo.data.Connection();
        c.request({
            url : this.form.progressUrl,
            params: {
                id : uid
            },
            method: 'GET',
            success : function(req){
               //console.log(data);
                var rdata = false;
                var edata;
                try  {
                   rdata = Roo.decode(req.responseText)
                } catch (e) {
                    Roo.log("Invalid data from server..");
                    Roo.log(edata);
                    return;
                }
                if (!rdata || !rdata.success) {
                    Roo.log(rdata);
                    Roo.MessageBox.alert(Roo.encode(rdata));
                    return;
                }
                var data = rdata.data;
                
                if (this.uploadComplete) {
                   Roo.MessageBox.hide();
                   return;
                }
                   
                if (data){
                    Roo.MessageBox.updateProgress(data.bytes_uploaded/data.bytes_total,
                       Math.floor((data.bytes_total - data.bytes_uploaded)/1000) + 'k remaining'
                    );
                }
                this.uploadProgress.defer(2000,this);
            },
       
            failure: function(data) {
                Roo.log('progress url failed ');
                Roo.log(data);
            },
            scope : this
        });
           
    },
    
    
    run : function()
    {
        // run get Values on the form, so it syncs any secondary forms.
        this.form.getValues();
        
        var o = this.options;
        var method = this.getMethod();
        var isPost = method == 'POST';
        if(o.clientValidation === false || this.form.isValid()){
            
            if (this.form.progressUrl) {
                this.form.findField('UPLOAD_IDENTIFIER').setValue(
                    (new Date() * 1) + '' + Math.random());
                    
            } 
            
            
            Roo.Ajax.request(Roo.apply(this.createCallback(), {
                form:this.form.el.dom,
                url:this.getUrl(!isPost),
                method: method,
                params:isPost ? this.getParams() : null,
                isUpload: this.form.fileUpload,
                formData : this.form.formData
            }));
            
            this.uploadProgress();

        }else if (o.clientValidation !== false){ // client validation failed
            this.failureType = Roo.form.Action.CLIENT_INVALID;
            this.form.afterAction(this, false);
        }
    },

    success : function(response)
    {
        this.uploadComplete= true;
        if (this.haveProgress) {
            Roo.MessageBox.hide();
        }
        
        
        var result = this.processResponse(response);
        if(result === true || result.success){
            this.form.afterAction(this, true);
            return;
        }
        if(result.errors){
            this.form.markInvalid(result.errors);
            this.failureType = Roo.form.Action.SERVER_INVALID;
        }
        this.form.afterAction(this, false);
    },
    failure : function(response)
    {
        this.uploadComplete= true;
        if (this.haveProgress) {
            Roo.MessageBox.hide();
        }
        
        this.response = response;
        this.failureType = Roo.form.Action.CONNECT_FAILURE;
        this.form.afterAction(this, false);
    },
    
    handleResponse : function(response){
        if(this.form.errorReader){
            var rs = this.form.errorReader.read(response);
            var errors = [];
            if(rs.records){
                for(var i = 0, len = rs.records.length; i < len; i++) {
                    var r = rs.records[i];
                    errors[i] = r.data;
                }
            }
            if(errors.length < 1){
                errors = null;
            }
            return {
                success : rs.success,
                errors : errors
            };
        }
        var ret = false;
        try {
            var rt = response.responseText;
            if (rt.match(/^\<!--\[CDATA\[/)) {
                rt = rt.replace(/^\<!--\[CDATA\[/,'');
                rt = rt.replace(/\]\]--\>$/,'');
            }
            
            ret = Roo.decode(rt);
        } catch (e) {
            ret = {
                success: false,
                errorMsg: "Failed to read server message: " + (response ? response.responseText : ' - no message'),
                errors : []
            };
        }
        return ret;
        
    }
});


Roo.form.Action.Load = function(form, options){
    Roo.form.Action.Load.superclass.constructor.call(this, form, options);
    this.reader = this.form.reader;
};

Roo.extend(Roo.form.Action.Load, Roo.form.Action, {
    type : 'load',

    run : function(){
        
        Roo.Ajax.request(Roo.apply(
                this.createCallback(), {
                    method:this.getMethod(),
                    url:this.getUrl(false),
                    params:this.getParams()
        }));
    },

    success : function(response){
        
        var result = this.processResponse(response);
        if(result === true || !result.success || !result.data){
            this.failureType = Roo.form.Action.LOAD_FAILURE;
            this.form.afterAction(this, false);
            return;
        }
        this.form.clearInvalid();
        this.form.setValues(result.data);
        this.form.afterAction(this, true);
    },

    handleResponse : function(response){
        if(this.form.reader){
            var rs = this.form.reader.read(response);
            var data = rs.records && rs.records[0] ? rs.records[0].data : null;
            return {
                success : rs.success,
                data : data
            };
        }
        return Roo.decode(response.responseText);
    }
});

Roo.form.Action.ACTION_TYPES = {
    'load' : Roo.form.Action.Load,
    'submit' : Roo.form.Action.Submit
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.form.Layout
 * @extends Roo.Component
 * @children Roo.form.Column Roo.form.Row Roo.form.Field Roo.Button Roo.form.TextItem Roo.form.FieldSet
 * Creates a container for layout and rendering of fields in an {@link Roo.form.Form}.
 * @constructor
 * @param {Object} config Configuration options
 */
Roo.form.Layout = function(config){
    var xitems = [];
    if (config.items) {
        xitems = config.items;
        delete config.items;
    }
    Roo.form.Layout.superclass.constructor.call(this, config);
    this.stack = [];
    Roo.each(xitems, this.addxtype, this);
     
};

Roo.extend(Roo.form.Layout, Roo.Component, {
    /**
     * @cfg {String/Object} autoCreate
     * A DomHelper element spec used to autocreate the layout (defaults to {tag: 'div', cls: 'x-form-ct'})
     */
    /**
     * @cfg {String/Object/Function} style
     * A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or
     * a function which returns such a specification.
     */
    /**
     * @cfg {String} labelAlign (left|top|right)
     * Valid values are "left," "top" and "right" (defaults to "left")
     */
    /**
     * @cfg {Number} labelWidth
     * Fixed width in pixels of all field labels (defaults to undefined)
     */
    /**
     * @cfg {Boolean} clear
     * True to add a clearing element at the end of this layout, equivalent to CSS clear: both (defaults to true)
     */
    clear : true,
    /**
     * @cfg {String} labelSeparator
     * The separator to use after field labels (defaults to ':')
     */
    labelSeparator : ':',
    /**
     * @cfg {Boolean} hideLabels
     * True to suppress the display of field labels in this layout (defaults to false)
     */
    hideLabels : false,

    // private
    defaultAutoCreate : {tag: 'div', cls: 'x-form-ct'},
    
    isLayout : true,
    
    // private
    onRender : function(ct, position){
        if(this.el){ // from markup
            this.el = Roo.get(this.el);
        }else {  // generate
            var cfg = this.getAutoCreate();
            this.el = ct.createChild(cfg, position);
        }
        if(this.style){
            this.el.applyStyles(this.style);
        }
        if(this.labelAlign){
            this.el.addClass('x-form-label-'+this.labelAlign);
        }
        if(this.hideLabels){
            this.labelStyle = "display:none";
            this.elementStyle = "padding-left:0;";
        }else{
            if(typeof this.labelWidth == 'number'){
                this.labelStyle = "width:"+this.labelWidth+"px;";
                this.elementStyle = "padding-left:"+((this.labelWidth+(typeof this.labelPad == 'number' ? this.labelPad : 5))+'px')+";";
            }
            if(this.labelAlign == 'top'){
                this.labelStyle = "width:auto;";
                this.elementStyle = "padding-left:0;";
            }
        }
        var stack = this.stack;
        var slen = stack.length;
        if(slen > 0){
            if(!this.fieldTpl){
                var t = new Roo.Template(
                    '<div class="x-form-item {5}">',
                        '<label for="{0}" style="{2}">{1}{4}</label>',
                        '<div class="x-form-element" id="x-form-el-{0}" style="{3}">',
                        '</div>',
                    '</div><div class="x-form-clear-left"></div>'
                );
                t.disableFormats = true;
                t.compile();
                Roo.form.Layout.prototype.fieldTpl = t;
            }
            for(var i = 0; i < slen; i++) {
                if(stack[i].isFormField){
                    this.renderField(stack[i]);
                }else{
                    this.renderComponent(stack[i]);
                }
            }
        }
        if(this.clear){
            this.el.createChild({cls:'x-form-clear'});
        }
    },

    // private
    renderField : function(f){
        f.fieldEl = Roo.get(this.fieldTpl.append(this.el, [
               f.id, //0
               f.fieldLabel, //1
               f.labelStyle||this.labelStyle||'', //2
               this.elementStyle||'', //3
               typeof f.labelSeparator == 'undefined' ? this.labelSeparator : f.labelSeparator, //4
               f.itemCls||this.itemCls||''  //5
       ], true).getPrevSibling());
    },

    // private
    renderComponent : function(c){
        c.render(c.isLayout ? this.el : this.el.createChild());    
    },
    /**
     * Adds a object form elements (using the xtype property as the factory method.)
     * Valid xtypes are:  TextField, TextArea .... Button, Layout, FieldSet, Column
     * @param {Object} config 
     */
    addxtype : function(o)
    {
        // create the lement.
        o.form = this.form;
        var fe = Roo.factory(o, Roo.form);
        this.form.allItems.push(fe);
        this.stack.push(fe);
        
        if (fe.isFormField) {
            this.form.items.add(fe);
        }
         
        return fe;
    }
});


/**
 * @class Roo.form.Column
 * @extends Roo.form.Layout
 * @children Roo.form.Row Roo.form.Field Roo.Button Roo.form.TextItem Roo.form.FieldSet
 * Creates a column container for layout and rendering of fields in an {@link Roo.form.Form}.
 * @constructor
 * @param {Object} config Configuration options
 */
Roo.form.Column = function(config){
    Roo.form.Column.superclass.constructor.call(this, config);
};

Roo.extend(Roo.form.Column, Roo.form.Layout, {
    /**
     * @cfg {Number/String} width
     * The fixed width of the column in pixels or CSS value (defaults to "auto")
     */
    /**
     * @cfg {String/Object} autoCreate
     * A DomHelper element spec used to autocreate the column (defaults to {tag: 'div', cls: 'x-form-ct x-form-column'})
     */

    // private
    defaultAutoCreate : {tag: 'div', cls: 'x-form-ct x-form-column'},

    // private
    onRender : function(ct, position){
        Roo.form.Column.superclass.onRender.call(this, ct, position);
        if(this.width){
            this.el.setWidth(this.width);
        }
    }
});

/**
 * @class Roo.form.Row
 * @extends Roo.form.Layout
 * @children Roo.form.Column Roo.form.Row Roo.form.Field Roo.Button Roo.form.TextItem Roo.form.FieldSet
 * Creates a row container for layout and rendering of fields in an {@link Roo.form.Form}.
 * @constructor
 * @param {Object} config Configuration options
 */

 
Roo.form.Row = function(config){
    Roo.form.Row.superclass.constructor.call(this, config);
};
 
Roo.extend(Roo.form.Row, Roo.form.Layout, {
      /**
     * @cfg {Number/String} width
     * The fixed width of the column in pixels or CSS value (defaults to "auto")
     */
    /**
     * @cfg {Number/String} height
     * The fixed height of the column in pixels or CSS value (defaults to "auto")
     */
    defaultAutoCreate : {tag: 'div', cls: 'x-form-ct x-form-row'},
    
    padWidth : 20,
    // private
    onRender : function(ct, position){
        //console.log('row render');
        if(!this.rowTpl){
            var t = new Roo.Template(
                '<div class="x-form-item {5}" style="float:left;width:{6}px">',
                    '<label for="{0}" style="{2}">{1}{4}</label>',
                    '<div class="x-form-element" id="x-form-el-{0}" style="{3}">',
                    '</div>',
                '</div>'
            );
            t.disableFormats = true;
            t.compile();
            Roo.form.Layout.prototype.rowTpl = t;
        }
        this.fieldTpl = this.rowTpl;
        
        //console.log('lw' + this.labelWidth +', la:' + this.labelAlign);
        var labelWidth = 100;
        
        if ((this.labelAlign != 'top')) {
            if (typeof this.labelWidth == 'number') {
                labelWidth = this.labelWidth
            }
            this.padWidth =  20 + labelWidth;
            
        }
        
        Roo.form.Column.superclass.onRender.call(this, ct, position);
        if(this.width){
            this.el.setWidth(this.width);
        }
        if(this.height){
            this.el.setHeight(this.height);
        }
    },
    
    // private
    renderField : function(f){
        f.fieldEl = this.fieldTpl.append(this.el, [
               f.id, f.fieldLabel,
               f.labelStyle||this.labelStyle||'',
               this.elementStyle||'',
               typeof f.labelSeparator == 'undefined' ? this.labelSeparator : f.labelSeparator,
               f.itemCls||this.itemCls||'',
               f.width ? f.width + this.padWidth : 160 + this.padWidth
       ],true);
    }
});
 

/**
 * @class Roo.form.FieldSet
 * @extends Roo.form.Layout
 * @children Roo.form.Column Roo.form.Row Roo.form.Field Roo.Button Roo.form.TextItem
 * Creates a fieldset container for layout and rendering of fields in an {@link Roo.form.Form}.
 * @constructor
 * @param {Object} config Configuration options
 */
Roo.form.FieldSet = function(config){
    Roo.form.FieldSet.superclass.constructor.call(this, config);
};

Roo.extend(Roo.form.FieldSet, Roo.form.Layout, {
    /**
     * @cfg {String} legend
     * The text to display as the legend for the FieldSet (defaults to '')
     */
    /**
     * @cfg {String/Object} autoCreate
     * A DomHelper element spec used to autocreate the fieldset (defaults to {tag: 'fieldset', cn: {tag:'legend'}})
     */

    // private
    defaultAutoCreate : {tag: 'fieldset', cn: {tag:'legend'}},

    // private
    onRender : function(ct, position){
        Roo.form.FieldSet.superclass.onRender.call(this, ct, position);
        if(this.legend){
            this.setLegend(this.legend);
        }
    },

    // private
    setLegend : function(text){
        if(this.rendered){
            this.el.child('legend').update(text);
        }
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.form.VTypes
 * Overridable validation definitions. The validations provided are basic and intended to be easily customizable and extended.
 * @static
 */
Roo.form.VTypes = function(){
    // closure these in so they are only created once.
    var alpha = /^[a-zA-Z_]+$/;
    var alphanum = /^[a-zA-Z0-9_]+$/;
    var email = /^([\w'-]+)(\.[\w'-]+)*@([\w-]+\.){1,5}([A-Za-z]){2,24}$/;
    var url = /^(((https?)|(ftp)):\/\/([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i;
    var urlWeb = /^((https?):\/\/([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i;

    // All these messages and functions are configurable
    return {
        /**
         * The function used to validate email addresses
         * @param {String} value The email address
         */
        email : function(v){
            return email.test(v);
        },
        /**
         * The error text to display when the email validation function returns false
         * @type String
         */
        emailText : 'This field should be an e-mail address in the format "user@domain.com"',
        /**
         * The keystroke filter mask to be applied on email input
         * @type RegExp
         */
        emailMask : /[a-z0-9_\.\-@]/i,

        /**
         * The function used to validate URLs
         * @param {String} value The URL
         */
        url : function(v){
            return url.test(v);
        },
        /**
         * The funciton used to validate URLs (only allow schemes 'https' and 'http')
         * @param {String} v The URL
         */
        urlWeb : function(v) {
            return urlWeb.test(v);
        },
        /**
         * The error text to display when the url validation function returns false
         * @type String
         */
        urlText : 'This field should be a URL in the format "http:/'+'/www.domain.com"',
        
        /**
         * The function used to validate alpha values
         * @param {String} value The value
         */
        alpha : function(v){
            return alpha.test(v);
        },
        /**
         * The error text to display when the alpha validation function returns false
         * @type String
         */
        alphaText : 'This field should only contain letters and _',
        /**
         * The keystroke filter mask to be applied on alpha input
         * @type RegExp
         */
        alphaMask : /[a-z_]/i,

        /**
         * The function used to validate alphanumeric values
         * @param {String} value The value
         */
        alphanum : function(v){
            return alphanum.test(v);
        },
        /**
         * The error text to display when the alphanumeric validation function returns false
         * @type String
         */
        alphanumText : 'This field should only contain letters, numbers and _',
        /**
         * The keystroke filter mask to be applied on alphanumeric input
         * @type RegExp
         */
        alphanumMask : /[a-z0-9_]/i
    };
}();//<script type="text/javascript">

/**
 * @class Roo.form.FCKeditor
 * @extends Roo.form.TextArea
 * Wrapper around the FCKEditor http://www.fckeditor.net
 * @constructor
 * Creates a new FCKeditor
 * @param {Object} config Configuration options
 */
Roo.form.FCKeditor = function(config){
    Roo.form.FCKeditor.superclass.constructor.call(this, config);
    this.addEvents({
         /**
         * @event editorinit
         * Fired when the editor is initialized - you can add extra handlers here..
         * @param {FCKeditor} this
         * @param {Object} the FCK object.
         */
        editorinit : true
    });
    
    
};
Roo.form.FCKeditor.editors = { };
Roo.extend(Roo.form.FCKeditor, Roo.form.TextArea,
{
    //defaultAutoCreate : {
    //    tag : "textarea",style   : "width:100px;height:60px;" ,autocomplete    : "off"
    //},
    // private
    /**
     * @cfg {Object} fck options - see fck manual for details.
     */
    fckconfig : false,
    
    /**
     * @cfg {Object} fck toolbar set (Basic or Default)
     */
    toolbarSet : 'Basic',
    /**
     * @cfg {Object} fck BasePath
     */ 
    basePath : '/fckeditor/',
    
    
    frame : false,
    
    value : '',
    
   
    onRender : function(ct, position)
    {
        if(!this.el){
            this.defaultAutoCreate = {
                tag: "textarea",
                style:"width:300px;height:60px;",
                autocomplete: "new-password"
            };
        }
        Roo.form.FCKeditor.superclass.onRender.call(this, ct, position);
        /*
        if(this.grow){
            this.textSizeEl = Roo.DomHelper.append(document.body, {tag: "pre", cls: "x-form-grow-sizer"});
            if(this.preventScrollbars){
                this.el.setStyle("overflow", "hidden");
            }
            this.el.setHeight(this.growMin);
        }
        */
        //console.log('onrender' + this.getId() );
        Roo.form.FCKeditor.editors[this.getId()] = this;
         

        this.replaceTextarea() ;
        
    },
    
    getEditor : function() {
        return this.fckEditor;
    },
    /**
     * Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.
     * @param {Mixed} value The value to set
     */
    
    
    setValue : function(value)
    {
        //console.log('setValue: ' + value);
        
        if(typeof(value) == 'undefined') { // not sure why this is happending...
            return;
        }
        Roo.form.FCKeditor.superclass.setValue.apply(this,[value]);
        
        //if(!this.el || !this.getEditor()) {
        //    this.value = value;
            //this.setValue.defer(100,this,[value]);    
        //    return;
        //} 
        
        if(!this.getEditor()) {
            return;
        }
        
        this.getEditor().SetData(value);
        
        //

    },

    /**
     * Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.
     * @return {Mixed} value The field value
     */
    getValue : function()
    {
        
        if (this.frame && this.frame.dom.style.display == 'none') {
            return Roo.form.FCKeditor.superclass.getValue.call(this);
        }
        
        if(!this.el || !this.getEditor()) {
           
           // this.getValue.defer(100,this); 
            return this.value;
        }
       
        
        var value=this.getEditor().GetData();
        Roo.form.FCKeditor.superclass.setValue.apply(this,[value]);
        return Roo.form.FCKeditor.superclass.getValue.call(this);
        

    },

    /**
     * Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.
     * @return {Mixed} value The field value
     */
    getRawValue : function()
    {
        if (this.frame && this.frame.dom.style.display == 'none') {
            return Roo.form.FCKeditor.superclass.getRawValue.call(this);
        }
        
        if(!this.el || !this.getEditor()) {
            //this.getRawValue.defer(100,this); 
            return this.value;
            return;
        }
        
        
        
        var value=this.getEditor().GetData();
        Roo.form.FCKeditor.superclass.setRawValue.apply(this,[value]);
        return Roo.form.FCKeditor.superclass.getRawValue.call(this);
         
    },
    
    setSize : function(w,h) {
        
        
        
        //if (this.frame && this.frame.dom.style.display == 'none') {
        //    Roo.form.FCKeditor.superclass.setSize.apply(this, [w, h]);
        //    return;
        //}
        //if(!this.el || !this.getEditor()) {
        //    this.setSize.defer(100,this, [w,h]); 
        //    return;
        //}
        
        
        
        Roo.form.FCKeditor.superclass.setSize.apply(this, [w, h]);
        
        this.frame.dom.setAttribute('width', w);
        this.frame.dom.setAttribute('height', h);
        this.frame.setSize(w,h);
        
    },
    
    toggleSourceEdit : function(value) {
        
      
         
        this.el.dom.style.display = value ? '' : 'none';
        this.frame.dom.style.display = value ?  'none' : '';
        
    },
    
    
    focus: function(tag)
    {
        if (this.frame.dom.style.display == 'none') {
            return Roo.form.FCKeditor.superclass.focus.call(this);
        }
        if(!this.el || !this.getEditor()) {
            this.focus.defer(100,this, [tag]); 
            return;
        }
        
        
        
        
        var tgs = this.getEditor().EditorDocument.getElementsByTagName(tag);
        this.getEditor().Focus();
        if (tgs.length) {
            if (!this.getEditor().Selection.GetSelection()) {
                this.focus.defer(100,this, [tag]); 
                return;
            }
            
            
            var r = this.getEditor().EditorDocument.createRange();
            r.setStart(tgs[0],0);
            r.setEnd(tgs[0],0);
            this.getEditor().Selection.GetSelection().removeAllRanges();
            this.getEditor().Selection.GetSelection().addRange(r);
            this.getEditor().Focus();
        }
        
    },
    
    
    
    replaceTextarea : function()
    {
        if ( document.getElementById( this.getId() + '___Frame' ) ) {
            return ;
        }
        //if ( !this.checkBrowser || this._isCompatibleBrowser() )
        //{
            // We must check the elements firstly using the Id and then the name.
        var oTextarea = document.getElementById( this.getId() );
        
        var colElementsByName = document.getElementsByName( this.getId() ) ;
         
        oTextarea.style.display = 'none' ;

        if ( oTextarea.tabIndex ) {            
            this.TabIndex = oTextarea.tabIndex ;
        }
        
        this._insertHtmlBefore( this._getConfigHtml(), oTextarea ) ;
        this._insertHtmlBefore( this._getIFrameHtml(), oTextarea ) ;
        this.frame = Roo.get(this.getId() + '___Frame')
    },
    
    _getConfigHtml : function()
    {
        var sConfig = '' ;

        for ( var o in this.fckconfig ) {
            sConfig += sConfig.length > 0  ? '&amp;' : '';
            sConfig += encodeURIComponent( o ) + '=' + encodeURIComponent( this.fckconfig[o] ) ;
        }

        return '<input type="hidden" id="' + this.getId() + '___Config" value="' + sConfig + '" style="display:none" />' ;
    },
    
    
    _getIFrameHtml : function()
    {
        var sFile = 'fckeditor.html' ;
        /* no idea what this is about..
        try
        {
            if ( (/fcksource=true/i).test( window.top.location.search ) )
                sFile = 'fckeditor.original.html' ;
        }
        catch (e) { 
        */

        var sLink = this.basePath + 'editor/' + sFile + '?InstanceName=' + encodeURIComponent( this.getId() ) ;
        sLink += this.toolbarSet ? ( '&amp;Toolbar=' + this.toolbarSet)  : '';
        
        
        var html = '<iframe id="' + this.getId() +
            '___Frame" src="' + sLink +
            '" width="' + this.width +
            '" height="' + this.height + '"' +
            (this.tabIndex ?  ' tabindex="' + this.tabIndex + '"' :'' ) +
            ' frameborder="0" scrolling="no"></iframe>' ;

        return html ;
    },
    
    _insertHtmlBefore : function( html, element )
    {
        if ( element.insertAdjacentHTML )	{
            // IE
            element.insertAdjacentHTML( 'beforeBegin', html ) ;
        } else { // Gecko
            var oRange = document.createRange() ;
            oRange.setStartBefore( element ) ;
            var oFragment = oRange.createContextualFragment( html );
            element.parentNode.insertBefore( oFragment, element ) ;
        }
    }
    
    
  
    
    
    
    

});

//Roo.reg('fckeditor', Roo.form.FCKeditor);

function FCKeditor_OnComplete(editorInstance){
    var f = Roo.form.FCKeditor.editors[editorInstance.Name];
    f.fckEditor = editorInstance;
    //console.log("loaded");
    f.fireEvent('editorinit', f, editorInstance);
} 
  

 















//<script type="text/javascript">
/**
 * @class Roo.form.GridField
 * @extends Roo.form.Field
 * Embed a grid (or editable grid into a form)
 * STATUS ALPHA
 * 
 * This embeds a grid in a form, the value of the field should be the json encoded array of rows
 * it needs 
 * xgrid.store = Roo.data.Store
 * xgrid.store.proxy = Roo.data.MemoryProxy (data = [] )
 * xgrid.store.reader = Roo.data.JsonReader 
 * 
 * 
 * @constructor
 * Creates a new GridField
 * @param {Object} config Configuration options
 */
Roo.form.GridField = function(config){
    Roo.form.GridField.superclass.constructor.call(this, config);
     
};

Roo.extend(Roo.form.GridField, Roo.form.Field,  {
    /**
     * @cfg {Number} width  - used to restrict width of grid..
     */
    width : 100,
    /**
     * @cfg {Number} height - used to restrict height of grid..
     */
    height : 50,
     /**
     * @cfg {Object} xgrid (xtype'd description of grid) { xtype : 'Grid', dataSource: .... }
         * 
         *}
     */
    xgrid : false, 
    /**
     * @cfg {String/Object} autoCreate A DomHelper element spec, or true for a default element spec (defaults to
     * {tag: "input", type: "checkbox", autocomplete: "off"})
     */
   // defaultAutoCreate : { tag: 'div' },
    defaultAutoCreate : { tag: 'input', type: 'hidden', autocomplete: 'new-password'},
    /**
     * @cfg {String} addTitle Text to include for adding a title.
     */
    addTitle : false,
    //
    onResize : function(){
        Roo.form.Field.superclass.onResize.apply(this, arguments);
    },

    initEvents : function(){
        // Roo.form.Checkbox.superclass.initEvents.call(this);
        // has no events...
       
    },


    getResizeEl : function(){
        return this.wrap;
    },

    getPositionEl : function(){
        return this.wrap;
    },

    // private
    onRender : function(ct, position){
        
        this.style = this.style || 'overflow: hidden; border:1px solid #c3daf9;';
        var style = this.style;
        delete this.style;
        
        Roo.form.GridField.superclass.onRender.call(this, ct, position);
        this.wrap = this.el.wrap({cls: ''}); // not sure why ive done thsi...
        this.viewEl = this.wrap.createChild({ tag: 'div' });
        if (style) {
            this.viewEl.applyStyles(style);
        }
        if (this.width) {
            this.viewEl.setWidth(this.width);
        }
        if (this.height) {
            this.viewEl.setHeight(this.height);
        }
        //if(this.inputValue !== undefined){
        //this.setValue(this.value);
        
        
        this.grid = new Roo.grid[this.xgrid.xtype](this.viewEl, this.xgrid);
        
        
        this.grid.render();
        this.grid.getDataSource().on('remove', this.refreshValue, this);
        this.grid.getDataSource().on('update', this.refreshValue, this);
        this.grid.on('afteredit', this.refreshValue, this);
 
    },
     
    
    /**
     * Sets the value of the item. 
     * @param {String} either an object  or a string..
     */
    setValue : function(v){
        //this.value = v;
        v = v || []; // empty set..
        // this does not seem smart - it really only affects memoryproxy grids..
        if (this.grid && this.grid.getDataSource() && typeof(v) != 'undefined') {
            var ds = this.grid.getDataSource();
            // assumes a json reader..
            var data = {}
            data[ds.reader.meta.root ] =  typeof(v) == 'string' ? Roo.decode(v) : v;
            ds.loadData( data);
        }
        // clear selection so it does not get stale.
        if (this.grid.sm) { 
            this.grid.sm.clearSelections();
        }
        
        Roo.form.GridField.superclass.setValue.call(this, v);
        this.refreshValue();
        // should load data in the grid really....
    },
    
    // private
    refreshValue: function() {
         var val = [];
        this.grid.getDataSource().each(function(r) {
            val.push(r.data);
        });
        this.el.dom.value = Roo.encode(val);
    }
    
     
    
    
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.form.DisplayField
 * @extends Roo.form.Field
 * A generic Field to display non-editable data.
 * @cfg {Boolean} closable (true|false) default false
 * @constructor
 * Creates a new Display Field item.
 * @param {Object} config Configuration options
 */
Roo.form.DisplayField = function(config){
    Roo.form.DisplayField.superclass.constructor.call(this, config);
    
    this.addEvents({
        /**
         * @event close
         * Fires after the click the close btn
	     * @param {Roo.form.DisplayField} this
	     */
        close : true
    });
};

Roo.extend(Roo.form.DisplayField, Roo.form.TextField,  {
    inputType:      'hidden',
    allowBlank:     true,
    readOnly:         true,
    
 
    /**
     * @cfg {String} focusClass The CSS class to use when the checkbox receives focus (defaults to undefined)
     */
    focusClass : undefined,
    /**
     * @cfg {String} fieldClass The default CSS class for the checkbox (defaults to "x-form-field")
     */
    fieldClass: 'x-form-field',
    
     /**
     * @cfg {Function} valueRenderer The renderer for the field (so you can reformat output). should return raw HTML
     */
    valueRenderer: undefined,
    
    width: 100,
    /**
     * @cfg {String/Object} autoCreate A DomHelper element spec, or true for a default element spec (defaults to
     * {tag: "input", type: "checkbox", autocomplete: "off"})
     */
     
 //   defaultAutoCreate : { tag: 'input', type: 'hidden', autocomplete: 'off'},
 
    closable : false,
    
    onResize : function(){
        Roo.form.DisplayField.superclass.onResize.apply(this, arguments);
        
    },

    initEvents : function(){
        // Roo.form.Checkbox.superclass.initEvents.call(this);
        // has no events...
        
        if(this.closable){
            this.closeEl.on('click', this.onClose, this);
        }
       
    },


    getResizeEl : function(){
        return this.wrap;
    },

    getPositionEl : function(){
        return this.wrap;
    },

    // private
    onRender : function(ct, position){
        
        Roo.form.DisplayField.superclass.onRender.call(this, ct, position);
        //if(this.inputValue !== undefined){
        this.wrap = this.el.wrap();
        
        this.viewEl = this.wrap.createChild({ tag: 'div', cls: 'x-form-displayfield'});
        
        if(this.closable){
            this.closeEl = this.wrap.createChild({ tag: 'div', cls: 'x-dlg-close'});
        }
        
        if (this.bodyStyle) {
            this.viewEl.applyStyles(this.bodyStyle);
        }
        //this.viewEl.setStyle('padding', '2px');
        
        this.setValue(this.value);
        
    },
/*
    // private
    initValue : Roo.emptyFn,

  */

	// private
    onClick : function(){
        
    },

    /**
     * Sets the checked state of the checkbox.
     * @param {Boolean/String} checked True, 'true', '1', or 'on' to check the checkbox, any other value will uncheck it.
     */
    setValue : function(v){
        this.value = v;
        var html = this.valueRenderer ?  this.valueRenderer(v) : String.format('{0}', v);
        // this might be called before we have a dom element..
        if (!this.viewEl) {
            return;
        }
        this.viewEl.dom.innerHTML = html;
        Roo.form.DisplayField.superclass.setValue.call(this, v);

    },
    
    onClose : function(e)
    {
        e.preventDefault();
        
        this.fireEvent('close', this);
    }
});/*
 * 
 * Licence- LGPL
 * 
 */

/**
 * @class Roo.form.DayPicker
 * @extends Roo.form.Field
 * A Day picker show [M] [T] [W] ....
 * @constructor
 * Creates a new Day Picker
 * @param {Object} config Configuration options
 */
Roo.form.DayPicker= function(config){
    Roo.form.DayPicker.superclass.constructor.call(this, config);
     
};

Roo.extend(Roo.form.DayPicker, Roo.form.Field,  {
    /**
     * @cfg {String} focusClass The CSS class to use when the checkbox receives focus (defaults to undefined)
     */
    focusClass : undefined,
    /**
     * @cfg {String} fieldClass The default CSS class for the checkbox (defaults to "x-form-field")
     */
    fieldClass: "x-form-field",
   
    /**
     * @cfg {String/Object} autoCreate A DomHelper element spec, or true for a default element spec (defaults to
     * {tag: "input", type: "checkbox", autocomplete: "off"})
     */
    defaultAutoCreate : { tag: "input", type: 'hidden', autocomplete: "new-password"},
    
   
    actionMode : 'viewEl', 
    //
    // private
 
    inputType : 'hidden',
    
     
    inputElement: false, // real input element?
    basedOn: false, // ????
    
    isFormField: true, // not sure where this is needed!!!!

    onResize : function(){
        Roo.form.Checkbox.superclass.onResize.apply(this, arguments);
        if(!this.boxLabel){
            this.el.alignTo(this.wrap, 'c-c');
        }
    },

    initEvents : function(){
        Roo.form.Checkbox.superclass.initEvents.call(this);
        this.el.on("click", this.onClick,  this);
        this.el.on("change", this.onClick,  this);
    },


    getResizeEl : function(){
        return this.wrap;
    },

    getPositionEl : function(){
        return this.wrap;
    },

    
    // private
    onRender : function(ct, position){
        Roo.form.Checkbox.superclass.onRender.call(this, ct, position);
       
        this.wrap = this.el.wrap({cls: 'x-form-daypick-item '});
        
        var r1 = '<table><tr>';
        var r2 = '<tr class="x-form-daypick-icons">';
        for (var i=0; i < 7; i++) {
            r1+= '<td><div>' + Date.dayNames[i].substring(0,3) + '</div></td>';
            r2+= '<td><img class="x-menu-item-icon" src="' + Roo.BLANK_IMAGE_URL  +'"></td>';
        }
        
        var viewEl = this.wrap.createChild( r1 + '</tr>' + r2 + '</tr></table>');
        viewEl.select('img').on('click', this.onClick, this);
        this.viewEl = viewEl;   
        
        
        // this will not work on Chrome!!!
        this.el.on('DOMAttrModified', this.setFromHidden,  this); //ff
        this.el.on('propertychange', this.setFromHidden,  this);  //ie
        
        
          

    },

    // private
    initValue : Roo.emptyFn,

    /**
     * Returns the checked state of the checkbox.
     * @return {Boolean} True if checked, else false
     */
    getValue : function(){
        return this.el.dom.value;
        
    },

	// private
    onClick : function(e){ 
        //this.setChecked(!this.checked);
        Roo.get(e.target).toggleClass('x-menu-item-checked');
        this.refreshValue();
        //if(this.el.dom.checked != this.checked){
        //    this.setValue(this.el.dom.checked);
       // }
    },
    
    // private
    refreshValue : function()
    {
        var val = '';
        this.viewEl.select('img',true).each(function(e,i,n)  {
            val += e.is(".x-menu-item-checked") ? String(n) : '';
        });
        this.setValue(val, true);
    },

    /**
     * Sets the checked state of the checkbox.
     * On is always based on a string comparison between inputValue and the param.
     * @param {Boolean/String} value - the value to set 
     * @param {Boolean/String} suppressEvent - whether to suppress the checkchange event.
     */
    setValue : function(v,suppressEvent){
        if (!this.el.dom) {
            return;
        }
        var old = this.el.dom.value ;
        this.el.dom.value = v;
        if (suppressEvent) {
            return ;
        }
         
        // update display..
        this.viewEl.select('img',true).each(function(e,i,n)  {
            
            var on = e.is(".x-menu-item-checked");
            var newv = v.indexOf(String(n)) > -1;
            if (on != newv) {
                e.toggleClass('x-menu-item-checked');
            }
            
        });
        
        
        this.fireEvent('change', this, v, old);
        
        
    },
   
    // handle setting of hidden value by some other method!!?!?
    setFromHidden: function()
    {
        if(!this.el){
            return;
        }
        //console.log("SET FROM HIDDEN");
        //alert('setFrom hidden');
        this.setValue(this.el.dom.value);
    },
    
    onDestroy : function()
    {
        if(this.viewEl){
            Roo.get(this.viewEl).remove();
        }
         
        Roo.form.DayPicker.superclass.onDestroy.call(this);
    }

});/*
 * RooJS Library 1.1.1
 * Copyright(c) 2008-2011  Alan Knowles
 *
 * License - LGPL
 */
 

/**
 * @class Roo.form.ComboCheck
 * @extends Roo.form.ComboBox
 * A combobox for multiple select items.
 *
 * FIXME - could do with a reset button..
 * 
 * @constructor
 * Create a new ComboCheck
 * @param {Object} config Configuration options
 */
Roo.form.ComboCheck = function(config){
    Roo.form.ComboCheck.superclass.constructor.call(this, config);
    // should verify some data...
    // like
    // hiddenName = required..
    // displayField = required
    // valudField == required
    var req= [ 'hiddenName', 'displayField', 'valueField' ];
    var _t = this;
    Roo.each(req, function(e) {
        if ((typeof(_t[e]) == 'undefined' ) || !_t[e].length) {
            throw "Roo.form.ComboCheck : missing value for: " + e;
        }
    });
    
    
};

Roo.extend(Roo.form.ComboCheck, Roo.form.ComboBox, {
     
     
    editable : false,
     
    selectedClass: 'x-menu-item-checked', 
    
    // private
    onRender : function(ct, position){
        var _t = this;
        
        
        
        if(!this.tpl){
            var cls = 'x-combo-list';

            
            this.tpl =  new Roo.Template({
                html :  '<div class="'+cls+'-item x-menu-check-item">' +
                   '<img class="x-menu-item-icon" style="margin: 0px;" src="' + Roo.BLANK_IMAGE_URL + '">' + 
                   '<span>{' + this.displayField + '}</span>' +
                    '</div>' 
                
            });
        }
 
        
        Roo.form.ComboCheck.superclass.onRender.call(this, ct, position);
        this.view.singleSelect = false;
        this.view.multiSelect = true;
        this.view.toggleSelect = true;
        this.pageTb.add(new Roo.Toolbar.Fill(),{
            
            text: 'Select All',
            handler: function() {
                _t.selectAll();
            }
        },
        {
            text: 'Done',
            handler: function() {
                _t.collapse();
            }
        });
    },
    
    cleanLeadingSpace : function(e)
    {
        // this is disabled, as it retriggers setvalue on blur
        return;
    },
    doForce : function() {
        // no idea what this did, but it blanks out our values.
        return;
    },
    onViewOver : function(e, t){
        // do nothing...
        return;
        
    },
    
    onViewClick : function(doFocus,index){
        return;
        
    },
    select: function () {
        //Roo.log("SELECT CALLED");
    },
     
    selectByValue : function(xv, scrollIntoView){
        var ar = this.getValueArray();
        var sels = [];
        
        Roo.each(ar, function(v) {
            if(v === undefined || v === null){
                return;
            }
            var r = this.findRecord(this.valueField, v);
            if(r){
                sels.push(this.store.indexOf(r))
                
            }
        },this);
        this.view.select(sels);
        return false;
    },
    
    selectAll : function()
    {
        var sels = [];
        this.store.each(function(r,i) {
            sels.push(i);
        });
        this.view.select(sels);
        this.collapse();
        return false;

    },
    
    onSelect : function(record, index){
       // Roo.log("onselect Called");
       // this is only called by the clear button now..
        this.view.clearSelections();
        this.setValue('[]');
        if (this.value != this.valueBefore) {
            this.fireEvent('change', this, this.value, this.valueBefore);
            this.valueBefore = this.value;
        }
    },
    getValueArray : function()
    {
        var ar = [] ;
        
        try {
            //Roo.log(this.value);
            if (typeof(this.value) == 'undefined') {
                return [];
            }
            var ar = Roo.decode(this.value);
            return  ar instanceof Array ? ar : []; //?? valid?
            
        } catch(e) {
            Roo.log(e + "\nRoo.form.ComboCheck:getValueArray  invalid data:" + this.getValue());
            return [];
        }
         
    },
    expand : function ()
    {
        
        Roo.form.ComboCheck.superclass.expand.call(this);
        this.valueBefore = typeof(this.value) == 'undefined' ? '' : this.value;
        //this.valueBefore = typeof(this.valueBefore) == 'undefined' ? '' : this.valueBefore;
        

    },
    
    collapse : function(){
        Roo.form.ComboCheck.superclass.collapse.call(this);
        var sl = this.view.getSelectedIndexes();
        var st = this.store;
        var nv = [];
        var tv = [];
        var r;
        Roo.each(sl, function(i) {
            r = st.getAt(i);
            nv.push(r.get(this.valueField));
        },this);
        this.setValue(Roo.encode(nv));
        if (this.value != this.valueBefore) {

            this.fireEvent('change', this, this.value, this.valueBefore);
            this.valueBefore = this.value;
        }
        
    },
    
    setValue : function(v){
        // Roo.log(v);
        this.value = v;
        
        var vals = this.getValueArray();
        var tv = [];
        Roo.each(vals, function(k) {
            var r = this.findRecord(this.valueField, k);
            if(r){
                tv.push(r.data[this.displayField]);
            }else if(this.valueNotFoundText !== undefined){
                tv.push( this.valueNotFoundText );
            }
        },this);
       // Roo.log(tv);
        
        Roo.form.ComboBox.superclass.setValue.call(this, tv.join(', '));
        this.hiddenField.value = v;
        this.value = v;
    }
    
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.form.Signature
 * @extends Roo.form.Field
 * Signature field.  
 * @constructor
 * 
 * @param {Object} config Configuration options
 */

Roo.form.Signature = function(config){
    Roo.form.Signature.superclass.constructor.call(this, config);
    
    this.addEvents({// not in used??
         /**
         * @event confirm
         * Fires when the 'confirm' icon is pressed (add a listener to enable add button)
	     * @param {Roo.form.Signature} combo This combo box
	     */
        'confirm' : true,
        /**
         * @event reset
         * Fires when the 'edit' icon is pressed (add a listener to enable add button)
	     * @param {Roo.form.ComboBox} combo This combo box
	     * @param {Roo.data.Record|false} record The data record returned from the underlying store (or false on nothing selected)
	     */
        'reset' : true
    });
};

Roo.extend(Roo.form.Signature, Roo.form.Field,  {
    /**
     * @cfg {Object} labels Label to use when rendering a form.
     * defaults to 
     * labels : { 
     *      clear : "Clear",
     *      confirm : "Confirm"
     *  }
     */
    labels : { 
        clear : "Clear",
        confirm : "Confirm"
    },
    /**
     * @cfg {Number} width The signature panel width (defaults to 300)
     */
    width: 300,
    /**
     * @cfg {Number} height The signature panel height (defaults to 100)
     */
    height : 100,
    /**
     * @cfg {Boolean} allowBlank False to validate that the value length > 0 (defaults to false)
     */
    allowBlank : false,
    
    //private
    // {Object} signPanel The signature SVG panel element (defaults to {})
    signPanel : {},
    // {Boolean} isMouseDown False to validate that the mouse down event (defaults to false)
    isMouseDown : false,
    // {Boolean} isConfirmed validate the signature is confirmed or not for submitting form (defaults to false)
    isConfirmed : false,
    // {String} signatureTmp SVG mapping string (defaults to empty string)
    signatureTmp : '',
    
    
    defaultAutoCreate : { // modified by initCompnoent..
        tag: "input",
        type:"hidden"
    },

    // private
    onRender : function(ct, position){
        
        Roo.form.Signature.superclass.onRender.call(this, ct, position);
        
        this.wrap = this.el.wrap({
            cls:'x-form-signature-wrap', style : 'width: ' + this.width + 'px', cn:{cls:'x-form-signature'}
        });
        
        this.createToolbar(this);
        this.signPanel = this.wrap.createChild({
                tag: 'div',
                style: 'width: ' + this.width + 'px; height: ' + this.height + 'px; border: 0;'
            }, this.el
        );
            
        this.svgID = Roo.id();
        this.svgEl = this.signPanel.createChild({
              xmlns : 'http://www.w3.org/2000/svg',
              tag : 'svg',
              id : this.svgID + "-svg",
              width: this.width,
              height: this.height,
              viewBox: '0 0 '+this.width+' '+this.height,
              cn : [
                {
                    tag: "rect",
                    id: this.svgID + "-svg-r",
                    width: this.width,
                    height: this.height,
                    fill: "#ffa"
                },
                {
                    tag: "line",
                    id: this.svgID + "-svg-l",
                    x1: "0", // start
                    y1: (this.height*0.8), // start set the line in 80% of height
                    x2: this.width, // end
                    y2: (this.height*0.8), // end set the line in 80% of height
                    'stroke': "#666",
                    'stroke-width': "1",
                    'stroke-dasharray': "3",
                    'shape-rendering': "crispEdges",
                    'pointer-events': "none"
                },
                {
                    tag: "path",
                    id: this.svgID + "-svg-p",
                    'stroke': "navy",
                    'stroke-width': "3",
                    'fill': "none",
                    'pointer-events': 'none'
                }
              ]
        });
        this.createSVG();
        this.svgBox = this.svgEl.dom.getScreenCTM();
    },
    createSVG : function(){ 
        var svg = this.signPanel;
        var r = svg.select('#'+ this.svgID + '-svg-r', true).first().dom;
        var t = this;

        r.addEventListener('mousedown', function(e) { return t.down(e); }, false);
        r.addEventListener('mousemove', function(e) { return t.move(e); }, false);
        r.addEventListener('mouseup', function(e) { return t.up(e); }, false);
        r.addEventListener('mouseout', function(e) { return t.up(e); }, false);
        r.addEventListener('touchstart', function(e) { return t.down(e); }, false);
        r.addEventListener('touchmove', function(e) { return t.move(e); }, false);
        r.addEventListener('touchend', function(e) { return t.up(e); }, false);
        
    },
    isTouchEvent : function(e){
        return e.type.match(/^touch/);
    },
    getCoords : function (e) {
        var pt    = this.svgEl.dom.createSVGPoint();
        pt.x = e.clientX; 
        pt.y = e.clientY;
        if (this.isTouchEvent(e)) {
            pt.x =  e.targetTouches[0].clientX;
            pt.y = e.targetTouches[0].clientY;
        }
        var a = this.svgEl.dom.getScreenCTM();
        var b = a.inverse();
        var mx = pt.matrixTransform(b);
        return mx.x + ',' + mx.y;
    },
    //mouse event headler 
    down : function (e) {
        this.signatureTmp += 'M' + this.getCoords(e) + ' ';
        this.signPanel.select('#'+ this.svgID + '-svg-p', true).first().attr('d', this.signatureTmp);
        
        this.isMouseDown = true;
        
        e.preventDefault();
    },
    move : function (e) {
        if (this.isMouseDown) {
            this.signatureTmp += 'L' + this.getCoords(e) + ' ';
            this.signPanel.select('#'+ this.svgID + '-svg-p', true).first().attr( 'd', this.signatureTmp);
        }
        
        e.preventDefault();
    },
    up : function (e) {
        this.isMouseDown = false;
        var sp = this.signatureTmp.split(' ');
        
        if(sp.length > 1){
            if(!sp[sp.length-2].match(/^L/)){
                sp.pop();
                sp.pop();
                sp.push("");
                this.signatureTmp = sp.join(" ");
            }
        }
        if(this.getValue() != this.signatureTmp){
            this.signPanel.select('#'+ this.svgID + '-svg-r', true).first().attr('fill', '#ffa');
            this.isConfirmed = false;
        }
        e.preventDefault();
    },
    
    /**
     * Protected method that will not generally be called directly. It
     * is called when the editor creates its toolbar. Override this method if you need to
     * add custom toolbar buttons.
     * @param {HtmlEditor} editor
     */
    createToolbar : function(editor){
         function btn(id, toggle, handler){
            var xid = fid + '-'+ id ;
            return {
                id : xid,
                cmd : id,
                cls : 'x-btn-icon x-edit-'+id,
                enableToggle:toggle !== false,
                scope: editor, // was editor...
                handler:handler||editor.relayBtnCmd,
                clickEvent:'mousedown',
                tooltip: etb.buttonTips[id] || undefined, ///tips ???
                tabIndex:-1
            };
        }
        
        
        var tb = new Roo.Toolbar(editor.wrap.dom.firstChild);
        this.tb = tb;
        this.tb.add(
           {
                cls : ' x-signature-btn x-signature-'+id,
                scope: editor, // was editor...
                handler: this.reset,
                clickEvent:'mousedown',
                text: this.labels.clear
            },
            {
                 xtype : 'Fill',
                 xns: Roo.Toolbar
            }, 
            {
                cls : '  x-signature-btn x-signature-'+id,
                scope: editor, // was editor...
                handler: this.confirmHandler,
                clickEvent:'mousedown',
                text: this.labels.confirm
            }
        );
    
    },
    //public
    /**
     * when user is clicked confirm then show this image.....
     * 
     * @return {String} Image Data URI
     */
    getImageDataURI : function(){
        var svg = this.svgEl.dom.parentNode.innerHTML;
        var src = 'data:image/svg+xml;base64,'+window.btoa(svg);
        return src; 
    },
    /**
     * 
     * @return {Boolean} this.isConfirmed
     */
    getConfirmed : function(){
        return this.isConfirmed;
    },
    /**
     * 
     * @return {Number} this.width
     */
    getWidth : function(){
        return this.width;
    },
    /**
     * 
     * @return {Number} this.height
     */
    getHeight : function(){
        return this.height;
    },
    // private
    getSignature : function(){
        return this.signatureTmp;
    },
    // private
    reset : function(){
        this.signatureTmp = '';
        this.signPanel.select('#'+ this.svgID + '-svg-r', true).first().attr('fill', '#ffa');
        this.signPanel.select('#'+ this.svgID + '-svg-p', true).first().attr( 'd', '');
        this.isConfirmed = false;
        Roo.form.Signature.superclass.reset.call(this);
    },
    setSignature : function(s){
        this.signatureTmp = s;
        this.signPanel.select('#'+ this.svgID + '-svg-r', true).first().attr('fill', '#ffa');
        this.signPanel.select('#'+ this.svgID + '-svg-p', true).first().attr( 'd', s);
        this.setValue(s);
        this.isConfirmed = false;
        Roo.form.Signature.superclass.reset.call(this);
    }, 
    test : function(){
//        Roo.log(this.signPanel.dom.contentWindow.up())
    },
    //private
    setConfirmed : function(){
        
        
        
//        Roo.log(Roo.get(this.signPanel.dom.contentWindow.r).attr('fill', '#cfc'));
    },
    // private
    confirmHandler : function(){
        if(!this.getSignature()){
            return;
        }
        
        this.signPanel.select('#'+ this.svgID + '-svg-r', true).first().attr('fill', '#cfc');
        this.setValue(this.getSignature());
        this.isConfirmed = true;
        
        this.fireEvent('confirm', this);
    },
    // private
    // Subclasses should provide the validation implementation by overriding this
    validateValue : function(value){
        if(this.allowBlank){
            return true;
        }
        
        if(this.isConfirmed){
            return true;
        }
        return false;
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.form.ComboBox
 * @extends Roo.form.TriggerField
 * A combobox control with support for autocomplete, remote-loading, paging and many other features.
 * @constructor
 * Create a new ComboBox.
 * @param {Object} config Configuration options
 */
Roo.form.Select = function(config){
    Roo.form.Select.superclass.constructor.call(this, config);
     
};

Roo.extend(Roo.form.Select , Roo.form.ComboBox, {
    /**
     * @cfg {String/HTMLElement/Element} transform The id, DOM node or element of an existing select to convert to a ComboBox
     */
    /**
     * @cfg {Boolean} lazyRender True to prevent the ComboBox from rendering until requested (should always be used when
     * rendering into an Roo.Editor, defaults to false)
     */
    /**
     * @cfg {Boolean/Object} autoCreate A DomHelper element spec, or true for a default element spec (defaults to:
     * {tag: "input", type: "text", size: "24", autocomplete: "off"})
     */
    /**
     * @cfg {Roo.data.Store} store The data store to which this combo is bound (defaults to undefined)
     */
    /**
     * @cfg {String} title If supplied, a header element is created containing this text and added into the top of
     * the dropdown list (defaults to undefined, with no header element)
     */

     /**
     * @cfg {String/Roo.Template} tpl The template to use to render the output
     */
     
    // private
    defaultAutoCreate : {tag: "select"  },
    /**
     * @cfg {Number} listWidth The width in pixels of the dropdown list (defaults to the width of the ComboBox field)
     */
    listWidth: undefined,
    /**
     * @cfg {String} displayField The underlying data field name to bind to this CombBox (defaults to undefined if
     * mode = 'remote' or 'text' if mode = 'local')
     */
    displayField: undefined,
    /**
     * @cfg {String} valueField The underlying data value name to bind to this CombBox (defaults to undefined if
     * mode = 'remote' or 'value' if mode = 'local'). 
     * Note: use of a valueField requires the user make a selection
     * in order for a value to be mapped.
     */
    valueField: undefined,
    
    
    /**
     * @cfg {String} hiddenName If specified, a hidden form field with this name is dynamically generated to store the
     * field's data value (defaults to the underlying DOM element's name)
     */
    hiddenName: undefined,
    /**
     * @cfg {String} listClass CSS class to apply to the dropdown list element (defaults to '')
     */
    listClass: '',
    /**
     * @cfg {String} selectedClass CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')
     */
    selectedClass: 'x-combo-selected',
    /**
     * @cfg {String} triggerClass An additional CSS class used to style the trigger button.  The trigger will always get the
     * class 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-arrow-trigger'
     * which displays a downward arrow icon).
     */
    triggerClass : 'x-form-arrow-trigger',
    /**
     * @cfg {Boolean/String} shadow True or "sides" for the default effect, "frame" for 4-way shadow, and "drop" for bottom-right
     */
    shadow:'sides',
    /**
     * @cfg {String} listAlign A valid anchor position value. See {@link Roo.Element#alignTo} for details on supported
     * anchor positions (defaults to 'tl-bl')
     */
    listAlign: 'tl-bl?',
    /**
     * @cfg {Number} maxHeight The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)
     */
    maxHeight: 300,
    /**
     * @cfg {String} triggerAction The action to execute when the trigger field is activated.  Use 'all' to run the
     * query specified by the allQuery config option (defaults to 'query')
     */
    triggerAction: 'query',
    /**
     * @cfg {Number} minChars The minimum number of characters the user must type before autocomplete and typeahead activate
     * (defaults to 4, does not apply if editable = false)
     */
    minChars : 4,
    /**
     * @cfg {Boolean} typeAhead True to populate and autoselect the remainder of the text being typed after a configurable
     * delay (typeAheadDelay) if it matches a known value (defaults to false)
     */
    typeAhead: false,
    /**
     * @cfg {Number} queryDelay The length of time in milliseconds to delay between the start of typing and sending the
     * query to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local')
     */
    queryDelay: 500,
    /**
     * @cfg {Number} pageSize If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the
     * filter queries will execute with page start and limit parameters.  Only applies when mode = 'remote' (defaults to 0)
     */
    pageSize: 0,
    /**
     * @cfg {Boolean} selectOnFocus True to select any existing text in the field immediately on focus.  Only applies
     * when editable = true (defaults to false)
     */
    selectOnFocus:false,
    /**
     * @cfg {String} queryParam Name of the query as it will be passed on the querystring (defaults to 'query')
     */
    queryParam: 'query',
    /**
     * @cfg {String} loadingText The text to display in the dropdown list while data is loading.  Only applies
     * when mode = 'remote' (defaults to 'Loading...')
     */
    loadingText: 'Loading...',
    /**
     * @cfg {Boolean} resizable True to add a resize handle to the bottom of the dropdown list (defaults to false)
     */
    resizable: false,
    /**
     * @cfg {Number} handleHeight The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8)
     */
    handleHeight : 8,
    /**
     * @cfg {Boolean} editable False to prevent the user from typing text directly into the field, just like a
     * traditional select (defaults to true)
     */
    editable: true,
    /**
     * @cfg {String} allQuery The text query to send to the server to return all records for the list with no filtering (defaults to '')
     */
    allQuery: '',
    /**
     * @cfg {String} mode Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)
     */
    mode: 'remote',
    /**
     * @cfg {Number} minListWidth The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if
     * listWidth has a higher value)
     */
    minListWidth : 70,
    /**
     * @cfg {Boolean} forceSelection True to restrict the selected value to one of the values in the list, false to
     * allow the user to set arbitrary text into the field (defaults to false)
     */
    forceSelection:false,
    /**
     * @cfg {Number} typeAheadDelay The length of time in milliseconds to wait until the typeahead text is displayed
     * if typeAhead = true (defaults to 250)
     */
    typeAheadDelay : 250,
    /**
     * @cfg {String} valueNotFoundText When using a name/value combo, if the value passed to setValue is not found in
     * the store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)
     */
    valueNotFoundText : undefined,
    
    /**
     * @cfg {String} defaultValue The value displayed after loading the store.
     */
    defaultValue: '',
    
    /**
     * @cfg {Boolean} blockFocus Prevents all focus calls, so it can work with things like HTML edtor bar
     */
    blockFocus : false,
    
    /**
     * @cfg {Boolean} disableClear Disable showing of clear button.
     */
    disableClear : false,
    /**
     * @cfg {Boolean} alwaysQuery  Disable caching of results, and always send query
     */
    alwaysQuery : false,
    
    //private
    addicon : false,
    editicon: false,
    
    // element that contains real text value.. (when hidden is used..)
     
    // private
    onRender : function(ct, position){
        Roo.form.Field.prototype.onRender.call(this, ct, position);
        
        if(this.store){
            this.store.on('beforeload', this.onBeforeLoad, this);
            this.store.on('load', this.onLoad, this);
            this.store.on('loadexception', this.onLoadException, this);
            this.store.load({});
        }
        
        
        
    },

    // private
    initEvents : function(){
        //Roo.form.ComboBox.superclass.initEvents.call(this);
 
    },

    onDestroy : function(){
       
        if(this.store){
            this.store.un('beforeload', this.onBeforeLoad, this);
            this.store.un('load', this.onLoad, this);
            this.store.un('loadexception', this.onLoadException, this);
        }
        //Roo.form.ComboBox.superclass.onDestroy.call(this);
    },

    // private
    fireKey : function(e){
        if(e.isNavKeyPress() && !this.list.isVisible()){
            this.fireEvent("specialkey", this, e);
        }
    },

    // private
    onResize: function(w, h){
        
        return; 
    
        
    },

    /**
     * Allow or prevent the user from directly editing the field text.  If false is passed,
     * the user will only be able to select from the items defined in the dropdown list.  This method
     * is the runtime equivalent of setting the 'editable' config option at config time.
     * @param {Boolean} value True to allow the user to directly edit the field text
     */
    setEditable : function(value){
         
    },

    // private
    onBeforeLoad : function(){
        
        Roo.log("Select before load");
        return;
    
        this.innerList.update(this.loadingText ?
               '<div class="loading-indicator">'+this.loadingText+'</div>' : '');
        //this.restrictHeight();
        this.selectedIndex = -1;
    },

    // private
    onLoad : function(){

    
        var dom = this.el.dom;
        dom.innerHTML = '';
         var od = dom.ownerDocument;
         
        if (this.emptyText) {
            var op = od.createElement('option');
            op.setAttribute('value', '');
            op.innerHTML = String.format('{0}', this.emptyText);
            dom.appendChild(op);
        }
        if(this.store.getCount() > 0){
           
            var vf = this.valueField;
            var df = this.displayField;
            this.store.data.each(function(r) {
                // which colmsn to use... testing - cdoe / title..
                var op = od.createElement('option');
                op.setAttribute('value', r.data[vf]);
                op.innerHTML = String.format('{0}', r.data[df]);
                dom.appendChild(op);
            });
            if (typeof(this.defaultValue != 'undefined')) {
                this.setValue(this.defaultValue);
            }
            
             
        }else{
            //this.onEmptyResults();
        }
        //this.el.focus();
    },
    // private
    onLoadException : function()
    {
        dom.innerHTML = '';
            
        Roo.log("Select on load exception");
        return;
    
        this.collapse();
        Roo.log(this.store.reader.jsonData);
        if (this.store && typeof(this.store.reader.jsonData.errorMsg) != 'undefined') {
            Roo.MessageBox.alert("Error loading",this.store.reader.jsonData.errorMsg);
        }
        
        
    },
    // private
    onTypeAhead : function(){
         
    },

    // private
    onSelect : function(record, index){
        Roo.log('on select?');
        return;
        if(this.fireEvent('beforeselect', this, record, index) !== false){
            this.setFromData(index > -1 ? record.data : false);
            this.collapse();
            this.fireEvent('select', this, record, index);
        }
    },

    /**
     * Returns the currently selected field value or empty string if no value is set.
     * @return {String} value The selected value
     */
    getValue : function(){
        var dom = this.el.dom;
        this.value = dom.options[dom.selectedIndex].value;
        return this.value;
        
    },

    /**
     * Clears any text/value currently set in the field
     */
    clearValue : function(){
        this.value = '';
        this.el.dom.selectedIndex = this.emptyText ? 0 : -1;
        
    },

    /**
     * Sets the specified value into the field.  If the value finds a match, the corresponding record text
     * will be displayed in the field.  If the value does not match the data value of an existing item,
     * and the valueNotFoundText config option is defined, it will be displayed as the default field text.
     * Otherwise the field will be blank (although the value will still be set).
     * @param {String} value The value to match
     */
    setValue : function(v){
        var d = this.el.dom;
        for (var i =0; i < d.options.length;i++) {
            if (v == d.options[i].value) {
                d.selectedIndex = i;
                this.value = v;
                return;
            }
        }
        this.clearValue();
    },
    /**
     * @property {Object} the last set data for the element
     */
    
    lastData : false,
    /**
     * Sets the value of the field based on a object which is related to the record format for the store.
     * @param {Object} value the value to set as. or false on reset?
     */
    setFromData : function(o){
        Roo.log('setfrom data?');
         
        
        
    },
    // private
    reset : function(){
        this.clearValue();
    },
    // private
    findRecord : function(prop, value){
        
        return false;
    
        var record;
        if(this.store.getCount() > 0){
            this.store.each(function(r){
                if(r.data[prop] == value){
                    record = r;
                    return false;
                }
                return true;
            });
        }
        return record;
    },
    
    getName: function()
    {
        // returns hidden if it's set..
        if (!this.rendered) {return ''};
        return !this.hiddenName && this.el.dom.name  ? this.el.dom.name : (this.hiddenName || '');
        
    },
     

    

    // private
    onEmptyResults : function(){
        Roo.log('empty results');
        //this.collapse();
    },

    /**
     * Returns true if the dropdown list is expanded, else false.
     */
    isExpanded : function(){
        return false;
    },

    /**
     * Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.
     * The store must be loaded and the list expanded for this function to work, otherwise use setValue.
     * @param {String} value The data value of the item to select
     * @param {Boolean} scrollIntoView False to prevent the dropdown list from autoscrolling to display the
     * selected item if it is not currently in view (defaults to true)
     * @return {Boolean} True if the value matched an item in the list, else false
     */
    selectByValue : function(v, scrollIntoView){
        Roo.log('select By Value');
        return false;
    
        if(v !== undefined && v !== null){
            var r = this.findRecord(this.valueField || this.displayField, v);
            if(r){
                this.select(this.store.indexOf(r), scrollIntoView);
                return true;
            }
        }
        return false;
    },

    /**
     * Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.
     * The store must be loaded and the list expanded for this function to work, otherwise use setValue.
     * @param {Number} index The zero-based index of the list item to select
     * @param {Boolean} scrollIntoView False to prevent the dropdown list from autoscrolling to display the
     * selected item if it is not currently in view (defaults to true)
     */
    select : function(index, scrollIntoView){
        Roo.log('select ');
        return  ;
        
        this.selectedIndex = index;
        this.view.select(index);
        if(scrollIntoView !== false){
            var el = this.view.getNode(index);
            if(el){
                this.innerList.scrollChildIntoView(el, false);
            }
        }
    },

      

    // private
    validateBlur : function(){
        
        return;
        
    },

    // private
    initQuery : function(){
        this.doQuery(this.getRawValue());
    },

    // private
    doForce : function(){
        if(this.el.dom.value.length > 0){
            this.el.dom.value =
                this.lastSelectionText === undefined ? '' : this.lastSelectionText;
             
        }
    },

    /**
     * Execute a query to filter the dropdown list.  Fires the beforequery event prior to performing the
     * query allowing the query action to be canceled if needed.
     * @param {String} query The SQL query to execute
     * @param {Boolean} forceAll True to force the query to execute even if there are currently fewer characters
     * in the field than the minimum specified by the minChars config option.  It also clears any filter previously
     * saved in the current store (defaults to false)
     */
    doQuery : function(q, forceAll){
        
        Roo.log('doQuery?');
        if(q === undefined || q === null){
            q = '';
        }
        var qe = {
            query: q,
            forceAll: forceAll,
            combo: this,
            cancel:false
        };
        if(this.fireEvent('beforequery', qe)===false || qe.cancel){
            return false;
        }
        q = qe.query;
        forceAll = qe.forceAll;
        if(forceAll === true || (q.length >= this.minChars)){
            if(this.lastQuery != q || this.alwaysQuery){
                this.lastQuery = q;
                if(this.mode == 'local'){
                    this.selectedIndex = -1;
                    if(forceAll){
                        this.store.clearFilter();
                    }else{
                        this.store.filter(this.displayField, q);
                    }
                    this.onLoad();
                }else{
                    this.store.baseParams[this.queryParam] = q;
                    this.store.load({
                        params: this.getParams(q)
                    });
                    this.expand();
                }
            }else{
                this.selectedIndex = -1;
                this.onLoad();   
            }
        }
    },

    // private
    getParams : function(q){
        var p = {};
        //p[this.queryParam] = q;
        if(this.pageSize){
            p.start = 0;
            p.limit = this.pageSize;
        }
        return p;
    },

    /**
     * Hides the dropdown list if it is currently expanded. Fires the 'collapse' event on completion.
     */
    collapse : function(){
        
    },

    // private
    collapseIf : function(e){
        
    },

    /**
     * Expands the dropdown list if it is currently hidden. Fires the 'expand' event on completion.
     */
    expand : function(){
        
    } ,

    // private
     

    /** 
    * @cfg {Boolean} grow 
    * @hide 
    */
    /** 
    * @cfg {Number} growMin 
    * @hide 
    */
    /** 
    * @cfg {Number} growMax 
    * @hide 
    */
    /**
     * @hide
     * @method autoSize
     */
    
    setWidth : function()
    {
        
    },
    getResizeEl : function(){
        return this.el;
    }
});//<script type="text/javasscript">
 

/**
 * @class Roo.DDView
 * A DnD enabled version of Roo.View.
 * @param {Element/String} container The Element in which to create the View.
 * @param {String} tpl The template string used to create the markup for each element of the View
 * @param {Object} config The configuration properties. These include all the config options of
 * {@link Roo.View} plus some specific to this class.<br>
 * <p>
 * Drag/drop is implemented by adding {@link Roo.data.Record}s to the target DDView. If copying is
 * not being performed, the original {@link Roo.data.Record} is removed from the source DDView.<br>
 * <p>
 * The following extra CSS rules are needed to provide insertion point highlighting:<pre><code>
.x-view-drag-insert-above {
	border-top:1px dotted #3366cc;
}
.x-view-drag-insert-below {
	border-bottom:1px dotted #3366cc;
}
</code></pre>
 * 
 */
 
Roo.DDView = function(container, tpl, config) {
    Roo.DDView.superclass.constructor.apply(this, arguments);
    this.getEl().setStyle("outline", "0px none");
    this.getEl().unselectable();
    if (this.dragGroup) {
	this.setDraggable(this.dragGroup.split(","));
    }
    if (this.dropGroup) {
	this.setDroppable(this.dropGroup.split(","));
    }
    if (this.deletable) {
    	this.setDeletable();
    }
    this.isDirtyFlag = false;
	this.addEvents({
		"drop" : true
	});
};

Roo.extend(Roo.DDView, Roo.View, {
/**	@cfg {String/Array} dragGroup The ddgroup name(s) for the View's DragZone. */
/**	@cfg {String/Array} dropGroup The ddgroup name(s) for the View's DropZone. */
/**	@cfg {Boolean} copy Causes drag operations to copy nodes rather than move. */
/**	@cfg {Boolean} allowCopy Causes ctrl/drag operations to copy nodes rather than move. */

	isFormField: true,

	reset: Roo.emptyFn,
	
	clearInvalid: Roo.form.Field.prototype.clearInvalid,

	validate: function() {
		return true;
	},
	
	destroy: function() {
		this.purgeListeners();
		this.getEl.removeAllListeners();
		this.getEl().remove();
		if (this.dragZone) {
			if (this.dragZone.destroy) {
				this.dragZone.destroy();
			}
		}
		if (this.dropZone) {
			if (this.dropZone.destroy) {
				this.dropZone.destroy();
			}
		}
	},

/**	Allows this class to be an Roo.form.Field so it can be found using {@link Roo.form.BasicForm#findField}. */
	getName: function() {
		return this.name;
	},

/**	Loads the View from a JSON string representing the Records to put into the Store. */
	setValue: function(v) {
		if (!this.store) {
			throw "DDView.setValue(). DDView must be constructed with a valid Store";
		}
		var data = {};
		data[this.store.reader.meta.root] = v ? [].concat(v) : [];
		this.store.proxy = new Roo.data.MemoryProxy(data);
		this.store.load();
	},

/**	@return {String} a parenthesised list of the ids of the Records in the View. */
	getValue: function() {
		var result = '(';
		this.store.each(function(rec) {
			result += rec.id + ',';
		});
		return result.substr(0, result.length - 1) + ')';
	},
	
	getIds: function() {
		var i = 0, result = new Array(this.store.getCount());
		this.store.each(function(rec) {
			result[i++] = rec.id;
		});
		return result;
	},
	
	isDirty: function() {
		return this.isDirtyFlag;
	},

/**
 *	Part of the Roo.dd.DropZone interface. If no target node is found, the
 *	whole Element becomes the target, and this causes the drop gesture to append.
 */
    getTargetFromEvent : function(e) {
		var target = e.getTarget();
		while ((target !== null) && (target.parentNode != this.el.dom)) {
    		target = target.parentNode;
		}
		if (!target) {
			target = this.el.dom.lastChild || this.el.dom;
		}
		return target;
    },

/**
 *	Create the drag data which consists of an object which has the property "ddel" as
 *	the drag proxy element. 
 */
    getDragData : function(e) {
        var target = this.findItemFromChild(e.getTarget());
		if(target) {
			this.handleSelection(e);
			var selNodes = this.getSelectedNodes();
            var dragData = {
                source: this,
                copy: this.copy || (this.allowCopy && e.ctrlKey),
                nodes: selNodes,
                records: []
			};
			var selectedIndices = this.getSelectedIndexes();
			for (var i = 0; i < selectedIndices.length; i++) {
				dragData.records.push(this.store.getAt(selectedIndices[i]));
			}
			if (selNodes.length == 1) {
				dragData.ddel = target.cloneNode(true);	// the div element
			} else {
				var div = document.createElement('div'); // create the multi element drag "ghost"
				div.className = 'multi-proxy';
				for (var i = 0, len = selNodes.length; i < len; i++) {
					div.appendChild(selNodes[i].cloneNode(true));
				}
				dragData.ddel = div;
			}
            //console.log(dragData)
            //console.log(dragData.ddel.innerHTML)
			return dragData;
		}
        //console.log('nodragData')
		return false;
    },
    
/**	Specify to which ddGroup items in this DDView may be dragged. */
    setDraggable: function(ddGroup) {
    	if (ddGroup instanceof Array) {
    		Roo.each(ddGroup, this.setDraggable, this);
    		return;
    	}
    	if (this.dragZone) {
    		this.dragZone.addToGroup(ddGroup);
    	} else {
			this.dragZone = new Roo.dd.DragZone(this.getEl(), {
				containerScroll: true,
				ddGroup: ddGroup 

			});
//			Draggability implies selection. DragZone's mousedown selects the element.
			if (!this.multiSelect) { this.singleSelect = true; }

//			Wire the DragZone's handlers up to methods in *this*
			this.dragZone.getDragData = this.getDragData.createDelegate(this);
		}
    },

/**	Specify from which ddGroup this DDView accepts drops. */
    setDroppable: function(ddGroup) {
    	if (ddGroup instanceof Array) {
    		Roo.each(ddGroup, this.setDroppable, this);
    		return;
    	}
    	if (this.dropZone) {
    		this.dropZone.addToGroup(ddGroup);
    	} else {
			this.dropZone = new Roo.dd.DropZone(this.getEl(), {
				containerScroll: true,
				ddGroup: ddGroup
			});

//			Wire the DropZone's handlers up to methods in *this*
			this.dropZone.getTargetFromEvent = this.getTargetFromEvent.createDelegate(this);
			this.dropZone.onNodeEnter = this.onNodeEnter.createDelegate(this);
			this.dropZone.onNodeOver = this.onNodeOver.createDelegate(this);
			this.dropZone.onNodeOut = this.onNodeOut.createDelegate(this);
			this.dropZone.onNodeDrop = this.onNodeDrop.createDelegate(this);
		}
    },

/**	Decide whether to drop above or below a View node. */
    getDropPoint : function(e, n, dd){
    	if (n == this.el.dom) { return "above"; }
		var t = Roo.lib.Dom.getY(n), b = t + n.offsetHeight;
		var c = t + (b - t) / 2;
		var y = Roo.lib.Event.getPageY(e);
		if(y <= c) {
			return "above";
		}else{
			return "below";
		}
    },

    onNodeEnter : function(n, dd, e, data){
		return false;
    },
    
    onNodeOver : function(n, dd, e, data){
		var pt = this.getDropPoint(e, n, dd);
		// set the insert point style on the target node
		var dragElClass = this.dropNotAllowed;
		if (pt) {
			var targetElClass;
			if (pt == "above"){
				dragElClass = n.previousSibling ? "x-tree-drop-ok-between" : "x-tree-drop-ok-above";
				targetElClass = "x-view-drag-insert-above";
			} else {
				dragElClass = n.nextSibling ? "x-tree-drop-ok-between" : "x-tree-drop-ok-below";
				targetElClass = "x-view-drag-insert-below";
			}
			if (this.lastInsertClass != targetElClass){
				Roo.fly(n).replaceClass(this.lastInsertClass, targetElClass);
				this.lastInsertClass = targetElClass;
			}
		}
		return dragElClass;
	},

    onNodeOut : function(n, dd, e, data){
		this.removeDropIndicators(n);
    },

    onNodeDrop : function(n, dd, e, data){
    	if (this.fireEvent("drop", this, n, dd, e, data) === false) {
    		return false;
    	}
    	var pt = this.getDropPoint(e, n, dd);
		var insertAt = (n == this.el.dom) ? this.nodes.length : n.nodeIndex;
		if (pt == "below") { insertAt++; }
		for (var i = 0; i < data.records.length; i++) {
			var r = data.records[i];
			var dup = this.store.getById(r.id);
			if (dup && (dd != this.dragZone)) {
				Roo.fly(this.getNode(this.store.indexOf(dup))).frame("red", 1);
			} else {
				if (data.copy) {
					this.store.insert(insertAt++, r.copy());
				} else {
					data.source.isDirtyFlag = true;
					r.store.remove(r);
					this.store.insert(insertAt++, r);
				}
				this.isDirtyFlag = true;
			}
		}
		this.dragZone.cachedTarget = null;
		return true;
    },

    removeDropIndicators : function(n){
		if(n){
			Roo.fly(n).removeClass([
				"x-view-drag-insert-above",
				"x-view-drag-insert-below"]);
			this.lastInsertClass = "_noclass";
		}
    },

/**
 *	Utility method. Add a delete option to the DDView's context menu.
 *	@param {String} imageUrl The URL of the "delete" icon image.
 */
	setDeletable: function(imageUrl) {
		if (!this.singleSelect && !this.multiSelect) {
			this.singleSelect = true;
		}
		var c = this.getContextMenu();
		this.contextMenu.on("itemclick", function(item) {
			switch (item.id) {
				case "delete":
					this.remove(this.getSelectedIndexes());
					break;
			}
		}, this);
		this.contextMenu.add({
			icon: imageUrl,
			id: "delete",
			text: 'Delete'
		});
	},
	
/**	Return the context menu for this DDView. */
	getContextMenu: function() {
		if (!this.contextMenu) {
//			Create the View's context menu
			this.contextMenu = new Roo.menu.Menu({
				id: this.id + "-contextmenu"
			});
			this.el.on("contextmenu", this.showContextMenu, this);
		}
		return this.contextMenu;
	},
	
	disableContextMenu: function() {
		if (this.contextMenu) {
			this.el.un("contextmenu", this.showContextMenu, this);
		}
	},

	showContextMenu: function(e, item) {
        item = this.findItemFromChild(e.getTarget());
		if (item) {
			e.stopEvent();
			this.select(this.getNode(item), this.multiSelect && e.ctrlKey, true);
			this.contextMenu.showAt(e.getXY());
	    }
    },

/**
 *	Remove {@link Roo.data.Record}s at the specified indices.
 *	@param {Array/Number} selectedIndices The index (or Array of indices) of Records to remove.
 */
    remove: function(selectedIndices) {
		selectedIndices = [].concat(selectedIndices);
		for (var i = 0; i < selectedIndices.length; i++) {
			var rec = this.store.getAt(selectedIndices[i]);
			this.store.remove(rec);
		}
    },

/**
 *	Double click fires the event, but also, if this is draggable, and there is only one other
 *	related DropZone, it transfers the selected node.
 */
    onDblClick : function(e){
        var item = this.findItemFromChild(e.getTarget());
        if(item){
            if (this.fireEvent("dblclick", this, this.indexOf(item), item, e) === false) {
            	return false;
            }
            if (this.dragGroup) {
	            var targets = Roo.dd.DragDropMgr.getRelated(this.dragZone, true);
	            while (targets.indexOf(this.dropZone) > -1) {
		            targets.remove(this.dropZone);
				}
	            if (targets.length == 1) {
					this.dragZone.cachedTarget = null;
	            	var el = Roo.get(targets[0].getEl());
	            	var box = el.getBox(true);
	            	targets[0].onNodeDrop(el.dom, {
	            		target: el.dom,
	            		xy: [box.x, box.y + box.height - 1]
	            	}, null, this.getDragData(e));
	            }
	        }
        }
    },
    
    handleSelection: function(e) {
		this.dragZone.cachedTarget = null;
        var item = this.findItemFromChild(e.getTarget());
        if (!item) {
        	this.clearSelections(true);
        	return;
        }
		if (item && (this.multiSelect || this.singleSelect)){
			if(this.multiSelect && e.shiftKey && (!e.ctrlKey) && this.lastSelection){
				this.select(this.getNodes(this.indexOf(this.lastSelection), item.nodeIndex), false);
			}else if (this.isSelected(this.getNode(item)) && e.ctrlKey){
				this.unselect(item);
			} else {
				this.select(item, this.multiSelect && e.ctrlKey);
				this.lastSelection = item;
			}
		}
    },

    onItemClick : function(item, index, e){
		if(this.fireEvent("beforeclick", this, index, item, e) === false){
			return false;
		}
		return true;
    },

    unselect : function(nodeInfo, suppressEvent){
		var node = this.getNode(nodeInfo);
		if(node && this.isSelected(node)){
			if(this.fireEvent("beforeselect", this, node, this.selections) !== false){
				Roo.fly(node).removeClass(this.selectedClass);
				this.selections.remove(node);
				if(!suppressEvent){
					this.fireEvent("selectionchange", this, this.selections);
				}
			}
		}
    }
});
Roo.layout = {};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.layout.Manager
 * @extends Roo.util.Observable
 * Base class for layout managers.
 */
Roo.layout.Manager = function(container, config){
    Roo.layout.Manager.superclass.constructor.call(this);
    this.el = Roo.get(container);
    // ie scrollbar fix
    if(this.el.dom == document.body && Roo.isIE && !config.allowScroll){
        document.body.scroll = "no";
    }else if(this.el.dom != document.body && this.el.getStyle('position') == 'static'){
        this.el.position('relative');
    }
    this.id = this.el.id;
    this.el.addClass("x-layout-container");
    /** false to disable window resize monitoring @type Boolean */
    this.monitorWindowResize = true;
    this.regions = {};
    this.addEvents({
        /**
         * @event layout
         * Fires when a layout is performed. 
         * @param {Roo.layout.Manager} this
         */
        "layout" : true,
        /**
         * @event regionresized
         * Fires when the user resizes a region. 
         * @param {Roo.layout.Region} region The resized region
         * @param {Number} newSize The new size (width for east/west, height for north/south)
         */
        "regionresized" : true,
        /**
         * @event regioncollapsed
         * Fires when a region is collapsed. 
         * @param {Roo.layout.Region} region The collapsed region
         */
        "regioncollapsed" : true,
        /**
         * @event regionexpanded
         * Fires when a region is expanded.  
         * @param {Roo.layout.Region} region The expanded region
         */
        "regionexpanded" : true
    });
    this.updating = false;
    Roo.EventManager.onWindowResize(this.onWindowResize, this, true);
};

Roo.extend(Roo.layout.Manager, Roo.util.Observable, {
    /**
     * Returns true if this layout is currently being updated
     * @return {Boolean}
     */
    isUpdating : function(){
        return this.updating; 
    },
    
    /**
     * Suspend the LayoutManager from doing auto-layouts while
     * making multiple add or remove calls
     */
    beginUpdate : function(){
        this.updating = true;    
    },
    
    /**
     * Restore auto-layouts and optionally disable the manager from performing a layout
     * @param {Boolean} noLayout true to disable a layout update 
     */
    endUpdate : function(noLayout){
        this.updating = false;
        if(!noLayout){
            this.layout();
        }    
    },
    
    layout: function(){
        
    },
    
    onRegionResized : function(region, newSize){
        this.fireEvent("regionresized", region, newSize);
        this.layout();
    },
    
    onRegionCollapsed : function(region){
        this.fireEvent("regioncollapsed", region);
    },
    
    onRegionExpanded : function(region){
        this.fireEvent("regionexpanded", region);
    },
        
    /**
     * Returns the size of the current view. This method normalizes document.body and element embedded layouts and
     * performs box-model adjustments.
     * @return {Object} The size as an object {width: (the width), height: (the height)}
     */
    getViewSize : function(){
        var size;
        if(this.el.dom != document.body){
            size = this.el.getSize();
        }else{
            size = {width: Roo.lib.Dom.getViewWidth(), height: Roo.lib.Dom.getViewHeight()};
        }
        size.width -= this.el.getBorderWidth("lr")-this.el.getPadding("lr");
        size.height -= this.el.getBorderWidth("tb")-this.el.getPadding("tb");
        return size;
    },
    
    /**
     * Returns the Element this layout is bound to.
     * @return {Roo.Element}
     */
    getEl : function(){
        return this.el;
    },
    
    /**
     * Returns the specified region.
     * @param {String} target The region key ('center', 'north', 'south', 'east' or 'west')
     * @return {Roo.layout.Region}
     */
    getRegion : function(target){
        return this.regions[target.toLowerCase()];
    },
    
    onWindowResize : function(){
        if(this.monitorWindowResize){
            this.layout();
        }
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.layout.Border
 * @extends Roo.layout.Manager
 * @children Roo.panel.Content
 * This class represents a common layout manager used in desktop applications. For screenshots and more details,
 * please see: <br><br>
 * <a href="http://www.jackslocum.com/yui/2006/10/19/cross-browser-web-20-layouts-with-yahoo-ui/">Cross Browser Layouts - Part 1</a><br>
 * <a href="http://www.jackslocum.com/yui/2006/10/28/cross-browser-web-20-layouts-part-2-ajax-feed-viewer-20/">Cross Browser Layouts - Part 2</a><br><br>
 * Example:
 <pre><code>
 var layout = new Roo.layout.Border(document.body, {
    north: {
        initialSize: 25,
        titlebar: false
    },
    west: {
        split:true,
        initialSize: 200,
        minSize: 175,
        maxSize: 400,
        titlebar: true,
        collapsible: true
    },
    east: {
        split:true,
        initialSize: 202,
        minSize: 175,
        maxSize: 400,
        titlebar: true,
        collapsible: true
    },
    south: {
        split:true,
        initialSize: 100,
        minSize: 100,
        maxSize: 200,
        titlebar: true,
        collapsible: true
    },
    center: {
        titlebar: true,
        autoScroll:true,
        resizeTabs: true,
        minTabWidth: 50,
        preferredTabWidth: 150
    }
});

// shorthand
var CP = Roo.panel.Content;

layout.beginUpdate();
layout.add("north", new CP("north", "North"));
layout.add("south", new CP("south", {title: "South", closable: true}));
layout.add("west", new CP("west", {title: "West"}));
layout.add("east", new CP("autoTabs", {title: "Auto Tabs", closable: true}));
layout.add("center", new CP("center1", {title: "Close Me", closable: true}));
layout.add("center", new CP("center2", {title: "Center Panel", closable: false}));
layout.getRegion("center").showPanel("center1");
layout.endUpdate();
</code></pre>

<b>The container the layout is rendered into can be either the body element or any other element.
If it is not the body element, the container needs to either be an absolute positioned element,
or you will need to add "position:relative" to the css of the container.  You will also need to specify
the container size if it is not the body element.</b>

* @constructor
* Create a new BorderLayout
* @param {String/HTMLElement/Element} container The container this layout is bound to
* @param {Object} config Configuration options
 */
Roo.layout.Border = function(container, config){
    config = config || {};
    Roo.layout.Border.superclass.constructor.call(this, container, config);
    this.factory = config.factory || Roo.layout.Border.RegionFactory;
    for(var i = 0, len = this.factory.validRegions.length; i < len; i++) {
    	var target = this.factory.validRegions[i];
    	if(config[target]){
    	    this.addRegion(target, config[target]);
    	}
    }
};

Roo.extend(Roo.layout.Border, Roo.layout.Manager, {
	
	/**
	 * @cfg {Roo.layout.Region} east
	 */
	/**
	 * @cfg {Roo.layout.Region} west
	 */
	/**
	 * @cfg {Roo.layout.Region} north
	 */
	/**
	 * @cfg {Roo.layout.Region} south
	 */
	/**
	 * @cfg {Roo.layout.Region} center
	 */
    /**
     * Creates and adds a new region if it doesn't already exist.
     * @param {String} target The target region key (north, south, east, west or center).
     * @param {Object} config The regions config object
     * @return {BorderLayoutRegion} The new region
     */
    addRegion : function(target, config){
        if(!this.regions[target]){
            var r = this.factory.create(target, this, config);
    	    this.bindRegion(target, r);
        }
        return this.regions[target];
    },

    // private (kinda)
    bindRegion : function(name, r){
        this.regions[name] = r;
        r.on("visibilitychange", this.layout, this);
        r.on("paneladded", this.layout, this);
        r.on("panelremoved", this.layout, this);
        r.on("invalidated", this.layout, this);
        r.on("resized", this.onRegionResized, this);
        r.on("collapsed", this.onRegionCollapsed, this);
        r.on("expanded", this.onRegionExpanded, this);
    },

    /**
     * Performs a layout update.
     */
    layout : function(){
        if(this.updating) {
            return;
        }
        var size = this.getViewSize();
        var w = size.width;
        var h = size.height;
        var centerW = w;
        var centerH = h;
        var centerY = 0;
        var centerX = 0;
        //var x = 0, y = 0;

        var rs = this.regions;
        var north = rs["north"];
        var south = rs["south"]; 
        var west = rs["west"];
        var east = rs["east"];
        var center = rs["center"];
        //if(this.hideOnLayout){ // not supported anymore
            //c.el.setStyle("display", "none");
        //}
        if(north && north.isVisible()){
            var b = north.getBox();
            var m = north.getMargins();
            b.width = w - (m.left+m.right);
            b.x = m.left;
            b.y = m.top;
            centerY = b.height + b.y + m.bottom;
            centerH -= centerY;
            north.updateBox(this.safeBox(b));
        }
        if(south && south.isVisible()){
            var b = south.getBox();
            var m = south.getMargins();
            b.width = w - (m.left+m.right);
            b.x = m.left;
            var totalHeight = (b.height + m.top + m.bottom);
            b.y = h - totalHeight + m.top;
            centerH -= totalHeight;
            south.updateBox(this.safeBox(b));
        }
        if(west && west.isVisible()){
            var b = west.getBox();
            var m = west.getMargins();
            b.height = centerH - (m.top+m.bottom);
            b.x = m.left;
            b.y = centerY + m.top;
            var totalWidth = (b.width + m.left + m.right);
            centerX += totalWidth;
            centerW -= totalWidth;
            west.updateBox(this.safeBox(b));
        }
        if(east && east.isVisible()){
            var b = east.getBox();
            var m = east.getMargins();
            b.height = centerH - (m.top+m.bottom);
            var totalWidth = (b.width + m.left + m.right);
            b.x = w - totalWidth + m.left;
            b.y = centerY + m.top;
            centerW -= totalWidth;
            east.updateBox(this.safeBox(b));
        }
        if(center){
            var m = center.getMargins();
            var centerBox = {
                x: centerX + m.left,
                y: centerY + m.top,
                width: centerW - (m.left+m.right),
                height: centerH - (m.top+m.bottom)
            };
            //if(this.hideOnLayout){
                //center.el.setStyle("display", "block");
            //}
            center.updateBox(this.safeBox(centerBox));
        }
        this.el.repaint();
        this.fireEvent("layout", this);
    },

    // private
    safeBox : function(box){
        box.width = Math.max(0, box.width);
        box.height = Math.max(0, box.height);
        return box;
    },

    /**
     * Adds a ContentPanel (or subclass) to this layout.
     * @param {String} target The target region key (north, south, east, west or center).
     * @param {Roo.panel.Content} panel The panel to add
     * @return {Roo.panel.Content} The added panel
     */
    add : function(target, panel){
         
        target = target.toLowerCase();
        return this.regions[target].add(panel);
    },

    /**
     * Remove a ContentPanel (or subclass) to this layout.
     * @param {String} target The target region key (north, south, east, west or center).
     * @param {Number/String/Roo.panel.Content} panel The index, id or panel to remove
     * @return {Roo.panel.Content} The removed panel
     */
    remove : function(target, panel){
        target = target.toLowerCase();
        return this.regions[target].remove(panel);
    },

    /**
     * Searches all regions for a panel with the specified id
     * @param {String} panelId
     * @return {Roo.panel.Content} The panel or null if it wasn't found
     */
    findPanel : function(panelId){
        var rs = this.regions;
        for(var target in rs){
            if(typeof rs[target] != "function"){
                var p = rs[target].getPanel(panelId);
                if(p){
                    return p;
                }
            }
        }
        return null;
    },

    /**
     * Searches all regions for a panel with the specified id and activates (shows) it.
     * @param {String/panel.Content} panelId The panels id or the panel itself
     * @return {Roo.panel.Content} The shown panel or null
     */
    showPanel : function(panelId) {
      var rs = this.regions;
      for(var target in rs){
         var r = rs[target];
         if(typeof r != "function"){
            if(r.hasPanel(panelId)){
               return r.showPanel(panelId);
            }
         }
      }
      return null;
   },

   /**
     * Restores this layout's state using Roo.state.Manager or the state provided by the passed provider.
     * @param {Roo.state.Provider} provider (optional) An alternate state provider
     */
    restoreState : function(provider){
        if(!provider){
            provider = Roo.state.Manager;
        }
        var sm = new Roo.layout.StateManager();
        sm.init(this, provider);
    },

    /**
     * Adds a batch of multiple ContentPanels dynamically by passing a special regions config object.  This config
     * object should contain properties for each region to add ContentPanels to, and each property's value should be
     * a valid ContentPanel config object.  Example:
     * <pre><code>
// Create the main layout
var layout = new Roo.layout.Border('main-ct', {
    west: {
        split:true,
        minSize: 175,
        titlebar: true
    },
    center: {
        title:'Components'
    }
}, 'main-ct');

// Create and add multiple ContentPanels at once via configs
layout.batchAdd({
   west: {
       id: 'source-files',
       autoCreate:true,
       title:'Ext Source Files',
       autoScroll:true,
       fitToFrame:true
   },
   center : {
       el: cview,
       autoScroll:true,
       fitToFrame:true,
       toolbar: tb,
       resizeEl:'cbody'
   }
});
</code></pre>
     * @param {Object} regions An object containing ContentPanel configs by region name
     */
    batchAdd : function(regions){
        this.beginUpdate();
        for(var rname in regions){
            var lr = this.regions[rname];
            if(lr){
                this.addTypedPanels(lr, regions[rname]);
            }
        }
        this.endUpdate();
    },

    // private
    addTypedPanels : function(lr, ps){
        if(typeof ps == 'string'){
            lr.add(new Roo.panel.Content(ps));
        }
        else if(ps instanceof Array){
            for(var i =0, len = ps.length; i < len; i++){
                this.addTypedPanels(lr, ps[i]);
            }
        }
        else if(!ps.events){ // raw config?
            var el = ps.el;
            delete ps.el; // prevent conflict
            lr.add(new Roo.panel.Content(el || Roo.id(), ps));
        }
        else {  // panel object assumed!
            lr.add(ps);
        }
    },
    /**
     * Adds a xtype elements to the layout.
     * <pre><code>

layout.addxtype({
       xtype : 'ContentPanel',
       region: 'west',
       items: [ .... ]
   }
);

layout.addxtype({
        xtype : 'NestedLayoutPanel',
        region: 'west',
        layout: {
           center: { },
           west: { }   
        },
        items : [ ... list of content panels or nested layout panels.. ]
   }
);
</code></pre>
     * @param {Object} cfg Xtype definition of item to add.
     */
    addxtype : function(cfg)
    {
        // basically accepts a pannel...
        // can accept a layout region..!?!?
        //Roo.log('Roo.layout.Border add ' + cfg.xtype)
        
        // if (!cfg.xtype.match(/Panel$/)) {
        //     return false;
        // }
        var ret = false;

        if (typeof(cfg.region) == 'undefined') {
            Roo.log("Failed to add Panel, region was not set");
            Roo.log(cfg);
            return false;
        }
        var region = cfg.region;
        delete cfg.region;
        
          
        var xitems = [];
        if (cfg.items) {
            xitems = cfg.items;
            delete cfg.items;
        }
        var nb = false;
        
        switch(cfg.xtype) 
        {
            case 'Content':
                if(cfg.autoCreate) {
                    ret = new Roo.panel[cfg.xtype](cfg); // new panel!!!!!
                } else {
                    var el = this.el.createChild();
                    ret = new Roo.panel[cfg.xtype](el, cfg); // new panel!!!!!
                }
                
                this.add(region, ret);
                break;
            case 'Grid':
                // needs grid and region
                
                //var el = this.getRegion(region).el.createChild();
                var el = this.el.createChild();
                // create the grid first...
                
                var grid = new Roo.grid[cfg.grid.xtype](el, cfg.grid);
                delete cfg.grid;
                if (region == 'center' && this.active ) {
                    cfg.background = false;
                }
                ret = new Roo.panel[cfg.xtype](grid, cfg); // new panel!!!!!
                
                this.add(region, ret);
                if (cfg.background) {
                    ret.on('activate', function(gp) {
                        if (!gp.grid.rendered) {
                            gp.grid.render();
                        }
                    });
                } else {
                    grid.render();
                }
                break;
            case 'NestedLayout': 
                // create a new Layout (which is  a Border Layout...
                var el = this.el.createChild();
                var clayout = cfg.layout;
                delete cfg.layout;
                clayout.items   = clayout.items  || [];
                // replace this exitems with the clayout ones..
                xitems = clayout.items;
                 
                
                if (region == 'center' && this.active && this.getRegion('center').panels.length < 1) {
                    cfg.background = false;
                }
                var layout = new Roo.layout.Border(el, clayout);
                
                ret = new Roo.panel[cfg.xtype](layout, cfg); // new panel!!!!!
                //console.log('adding nested layout panel '  + cfg.toSource());
                this.add(region, ret);
                nb = {}; /// find first...
                break;
                
            case 'Calendar':
                ret = new Roo.panel[cfg.xtype](cfg); // new panel!!!!!
                this.add(region, ret);
                break;
            case 'Tree': // our new panel!
                cfg.el = this.el.createChild();
                ret = new Roo.panel[cfg.xtype](cfg); // new panel!!!!!
                this.add(region, ret);
                break;
            case 'ContentPanel':
            case 'ScrollPanel':  // ContentPanel (el, cfg)
            case 'ViewPanel': 
                if(cfg.autoCreate) {
                    ret = new Roo[cfg.xtype](cfg); // new panel!!!!!
                } else {
                    var el = this.el.createChild();
                    ret = new Roo[cfg.xtype](el, cfg); // new panel!!!!!
                }
                
                this.add(region, ret);
                break;
            
            
            case 'TreePanel': // our new panel!
                cfg.el = this.el.createChild();
                ret = new Roo[cfg.xtype](cfg); // new panel!!!!!
                this.add(region, ret);
                break;
            
            case 'NestedLayoutPanel': 
                // create a new Layout (which is  a Border Layout...
                var el = this.el.createChild();
                var clayout = cfg.layout;
                delete cfg.layout;
                clayout.items   = clayout.items  || [];
                // replace this exitems with the clayout ones..
                xitems = clayout.items;
                 
                
                if (region == 'center' && this.active && this.getRegion('center').panels.length < 1) {
                    cfg.background = false;
                }
                var layout = new Roo.layout.Border(el, clayout);
                
                ret = new Roo[cfg.xtype](layout, cfg); // new panel!!!!!
                //console.log('adding nested layout panel '  + cfg.toSource());
                this.add(region, ret);
                nb = {}; /// find first...
                break;
                
            case 'GridPanel': 
            
                // needs grid and region
                
                //var el = this.getRegion(region).el.createChild();
                var el = this.el.createChild();
                // create the grid first...
                
                var grid = new Roo.grid[cfg.grid.xtype](el, cfg.grid);
                delete cfg.grid;
                if (region == 'center' && this.active ) {
                    cfg.background = false;
                }
                ret = new Roo[cfg.xtype](grid, cfg); // new panel!!!!!
                
                this.add(region, ret);
                if (cfg.background) {
                    ret.on('activate', function(gp) {
                        if (!gp.grid.rendered) {
                            gp.grid.render();
                        }
                    });
                } else {
                    grid.render();
                }
                break;
           
           
           
                
                
                
            default:
                if (typeof(Roo[cfg.xtype]) != 'undefined') {
                    
                    ret = new Roo[cfg.xtype](cfg); // new panel!!!!!
                    this.add(region, ret);
                } else {
                
                    alert("Can not add '" + cfg.xtype + "' to BorderLayout");
                    return null;
                }
                
             // GridPanel (grid, cfg)
            
        }
        this.beginUpdate();
        // add children..
        var region = '';
        var abn = {};
        Roo.each(xitems, function(i)  {
            region = nb && i.region ? i.region : false;
            
            var add = ret.addxtype(i);
           
            if (region) {
                nb[region] = nb[region] == undefined ? 0 : nb[region]+1;
                if (!i.background) {
                    abn[region] = nb[region] ;
                }
            }
            
        });
        this.endUpdate();

        // make the last non-background panel active..
        //if (nb) { Roo.log(abn); }
        if (nb) {
            
            for(var r in abn) {
                region = this.getRegion(r);
                if (region) {
                    // tried using nb[r], but it does not work..
                     
                    region.showPanel(abn[r]);
                   
                }
            }
        }
        return ret;
        
    }
});

/**
 * Shortcut for creating a new BorderLayout object and adding one or more ContentPanels to it in a single step, handling
 * the beginUpdate and endUpdate calls internally.  The key to this method is the <b>panels</b> property that can be
 * provided with each region config, which allows you to add ContentPanel configs in addition to the region configs
 * during creation.  The following code is equivalent to the constructor-based example at the beginning of this class:
 * <pre><code>
// shorthand
var CP = Roo.ContentPanel;

var layout = Roo.layout.Border.create({
    north: {
        initialSize: 25,
        titlebar: false,
        panels: [new CP("north", "North")]
    },
    west: {
        split:true,
        initialSize: 200,
        minSize: 175,
        maxSize: 400,
        titlebar: true,
        collapsible: true,
        panels: [new CP("west", {title: "West"})]
    },
    east: {
        split:true,
        initialSize: 202,
        minSize: 175,
        maxSize: 400,
        titlebar: true,
        collapsible: true,
        panels: [new CP("autoTabs", {title: "Auto Tabs", closable: true})]
    },
    south: {
        split:true,
        initialSize: 100,
        minSize: 100,
        maxSize: 200,
        titlebar: true,
        collapsible: true,
        panels: [new CP("south", {title: "South", closable: true})]
    },
    center: {
        titlebar: true,
        autoScroll:true,
        resizeTabs: true,
        minTabWidth: 50,
        preferredTabWidth: 150,
        panels: [
            new CP("center1", {title: "Close Me", closable: true}),
            new CP("center2", {title: "Center Panel", closable: false})
        ]
    }
}, document.body);

layout.getRegion("center").showPanel("center1");
</code></pre>
 * @param config
 * @param targetEl
 */
Roo.layout.Border.create = function(config, targetEl){
    var layout = new Roo.layout.Border(targetEl || document.body, config);
    layout.beginUpdate();
    var regions = Roo.layout.Border.RegionFactory.validRegions;
    for(var j = 0, jlen = regions.length; j < jlen; j++){
        var lr = regions[j];
        if(layout.regions[lr] && config[lr].panels){
            var r = layout.regions[lr];
            var ps = config[lr].panels;
            layout.addTypedPanels(r, ps);
        }
    }
    layout.endUpdate();
    return layout;
};

// private
Roo.layout.Border.RegionFactory = {
    // private
    validRegions : ["north","south","east","west","center"],

    // private
    create : function(target, mgr, config){
        target = target.toLowerCase();
        if(config.lightweight || config.basic){
            return new Roo.layout.BasicRegion(mgr, config, target);
        }
		var cn = target.charAt(0).toUpperCase() + target.slice(1);
		if (typeof (Roo.layout[cn]) == 'undefined') {
			throw 'Layout region "'+target+'" not supported.';
		}
		return new Roo.layout[cn](mgr, config);
         
        
    }
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.layout.BasicRegion
 * @extends Roo.util.Observable
 * This class represents a lightweight region in a layout manager. This region does not move dom nodes
 * and does not have a titlebar, tabs or any other features. All it does is size and position 
 * panels. To create a BasicLayoutRegion, add lightweight:true or basic:true to your regions config.
 */
Roo.layout.BasicRegion= function(mgr, config, pos, skipConfig){
    this.mgr = mgr;
    this.position  = pos;
    this.events = {
        /**
         * @scope Roo.layout.BasicRegion
         */
        
        /**
         * @event beforeremove
         * Fires before a panel is removed (or closed). To cancel the removal set "e.cancel = true" on the event argument.
         * @param {Roo.layout.Region} this
         * @param {Roo.panel.Content} panel The panel
         * @param {Object} e The cancel event object
         */
        "beforeremove" : true,
        /**
         * @event invalidated
         * Fires when the layout for this region is changed.
         * @param {Roo.layout.Region} this
         */
        "invalidated" : true,
        /**
         * @event visibilitychange
         * Fires when this region is shown or hidden 
         * @param {Roo.layout.Region} this
         * @param {Boolean} visibility true or false
         */
        "visibilitychange" : true,
        /**
         * @event paneladded
         * Fires when a panel is added. 
         * @param {Roo.layout.Region} this
         * @param {Roo.panel.Content} panel The panel
         */
        "paneladded" : true,
        /**
         * @event panelremoved
         * Fires when a panel is removed. 
         * @param {Roo.layout.Region} this
         * @param {Roo.panel.Content} panel The panel
         */
        "panelremoved" : true,
        /**
         * @event beforecollapse
         * Fires when this region before collapse.
         * @param {Roo.layout.Region} this
         */
        "beforecollapse" : true,
        /**
         * @event collapsed
         * Fires when this region is collapsed.
         * @param {Roo.layout.Region} this
         */
        "collapsed" : true,
        /**
         * @event expanded
         * Fires when this region is expanded.
         * @param {Roo.layout.Region} this
         */
        "expanded" : true,
        /**
         * @event slideshow
         * Fires when this region is slid into view.
         * @param {Roo.layout.Region} this
         */
        "slideshow" : true,
        /**
         * @event slidehide
         * Fires when this region slides out of view. 
         * @param {Roo.layout.Region} this
         */
        "slidehide" : true,
        /**
         * @event panelactivated
         * Fires when a panel is activated. 
         * @param {Roo.layout.Region} this
         * @param {Roo.panel.Content} panel The activated panel
         */
        "panelactivated" : true,
        /**
         * @event resized
         * Fires when the user resizes this region. 
         * @param {Roo.layout.Region} this
         * @param {Number} newSize The new size (width for east/west, height for north/south)
         */
        "resized" : true
    };
    /** A collection of panels in this region. @type Roo.util.MixedCollection */
    this.panels = new Roo.util.MixedCollection();
    this.panels.getKey = this.getPanelId.createDelegate(this);
    this.box = null;
    this.activePanel = null;
    // ensure listeners are added...
    
    if (config.listeners || config.events) {
        Roo.layout.BasicRegion.superclass.constructor.call(this, {
            listeners : config.listeners || {},
            events : config.events || {}
        });
    }
    
    if(skipConfig !== true){
        this.applyConfig(config);
    }
};

Roo.extend(Roo.layout.BasicRegion, Roo.util.Observable, {
    getPanelId : function(p){
        return p.getId();
    },
    
    applyConfig : function(config){
        this.margins = config.margins || this.margins || {top: 0, left: 0, right:0, bottom: 0};
        this.config = config;
        
    },
    
    /**
     * Resizes the region to the specified size. For vertical regions (west, east) this adjusts 
     * the width, for horizontal (north, south) the height.
     * @param {Number} newSize The new width or height
     */
    resizeTo : function(newSize){
        var el = this.el ? this.el :
                 (this.activePanel ? this.activePanel.getEl() : null);
        if(el){
            switch(this.position){
                case "east":
                case "west":
                    el.setWidth(newSize);
                    this.fireEvent("resized", this, newSize);
                break;
                case "north":
                case "south":
                    el.setHeight(newSize);
                    this.fireEvent("resized", this, newSize);
                break;                
            }
        }
    },
    
    getBox : function(){
        return this.activePanel ? this.activePanel.getEl().getBox(false, true) : null;
    },
    
    getMargins : function(){
        return this.margins;
    },
    
    updateBox : function(box){
        this.box = box;
        var el = this.activePanel.getEl();
        el.dom.style.left = box.x + "px";
        el.dom.style.top = box.y + "px";
        this.activePanel.setSize(box.width, box.height);
    },
    
    /**
     * Returns the container element for this region.
     * @return {Roo.Element}
     */
    getEl : function(){
        return this.activePanel;
    },
    
    /**
     * Returns true if this region is currently visible.
     * @return {Boolean}
     */
    isVisible : function(){
        return this.activePanel ? true : false;
    },
    
    setActivePanel : function(panel){
        panel = this.getPanel(panel);
        if(this.activePanel && this.activePanel != panel){
            this.activePanel.setActiveState(false);
            this.activePanel.getEl().setLeftTop(-10000,-10000);
        }
        this.activePanel = panel;
        panel.setActiveState(true);
        if(this.box){
            panel.setSize(this.box.width, this.box.height);
        }
        this.fireEvent("panelactivated", this, panel);
        this.fireEvent("invalidated");
    },
    
    /**
     * Show the specified panel.
     * @param {Number/String/panel.Content} panelId The panels index, id or the panel itself
     * @return {Roo.panel.Content} The shown panel or null
     */
    showPanel : function(panel){
        if(panel = this.getPanel(panel)){
            this.setActivePanel(panel);
        }
        return panel;
    },
    
    /**
     * Get the active panel for this region.
     * @return {Roo.panel.Content} The active panel or null
     */
    getActivePanel : function(){
        return this.activePanel;
    },
    
    /**
     * Add the passed ContentPanel(s)
     * @param {panel.Content...} panel The ContentPanel(s) to add (you can pass more than one)
     * @return {Roo.panel.Content} The panel added (if only one was added)
     */
    add : function(panel){
        if(arguments.length > 1){
            for(var i = 0, len = arguments.length; i < len; i++) {
            	this.add(arguments[i]);
            }
            return null;
        }
        if(this.hasPanel(panel)){
            this.showPanel(panel);
            return panel;
        }
        var el = panel.getEl();
        if(el.dom.parentNode != this.mgr.el.dom){
            this.mgr.el.dom.appendChild(el.dom);
        }
        if(panel.setRegion){
            panel.setRegion(this);
        }
        this.panels.add(panel);
        el.setStyle("position", "absolute");
        if(!panel.background){
            this.setActivePanel(panel);
            if(this.config.initialSize && this.panels.getCount()==1){
                this.resizeTo(this.config.initialSize);
            }
        }
        this.fireEvent("paneladded", this, panel);
        return panel;
    },
    
    /**
     * Returns true if the panel is in this region.
     * @param {Number/String/panel.Content} panel The panels index, id or the panel itself
     * @return {Boolean}
     */
    hasPanel : function(panel){
        if(typeof panel == "object"){ // must be panel obj
            panel = panel.getId();
        }
        return this.getPanel(panel) ? true : false;
    },
    
    /**
     * Removes the specified panel. If preservePanel is not true (either here or in the config), the panel is destroyed.
     * @param {Number/String/panel.Content} panel The panels index, id or the panel itself
     * @param {Boolean} preservePanel Overrides the config preservePanel option
     * @return {Roo.panel.Content} The panel that was removed
     */
    remove : function(panel, preservePanel){
        panel = this.getPanel(panel);
        if(!panel){
            return null;
        }
        var e = {};
        this.fireEvent("beforeremove", this, panel, e);
        if(e.cancel === true){
            return null;
        }
        var panelId = panel.getId();
        this.panels.removeKey(panelId);
        return panel;
    },
    
    /**
     * Returns the panel specified or null if it's not in this region.
     * @param {Number/String/panel.Content} panel The panels index, id or the panel itself
     * @return {Roo.panel.Content}
     */
    getPanel : function(id){
        if(typeof id == "object"){ // must be panel obj
            return id;
        }
        return this.panels.get(id);
    },
    
    /**
     * Returns this regions position (north/south/east/west/center).
     * @return {String} 
     */
    getPosition: function(){
        return this.position;    
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.layout.Region
 * @extends Roo.layout.BasicRegion
 * This class represents a region in a layout manager.
 * @cfg {Boolean}   collapsible     False to disable collapsing (defaults to true)
 * @cfg {Boolean}   collapsed       True to set the initial display to collapsed (defaults to false)
 * @cfg {Boolean}   floatable       False to disable floating (defaults to true)
 * @cfg {Object}    margins         Margins for the element (defaults to {top: 0, left: 0, right:0, bottom: 0})
 * @cfg {Object}    cmargins        Margins for the element when collapsed (defaults to: north/south {top: 2, left: 0, right:0, bottom: 2} or east/west {top: 0, left: 2, right:2, bottom: 0})
 * @cfg {String}    tabPosition     (top|bottom) "top" or "bottom" (defaults to "bottom")
 * @cfg {String}    collapsedTitle  Optional string message to display in the collapsed block of a north or south region
 * @cfg {Boolean}   alwaysShowTabs  True to always display tabs even when there is only 1 panel (defaults to false)
 * @cfg {Boolean}   autoScroll      True to enable overflow scrolling (defaults to false)
 * @cfg {Boolean}   titlebar        True to display a title bar (defaults to true)
 * @cfg {String}    title           The title for the region (overrides panel titles)
 * @cfg {Boolean}   animate         True to animate expand/collapse (defaults to false)
 * @cfg {Boolean}   autoHide        False to disable auto hiding when the mouse leaves the "floated" region (defaults to true)
 * @cfg {Boolean}   preservePanels  True to preserve removed panels so they can be readded later (defaults to false)
 * @cfg {Boolean}   closeOnTab      True to place the close icon on the tabs instead of the region titlebar (defaults to false)
 * @cfg {Boolean}   hideTabs        True to hide the tab strip (defaults to false)
 * @cfg {Boolean}   resizeTabs      True to enable automatic tab resizing. This will resize the tabs so they are all the same size and fit within
 *                      the space available, similar to FireFox 1.5 tabs (defaults to false)
 * @cfg {Number}    minTabWidth     The minimum tab width (defaults to 40)
 * @cfg {Number}    preferredTabWidth The preferred tab width (defaults to 150)
 * @cfg {Boolean}   showPin         True to show a pin button
 * @cfg {Boolean}   hidden          True to start the region hidden (defaults to false)
 * @cfg {Boolean}   hideWhenEmpty   True to hide the region when it has no panels
 * @cfg {Boolean}   disableTabTips  True to disable tab tooltips
 * @cfg {Number}    width           For East/West panels
 * @cfg {Number}    height          For North/South panels
 * @cfg {Boolean}   split           To show the splitter
 * @cfg {Boolean}   toolbar         xtype configuration for a toolbar - shows on right of tabbar
 */
Roo.layout.Region = function(mgr, config, pos){
    Roo.layout.Region.superclass.constructor.call(this, mgr, config, pos, true);
    var dh = Roo.DomHelper;
    /** This region's container element 
    * @type Roo.Element */
    this.el = dh.append(mgr.el.dom, {tag: "div", cls: "x-layout-panel x-layout-panel-" + this.position}, true);
    /** This region's title element 
    * @type Roo.Element */

    this.titleEl = dh.append(this.el.dom, {tag: "div", unselectable: "on", cls: "x-unselectable x-layout-panel-hd x-layout-title-"+this.position, children:[
        {tag: "span", cls: "x-unselectable x-layout-panel-hd-text", unselectable: "on", html: "&#160;"},
        {tag: "div", cls: "x-unselectable x-layout-panel-hd-tools", unselectable: "on"}
    ]}, true);
    this.titleEl.enableDisplayMode();
    /** This region's title text element 
    * @type HTMLElement */
    this.titleTextEl = this.titleEl.dom.firstChild;
    this.tools = Roo.get(this.titleEl.dom.childNodes[1], true);
    this.closeBtn = this.createTool(this.tools.dom, "x-layout-close");
    this.closeBtn.enableDisplayMode();
    this.closeBtn.on("click", this.closeClicked, this);
    this.closeBtn.hide();

    this.createBody(config);
    this.visible = true;
    this.collapsed = false;

    if(config.hideWhenEmpty){
        this.hide();
        this.on("paneladded", this.validateVisibility, this);
        this.on("panelremoved", this.validateVisibility, this);
    }
    this.applyConfig(config);
};

Roo.extend(Roo.layout.Region, Roo.layout.BasicRegion, {

    createBody : function(){
        /** This region's body element 
        * @type Roo.Element */
        this.bodyEl = this.el.createChild({tag: "div", cls: "x-layout-panel-body"});
    },

    applyConfig : function(c){
        if(c.collapsible && this.position != "center" && !this.collapsedEl){
            var dh = Roo.DomHelper;
            if(c.titlebar !== false){
                this.collapseBtn = this.createTool(this.tools.dom, "x-layout-collapse-"+this.position);
                this.collapseBtn.on("click", this.collapse, this);
                this.collapseBtn.enableDisplayMode();

                if(c.showPin === true || this.showPin){
                    this.stickBtn = this.createTool(this.tools.dom, "x-layout-stick");
                    this.stickBtn.enableDisplayMode();
                    this.stickBtn.on("click", this.expand, this);
                    this.stickBtn.hide();
                }

                this.slideInBtn = this.createTool(this.tools.dom, "x-layout-slide-in-"+this.position);
                this.slideInBtn.on("click", this.slideIn, this);
                this.slideInBtn.enableDisplayMode();
                this.slideInBtn.hide();

                // put buttons on top left for east region
                if(this.position == 'east') {
                    this.tools.setStyle('right', 'initial');
                    this.closeBtn.setStyle('float', 'left');
                    this.collapseBtn.setStyle('float', 'left');
                    if(this.stickBtn) {
                        this.stickBtn.setStyle('float', 'left');
                    }
                    this.slideInBtn.setStyle('float', 'left');
                    this.titleTextEl.style['marginLeft'] = '15px';
                }
            }
            /** This region's collapsed element
            * @type Roo.Element */
            this.collapsedEl = dh.append(this.mgr.el.dom, {cls: "x-layout-collapsed x-layout-collapsed-"+this.position, children:[
                {cls: "x-layout-collapsed-tools", children:[{cls: "x-layout-ctools-inner"}]}
            ]}, true);
            if(c.floatable !== false){
               this.collapsedEl.addClassOnOver("x-layout-collapsed-over");
               this.collapsedEl.on("click", this.collapseClick, this);
            }

            if(c.collapsedTitle && (this.position == "north" || this.position== "south")) {
                this.collapsedTitleTextEl = dh.append(this.collapsedEl.dom, {tag: "div", cls: "x-unselectable x-layout-panel-hd-text",
                   id: "message", unselectable: "on", style:{"float":"left"}});
               this.collapsedTitleTextEl.innerHTML = c.collapsedTitle;
             }
            this.expandBtn = this.createTool(this.collapsedEl.dom.firstChild.firstChild, "x-layout-expand-"+this.position);
            this.expandBtn.on("click", this.expand, this);
        }
        if(this.collapseBtn){
            this.collapseBtn.setVisible(c.collapsible == true);
        }
        this.cmargins = c.cmargins || this.cmargins ||
                         (this.position == "west" || this.position == "east" ?
                             {top: 0, left: 2, right:2, bottom: 0} :
                             {top: 2, left: 0, right:0, bottom: 2});
        this.margins = c.margins || this.margins || {top: 0, left: 0, right:0, bottom: 0};
        this.bottomTabs = c.tabPosition != "top";
        this.autoScroll = c.autoScroll || false;
        if(this.autoScroll){
            this.bodyEl.setStyle("overflow", "auto");
        }else{
            this.bodyEl.setStyle("overflow", "hidden");
        }
        //if(c.titlebar !== false){
            if((!c.titlebar && !c.title) || c.titlebar === false){
                this.titleEl.hide();
            }else{
                this.titleEl.show();
                if(c.title){
                    this.titleTextEl.innerHTML = c.title;
                }
            }
        //}
        this.duration = c.duration || .30;
        this.slideDuration = c.slideDuration || .45;
        this.autoHide = c.autoHide === false ? false : true;
        this.config = c;
        if(c.collapsed){
            this.collapse(true);
        }
        if(c.hidden){
            this.hide();
        }
    },
    /**
     * Returns true if this region is currently visible.
     * @return {Boolean}
     */
    isVisible : function(){
        return this.visible;
    },

    /**
     * Updates the title for collapsed north/south regions (used with {@link #collapsedTitle} config option)
     * @param {String} title (optional) The title text (accepts HTML markup, defaults to the numeric character reference for a non-breaking space, "&amp;#160;")
     */
    setCollapsedTitle : function(title){
        title = title || "&#160;";
        if(this.collapsedTitleTextEl){
            this.collapsedTitleTextEl.innerHTML = title;
        }
    },

    getBox : function(){
        var b;
        if(!this.collapsed){
            b = this.el.getBox(false, true);
        }else{
            b = this.collapsedEl.getBox(false, true);
        }
        return b;
    },

    getMargins : function(){
        return this.collapsed ? this.cmargins : this.margins;
    },

    highlight : function(){
        this.el.addClass("x-layout-panel-dragover");
    },

    unhighlight : function(){
        this.el.removeClass("x-layout-panel-dragover");
    },

    updateBox : function(box){
        this.box = box;
        if(!this.collapsed){
            this.el.dom.style.left = box.x + "px";
            this.el.dom.style.top = box.y + "px";
            this.updateBody(box.width, box.height);
        }else{
            this.collapsedEl.dom.style.left = box.x + "px";
            this.collapsedEl.dom.style.top = box.y + "px";
            this.collapsedEl.setSize(box.width, box.height);
        }
        if(this.tabs){
            this.tabs.autoSizeTabs();
        }
    },

    updateBody : function(w, h){
        if(w !== null){
            this.el.setWidth(w);
            w -= this.el.getBorderWidth("rl");
            if(this.config.adjustments){
                w += this.config.adjustments[0];
            }
        }
        if(h !== null){
            this.el.setHeight(h);
            h = this.titleEl && this.titleEl.isDisplayed() ? h - (this.titleEl.getHeight()||0) : h;
            h -= this.el.getBorderWidth("tb");
            if(this.config.adjustments){
                h += this.config.adjustments[1];
            }
            this.bodyEl.setHeight(h);
            if(this.tabs){
                h = this.tabs.syncHeight(h);
            }
        }
        if(this.panelSize){
            w = w !== null ? w : this.panelSize.width;
            h = h !== null ? h : this.panelSize.height;
        }
        if(this.activePanel){
            var el = this.activePanel.getEl();
            w = w !== null ? w : el.getWidth();
            h = h !== null ? h : el.getHeight();
            this.panelSize = {width: w, height: h};
            this.activePanel.setSize(w, h);
        }
        if(Roo.isIE && this.tabs){
            this.tabs.el.repaint();
        }
    },

    /**
     * Returns the container element for this region.
     * @return {Roo.Element}
     */
    getEl : function(){
        return this.el;
    },

    /**
     * Hides this region.
     */
    hide : function(){
        if(!this.collapsed){
            this.el.dom.style.left = "-2000px";
            this.el.hide();
        }else{
            this.collapsedEl.dom.style.left = "-2000px";
            this.collapsedEl.hide();
        }
        this.visible = false;
        this.fireEvent("visibilitychange", this, false);
    },

    /**
     * Shows this region if it was previously hidden.
     */
    show : function(){
        if(!this.collapsed){
            this.el.show();
        }else{
            this.collapsedEl.show();
        }
        this.visible = true;
        this.fireEvent("visibilitychange", this, true);
    },

    closeClicked : function(){
        if(this.activePanel){
            this.remove(this.activePanel);
        }
    },

    collapseClick : function(e){
        if(this.isSlid){
           e.stopPropagation();
           this.slideIn();
        }else{
           e.stopPropagation();
           this.slideOut();
        }
    },

    /**
     * Collapses this region.
     * @param {Boolean} skipAnim (optional) true to collapse the element without animation (if animate is true)
     */
    collapse : function(skipAnim, skipCheck){
        if(this.collapsed) {
            return;
        }
        
        if(skipCheck || this.fireEvent("beforecollapse", this) != false){
            
            this.collapsed = true;
            if(this.split){
                this.split.el.hide();
            }
            if(this.config.animate && skipAnim !== true){
                this.fireEvent("invalidated", this);
                this.animateCollapse();
            }else{
                this.el.setLocation(-20000,-20000);
                this.el.hide();
                this.collapsedEl.show();
                this.fireEvent("collapsed", this);
                this.fireEvent("invalidated", this);
            }
        }
        
    },

    animateCollapse : function(){
        // overridden
    },

    /**
     * Expands this region if it was previously collapsed.
     * @param {Roo.EventObject} e The event that triggered the expand (or null if calling manually)
     * @param {Boolean} skipAnim (optional) true to expand the element without animation (if animate is true)
     */
    expand : function(e, skipAnim){
        if(e) {
            e.stopPropagation();
        }
        if(!this.collapsed || this.el.hasActiveFx()) {
            return;
        }
        if(this.isSlid){
            this.afterSlideIn();
            skipAnim = true;
        }
        this.collapsed = false;
        if(this.config.animate && skipAnim !== true){
            this.animateExpand();
        }else{
            this.el.show();
            if(this.split){
                this.split.el.show();
            }
            this.collapsedEl.setLocation(-2000,-2000);
            this.collapsedEl.hide();
            this.fireEvent("invalidated", this);
            this.fireEvent("expanded", this);
        }
    },

    animateExpand : function(){
        // overridden
    },

    initTabs : function()
    {
        this.bodyEl.setStyle("overflow", "hidden");
        var ts = new Roo.panel.Tab(
                this.bodyEl.dom,
                {
                    tabPosition: this.bottomTabs ? 'bottom' : 'top',
                    disableTooltips: this.config.disableTabTips,
                    toolbar : this.config.toolbar
                }
        );
        if(this.config.hideTabs){
            ts.stripWrap.setDisplayed(false);
        }
        this.tabs = ts;
        ts.resizeTabs = this.config.resizeTabs === true;
        ts.minTabWidth = this.config.minTabWidth || 40;
        ts.maxTabWidth = this.config.maxTabWidth || 250;
        ts.preferredTabWidth = this.config.preferredTabWidth || 150;
        ts.monitorResize = false;
        ts.bodyEl.setStyle("overflow", this.config.autoScroll ? "auto" : "hidden");
        ts.bodyEl.addClass('x-layout-tabs-body');
        this.panels.each(this.initPanelAsTab, this);
    },

    initPanelAsTab : function(panel){
        var ti = this.tabs.addTab(panel.getEl().id, panel.getTitle(), null,
                    this.config.closeOnTab && panel.isClosable());
        if(panel.tabTip !== undefined){
            ti.setTooltip(panel.tabTip);
        }
        ti.on("activate", function(){
              this.setActivePanel(panel);
        }, this);
        if(this.config.closeOnTab){
            ti.on("beforeclose", function(t, e){
                e.cancel = true;
                this.remove(panel);
            }, this);
        }
        return ti;
    },

    updatePanelTitle : function(panel, title){
        if(this.activePanel == panel){
            this.updateTitle(title);
        }
        if(this.tabs){
            var ti = this.tabs.getTab(panel.getEl().id);
            ti.setText(title);
            if(panel.tabTip !== undefined){
                ti.setTooltip(panel.tabTip);
            }
        }
    },

    updateTitle : function(title){
        if(this.titleTextEl && !this.config.title){
            this.titleTextEl.innerHTML = (typeof title != "undefined" && title.length > 0 ? title : "&#160;");
        }
    },

    setActivePanel : function(panel){
        panel = this.getPanel(panel);
        if(this.activePanel && this.activePanel != panel){
            this.activePanel.setActiveState(false);
        }
        this.activePanel = panel;
        panel.setActiveState(true);
        if(this.panelSize){
            panel.setSize(this.panelSize.width, this.panelSize.height);
        }
        if(this.closeBtn){
            this.closeBtn.setVisible(!this.config.closeOnTab && !this.isSlid && panel.isClosable());
        }
        this.updateTitle(panel.getTitle());
        if(this.tabs){
            this.fireEvent("invalidated", this);
        }
        this.fireEvent("panelactivated", this, panel);
    },

    /**
     * Shows the specified panel.
     * @param {Number/String/panel.Content} panelId The panel's index, id or the panel itself
     * @return {Roo.panel.Content} The shown panel, or null if a panel could not be found from panelId
     */
    showPanel : function(panel)
    {
        panel = this.getPanel(panel);
        if(panel){
            if(this.tabs){
                var tab = this.tabs.getTab(panel.getEl().id);
                if(tab.isHidden()){
                    this.tabs.unhideTab(tab.id);
                }
                tab.activate();
            }else{
                this.setActivePanel(panel);
            }
        }
        return panel;
    },

    /**
     * Get the active panel for this region.
     * @return {Roo.panel.Content} The active panel or null
     */
    getActivePanel : function(){
        return this.activePanel;
    },

    validateVisibility : function(){
        if(this.panels.getCount() < 1){
            this.updateTitle("&#160;");
            this.closeBtn.hide();
            this.hide();
        }else{
            if(!this.isVisible()){
                this.show();
            }
        }
    },

    /**
     * Adds the passed ContentPanel(s) to this region.
     * @param {panel.Content...} panel The ContentPanel(s) to add (you can pass more than one)
     * @return {Roo.panel.Content} The panel added (if only one was added; null otherwise)
     */
    add : function(panel){
        if(arguments.length > 1){
            for(var i = 0, len = arguments.length; i < len; i++) {
                this.add(arguments[i]);
            }
            return null;
        }
        if(this.hasPanel(panel)){
            this.showPanel(panel);
            return panel;
        }
        panel.setRegion(this);
        this.panels.add(panel);
        if(this.panels.getCount() == 1 && !this.config.alwaysShowTabs){
            this.bodyEl.dom.appendChild(panel.getEl().dom);
            if(panel.background !== true){
                this.setActivePanel(panel);
            }
            this.fireEvent("paneladded", this, panel);
            return panel;
        }
        if(!this.tabs){
            this.initTabs();
        }else{
            this.initPanelAsTab(panel);
        }
        if(panel.background !== true){
            this.tabs.activate(panel.getEl().id);
        }
        this.fireEvent("paneladded", this, panel);
        return panel;
    },

    /**
     * Hides the tab for the specified panel.
     * @param {Number/String/panel.Content} panel The panel's index, id or the panel itself
     */
    hidePanel : function(panel){
        if(this.tabs && (panel = this.getPanel(panel))){
            this.tabs.hideTab(panel.getEl().id);
        }
    },

    /**
     * Unhides the tab for a previously hidden panel.
     * @param {Number/String/panel.Content} panel The panel's index, id or the panel itself
     */
    unhidePanel : function(panel){
        if(this.tabs && (panel = this.getPanel(panel))){
            this.tabs.unhideTab(panel.getEl().id);
        }
    },

    clearPanels : function(){
        while(this.panels.getCount() > 0){
             this.remove(this.panels.first());
        }
    },

    /**
     * Removes the specified panel. If preservePanel is not true (either here or in the config), the panel is destroyed.
     * @param {Number/String/panel.Content} panel The panel's index, id or the panel itself
     * @param {Boolean} preservePanel Overrides the config preservePanel option
     * @return {Roo.panel.Content} The panel that was removed
     */
    remove : function(panel, preservePanel){
        panel = this.getPanel(panel);
        if(!panel){
            return null;
        }
        var e = {};
        this.fireEvent("beforeremove", this, panel, e);
        if(e.cancel === true){
            return null;
        }
        preservePanel = (typeof preservePanel != "undefined" ? preservePanel : (this.config.preservePanels === true || panel.preserve === true));
        var panelId = panel.getId();
        this.panels.removeKey(panelId);
        if(preservePanel){
            document.body.appendChild(panel.getEl().dom);
        }
        if(this.tabs){
            this.tabs.removeTab(panel.getEl().id);
        }else if (!preservePanel){
            this.bodyEl.dom.removeChild(panel.getEl().dom);
        }
        if(this.panels.getCount() == 1 && this.tabs && !this.config.alwaysShowTabs){
            var p = this.panels.first();
            var tempEl = document.createElement("div"); // temp holder to keep IE from deleting the node
            tempEl.appendChild(p.getEl().dom);
            this.bodyEl.update("");
            this.bodyEl.dom.appendChild(p.getEl().dom);
            tempEl = null;
            this.updateTitle(p.getTitle());
            this.tabs = null;
            this.bodyEl.setStyle("overflow", this.config.autoScroll ? "auto" : "hidden");
            this.setActivePanel(p);
        }
        panel.setRegion(null);
        if(this.activePanel == panel){
            this.activePanel = null;
        }
        if(this.config.autoDestroy !== false && preservePanel !== true){
            try{panel.destroy();}catch(e){}
        }
        this.fireEvent("panelremoved", this, panel);
        return panel;
    },

    /**
     * Returns the TabPanel component used by this region
     * @return {Roo.panel.Tab}
     */
    getTabs : function(){
        return this.tabs;
    },

    createTool : function(parentEl, className){
        var btn = Roo.DomHelper.append(parentEl, {tag: "div", cls: "x-layout-tools-button",
            children: [{tag: "div", cls: "x-layout-tools-button-inner " + className, html: "&#160;"}]}, true);
        btn.addClassOnOver("x-layout-tools-button-over");
        return btn;
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 


/**
 * @class Roo.layout.SplitRegion
 * @extends Roo.layout.Region
 * Adds a splitbar and other (private) useful functionality to a {@link Roo.layout.Region}.
 */
Roo.layout.SplitRegion = function(mgr, config, pos, cursor){
    this.cursor = cursor;
    Roo.layout.SplitRegion.superclass.constructor.call(this, mgr, config, pos);
};

Roo.extend(Roo.layout.SplitRegion, Roo.layout.Region, {
    splitTip : "Drag to resize.",
    collapsibleSplitTip : "Drag to resize. Double click to hide.",
    useSplitTips : false,

    applyConfig : function(config){
        Roo.layout.SplitRegion.superclass.applyConfig.call(this, config);
        if(config.split){
            if(!this.split){
                var splitEl = Roo.DomHelper.append(this.mgr.el.dom, 
                        {tag: "div", id: this.el.id + "-split", cls: "x-layout-split x-layout-split-"+this.position, html: "&#160;"});
                /** The SplitBar for this region 
                * @type Roo.SplitBar */
                this.split = new Roo.SplitBar(splitEl, this.el, this.orientation);
                this.split.on("moved", this.onSplitMove, this);
                this.split.useShim = config.useShim === true;
                this.split.getMaximumSize = this[this.position == 'north' || this.position == 'south' ? 'getVMaxSize' : 'getHMaxSize'].createDelegate(this);
                if(this.useSplitTips){
                    this.split.el.dom.title = config.collapsible ? this.collapsibleSplitTip : this.splitTip;
                }
                if(config.collapsible){
                    this.split.el.on("dblclick", this.collapse,  this);
                }
            }
            if(typeof config.minSize != "undefined"){
                this.split.minSize = config.minSize;
            }
            if(typeof config.maxSize != "undefined"){
                this.split.maxSize = config.maxSize;
            }
            if(config.hideWhenEmpty || config.hidden || config.collapsed){
                this.hideSplitter();
            }
        }
    },

    getHMaxSize : function(){
         var cmax = this.config.maxSize || 10000;
         var center = this.mgr.getRegion("center");
         return Math.min(cmax, (this.el.getWidth()+center.getEl().getWidth())-center.getMinWidth());
    },

    getVMaxSize : function(){
         var cmax = this.config.maxSize || 10000;
         var center = this.mgr.getRegion("center");
         return Math.min(cmax, (this.el.getHeight()+center.getEl().getHeight())-center.getMinHeight());
    },

    onSplitMove : function(split, newSize){
        this.fireEvent("resized", this, newSize);
    },
    
    /** 
     * Returns the {@link Roo.SplitBar} for this region.
     * @return {Roo.SplitBar}
     */
    getSplitBar : function(){
        return this.split;
    },
    
    hide : function(){
        this.hideSplitter();
        Roo.layout.SplitRegion.superclass.hide.call(this);
    },

    hideSplitter : function(){
        if(this.split){
            this.split.el.setLocation(-2000,-2000);
            this.split.el.hide();
        }
    },

    show : function(){
        if(this.split){
            this.split.el.show();
        }
        Roo.layout.SplitRegion.superclass.show.call(this);
    },
    
    beforeSlide: function(){
        if(Roo.isGecko){// firefox overflow auto bug workaround
            this.bodyEl.clip();
            if(this.tabs) {
                this.tabs.bodyEl.clip();
            }
            if(this.activePanel){
                this.activePanel.getEl().clip();
                
                if(this.activePanel.beforeSlide){
                    this.activePanel.beforeSlide();
                }
            }
        }
    },
    
    afterSlide : function(){
        if(Roo.isGecko){// firefox overflow auto bug workaround
            this.bodyEl.unclip();
            if(this.tabs) {
                this.tabs.bodyEl.unclip();
            }
            if(this.activePanel){
                this.activePanel.getEl().unclip();
                if(this.activePanel.afterSlide){
                    this.activePanel.afterSlide();
                }
            }
        }
    },

    initAutoHide : function(){
        if(this.autoHide !== false){
            if(!this.autoHideHd){
                var st = new Roo.util.DelayedTask(this.slideIn, this);
                this.autoHideHd = {
                    "mouseout": function(e){
                        if(!e.within(this.el, true)){
                            st.delay(500);
                        }
                    },
                    "mouseover" : function(e){
                        st.cancel();
                    },
                    scope : this
                };
            }
            this.el.on(this.autoHideHd);
        }
    },

    clearAutoHide : function(){
        if(this.autoHide !== false){
            this.el.un("mouseout", this.autoHideHd.mouseout);
            this.el.un("mouseover", this.autoHideHd.mouseover);
        }
    },

    clearMonitor : function(){
        Roo.get(document).un("click", this.slideInIf, this);
    },

    // these names are backwards but not changed for compat
    slideOut : function(){
        if(this.isSlid || this.el.hasActiveFx()){
            return;
        }
        this.isSlid = true;
        if(this.collapseBtn){
            this.collapseBtn.hide();
        }
        if(this.slideInBtn) {
            this.slideInBtn.show();
        }
        this.closeBtnState = this.closeBtn.getStyle('display');
        this.closeBtn.hide();
        if(this.stickBtn){
            this.stickBtn.show();
        }
        this.el.show();
        this.el.alignTo(this.collapsedEl, this.getCollapseAnchor());
        this.beforeSlide();
        this.el.setStyle("z-index", 10001);
        this.el.slideIn(this.getSlideAnchor(), {
            callback: function(){
                this.afterSlide();
                this.initAutoHide();
                Roo.get(document).on("click", this.slideInIf, this);
                this.fireEvent("slideshow", this);
            },
            scope: this,
            block: true
        });
    },

    afterSlideIn : function(){
        this.clearAutoHide();
        this.isSlid = false;
        this.clearMonitor();
        this.el.setStyle("z-index", "");
        if(this.collapseBtn){
            this.collapseBtn.show();
        }
        if(this.slideInBtn) {
            this.slideInBtn.hide();
        }
        this.closeBtn.setStyle('display', this.closeBtnState);
        if(this.stickBtn){
            this.stickBtn.hide();
        }
        this.fireEvent("slidehide", this);
    },

    slideIn : function(cb){
        if(!this.isSlid || this.el.hasActiveFx()){
            Roo.callback(cb);
            return;
        }
        this.isSlid = false;
        this.beforeSlide();
        this.el.slideOut(this.getSlideAnchor(), {
            callback: function(){
                this.el.setLeftTop(-10000, -10000);
                this.afterSlide();
                this.afterSlideIn();
                Roo.callback(cb);
            },
            scope: this,
            block: true
        });
    },
    
    slideInIf : function(e){
        if(!e.within(this.el)){
            this.slideIn();
        }
    },

    animateCollapse : function(){
        this.beforeSlide();
        this.el.setStyle("z-index", 20000);
        var anchor = this.getSlideAnchor();
        this.el.slideOut(anchor, {
            callback : function(){
                this.el.setStyle("z-index", "");
                this.collapsedEl.slideIn(anchor, {duration:.3});
                this.afterSlide();
                this.el.setLocation(-10000,-10000);
                this.el.hide();
                this.fireEvent("collapsed", this);
            },
            scope: this,
            block: true
        });
    },

    animateExpand : function(){
        this.beforeSlide();
        this.el.alignTo(this.collapsedEl, this.getCollapseAnchor(), this.getExpandAdj());
        this.el.setStyle("z-index", 20000);
        this.collapsedEl.hide({
            duration:.1
        });
        this.el.slideIn(this.getSlideAnchor(), {
            callback : function(){
                this.el.setStyle("z-index", "");
                this.afterSlide();
                if(this.split){
                    this.split.el.show();
                }
                this.fireEvent("invalidated", this);
                this.fireEvent("expanded", this);
            },
            scope: this,
            block: true
        });
    },

    anchors : {
        "west" : "left",
        "east" : "right",
        "north" : "top",
        "south" : "bottom"
    },

    sanchors : {
        "west" : "l",
        "east" : "r",
        "north" : "t",
        "south" : "b"
    },

    canchors : {
        "west" : "tl-tr",
        "east" : "tr-tl",
        "north" : "tl-bl",
        "south" : "bl-tl"
    },

    getAnchor : function(){
        return this.anchors[this.position];
    },

    getCollapseAnchor : function(){
        return this.canchors[this.position];
    },

    getSlideAnchor : function(){
        return this.sanchors[this.position];
    },

    getAlignAdj : function(){
        var cm = this.cmargins;
        switch(this.position){
            case "west":
                return [0, 0];
            break;
            case "east":
                return [0, 0];
            break;
            case "north":
                return [0, 0];
            break;
            case "south":
                return [0, 0];
            break;
        }
    },

    getExpandAdj : function(){
        var c = this.collapsedEl, cm = this.cmargins;
        switch(this.position){
            case "west":
                return [-(cm.right+c.getWidth()+cm.left), 0];
            break;
            case "east":
                return [cm.right+c.getWidth()+cm.left, 0];
            break;
            case "north":
                return [0, -(cm.top+cm.bottom+c.getHeight())];
            break;
            case "south":
                return [0, cm.top+cm.bottom+c.getHeight()];
            break;
        }
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/*
 * These classes are private internal classes
 */
Roo.layout.Center = function(mgr, config){
    Roo.layout.Region.call(this, mgr, config, "center");
    this.visible = true;
    this.minWidth = config.minWidth || 20;
    this.minHeight = config.minHeight || 20;
};

Roo.extend(Roo.layout.Center, Roo.layout.Region, {
    hide : function(){
        // center panel can't be hidden
    },
    
    show : function(){
        // center panel can't be hidden
    },
    
    getMinWidth: function(){
        return this.minWidth;
    },
    
    getMinHeight: function(){
        return this.minHeight;
    }
});
Roo.layout.West = function(mgr, config){
    Roo.layout.SplitRegion.call(this, mgr, config, "west", "w-resize");
    if(this.split){
        this.split.placement = Roo.SplitBar.LEFT;
        this.split.orientation = Roo.SplitBar.HORIZONTAL;
        this.split.el.addClass("x-layout-split-h");
    }
    var size = config.initialSize || config.width;
    if(typeof size != "undefined"){
        this.el.setWidth(size);
    }
};
Roo.extend(Roo.layout.West, Roo.layout.SplitRegion, {
    orientation: Roo.SplitBar.HORIZONTAL,
    getBox : function(){
        if(this.collapsed){
            return this.collapsedEl.getBox();
        }
        var box = this.el.getBox();
        if(this.split){
            box.width += this.split.el.getWidth();
        }
        return box;
    },
    
    updateBox : function(box){
        if(this.split && !this.collapsed){
            var sw = this.split.el.getWidth();
            box.width -= sw;
            this.split.el.setLeft(box.x+box.width);
            this.split.el.setTop(box.y);
            this.split.el.setHeight(box.height);
        }
        if(this.collapsed){
            this.updateBody(null, box.height);
        }
        Roo.layout.Region.prototype.updateBox.call(this, box);
    }
});
Roo.layout.East = function(mgr, config){
    Roo.layout.SplitRegion.call(this, mgr, config, "east", "e-resize");
    if(this.split){
        this.split.placement = Roo.SplitBar.RIGHT;
        this.split.orientation = Roo.SplitBar.HORIZONTAL;
        this.split.el.addClass("x-layout-split-h");
    }
    var size = config.initialSize || config.width;
    if(typeof size != "undefined"){
        this.el.setWidth(size);
    }
};
Roo.extend(Roo.layout.East, Roo.layout.SplitRegion, {
    orientation: Roo.SplitBar.HORIZONTAL,
    getBox : function(){
        if(this.collapsed){
            return this.collapsedEl.getBox();
        }
        var box = this.el.getBox();
        if(this.split){
            var sw = this.split.el.getWidth();
            box.width += sw;
            box.x -= sw;
        }
        return box;
    },

    updateBox : function(box){
        if(this.split && !this.collapsed){
            var sw = this.split.el.getWidth();
            box.width -= sw;
            this.split.el.setLeft(box.x);
            this.split.el.setTop(box.y);
            this.split.el.setHeight(box.height);
            box.x += sw;
        }
        if(this.collapsed){
            this.updateBody(null, box.height);
        }
        Roo.layout.Region.prototype.updateBox.call(this, box);
    }
});Roo.layout.South = function(mgr, config){
    Roo.layout.SplitRegion.call(this, mgr, config, "south", "s-resize");
    if(this.split){
        this.split.placement = Roo.SplitBar.BOTTOM;
        this.split.orientation = Roo.SplitBar.VERTICAL;
        this.split.el.addClass("x-layout-split-v");
    }
    var size = config.initialSize || config.height;
    if(typeof size != "undefined"){
        this.el.setHeight(size);
    }
};
Roo.extend(Roo.layout.South, Roo.layout.SplitRegion, {
    orientation: Roo.SplitBar.VERTICAL,
    getBox : function(){
        if(this.collapsed){
            return this.collapsedEl.getBox();
        }
        var box = this.el.getBox();
        if(this.split){
            var sh = this.split.el.getHeight();
            box.height += sh;
            box.y -= sh;
        }
        return box;
    },
    
    updateBox : function(box){
        if(this.split && !this.collapsed){
            var sh = this.split.el.getHeight();
            box.height -= sh;
            box.y += sh;
            this.split.el.setLeft(box.x);
            this.split.el.setTop(box.y-sh);
            this.split.el.setWidth(box.width);
        }
        if(this.collapsed){
            this.updateBody(box.width, null);
        }
        Roo.layout.Region.prototype.updateBox.call(this, box);
    }
});


Roo.layout.North = function(mgr, config){
    Roo.layout.Region.call(this, mgr, config, "north", "n-resize");
    if(this.split){
        this.split.placement = Roo.SplitBar.TOP;
        this.split.orientation = Roo.SplitBar.VERTICAL;
        this.split.el.addClass("x-layout-split-v");
    }
    var size = config.initialSize || config.height;
    if(typeof size != "undefined"){
        this.el.setHeight(size);
    }
};
Roo.extend(Roo.layout.North, Roo.layout.SplitRegion, {
    orientation: Roo.SplitBar.VERTICAL,
    getBox : function(){
        if(this.collapsed){
            return this.collapsedEl.getBox();
        }
        var box = this.el.getBox();
        if(this.split){
            box.height += this.split.el.getHeight();
        }
        return box;
    },
    
    updateBox : function(box){
        if(this.split && !this.collapsed){
            box.height -= this.split.el.getHeight();
            this.split.el.setLeft(box.x);
            this.split.el.setTop(box.y+box.height);
            this.split.el.setWidth(box.width);
        }
        if(this.collapsed){
            this.updateBody(box.width, null);
        }
        Roo.layout.Region.prototype.updateBox.call(this, box);
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
 
/*
 * Private internal class for reading and applying state
 */
Roo.layout.StateManager = function(layout){
     // default empty state
     this.state = {
        north: {},
        south: {},
        east: {},
        west: {}       
    };
};

Roo.layout.StateManager.prototype = {
    init : function(layout, provider){
        this.provider = provider;
        var state = provider.get(layout.id+"-layout-state");
        if(state){
            var wasUpdating = layout.isUpdating();
            if(!wasUpdating){
                layout.beginUpdate();
            }
            for(var key in state){
                if(typeof state[key] != "function"){
                    var rstate = state[key];
                    var r = layout.getRegion(key);
                    if(r && rstate){
                        if(rstate.size){
                            r.resizeTo(rstate.size);
                        }
                        if(rstate.collapsed == true){
                            r.collapse(true);
                        }else{
                            r.expand(null, true);
                        }
                    }
                }
            }
            if(!wasUpdating){
                layout.endUpdate();
            }
            this.state = state; 
        }
        this.layout = layout;
        layout.on("regionresized", this.onRegionResized, this);
        layout.on("regioncollapsed", this.onRegionCollapsed, this);
        layout.on("regionexpanded", this.onRegionExpanded, this);
    },
    
    storeState : function(){
        this.provider.set(this.layout.id+"-layout-state", this.state);
    },
    
    onRegionResized : function(region, newSize){
        this.state[region.getPosition()].size = newSize;
        this.storeState();
    },
    
    onRegionCollapsed : function(region){
        this.state[region.getPosition()].collapsed = true;
        this.storeState();
    },
    
    onRegionExpanded : function(region){
        this.state[region.getPosition()].collapsed = false;
        this.storeState();
    }
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.panel.Content
 * @extends Roo.util.Observable
 * @children Roo.form.Form Roo.JsonView Roo.View
 * @parent Roo.layout.Border Roo.LayoutDialog builder
 * A basic Content Panel element.
 * @cfg {Boolean}   fitToFrame    True for this panel to adjust its size to fit when the region resizes  (defaults to false)
 * @cfg {Boolean}   fitContainer   When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)
 * @cfg {Boolean|Object} autoCreate True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create
 * @cfg {Boolean}   closable      True if the panel can be closed/removed
 * @cfg {Boolean}   background    True if the panel should not be activated when it is added (defaults to false)
 * @cfg {String|HTMLElement|Element} resizeEl An element to resize if {@link #fitToFrame} is true (instead of this panel's element)
 * @cfg {Roo.Toolbar}   toolbar       A toolbar for this panel
 * @cfg {Boolean} autoScroll    True to scroll overflow in this panel (use with {@link #fitToFrame})
 * @cfg {String} title          The title for this panel
 * @cfg {Array} adjustments     Values to <b>add</b> to the width/height when doing a {@link #fitToFrame} (default is [0, 0])
 * @cfg {String} url            Calls {@link #setUrl} with this value
 * @cfg {String} region (center|north|south|east|west) [required] which region to put this panel on (when used with xtype constructors)
 * @cfg {String|Object} params  When used with {@link #url}, calls {@link #setUrl} with this value
 * @cfg {Boolean} loadOnce      When used with {@link #url}, calls {@link #setUrl} with this value
 * @cfg {String}    content        Raw content to fill content panel with (uses setContent on construction.)
 * @cfg {String}    style  Extra style to add to the content panel
 * @cfg {Roo.menu.Menu} menu  popup menu

 * @constructor
 * Create a new Content Panel.
 * @param {String/HTMLElement/Roo.Element} el The container element for this panel
 * @param {String/Object} config A string to set only the title or a config object
 * @param {String} content (optional) Set the HTML content for this panel
 * @param {String} region (optional) Used by xtype constructors to add to regions. (values center,east,west,south,north)
 */
Roo.panel.Content = function(el, config, content){
    
    /*
    if(el.autoCreate || el.xtype){ // xtype is available if this is called from factory
        config = el;
        el = Roo.id();
    }
    if (config && config.parentLayout) { 
        el = config.parentLayout.el.createChild(); 
    }
    */
    if(el.autoCreate){ // xtype is available if this is called from factory
        config = el;
        el = Roo.id();
    }
    this.el = Roo.get(el);
    if(!this.el && config && config.autoCreate){
        if(typeof config.autoCreate == "object"){
            if(!config.autoCreate.id){
                config.autoCreate.id = config.id||el;
            }
            this.el = Roo.DomHelper.append(document.body,
                        config.autoCreate, true);
        }else{
            this.el = Roo.DomHelper.append(document.body,
                        {tag: "div", cls: "x-layout-inactive-content", id: config.id||el}, true);
        }
    }
    
    
    this.closable = false;
    this.loaded = false;
    this.active = false;
    if(typeof config == "string"){
        this.title = config;
    }else{
        Roo.apply(this, config);
    }
    
    if (this.toolbar && !this.toolbar.el && this.toolbar.xtype) {
        this.wrapEl = this.el.wrap();
        this.toolbar.container = this.el.insertSibling(false, 'before');
        this.toolbar = new Roo.Toolbar(this.toolbar);
    }
    
    // xtype created footer. - not sure if will work as we normally have to render first..
    if (this.footer && !this.footer.el && this.footer.xtype) {
        if (!this.wrapEl) {
            this.wrapEl = this.el.wrap();
        }
    
        this.footer.container = this.wrapEl.createChild();
         
        this.footer = Roo.factory(this.footer, Roo);
        
    }
    
    if(this.resizeEl){
        this.resizeEl = Roo.get(this.resizeEl, true);
    }else{
        this.resizeEl = this.el;
    }
    // handle view.xtype
    
 
    
    
    this.addEvents({
        /**
         * @event activate
         * Fires when this panel is activated. 
         * @param {Roo.panel.Content} this
         */
        "activate" : true,
        /**
         * @event deactivate
         * Fires when this panel is activated. 
         * @param {Roo.panel.Content} this
         */
        "deactivate" : true,

        /**
         * @event resize
         * Fires when this panel is resized if fitToFrame is true.
         * @param {Roo.panel.Content} this
         * @param {Number} width The width after any component adjustments
         * @param {Number} height The height after any component adjustments
         */
        "resize" : true,
        
         /**
         * @event render
         * Fires when this tab is created
         * @param {Roo.panel.Content} this
         */
        "render" : true
         
        
    });
    

    
    
    if(this.autoScroll){
        this.resizeEl.setStyle("overflow", "auto");
    } else {
        // fix randome scrolling
        this.el.on('scroll', function() {
            Roo.log('fix random scolling');
            this.scrollTo('top',0); 
        });
    }
    content = content || this.content;
    if(content){
        this.setContent(content);
    }
    if(config && config.url){
        this.setUrl(this.url, this.params, this.loadOnce);
    }
    
    
    
    Roo.panel.Content.superclass.constructor.call(this);
    
    if (this.view && typeof(this.view.xtype) != 'undefined') {
        this.view.el = this.el.appendChild(document.createElement("div"));
        this.view = Roo.factory(this.view); 
        this.view.render  &&  this.view.render(false, '');  
    }
    
    
    this.fireEvent('render', this);
};

Roo.extend(Roo.panel.Content, Roo.util.Observable, {
    tabTip:'',
    setRegion : function(region){
        this.region = region;
        if(region){
           this.el.replaceClass("x-layout-inactive-content", "x-layout-active-content");
        }else{
           this.el.replaceClass("x-layout-active-content", "x-layout-inactive-content");
        } 
    },
    
    /**
     * Returns the toolbar for this Panel if one was configured. 
     * @return {Roo.Toolbar} 
     */
    getToolbar : function(){
        return this.toolbar;
    },
    
    setActiveState : function(active){
        this.active = active;
        if(!active){
            this.fireEvent("deactivate", this);
        }else{
            this.fireEvent("activate", this);
        }
    },
    /**
     * Updates this panel's element
     * @param {String} content The new content
     * @param {Boolean} loadScripts (optional) true to look for and process scripts
    */
    setContent : function(content, loadScripts){
        this.el.update(content, loadScripts);
    },

    ignoreResize : function(w, h){
        if(this.lastSize && this.lastSize.width == w && this.lastSize.height == h){
            return true;
        }else{
            this.lastSize = {width: w, height: h};
            return false;
        }
    },
    /**
     * Get the {@link Roo.UpdateManager} for this panel. Enables you to perform Ajax updates.
     * @return {Roo.UpdateManager} The UpdateManager
     */
    getUpdateManager : function(){
        return this.el.getUpdateManager();
    },
     /**
     * Loads this content panel immediately with content from XHR. Note: to delay loading until the panel is activated, use {@link #setUrl}.
     * @param {Object/String/Function} url The url for this request or a function to call to get the url or a config object containing any of the following options:
<pre><code>
panel.load({
    url: "your-url.php",
    params: {param1: "foo", param2: "bar"}, // or a URL encoded string
    callback: yourFunction,
    scope: yourObject, //(optional scope)
    discardUrl: false,
    nocache: false,
    text: "Loading...",
    timeout: 30,
    scripts: false
});
</code></pre>
     * The only required property is <i>url</i>. The optional properties <i>nocache</i>, <i>text</i> and <i>scripts</i>
     * are shorthand for <i>disableCaching</i>, <i>indicatorText</i> and <i>loadScripts</i> and are used to set their associated property on this panel UpdateManager instance.
     * @param {String/Object} params (optional) The parameters to pass as either a URL encoded string "param1=1&amp;param2=2" or an object {param1: 1, param2: 2}
     * @param {Function} callback (optional) Callback when transaction is complete -- called with signature (oElement, bSuccess, oResponse)
     * @param {Boolean} discardUrl (optional) By default when you execute an update the defaultUrl is changed to the last used URL. If true, it will not store the URL.
     * @return {Roo.panel.Content} this
     */
    load : function(){
        var um = this.el.getUpdateManager();
        um.update.apply(um, arguments);
        return this;
    },


    /**
     * Set a URL to be used to load the content for this panel. When this panel is activated, the content will be loaded from that URL.
     * @param {String/Function} url The URL to load the content from or a function to call to get the URL
     * @param {String/Object} params (optional) The string params for the update call or an object of the params. See {@link Roo.UpdateManager#update} for more details. (Defaults to null)
     * @param {Boolean} loadOnce (optional) Whether to only load the content once. If this is false it makes the Ajax call every time this panel is activated. (Defaults to false)
     * @return {Roo.UpdateManager} The UpdateManager
     */
    setUrl : function(url, params, loadOnce){
        if(this.refreshDelegate){
            this.removeListener("activate", this.refreshDelegate);
        }
        this.refreshDelegate = this._handleRefresh.createDelegate(this, [url, params, loadOnce]);
        this.on("activate", this.refreshDelegate);
        return this.el.getUpdateManager();
    },
    
    _handleRefresh : function(url, params, loadOnce){
        if(!loadOnce || !this.loaded){
            var updater = this.el.getUpdateManager();
            updater.update(url, params, this._setLoaded.createDelegate(this));
        }
    },
    
    _setLoaded : function(){
        this.loaded = true;
    }, 
    
    /**
     * Returns this panel's id
     * @return {String} 
     */
    getId : function(){
        return this.el.id;
    },
    
    /** 
     * Returns this panel's element - used by regiosn to add.
     * @return {Roo.Element} 
     */
    getEl : function(){
        return this.wrapEl || this.el;
    },
    
    adjustForComponents : function(width, height)
    {
        //Roo.log('adjustForComponents ');
        if(this.resizeEl != this.el){
            width -= this.el.getFrameWidth('lr');
            height -= this.el.getFrameWidth('tb');
        }
        if(this.toolbar){
            var te = this.toolbar.getEl();
            height -= te.getHeight();
            te.setWidth(width);
        }
        if(this.footer){
            var te = this.footer.getEl();
            //Roo.log("footer:" + te.getHeight());
            
            height -= te.getHeight();
            te.setWidth(width);
        }
        
        
        if(this.adjustments){
            width += this.adjustments[0];
            height += this.adjustments[1];
        }
        return {"width": width, "height": height};
    },
    
    setSize : function(width, height){
        if(this.fitToFrame && !this.ignoreResize(width, height)){
            if(this.fitContainer && this.resizeEl != this.el){
                this.el.setSize(width, height);
            }
            var size = this.adjustForComponents(width, height);
            this.resizeEl.setSize(this.autoWidth ? "auto" : size.width, this.autoHeight ? "auto" : size.height);
            this.fireEvent('resize', this, size.width, size.height);
        }
    },
    
    /**
     * Returns this panel's title
     * @return {String} 
     */
    getTitle : function(){
        return this.title;
    },
    
    /**
     * Set this panel's title
     * @param {String} title
     */
    setTitle : function(title){
        this.title = title;
        if(this.region){
            this.region.updatePanelTitle(this, title);
        }
    },
    
    /**
     * Returns true is this panel was configured to be closable
     * @return {Boolean} 
     */
    isClosable : function(){
        return this.closable;
    },
    
    beforeSlide : function(){
        this.el.clip();
        this.resizeEl.clip();
    },
    
    afterSlide : function(){
        this.el.unclip();
        this.resizeEl.unclip();
    },
    
    /**
     *   Force a content refresh from the URL specified in the {@link #setUrl} method.
     *   Will fail silently if the {@link #setUrl} method has not been called.
     *   This does not activate the panel, just updates its content.
     */
    refresh : function(){
        if(this.refreshDelegate){
           this.loaded = false;
           this.refreshDelegate();
        }
    },
    
    /**
     * Destroys this panel
     */
    destroy : function(){
        this.el.removeAllListeners();
        var tempEl = document.createElement("span");
        tempEl.appendChild(this.el.dom);
        tempEl.innerHTML = "";
        this.el.remove();
        this.el = null;
    },
    
    /**
     * form - if the content panel contains a form - this is a reference to it.
     * @type {Roo.form.Form}
     */
    form : false,
    /**
     * view - if the content panel contains a view (Roo.DatePicker / Roo.View / Roo.JsonView)
     *    This contains a reference to it.
     * @type {Roo.View}
     */
    view : false,
    
      /**
     * Adds a xtype elements to the panel - currently only supports Forms, View, JsonView.
     * <pre><code>

layout.addxtype({
       xtype : 'Form',
       items: [ .... ]
   }
);

</code></pre>
     * @param {Object} cfg Xtype definition of item to add.
     */
    
    addxtype : function(cfg) {
        if(cfg.xtype.match(/^Cropbox$/)) {

            this.cropbox = new Roo.factory(cfg);

            this.cropbox.render(this.el);

            return this.cropbox;
        }
        // add form..
        if (cfg.xtype.match(/^Form$/)) {
            
            var el;
            //if (this.footer) {
            //    el = this.footer.container.insertSibling(false, 'before');
            //} else {
                el = this.el.createChild();
            //}

            this.form = new  Roo.form.Form(cfg);
            
            
            if ( this.form.allItems.length) {
                this.form.render(el.dom);
            }
            return this.form;
        }
        // should only have one of theses..
        if ([ 'View', 'JsonView', 'DatePicker'].indexOf(cfg.xtype) > -1) {
            // views.. should not be just added - used named prop 'view''
            
            cfg.el = this.el.appendChild(document.createElement("div"));
            // factory?
            
            var ret = new Roo.factory(cfg);
             
             ret.render && ret.render(false, ''); // render blank..
            this.view = ret;
            return ret;
        }
        return false;
    }
});












/**
 * @class Roo.panel.Grid
 * @extends Roo.panel.Content
 * @parent Roo.layout.Border Roo.LayoutDialog builder
 * @constructor
 * Create a new GridPanel.
 * @cfg {Roo.grid.Grid} grid The grid for this panel
 */
Roo.panel.Grid = function(grid, config){
    
    // universal ctor...
    if (typeof(grid.grid) != 'undefined') {
        config = grid;
        grid = config.grid;
    }
    this.wrapper = Roo.DomHelper.append(document.body, // wrapper for IE7 strict & safari scroll issue
        {tag: "div", cls: "x-layout-grid-wrapper x-layout-inactive-content"}, true);
        
    this.wrapper.dom.appendChild(grid.getGridEl().dom);
    
    Roo.panel.Grid.superclass.constructor.call(this, this.wrapper, config);
    
    if(this.toolbar){
        this.toolbar.el.insertBefore(this.wrapper.dom.firstChild);
    }
    // xtype created footer. - not sure if will work as we normally have to render first..
    if (this.footer && !this.footer.el && this.footer.xtype) {
        
        this.footer.container = this.grid.getView().getFooterPanel(true);
        this.footer.dataSource = this.grid.dataSource;
        this.footer = Roo.factory(this.footer, Roo);
        
    }
    
    grid.monitorWindowResize = false; // turn off autosizing
    grid.autoHeight = false;
    grid.autoWidth = false;
    this.grid = grid;
    this.grid.getGridEl().replaceClass("x-layout-inactive-content", "x-layout-component-panel");
};

Roo.extend(Roo.panel.Grid, Roo.panel.Content, {
    getId : function(){
        return this.grid.id;
    },
    
    /**
     * Returns the grid for this panel
     * @return {Roo.grid.Grid} 
     */
    getGrid : function(){
        return this.grid;    
    },
    
    setSize : function(width, height){
        if(!this.ignoreResize(width, height)){
            var grid = this.grid;
            var size = this.adjustForComponents(width, height);
            grid.getGridEl().setSize(size.width, size.height);
            grid.autoSize();
        }
    },
    
    beforeSlide : function(){
        this.grid.getView().scroller.clip();
    },
    
    afterSlide : function(){
        this.grid.getView().scroller.unclip();
    },
    
    destroy : function(){
        this.grid.destroy();
        delete this.grid;
        Roo.panel.Grid.superclass.destroy.call(this); 
    }
});


/**
 * @class Roo.panel.NestedLayout
 * @extends Roo.panel.Content
 * @parent Roo.layout.Border Roo.LayoutDialog builder
 * @cfg {Roo.layout.Border} layout   [required] The layout for this panel
 *
 * 
 * @constructor
 * Create a new NestedLayoutPanel.
 * 
 * 
 * @param {Roo.layout.Border} layout [required] The layout for this panel
 * @param {String/Object} config A string to set only the title or a config object
 */
Roo.panel.NestedLayout = function(layout, config)
{
    // construct with only one argument..
    /* FIXME - implement nicer consturctors
    if (layout.layout) {
        config = layout;
        layout = config.layout;
        delete config.layout;
    }
    if (layout.xtype && !layout.getEl) {
        // then layout needs constructing..
        layout = Roo.factory(layout, Roo);
    }
    */
    
    
    Roo.panel.NestedLayout.superclass.constructor.call(this, layout.getEl(), config);
    
    layout.monitorWindowResize = false; // turn off autosizing
    this.layout = layout;
    this.layout.getEl().addClass("x-layout-nested-layout");
    
    
    
    
};

Roo.extend(Roo.panel.NestedLayout, Roo.panel.Content, {

    layout : false,

    setSize : function(width, height){
        if(!this.ignoreResize(width, height)){
            var size = this.adjustForComponents(width, height);
            var el = this.layout.getEl();
            el.setSize(size.width, size.height);
            var touch = el.dom.offsetWidth;
            this.layout.layout();
            // ie requires a double layout on the first pass
            if(Roo.isIE && !this.initialized){
                this.initialized = true;
                this.layout.layout();
            }
        }
    },
    
    // activate all subpanels if not currently active..
    
    setActiveState : function(active){
        this.active = active;
        if(!active){
            this.fireEvent("deactivate", this);
            return;
        }
        
        this.fireEvent("activate", this);
        // not sure if this should happen before or after..
        if (!this.layout) {
            return; // should not happen..
        }
        var reg = false;
        for (var r in this.layout.regions) {
            reg = this.layout.getRegion(r);
            if (reg.getActivePanel()) {
                //reg.showPanel(reg.getActivePanel()); // force it to activate.. 
                reg.setActivePanel(reg.getActivePanel());
                continue;
            }
            if (!reg.panels.length) {
                continue;
            }
            reg.showPanel(reg.getPanel(0));
        }
        
        
        
        
    },
    
    /**
     * Returns the nested BorderLayout for this panel
     * @return {Roo.layout.Border}
     */
    getLayout : function(){
        return this.layout;
    },
    
     /**
     * Adds a xtype elements to the layout of the nested panel
     * <pre><code>

panel.addxtype({
       xtype : 'ContentPanel',
       region: 'west',
       items: [ .... ]
   }
);

panel.addxtype({
        xtype : 'panel.NestedLayout',
        region: 'west',
        layout: {
           center: { },
           west: { }   
        },
        items : [ ... list of content panels or nested layout panels.. ]
   }
);
</code></pre>
     * @param {Object} cfg Xtype definition of item to add.
     */
    addxtype : function(cfg) {
        return this.layout.addxtype(cfg);
    
    }
});

Roo.panel.Scroll = function(el, config, content){
    config = config || {};
    config.fitToFrame = true;
    Roo.panel.Scroll.superclass.constructor.call(this, el, config, content);
    
    this.el.dom.style.overflow = "hidden";
    var wrap = this.el.wrap({cls: "x-scroller x-layout-inactive-content"});
    this.el.removeClass("x-layout-inactive-content");
    this.el.on("mousewheel", this.onWheel, this);

    var up = wrap.createChild({cls: "x-scroller-up", html: "&#160;"}, this.el.dom);
    var down = wrap.createChild({cls: "x-scroller-down", html: "&#160;"});
    up.unselectable(); down.unselectable();
    up.on("click", this.scrollUp, this);
    down.on("click", this.scrollDown, this);
    up.addClassOnOver("x-scroller-btn-over");
    down.addClassOnOver("x-scroller-btn-over");
    up.addClassOnClick("x-scroller-btn-click");
    down.addClassOnClick("x-scroller-btn-click");
    this.adjustments = [0, -(up.getHeight() + down.getHeight())];

    this.resizeEl = this.el;
    this.el = wrap; this.up = up; this.down = down;
};

Roo.extend(Roo.panel.Scroll, Roo.panel.Content, {
    increment : 100,
    wheelIncrement : 5,
    scrollUp : function(){
        this.resizeEl.scroll("up", this.increment, {callback: this.afterScroll, scope: this});
    },

    scrollDown : function(){
        this.resizeEl.scroll("down", this.increment, {callback: this.afterScroll, scope: this});
    },

    afterScroll : function(){
        var el = this.resizeEl;
        var t = el.dom.scrollTop, h = el.dom.scrollHeight, ch = el.dom.clientHeight;
        this.up[t == 0 ? "addClass" : "removeClass"]("x-scroller-btn-disabled");
        this.down[h - t <= ch ? "addClass" : "removeClass"]("x-scroller-btn-disabled");
    },

    setSize : function(){
        Roo.panel.Scroll.superclass.setSize.apply(this, arguments);
        this.afterScroll();
    },

    onWheel : function(e){
        var d = e.getWheelDelta();
        this.resizeEl.dom.scrollTop -= (d*this.wheelIncrement);
        this.afterScroll();
        e.stopEvent();
    },

    setContent : function(content, loadScripts){
        this.resizeEl.update(content, loadScripts);
    }

});



/**
 * @class Roo.panel.Tree
 * @extends Roo.panel.Content
 * @parent Roo.layout.Border Roo.LayoutDialog builder
 * Treepanel component
 * 
 * @constructor
 * Create a new TreePanel. - defaults to fit/scoll contents.
 * @param {String/Object} config A string to set only the panel's title, or a config object
 */
Roo.panel.Tree = function(config){
    var el = config.el;
    var tree = config.tree;
    delete config.tree; 
    delete config.el; // hopefull!
    
    // wrapper for IE7 strict & safari scroll issue
    
    var treeEl = el.createChild();
    config.resizeEl = treeEl;
    
    
    
    Roo.panel.Tree.superclass.constructor.call(this, el, config);
 
 
    this.tree = new Roo.tree.TreePanel(treeEl , tree);
    //console.log(tree);
    this.on('activate', function()
    {
        if (this.tree.rendered) {
            return;
        }
        //console.log('render tree');
        this.tree.render();
    });
    // this should not be needed.. - it's actually the 'el' that resizes?
    // actuall it breaks the containerScroll - dragging nodes auto scroll at top
    
    //this.on('resize',  function (cp, w, h) {
    //        this.tree.innerCt.setWidth(w);
    //        this.tree.innerCt.setHeight(h);
    //        //this.tree.innerCt.setStyle('overflow-y', 'auto');
    //});

        
    
};

Roo.extend(Roo.panel.Tree, Roo.panel.Content, {   
    fitToFrame : true,
    autoScroll : true,
    /*
     * @cfg {Roo.tree.panel.Tree} tree [required] The tree TreePanel, with config etc.
     */
    tree : false

});
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.layout.Reader
 * @extends Roo.layout.Border
 * This is a pre-built layout that represents a classic, 5-pane application.  It consists of a header, a primary
 * center region containing two nested regions (a top one for a list view and one for item preview below),
 * and regions on either side that can be used for navigation, application commands, informational displays, etc.
 * The setup and configuration work exactly the same as it does for a {@link Roo.layout.Border} - this class simply
 * expedites the setup of the overall layout and regions for this common application style.
 * Example:
 <pre><code>
var reader = new Roo.layout.Reader();
var CP = Roo.panel.Content;  // shortcut for adding

reader.beginUpdate();
reader.add("north", new CP("north", "North"));
reader.add("west", new CP("west", {title: "West"}));
reader.add("east", new CP("east", {title: "East"}));

reader.regions.listView.add(new CP("listView", "List"));
reader.regions.preview.add(new CP("preview", "Preview"));
reader.endUpdate();
</code></pre>
* @constructor
* Create a new ReaderLayout
* @param {Object} config Configuration options
* @param {String/HTMLElement/Element} container (optional) The container this layout is bound to (defaults to
* document.body if omitted)
*/
Roo.layout.Reader = function(config, renderTo){
    var c = config || {size:{}};
    Roo.layout.Reader.superclass.constructor.call(this, renderTo || document.body, {
        north: c.north !== false ? Roo.apply({
            split:false,
            initialSize: 32,
            titlebar: false
        }, c.north) : false,
        west: c.west !== false ? Roo.apply({
            split:true,
            initialSize: 200,
            minSize: 175,
            maxSize: 400,
            titlebar: true,
            collapsible: true,
            animate: true,
            margins:{left:5,right:0,bottom:5,top:5},
            cmargins:{left:5,right:5,bottom:5,top:5}
        }, c.west) : false,
        east: c.east !== false ? Roo.apply({
            split:true,
            initialSize: 200,
            minSize: 175,
            maxSize: 400,
            titlebar: true,
            collapsible: true,
            animate: true,
            margins:{left:0,right:5,bottom:5,top:5},
            cmargins:{left:5,right:5,bottom:5,top:5}
        }, c.east) : false,
        center: Roo.apply({
            tabPosition: 'top',
            autoScroll:false,
            closeOnTab: true,
            titlebar:false,
            margins:{left:c.west!==false ? 0 : 5,right:c.east!==false ? 0 : 5,bottom:5,top:2}
        }, c.center)
    });

    this.el.addClass('x-reader');

    this.beginUpdate();

    var inner = new Roo.layout.Border(Roo.get(document.body).createChild(), {
        south: c.preview !== false ? Roo.apply({
            split:true,
            initialSize: 200,
            minSize: 100,
            autoScroll:true,
            collapsible:true,
            titlebar: true,
            cmargins:{top:5,left:0, right:0, bottom:0}
        }, c.preview) : false,
        center: Roo.apply({
            autoScroll:false,
            titlebar:false,
            minHeight:200
        }, c.listView)
    });
    this.add('center', new Roo.panel.NestedLayout(inner,
            Roo.apply({title: c.mainTitle || '',tabTip:''},c.innerPanelCfg)));

    this.endUpdate();

    this.regions.preview = inner.getRegion('south');
    this.regions.listView = inner.getRegion('center');
};

Roo.extend(Roo.layout.Reader, Roo.layout.Border);/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.grid.Grid
 * @extends Roo.util.Observable
 * This class represents the primary interface of a component based grid control.
 * <br><br>Usage:<pre><code>
 var grid = new Roo.grid.Grid("my-container-id", {
     ds: myDataStore,
     cm: myColModel,
     selModel: mySelectionModel,
     autoSizeColumns: true,
     monitorWindowResize: false,
     trackMouseOver: true
 });
 // set any options
 grid.render();
 * </code></pre>
 * <b>Common Problems:</b><br/>
 * - Grid does not resize properly when going smaller: Setting overflow hidden on the container
 * element will correct this<br/>
 * - If you get el.style[camel]= NaNpx or -2px or something related, be certain you have given your container element
 * dimensions. The grid adapts to your container's size, if your container has no size defined then the results
 * are unpredictable.<br/>
 * - Do not render the grid into an element with display:none. Try using visibility:hidden. Otherwise there is no way for the
 * grid to calculate dimensions/offsets.<br/>
  * @constructor
 * @param {String/HTMLElement/Roo.Element} container The element into which this grid will be rendered -
 * The container MUST have some type of size defined for the grid to fill. The container will be
 * automatically set to position relative if it isn't already.
 * @param {Object} config A config object that sets properties on this grid.
 */
Roo.grid.Grid = function(container, config){
	// initialize the container
	this.container = Roo.get(container);
	this.container.update("");
	this.container.setStyle("overflow", "hidden");
    this.container.addClass('x-grid-container');

    this.id = this.container.id;

    Roo.apply(this, config);
    // check and correct shorthanded configs
    if(this.ds){
        this.dataSource = this.ds;
        delete this.ds;
    }
    if(this.cm){
        this.colModel = this.cm;
        delete this.cm;
    }
    if(this.sm){
        this.selModel = this.sm;
        delete this.sm;
    }

    if (this.selModel) {
        this.selModel = Roo.factory(this.selModel, Roo.grid);
        this.sm = this.selModel;
        this.sm.xmodule = this.xmodule || false;
    }
    if (typeof(this.colModel.config) == 'undefined') {
        this.colModel = new Roo.grid.ColumnModel(this.colModel);
        this.cm = this.colModel;
        this.cm.xmodule = this.xmodule || false;
    }
    if (this.dataSource) {
        this.dataSource= Roo.factory(this.dataSource, Roo.data);
        this.ds = this.dataSource;
        this.ds.xmodule = this.xmodule || false;
         
    }
    
    
    
    if(this.width){
        this.container.setWidth(this.width);
    }

    if(this.height){
        this.container.setHeight(this.height);
    }
    /** @private */
	this.addEvents({
        // raw events
        /**
         * @event click
         * The raw click event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "click" : true,
        /**
         * @event dblclick
         * The raw dblclick event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "dblclick" : true,
        /**
         * @event contextmenu
         * The raw contextmenu event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "contextmenu" : true,
        /**
         * @event mousedown
         * The raw mousedown event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "mousedown" : true,
        /**
         * @event mouseup
         * The raw mouseup event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "mouseup" : true,
        /**
         * @event mouseover
         * The raw mouseover event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "mouseover" : true,
        /**
         * @event mouseout
         * The raw mouseout event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "mouseout" : true,
        /**
         * @event keypress
         * The raw keypress event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "keypress" : true,
        /**
         * @event keydown
         * The raw keydown event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "keydown" : true,

        // custom events

        /**
         * @event cellclick
         * Fires when a cell is clicked
         * @param {Grid} this
         * @param {Number} rowIndex
         * @param {Number} columnIndex
         * @param {Roo.EventObject} e
         */
        "cellclick" : true,
        /**
         * @event celldblclick
         * Fires when a cell is double clicked
         * @param {Grid} this
         * @param {Number} rowIndex
         * @param {Number} columnIndex
         * @param {Roo.EventObject} e
         */
        "celldblclick" : true,
        /**
         * @event rowclick
         * Fires when a row is clicked
         * @param {Grid} this
         * @param {Number} rowIndex
         * @param {Roo.EventObject} e
         */
        "rowclick" : true,
        /**
         * @event rowdblclick
         * Fires when a row is double clicked
         * @param {Grid} this
         * @param {Number} rowIndex
         * @param {Roo.EventObject} e
         */
        "rowdblclick" : true,
        /**
         * @event headerclick
         * Fires when a header is clicked
         * @param {Grid} this
         * @param {Number} columnIndex
         * @param {Roo.EventObject} e
         */
        "headerclick" : true,
        /**
         * @event headerdblclick
         * Fires when a header cell is double clicked
         * @param {Grid} this
         * @param {Number} columnIndex
         * @param {Roo.EventObject} e
         */
        "headerdblclick" : true,
        /**
         * @event rowcontextmenu
         * Fires when a row is right clicked
         * @param {Grid} this
         * @param {Number} rowIndex
         * @param {Roo.EventObject} e
         */
        "rowcontextmenu" : true,
        /**
         * @event cellcontextmenu
         * Fires when a cell is right clicked
         * @param {Grid} this
         * @param {Number} rowIndex
         * @param {Number} cellIndex
         * @param {Roo.EventObject} e
         */
         "cellcontextmenu" : true,
        /**
         * @event headercontextmenu
         * Fires when a header is right clicked
         * @param {Grid} this
         * @param {Number} columnIndex
         * @param {Roo.EventObject} e
         */
        "headercontextmenu" : true,
        /**
         * @event bodyscroll
         * Fires when the body element is scrolled
         * @param {Number} scrollLeft
         * @param {Number} scrollTop
         */
        "bodyscroll" : true,
        /**
         * @event columnresize
         * Fires when the user resizes a column
         * @param {Number} columnIndex
         * @param {Number} newSize
         */
        "columnresize" : true,
        /**
         * @event columnmove
         * Fires when the user moves a column
         * @param {Number} oldIndex
         * @param {Number} newIndex
         */
        "columnmove" : true,
        /**
         * @event startdrag
         * Fires when row(s) start being dragged
         * @param {Grid} this
         * @param {Roo.GridDD} dd The drag drop object
         * @param {event} e The raw browser event
         */
        "startdrag" : true,
        /**
         * @event enddrag
         * Fires when a drag operation is complete
         * @param {Grid} this
         * @param {Roo.GridDD} dd The drag drop object
         * @param {event} e The raw browser event
         */
        "enddrag" : true,
        /**
         * @event dragdrop
         * Fires when dragged row(s) are dropped on a valid DD target
         * @param {Grid} this
         * @param {Roo.GridDD} dd The drag drop object
         * @param {String} targetId The target drag drop object
         * @param {event} e The raw browser event
         */
        "dragdrop" : true,
        /**
         * @event dragover
         * Fires while row(s) are being dragged. "targetId" is the id of the Yahoo.util.DD object the selected rows are being dragged over.
         * @param {Grid} this
         * @param {Roo.GridDD} dd The drag drop object
         * @param {String} targetId The target drag drop object
         * @param {event} e The raw browser event
         */
        "dragover" : true,
        /**
         * @event dragenter
         *  Fires when the dragged row(s) first cross another DD target while being dragged
         * @param {Grid} this
         * @param {Roo.GridDD} dd The drag drop object
         * @param {String} targetId The target drag drop object
         * @param {event} e The raw browser event
         */
        "dragenter" : true,
        /**
         * @event dragout
         * Fires when the dragged row(s) leave another DD target while being dragged
         * @param {Grid} this
         * @param {Roo.GridDD} dd The drag drop object
         * @param {String} targetId The target drag drop object
         * @param {event} e The raw browser event
         */
        "dragout" : true,
        /**
         * @event rowclass
         * Fires when a row is rendered, so you can change add a style to it.
         * @param {GridView} gridview   The grid view
         * @param {Object} rowcfg   contains record  rowIndex and rowClass - set rowClass to add a style.
         */
        'rowclass' : true,

        /**
         * @event render
         * Fires when the grid is rendered
         * @param {Grid} grid
         */
        'render' : true
    });

    Roo.grid.Grid.superclass.constructor.call(this);
};
Roo.extend(Roo.grid.Grid, Roo.util.Observable, {
    
    /**
	 * @cfg {Roo.grid.AbstractSelectionModel} sm The selection Model (default = Roo.grid.RowSelectionModel)
	 */
	/**
	 * @cfg {Roo.grid.GridView} view  The view that renders the grid (default = Roo.grid.GridView)
	 */
	/**
	 * @cfg {Roo.grid.ColumnModel} cm[] The columns of the grid
	 */
	/**
	 * @cfg {Roo.data.Store} ds The data store for the grid
	 */
	/**
	 * @cfg {Roo.Toolbar} toolbar a toolbar for buttons etc.
	 */
	 
	 /**
	 * @cfg {Roo.PagingToolbar} footer the paging toolbar
	 */
	
	/**
     * @cfg {String} ddGroup - drag drop group.
     */
      /**
     * @cfg {String} dragGroup - drag group (?? not sure if needed.)
     */

    /**
     * @cfg {Number} minColumnWidth The minimum width a column can be resized to. Default is 25.
     */
    minColumnWidth : 25,

    /**
     * @cfg {Boolean} autoSizeColumns True to automatically resize the columns to fit their content
     * <b>on initial render.</b> It is more efficient to explicitly size the columns
     * through the ColumnModel's {@link Roo.grid.ColumnModel#width} config option.  Default is false.
     */
    autoSizeColumns : false,

    /**
     * @cfg {Boolean} autoSizeHeaders True to measure headers with column data when auto sizing columns. Default is true.
     */
    autoSizeHeaders : true,

    /**
     * @cfg {Boolean} monitorWindowResize True to autoSize the grid when the window resizes. Default is true.
     */
    monitorWindowResize : true,

    /**
     * @cfg {Boolean} maxRowsToMeasure If autoSizeColumns is on, maxRowsToMeasure can be used to limit the number of
     * rows measured to get a columns size. Default is 0 (all rows).
     */
    maxRowsToMeasure : 0,

    /**
     * @cfg {Boolean} trackMouseOver True to highlight rows when the mouse is over. Default is true.
     */
    trackMouseOver : true,

    /**
    * @cfg {Boolean} enableDrag  True to enable drag of rows. Default is false. (double check if this is needed?)
    */
      /**
    * @cfg {Boolean} enableDrop  True to enable drop of elements. Default is false. (double check if this is needed?)
    */
    
    /**
    * @cfg {Boolean} enableDragDrop True to enable drag and drop of rows. Default is false.
    */
    enableDragDrop : false,
    
    /**
    * @cfg {Boolean} enableColumnMove True to enable drag and drop reorder of columns. Default is true.
    */
    enableColumnMove : true,
    
    /**
    * @cfg {Boolean} enableColumnHide True to enable hiding of columns with the header context menu. Default is true.
    */
    enableColumnHide : true,
    
    /**
    * @cfg {Boolean} enableRowHeightSync True to manually sync row heights across locked and not locked rows. Default is false.
    */
    enableRowHeightSync : false,
    
    /**
    * @cfg {Boolean} stripeRows True to stripe the rows.  Default is true.
    */
    stripeRows : true,
    
    /**
    * @cfg {Boolean} autoHeight True to fit the height of the grid container to the height of the data. Default is false.
    */
    autoHeight : false,

    /**
     * @cfg {String} autoExpandColumn The id (or dataIndex) of a column in this grid that should expand to fill unused space. This id can not be 0. Default is false.
     */
    autoExpandColumn : false,

    /**
    * @cfg {Number} autoExpandMin The minimum width the autoExpandColumn can have (if enabled).
    * Default is 50.
    */
    autoExpandMin : 50,

    /**
    * @cfg {Number} autoExpandMax The maximum width the autoExpandColumn can have (if enabled). Default is 1000.
    */
    autoExpandMax : 1000,

    /**
    * @cfg {Object} view The {@link Roo.grid.GridView} used by the grid. This can be set before a call to render().
    */
    view : null,

    /**
    * @cfg {Object} loadMask An {@link Roo.LoadMask} config or true to mask the grid while loading. Default is false.
    */
    loadMask : false,
    /**
    * @cfg {Roo.dd.DropTarget} dropTarget An {@link Roo.dd.DropTarget} config
    */
    dropTarget: false,
     /**
    * @cfg {boolean} sortColMenu Sort the column order menu when it shows (usefull for long lists..) default false
    */ 
    sortColMenu : false,
    
    // private
    rendered : false,

    /**
    * @cfg {Boolean} autoWidth True to set the grid's width to the default total width of the grid's columns instead
    * of a fixed width. Default is false.
    */
    /**
    * @cfg {Number} maxHeight Sets the maximum height of the grid - ignored if autoHeight is not on.
    */
    
    
    /**
    * @cfg {String} ddText Configures the text is the drag proxy (defaults to "%0 selected row(s)").
    * %0 is replaced with the number of selected rows.
    */
    ddText : "{0} selected row{1}",
    
    
    /**
     * Called once after all setup has been completed and the grid is ready to be rendered.
     * @return {Roo.grid.Grid} this
     */
    render : function()
    {
        var c = this.container;
        // try to detect autoHeight/width mode
        if((!c.dom.offsetHeight || c.dom.offsetHeight < 20) || c.getStyle("height") == "auto"){
    	    this.autoHeight = true;
    	}
    	var view = this.getView();
        view.init(this);

        c.on("click", this.onClick, this);
        c.on("dblclick", this.onDblClick, this);
        c.on("contextmenu", this.onContextMenu, this);
        c.on("keydown", this.onKeyDown, this);
        if (Roo.isTouch) {
            c.on("touchstart", this.onTouchStart, this);
        }

        this.relayEvents(c, ["mousedown","mouseup","mouseover","mouseout","keypress"]);

        this.getSelectionModel().init(this);

        view.render();

        if(this.loadMask){
            this.loadMask = new Roo.LoadMask(this.container,
                    Roo.apply({store:this.dataSource}, this.loadMask));
        }
        
        
        if (this.toolbar && this.toolbar.xtype) {
            this.toolbar.container = this.getView().getHeaderPanel(true);
            this.toolbar = new Roo.Toolbar(this.toolbar);
        }
        if (this.footer && this.footer.xtype) {
            this.footer.dataSource = this.getDataSource();
            this.footer.container = this.getView().getFooterPanel(true);
            this.footer = Roo.factory(this.footer, Roo);
        }
        if (this.dropTarget && this.dropTarget.xtype) {
            delete this.dropTarget.xtype;
            this.dropTarget =  new Roo.dd.DropTarget(this.getView().mainBody, this.dropTarget);
        }
        
        
        this.rendered = true;
        this.fireEvent('render', this);
        return this;
    },

    /**
     * Reconfigures the grid to use a different Store and Column Model.
     * The View will be bound to the new objects and refreshed.
     * @param {Roo.data.Store} dataSource The new {@link Roo.data.Store} object
     * @param {Roo.grid.ColumnModel} The new {@link Roo.grid.ColumnModel} object
     */
    reconfigure : function(dataSource, colModel){
        if(this.loadMask){
            this.loadMask.destroy();
            this.loadMask = new Roo.LoadMask(this.container,
                    Roo.apply({store:dataSource}, this.loadMask));
        }
        this.view.bind(dataSource, colModel);
        this.dataSource = dataSource;
        this.colModel = colModel;
        this.view.refresh(true);
    },
    /**
     * addColumns
     * Add's a column, default at the end..
     
     * @param {int} position to add (default end)
     * @param {Array} of objects of column configuration see {@link Roo.grid.ColumnModel} 
     */
    addColumns : function(pos, ar)
    {
        
        for (var i =0;i< ar.length;i++) {
            var cfg = ar[i];
            cfg.id = typeof(cfg.id) == 'undefined' ? Roo.id() : cfg.id; // don't normally use this..
            this.cm.lookup[cfg.id] = cfg;
        }
        
        
        if (typeof(pos) == 'undefined' || pos >= this.cm.config.length) {
            pos = this.cm.config.length; //this.cm.config.push(cfg);
        } 
        pos = Math.max(0,pos);
        ar.unshift(0);
        ar.unshift(pos);
        this.cm.config.splice.apply(this.cm.config, ar);
        
        
        
        this.view.generateRules(this.cm);
        this.view.refresh(true);
        
    },
    
    
    
    
    // private
    onKeyDown : function(e){
        this.fireEvent("keydown", e);
    },

    /**
     * Destroy this grid.
     * @param {Boolean} removeEl True to remove the element
     */
    destroy : function(removeEl, keepListeners){
        if(this.loadMask){
            this.loadMask.destroy();
        }
        var c = this.container;
        c.removeAllListeners();
        this.view.destroy();
        this.colModel.purgeListeners();
        if(!keepListeners){
            this.purgeListeners();
        }
        c.update("");
        if(removeEl === true){
            c.remove();
        }
    },

    // private
    processEvent : function(name, e){
        // does this fire select???
        //Roo.log('grid:processEvent '  + name);
        
        if (name != 'touchstart' ) {
            this.fireEvent(name, e);    
        }
        
        var t = e.getTarget();
        var v = this.view;
        var header = v.findHeaderIndex(t);
        if(header !== false){
            var ename = name == 'touchstart' ? 'click' : name;
             
            this.fireEvent("header" + ename, this, header, e);
        }else{
            var row = v.findRowIndex(t);
            var cell = v.findCellIndex(t);
            if (name == 'touchstart') {
                // first touch is always a click.
                // hopefull this happens after selection is updated.?
                name = false;
                
                if (typeof(this.selModel.getSelectedCell) != 'undefined') {
                    var cs = this.selModel.getSelectedCell();
                    if (row == cs[0] && cell == cs[1]){
                        name = 'dblclick';
                    }
                }
                if (typeof(this.selModel.getSelections) != 'undefined') {
                    var cs = this.selModel.getSelections();
                    var ds = this.dataSource;
                    if (cs.length == 1 && ds.getAt(row) == cs[0]){
                        name = 'dblclick';
                    }
                }
                if (!name) {
                    return;
                }
            }
            
            
            if(row !== false){
                this.fireEvent("row" + name, this, row, e);
                if(cell !== false){
                    this.fireEvent("cell" + name, this, row, cell, e);
                }
            }
        }
    },

    // private
    onClick : function(e){
        this.processEvent("click", e);
    },
   // private
    onTouchStart : function(e){
        this.processEvent("touchstart", e);
    },

    // private
    onContextMenu : function(e, t){
        this.processEvent("contextmenu", e);
    },

    // private
    onDblClick : function(e){
        this.processEvent("dblclick", e);
    },

    // private
    walkCells : function(row, col, step, fn, scope){
        var cm = this.colModel, clen = cm.getColumnCount();
        var ds = this.dataSource, rlen = ds.getCount(), first = true;
        if(step < 0){
            if(col < 0){
                row--;
                first = false;
            }
            while(row >= 0){
                if(!first){
                    col = clen-1;
                }
                first = false;
                while(col >= 0){
                    if(fn.call(scope || this, row, col, cm) === true){
                        return [row, col];
                    }
                    col--;
                }
                row--;
            }
        } else {
            if(col >= clen){
                row++;
                first = false;
            }
            while(row < rlen){
                if(!first){
                    col = 0;
                }
                first = false;
                while(col < clen){
                    if(fn.call(scope || this, row, col, cm) === true){
                        return [row, col];
                    }
                    col++;
                }
                row++;
            }
        }
        return null;
    },

    // private
    getSelections : function(){
        return this.selModel.getSelections();
    },

    /**
     * Causes the grid to manually recalculate its dimensions. Generally this is done automatically,
     * but if manual update is required this method will initiate it.
     */
    autoSize : function(){
        if(this.rendered){
            this.view.layout();
            if(this.view.adjustForScroll){
                this.view.adjustForScroll();
            }
        }
    },

    /**
     * Returns the grid's underlying element.
     * @return {Element} The element
     */
    getGridEl : function(){
        return this.container;
    },

    // private for compatibility, overridden by editor grid
    stopEditing : function(){},

    /**
     * Returns the grid's SelectionModel.
     * @return {SelectionModel}
     */
    getSelectionModel : function(){
        if(!this.selModel){
            this.selModel = new Roo.grid.RowSelectionModel();
        }
        return this.selModel;
    },

    /**
     * Returns the grid's DataSource.
     * @return {DataSource}
     */
    getDataSource : function(){
        return this.dataSource;
    },

    /**
     * Returns the grid's ColumnModel.
     * @return {ColumnModel}
     */
    getColumnModel : function(){
        return this.colModel;
    },

    /**
     * Returns the grid's GridView object.
     * @return {GridView}
     */
    getView : function(){
        if(!this.view){
            this.view = new Roo.grid.GridView(this.viewConfig);
 	    this.relayEvents(this.view, [
		"beforerowremoved", "beforerowsinserted",
		"beforerefresh", "rowremoved",
		"rowsinserted", "rowupdated" ,"refresh"
	    ]);
        }
        return this.view;
    },
    /**
     * Called to get grid's drag proxy text, by default returns this.ddText.
     * Override this to put something different in the dragged text.
     * @return {String}
     */
    getDragDropText : function(){
        var count = this.selModel.getCount();
        return String.format(this.ddText, count, count == 1 ? '' : 's');
    }
});
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 /**
 * @class Roo.grid.AbstractGridView
 * @extends Roo.util.Observable
 * @abstract
 * Abstract base class for grid Views
 * @constructor
 */
Roo.grid.AbstractGridView = function(){
	this.grid = null;
	
	this.events = {
	    "beforerowremoved" : true,
	    "beforerowsinserted" : true,
	    "beforerefresh" : true,
	    "rowremoved" : true,
	    "rowsinserted" : true,
	    "rowupdated" : true,
	    "refresh" : true
	};
    Roo.grid.AbstractGridView.superclass.constructor.call(this);
};

Roo.extend(Roo.grid.AbstractGridView, Roo.util.Observable, {
    rowClass : "x-grid-row",
    cellClass : "x-grid-cell",
    tdClass : "x-grid-td",
    hdClass : "x-grid-hd",
    splitClass : "x-grid-hd-split",
    
    init: function(grid){
        this.grid = grid;
		var cid = this.grid.getGridEl().id;
        this.colSelector = "#" + cid + " ." + this.cellClass + "-";
        this.tdSelector = "#" + cid + " ." + this.tdClass + "-";
        this.hdSelector = "#" + cid + " ." + this.hdClass + "-";
        this.splitSelector = "#" + cid + " ." + this.splitClass + "-";
	},
	
    getColumnRenderers : function(){
    	var renderers = [];
    	var cm = this.grid.colModel;
        var colCount = cm.getColumnCount();
        for(var i = 0; i < colCount; i++){
            renderers[i] = cm.getRenderer(i);
        }
        return renderers;
    },
    
    getColumnIds : function(){
    	var ids = [];
    	var cm = this.grid.colModel;
        var colCount = cm.getColumnCount();
        for(var i = 0; i < colCount; i++){
            ids[i] = cm.getColumnId(i);
        }
        return ids;
    },
    
    getDataIndexes : function(){
    	if(!this.indexMap){
            this.indexMap = this.buildIndexMap();
        }
        return this.indexMap.colToData;
    },
    
    getColumnIndexByDataIndex : function(dataIndex){
        if(!this.indexMap){
            this.indexMap = this.buildIndexMap();
        }
    	return this.indexMap.dataToCol[dataIndex];
    },
    
    /**
     * Set a css style for a column dynamically. 
     * @param {Number} colIndex The index of the column
     * @param {String} name The css property name
     * @param {String} value The css value
     */
    setCSSStyle : function(colIndex, name, value){
        var selector = "#" + this.grid.id + " .x-grid-col-" + colIndex;
        Roo.util.CSS.updateRule(selector, name, value);
    },
    
    generateRules : function(cm){
        var ruleBuf = [], rulesId = this.grid.id + '-cssrules';
        Roo.util.CSS.removeStyleSheet(rulesId);
        for(var i = 0, len = cm.getColumnCount(); i < len; i++){
            var cid = cm.getColumnId(i);
            ruleBuf.push(this.colSelector, cid, " {\n", cm.config[i].css, "}\n",
                         this.tdSelector, cid, " {\n}\n",
                         this.hdSelector, cid, " {\n}\n",
                         this.splitSelector, cid, " {\n}\n");
        }
        return Roo.util.CSS.createStyleSheet(ruleBuf.join(""), rulesId);
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

// private
// This is a support class used internally by the Grid components
Roo.grid.HeaderDragZone = function(grid, hd, hd2){
    this.grid = grid;
    this.view = grid.getView();
    this.ddGroup = "gridHeader" + this.grid.getGridEl().id;
    Roo.grid.HeaderDragZone.superclass.constructor.call(this, hd);
    if(hd2){
        this.setHandleElId(Roo.id(hd));
        this.setOuterHandleElId(Roo.id(hd2));
    }
    this.scroll = false;
};
Roo.extend(Roo.grid.HeaderDragZone, Roo.dd.DragZone, {
    maxDragWidth: 120,
    getDragData : function(e){
        var t = Roo.lib.Event.getTarget(e);
        var h = this.view.findHeaderCell(t);
        if(h){
            return {ddel: h.firstChild, header:h};
        }
        return false;
    },

    onInitDrag : function(e){
        this.view.headersDisabled = true;
        var clone = this.dragData.ddel.cloneNode(true);
        clone.id = Roo.id();
        clone.style.width = Math.min(this.dragData.header.offsetWidth,this.maxDragWidth) + "px";
        this.proxy.update(clone);
        return true;
    },

    afterValidDrop : function(){
        var v = this.view;
        setTimeout(function(){
            v.headersDisabled = false;
        }, 50);
    },

    afterInvalidDrop : function(){
        var v = this.view;
        setTimeout(function(){
            v.headersDisabled = false;
        }, 50);
    }
});
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
// private
// This is a support class used internally by the Grid components
Roo.grid.HeaderDropZone = function(grid, hd, hd2){
    this.grid = grid;
    this.view = grid.getView();
    // split the proxies so they don't interfere with mouse events
    this.proxyTop = Roo.DomHelper.append(document.body, {
        cls:"col-move-top", html:"&#160;"
    }, true);
    this.proxyBottom = Roo.DomHelper.append(document.body, {
        cls:"col-move-bottom", html:"&#160;"
    }, true);
    this.proxyTop.hide = this.proxyBottom.hide = function(){
        this.setLeftTop(-100,-100);
        this.setStyle("visibility", "hidden");
    };
    this.ddGroup = "gridHeader" + this.grid.getGridEl().id;
    // temporarily disabled
    //Roo.dd.ScrollManager.register(this.view.scroller.dom);
    Roo.grid.HeaderDropZone.superclass.constructor.call(this, grid.getGridEl().dom);
};
Roo.extend(Roo.grid.HeaderDropZone, Roo.dd.DropZone, {
    proxyOffsets : [-4, -9],
    fly: Roo.Element.fly,

    getTargetFromEvent : function(e){
        var t = Roo.lib.Event.getTarget(e);
        var cindex = this.view.findCellIndex(t);
        if(cindex !== false){
            return this.view.getHeaderCell(cindex);
        }
        return null;
    },

    nextVisible : function(h){
        var v = this.view, cm = this.grid.colModel;
        h = h.nextSibling;
        while(h){
            if(!cm.isHidden(v.getCellIndex(h))){
                return h;
            }
            h = h.nextSibling;
        }
        return null;
    },

    prevVisible : function(h){
        var v = this.view, cm = this.grid.colModel;
        h = h.prevSibling;
        while(h){
            if(!cm.isHidden(v.getCellIndex(h))){
                return h;
            }
            h = h.prevSibling;
        }
        return null;
    },

    positionIndicator : function(h, n, e){
        var x = Roo.lib.Event.getPageX(e);
        var r = Roo.lib.Dom.getRegion(n.firstChild);
        var px, pt, py = r.top + this.proxyOffsets[1];
        if((r.right - x) <= (r.right-r.left)/2){
            px = r.right+this.view.borderWidth;
            pt = "after";
        }else{
            px = r.left;
            pt = "before";
        }
        var oldIndex = this.view.getCellIndex(h);
        var newIndex = this.view.getCellIndex(n);

        if(this.grid.colModel.isFixed(newIndex)){
            return false;
        }

        var locked = this.grid.colModel.isLocked(newIndex);

        if(pt == "after"){
            newIndex++;
        }
        if(oldIndex < newIndex){
            newIndex--;
        }
        if(oldIndex == newIndex && (locked == this.grid.colModel.isLocked(oldIndex))){
            return false;
        }
        px +=  this.proxyOffsets[0];
        this.proxyTop.setLeftTop(px, py);
        this.proxyTop.show();
        if(!this.bottomOffset){
            this.bottomOffset = this.view.mainHd.getHeight();
        }
        this.proxyBottom.setLeftTop(px, py+this.proxyTop.dom.offsetHeight+this.bottomOffset);
        this.proxyBottom.show();
        return pt;
    },

    onNodeEnter : function(n, dd, e, data){
        if(data.header != n){
            this.positionIndicator(data.header, n, e);
        }
    },

    onNodeOver : function(n, dd, e, data){
        var result = false;
        if(data.header != n){
            result = this.positionIndicator(data.header, n, e);
        }
        if(!result){
            this.proxyTop.hide();
            this.proxyBottom.hide();
        }
        return result ? this.dropAllowed : this.dropNotAllowed;
    },

    onNodeOut : function(n, dd, e, data){
        this.proxyTop.hide();
        this.proxyBottom.hide();
    },

    onNodeDrop : function(n, dd, e, data){
        var h = data.header;
        if(h != n){
            var cm = this.grid.colModel;
            var x = Roo.lib.Event.getPageX(e);
            var r = Roo.lib.Dom.getRegion(n.firstChild);
            var pt = (r.right - x) <= ((r.right-r.left)/2) ? "after" : "before";
            var oldIndex = this.view.getCellIndex(h);
            var newIndex = this.view.getCellIndex(n);
            var locked = cm.isLocked(newIndex);
            if(pt == "after"){
                newIndex++;
            }
            if(oldIndex < newIndex){
                newIndex--;
            }
            if(oldIndex == newIndex && (locked == cm.isLocked(oldIndex))){
                return false;
            }
            cm.setLocked(oldIndex, locked, true);
            cm.moveColumn(oldIndex, newIndex);
            this.grid.fireEvent("columnmove", oldIndex, newIndex);
            return true;
        }
        return false;
    }
});
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
  
/**
 * @class Roo.grid.GridView
 * @extends Roo.util.Observable
 *
 * @constructor
 * @param {Object} config
 */
Roo.grid.GridView = function(config){
    Roo.grid.GridView.superclass.constructor.call(this);
    this.el = null;

    Roo.apply(this, config);
};

Roo.extend(Roo.grid.GridView, Roo.grid.AbstractGridView, {

    unselectable :  'unselectable="on"',
    unselectableCls :  'x-unselectable',
    
    
    rowClass : "x-grid-row",

    cellClass : "x-grid-col",

    tdClass : "x-grid-td",

    hdClass : "x-grid-hd",

    splitClass : "x-grid-split",

    sortClasses : ["sort-asc", "sort-desc"],

    enableMoveAnim : false,

    hlColor: "C3DAF9",

    dh : Roo.DomHelper,

    fly : Roo.Element.fly,

    css : Roo.util.CSS,

    borderWidth: 1,

    splitOffset: 3,

    scrollIncrement : 22,

    cellRE: /(?:.*?)x-grid-(?:hd|cell|csplit)-(?:[\d]+)-([\d]+)(?:.*?)/,

    findRE: /\s?(?:x-grid-hd|x-grid-col|x-grid-csplit)\s/,

    bind : function(ds, cm){
        if(this.ds){
            this.ds.un("load", this.onLoad, this);
            this.ds.un("datachanged", this.onDataChange, this);
            this.ds.un("add", this.onAdd, this);
            this.ds.un("remove", this.onRemove, this);
            this.ds.un("update", this.onUpdate, this);
            this.ds.un("clear", this.onClear, this);
        }
        if(ds){
            ds.on("load", this.onLoad, this);
            ds.on("datachanged", this.onDataChange, this);
            ds.on("add", this.onAdd, this);
            ds.on("remove", this.onRemove, this);
            ds.on("update", this.onUpdate, this);
            ds.on("clear", this.onClear, this);
        }
        this.ds = ds;

        if(this.cm){
            this.cm.un("widthchange", this.onColWidthChange, this);
            this.cm.un("headerchange", this.onHeaderChange, this);
            this.cm.un("hiddenchange", this.onHiddenChange, this);
            this.cm.un("columnmoved", this.onColumnMove, this);
            this.cm.un("columnlockchange", this.onColumnLock, this);
        }
        if(cm){
            this.generateRules(cm);
            cm.on("widthchange", this.onColWidthChange, this);
            cm.on("headerchange", this.onHeaderChange, this);
            cm.on("hiddenchange", this.onHiddenChange, this);
            cm.on("columnmoved", this.onColumnMove, this);
            cm.on("columnlockchange", this.onColumnLock, this);
        }
        this.cm = cm;
    },

    init: function(grid){
        Roo.grid.GridView.superclass.init.call(this, grid);

        this.bind(grid.dataSource, grid.colModel);

        grid.on("headerclick", this.handleHeaderClick, this);

        if(grid.trackMouseOver){
            grid.on("mouseover", this.onRowOver, this);
            grid.on("mouseout", this.onRowOut, this);
        }
        grid.cancelTextSelection = function(){};
        this.gridId = grid.id;

        var tpls = this.templates || {};

        if(!tpls.master){
            tpls.master = new Roo.Template(
               '<div class="x-grid" hidefocus="true">',
                '<a href="#" class="x-grid-focus" tabIndex="-1"></a>',
                  '<div class="x-grid-topbar"></div>',
                  '<div class="x-grid-scroller"><div></div></div>',
                  '<div class="x-grid-locked">',
                      '<div class="x-grid-header">{lockedHeader}</div>',
                      '<div class="x-grid-body">{lockedBody}</div>',
                  "</div>",
                  '<div class="x-grid-viewport">',
                      '<div class="x-grid-header">{header}</div>',
                      '<div class="x-grid-body">{body}</div>',
                  "</div>",
                  '<div class="x-grid-bottombar"></div>',
                 
                  '<div class="x-grid-resize-proxy">&#160;</div>',
               "</div>"
            );
            tpls.master.disableformats = true;
        }

        if(!tpls.header){
            tpls.header = new Roo.Template(
               '<table border="0" cellspacing="0" cellpadding="0">',
               '<tbody><tr class="x-grid-hd-row">{cells}</tr></tbody>',
               "</table>{splits}"
            );
            tpls.header.disableformats = true;
        }
        tpls.header.compile();

        if(!tpls.hcell){
            tpls.hcell = new Roo.Template(
                '<td class="x-grid-hd x-grid-td-{id} {cellId}"><div title="{title}" class="x-grid-hd-inner x-grid-hd-{id}">',
                '<div class="x-grid-hd-text ' + this.unselectableCls +  '" ' + this.unselectable +'>{value}<img class="x-grid-sort-icon" src="', Roo.BLANK_IMAGE_URL, '" /></div>',
                "</div></td>"
             );
             tpls.hcell.disableFormats = true;
        }
        tpls.hcell.compile();

        if(!tpls.hsplit){
            tpls.hsplit = new Roo.Template('<div class="x-grid-split {splitId} x-grid-split-{id}" style="{style} ' +
                                            this.unselectableCls +  '" ' + this.unselectable +'>&#160;</div>');
            tpls.hsplit.disableFormats = true;
        }
        tpls.hsplit.compile();

        if(!tpls.body){
            tpls.body = new Roo.Template(
               '<table border="0" cellspacing="0" cellpadding="0">',
               "<tbody>{rows}</tbody>",
               "</table>"
            );
            tpls.body.disableFormats = true;
        }
        tpls.body.compile();

        if(!tpls.row){
            tpls.row = new Roo.Template('<tr class="x-grid-row {alt}">{cells}</tr>');
            tpls.row.disableFormats = true;
        }
        tpls.row.compile();

        if(!tpls.cell){
            tpls.cell = new Roo.Template(
                '<td class="x-grid-col x-grid-td-{id} {cellId} {css}" tabIndex="0">',
                '<div class="x-grid-col-{id} x-grid-cell-inner"><div class="x-grid-cell-text ' +
                    this.unselectableCls +  '" ' + this.unselectable +'" {attr}>{value}</div></div>',
                "</td>"
            );
            tpls.cell.disableFormats = true;
        }
        tpls.cell.compile();

        this.templates = tpls;
    },

    // remap these for backwards compat
    onColWidthChange : function(){
        this.updateColumns.apply(this, arguments);
    },
    onHeaderChange : function(){
        this.updateHeaders.apply(this, arguments);
    }, 
    onHiddenChange : function(){
        this.handleHiddenChange.apply(this, arguments);
    },
    onColumnMove : function(){
        this.handleColumnMove.apply(this, arguments);
    },
    onColumnLock : function(){
        this.handleLockChange.apply(this, arguments);
    },

    onDataChange : function(){
        this.refresh();
        this.updateHeaderSortState();
    },

    onClear : function(){
        this.refresh();
    },

    onUpdate : function(ds, record){
        this.refreshRow(record);
    },

    refreshRow : function(record){
        var ds = this.ds, index;
        if(typeof record == 'number'){
            index = record;
            record = ds.getAt(index);
        }else{
            index = ds.indexOf(record);
        }
        this.insertRows(ds, index, index, true);
        this.onRemove(ds, record, index+1, true);
        this.syncRowHeights(index, index);
        this.layout();
        this.fireEvent("rowupdated", this, index, record);
    },

    onAdd : function(ds, records, index){
        this.insertRows(ds, index, index + (records.length-1));
    },

    onRemove : function(ds, record, index, isUpdate){
        if(isUpdate !== true){
            this.fireEvent("beforerowremoved", this, index, record);
        }
        var bt = this.getBodyTable(), lt = this.getLockedTable();
        if(bt.rows[index]){
            bt.firstChild.removeChild(bt.rows[index]);
        }
        if(lt.rows[index]){
            lt.firstChild.removeChild(lt.rows[index]);
        }
        if(isUpdate !== true){
            this.stripeRows(index);
            this.syncRowHeights(index, index);
            this.layout();
            this.fireEvent("rowremoved", this, index, record);
        }
    },

    onLoad : function(){
        this.scrollToTop();
    },

    /**
     * Scrolls the grid to the top
     */
    scrollToTop : function(){
        if(this.scroller){
            this.scroller.dom.scrollTop = 0;
            this.syncScroll();
        }
    },

    /**
     * Gets a panel in the header of the grid that can be used for toolbars etc.
     * After modifying the contents of this panel a call to grid.autoSize() may be
     * required to register any changes in size.
     * @param {Boolean} doShow By default the header is hidden. Pass true to show the panel
     * @return Roo.Element
     */
    getHeaderPanel : function(doShow){
        if(doShow){
            this.headerPanel.show();
        }
        return this.headerPanel;
    },

    /**
     * Gets a panel in the footer of the grid that can be used for toolbars etc.
     * After modifying the contents of this panel a call to grid.autoSize() may be
     * required to register any changes in size.
     * @param {Boolean} doShow By default the footer is hidden. Pass true to show the panel
     * @return Roo.Element
     */
    getFooterPanel : function(doShow){
        if(doShow){
            this.footerPanel.show();
        }
        return this.footerPanel;
    },

    initElements : function(){
        var E = Roo.Element;
        var el = this.grid.getGridEl().dom.firstChild;
        var cs = el.childNodes;

        this.el = new E(el);
        
         this.focusEl = new E(el.firstChild);
        this.focusEl.swallowEvent("click", true);
        
        this.headerPanel = new E(cs[1]);
        this.headerPanel.enableDisplayMode("block");

        this.scroller = new E(cs[2]);
        this.scrollSizer = new E(this.scroller.dom.firstChild);

        this.lockedWrap = new E(cs[3]);
        this.lockedHd = new E(this.lockedWrap.dom.firstChild);
        this.lockedBody = new E(this.lockedWrap.dom.childNodes[1]);

        this.mainWrap = new E(cs[4]);
        this.mainHd = new E(this.mainWrap.dom.firstChild);
        this.mainBody = new E(this.mainWrap.dom.childNodes[1]);

        this.footerPanel = new E(cs[5]);
        this.footerPanel.enableDisplayMode("block");

        this.resizeProxy = new E(cs[6]);

        this.headerSelector = String.format(
           '#{0} td.x-grid-hd, #{1} td.x-grid-hd',
           this.lockedHd.id, this.mainHd.id
        );

        this.splitterSelector = String.format(
           '#{0} div.x-grid-split, #{1} div.x-grid-split',
           this.idToCssName(this.lockedHd.id), this.idToCssName(this.mainHd.id)
        );
    },
    idToCssName : function(s)
    {
        return s.replace(/[^a-z0-9]+/ig, '-');
    },

    getHeaderCell : function(index){
        return Roo.DomQuery.select(this.headerSelector)[index];
    },

    getHeaderCellMeasure : function(index){
        return this.getHeaderCell(index).firstChild;
    },

    getHeaderCellText : function(index){
        return this.getHeaderCell(index).firstChild.firstChild;
    },

    getLockedTable : function(){
        return this.lockedBody.dom.firstChild;
    },

    getBodyTable : function(){
        return this.mainBody.dom.firstChild;
    },

    getLockedRow : function(index){
        return this.getLockedTable().rows[index];
    },

    getRow : function(index){
        return this.getBodyTable().rows[index];
    },

    getRowComposite : function(index){
        if(!this.rowEl){
            this.rowEl = new Roo.CompositeElementLite();
        }
        var els = [], lrow, mrow;
        if(lrow = this.getLockedRow(index)){
            els.push(lrow);
        }
        if(mrow = this.getRow(index)){
            els.push(mrow);
        }
        this.rowEl.elements = els;
        return this.rowEl;
    },
    /**
     * Gets the 'td' of the cell
     * 
     * @param {Integer} rowIndex row to select
     * @param {Integer} colIndex column to select
     * 
     * @return {Object} 
     */
    getCell : function(rowIndex, colIndex){
        var locked = this.cm.getLockedCount();
        var source;
        if(colIndex < locked){
            source = this.lockedBody.dom.firstChild;
        }else{
            source = this.mainBody.dom.firstChild;
            colIndex -= locked;
        }
        return source.rows[rowIndex].childNodes[colIndex];
    },

    getCellText : function(rowIndex, colIndex){
        return this.getCell(rowIndex, colIndex).firstChild.firstChild;
    },

    getCellBox : function(cell){
        var b = this.fly(cell).getBox();
        if(Roo.isOpera){ // opera fails to report the Y
            b.y = cell.offsetTop + this.mainBody.getY();
        }
        return b;
    },

    getCellIndex : function(cell){
        var id = String(cell.className).match(this.cellRE);
        if(id){
            return parseInt(id[1], 10);
        }
        return 0;
    },

    findHeaderIndex : function(n){
        var r = Roo.fly(n).findParent("td." + this.hdClass, 6);
        return r ? this.getCellIndex(r) : false;
    },

    findHeaderCell : function(n){
        var r = Roo.fly(n).findParent("td." + this.hdClass, 6);
        return r ? r : false;
    },

    findRowIndex : function(n){
        if(!n){
            return false;
        }
        var r = Roo.fly(n).findParent("tr." + this.rowClass, 6);
        return r ? r.rowIndex : false;
    },

    findCellIndex : function(node){
        var stop = this.el.dom;
        while(node && node != stop){
            if(this.findRE.test(node.className)){
                return this.getCellIndex(node);
            }
            node = node.parentNode;
        }
        return false;
    },

    getColumnId : function(index){
        return this.cm.getColumnId(index);
    },

    getSplitters : function()
    {
        if(this.splitterSelector){
           return Roo.DomQuery.select(this.splitterSelector);
        }else{
            return null;
      }
    },

    getSplitter : function(index){
        return this.getSplitters()[index];
    },

    onRowOver : function(e, t){
        var row;
        if((row = this.findRowIndex(t)) !== false){
            this.getRowComposite(row).addClass("x-grid-row-over");
        }
    },

    onRowOut : function(e, t){
        var row;
        if((row = this.findRowIndex(t)) !== false && row !== this.findRowIndex(e.getRelatedTarget())){
            this.getRowComposite(row).removeClass("x-grid-row-over");
        }
    },

    renderHeaders : function(){
        var cm = this.cm;
        var ct = this.templates.hcell, ht = this.templates.header, st = this.templates.hsplit;
        var cb = [], lb = [], sb = [], lsb = [], p = {};
        for(var i = 0, len = cm.getColumnCount(); i < len; i++){
            p.cellId = "x-grid-hd-0-" + i;
            p.splitId = "x-grid-csplit-0-" + i;
            p.id = cm.getColumnId(i);
            p.value = cm.getColumnHeader(i) || "";
            p.title = cm.getColumnTooltip(i) || (''+p.value).match(/\</)  ? '' :  p.value  || "";
            p.style = (this.grid.enableColumnResize === false || !cm.isResizable(i) || cm.isFixed(i)) ? 'cursor:default' : '';
            if(!cm.isLocked(i)){
                cb[cb.length] = ct.apply(p);
                sb[sb.length] = st.apply(p);
            }else{
                lb[lb.length] = ct.apply(p);
                lsb[lsb.length] = st.apply(p);
            }
        }
        return [ht.apply({cells: lb.join(""), splits:lsb.join("")}),
                ht.apply({cells: cb.join(""), splits:sb.join("")})];
    },

    updateHeaders : function(){
        var html = this.renderHeaders();
        this.lockedHd.update(html[0]);
        this.mainHd.update(html[1]);
    },

    /**
     * Focuses the specified row.
     * @param {Number} row The row index
     */
    focusRow : function(row)
    {
        //Roo.log('GridView.focusRow');
        var x = this.scroller.dom.scrollLeft;
        this.focusCell(row, 0, false);
        this.scroller.dom.scrollLeft = x;
    },

    /**
     * Focuses the specified cell.
     * @param {Number} row The row index
     * @param {Number} col The column index
     * @param {Boolean} hscroll false to disable horizontal scrolling
     */
    focusCell : function(row, col, hscroll)
    {
        //Roo.log('GridView.focusCell');
        var el = this.ensureVisible(row, col, hscroll);
        this.focusEl.alignTo(el, "tl-tl");
        if(Roo.isGecko){
            this.focusEl.focus();
        }else{
            this.focusEl.focus.defer(1, this.focusEl);
        }
    },

    /**
     * Scrolls the specified cell into view
     * @param {Number} row The row index
     * @param {Number} col The column index
     * @param {Boolean} hscroll false to disable horizontal scrolling
     */
    ensureVisible : function(row, col, hscroll)
    {
        //Roo.log('GridView.ensureVisible,' + row + ',' + col);
        //return null; //disable for testing.
        if(typeof row != "number"){
            row = row.rowIndex;
        }
        if(row < 0 && row >= this.ds.getCount()){
            return  null;
        }
        col = (col !== undefined ? col : 0);
        var cm = this.grid.colModel;
        while(cm.isHidden(col)){
            col++;
        }

        var el = this.getCell(row, col);
        if(!el){
            return null;
        }
        var c = this.scroller.dom;

        var ctop = parseInt(el.offsetTop, 10);
        var cleft = parseInt(el.offsetLeft, 10);
        var cbot = ctop + el.offsetHeight;
        var cright = cleft + el.offsetWidth;
        
        var ch = c.clientHeight - this.mainHd.dom.offsetHeight;
        var stop = parseInt(c.scrollTop, 10);
        var sleft = parseInt(c.scrollLeft, 10);
        var sbot = stop + ch;
        var sright = sleft + c.clientWidth;
        /*
        Roo.log('GridView.ensureVisible:' +
                ' ctop:' + ctop +
                ' c.clientHeight:' + c.clientHeight +
                ' this.mainHd.dom.offsetHeight:' + this.mainHd.dom.offsetHeight +
                ' stop:' + stop +
                ' cbot:' + cbot +
                ' sbot:' + sbot +
                ' ch:' + ch  
                );
        */
        if(ctop < stop){
            c.scrollTop = ctop;
            //Roo.log("set scrolltop to ctop DISABLE?");
        }else if(cbot > sbot){
            //Roo.log("set scrolltop to cbot-ch");
            c.scrollTop = cbot-ch;
        }
        
        if(hscroll !== false){
            if(cleft < sleft){
                c.scrollLeft = cleft;
            }else if(cright > sright){
                c.scrollLeft = cright-c.clientWidth;
            }
        }
         
        return el;
    },

    updateColumns : function(){
        this.grid.stopEditing();
        var cm = this.grid.colModel, colIds = this.getColumnIds();
        //var totalWidth = cm.getTotalWidth();
        var pos = 0;
        for(var i = 0, len = cm.getColumnCount(); i < len; i++){
            //if(cm.isHidden(i)) continue;
            var w = cm.getColumnWidth(i);
            this.css.updateRule(this.colSelector+this.idToCssName(colIds[i]), "width", (w - this.borderWidth) + "px");
            this.css.updateRule(this.hdSelector+this.idToCssName(colIds[i]), "width", (w - this.borderWidth) + "px");
        }
        this.updateSplitters();
    },

    generateRules : function(cm){
        var ruleBuf = [], rulesId = this.idToCssName(this.grid.id)+ '-cssrules';
        Roo.util.CSS.removeStyleSheet(rulesId);
        for(var i = 0, len = cm.getColumnCount(); i < len; i++){
            var cid = cm.getColumnId(i);
            var align = '';
            if(cm.config[i].align){
                align = 'text-align:'+cm.config[i].align+';';
            }
            var hidden = '';
            if(cm.isHidden(i)){
                hidden = 'display:none;';
            }
            var width = "width:" + (cm.getColumnWidth(i) - this.borderWidth) + "px;";
            ruleBuf.push(
                    this.colSelector, cid, " {\n", cm.config[i].css, align, width, "\n}\n",
                    this.hdSelector, cid, " {\n", align, width, "}\n",
                    this.tdSelector, cid, " {\n",hidden,"\n}\n",
                    this.splitSelector, cid, " {\n", hidden , "\n}\n");
        }
        return Roo.util.CSS.createStyleSheet(ruleBuf.join(""), rulesId);
    },

    updateSplitters : function(){
        var cm = this.cm, s = this.getSplitters();
        if(s){ // splitters not created yet
            var pos = 0, locked = true;
            for(var i = 0, len = cm.getColumnCount(); i < len; i++){
                if(cm.isHidden(i)) {
                    continue;
                }
                var w = cm.getColumnWidth(i); // make sure it's a number
                if(!cm.isLocked(i) && locked){
                    pos = 0;
                    locked = false;
                }
                pos += w;
                s[i].style.left = (pos-this.splitOffset) + "px";
            }
        }
    },

    handleHiddenChange : function(colModel, colIndex, hidden){
        if(hidden){
            this.hideColumn(colIndex);
        }else{
            this.unhideColumn(colIndex);
        }
    },

    hideColumn : function(colIndex){
        var cid = this.getColumnId(colIndex);
        this.css.updateRule(this.tdSelector+this.idToCssName(cid), "display", "none");
        this.css.updateRule(this.splitSelector+this.idToCssName(cid), "display", "none");
        if(Roo.isSafari){
            this.updateHeaders();
        }
        this.updateSplitters();
        this.layout();
    },

    unhideColumn : function(colIndex){
        var cid = this.getColumnId(colIndex);
        this.css.updateRule(this.tdSelector+this.idToCssName(cid), "display", "");
        this.css.updateRule(this.splitSelector+this.idToCssName(cid), "display", "");

        if(Roo.isSafari){
            this.updateHeaders();
        }
        this.updateSplitters();
        this.layout();
    },

    insertRows : function(dm, firstRow, lastRow, isUpdate){
        if(firstRow == 0 && lastRow == dm.getCount()-1){
            this.refresh();
        }else{
            if(!isUpdate){
                this.fireEvent("beforerowsinserted", this, firstRow, lastRow);
            }
            var s = this.getScrollState();
            var markup = this.renderRows(firstRow, lastRow);
            this.bufferRows(markup[0], this.getLockedTable(), firstRow);
            this.bufferRows(markup[1], this.getBodyTable(), firstRow);
            this.restoreScroll(s);
            if(!isUpdate){
                this.fireEvent("rowsinserted", this, firstRow, lastRow);
                this.syncRowHeights(firstRow, lastRow);
                this.stripeRows(firstRow);
                this.layout();
            }
        }
    },

    bufferRows : function(markup, target, index){
        var before = null, trows = target.rows, tbody = target.tBodies[0];
        if(index < trows.length){
            before = trows[index];
        }
        var b = document.createElement("div");
        b.innerHTML = "<table><tbody>"+markup+"</tbody></table>";
        var rows = b.firstChild.rows;
        for(var i = 0, len = rows.length; i < len; i++){
            if(before){
                tbody.insertBefore(rows[0], before);
            }else{
                tbody.appendChild(rows[0]);
            }
        }
        b.innerHTML = "";
        b = null;
    },

    deleteRows : function(dm, firstRow, lastRow){
        if(dm.getRowCount()<1){
            this.fireEvent("beforerefresh", this);
            this.mainBody.update("");
            this.lockedBody.update("");
            this.fireEvent("refresh", this);
        }else{
            this.fireEvent("beforerowsdeleted", this, firstRow, lastRow);
            var bt = this.getBodyTable();
            var tbody = bt.firstChild;
            var rows = bt.rows;
            for(var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++){
                tbody.removeChild(rows[firstRow]);
            }
            this.stripeRows(firstRow);
            this.fireEvent("rowsdeleted", this, firstRow, lastRow);
        }
    },

    updateRows : function(dataSource, firstRow, lastRow){
        var s = this.getScrollState();
        this.refresh();
        this.restoreScroll(s);
    },

    handleSort : function(dataSource, sortColumnIndex, sortDir, noRefresh){
        if(!noRefresh){
           this.refresh();
        }
        this.updateHeaderSortState();
    },

    getScrollState : function(){
        
        var sb = this.scroller.dom;
        return {left: sb.scrollLeft, top: sb.scrollTop};
    },

    stripeRows : function(startRow){
        if(!this.grid.stripeRows || this.ds.getCount() < 1){
            return;
        }
        startRow = startRow || 0;
        var rows = this.getBodyTable().rows;
        var lrows = this.getLockedTable().rows;
        var cls = ' x-grid-row-alt ';
        for(var i = startRow, len = rows.length; i < len; i++){
            var row = rows[i], lrow = lrows[i];
            var isAlt = ((i+1) % 2 == 0);
            var hasAlt = (' '+row.className + ' ').indexOf(cls) != -1;
            if(isAlt == hasAlt){
                continue;
            }
            if(isAlt){
                row.className += " x-grid-row-alt";
            }else{
                row.className = row.className.replace("x-grid-row-alt", "");
            }
            if(lrow){
                lrow.className = row.className;
            }
        }
    },

    restoreScroll : function(state){
        //Roo.log('GridView.restoreScroll');
        var sb = this.scroller.dom;
        sb.scrollLeft = state.left;
        sb.scrollTop = state.top;
        this.syncScroll();
    },

    syncScroll : function(){
        //Roo.log('GridView.syncScroll');
        var sb = this.scroller.dom;
        var sh = this.mainHd.dom;
        var bs = this.mainBody.dom;
        var lv = this.lockedBody.dom;
        sh.scrollLeft = bs.scrollLeft = sb.scrollLeft;
        lv.scrollTop = bs.scrollTop = sb.scrollTop;
    },

    handleScroll : function(e){
        this.syncScroll();
        var sb = this.scroller.dom;
        this.grid.fireEvent("bodyscroll", sb.scrollLeft, sb.scrollTop);
        e.stopEvent();
    },

    handleWheel : function(e){
        var d = e.getWheelDelta();
        this.scroller.dom.scrollTop -= d*22;
        // set this here to prevent jumpy scrolling on large tables
        this.lockedBody.dom.scrollTop = this.mainBody.dom.scrollTop = this.scroller.dom.scrollTop;
        e.stopEvent();
    },

    renderRows : function(startRow, endRow){
        // pull in all the crap needed to render rows
        var g = this.grid, cm = g.colModel, ds = g.dataSource, stripe = g.stripeRows;
        var colCount = cm.getColumnCount();

        if(ds.getCount() < 1){
            return ["", ""];
        }

        // build a map for all the columns
        var cs = [];
        for(var i = 0; i < colCount; i++){
            var name = cm.getDataIndex(i);
            cs[i] = {
                name : typeof name == 'undefined' ? ds.fields.get(i).name : name,
                renderer : cm.getRenderer(i),
                id : cm.getColumnId(i),
                locked : cm.isLocked(i),
                has_editor : cm.isCellEditable(i)
            };
        }

        startRow = startRow || 0;
        endRow = typeof endRow == "undefined"? ds.getCount()-1 : endRow;

        // records to render
        var rs = ds.getRange(startRow, endRow);

        return this.doRender(cs, rs, ds, startRow, colCount, stripe);
    },

    // As much as I hate to duplicate code, this was branched because FireFox really hates
    // [].join("") on strings. The performance difference was substantial enough to
    // branch this function
    doRender : Roo.isGecko ?
            function(cs, rs, ds, startRow, colCount, stripe){
                var ts = this.templates, ct = ts.cell, rt = ts.row;
                // buffers
                var buf = "", lbuf = "", cb, lcb, c, p = {}, rp = {}, r, rowIndex;
                
                var hasListener = this.grid.hasListener('rowclass');
                var rowcfg = {};
                for(var j = 0, len = rs.length; j < len; j++){
                    r = rs[j]; cb = ""; lcb = ""; rowIndex = (j+startRow);
                    for(var i = 0; i < colCount; i++){
                        c = cs[i];
                        p.cellId = "x-grid-cell-" + rowIndex + "-" + i;
                        p.id = c.id;
                        p.css = p.attr = "";
                        p.value = c.renderer(r.data[c.name], p, r, rowIndex, i, ds);
                        if(p.value == undefined || p.value === "") {
                            p.value = "&#160;";
                        }
                        if(c.has_editor){
                            p.css += ' x-grid-editable-cell';
                        }
                        if(c.dirty && typeof r.modified[c.name] !== 'undefined'){
                            p.css +=  ' x-grid-dirty-cell';
                        }
                        var markup = ct.apply(p);
                        if(!c.locked){
                            cb+= markup;
                        }else{
                            lcb+= markup;
                        }
                    }
                    var alt = [];
                    if(stripe && ((rowIndex+1) % 2 == 0)){
                        alt.push("x-grid-row-alt")
                    }
                    if(r.dirty){
                        alt.push(  " x-grid-dirty-row");
                    }
                    rp.cells = lcb;
                    if(this.getRowClass){
                        alt.push(this.getRowClass(r, rowIndex));
                    }
                    if (hasListener) {
                        rowcfg = {
                             
                            record: r,
                            rowIndex : rowIndex,
                            rowClass : ''
                        };
                        this.grid.fireEvent('rowclass', this, rowcfg);
                        alt.push(rowcfg.rowClass);
                    }
                    rp.alt = alt.join(" ");
                    lbuf+= rt.apply(rp);
                    rp.cells = cb;
                    buf+=  rt.apply(rp);
                }
                return [lbuf, buf];
            } :
            function(cs, rs, ds, startRow, colCount, stripe){
                var ts = this.templates, ct = ts.cell, rt = ts.row;
                // buffers
                var buf = [], lbuf = [], cb, lcb, c, p = {}, rp = {}, r, rowIndex;
                var hasListener = this.grid.hasListener('rowclass');
 
                var rowcfg = {};
                for(var j = 0, len = rs.length; j < len; j++){
                    r = rs[j]; cb = []; lcb = []; rowIndex = (j+startRow);
                    for(var i = 0; i < colCount; i++){
                        c = cs[i];
                        p.cellId = "x-grid-cell-" + rowIndex + "-" + i;
                        p.id = c.id;
                        p.css = p.attr = "";
                        p.value = c.renderer(r.data[c.name], p, r, rowIndex, i, ds);
                        if(p.value == undefined || p.value === "") {
                            p.value = "&#160;";
                        }
                        //Roo.log(c);
                         if(c.has_editor){
                            p.css += ' x-grid-editable-cell';
                        }
                        if(r.dirty && typeof r.modified[c.name] !== 'undefined'){
                            p.css += ' x-grid-dirty-cell' 
                        }
                        
                        var markup = ct.apply(p);
                        if(!c.locked){
                            cb[cb.length] = markup;
                        }else{
                            lcb[lcb.length] = markup;
                        }
                    }
                    var alt = [];
                    if(stripe && ((rowIndex+1) % 2 == 0)){
                        alt.push( "x-grid-row-alt");
                    }
                    if(r.dirty){
                        alt.push(" x-grid-dirty-row");
                    }
                    rp.cells = lcb;
                    if(this.getRowClass){
                        alt.push( this.getRowClass(r, rowIndex));
                    }
                    if (hasListener) {
                        rowcfg = {
                             
                            record: r,
                            rowIndex : rowIndex,
                            rowClass : ''
                        };
                        this.grid.fireEvent('rowclass', this, rowcfg);
                        alt.push(rowcfg.rowClass);
                    }
                    
                    rp.alt = alt.join(" ");
                    rp.cells = lcb.join("");
                    lbuf[lbuf.length] = rt.apply(rp);
                    rp.cells = cb.join("");
                    buf[buf.length] =  rt.apply(rp);
                }
                return [lbuf.join(""), buf.join("")];
            },

    renderBody : function(){
        var markup = this.renderRows();
        var bt = this.templates.body;
        return [bt.apply({rows: markup[0]}), bt.apply({rows: markup[1]})];
    },

    /**
     * Refreshes the grid
     * @param {Boolean} headersToo
     */
    refresh : function(headersToo){
        this.fireEvent("beforerefresh", this);
        this.grid.stopEditing();
        var result = this.renderBody();
        this.lockedBody.update(result[0]);
        this.mainBody.update(result[1]);
        if(headersToo === true){
            this.updateHeaders();
            this.updateColumns();
            this.updateSplitters();
            this.updateHeaderSortState();
        }
        this.syncRowHeights();
        this.layout();
        this.fireEvent("refresh", this);
    },

    handleColumnMove : function(cm, oldIndex, newIndex){
        this.indexMap = null;
        var s = this.getScrollState();
        this.refresh(true);
        this.restoreScroll(s);
        this.afterMove(newIndex);
    },

    afterMove : function(colIndex){
        if(this.enableMoveAnim && Roo.enableFx){
            this.fly(this.getHeaderCell(colIndex).firstChild).highlight(this.hlColor);
        }
        // if multisort - fix sortOrder, and reload..
        if (this.grid.dataSource.multiSort) {
            // the we can call sort again..
            var dm = this.grid.dataSource;
            var cm = this.grid.colModel;
            var so = [];
            for(var i = 0; i < cm.config.length; i++ ) {
                
                if ((typeof(dm.sortToggle[cm.config[i].dataIndex]) == 'undefined')) {
                    continue; // dont' bother, it's not in sort list or being set.
                }
                
                so.push(cm.config[i].dataIndex);
            };
            dm.sortOrder = so;
            dm.load(dm.lastOptions);
            
            
        }
        
    },

    updateCell : function(dm, rowIndex, dataIndex){
        var colIndex = this.getColumnIndexByDataIndex(dataIndex);
        if(typeof colIndex == "undefined"){ // not present in grid
            return;
        }
        var cm = this.grid.colModel;
        var cell = this.getCell(rowIndex, colIndex);
        var cellText = this.getCellText(rowIndex, colIndex);

        var p = {
            cellId : "x-grid-cell-" + rowIndex + "-" + colIndex,
            id : cm.getColumnId(colIndex),
            css: colIndex == cm.getColumnCount()-1 ? "x-grid-col-last" : ""
        };
        var renderer = cm.getRenderer(colIndex);
        var val = renderer(dm.getValueAt(rowIndex, dataIndex), p, rowIndex, colIndex, dm);
        if(typeof val == "undefined" || val === "") {
            val = "&#160;";
        }
        cellText.innerHTML = val;
        cell.className = this.cellClass + " " + this.idToCssName(p.cellId) + " " + p.css;
        this.syncRowHeights(rowIndex, rowIndex);
    },

    calcColumnWidth : function(colIndex, maxRowsToMeasure){
        var maxWidth = 0;
        if(this.grid.autoSizeHeaders){
            var h = this.getHeaderCellMeasure(colIndex);
            maxWidth = Math.max(maxWidth, h.scrollWidth);
        }
        var tb, index;
        if(this.cm.isLocked(colIndex)){
            tb = this.getLockedTable();
            index = colIndex;
        }else{
            tb = this.getBodyTable();
            index = colIndex - this.cm.getLockedCount();
        }
        if(tb && tb.rows){
            var rows = tb.rows;
            var stopIndex = Math.min(maxRowsToMeasure || rows.length, rows.length);
            for(var i = 0; i < stopIndex; i++){
                var cell = rows[i].childNodes[index].firstChild;
                maxWidth = Math.max(maxWidth, cell.scrollWidth);
            }
        }
        return maxWidth + /*margin for error in IE*/ 5;
    },
    /**
     * Autofit a column to its content.
     * @param {Number} colIndex
     * @param {Boolean} forceMinSize true to force the column to go smaller if possible
     */
     autoSizeColumn : function(colIndex, forceMinSize, suppressEvent){
         if(this.cm.isHidden(colIndex)){
             return; // can't calc a hidden column
         }
        if(forceMinSize){
            var cid = this.cm.getColumnId(colIndex);
            this.css.updateRule(this.colSelector +this.idToCssName( cid), "width", this.grid.minColumnWidth + "px");
           if(this.grid.autoSizeHeaders){
               this.css.updateRule(this.hdSelector + this.idToCssName(cid), "width", this.grid.minColumnWidth + "px");
           }
        }
        var newWidth = this.calcColumnWidth(colIndex);
        this.cm.setColumnWidth(colIndex,
            Math.max(this.grid.minColumnWidth, newWidth), suppressEvent);
        if(!suppressEvent){
            this.grid.fireEvent("columnresize", colIndex, newWidth);
        }
    },

    /**
     * Autofits all columns to their content and then expands to fit any extra space in the grid
     */
     autoSizeColumns : function(){
        var cm = this.grid.colModel;
        var colCount = cm.getColumnCount();
        for(var i = 0; i < colCount; i++){
            this.autoSizeColumn(i, true, true);
        }
        if(cm.getTotalWidth() < this.scroller.dom.clientWidth){
            this.fitColumns();
        }else{
            this.updateColumns();
            this.layout();
        }
    },

    /**
     * Autofits all columns to the grid's width proportionate with their current size
     * @param {Boolean} reserveScrollSpace Reserve space for a scrollbar
     */
    fitColumns : function(reserveScrollSpace){
        var cm = this.grid.colModel;
        var colCount = cm.getColumnCount();
        var cols = [];
        var width = 0;
        var i, w;
        for (i = 0; i < colCount; i++){
            if(!cm.isHidden(i) && !cm.isFixed(i)){
                w = cm.getColumnWidth(i);
                cols.push(i);
                cols.push(w);
                width += w;
            }
        }
        var avail = Math.min(this.scroller.dom.clientWidth, this.el.getWidth());
        if(reserveScrollSpace){
            avail -= 17;
        }
        var frac = (avail - cm.getTotalWidth())/width;
        while (cols.length){
            w = cols.pop();
            i = cols.pop();
            cm.setColumnWidth(i, Math.floor(w + w*frac), true);
        }
        this.updateColumns();
        this.layout();
    },

    onRowSelect : function(rowIndex){
        var row = this.getRowComposite(rowIndex);
        row.addClass("x-grid-row-selected");
    },

    onRowDeselect : function(rowIndex){
        var row = this.getRowComposite(rowIndex);
        row.removeClass("x-grid-row-selected");
    },

    onCellSelect : function(row, col){
        var cell = this.getCell(row, col);
        if(cell){
            Roo.fly(cell).addClass("x-grid-cell-selected");
        }
    },

    onCellDeselect : function(row, col){
        var cell = this.getCell(row, col);
        if(cell){
            Roo.fly(cell).removeClass("x-grid-cell-selected");
        }
    },

    updateHeaderSortState : function(){
        
        // sort state can be single { field: xxx, direction : yyy}
        // or   { xxx=>ASC , yyy : DESC ..... }
        
        var mstate = {};
        if (!this.ds.multiSort) { 
            var state = this.ds.getSortState();
            if(!state){
                return;
            }
            mstate[state.field] = state.direction;
            // FIXME... - this is not used here.. but might be elsewhere..
            this.sortState = state;
            
        } else {
            mstate = this.ds.sortToggle;
        }
        //remove existing sort classes..
        
        var sc = this.sortClasses;
        var hds = this.el.select(this.headerSelector).removeClass(sc);
        
        for(var f in mstate) {
        
            var sortColumn = this.cm.findColumnIndex(f);
            
            if(sortColumn != -1){
                var sortDir = mstate[f];        
                hds.item(sortColumn).addClass(sc[sortDir == "DESC" ? 1 : 0]);
            }
        }
        
         
        
    },


    handleHeaderClick : function(g, index,e){
        
        Roo.log("header click");
        
        if (Roo.isTouch) {
            // touch events on header are handled by context
            this.handleHdCtx(g,index,e);
            return;
        }
        
        
        if(this.headersDisabled){
            return;
        }
        var dm = g.dataSource, cm = g.colModel;
        if(!cm.isSortable(index)){
            return;
        }
        g.stopEditing();
        
        if (dm.multiSort) {
            // update the sortOrder
            var so = [];
            for(var i = 0; i < cm.config.length; i++ ) {
                
                if ((typeof(dm.sortToggle[cm.config[i].dataIndex]) == 'undefined') && (index != i)) {
                    continue; // dont' bother, it's not in sort list or being set.
                }
                
                so.push(cm.config[i].dataIndex);
            };
            dm.sortOrder = so;
        }
        
        
        dm.sort(cm.getDataIndex(index));
    },


    destroy : function(){
        if(this.colMenu){
            this.colMenu.removeAll();
            Roo.menu.MenuMgr.unregister(this.colMenu);
            this.colMenu.getEl().remove();
            delete this.colMenu;
        }
        if(this.hmenu){
            this.hmenu.removeAll();
            Roo.menu.MenuMgr.unregister(this.hmenu);
            this.hmenu.getEl().remove();
            delete this.hmenu;
        }
        if(this.grid.enableColumnMove){
            var dds = Roo.dd.DDM.ids['gridHeader' + this.grid.getGridEl().id];
            if(dds){
                for(var dd in dds){
                    if(!dds[dd].config.isTarget && dds[dd].dragElId){
                        var elid = dds[dd].dragElId;
                        dds[dd].unreg();
                        Roo.get(elid).remove();
                    } else if(dds[dd].config.isTarget){
                        dds[dd].proxyTop.remove();
                        dds[dd].proxyBottom.remove();
                        dds[dd].unreg();
                    }
                    if(Roo.dd.DDM.locationCache[dd]){
                        delete Roo.dd.DDM.locationCache[dd];
                    }
                }
                delete Roo.dd.DDM.ids['gridHeader' + this.grid.getGridEl().id];
            }
        }
        Roo.util.CSS.removeStyleSheet(this.idToCssName(this.grid.id) + '-cssrules');
        this.bind(null, null);
        Roo.EventManager.removeResizeListener(this.onWindowResize, this);
    },

    handleLockChange : function(){
        this.refresh(true);
    },

    onDenyColumnLock : function(){

    },

    onDenyColumnHide : function(){

    },

    handleHdMenuClick : function(item){
        var index = this.hdCtxIndex;
        var cm = this.cm, ds = this.ds;
        switch(item.id){
            case "asc":
                ds.sort(cm.getDataIndex(index), "ASC");
                break;
            case "desc":
                ds.sort(cm.getDataIndex(index), "DESC");
                break;
            case "lock":
                var lc = cm.getLockedCount();
                if(cm.getColumnCount(true) <= lc+1){
                    this.onDenyColumnLock();
                    return;
                }
                if(lc != index){
                    cm.setLocked(index, true, true);
                    cm.moveColumn(index, lc);
                    this.grid.fireEvent("columnmove", index, lc);
                }else{
                    cm.setLocked(index, true);
                }
            break;
            case "unlock":
                var lc = cm.getLockedCount();
                if((lc-1) != index){
                    cm.setLocked(index, false, true);
                    cm.moveColumn(index, lc-1);
                    this.grid.fireEvent("columnmove", index, lc-1);
                }else{
                    cm.setLocked(index, false);
                }
            break;
            case 'wider': // used to expand cols on touch..
            case 'narrow':
                var cw = cm.getColumnWidth(index);
                cw += (item.id == 'wider' ? 1 : -1) * 50;
                cw = Math.max(0, cw);
                cw = Math.min(cw,4000);
                cm.setColumnWidth(index, cw);
                break;
                
            default:
                index = cm.getIndexById(item.id.substr(4));
                if(index != -1){
                    if(item.checked && cm.getColumnCount(true) <= 1){
                        this.onDenyColumnHide();
                        return false;
                    }
                    cm.setHidden(index, item.checked);
                }
        }
        return true;
    },

    beforeColMenuShow : function(){
        var cm = this.cm,  colCount = cm.getColumnCount();
        this.colMenu.removeAll();
        
        var items = [];
        for(var i = 0; i < colCount; i++){
            items.push({
                id: "col-"+cm.getColumnId(i),
                text: cm.getColumnHeader(i),
                checked: !cm.isHidden(i),
                hideOnClick:false
            });
        }
        
        if (this.grid.sortColMenu) {
            items.sort(function(a,b) {
                if (a.text == b.text) {
                    return 0;
                }
                return a.text.toUpperCase() > b.text.toUpperCase() ? 1 : -1;
            });
        }
        
        for(var i = 0; i < colCount; i++){
            this.colMenu.add(new Roo.menu.CheckItem(items[i]));
        }
    },

    handleHdCtx : function(g, index, e){
        e.stopEvent();
        var hd = this.getHeaderCell(index);
        this.hdCtxIndex = index;
        var ms = this.hmenu.items, cm = this.cm;
        ms.get("asc").setDisabled(!cm.isSortable(index));
        ms.get("desc").setDisabled(!cm.isSortable(index));
        if(this.grid.enableColLock !== false){
            ms.get("lock").setDisabled(cm.isLocked(index));
            ms.get("unlock").setDisabled(!cm.isLocked(index));
        }
        this.hmenu.show(hd, "tl-bl");
    },

    handleHdOver : function(e){
        var hd = this.findHeaderCell(e.getTarget());
        if(hd && !this.headersDisabled){
            if(this.grid.colModel.isSortable(this.getCellIndex(hd))){
               this.fly(hd).addClass("x-grid-hd-over");
            }
        }
    },

    handleHdOut : function(e){
        var hd = this.findHeaderCell(e.getTarget());
        if(hd){
            this.fly(hd).removeClass("x-grid-hd-over");
        }
    },

    handleSplitDblClick : function(e, t){
        var i = this.getCellIndex(t);
        if(this.grid.enableColumnResize !== false && this.cm.isResizable(i) && !this.cm.isFixed(i)){
            this.autoSizeColumn(i, true);
            this.layout();
        }
    },

    render : function(){

        var cm = this.cm;
        var colCount = cm.getColumnCount();

        if(this.grid.monitorWindowResize === true){
            Roo.EventManager.onWindowResize(this.onWindowResize, this, true);
        }
        var header = this.renderHeaders();
        var body = this.templates.body.apply({rows:""});
        var html = this.templates.master.apply({
            lockedBody: body,
            body: body,
            lockedHeader: header[0],
            header: header[1]
        });

        //this.updateColumns();

        this.grid.getGridEl().dom.innerHTML = html;

        this.initElements();
        
        // a kludge to fix the random scolling effect in webkit
        this.el.on("scroll", function() {
            this.el.dom.scrollTop=0; // hopefully not recursive..
        },this);

        this.scroller.on("scroll", this.handleScroll, this);
        this.lockedBody.on("mousewheel", this.handleWheel, this);
        this.mainBody.on("mousewheel", this.handleWheel, this);

        this.mainHd.on("mouseover", this.handleHdOver, this);
        this.mainHd.on("mouseout", this.handleHdOut, this);
        this.mainHd.on("dblclick", this.handleSplitDblClick, this,
                {delegate: "."+this.splitClass});

        this.lockedHd.on("mouseover", this.handleHdOver, this);
        this.lockedHd.on("mouseout", this.handleHdOut, this);
        this.lockedHd.on("dblclick", this.handleSplitDblClick, this,
                {delegate: "."+this.splitClass});

        if(this.grid.enableColumnResize !== false && Roo.grid.SplitDragZone){
            new Roo.grid.SplitDragZone(this.grid, this.lockedHd.dom, this.mainHd.dom);
        }

        this.updateSplitters();

        if(this.grid.enableColumnMove && Roo.grid.HeaderDragZone){
            new Roo.grid.HeaderDragZone(this.grid, this.lockedHd.dom, this.mainHd.dom);
            new Roo.grid.HeaderDropZone(this.grid, this.lockedHd.dom, this.mainHd.dom);
        }

        if(this.grid.enableCtxMenu !== false && Roo.menu.Menu){
            this.hmenu = new Roo.menu.Menu({id: this.grid.id + "-hctx"});
            this.hmenu.add(
                {id:"asc", text: this.sortAscText, cls: "xg-hmenu-sort-asc"},
                {id:"desc", text: this.sortDescText, cls: "xg-hmenu-sort-desc"}
            );
            if(this.grid.enableColLock !== false){
                this.hmenu.add('-',
                    {id:"lock", text: this.lockText, cls: "xg-hmenu-lock"},
                    {id:"unlock", text: this.unlockText, cls: "xg-hmenu-unlock"}
                );
            }
            if (Roo.isTouch) {
                 this.hmenu.add('-',
                    {id:"wider", text: this.columnsWiderText},
                    {id:"narrow", text: this.columnsNarrowText }
                );
                
                 
            }
            
            if(this.grid.enableColumnHide !== false){

                this.colMenu = new Roo.menu.Menu({id:this.grid.id + "-hcols-menu"});
                this.colMenu.on("beforeshow", this.beforeColMenuShow, this);
                this.colMenu.on("itemclick", this.handleHdMenuClick, this);

                this.hmenu.add('-',
                    {id:"columns", text: this.columnsText, menu: this.colMenu}
                );
            }
            this.hmenu.on("itemclick", this.handleHdMenuClick, this);

            this.grid.on("headercontextmenu", this.handleHdCtx, this);
        }

        if((this.grid.enableDragDrop || this.grid.enableDrag) && Roo.grid.GridDragZone){
            this.dd = new Roo.grid.GridDragZone(this.grid, {
                ddGroup : this.grid.ddGroup || 'GridDD'
            });
            
        }

        /*
        for(var i = 0; i < colCount; i++){
            if(cm.isHidden(i)){
                this.hideColumn(i);
            }
            if(cm.config[i].align){
                this.css.updateRule(this.colSelector + i, "textAlign", cm.config[i].align);
                this.css.updateRule(this.hdSelector + i, "textAlign", cm.config[i].align);
            }
        }*/
        
        this.updateHeaderSortState();

        this.beforeInitialResize();
        this.layout(true);

        // two part rendering gives faster view to the user
        this.renderPhase2.defer(1, this);
    },

    renderPhase2 : function(){
        // render the rows now
        this.refresh();
        if(this.grid.autoSizeColumns){
            this.autoSizeColumns();
        }
    },

    beforeInitialResize : function(){

    },

    onColumnSplitterMoved : function(i, w){
        this.userResized = true;
        var cm = this.grid.colModel;
        cm.setColumnWidth(i, w, true);
        var cid = cm.getColumnId(i);
        this.css.updateRule(this.colSelector + this.idToCssName(cid), "width", (w-this.borderWidth) + "px");
        this.css.updateRule(this.hdSelector + this.idToCssName(cid), "width", (w-this.borderWidth) + "px");
        this.updateSplitters();
        this.layout();
        this.grid.fireEvent("columnresize", i, w);
    },

    syncRowHeights : function(startIndex, endIndex){
        if(this.grid.enableRowHeightSync === true && this.cm.getLockedCount() > 0){
            startIndex = startIndex || 0;
            var mrows = this.getBodyTable().rows;
            var lrows = this.getLockedTable().rows;
            var len = mrows.length-1;
            endIndex = Math.min(endIndex || len, len);
            for(var i = startIndex; i <= endIndex; i++){
                var m = mrows[i], l = lrows[i];
                var h = Math.max(m.offsetHeight, l.offsetHeight);
                m.style.height = l.style.height = h + "px";
            }
        }
    },

    layout : function(initialRender, is2ndPass)
    {
        var g = this.grid;
        var auto = g.autoHeight;
        var scrollOffset = 16;
        var c = g.getGridEl(), cm = this.cm,
                expandCol = g.autoExpandColumn,
                gv = this;
        //c.beginMeasure();

        if(!c.dom.offsetWidth){ // display:none?
            if(initialRender){
                this.lockedWrap.show();
                this.mainWrap.show();
            }
            return;
        }

        var hasLock = this.cm.isLocked(0);

        var tbh = this.headerPanel.getHeight();
        var bbh = this.footerPanel.getHeight();

        if(auto){
            var ch = this.getBodyTable().offsetHeight + tbh + bbh + this.mainHd.getHeight();
            var newHeight = ch + c.getBorderWidth("tb");
            if(g.maxHeight){
                newHeight = Math.min(g.maxHeight, newHeight);
            }
            c.setHeight(newHeight);
        }

        if(g.autoWidth){
            c.setWidth(cm.getTotalWidth()+c.getBorderWidth('lr'));
        }

        var s = this.scroller;

        var csize = c.getSize(true);

        this.el.setSize(csize.width, csize.height);

        this.headerPanel.setWidth(csize.width);
        this.footerPanel.setWidth(csize.width);

        var hdHeight = this.mainHd.getHeight();
        var vw = csize.width;
        var vh = csize.height - (tbh + bbh);

        s.setSize(vw, vh);

        var bt = this.getBodyTable();
        
        if(cm.getLockedCount() == cm.config.length){
            bt = this.getLockedTable();
        }
        
        var ltWidth = hasLock ?
                      Math.max(this.getLockedTable().offsetWidth, this.lockedHd.dom.firstChild.offsetWidth) : 0;

        var scrollHeight = bt.offsetHeight;
        var scrollWidth = ltWidth + bt.offsetWidth;
        var vscroll = false, hscroll = false;

        this.scrollSizer.setSize(scrollWidth, scrollHeight+hdHeight);

        var lw = this.lockedWrap, mw = this.mainWrap;
        var lb = this.lockedBody, mb = this.mainBody;

        setTimeout(function(){
            var t = s.dom.offsetTop;
            var w = s.dom.clientWidth,
                h = s.dom.clientHeight;

            lw.setTop(t);
            lw.setSize(ltWidth, h);

            mw.setLeftTop(ltWidth, t);
            mw.setSize(w-ltWidth, h);

            lb.setHeight(h-hdHeight);
            mb.setHeight(h-hdHeight);

            if(is2ndPass !== true && !gv.userResized && expandCol){
                // high speed resize without full column calculation
                
                var ci = cm.getIndexById(expandCol);
                if (ci < 0) {
                    ci = cm.findColumnIndex(expandCol);
                }
                ci = Math.max(0, ci); // make sure it's got at least the first col.
                var expandId = cm.getColumnId(ci);
                var  tw = cm.getTotalWidth(false);
                var currentWidth = cm.getColumnWidth(ci);
                var cw = Math.min(Math.max(((w-tw)+currentWidth-2)-/*scrollbar*/(w <= s.dom.offsetWidth ? 0 : 18), g.autoExpandMin), g.autoExpandMax);
                if(currentWidth != cw){
                    cm.setColumnWidth(ci, cw, true);
                    gv.css.updateRule(gv.colSelector+gv.idToCssName(expandId), "width", (cw - gv.borderWidth) + "px");
                    gv.css.updateRule(gv.hdSelector+gv.idToCssName(expandId), "width", (cw - gv.borderWidth) + "px");
                    gv.updateSplitters();
                    gv.layout(false, true);
                }
            }

            if(initialRender){
                lw.show();
                mw.show();
            }
            //c.endMeasure();
        }, 10);
    },

    onWindowResize : function(){
        if(!this.grid.monitorWindowResize || this.grid.autoHeight){
            return;
        }
        this.layout();
    },

    appendFooter : function(parentEl){
        return null;
    },

    sortAscText : "Sort Ascending",
    sortDescText : "Sort Descending",
    lockText : "Lock Column",
    unlockText : "Unlock Column",
    columnsText : "Columns",
 
    columnsWiderText : "Wider",
    columnsNarrowText : "Thinner"
});


Roo.grid.GridView.ColumnDragZone = function(grid, hd){
    Roo.grid.GridView.ColumnDragZone.superclass.constructor.call(this, grid, hd, null);
    this.proxy.el.addClass('x-grid3-col-dd');
};

Roo.extend(Roo.grid.GridView.ColumnDragZone, Roo.grid.HeaderDragZone, {
    handleMouseDown : function(e){

    },

    callHandleMouseDown : function(e){
        Roo.grid.GridView.ColumnDragZone.superclass.handleMouseDown.call(this, e);
    }
});
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 /**
 * @extends Roo.dd.DDProxy
 * @class Roo.grid.SplitDragZone
 * Support for Column Header resizing
 * @constructor
 * @param {Object} config
 */
// private
// This is a support class used internally by the Grid components
Roo.grid.SplitDragZone = function(grid, hd, hd2){
    this.grid = grid;
    this.view = grid.getView();
    this.proxy = this.view.resizeProxy;
    Roo.grid.SplitDragZone.superclass.constructor.call(
        this,
        hd, // ID
        "gridSplitters" + this.grid.getGridEl().id, // SGROUP
        {  // CONFIG
            dragElId : Roo.id(this.proxy.dom),
            resizeFrame:false
        }
    );
    
    this.setHandleElId(Roo.id(hd));
    if (hd2 !== false) {
        this.setOuterHandleElId(Roo.id(hd2));
    }
    
    this.scroll = false;
};
Roo.extend(Roo.grid.SplitDragZone, Roo.dd.DDProxy, {
    fly: Roo.Element.fly,

    b4StartDrag : function(x, y){
        this.view.headersDisabled = true;
        var h = this.view.mainWrap ? this.view.mainWrap.getHeight() : (
                    this.view.headEl.getHeight() + this.view.bodyEl.getHeight()
        );
        this.proxy.setHeight(h);
        
        // for old system colWidth really stored the actual width?
        // in bootstrap we tried using xs/ms/etc.. to do % sizing?
        // which in reality did not work.. - it worked only for fixed sizes
        // for resizable we need to use actual sizes.
        var w = this.cm.getColumnWidth(this.cellIndex);
        if (!this.view.mainWrap) {
            // bootstrap.
            w = this.view.getHeaderIndex(this.cellIndex).getWidth();
        }
        
        
        
        // this was w-this.grid.minColumnWidth;
        // doesnt really make sense? - w = thie curren width or the rendered one?
        var minw = Math.max(w-this.grid.minColumnWidth, 0);
        this.resetConstraints();
        this.setXConstraint(minw, 1000);
        this.setYConstraint(0, 0);
        this.minX = x - minw;
        this.maxX = x + 1000;
        this.startPos = x;
        if (!this.view.mainWrap) { // this is Bootstrap code..
            this.getDragEl().style.display='block';
        }
        
        Roo.dd.DDProxy.prototype.b4StartDrag.call(this, x, y);
    },


    handleMouseDown : function(e){
        ev = Roo.EventObject.setEvent(e);
        var t = this.fly(ev.getTarget());
        if(t.hasClass("x-grid-split")){
            this.cellIndex = this.view.getCellIndex(t.dom);
            this.split = t.dom;
            this.cm = this.grid.colModel;
            if(this.cm.isResizable(this.cellIndex) && !this.cm.isFixed(this.cellIndex)){
                Roo.grid.SplitDragZone.superclass.handleMouseDown.apply(this, arguments);
            }
        }
    },

    endDrag : function(e){
        this.view.headersDisabled = false;
        var endX = Math.max(this.minX, Roo.lib.Event.getPageX(e));
        var diff = endX - this.startPos;
        // 
        var w = this.cm.getColumnWidth(this.cellIndex);
        if (!this.view.mainWrap) {
            w = 0;
        }
        this.view.onColumnSplitterMoved(this.cellIndex, w+diff);
    },

    autoOffset : function(){
        this.setDelta(0,0);
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
// private
// This is a support class used internally by the Grid components
Roo.grid.GridDragZone = function(grid, config){
    this.view = grid.getView();
    Roo.grid.GridDragZone.superclass.constructor.call(this, this.view.mainBody.dom, config);
    if(this.view.lockedBody){
        this.setHandleElId(Roo.id(this.view.mainBody.dom));
        this.setOuterHandleElId(Roo.id(this.view.lockedBody.dom));
    }
    this.scroll = false;
    this.grid = grid;
    this.ddel = document.createElement('div');
    this.ddel.className = 'x-grid-dd-wrap';
};

Roo.extend(Roo.grid.GridDragZone, Roo.dd.DragZone, {
    ddGroup : "GridDD",

    getDragData : function(e){
        var t = Roo.lib.Event.getTarget(e);
        var rowIndex = this.view.findRowIndex(t);
        var sm = this.grid.selModel;
            
        //Roo.log(rowIndex);
        
        if (sm.getSelectedCell) {
            // cell selection..
            if (!sm.getSelectedCell()) {
                return false;
            }
            if (rowIndex != sm.getSelectedCell()[0]) {
                return false;
            }
        
        }
        if (sm.getSelections && sm.getSelections().length < 1) {
            return false;
        }
        
        
        // before it used to all dragging of unseleted... - now we dont do that.
        if(rowIndex !== false){
            
            // if editorgrid.. 
            
            
            //Roo.log([ sm.getSelectedCell() ? sm.getSelectedCell()[0] : 'NO' , rowIndex ]);
               
            //if(!sm.isSelected(rowIndex) || e.hasModifier()){
              //  
            //}
            if (e.hasModifier()){
                sm.handleMouseDown(e, t); // non modifier buttons are handled by row select.
            }
            
            Roo.log("getDragData");
            
            return {
                grid: this.grid,
                ddel: this.ddel,
                rowIndex: rowIndex,
                selections: sm.getSelections ? sm.getSelections() : (
                    sm.getSelectedCell() ? [ this.grid.ds.getAt(sm.getSelectedCell()[0]) ] : [])
            };
        }
        return false;
    },
    
    
    onInitDrag : function(e){
        var data = this.dragData;
        this.ddel.innerHTML = this.grid.getDragDropText();
        this.proxy.update(this.ddel);
        // fire start drag?
    },

    afterRepair : function(){
        this.dragging = false;
    },

    getRepairXY : function(e, data){
        return false;
    },

    onEndDrag : function(data, e){
        // fire end drag?
    },

    onValidDrop : function(dd, e, id){
        // fire drag drop?
        this.hideProxy();
    },

    beforeInvalidDrop : function(e, id){

    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 

/**
 * @class Roo.grid.ColumnModel
 * @extends Roo.util.Observable
 * This is the default implementation of a ColumnModel used by the Grid. It defines
 * the columns in the grid.
 * <br>Usage:<br>
 <pre><code>
 var colModel = new Roo.grid.ColumnModel([
	{header: "Ticker", width: 60, sortable: true, locked: true},
	{header: "Company Name", width: 150, sortable: true},
	{header: "Market Cap.", width: 100, sortable: true},
	{header: "$ Sales", width: 100, sortable: true, renderer: money},
	{header: "Employees", width: 100, sortable: true, resizable: false}
 ]);
 </code></pre>
 * <p>
 
 * The config options listed for this class are options which may appear in each
 * individual column definition.
 * <br/>RooJS Fix - column id's are not sequential but use Roo.id() - fixes bugs with layouts.
 * @constructor
 * @param {Object} config An Array of column config objects. See this class's
 * config objects for details.
*/
Roo.grid.ColumnModel = function(config){
	/**
     * The config passed into the constructor
     */
    this.config = []; //config;
    this.lookup = {};

    // if no id, create one
    // if the column does not have a dataIndex mapping,
    // map it to the order it is in the config
    for(var i = 0, len = config.length; i < len; i++){
	this.addColumn(config[i]);
	
    }

    /**
     * The width of columns which have no width specified (defaults to 100)
     * @type Number
     */
    this.defaultWidth = 100;

    /**
     * Default sortable of columns which have no sortable specified (defaults to false)
     * @type Boolean
     */
    this.defaultSortable = false;

    this.addEvents({
        /**
	     * @event widthchange
	     * Fires when the width of a column changes.
	     * @param {ColumnModel} this
	     * @param {Number} columnIndex The column index
	     * @param {Number} newWidth The new width
	     */
	    "widthchange": true,
        /**
	     * @event headerchange
	     * Fires when the text of a header changes.
	     * @param {ColumnModel} this
	     * @param {Number} columnIndex The column index
	     * @param {Number} newText The new header text
	     */
	    "headerchange": true,
        /**
	     * @event hiddenchange
	     * Fires when a column is hidden or "unhidden".
	     * @param {ColumnModel} this
	     * @param {Number} columnIndex The column index
	     * @param {Boolean} hidden true if hidden, false otherwise
	     */
	    "hiddenchange": true,
	    /**
         * @event columnmoved
         * Fires when a column is moved.
         * @param {ColumnModel} this
         * @param {Number} oldIndex
         * @param {Number} newIndex
         */
        "columnmoved" : true,
        /**
         * @event columlockchange
         * Fires when a column's locked state is changed
         * @param {ColumnModel} this
         * @param {Number} colIndex
         * @param {Boolean} locked true if locked
         */
        "columnlockchange" : true
    });
    Roo.grid.ColumnModel.superclass.constructor.call(this);
};
Roo.extend(Roo.grid.ColumnModel, Roo.util.Observable, {
    /**
     * @cfg {String} header [required] The header text to display in the Grid view.
     */
	/**
     * @cfg {String} xsHeader Header at Bootsrap Extra Small width (default for all)
     */
	/**
     * @cfg {String} smHeader Header at Bootsrap Small width
     */
	/**
     * @cfg {String} mdHeader Header at Bootsrap Medium width
     */
	/**
     * @cfg {String} lgHeader Header at Bootsrap Large width
     */
	/**
     * @cfg {String} xlHeader Header at Bootsrap extra Large width
     */
    /**
     * @cfg {String} dataIndex  The name of the field in the grid's {@link Roo.data.Store}'s
     * {@link Roo.data.Record} definition from which to draw the column's value. If not
     * specified, the column's index is used as an index into the Record's data Array.
     */
    /**
     * @cfg {Number} width  The initial width in pixels of the column. Using this
     * instead of {@link Roo.grid.Grid#autoSizeColumns} is more efficient.
     */
    /**
     * @cfg {Boolean} sortable True if sorting is to be allowed on this column.
     * Defaults to the value of the {@link #defaultSortable} property.
     * Whether local/remote sorting is used is specified in {@link Roo.data.Store#remoteSort}.
     */
    /**
     * @cfg {Boolean} locked  True to lock the column in place while scrolling the Grid.  Defaults to false.
     */
    /**
     * @cfg {Boolean} fixed  True if the column width cannot be changed.  Defaults to false.
     */
    /**
     * @cfg {Boolean} resizable  False to disable column resizing. Defaults to true.
     */
    /**
     * @cfg {Boolean} hidden  True to hide the column. Defaults to false.
     */
    /**
     * @cfg {Function} renderer A function used to generate HTML markup for a cell
     * given the cell's data value. See {@link #setRenderer}. If not specified, the
     * default renderer returns the escaped data value. If an object is returned (bootstrap only)
     * then it is treated as a Roo Component object instance, and it is rendered after the initial row is rendered
     */
       /**
     * @cfg {Roo.grid.GridEditor} editor  For grid editors - returns the grid editor 
     */
    /**
     * @cfg {String} align (left|right) Set the CSS text-align property of the column.  Defaults to undefined (left).
     */
    /**
     * @cfg {String} valign (top|bottom|middle) Set the CSS vertical-align property of the column (eg. middle, top, bottom etc).  Defaults to undefined (middle)
     */
    /**
     * @cfg {String} cursor ( auto|default|none|context-menu|help|pointer|progress|wait|cell|crosshair|text|vertical-text|alias|copy|move|no-drop|not-allowed|e-resize|n-resize|ne-resize|nw-resize|s-resize|se-resize|sw-resize|w-resize|ew-resize|ns-resize|nesw-resize|nwse-resize|col-resize|row-resize|all-scroll|zoom-in|zoom-out|grab|grabbing)
     */
    /**
     * @cfg {String} tooltip mouse over tooltip text
     */
    /**
     * @cfg {Number} xs  can be '0' for hidden at this size (number less than 12)
     */
    /**
     * @cfg {Number} sm can be '0' for hidden at this size (number less than 12)
     */
    /**
     * @cfg {Number} md can be '0' for hidden at this size (number less than 12)
     */
    /**
     * @cfg {Number} lg   can be '0' for hidden at this size (number less than 12)
     */
	/**
     * @cfg {Number} xl   can be '0' for hidden at this size (number less than 12)
     */
    /**
     * Returns the id of the column at the specified index.
     * @param {Number} index The column index
     * @return {String} the id
     */
    getColumnId : function(index){
        return this.config[index].id;
    },

    /**
     * Returns the column for a specified id.
     * @param {String} id The column id
     * @return {Object} the column
     */
    getColumnById : function(id){
        return this.lookup[id];
    },

    
    /**
     * Returns the column Object for a specified dataIndex.
     * @param {String} dataIndex The column dataIndex
     * @return {Object|Boolean} the column or false if not found
     */
    getColumnByDataIndex: function(dataIndex){
        var index = this.findColumnIndex(dataIndex);
        return index > -1 ? this.config[index] : false;
    },
    
    /**
     * Returns the index for a specified column id.
     * @param {String} id The column id
     * @return {Number} the index, or -1 if not found
     */
    getIndexById : function(id){
        for(var i = 0, len = this.config.length; i < len; i++){
            if(this.config[i].id == id){
                return i;
            }
        }
        return -1;
    },
    
    /**
     * Returns the index for a specified column dataIndex.
     * @param {String} dataIndex The column dataIndex
     * @return {Number} the index, or -1 if not found
     */
    
    findColumnIndex : function(dataIndex){
        for(var i = 0, len = this.config.length; i < len; i++){
            if(this.config[i].dataIndex == dataIndex){
                return i;
            }
        }
        return -1;
    },
    
    
    moveColumn : function(oldIndex, newIndex){
        var c = this.config[oldIndex];
        this.config.splice(oldIndex, 1);
        this.config.splice(newIndex, 0, c);
        this.dataMap = null;
        this.fireEvent("columnmoved", this, oldIndex, newIndex);
    },

    isLocked : function(colIndex){
        return this.config[colIndex].locked === true;
    },

    setLocked : function(colIndex, value, suppressEvent){
        if(this.isLocked(colIndex) == value){
            return;
        }
        this.config[colIndex].locked = value;
        if(!suppressEvent){
            this.fireEvent("columnlockchange", this, colIndex, value);
        }
    },

    getTotalLockedWidth : function(){
        var totalWidth = 0;
        for(var i = 0; i < this.config.length; i++){
            if(this.isLocked(i) && !this.isHidden(i)){
                this.totalWidth += this.getColumnWidth(i);
            }
        }
        return totalWidth;
    },

    getLockedCount : function(){
        for(var i = 0, len = this.config.length; i < len; i++){
            if(!this.isLocked(i)){
                return i;
            }
        }
        
        return this.config.length;
    },

    /**
     * Returns the number of columns.
     * @return {Number}
     */
    getColumnCount : function(visibleOnly){
        if(visibleOnly === true){
            var c = 0;
            for(var i = 0, len = this.config.length; i < len; i++){
                if(!this.isHidden(i)){
                    c++;
                }
            }
            return c;
        }
        return this.config.length;
    },

    /**
     * Returns the column configs that return true by the passed function that is called with (columnConfig, index)
     * @param {Function} fn
     * @param {Object} scope (optional)
     * @return {Array} result
     */
    getColumnsBy : function(fn, scope){
        var r = [];
        for(var i = 0, len = this.config.length; i < len; i++){
            var c = this.config[i];
            if(fn.call(scope||this, c, i) === true){
                r[r.length] = c;
            }
        }
        return r;
    },

    /**
     * Returns true if the specified column is sortable.
     * @param {Number} col The column index
     * @return {Boolean}
     */
    isSortable : function(col){
        if(typeof this.config[col].sortable == "undefined"){
            return this.defaultSortable;
        }
        return this.config[col].sortable;
    },

    /**
     * Returns the rendering (formatting) function defined for the column.
     * @param {Number} col The column index.
     * @return {Function} The function used to render the cell. See {@link #setRenderer}.
     */
    getRenderer : function(col){
        if(!this.config[col].renderer){
            return Roo.grid.ColumnModel.defaultRenderer;
        }
        return this.config[col].renderer;
    },

    /**
     * Sets the rendering (formatting) function for a column.
     * @param {Number} col The column index
     * @param {Function} fn The function to use to process the cell's raw data
     * to return HTML markup for the grid view. The render function is called with
     * the following parameters:<ul>
     * <li>Data value.</li>
     * <li>Cell metadata. An object in which you may set the following attributes:<ul>
     * <li>css A CSS style string to apply to the table cell.</li>
     * <li>attr An HTML attribute definition string to apply to the data container element <i>within</i> the table cell.</li></ul>
     * <li>The {@link Roo.data.Record} from which the data was extracted.</li>
     * <li>Row index</li>
     * <li>Column index</li>
     * <li>The {@link Roo.data.Store} object from which the Record was extracted</li></ul>
     */
    setRenderer : function(col, fn){
        this.config[col].renderer = fn;
    },

    /**
     * Returns the width for the specified column.
     * @param {Number} col The column index
     * @param (optional) {String} gridSize bootstrap width size.
     * @return {Number}
     */
    getColumnWidth : function(col, gridSize)
	{
		var cfg = this.config[col];
		
		if (typeof(gridSize) == 'undefined') {
			return cfg.width * 1 || this.defaultWidth;
		}
		if (gridSize === false) { // if we set it..
			return cfg.width || false;
		}
		var sizes = ['xl', 'lg', 'md', 'sm', 'xs'];
		
		for(var i = sizes.indexOf(gridSize); i < sizes.length; i++) {
			if (typeof(cfg[ sizes[i] ] ) == 'undefined') {
				continue;
			}
			return cfg[ sizes[i] ];
		}
		return 1;
		
    },

    /**
     * Sets the width for a column.
     * @param {Number} col The column index
     * @param {Number} width The new width
     */
    setColumnWidth : function(col, width, suppressEvent){
        this.config[col].width = width;
        this.totalWidth = null;
        if(!suppressEvent){
             this.fireEvent("widthchange", this, col, width);
        }
    },

    /**
     * Returns the total width of all columns.
     * @param {Boolean} includeHidden True to include hidden column widths
     * @return {Number}
     */
    getTotalWidth : function(includeHidden){
        if(!this.totalWidth){
            this.totalWidth = 0;
            for(var i = 0, len = this.config.length; i < len; i++){
                if(includeHidden || !this.isHidden(i)){
                    this.totalWidth += this.getColumnWidth(i);
                }
            }
        }
        return this.totalWidth;
    },

    /**
     * Returns the header for the specified column.
     * @param {Number} col The column index
     * @return {String}
     */
    getColumnHeader : function(col){
        return this.config[col].header;
    },

    /**
     * Sets the header for a column.
     * @param {Number} col The column index
     * @param {String} header The new header
     */
    setColumnHeader : function(col, header){
        this.config[col].header = header;
        this.fireEvent("headerchange", this, col, header);
    },

    /**
     * Returns the tooltip for the specified column.
     * @param {Number} col The column index
     * @return {String}
     */
    getColumnTooltip : function(col){
            return this.config[col].tooltip;
    },
    /**
     * Sets the tooltip for a column.
     * @param {Number} col The column index
     * @param {String} tooltip The new tooltip
     */
    setColumnTooltip : function(col, tooltip){
            this.config[col].tooltip = tooltip;
    },

    /**
     * Returns the dataIndex for the specified column.
     * @param {Number} col The column index
     * @return {Number}
     */
    getDataIndex : function(col){
        return this.config[col].dataIndex;
    },

    /**
     * Return the dataIndex for displayed columns
     * @param {Array} add Array of data indexes added to the result
     * @return {Array} result
     */
    getDisplayedColumnIndexes: function(add) {
        var indexes = this.config.filter(function(c) {
            return typeof(c.hidden) == 'undefined' || c.hidden !== true;
        }).map(function(c) {
            return c.dataIndex;
        });

        return indexes.concat(add);
    },

    /**
     * Sets the dataIndex for a column.
     * @param {Number} col The column index
     * @param {Number} dataIndex The new dataIndex
     */
    setDataIndex : function(col, dataIndex){
        this.config[col].dataIndex = dataIndex;
    },

    
    
    /**
     * Returns true if the cell is editable.
     * @param {Number} colIndex The column index
     * @param {Number} rowIndex The row index - this is nto actually used..?
     * @return {Boolean}
     */
    isCellEditable : function(colIndex, rowIndex){
        return (this.config[colIndex].editable || (typeof this.config[colIndex].editable == "undefined" && this.config[colIndex].editor)) ? true : false;
    },

    /**
     * Returns the editor defined for the cell/column.
     * return false or null to disable editing.
     * @param {Number} colIndex The column index
     * @param {Number} rowIndex The row index
     * @return {Object}
     */
    getCellEditor : function(colIndex, rowIndex){
        return this.config[colIndex].editor;
    },

    /**
     * Sets if a column is editable.
     * @param {Number} col The column index
     * @param {Boolean} editable True if the column is editable
     */
    setEditable : function(col, editable){
        this.config[col].editable = editable;
    },


    /**
     * Returns true if the column is hidden.
     * @param {Number} colIndex The column index
     * @return {Boolean}
     */
    isHidden : function(colIndex){
        return this.config[colIndex].hidden;
    },


    /**
     * Returns true if the column width cannot be changed
     */
    isFixed : function(colIndex){
        return this.config[colIndex].fixed;
    },

    /**
     * Returns true if the column can be resized
     * @return {Boolean}
     */
    isResizable : function(colIndex){
        return colIndex >= 0 && this.config[colIndex].resizable !== false && this.config[colIndex].fixed !== true;
    },
    /**
     * Sets if a column is hidden.
     * @param {Number} colIndex The column index
     * @param {Boolean} hidden True if the column is hidden
     */
    setHidden : function(colIndex, hidden){
        this.config[colIndex].hidden = hidden;
        this.totalWidth = null;
        this.fireEvent("hiddenchange", this, colIndex, hidden);
    },

    /**
     * Sets the editor for a column.
     * @param {Number} col The column index
     * @param {Object} editor The editor object
     */
    setEditor : function(col, editor){
        this.config[col].editor = editor;
    },
    /**
     * Add a column (experimental...) - defaults to adding to the end..
     * @param {Object} config 
    */
    addColumn : function(c)
    {
    
	var i = this.config.length;
	this.config[i] = c;
	
	if(typeof c.dataIndex == "undefined"){
            c.dataIndex = i;
        }
        if(typeof c.renderer == "string"){
            c.renderer = Roo.util.Format[c.renderer];
        }
        if(typeof c.id == "undefined"){
            c.id = Roo.id();
        }
        if(c.editor && c.editor.xtype){
            c.editor  = Roo.factory(c.editor, Roo.grid);
        }
        if(c.editor && c.editor.isFormField){
            c.editor = new Roo.grid.GridEditor(c.editor);
        }
        this.lookup[c.id] = c;
    }
    
});

Roo.grid.ColumnModel.defaultRenderer = function(value)
{
    if(typeof value == "object") {
        return value;
    }
	if(typeof value == "string" && value.length < 1){
	    return "&#160;";
	}
    
	return String.format("{0}", value);
};

// Alias for backwards compatibility
Roo.grid.DefaultColumnModel = Roo.grid.ColumnModel;
/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

/**
 * @class Roo.grid.AbstractSelectionModel
 * @extends Roo.util.Observable
 * @abstract
 * Abstract base class for grid SelectionModels.  It provides the interface that should be
 * implemented by descendant classes.  This class should not be directly instantiated.
 * @constructor
 */
Roo.grid.AbstractSelectionModel = function(){
    this.locked = false;
    Roo.grid.AbstractSelectionModel.superclass.constructor.call(this);
};

Roo.extend(Roo.grid.AbstractSelectionModel, Roo.util.Observable,  {
    /** @ignore Called by the grid automatically. Do not call directly. */
    init : function(grid){
        this.grid = grid;
        this.initEvents();
    },

    /**
     * Locks the selections.
     */
    lock : function(){
        this.locked = true;
    },

    /**
     * Unlocks the selections.
     */
    unlock : function(){
        this.locked = false;
    },

    /**
     * Returns true if the selections are locked.
     * @return {Boolean}
     */
    isLocked : function(){
        return this.locked;
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @extends Roo.grid.AbstractSelectionModel
 * @class Roo.grid.RowSelectionModel
 * The default SelectionModel used by {@link Roo.grid.Grid}.
 * It supports multiple selections and keyboard selection/navigation. 
 * @constructor
 * @param {Object} config
 */
Roo.grid.RowSelectionModel = function(config){
    Roo.apply(this, config);
    this.selections = new Roo.util.MixedCollection(false, function(o){
        return o.id;
    });

    this.last = false;
    this.lastActive = false;

    this.addEvents({
        /**
        * @event selectionchange
        * Fires when the selection changes
        * @param {SelectionModel} this
        */
       "selectionchange" : true,
       /**
        * @event afterselectionchange
        * Fires after the selection changes (eg. by key press or clicking)
        * @param {SelectionModel} this
        */
       "afterselectionchange" : true,
       /**
        * @event beforerowselect
        * Fires when a row is selected being selected, return false to cancel.
        * @param {SelectionModel} this
        * @param {Number} rowIndex The selected index
        * @param {Boolean} keepExisting False if other selections will be cleared
        */
       "beforerowselect" : true,
       /**
        * @event rowselect
        * Fires when a row is selected.
        * @param {SelectionModel} this
        * @param {Number} rowIndex The selected index
        * @param {Roo.data.Record} r The record
        */
       "rowselect" : true,
       /**
        * @event rowdeselect
        * Fires when a row is deselected.
        * @param {SelectionModel} this
        * @param {Number} rowIndex The selected index
        */
        "rowdeselect" : true
    });
    Roo.grid.RowSelectionModel.superclass.constructor.call(this);
    this.locked = false;
};

Roo.extend(Roo.grid.RowSelectionModel, Roo.grid.AbstractSelectionModel,  {
    /**
     * @cfg {Boolean} singleSelect
     * True to allow selection of only one row at a time (defaults to false)
     */
    singleSelect : false,

    // private
    initEvents : function(){

        if(!this.grid.enableDragDrop && !this.grid.enableDrag){
            this.grid.on("mousedown", this.handleMouseDown, this);
        }else{ // allow click to work like normal
            this.grid.on("rowclick", this.handleDragableRowClick, this);
        }
        // bootstrap does not have a view..
        var view = this.grid.view ? this.grid.view : this.grid;
        this.rowNav = new Roo.KeyNav(this.grid.getGridEl(), {
            "up" : function(e){
                if(!e.shiftKey){
                    this.selectPrevious(e.shiftKey);
                }else if(this.last !== false && this.lastActive !== false){
                    var last = this.last;
                    this.selectRange(this.last,  this.lastActive-1);
                    view.focusRow(this.lastActive);
                    if(last !== false){
                        this.last = last;
                    }
                }else{
                    this.selectFirstRow();
                }
                this.fireEvent("afterselectionchange", this);
            },
            "down" : function(e){
                if(!e.shiftKey){
                    this.selectNext(e.shiftKey);
                }else if(this.last !== false && this.lastActive !== false){
                    var last = this.last;
                    this.selectRange(this.last,  this.lastActive+1);
                    view.focusRow(this.lastActive);
                    if(last !== false){
                        this.last = last;
                    }
                }else{
                    this.selectFirstRow();
                }
                this.fireEvent("afterselectionchange", this);
            },
            scope: this
        });

         
        view.on("refresh", this.onRefresh, this);
        view.on("rowupdated", this.onRowUpdated, this);
        view.on("rowremoved", this.onRemove, this);
    },

    // private
    onRefresh : function(){
        var ds = this.grid.ds, i, v = this.grid.view;
        var s = this.selections;
        s.each(function(r){
            if((i = ds.indexOfId(r.id)) != -1){
                v.onRowSelect(i);
                s.add(ds.getAt(i)); // updating the selection relate data
            }else{
                s.remove(r);
            }
        });
    },

    // private
    onRemove : function(v, index, r){
        this.selections.remove(r);
    },

    // private
    onRowUpdated : function(v, index, r){
        if(this.isSelected(r)){
            v.onRowSelect(index);
        }
    },

    /**
     * Select records.
     * @param {Array} records The records to select
     * @param {Boolean} keepExisting (optional) True to keep existing selections
     */
    selectRecords : function(records, keepExisting){
        if(!keepExisting){
            this.clearSelections();
        }
        var ds = this.grid.ds;
        for(var i = 0, len = records.length; i < len; i++){
            this.selectRow(ds.indexOf(records[i]), true);
        }
    },

    /**
     * Gets the number of selected rows.
     * @return {Number}
     */
    getCount : function(){
        return this.selections.length;
    },

    /**
     * Selects the first row in the grid.
     */
    selectFirstRow : function(){
        this.selectRow(0);
    },

    /**
     * Select the last row.
     * @param {Boolean} keepExisting (optional) True to keep existing selections
     */
    selectLastRow : function(keepExisting){
        this.selectRow(this.grid.ds.getCount() - 1, keepExisting);
    },

    /**
     * Selects the row immediately following the last selected row.
     * @param {Boolean} keepExisting (optional) True to keep existing selections
     */
    selectNext : function(keepExisting){
        if(this.last !== false && (this.last+1) < this.grid.ds.getCount()){
            this.selectRow(this.last+1, keepExisting);
            var view = this.grid.view ? this.grid.view : this.grid;
            view.focusRow(this.last);
        }
    },

    /**
     * Selects the row that precedes the last selected row.
     * @param {Boolean} keepExisting (optional) True to keep existing selections
     */
    selectPrevious : function(keepExisting){
        if(this.last){
            this.selectRow(this.last-1, keepExisting);
            var view = this.grid.view ? this.grid.view : this.grid;
            view.focusRow(this.last);
        }
    },

    /**
     * Returns the selected records
     * @return {Array} Array of selected records
     */
    getSelections : function(){
        return [].concat(this.selections.items);
    },

    /**
     * Returns the first selected record.
     * @return {Record}
     */
    getSelected : function(){
        return this.selections.itemAt(0);
    },


    /**
     * Clears all selections.
     */
    clearSelections : function(fast){
        if(this.locked) {
            return;
        }
        if(fast !== true){
            var ds = this.grid.ds;
            var s = this.selections;
            s.each(function(r){
                this.deselectRow(ds.indexOfId(r.id));
            }, this);
            s.clear();
        }else{
            this.selections.clear();
        }
        this.last = false;
    },


    /**
     * Selects all rows.
     */
    selectAll : function(){
        if(this.locked) {
            return;
        }
        this.selections.clear();
        for(var i = 0, len = this.grid.ds.getCount(); i < len; i++){
            this.selectRow(i, true);
        }
    },

    /**
     * Returns True if there is a selection.
     * @return {Boolean}
     */
    hasSelection : function(){
        return this.selections.length > 0;
    },

    /**
     * Returns True if the specified row is selected.
     * @param {Number/Record} record The record or index of the record to check
     * @return {Boolean}
     */
    isSelected : function(index){
        var r = typeof index == "number" ? this.grid.ds.getAt(index) : index;
        return (r && this.selections.key(r.id) ? true : false);
    },

    /**
     * Returns True if the specified record id is selected.
     * @param {String} id The id of record to check
     * @return {Boolean}
     */
    isIdSelected : function(id){
        return (this.selections.key(id) ? true : false);
    },

    // private
    handleMouseDown : function(e, t)
    {
        var view = this.grid.view ? this.grid.view : this.grid;
        var rowIndex;
        if(this.isLocked() || (rowIndex = view.findRowIndex(t)) === false){
            return;
        };
        if(e.shiftKey && this.last !== false){
            var last = this.last;
            this.selectRange(last, rowIndex, e.ctrlKey);
            this.last = last; // reset the last
            view.focusRow(rowIndex);
        }else{
            var isSelected = this.isSelected(rowIndex);
            if(e.button !== 0 && isSelected){
                view.focusRow(rowIndex);
            }else if(e.ctrlKey && isSelected){
                this.deselectRow(rowIndex);
            }else if(!isSelected){
                this.selectRow(rowIndex, e.button === 0 && (e.ctrlKey || e.shiftKey));
                view.focusRow(rowIndex);
            }
        }
        this.fireEvent("afterselectionchange", this);
    },
    // private
    handleDragableRowClick :  function(grid, rowIndex, e) 
    {
        if(e.button === 0 && !e.shiftKey && !e.ctrlKey) {
            this.selectRow(rowIndex, false);
            var view = this.grid.view ? this.grid.view : this.grid;
            view.focusRow(rowIndex);
             this.fireEvent("afterselectionchange", this);
        }
    },
    
    /**
     * Selects multiple rows.
     * @param {Array} rows Array of the indexes of the row to select
     * @param {Boolean} keepExisting (optional) True to keep existing selections
     */
    selectRows : function(rows, keepExisting){
        if(!keepExisting){
            this.clearSelections();
        }
        for(var i = 0, len = rows.length; i < len; i++){
            this.selectRow(rows[i], true);
        }
    },

    /**
     * Selects a range of rows. All rows in between startRow and endRow are also selected.
     * @param {Number} startRow The index of the first row in the range
     * @param {Number} endRow The index of the last row in the range
     * @param {Boolean} keepExisting (optional) True to retain existing selections
     */
    selectRange : function(startRow, endRow, keepExisting){
        if(this.locked) {
            return;
        }
        if(!keepExisting){
            this.clearSelections();
        }
        if(startRow <= endRow){
            for(var i = startRow; i <= endRow; i++){
                this.selectRow(i, true);
            }
        }else{
            for(var i = startRow; i >= endRow; i--){
                this.selectRow(i, true);
            }
        }
    },

    /**
     * Deselects a range of rows. All rows in between startRow and endRow are also deselected.
     * @param {Number} startRow The index of the first row in the range
     * @param {Number} endRow The index of the last row in the range
     */
    deselectRange : function(startRow, endRow, preventViewNotify){
        if(this.locked) {
            return;
        }
        for(var i = startRow; i <= endRow; i++){
            this.deselectRow(i, preventViewNotify);
        }
    },

    /**
     * Selects a row.
     * @param {Number} row The index of the row to select
     * @param {Boolean} keepExisting (optional) True to keep existing selections
     */
    selectRow : function(index, keepExisting, preventViewNotify){
        if(this.locked || (index < 0 || index >= this.grid.ds.getCount())) {
            return;
        }
        if(this.fireEvent("beforerowselect", this, index, keepExisting) !== false){
            if(!keepExisting || this.singleSelect){
                this.clearSelections();
            }
            var r = this.grid.ds.getAt(index);
            this.selections.add(r);
            this.last = this.lastActive = index;
            if(!preventViewNotify){
                var view = this.grid.view ? this.grid.view : this.grid;
                view.onRowSelect(index);
            }
            this.fireEvent("rowselect", this, index, r);
            this.fireEvent("selectionchange", this);
        }
    },

    /**
     * Deselects a row.
     * @param {Number} row The index of the row to deselect
     */
    deselectRow : function(index, preventViewNotify){
        if(this.locked) {
            return;
        }
        if(this.last == index){
            this.last = false;
        }
        if(this.lastActive == index){
            this.lastActive = false;
        }
        var r = this.grid.ds.getAt(index);
        this.selections.remove(r);
        if(!preventViewNotify){
            var view = this.grid.view ? this.grid.view : this.grid;
            view.onRowDeselect(index);
        }
        this.fireEvent("rowdeselect", this, index);
        this.fireEvent("selectionchange", this);
    },

    // private
    restoreLast : function(){
        if(this._last){
            this.last = this._last;
        }
    },

    // private
    acceptsNav : function(row, col, cm){
        return !cm.isHidden(col) && cm.isCellEditable(col, row);
    },

    // private
    onEditorKey : function(field, e){
        var k = e.getKey(), newCell, g = this.grid, ed = g.activeEditor;
        if(k == e.TAB){
            e.stopEvent();
            ed.completeEdit();
            if(e.shiftKey){
                newCell = g.walkCells(ed.row, ed.col-1, -1, this.acceptsNav, this);
            }else{
                newCell = g.walkCells(ed.row, ed.col+1, 1, this.acceptsNav, this);
            }
        }else if(k == e.ENTER && !e.ctrlKey){
            e.stopEvent();
            ed.completeEdit();
            if(e.shiftKey){
                newCell = g.walkCells(ed.row-1, ed.col, -1, this.acceptsNav, this);
            }else{
                newCell = g.walkCells(ed.row+1, ed.col, 1, this.acceptsNav, this);
            }
        }else if(k == e.ESC){
            ed.cancelEdit();
        }
        if(newCell){
            g.startEditing(newCell[0], newCell[1]);
        }
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
/**
 * @class Roo.grid.CellSelectionModel
 * @extends Roo.grid.AbstractSelectionModel
 * This class provides the basic implementation for cell selection in a grid.
 * @constructor
 * @param {Object} config The object containing the configuration of this model.
 * @cfg {Boolean} enter_is_tab Enter behaves the same as tab. (eg. goes to next cell) default: false
 */
Roo.grid.CellSelectionModel = function(config){
    Roo.apply(this, config);

    this.selection = null;

    this.addEvents({
        /**
	     * @event beforerowselect
	     * Fires before a cell is selected.
	     * @param {SelectionModel} this
	     * @param {Number} rowIndex The selected row index
	     * @param {Number} colIndex The selected cell index
	     */
	    "beforecellselect" : true,
        /**
	     * @event cellselect
	     * Fires when a cell is selected.
	     * @param {SelectionModel} this
	     * @param {Number} rowIndex The selected row index
	     * @param {Number} colIndex The selected cell index
	     */
	    "cellselect" : true,
        /**
	     * @event selectionchange
	     * Fires when the active selection changes.
	     * @param {SelectionModel} this
	     * @param {Object} selection null for no selection or an object (o) with two properties
	        <ul>
	        <li>o.record: the record object for the row the selection is in</li>
	        <li>o.cell: An array of [rowIndex, columnIndex]</li>
	        </ul>
	     */
	    "selectionchange" : true,
        /**
	     * @event tabend
	     * Fires when the tab (or enter) was pressed on the last editable cell
	     * You can use this to trigger add new row.
	     * @param {SelectionModel} this
	     */
	    "tabend" : true,
         /**
	     * @event beforeeditnext
	     * Fires before the next editable sell is made active
	     * You can use this to skip to another cell or fire the tabend
	     *    if you set cell to false
	     * @param {Object} eventdata object : { cell : [ row, col ] } 
	     */
	    "beforeeditnext" : true
    });
    Roo.grid.CellSelectionModel.superclass.constructor.call(this);
};

Roo.extend(Roo.grid.CellSelectionModel, Roo.grid.AbstractSelectionModel,  {
    
    enter_is_tab: false,

    /** @ignore */
    initEvents : function(){
        this.grid.on("mousedown", this.handleMouseDown, this);
        this.grid.getGridEl().on(Roo.isIE ? "keydown" : "keypress", this.handleKeyDown, this);
        var view = this.grid.view;
        view.on("refresh", this.onViewChange, this);
        view.on("rowupdated", this.onRowUpdated, this);
        view.on("beforerowremoved", this.clearSelections, this);
        view.on("beforerowsinserted", this.clearSelections, this);
        if(this.grid.isEditor){
            this.grid.on("beforeedit", this.beforeEdit,  this);
        }
    },

	//private
    beforeEdit : function(e){
        this.select(e.row, e.column, false, true, e.record);
    },

	//private
    onRowUpdated : function(v, index, r){
        if(this.selection && this.selection.record == r){
            v.onCellSelect(index, this.selection.cell[1]);
        }
    },

	//private
    onViewChange : function(){
        this.clearSelections(true);
    },

	/**
	 * Returns the currently selected cell,.
	 * @return {Array} The selected cell (row, column) or null if none selected.
	 */
    getSelectedCell : function(){
        return this.selection ? this.selection.cell : null;
    },

    /**
     * Clears all selections.
     * @param {Boolean} true to prevent the gridview from being notified about the change.
     */
    clearSelections : function(preventNotify){
        var s = this.selection;
        if(s){
            if(preventNotify !== true){
                this.grid.view.onCellDeselect(s.cell[0], s.cell[1]);
            }
            this.selection = null;
            this.fireEvent("selectionchange", this, null);
        }
    },

    /**
     * Returns true if there is a selection.
     * @return {Boolean}
     */
    hasSelection : function(){
        return this.selection ? true : false;
    },

    /** @ignore */
    handleMouseDown : function(e, t){
        var v = this.grid.getView();
        if(this.isLocked()){
            return;
        };
        var row = v.findRowIndex(t);
        var cell = v.findCellIndex(t);
        if(row !== false && cell !== false){
            this.select(row, cell);
        }
    },

    /**
     * Selects a cell.
     * @param {Number} rowIndex
     * @param {Number} collIndex
     */
    select : function(rowIndex, colIndex, preventViewNotify, preventFocus, /*internal*/ r){
        if(this.fireEvent("beforecellselect", this, rowIndex, colIndex) !== false){
            this.clearSelections();
            r = r || this.grid.dataSource.getAt(rowIndex);
            this.selection = {
                record : r,
                cell : [rowIndex, colIndex]
            };
            if(!preventViewNotify){
                var v = this.grid.getView();
                v.onCellSelect(rowIndex, colIndex);
                if(preventFocus !== true){
                    v.focusCell(rowIndex, colIndex);
                }
            }
            this.fireEvent("cellselect", this, rowIndex, colIndex);
            this.fireEvent("selectionchange", this, this.selection);
        }
    },

	//private
    isSelectable : function(rowIndex, colIndex, cm){
        return !cm.isHidden(colIndex);
    },

    /** @ignore */
    handleKeyDown : function(e){
        //Roo.log('Cell Sel Model handleKeyDown');
        if(!e.isNavKeyPress()){
            return;
        }
        var g = this.grid, s = this.selection;
        if(!s){
            e.stopEvent();
            var cell = g.walkCells(0, 0, 1, this.isSelectable,  this);
            if(cell){
                this.select(cell[0], cell[1]);
            }
            return;
        }
        var sm = this;
        var walk = function(row, col, step){
            return g.walkCells(row, col, step, sm.isSelectable,  sm);
        };
        var k = e.getKey(), r = s.cell[0], c = s.cell[1];
        var newCell;

      

        switch(k){
            case e.TAB:
                // handled by onEditorKey
                if (g.isEditor && g.editing) {
                    return;
                }
                if(e.shiftKey) {
                    newCell = walk(r, c-1, -1);
                } else {
                    newCell = walk(r, c+1, 1);
                }
                break;
            
            case e.DOWN:
               newCell = walk(r+1, c, 1);
                break;
            
            case e.UP:
                newCell = walk(r-1, c, -1);
                break;
            
            case e.RIGHT:
                newCell = walk(r, c+1, 1);
                break;
            
            case e.LEFT:
                newCell = walk(r, c-1, -1);
                break;
            
            case e.ENTER:
                
                if(g.isEditor && !g.editing){
                   g.startEditing(r, c);
                   e.stopEvent();
                   return;
                }
                
                
             break;
        };
        if(newCell){
            this.select(newCell[0], newCell[1]);
            e.stopEvent();
            
        }
    },

    acceptsNav : function(row, col, cm){
        return !cm.isHidden(col) && cm.isCellEditable(col, row);
    },
    /**
     * Selects a cell.
     * @param {Number} field (not used) - as it's normally used as a listener
     * @param {Number} e - event - fake it by using
     *
     * var e = Roo.EventObjectImpl.prototype;
     * e.keyCode = e.TAB
     *
     * 
     */
    onEditorKey : function(field, e){
        
        var k = e.getKey(),
            newCell,
            g = this.grid,
            ed = g.activeEditor,
            forward = false;
        ///Roo.log('onEditorKey' + k);
        
        
        if (this.enter_is_tab && k == e.ENTER) {
            k = e.TAB;
        }
        
        if(k == e.TAB){
            if(e.shiftKey){
                newCell = g.walkCells(ed.row, ed.col-1, -1, this.acceptsNav, this);
            }else{
                newCell = g.walkCells(ed.row, ed.col+1, 1, this.acceptsNav, this);
                forward = true;
            }
            
            e.stopEvent();
            
        } else if(k == e.ENTER &&  !e.ctrlKey){
            ed.completeEdit();
            e.stopEvent();
            newCell = g.walkCells(ed.row, ed.col+1, 1, this.acceptsNav, this);
        
		} else if(k == e.ESC){
            ed.cancelEdit();
        }
		
        if (newCell) {
            var ecall = { cell : newCell, forward : forward };
            this.fireEvent('beforeeditnext', ecall );
            newCell = ecall.cell;
			forward = ecall.forward;
        }
		
        if(newCell){
            //Roo.log('next cell after edit');
            g.startEditing.defer(100, g, [newCell[0], newCell[1]]);
        } else if (forward) {
            // tabbed past last
            this.fireEvent.defer(100, this, ['tabend',this]);
        }
    }
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.grid.EditorGrid
 * @extends Roo.grid.Grid
 * Class for creating and editable grid.
 * @param {String/HTMLElement/Roo.Element} container The element into which this grid will be rendered - 
 * The container MUST have some type of size defined for the grid to fill. The container will be 
 * automatically set to position relative if it isn't already.
 * @param {Object} dataSource The data model to bind to
 * @param {Object} colModel The column model with info about this grid's columns
 */
Roo.grid.EditorGrid = function(container, config){
    Roo.grid.EditorGrid.superclass.constructor.call(this, container, config);
    this.getGridEl().addClass("xedit-grid");

    if(!this.selModel){
        this.selModel = new Roo.grid.CellSelectionModel();
    }

    this.activeEditor = null;

	this.addEvents({
	    /**
	     * @event beforeedit
	     * Fires before cell editing is triggered. The edit event object has the following properties <br />
	     * <ul style="padding:5px;padding-left:16px;">
	     * <li>grid - This grid</li>
	     * <li>record - The record being edited</li>
	     * <li>field - The field name being edited</li>
	     * <li>value - The value for the field being edited.</li>
	     * <li>row - The grid row index</li>
	     * <li>column - The grid column index</li>
	     * <li>cancel - Set this to true to cancel the edit or return false from your handler.</li>
	     * </ul>
	     * @param {Object} e An edit event (see above for description)
	     */
	    "beforeedit" : true,
	    /**
	     * @event afteredit
	     * Fires after a cell is edited. <br />
	     * <ul style="padding:5px;padding-left:16px;">
	     * <li>grid - This grid</li>
	     * <li>record - The record being edited</li>
	     * <li>field - The field name being edited</li>
	     * <li>value - The value being set</li>
	     * <li>originalValue - The original value for the field, before the edit.</li>
	     * <li>row - The grid row index</li>
	     * <li>column - The grid column index</li>
	     * </ul>
	     * @param {Object} e An edit event (see above for description)
	     */
	    "afteredit" : true,
	    /**
	     * @event validateedit
	     * Fires after a cell is edited, but before the value is set in the record. 
         * You can use this to modify the value being set in the field, Return false
	     * to cancel the change. The edit event object has the following properties <br />
	     * <ul style="padding:5px;padding-left:16px;">
         * <li>editor - This editor</li>
	     * <li>grid - This grid</li>
	     * <li>record - The record being edited</li>
	     * <li>field - The field name being edited</li>
	     * <li>value - The value being set</li>
	     * <li>originalValue - The original value for the field, before the edit.</li>
	     * <li>row - The grid row index</li>
	     * <li>column - The grid column index</li>
	     * <li>cancel - Set this to true to cancel the edit or return false from your handler.</li>
	     * </ul>
	     * @param {Object} e An edit event (see above for description)
	     */
	    "validateedit" : true
	});
    this.on("bodyscroll", this.stopEditing,  this);
    this.on(this.clicksToEdit == 1 ? "cellclick" : "celldblclick", this.onCellDblClick,  this);
};

Roo.extend(Roo.grid.EditorGrid, Roo.grid.Grid, {
    /**
     * @cfg {Number} clicksToEdit
     * The number of clicks on a cell required to display the cell's editor (defaults to 2)
     */
    clicksToEdit: 2,

    // private
    isEditor : true,
    // private
    trackMouseOver: false, // causes very odd FF errors

    onCellDblClick : function(g, row, col){
        this.startEditing(row, col);
    },

    onEditComplete : function(ed, value, startValue){
        this.editing = false;
        this.activeEditor = null;
        ed.un("specialkey", this.selModel.onEditorKey, this.selModel);
        var r = ed.record;
        var field = this.colModel.getDataIndex(ed.col);
        var e = {
            grid: this,
            record: r,
            field: field,
            originalValue: startValue,
            value: value,
            row: ed.row,
            column: ed.col,
            cancel:false,
            editor: ed
        };
        var cell = Roo.get(this.view.getCell(ed.row,ed.col));
        cell.show();
          
        if(String(value) !== String(startValue)){
            
            if(this.fireEvent("validateedit", e) !== false && !e.cancel){
                r.set(field, e.value);
                // if we are dealing with a combo box..
                // then we also set the 'name' colum to be the displayField
                if (ed.field.displayField && ed.field.name) {
                    r.set(ed.field.name, ed.field.el.dom.value);
                }
                
                delete e.cancel; //?? why!!!
                this.fireEvent("afteredit", e);
            }
        } else {
            this.fireEvent("afteredit", e); // always fire it!
        }
        this.view.focusCell(ed.row, ed.col);
    },

    /**
     * Starts editing the specified for the specified row/column
     * @param {Number} rowIndex
     * @param {Number} colIndex
     */
    startEditing : function(row, col){
        this.stopEditing();
        if(this.colModel.isCellEditable(col, row)){
            this.view.ensureVisible(row, col, true);
          
            var r = this.dataSource.getAt(row);
            var field = this.colModel.getDataIndex(col);
            var cell = Roo.get(this.view.getCell(row,col));
            var e = {
                grid: this,
                record: r,
                field: field,
                value: r.data[field],
                row: row,
                column: col,
                cancel:false 
            };
            if(this.fireEvent("beforeedit", e) !== false && !e.cancel){
                this.editing = true;
                var ed = this.colModel.getCellEditor(col, row);
                
                if (!ed) {
                    return;
                }
                if(!ed.rendered){
                    ed.render(ed.parentEl || document.body);
                }
                ed.field.reset();
               
                cell.hide();
                
                (function(){ // complex but required for focus issues in safari, ie and opera
                    ed.row = row;
                    ed.col = col;
                    ed.record = r;
                    ed.on("complete",   this.onEditComplete,        this,       {single: true});
                    ed.on("specialkey", this.selModel.onEditorKey,  this.selModel);
                    this.activeEditor = ed;
                    var v = r.data[field];
                    ed.startEdit(this.view.getCell(row, col), v);
                    // combo's with 'displayField and name set
                    if (ed.field.displayField && ed.field.name) {
                        ed.field.el.dom.value = r.data[ed.field.name];
                    }
                    
                    
                }).defer(50, this);
            }
        }
    },
        
    /**
     * Stops any active editing
     */
    stopEditing : function(){
        if(this.activeEditor){
            this.activeEditor.completeEdit();
        }
        this.activeEditor = null;
    },
	
	 /**
     * Called to get grid's drag proxy text, by default returns this.ddText.
     * @return {String}
     */
    getDragDropText : function(){
        var count = this.selModel.getSelectedCell() ? 1 : 0;
        return String.format(this.ddText, count, count == 1 ? '' : 's');
    }
	
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */

// private - not really -- you end up using it !
// This is a support class used internally by the Grid components

/**
 * @class Roo.grid.GridEditor
 * @extends Roo.Editor
 * Class for creating and editable grid elements.
 * @param {Object} config any settings (must include field)
 */
Roo.grid.GridEditor = function(field, config){
    if (!config && field.field) {
        config = field;
        field = Roo.factory(config.field, Roo.form);
    }
    Roo.grid.GridEditor.superclass.constructor.call(this, field, config);
    field.monitorTab = false;
};

Roo.extend(Roo.grid.GridEditor, Roo.Editor, {
    
    /**
     * @cfg {Roo.form.Field} field Field to wrap (or xtyped)
     */
    
    alignment: "tl-tl",
    autoSize: "width",
    hideEl : false,
    cls: "x-small-editor x-grid-editor",
    shim:false,
    shadow:"frame"
});/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
  

  
Roo.grid.PropertyRecord = Roo.data.Record.create([
    {name:'name',type:'string'},  'value'
]);


Roo.grid.PropertyStore = function(grid, source){
    this.grid = grid;
    this.store = new Roo.data.Store({
        recordType : Roo.grid.PropertyRecord
    });
    this.store.on('update', this.onUpdate,  this);
    if(source){
        this.setSource(source);
    }
    Roo.grid.PropertyStore.superclass.constructor.call(this);
};



Roo.extend(Roo.grid.PropertyStore, Roo.util.Observable, {
    setSource : function(o){
        this.source = o;
        this.store.removeAll();
        var data = [];
        for(var k in o){
            if(this.isEditableValue(o[k])){
                data.push(new Roo.grid.PropertyRecord({name: k, value: o[k]}, k));
            }
        }
        this.store.loadRecords({records: data}, {}, true);
    },

    onUpdate : function(ds, record, type){
        if(type == Roo.data.Record.EDIT){
            var v = record.data['value'];
            var oldValue = record.modified['value'];
            if(this.grid.fireEvent('beforepropertychange', this.source, record.id, v, oldValue) !== false){
                this.source[record.id] = v;
                record.commit();
                this.grid.fireEvent('propertychange', this.source, record.id, v, oldValue);
            }else{
                record.reject();
            }
        }
    },

    getProperty : function(row){
       return this.store.getAt(row);
    },

    isEditableValue: function(val){
        if(val && val instanceof Date){
            return true;
        }else if(typeof val == 'object' || typeof val == 'function'){
            return false;
        }
        return true;
    },

    setValue : function(prop, value){
        this.source[prop] = value;
        this.store.getById(prop).set('value', value);
    },

    getSource : function(){
        return this.source;
    }
});

Roo.grid.PropertyColumnModel = function(grid, store){
    this.grid = grid;
    var g = Roo.grid;
    g.PropertyColumnModel.superclass.constructor.call(this, [
        {header: this.nameText, sortable: true, dataIndex:'name', id: 'name'},
        {header: this.valueText, resizable:false, dataIndex: 'value', id: 'value'}
    ]);
    this.store = store;
    this.bselect = Roo.DomHelper.append(document.body, {
        tag: 'select', style:'display:none', cls: 'x-grid-editor', children: [
            {tag: 'option', value: 'true', html: 'true'},
            {tag: 'option', value: 'false', html: 'false'}
        ]
    });
    Roo.id(this.bselect);
    var f = Roo.form;
    this.editors = {
        'date' : new g.GridEditor(new f.DateField({selectOnFocus:true})),
        'string' : new g.GridEditor(new f.TextField({selectOnFocus:true})),
        'number' : new g.GridEditor(new f.NumberField({selectOnFocus:true, style:'text-align:left;'})),
        'int' : new g.GridEditor(new f.NumberField({selectOnFocus:true, allowDecimals:false, style:'text-align:left;'})),
        'boolean' : new g.GridEditor(new f.Field({el:this.bselect,selectOnFocus:true}))
    };
    this.renderCellDelegate = this.renderCell.createDelegate(this);
    this.renderPropDelegate = this.renderProp.createDelegate(this);
};

Roo.extend(Roo.grid.PropertyColumnModel, Roo.grid.ColumnModel, {
    
    
    nameText : 'Name',
    valueText : 'Value',
    
    dateFormat : 'm/j/Y',
    
    
    renderDate : function(dateVal){
        return dateVal.dateFormat(this.dateFormat);
    },

    renderBool : function(bVal){
        return bVal ? 'true' : 'false';
    },

    isCellEditable : function(colIndex, rowIndex){
        return colIndex == 1;
    },

    getRenderer : function(col){
        return col == 1 ?
            this.renderCellDelegate : this.renderPropDelegate;
    },

    renderProp : function(v){
        return this.getPropertyName(v);
    },

    renderCell : function(val){
        var rv = val;
        if(val instanceof Date){
            rv = this.renderDate(val);
        }else if(typeof val == 'boolean'){
            rv = this.renderBool(val);
        }
        return Roo.util.Format.htmlEncode(rv);
    },

    getPropertyName : function(name){
        var pn = this.grid.propertyNames;
        return pn && pn[name] ? pn[name] : name;
    },

    getCellEditor : function(colIndex, rowIndex){
        var p = this.store.getProperty(rowIndex);
        var n = p.data['name'], val = p.data['value'];
        
        if(typeof(this.grid.customEditors[n]) == 'string'){
            return this.editors[this.grid.customEditors[n]];
        }
        if(typeof(this.grid.customEditors[n]) != 'undefined'){
            return this.grid.customEditors[n];
        }
        if(val instanceof Date){
            return this.editors['date'];
        }else if(typeof val == 'number'){
            return this.editors['number'];
        }else if(typeof val == 'boolean'){
            return this.editors['boolean'];
        }else{
            return this.editors['string'];
        }
    }
});

/**
 * @class Roo.grid.PropertyGrid
 * @extends Roo.grid.EditorGrid
 * This class represents the  interface of a component based property grid control.
 * <br><br>Usage:<pre><code>
 var grid = new Roo.grid.PropertyGrid("my-container-id", {
      
 });
 // set any options
 grid.render();
 * </code></pre>
  
 * @constructor
 * @param {String/HTMLElement/Roo.Element} container The element into which this grid will be rendered -
 * The container MUST have some type of size defined for the grid to fill. The container will be
 * automatically set to position relative if it isn't already.
 * @param {Object} config A config object that sets properties on this grid.
 */
Roo.grid.PropertyGrid = function(container, config){
    config = config || {};
    var store = new Roo.grid.PropertyStore(this);
    this.store = store;
    var cm = new Roo.grid.PropertyColumnModel(this, store);
    store.store.sort('name', 'ASC');
    Roo.grid.PropertyGrid.superclass.constructor.call(this, container, Roo.apply({
        ds: store.store,
        cm: cm,
        enableColLock:false,
        enableColumnMove:false,
        stripeRows:false,
        trackMouseOver: false,
        clicksToEdit:1
    }, config));
    this.getGridEl().addClass('x-props-grid');
    this.lastEditRow = null;
    this.on('columnresize', this.onColumnResize, this);
    this.addEvents({
         /**
	     * @event beforepropertychange
	     * Fires before a property changes (return false to stop?)
	     * @param {Roo.grid.PropertyGrid} grid property grid? (check could be store)
	     * @param {String} id Record Id
	     * @param {String} newval New Value
         * @param {String} oldval Old Value
	     */
        "beforepropertychange": true,
        /**
	     * @event propertychange
	     * Fires after a property changes
	     * @param {Roo.grid.PropertyGrid} grid property grid? (check could be store)
	     * @param {String} id Record Id
	     * @param {String} newval New Value
         * @param {String} oldval Old Value
	     */
        "propertychange": true
    });
    this.customEditors = this.customEditors || {};
};
Roo.extend(Roo.grid.PropertyGrid, Roo.grid.EditorGrid, {
    
     /**
     * @cfg {Object} customEditors map of colnames=> custom editors.
     * the custom editor can be one of the standard ones (date|string|number|int|boolean), or a
     * grid editor eg. Roo.grid.GridEditor(new Roo.form.TextArea({selectOnFocus:true})),
     * false disables editing of the field.
	 */
    
      /**
     * @cfg {Object} propertyNames map of property Names to their displayed value
	 */
    
    render : function(){
        Roo.grid.PropertyGrid.superclass.render.call(this);
        this.autoSize.defer(100, this);
    },

    autoSize : function(){
        Roo.grid.PropertyGrid.superclass.autoSize.call(this);
        if(this.view){
            this.view.fitColumns();
        }
    },

    onColumnResize : function(){
        this.colModel.setColumnWidth(1, this.container.getWidth(true)-this.colModel.getColumnWidth(0));
        this.autoSize();
    },
    /**
     * Sets the data for the Grid
     * accepts a Key => Value object of all the elements avaiable.
     * @param {Object} data  to appear in grid.
     */
    setSource : function(source){
        this.store.setSource(source);
        //this.autoSize();
    },
    /**
     * Gets all the data from the grid.
     * @return {Object} data  data stored in grid
     */
    getSource : function(){
        return this.store.getSource();
    }
});/*
  
 * Licence LGPL
 
 */
 
/**
 * @class Roo.grid.Calendar
 * @extends Roo.grid.Grid
 * This class extends the Grid to provide a calendar widget
 * <br><br>Usage:<pre><code>
 var grid = new Roo.grid.Calendar("my-container-id", {
     ds: myDataStore,
     cm: myColModel,
     selModel: mySelectionModel,
     autoSizeColumns: true,
     monitorWindowResize: false,
     trackMouseOver: true
     eventstore : real data store..
 });
 // set any options
 grid.render();
  
  * @constructor
 * @param {String/HTMLElement/Roo.Element} container The element into which this grid will be rendered -
 * The container MUST have some type of size defined for the grid to fill. The container will be
 * automatically set to position relative if it isn't already.
 * @param {Object} config A config object that sets properties on this grid.
 */
Roo.grid.Calendar = function(container, config){
	// initialize the container
	this.container = Roo.get(container);
	this.container.update("");
	this.container.setStyle("overflow", "hidden");
    this.container.addClass('x-grid-container');

    this.id = this.container.id;

    Roo.apply(this, config);
    // check and correct shorthanded configs
    
    var rows = [];
    var d =1;
    for (var r = 0;r < 6;r++) {
        
        rows[r]=[];
        for (var c =0;c < 7;c++) {
            rows[r][c]= '';
        }
    }
    if (this.eventStore) {
        this.eventStore= Roo.factory(this.eventStore, Roo.data);
        this.eventStore.on('load',this.onLoad, this);
        this.eventStore.on('beforeload',this.clearEvents, this);
         
    }
    
    this.dataSource = new Roo.data.Store({
            proxy: new Roo.data.MemoryProxy(rows),
            reader: new Roo.data.ArrayReader({}, [
                   'weekday0', 'weekday1', 'weekday2', 'weekday3', 'weekday4', 'weekday5', 'weekday6' ])
    });

    this.dataSource.load();
    this.ds = this.dataSource;
    this.ds.xmodule = this.xmodule || false;
    
    
    var cellRender = function(v,x,r)
    {
        return String.format(
            '<div class="fc-day  fc-widget-content"><div>' +
                '<div class="fc-event-container"></div>' +
                '<div class="fc-day-number">{0}</div>'+
                
                '<div class="fc-day-content"><div style="position:relative"></div></div>' +
            '</div></div>', v);
    
    }
    
    
    this.colModel = new Roo.grid.ColumnModel( [
        {
            xtype: 'ColumnModel',
            xns: Roo.grid,
            dataIndex : 'weekday0',
            header : 'Sunday',
            renderer : cellRender
        },
        {
            xtype: 'ColumnModel',
            xns: Roo.grid,
            dataIndex : 'weekday1',
            header : 'Monday',
            renderer : cellRender
        },
        {
            xtype: 'ColumnModel',
            xns: Roo.grid,
            dataIndex : 'weekday2',
            header : 'Tuesday',
            renderer : cellRender
        },
        {
            xtype: 'ColumnModel',
            xns: Roo.grid,
            dataIndex : 'weekday3',
            header : 'Wednesday',
            renderer : cellRender
        },
        {
            xtype: 'ColumnModel',
            xns: Roo.grid,
            dataIndex : 'weekday4',
            header : 'Thursday',
            renderer : cellRender
        },
        {
            xtype: 'ColumnModel',
            xns: Roo.grid,
            dataIndex : 'weekday5',
            header : 'Friday',
            renderer : cellRender
        },
        {
            xtype: 'ColumnModel',
            xns: Roo.grid,
            dataIndex : 'weekday6',
            header : 'Saturday',
            renderer : cellRender
        }
    ]);
    this.cm = this.colModel;
    this.cm.xmodule = this.xmodule || false;
 
        
          
    //this.selModel = new Roo.grid.CellSelectionModel();
    //this.sm = this.selModel;
    //this.selModel.init(this);
    
    
    if(this.width){
        this.container.setWidth(this.width);
    }

    if(this.height){
        this.container.setHeight(this.height);
    }
    /** @private */
	this.addEvents({
        // raw events
        /**
         * @event click
         * The raw click event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "click" : true,
        /**
         * @event dblclick
         * The raw dblclick event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "dblclick" : true,
        /**
         * @event contextmenu
         * The raw contextmenu event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "contextmenu" : true,
        /**
         * @event mousedown
         * The raw mousedown event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "mousedown" : true,
        /**
         * @event mouseup
         * The raw mouseup event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "mouseup" : true,
        /**
         * @event mouseover
         * The raw mouseover event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "mouseover" : true,
        /**
         * @event mouseout
         * The raw mouseout event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "mouseout" : true,
        /**
         * @event keypress
         * The raw keypress event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "keypress" : true,
        /**
         * @event keydown
         * The raw keydown event for the entire grid.
         * @param {Roo.EventObject} e
         */
        "keydown" : true,

        // custom events

        /**
         * @event cellclick
         * Fires when a cell is clicked
         * @param {Grid} this
         * @param {Number} rowIndex
         * @param {Number} columnIndex
         * @param {Roo.EventObject} e
         */
        "cellclick" : true,
        /**
         * @event celldblclick
         * Fires when a cell is double clicked
         * @param {Grid} this
         * @param {Number} rowIndex
         * @param {Number} columnIndex
         * @param {Roo.EventObject} e
         */
        "celldblclick" : true,
        /**
         * @event rowclick
         * Fires when a row is clicked
         * @param {Grid} this
         * @param {Number} rowIndex
         * @param {Roo.EventObject} e
         */
        "rowclick" : true,
        /**
         * @event rowdblclick
         * Fires when a row is double clicked
         * @param {Grid} this
         * @param {Number} rowIndex
         * @param {Roo.EventObject} e
         */
        "rowdblclick" : true,
        /**
         * @event headerclick
         * Fires when a header is clicked
         * @param {Grid} this
         * @param {Number} columnIndex
         * @param {Roo.EventObject} e
         */
        "headerclick" : true,
        /**
         * @event headerdblclick
         * Fires when a header cell is double clicked
         * @param {Grid} this
         * @param {Number} columnIndex
         * @param {Roo.EventObject} e
         */
        "headerdblclick" : true,
        /**
         * @event rowcontextmenu
         * Fires when a row is right clicked
         * @param {Grid} this
         * @param {Number} rowIndex
         * @param {Roo.EventObject} e
         */
        "rowcontextmenu" : true,
        /**
         * @event cellcontextmenu
         * Fires when a cell is right clicked
         * @param {Grid} this
         * @param {Number} rowIndex
         * @param {Number} cellIndex
         * @param {Roo.EventObject} e
         */
         "cellcontextmenu" : true,
        /**
         * @event headercontextmenu
         * Fires when a header is right clicked
         * @param {Grid} this
         * @param {Number} columnIndex
         * @param {Roo.EventObject} e
         */
        "headercontextmenu" : true,
        /**
         * @event bodyscroll
         * Fires when the body element is scrolled
         * @param {Number} scrollLeft
         * @param {Number} scrollTop
         */
        "bodyscroll" : true,
        /**
         * @event columnresize
         * Fires when the user resizes a column
         * @param {Number} columnIndex
         * @param {Number} newSize
         */
        "columnresize" : true,
        /**
         * @event columnmove
         * Fires when the user moves a column
         * @param {Number} oldIndex
         * @param {Number} newIndex
         */
        "columnmove" : true,
        /**
         * @event startdrag
         * Fires when row(s) start being dragged
         * @param {Grid} this
         * @param {Roo.GridDD} dd The drag drop object
         * @param {event} e The raw browser event
         */
        "startdrag" : true,
        /**
         * @event enddrag
         * Fires when a drag operation is complete
         * @param {Grid} this
         * @param {Roo.GridDD} dd The drag drop object
         * @param {event} e The raw browser event
         */
        "enddrag" : true,
        /**
         * @event dragdrop
         * Fires when dragged row(s) are dropped on a valid DD target
         * @param {Grid} this
         * @param {Roo.GridDD} dd The drag drop object
         * @param {String} targetId The target drag drop object
         * @param {event} e The raw browser event
         */
        "dragdrop" : true,
        /**
         * @event dragover
         * Fires while row(s) are being dragged. "targetId" is the id of the Yahoo.util.DD object the selected rows are being dragged over.
         * @param {Grid} this
         * @param {Roo.GridDD} dd The drag drop object
         * @param {String} targetId The target drag drop object
         * @param {event} e The raw browser event
         */
        "dragover" : true,
        /**
         * @event dragenter
         *  Fires when the dragged row(s) first cross another DD target while being dragged
         * @param {Grid} this
         * @param {Roo.GridDD} dd The drag drop object
         * @param {String} targetId The target drag drop object
         * @param {event} e The raw browser event
         */
        "dragenter" : true,
        /**
         * @event dragout
         * Fires when the dragged row(s) leave another DD target while being dragged
         * @param {Grid} this
         * @param {Roo.GridDD} dd The drag drop object
         * @param {String} targetId The target drag drop object
         * @param {event} e The raw browser event
         */
        "dragout" : true,
        /**
         * @event rowclass
         * Fires when a row is rendered, so you can change add a style to it.
         * @param {GridView} gridview   The grid view
         * @param {Object} rowcfg   contains record  rowIndex and rowClass - set rowClass to add a style.
         */
        'rowclass' : true,

        /**
         * @event render
         * Fires when the grid is rendered
         * @param {Grid} grid
         */
        'render' : true,
            /**
	     * @event select
	     * Fires when a date is selected
	     * @param {DatePicker} this
	     * @param {Date} date The selected date
	     */
        'select': true,
        /**
	     * @event monthchange
	     * Fires when the displayed month changes 
	     * @param {DatePicker} this
	     * @param {Date} date The selected month
	     */
        'monthchange': true,
        /**
	     * @event evententer
	     * Fires when mouse over an event
	     * @param {Calendar} this
	     * @param {event} Event
	     */
        'evententer': true,
        /**
	     * @event eventleave
	     * Fires when the mouse leaves an
	     * @param {Calendar} this
	     * @param {event}
	     */
        'eventleave': true,
        /**
	     * @event eventclick
	     * Fires when the mouse click an
	     * @param {Calendar} this
	     * @param {event}
	     */
        'eventclick': true,
        /**
	     * @event eventrender
	     * Fires before each cell is rendered, so you can modify the contents, like cls / title / qtip
	     * @param {Calendar} this
	     * @param {data} data to be modified
	     */
        'eventrender': true
        
    });

    Roo.grid.Grid.superclass.constructor.call(this);
    this.on('render', function() {
        this.view.el.addClass('x-grid-cal'); 
        
        (function() { this.setDate(new Date()); }).defer(100,this); //default today..

    },this);
    
    if (!Roo.grid.Calendar.style) {
        Roo.grid.Calendar.style = Roo.util.CSS.createStyleSheet({
            
            
            '.x-grid-cal .x-grid-col' :  {
                height: 'auto !important',
                'vertical-align': 'top'
            },
            '.x-grid-cal  .fc-event-hori' : {
                height: '14px'
            }
             
            
        }, Roo.id());
    }

    
    
};
Roo.extend(Roo.grid.Calendar, Roo.grid.Grid, {
    /**
     * @cfg {Store} eventStore The store that loads events.
     */
    eventStore : 25,

     
    activeDate : false,
    startDay : 0,
    autoWidth : true,
    monitorWindowResize : false,

    
    resizeColumns : function() {
        var col = (this.view.el.getWidth() / 7) - 3;
        // loop through cols, and setWidth
        for(var i =0 ; i < 7 ; i++){
            this.cm.setColumnWidth(i, col);
        }
    },
     setDate :function(date) {
        
        Roo.log('setDate?');
        
        this.resizeColumns();
        var vd = this.activeDate;
        this.activeDate = date;
//        if(vd && this.el){
//            var t = date.getTime();
//            if(vd.getMonth() == date.getMonth() && vd.getFullYear() == date.getFullYear()){
//                Roo.log('using add remove');
//                
//                this.fireEvent('monthchange', this, date);
//                
//                this.cells.removeClass("fc-state-highlight");
//                this.cells.each(function(c){
//                   if(c.dateValue == t){
//                       c.addClass("fc-state-highlight");
//                       setTimeout(function(){
//                            try{c.dom.firstChild.focus();}catch(e){}
//                       }, 50);
//                       return false;
//                   }
//                   return true;
//                });
//                return;
//            }
//        }
        
        var days = date.getDaysInMonth();
        
        var firstOfMonth = date.getFirstDateOfMonth();
        var startingPos = firstOfMonth.getDay()-this.startDay;
        
        if(startingPos < this.startDay){
            startingPos += 7;
        }
        
        var pm = date.add(Date.MONTH, -1);
        var prevStart = pm.getDaysInMonth()-startingPos;
//        
        
        
        this.cells = this.view.el.select('.x-grid-row .x-grid-col',true);
        
        this.textNodes = this.view.el.query('.x-grid-row .x-grid-col .x-grid-cell-text');
        //this.cells.addClassOnOver('fc-state-hover');
        
        var cells = this.cells.elements;
        var textEls = this.textNodes;
        
        //Roo.each(cells, function(cell){
        //    cell.removeClass([ 'fc-past', 'fc-other-month', 'fc-future', 'fc-state-highlight', 'fc-state-disabled']);
        //});
        
        days += startingPos;

        // convert everything to numbers so it's fast
        var day = 86400000;
        var d = (new Date(pm.getFullYear(), pm.getMonth(), prevStart)).clearTime();
        //Roo.log(d);
        //Roo.log(pm);
        //Roo.log(prevStart);
        
        var today = new Date().clearTime().getTime();
        var sel = date.clearTime().getTime();
        var min = this.minDate ? this.minDate.clearTime() : Number.NEGATIVE_INFINITY;
        var max = this.maxDate ? this.maxDate.clearTime() : Number.POSITIVE_INFINITY;
        var ddMatch = this.disabledDatesRE;
        var ddText = this.disabledDatesText;
        var ddays = this.disabledDays ? this.disabledDays.join("") : false;
        var ddaysText = this.disabledDaysText;
        var format = this.format;
        
        var setCellClass = function(cal, cell){
            
            //Roo.log('set Cell Class');
            cell.title = "";
            var t = d.getTime();
            
            //Roo.log(d);
            
            
            cell.dateValue = t;
            if(t == today){
                cell.className += " fc-today";
                cell.className += " fc-state-highlight";
                cell.title = cal.todayText;
            }
            if(t == sel){
                // disable highlight in other month..
                cell.className += " fc-state-highlight";
                
            }
            // disabling
            if(t < min) {
                //cell.className = " fc-state-disabled";
                cell.title = cal.minText;
                return;
            }
            if(t > max) {
                //cell.className = " fc-state-disabled";
                cell.title = cal.maxText;
                return;
            }
            if(ddays){
                if(ddays.indexOf(d.getDay()) != -1){
                    // cell.title = ddaysText;
                   // cell.className = " fc-state-disabled";
                }
            }
            if(ddMatch && format){
                var fvalue = d.dateFormat(format);
                if(ddMatch.test(fvalue)){
                    cell.title = ddText.replace("%0", fvalue);
                   cell.className = " fc-state-disabled";
                }
            }
            
            if (!cell.initialClassName) {
                cell.initialClassName = cell.dom.className;
            }
            
            cell.dom.className = cell.initialClassName  + ' ' +  cell.className;
        };

        var i = 0;
        
        for(; i < startingPos; i++) {
            cells[i].dayName =  (++prevStart);
            Roo.log(textEls[i]);
            d.setDate(d.getDate()+1);
            
            //cells[i].className = "fc-past fc-other-month";
            setCellClass(this, cells[i]);
        }
        
        var intDay = 0;
        
        for(; i < days; i++){
            intDay = i - startingPos + 1;
            cells[i].dayName =  (intDay);
            d.setDate(d.getDate()+1);
            
            cells[i].className = ''; // "x-date-active";
            setCellClass(this, cells[i]);
        }
        var extraDays = 0;
        
        for(; i < 42; i++) {
            //textEls[i].innerHTML = (++extraDays);
            
            d.setDate(d.getDate()+1);
            cells[i].dayName = (++extraDays);
            cells[i].className = "fc-future fc-other-month";
            setCellClass(this, cells[i]);
        }
        
        //this.el.select('.fc-header-title h2',true).update(Date.monthNames[date.getMonth()] + " " + date.getFullYear());
        
        var totalRows = Math.ceil((date.getDaysInMonth() + date.getFirstDateOfMonth().getDay()) / 7);
        
        // this will cause all the cells to mis
        var rows= [];
        var i =0;
        for (var r = 0;r < 6;r++) {
            for (var c =0;c < 7;c++) {
                this.ds.getAt(r).set('weekday' + c ,cells[i++].dayName );
            }    
        }
        
        this.cells = this.view.el.select('.x-grid-row .x-grid-col',true);
        for(i=0;i<cells.length;i++) {
            
            this.cells.elements[i].dayName = cells[i].dayName ;
            this.cells.elements[i].className = cells[i].className;
            this.cells.elements[i].initialClassName = cells[i].initialClassName ;
            this.cells.elements[i].title = cells[i].title ;
            this.cells.elements[i].dateValue = cells[i].dateValue ;
        }
        
        
        
        
        //this.el.select('tr.fc-week.fc-prev-last',true).removeClass('fc-last');
        //this.el.select('tr.fc-week.fc-next-last',true).addClass('fc-last').show();
        
        ////if(totalRows != 6){
            //this.el.select('tr.fc-week.fc-last',true).removeClass('fc-last').addClass('fc-next-last').hide();
           // this.el.select('tr.fc-week.fc-prev-last',true).addClass('fc-last');
       // }
        
        this.fireEvent('monthchange', this, date);
        
        
    },
 /**
     * Returns the grid's SelectionModel.
     * @return {SelectionModel}
     */
    getSelectionModel : function(){
        if(!this.selModel){
            this.selModel = new Roo.grid.CellSelectionModel();
        }
        return this.selModel;
    },

    load: function() {
        this.eventStore.load()
        
        
        
    },
    
    findCell : function(dt) {
        dt = dt.clearTime().getTime();
        var ret = false;
        this.cells.each(function(c){
            //Roo.log("check " +c.dateValue + '?=' + dt);
            if(c.dateValue == dt){
                ret = c;
                return false;
            }
            return true;
        });
        
        return ret;
    },
    
    findCells : function(rec) {
        var s = rec.data.start_dt.clone().clearTime().getTime();
       // Roo.log(s);
        var e= rec.data.end_dt.clone().clearTime().getTime();
       // Roo.log(e);
        var ret = [];
        this.cells.each(function(c){
             ////Roo.log("check " +c.dateValue + '<' + e + ' > ' + s);
            
            if(c.dateValue > e){
                return ;
            }
            if(c.dateValue < s){
                return ;
            }
            ret.push(c);
        });
        
        return ret;    
    },
    
    findBestRow: function(cells)
    {
        var ret = 0;
        
        for (var i =0 ; i < cells.length;i++) {
            ret  = Math.max(cells[i].rows || 0,ret);
        }
        return ret;
        
    },
    
    
    addItem : function(rec)
    {
        // look for vertical location slot in
        var cells = this.findCells(rec);
        
        rec.row = this.findBestRow(cells);
        
        // work out the location.
        
        var crow = false;
        var rows = [];
        for(var i =0; i < cells.length; i++) {
            if (!crow) {
                crow = {
                    start : cells[i],
                    end :  cells[i]
                };
                continue;
            }
            if (crow.start.getY() == cells[i].getY()) {
                // on same row.
                crow.end = cells[i];
                continue;
            }
            // different row.
            rows.push(crow);
            crow = {
                start: cells[i],
                end : cells[i]
            };
            
        }
        
        rows.push(crow);
        rec.els = [];
        rec.rows = rows;
        rec.cells = cells;
        for (var i = 0; i < cells.length;i++) {
            cells[i].rows = Math.max(cells[i].rows || 0 , rec.row + 1 );
            
        }
        
        
    },
    
    clearEvents: function() {
        
        if (!this.eventStore.getCount()) {
            return;
        }
        // reset number of rows in cells.
        Roo.each(this.cells.elements, function(c){
            c.rows = 0;
        });
        
        this.eventStore.each(function(e) {
            this.clearEvent(e);
        },this);
        
    },
    
    clearEvent : function(ev)
    {
        if (ev.els) {
            Roo.each(ev.els, function(el) {
                el.un('mouseenter' ,this.onEventEnter, this);
                el.un('mouseleave' ,this.onEventLeave, this);
                el.remove();
            },this);
            ev.els = [];
        }
    },
    
    
    renderEvent : function(ev,ctr) {
        if (!ctr) {
             ctr = this.view.el.select('.fc-event-container',true).first();
        }
        
         
        this.clearEvent(ev);
            //code
       
        
        
        ev.els = [];
        var cells = ev.cells;
        var rows = ev.rows;
        this.fireEvent('eventrender', this, ev);
        
        for(var i =0; i < rows.length; i++) {
            
            cls = '';
            if (i == 0) {
                cls += ' fc-event-start';
            }
            if ((i+1) == rows.length) {
                cls += ' fc-event-end';
            }
            
            //Roo.log(ev.data);
            // how many rows should it span..
            var cg = this.eventTmpl.append(ctr,Roo.apply({
                fccls : cls
                
            }, ev.data) , true);
            
            
            cg.on('mouseenter' ,this.onEventEnter, this, ev);
            cg.on('mouseleave' ,this.onEventLeave, this, ev);
            cg.on('click', this.onEventClick, this, ev);
            
            ev.els.push(cg);
            
            var sbox = rows[i].start.select('.fc-day-content',true).first().getBox();
            var ebox = rows[i].end.select('.fc-day-content',true).first().getBox();
            //Roo.log(cg);
             
            cg.setXY([sbox.x +2, sbox.y +(ev.row * 20)]);    
            cg.setWidth(ebox.right - sbox.x -2);
        }
    },
    
    renderEvents: function()
    {   
        // first make sure there is enough space..
        
        if (!this.eventTmpl) {
            this.eventTmpl = new Roo.Template(
                '<div class="roo-dynamic fc-event fc-event-hori fc-event-draggable ui-draggable {fccls} {cls}"  style="position: absolute" unselectable="on">' +
                    '<div class="fc-event-inner">' +
                        '<span class="fc-event-time">{time}</span>' +
                        '<span class="fc-event-title" qtip="{qtip}">{title}</span>' +
                    '</div>' +
                    '<div class="ui-resizable-heandle ui-resizable-e">&nbsp;&nbsp;&nbsp;</div>' +
                '</div>'
            );
                
        }
               
        
        
        this.cells.each(function(c) {
            //Roo.log(c.select('.fc-day-content div',true).first());
            c.select('.fc-day-content div',true).first().setHeight(Math.max(34, (c.rows || 1) * 20));
        });
        
        var ctr = this.view.el.select('.fc-event-container',true).first();
        
        var cls;
        this.eventStore.each(function(ev){
            
            this.renderEvent(ev);
             
             
        }, this);
        this.view.layout();
        
    },
    
    onEventEnter: function (e, el,event,d) {
        this.fireEvent('evententer', this, el, event);
    },
    
    onEventLeave: function (e, el,event,d) {
        this.fireEvent('eventleave', this, el, event);
    },
    
    onEventClick: function (e, el,event,d) {
        this.fireEvent('eventclick', this, el, event);
    },
    
    onMonthChange: function () {
        this.store.load();
    },
    
    onLoad: function () {
        
        //Roo.log('calendar onload');
//         
        if(this.eventStore.getCount() > 0){
            
           
            
            this.eventStore.each(function(d){
                
                
                // FIXME..
                var add =   d.data;
                if (typeof(add.end_dt) == 'undefined')  {
                    Roo.log("Missing End time in calendar data: ");
                    Roo.log(d);
                    return;
                }
                if (typeof(add.start_dt) == 'undefined')  {
                    Roo.log("Missing Start time in calendar data: ");
                    Roo.log(d);
                    return;
                }
                add.start_dt = typeof(add.start_dt) == 'string' ? Date.parseDate(add.start_dt,'Y-m-d H:i:s') : add.start_dt,
                add.end_dt = typeof(add.end_dt) == 'string' ? Date.parseDate(add.end_dt,'Y-m-d H:i:s') : add.end_dt,
                add.id = add.id || d.id;
                add.title = add.title || '??';
                
                this.addItem(d);
                
             
            },this);
        }
        
        this.renderEvents();
    }
    

});
/*
 grid : {
                xtype: 'Grid',
                xns: Roo.grid,
                listeners : {
                    render : function ()
                    {
                        _this.grid = this;
                        
                        if (!this.view.el.hasClass('course-timesheet')) {
                            this.view.el.addClass('course-timesheet');
                        }
                        if (this.tsStyle) {
                            this.ds.load({});
                            return; 
                        }
                        Roo.log('width');
                        Roo.log(_this.grid.view.el.getWidth());
                        
                        
                        this.tsStyle =  Roo.util.CSS.createStyleSheet({
                            '.course-timesheet .x-grid-row' : {
                                height: '80px'
                            },
                            '.x-grid-row td' : {
                                'vertical-align' : 0
                            },
                            '.course-edit-link' : {
                                'color' : 'blue',
                                'text-overflow' : 'ellipsis',
                                'overflow' : 'hidden',
                                'white-space' : 'nowrap',
                                'cursor' : 'pointer'
                            },
                            '.sub-link' : {
                                'color' : 'green'
                            },
                            '.de-act-sup-link' : {
                                'color' : 'purple',
                                'text-decoration' : 'line-through'
                            },
                            '.de-act-link' : {
                                'color' : 'red',
                                'text-decoration' : 'line-through'
                            },
                            '.course-timesheet .course-highlight' : {
                                'border-top-style': 'dashed !important',
                                'border-bottom-bottom': 'dashed !important'
                            },
                            '.course-timesheet .course-item' : {
                                'font-family'   : 'tahoma, arial, helvetica',
                                'font-size'     : '11px',
                                'overflow'      : 'hidden',
                                'padding-left'  : '10px',
                                'padding-right' : '10px',
                                'padding-top' : '10px' 
                            }
                            
                        }, Roo.id());
                                this.ds.load({});
                    }
                },
                autoWidth : true,
                monitorWindowResize : false,
                cellrenderer : function(v,x,r)
                {
                    return v;
                },
                sm : {
                    xtype: 'CellSelectionModel',
                    xns: Roo.grid
                },
                dataSource : {
                    xtype: 'Store',
                    xns: Roo.data,
                    listeners : {
                        beforeload : function (_self, options)
                        {
                            options.params = options.params || {};
                            options.params._month = _this.monthField.getValue();
                            options.params.limit = 9999;
                            options.params['sort'] = 'when_dt';    
                            options.params['dir'] = 'ASC';    
                            this.proxy.loadResponse = this.loadResponse;
                            Roo.log("load?");
                            //this.addColumns();
                        },
                        load : function (_self, records, options)
                        {
                            _this.grid.view.el.select('.course-edit-link', true).on('click', function() {
                                // if you click on the translation.. you can edit it...
                                var el = Roo.get(this);
                                var id = el.dom.getAttribute('data-id');
                                var d = el.dom.getAttribute('data-date');
                                var t = el.dom.getAttribute('data-time');
                                //var id = this.child('span').dom.textContent;
                                
                                //Roo.log(this);
                                Pman.Dialog.CourseCalendar.show({
                                    id : id,
                                    when_d : d,
                                    when_t : t,
                                    productitem_active : id ? 1 : 0
                                }, function() {
                                    _this.grid.ds.load({});
                                });
                           
                           });
                           
                           _this.panel.fireEvent('resize', [ '', '' ]);
                        }
                    },
                    loadResponse : function(o, success, response){
                            // this is overridden on before load..
                            
                            Roo.log("our code?");	
                            //Roo.log(success);
                            //Roo.log(response)
                            delete this.activeRequest;
                            if(!success){
                                this.fireEvent("loadexception", this, o, response);
                                o.request.callback.call(o.request.scope, null, o.request.arg, false);
                                return;
                            }
                            var result;
                            try {
                                result = o.reader.read(response);
                            }catch(e){
                                Roo.log("load exception?");
                                this.fireEvent("loadexception", this, o, response, e);
                                o.request.callback.call(o.request.scope, null, o.request.arg, false);
                                return;
                            }
                            Roo.log("ready...");        
                            // loop through result.records;
                            // and set this.tdate[date] = [] << array of records..
                            _this.tdata  = {};
                            Roo.each(result.records, function(r){
                                //Roo.log(r.data);
                                if(typeof(_this.tdata[r.data.when_dt.format('j')]) == 'undefined'){
                                    _this.tdata[r.data.when_dt.format('j')] = [];
                                }
                                _this.tdata[r.data.when_dt.format('j')].push(r.data);
                            });
                            
                            //Roo.log(_this.tdata);
                            
                            result.records = [];
                            result.totalRecords = 6;
                    
                            // let's generate some duumy records for the rows.
                            //var st = _this.dateField.getValue();
                            
                            // work out monday..
                            //st = st.add(Date.DAY, -1 * st.format('w'));
                            
                            var date = Date.parseDate(_this.monthField.getValue(), "Y-m-d");
                            
                            var firstOfMonth = date.getFirstDayOfMonth();
                            var days = date.getDaysInMonth();
                            var d = 1;
                            var firstAdded = false;
                            for (var i = 0; i < result.totalRecords ; i++) {
                                //var d= st.add(Date.DAY, i);
                                var row = {};
                                var added = 0;
                                for(var w = 0 ; w < 7 ; w++){
                                    if(!firstAdded && firstOfMonth != w){
                                        continue;
                                    }
                                    if(d > days){
                                        continue;
                                    }
                                    firstAdded = true;
                                    var dd = (d > 0 && d < 10) ? "0"+d : d;
                                    row['weekday'+w] = String.format(
                                                    '<span style="font-size: 16px;"><b>{0}</b></span>'+
                                                    '<span class="course-edit-link" style="color:blue;" data-id="0" data-date="{1}"> Add New</span>',
                                                    d,
                                                    date.format('Y-m-')+dd
                                                );
                                    added++;
                                    if(typeof(_this.tdata[d]) != 'undefined'){
                                        Roo.each(_this.tdata[d], function(r){
                                            var is_sub = '';
                                            var deactive = '';
                                            var id = r.id;
                                            var desc = (r.productitem_id_descrip) ? r.productitem_id_descrip : '';
                                            if(r.parent_id*1>0){
                                                is_sub = (r.productitem_id_visible*1 < 1) ? 'de-act-sup-link' :'sub-link';
                                                id = r.parent_id;
                                            }
                                            if(r.productitem_id_visible*1 < 1 && r.parent_id*1 < 1){
                                                deactive = 'de-act-link';
                                            }
                                            
                                            row['weekday'+w] += String.format(
                                                    '<br /><span class="course-edit-link {3} {4}" qtip="{5}" data-id="{0}">{2} - {1}</span>',
                                                    id, //0
                                                    r.product_id_name, //1
                                                    r.when_dt.format('h:ia'), //2
                                                    is_sub, //3
                                                    deactive, //4
                                                    desc // 5
                                            );
                                        });
                                    }
                                    d++;
                                }
                                
                                // only do this if something added..
                                if(added > 0){ 
                                    result.records.push(_this.grid.dataSource.reader.newRow(row));
                                }
                                
                                
                                // push it twice. (second one with an hour..
                                
                            }
                            //Roo.log(result);
                            this.fireEvent("load", this, o, o.request.arg);
                            o.request.callback.call(o.request.scope, result, o.request.arg, true);
                        },
                    sortInfo : {field: 'when_dt', direction : 'ASC' },
                    proxy : {
                        xtype: 'HttpProxy',
                        xns: Roo.data,
                        method : 'GET',
                        url : baseURL + '/Roo/Shop_course.php'
                    },
                    reader : {
                        xtype: 'JsonReader',
                        xns: Roo.data,
                        id : 'id',
                        fields : [
                            {
                                'name': 'id',
                                'type': 'int'
                            },
                            {
                                'name': 'when_dt',
                                'type': 'string'
                            },
                            {
                                'name': 'end_dt',
                                'type': 'string'
                            },
                            {
                                'name': 'parent_id',
                                'type': 'int'
                            },
                            {
                                'name': 'product_id',
                                'type': 'int'
                            },
                            {
                                'name': 'productitem_id',
                                'type': 'int'
                            },
                            {
                                'name': 'guid',
                                'type': 'int'
                            }
                        ]
                    }
                },
                toolbar : {
                    xtype: 'Toolbar',
                    xns: Roo,
                    items : [
                        {
                            xtype: 'Button',
                            xns: Roo.Toolbar,
                            listeners : {
                                click : function (_self, e)
                                {
                                    var sd = Date.parseDate(_this.monthField.getValue(), "Y-m-d");
                                    sd.setMonth(sd.getMonth()-1);
                                    _this.monthField.setValue(sd.format('Y-m-d'));
                                    _this.grid.ds.load({});
                                }
                            },
                            text : "Back"
                        },
                        {
                            xtype: 'Separator',
                            xns: Roo.Toolbar
                        },
                        {
                            xtype: 'MonthField',
                            xns: Roo.form,
                            listeners : {
                                render : function (_self)
                                {
                                    _this.monthField = _self;
                                   // _this.monthField.set  today
                                },
                                select : function (combo, date)
                                {
                                    _this.grid.ds.load({});
                                }
                            },
                            value : (function() { return new Date(); })()
                        },
                        {
                            xtype: 'Separator',
                            xns: Roo.Toolbar
                        },
                        {
                            xtype: 'TextItem',
                            xns: Roo.Toolbar,
                            text : "Blue: in-active, green: in-active sup-event, red: de-active, purple: de-active sup-event"
                        },
                        {
                            xtype: 'Fill',
                            xns: Roo.Toolbar
                        },
                        {
                            xtype: 'Button',
                            xns: Roo.Toolbar,
                            listeners : {
                                click : function (_self, e)
                                {
                                    var sd = Date.parseDate(_this.monthField.getValue(), "Y-m-d");
                                    sd.setMonth(sd.getMonth()+1);
                                    _this.monthField.setValue(sd.format('Y-m-d'));
                                    _this.grid.ds.load({});
                                }
                            },
                            text : "Next"
                        }
                    ]
                },
                 
            }
        };
        
        *//*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */
 
/**
 * @class Roo.LoadMask
 * A simple utility class for generically masking elements while loading data.  If the element being masked has
 * an underlying {@link Roo.data.Store}, the masking will be automatically synchronized with the store's loading
 * process and the mask element will be cached for reuse.  For all other elements, this mask will replace the
 * element's UpdateManager load indicator and will be destroyed after the initial load.
 * @constructor
 * Create a new LoadMask
 * @param {String/HTMLElement/Roo.Element} el The element or DOM node, or its id
 * @param {Object} config The config object
 */
Roo.LoadMask = function(el, config){
    this.el = Roo.get(el);
    Roo.apply(this, config);
    if(this.store){
        this.store.on('beforeload', this.onBeforeLoad, this);
        this.store.on('load', this.onLoad, this);
        this.store.on('loadexception', this.onLoadException, this);
        this.removeMask = false;
    }else{
        var um = this.el.getUpdateManager();
        um.showLoadIndicator = false; // disable the default indicator
        um.on('beforeupdate', this.onBeforeLoad, this);
        um.on('update', this.onLoad, this);
        um.on('failure', this.onLoad, this);
        this.removeMask = true;
    }
};

Roo.LoadMask.prototype = {
    /**
     * @cfg {Boolean} removeMask
     * True to create a single-use mask that is automatically destroyed after loading (useful for page loads),
     * False to persist the mask element reference for multiple uses (e.g., for paged data widgets).  Defaults to false.
     */
    removeMask : false,
    /**
     * @cfg {String} msg
     * The text to display in a centered loading message box (defaults to 'Loading...')
     */
    msg : 'Loading...',
    /**
     * @cfg {String} msgCls
     * The CSS class to apply to the loading message element (defaults to "x-mask-loading")
     */
    msgCls : 'x-mask-loading',

    /**
     * Read-only. True if the mask is currently disabled so that it will not be displayed (defaults to false)
     * @type Boolean
     */
    disabled: false,

    /**
     * Disables the mask to prevent it from being displayed
     */
    disable : function(){
       this.disabled = true;
    },

    /**
     * Enables the mask so that it can be displayed
     */
    enable : function(){
        this.disabled = false;
    },
    
    onLoadException : function()
    {
        Roo.log(arguments);
        
        if (typeof(arguments[3]) != 'undefined') {
            Roo.MessageBox.alert("Error loading",arguments[3]);
        } 
        /*
        try {
            if (this.store && typeof(this.store.reader.jsonData.errorMsg) != 'undefined') {
                Roo.MessageBox.alert("Error loading",this.store.reader.jsonData.errorMsg);
            }   
        } catch(e) {
            
        }
        */
    
        (function() { this.el.unmask(this.removeMask); }).defer(50, this);
    },
    // private
    onLoad : function()
    {
        (function() { this.el.unmask(this.removeMask); }).defer(50, this);
    },

    // private
    onBeforeLoad : function(){
        if(!this.disabled){
            (function() { this.el.mask(this.msg, this.msgCls); }).defer(50, this);
        }
    },

    // private
    destroy : function(){
        if(this.store){
            this.store.un('beforeload', this.onBeforeLoad, this);
            this.store.un('load', this.onLoad, this);
            this.store.un('loadexception', this.onLoadException, this);
        }else{
            var um = this.el.getUpdateManager();
            um.un('beforeupdate', this.onBeforeLoad, this);
            um.un('update', this.onLoad, this);
            um.un('failure', this.onLoad, this);
        }
    }
};/*
 * Based on:
 * Ext JS Library 1.1.1
 * Copyright(c) 2006-2007, Ext JS, LLC.
 *
 * Originally Released Under LGPL - original licence link has changed is not relivant.
 *
 * Fork - LGPL
 * <script type="text/javascript">
 */


/**
 * @class Roo.XTemplate
 * @extends Roo.Template
 * Provides a template that can have nested templates for loops or conditionals. The syntax is:
<pre><code>
var t = new Roo.XTemplate(
	'&lt;select name="{name}"&gt;',
		'&lt;tpl for="options"&gt;&lt;option value="{value:trim}"&gt;{text:ellipsis(10)}&lt;/option&gt;&lt;/tpl&gt;',
	'&lt;/select&gt;'
);
 
// then append, applying the master template values
 </code></pre>
 *
 * Supported features:
 *
 *  Tags:

<pre><code>
      {a_variable} - output encoded.
      {a_variable.format:("Y-m-d")} - call a method on the variable
      {a_variable:raw} - unencoded output
      {a_variable:toFixed(1,2)} - Roo.util.Format."toFixed"
      {a_variable:this.method_on_template(...)} - call a method on the template object.
 
</code></pre>
 *  The tpl tag:
<pre><code>
        &lt;tpl for="a_variable or condition.."&gt;&lt;/tpl&gt;
        &lt;tpl if="a_variable or condition"&gt;&lt;/tpl&gt;
        &lt;tpl exec="some javascript"&gt;&lt;/tpl&gt;
        &lt;tpl name="named_template"&gt;&lt;/tpl&gt; (experimental)
  
        &lt;tpl for="."&gt;&lt;/tpl&gt; - just iterate the property..
        &lt;tpl for=".."&gt;&lt;/tpl&gt; - iterates with the parent (probably the template) 
</code></pre>
 *      
 */
Roo.XTemplate = function()
{
    Roo.XTemplate.superclass.constructor.apply(this, arguments);
    if (this.html) {
        this.compile();
    }
};


Roo.extend(Roo.XTemplate, Roo.Template, {

    /**
     * The various sub templates
     */
    tpls : false,
    /**
     *
     * basic tag replacing syntax
     * WORD:WORD()
     *
     * // you can fake an object call by doing this
     *  x.t:(test,tesT) 
     * 
     */
    re : /\{([\w-\.]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g,

    /**
     * compile the template
     *
     * This is not recursive, so I'm not sure how nested templates are really going to be handled..
     *
     */
    compile: function()
    {
        var s = this.html;
     
        s = ['<tpl>', s, '</tpl>'].join('');
    
        var re     = /<tpl\b[^>]*>((?:(?=([^<]+))\2|<(?!tpl\b[^>]*>))*?)<\/tpl>/,
            nameRe = /^<tpl\b[^>]*?for="(.*?)"/,
            ifRe   = /^<tpl\b[^>]*?if="(.*?)"/,
            execRe = /^<tpl\b[^>]*?exec="(.*?)"/,
            namedRe = /^<tpl\b[^>]*?name="(\w+)"/,  // named templates..
            m,
            id     = 0,
            tpls   = [];
    
        while(true == !!(m = s.match(re))){
            var forMatch   = m[0].match(nameRe),
                ifMatch   = m[0].match(ifRe),
                execMatch   = m[0].match(execRe),
                namedMatch   = m[0].match(namedRe),
                
                exp  = null, 
                fn   = null,
                exec = null,
                name = forMatch && forMatch[1] ? forMatch[1] : '';
                
            if (ifMatch) {
                // if - puts fn into test..
                exp = ifMatch && ifMatch[1] ? ifMatch[1] : null;
                if(exp){
                   fn = new Function('values', 'parent', 'with(values){ return '+(Roo.util.Format.htmlDecode(exp))+'; }');
                }
            }
            
            if (execMatch) {
                // exec - calls a function... returns empty if true is  returned.
                exp = execMatch && execMatch[1] ? execMatch[1] : null;
                if(exp){
                   exec = new Function('values', 'parent', 'with(values){ '+(Roo.util.Format.htmlDecode(exp))+'; }');
                }
            }
            
            
            if (name) {
                // for = 
                switch(name){
                    case '.':  name = new Function('values', 'parent', 'with(values){ return values; }'); break;
                    case '..': name = new Function('values', 'parent', 'with(values){ return parent; }'); break;
                    default:   name = new Function('values', 'parent', 'with(values){ return '+name+'; }');
                }
            }
            var uid = namedMatch ? namedMatch[1] : id;
            
            
            tpls.push({
                id:     namedMatch ? namedMatch[1] : id,
                target: name,
                exec:   exec,
                test:   fn,
                body:   m[1] || ''
            });
            if (namedMatch) {
                s = s.replace(m[0], '');
            } else { 
                s = s.replace(m[0], '{xtpl'+ id + '}');
            }
            ++id;
        }
        this.tpls = [];
        for(var i = tpls.length-1; i >= 0; --i){
            this.compileTpl(tpls[i]);
            this.tpls[tpls[i].id] = tpls[i];
        }
        this.master = tpls[tpls.length-1];
        return this;
    },
    /**
     * same as applyTemplate, except it's done to one of the subTemplates
     * when using named templates, you can do:
     *
     * var str = pl.applySubTemplate('your-name', values);
     *
     * 
     * @param {Number} id of the template
     * @param {Object} values to apply to template
     * @param {Object} parent (normaly the instance of this object)
     */
    applySubTemplate : function(id, values, parent)
    {
        
        
        var t = this.tpls[id];
        
        
        try { 
            if(t.test && !t.test.call(this, values, parent)){
                return '';
            }
        } catch(e) {
            Roo.log("Xtemplate.applySubTemplate 'test': Exception thrown");
            Roo.log(e.toString());
            Roo.log(t.test);
            return ''
        }
        try { 
            
            if(t.exec && t.exec.call(this, values, parent)){
                return '';
            }
        } catch(e) {
            Roo.log("Xtemplate.applySubTemplate 'exec': Exception thrown");
            Roo.log(e.toString());
            Roo.log(t.exec);
            return ''
        }
        try {
            var vs = t.target ? t.target.call(this, values, parent) : values;
            parent = t.target ? values : parent;
            if(t.target && vs instanceof Array){
                var buf = [];
                for(var i = 0, len = vs.length; i < len; i++){
                    buf[buf.length] = t.compiled.call(this, vs[i], parent);
                }
                return buf.join('');
            }
            return t.compiled.call(this, vs, parent);
        } catch (e) {
            Roo.log("Xtemplate.applySubTemplate : Exception thrown");
            Roo.log(e.toString());
            Roo.log(t.compiled);
            return '';
        }
    },

    compileTpl : function(tpl)
    {
        var fm = Roo.util.Format;
        var useF = this.disableFormats !== true;
        var sep = Roo.isGecko ? "+" : ",";
        var undef = function(str) {
            Roo.log("Property not found :"  + str);
            return '';
        };
        
        var fn = function(m, name, format, args)
        {
            //Roo.log(arguments);
            args = args ? args.replace(/\\'/g,"'") : args;
            //["{TEST:(a,b,c)}", "TEST", "", "a,b,c", 0, "{TEST:(a,b,c)}"]
            if (typeof(format) == 'undefined') {
                format= 'htmlEncode';
            }
            if (format == 'raw' ) {
                format = false;
            }
            
            if(name.substr(0, 4) == 'xtpl'){
                return "'"+ sep +'this.applySubTemplate('+name.substr(4)+', values, parent)'+sep+"'";
            }
            
            // build an array of options to determine if value is undefined..
            
            // basically get 'xxxx.yyyy' then do
            // (typeof(xxxx) == 'undefined' || typeof(xxx.yyyy) == 'undefined') ?
            //    (function () { Roo.log("Property not found"); return ''; })() :
            //    ......
            
            var udef_ar = [];
            var lookfor = '';
            Roo.each(name.split('.'), function(st) {
                lookfor += (lookfor.length ? '.': '') + st;
                udef_ar.push(  "(typeof(" + lookfor + ") == 'undefined')"  );
            });
            
            var udef_st = '((' + udef_ar.join(" || ") +") ? undef('" + name + "') : "; // .. needs )
            
            
            if(format && useF){
                
                args = args ? ',' + args : "";
                 
                if(format.substr(0, 5) != "this."){
                    format = "fm." + format + '(';
                }else{
                    format = 'this.call("'+ format.substr(5) + '", ';
                    args = ", values";
                }
                
                return "'"+ sep +   udef_st   +    format + name + args + "))"+sep+"'";
            }
             
            if (args.length) {
                // called with xxyx.yuu:(test,test)
                // change to ()
                return "'"+ sep + udef_st  + name + '(' +  args + "))"+sep+"'";
            }
            // raw.. - :raw modifier..
            return "'"+ sep + udef_st  + name + ")"+sep+"'";
            
        };
        var body;
        // branched to use + in gecko and [].join() in others
        if(Roo.isGecko){
            body = "tpl.compiled = function(values, parent){  with(values) { return '" +
                   tpl.body.replace(/(\r\n|\n)/g, '\\n').replace(/'/g, "\\'").replace(this.re, fn) +
                    "';};};";
        }else{
            body = ["tpl.compiled = function(values, parent){  with (values) { return ['"];
            body.push(tpl.body.replace(/(\r\n|\n)/g,
                            '\\n').replace(/'/g, "\\'").replace(this.re, fn));
            body.push("'].join('');};};");
            body = body.join('');
        }
        
        Roo.debug && Roo.log(body.replace(/\\n/,'\n'));
       
        /** eval:var:tpl eval:var:fm eval:var:useF eval:var:undef  */
        eval(body);
        
        return this;
    },

    applyTemplate : function(values){
        return this.master.compiled.call(this, values, {});
        //var s = this.subs;
    },

    apply : function(){
        return this.applyTemplate.apply(this, arguments);
    }

 });

Roo.XTemplate.from = function(el){
    el = Roo.getDom(el);
    return new Roo.XTemplate(el.value || el.innerHTML);
};// old names for panel elements
Roo.GridPanel = Roo.panel.Grid;
Roo.CalendarPanel = Roo.panel.Calendar;
Roo.ContentPanel = Roo.panel.Content;
Roo.NestedLayoutPanel = Roo.panel.NestedLayout;
Roo.TabPanel = Roo.panel.Tab;
Roo.TabPanelItem = Roo.panel.TabItem;
Roo.TreePanel = Roo.panel.Tree;


// phase 2 update
Roo.ScrollPanel = Roo.panel.Scroll;

Roo.BorderLayout = Roo.layout.Border;
Roo.BasicLayoutRegion = Roo.layout.BasicRegion;
Roo.LayoutRegion = Roo.layout.Region;
Roo.SplitLayoutRegion = Roo.layout.SplitRegion;
Roo.LayoutManager = Roo.layout.Manager;


Roo.NorthLayoutRegion = Roo.layout.North;
Roo.EastLayoutRegion = Roo.layout.East;
Roo.WestLayoutRegion = Roo.layout.West;
Roo.SouthLayoutRegion = Roo.layout.South;
Roo.CenterLayoutRegion = Roo.layout.Center;


Roo.LayoutStateManager  = Roo.layout.StateManager;
Roo.ReaderLayout = Roo.layout.Reader;

Roo.bootstrap = {};/*
 * - LGPL
 *
 * base class for bootstrap elements.
 * 
 */

Roo.bootstrap = Roo.bootstrap || {};
/**
 * @class Roo.bootstrap.Component
 * @extends Roo.Component
 * @abstract
 * @children Roo.bootstrap.Component
 * Bootstrap Component base class
 * @cfg {String} cls css class
 * @cfg {String} style any extra css
 * @cfg {Object} xattr extra attributes to add to 'element' (used by builder to store stuff.)
 * @cfg {Boolean} can_build_overlaid  True if element can be rebuild from a HTML page
 * @cfg {string} dataId cutomer id
 * @cfg {string} name Specifies name attribute
 * @cfg {string} tooltip  Text for the tooltip
 * @cfg {string} container_method method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)
 * @cfg {string|object} visibilityEl (el|parent) What element to use for visibility (@see getVisibilityEl())
 
 * @constructor
 * Do not use directly - it does not do anything..
 * @param {Object} config The config object
 */



Roo.bootstrap.Component = function(config){
    Roo.bootstrap.Component.superclass.constructor.call(this, config);
       
    this.addEvents({
        /**
         * @event childrenrendered
         * Fires when the children have been rendered..
         * @param {Roo.bootstrap.Component} this
         */
        "childrenrendered" : true
        
        
        
    });
    
    
};

Roo.extend(Roo.bootstrap.Component, Roo.BoxComponent,  {
    
    
    allowDomMove : false, // to stop relocations in parent onRender...
    
    cls : false,
    
    style : false,
    
    autoCreate : false,
    
    tooltip : null,
    /**
     * Initialize Events for the element
     */
    initEvents : function() { },
    
    xattr : false,
    
    parentId : false,
    
    can_build_overlaid : true,
    
    container_method : false,
    
    dataId : false,
    
    name : false,
    
    parent: function() {
        // returns the parent component..
        return Roo.ComponentMgr.get(this.parentId)
        
        
    },
    
    // private
    onRender : function(ct, position)
    {
       // Roo.log("Call onRender: " + this.xtype);
        
        Roo.bootstrap.Component.superclass.onRender.call(this, ct, position);
        
        if(this.el){
            if (this.el.attr('xtype')) {
                this.el.attr('xtypex', this.el.attr('xtype'));
                this.el.dom.removeAttribute('xtype');
                
                this.initEvents();
            }
            
            return;
        }
        
         
        
        var cfg = Roo.apply({},  this.getAutoCreate());
        
        cfg.id = this.id || Roo.id();
        
        // fill in the extra attributes 
        if (this.xattr && typeof(this.xattr) =='object') {
            for (var i in this.xattr) {
                cfg[i] = this.xattr[i];
            }
        }
        
        if(this.dataId){
            cfg.dataId = this.dataId;
        }
        
        if (this.cls) {
            cfg.cls = (typeof(cfg.cls) == 'undefined' ? this.cls : cfg.cls) + ' ' + this.cls;
        }
        
        if (this.style) { // fixme needs to support more complex style data.
            cfg.style = (typeof(cfg.style) == 'undefined' ? this.style : cfg.style) + '; ' + this.style;
        }
        
        if(this.name){
            cfg.name = this.name;
        }
        
        this.el = ct.createChild(cfg, position);
        
        if (this.tooltip) {
            this.tooltipEl().attr('tooltip', this.tooltip);
        }
        
        if(this.tabIndex !== undefined){
            this.el.dom.setAttribute('tabIndex', this.tabIndex);
        }
        
        this.initEvents();
	
    },
    /**
     * Fetch the element to add children to
     * @return {Roo.Element} defaults to this.el
     */
    getChildContainer : function()
    {
        return this.el;
    },
    getDocumentBody : function() // used by menus - as they are attached to the body so zIndexes work
    {
        return Roo.get(document.body);
    },
    
    /**
     * Fetch the element to display the tooltip on.
     * @return {Roo.Element} defaults to this.el
     */
    tooltipEl : function()
    {
        return this.el;
    },
        
    addxtype  : function(tree,cntr)
    {
        var cn = this;
        
        cn = Roo.factory(tree);
        //Roo.log(['addxtype', cn]);
           
        cn.parentType = this.xtype; //??
        cn.parentId = this.id;
        
        cntr = (typeof(cntr) == 'undefined' ) ? 'getChildContainer' : cntr;
        if (typeof(cn.container_method) == 'string') {
            cntr = cn.container_method;
        }
        
        
        var has_flexy_each =  (typeof(tree['flexy:foreach']) != 'undefined');
        
        var has_flexy_if =  (typeof(tree['flexy:if']) != 'undefined');
        
        var build_from_html =  Roo.XComponent.build_from_html;
          
        var is_body  = (tree.xtype == 'Body') ;
          
        var page_has_body = (Roo.get(document.body).attr('xtype') == 'Roo.bootstrap.Body');
          
        var self_cntr_el = Roo.get(this[cntr](false));
        
        // do not try and build conditional elements 
        if ((has_flexy_each || has_flexy_if || this.can_build_overlaid == false ) && build_from_html) {
            return false;
        }
        
        if (!has_flexy_each || !build_from_html || is_body || !page_has_body) {
            if(!has_flexy_if || typeof(tree.name) == 'undefined' || !build_from_html || is_body || !page_has_body){
                return this.addxtypeChild(tree,cntr, is_body);
            }
            
            var echild =self_cntr_el ? self_cntr_el.child('>*[name=' + tree.name + ']') : false;
                
            if(echild){
                return this.addxtypeChild(Roo.apply({}, tree),cntr);
            }
            
            Roo.log('skipping render');
            return cn;
            
        }
        
        var ret = false;
        if (!build_from_html) {
            return false;
        }
        
        // this i think handles overlaying multiple children of the same type
        // with the sam eelement.. - which might be buggy..
        while (true) {
            var echild =self_cntr_el ? self_cntr_el.child('>*[xtype]') : false;
            
            if (!echild) {
                break;
            }
            
            if (echild && echild.attr('xtype').split('.').pop() != cn.xtype) {
                break;
            }
            
            ret = this.addxtypeChild(Roo.apply({}, tree),cntr);
        }
       
        return ret;
    },
    
    
    addxtypeChild : function (tree, cntr, is_body)
    {
        Roo.debug && Roo.log('addxtypeChild:' + cntr);
        var cn = this;
        cntr = (typeof(cntr) == 'undefined' ) ? 'getChildContainer' : cntr;
        
        
        var has_flexy = (typeof(tree['flexy:if']) != 'undefined') ||
                    (typeof(tree['flexy:foreach']) != 'undefined');
          
    
        
        skip_children = false;
        // render the element if it's not BODY.
        if (!is_body) {
            
            // if parent was disabled, then do not try and create the children..
            if(!this[cntr](true)){
                tree.items = [];
                return tree;
            }
           
            cn = Roo.factory(tree);
           
            cn.parentType = this.xtype; //??
            cn.parentId = this.id;
            
            var build_from_html =  Roo.XComponent.build_from_html;
            
            
            // does the container contain child eleemnts with 'xtype' attributes.
            // that match this xtype..
            // note - when we render we create these as well..
            // so we should check to see if body has xtype set.
            if (build_from_html && Roo.get(document.body).attr('xtype') == 'Roo.bootstrap.Body') {
               
                var self_cntr_el = Roo.get(this[cntr](false));
                var echild =self_cntr_el ? self_cntr_el.child('>*[xtype]') : false;
                if (echild) { 
                    //Roo.log(Roo.XComponent.build_from_html);
                    //Roo.log("got echild:");
                    //Roo.log(echild);
                }
                // there is a scenario where some of the child elements are flexy:if (and all of the same type)
                // and are not displayed -this causes this to use up the wrong element when matching.
                // at present the only work around for this is to nest flexy:if elements in another element that is always rendered.
                
                
                if (echild && echild.attr('xtype').split('.').pop() == cn.xtype) {
                  //  Roo.log("found child for " + this.xtype +": " + echild.attr('xtype') );
                  
                  
                  
                    cn.el = echild;
                  //  Roo.log("GOT");
                    //echild.dom.removeAttribute('xtype');
                } else {
                    Roo.debug && Roo.log("MISSING " + cn.xtype + " on child of " + (this.el ? this.el.attr('xbuilderid') : 'no parent'));
                    Roo.debug && Roo.log(self_cntr_el);
                    Roo.debug && Roo.log(echild);
                    Roo.debug && Roo.log(cn);
                }
            }
           
            
           
            // if object has flexy:if - then it may or may not be rendered.
            if (build_from_html && has_flexy && !cn.el &&  cn.can_build_overlaid) {
                // skip a flexy if element.
                Roo.debug && Roo.log('skipping render');
                Roo.debug && Roo.log(tree);
                if (!cn.el) {
                    Roo.debug && Roo.log('skipping all children');
                    skip_children = true;
                }
                
             } else {
                 
                // actually if flexy:foreach is found, we really want to create 
                // multiple copies here...
                //Roo.log('render');
                //Roo.log(this[cntr]());
                // some elements do not have render methods.. like the layouts...
                /*
                if(this[cntr](true) === false){
                    cn.items = [];
                    return cn;
                }
                */
                cn.render && cn.render(this[cntr](true));
                
             }
            // then add the element..
        }
         
        // handle the kids..
        
        var nitems = [];
        /*
        if (typeof (tree.menu) != 'undefined') {
            tree.menu.parentType = cn.xtype;
            tree.menu.triggerEl = cn.el;
            nitems.push(cn.addxtype(Roo.apply({}, tree.menu)));
            
        }
        */
        if (!tree.items || !tree.items.length) {
            cn.items = nitems;
            //Roo.log(["no children", this]);
            
            return cn;
        }
         
        var items = tree.items;
        delete tree.items;
        
        //Roo.log(items.length);
            // add the items..
        if (!skip_children) {    
            for(var i =0;i < items.length;i++) {
              //  Roo.log(['add child', items[i]]);
                nitems.push(cn.addxtype(items[i].xns == false ? items[i] : Roo.apply({}, items[i])));
            }
        }
        
        cn.items = nitems;
        
        //Roo.log("fire childrenrendered");
        
        cn.fireEvent('childrenrendered', this);
        
        return cn;
    },
    
    /**
     * Set the element that will be used to show or hide
     */
    setVisibilityEl : function(el)
    {
	this.visibilityEl = el;
    },
    
     /**
     * Get the element that will be used to show or hide
     */
    getVisibilityEl : function()
    {
	if (typeof(this.visibilityEl) == 'object') {
	    return this.visibilityEl;
	}
	
	if (typeof(this.visibilityEl) == 'string') {
	    return this.visibilityEl == 'parent' ? this.parent().getEl() : this.getEl();
	}
	
	return this.getEl();
    },
    
    /**
     * Show a component - removes 'hidden' class
     */
    show : function()
    {
        if(!this.getVisibilityEl()){
            return;
        }
         
        this.getVisibilityEl().removeClass(['hidden','d-none']);
        
        this.fireEvent('show', this);
        
        
    },
    /**
     * Hide a component - adds 'hidden' class
     */
    hide: function()
    {
        if(!this.getVisibilityEl()){
            return;
        }
        
        this.getVisibilityEl().addClass(['hidden','d-none']);
        
        this.fireEvent('hide', this);
        
    }
});

 /*
 * - LGPL
 *
 * toaster  - collection of toasts  - notification popups.
 * 
 */

/**
 * @class Roo.bootstrap.Toaster
 * @extends Roo.bootstrap.Component
 * @children Roo.bootstrap.Toast
 * Bootstrap Toaster Class - a notification with toasts
 * 
 * @constructor
 * Create a new Toaster - should really only be one on the page.?
 * 
 * @param {Object} config The config object
 */

Roo.bootstrap.Toaster = function(config){
    if (Roo.bootstrap.Toaster.page !== false) {
        throw "toaster already initialized";
    }
    
    Roo.bootstrap.Toaster.superclass.constructor.call(this, config);
    Roo.bootstrap.Toaster.page = this;
};
Roo.bootstrap.Toaster.page = false;

Roo.extend(Roo.bootstrap.Toaster, Roo.bootstrap.Component,  {
 
    getAutoCreate : function(){
         
        return cfg = {
            cls : 'bootstrap', // wrapped so we can use it elsewhere
            cn : [ {
                cls: 'toaster',  // add bootstrap so it can be used with roo classic
                cn : [
                    {
                        tag: 'div',
                        cls : 'toast-holder'
                    }
                ]    
            }]
            
        }; 
    },
    initEvents : function()
    {
         this.containerEl = this.el.select('.toast-holder', true).first();
    },
    getChildContainer : function() /// what children are added to.
    {
        return this.containerEl;
    },
    show : function ()
    {
        if (!this.el) {
            this.render(document.body);
        }
        this.el.removeClass('d-none');
    },
    hide : function()
    {
        this.el.addClass('d-none'); // not sure if this would ever be needed..
    }
   
});


/*
 * - LGPL
 *
 * toast - notification popup.
 * 
 */

/**
 * @class Roo.bootstrap.Toast
 * @extends Roo.bootstrap.Component
 * Bootstrap Toaster Class - a notification with toasts
 * 
 * @constructor
 *
 * Create a new Toast - will auto create a toaster if necessary.
 * @cfg title {string} Title of toast
 * @cfg body {string} Body text of string
 * @cfg show_time {boolean} should a time stamp be show/updated? - default false?
 * @cfg timeout {number|boolean} number of seconds until it should be hidden false
 * @cfg progress {number|boolean} show progressBar - false to hide, to show 0-100
 * @cfg {String} weight (primary|warning|info|danger|secondary|success|light|dark) colour to make the square!
 * 
 * @param {Object} config The config object
 *
 * 
 */

Roo.bootstrap.Toast  = function(config)
{
    if (Roo.bootstrap.Toaster.page === false) {
        (new Roo.bootstrap.Toaster()).show();
    }
    
    Roo.bootstrap.Toast.superclass.constructor.call(this, config);
      this.addEvents({
        // raw events
        /**
         * @event close
         * When a toast is closed (via button or timeout.)
         * @param {Roo.bootstrap.Toast} toast
         * @param {Roo.EventObject} e
         */
        "close" : true,
         /**
         * @event show
         * When a toast is show() - usually on contruction..
         * @param {Roo.bootstrap.Toast} toast
         * @param {Roo.EventObject} e
         */
        "show" : true
    });
    
    
    this.render(Roo.bootstrap.Toaster.page.getChildContainer());
    this.fireEvent('show', this);
};
 
Roo.extend(Roo.bootstrap.Toast, Roo.bootstrap.Component,  {
    
    title : '',
    body : '',
    show_time : false,
    timeout : false,
    progress : false,
    weight : 'primary',
 
    getAutoCreate : function(){
          console.log(Roo.BLANK_IMAGE_URL);
        return {
            cls: 'toast fade show',
            role : 'alert',
            cn : [
                {
                    cls : 'toast-header',
                    cn : [
                        {
                            tag : 'img',
                            src : Roo.BLANK_IMAGE_URL,
                            cls : 'rounded mr-2 bg-' + this.weight
                        },
                        {
                            tag : 'small',
                            cls : 'mr-auto',
                            html : this.title
                        },
                        {
                            tag : 'small',
                            cls : 'toast-timer text-muted d-none',
                            html : ''
                        },
                        {
                            tag : 'button',
                            cls : 'ml-2 mb-1 close',
                            type : 'button',
                            cn : [
                                {
                                    tag: 'span',
                                    html : '&times;'
                                }
                            ]
                        }
                    ]
                    
                },
                {
                    cls : 'toast-body',
                    cn : [
                        {
                            cls : 'progress d-none',
                            cn : {
                                cls : 'progress-bar bg-' + this.weight
                            }
                        },
                        {
                            cls: 'toast-body-text small',
                            html : this.body
                        }
                    ]
                }
            ]
                
            
        };
        
    },
    progressBarEl : null,

    progressEl : null,
    bodyEl : null,
    
    bodyTextEl : null,
    closeEl : null,
    timerEl  : null,
    timeout_id : false,
     
    initEvents : function()
    {
        this.progressBarEl = this.el.select('.progress-bar', true).first();
        this.bodyEl = this.el.select('.toast-body', true).first();
        this.bodyTextEl = this.el.select('.toast-body-text', true).first();
        this.closeEl = this.el.select('.close', true).first();
        this.timerEl  = this.el.select('.toast-timer', true).first();
        this.progressEl  = this.el.select('.progress', true).first();
        
        if (this.body == '') {
            this.bodyTextEl.addClass('d-none');
            if (this.progress === false) {
                this.bodyEl.addClass('d-none');
            }
        }
        this.updateProgress(this.progress);
        
        this.closeEl.on('click', this.hide, this);
        this.setTimeout(this.timeout);
        
        if (this.show_time > 0) {
            this.timerEl.removeClass('d-none');
            this.show_time = new Date();
            this.updateTimer();
             
        }
        
        
    },
    
    /**
     * hide and destroy the toast
     */
    hide : function() 
    {
        if (!this.el) {
            return;
        }
        if (this.show_time_interval !== false) {
            clearInterval(this.show_time_interval);
        }
        this.closeEl.un('click',this.hide);
        this.el.dom.parentNode.removeChild(this.el.dom);
        this.el = false;
        this.fireEvent('close', this);
        
    },
    
     
    updateTimer : function()
    {
        if (!this.el) {
            return;
        }
        if (this.show_time === false) {
            this.show_time = new Date();
        }
        
        var s = Math.floor(((new Date()) - this.show_time) / 1000);
        var m = Math.floor(s/60);
        this.timerEl.update(
            s < 1 ? 'now' :
            (
                s > 60 ? (m + " mins ago") : (s + " sec. ago")
            )
        );
        
        this.updateTimer.defer(s < 60 ? 5000 : 60000, this);
    },
    
    /**
     * update the Progress Bar
     * @param {Number|Boolean} false to hide, or number between 0-1
     */
    updateProgress : function(n)
    {
        this.progress = n;
        if (this.progress !== false) {
            this.progress = Math.min(this.progress, 1.0);
            this.progress = Math.max(this.progress, 0.0);
            this.bodyEl.removeClass('d-none');
            this.progressEl.removeClass("d-none");
            this.progressBarEl.setWidth(Math.floor(100 * this.progress) + '%');
            return;
        }
        
        this.progressEl.addClass('d-none');
    },
    /**
     * set / update timeout - time when the notification will autohide
     * @param {string} timeout in seconds
     */
    setTimeout : function(n)
    {
        if (this.timeout_id !== false) {
            clearTimeout(this.timeout_id);
            this.timeout_id = false;
        }
        if (n > 0) {
            this.timeout = n;
            this.timeout_id = this.hide.defer(this.timeout * 1000, this);
        }
     },
    /**
     * update body text
     * @param {string} text to put in body
     */
     updateBody : function(str)
     {
        this.bodyTextEl[str.length > 0 ? 'removeClass' : 'addClass']('d-none');
        this.bodyEl.removeClass('d-none');
        this.bodyTextEl.update(str);
     }
});


