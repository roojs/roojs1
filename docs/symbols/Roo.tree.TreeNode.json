{
  "name" : "Roo.tree.TreeNode",
  "augments" : [
    "Roo.data.Node",
    "Roo.util.Observable"
  ],
  "childClasses" : {
    "Roo.tree.TreeNode" : [
      "Roo.tree.AsyncTreeNode"
    ]
  },
  "tree_children" : [],
  "tree_parent" : [],
  "desc" : "is to use the cls or iconCls attributes and add the icon via a CSS background image.",
  "isSingleton" : false,
  "isStatic" : false,
  "isBuiltin" : false,
  "isAbstract" : false,
  "isBuilderTop" : false,
  "memberOf" : "TreeNode",
  "example" : "",
  "deprecated" : "",
  "since" : "",
  "see" : "",
  "params" : [
    {
      "name" : "attributes",
      "type" : "Object/String",
      "desc" : "The attributes/config for the node or just a string with the text for the node",
      "isOptional" : false
    }
  ],
  "returns" : [],
  "throws" : "",
  "requires" : "",
  "config" : [
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable"
    },
    {
      "name" : "hrefTarget",
      "type" : "String",
      "desc" : "target frame for the link",
      "memberOf" : ""
    },
    {
      "name" : "id",
      "type" : "String",
      "desc" : "The id for this node. If one is not specified, one is generated.",
      "memberOf" : "Roo.data.Node"
    },
    {
      "name" : "text",
      "type" : "String",
      "desc" : "The text for this node",
      "memberOf" : ""
    },
    {
      "name" : "uiProvider",
      "type" : "Function",
      "desc" : "A UI <b>class</b> to use for this node (defaults to Roo.tree.TreeNodeUI)",
      "memberOf" : ""
    },
    {
      "name" : "expanded",
      "type" : "Boolean",
      "desc" : "true to start the node expanded",
      "memberOf" : ""
    },
    {
      "name" : "qtipCfg",
      "type" : "String",
      "desc" : "An Ext QuickTip config for the node (used instead of qtip)",
      "memberOf" : ""
    },
    {
      "name" : "allowDrop",
      "type" : "Boolean",
      "desc" : "false if this node cannot be drop on",
      "memberOf" : ""
    },
    {
      "name" : "disabled",
      "type" : "Boolean",
      "desc" : "true to start the node disabled",
      "memberOf" : ""
    },
    {
      "name" : "cls",
      "type" : "String",
      "desc" : "A css class to be added to the node",
      "memberOf" : ""
    },
    {
      "name" : "iconCls",
      "type" : "String",
      "desc" : "A css class to be added to the nodes icon element for applying css background images",
      "memberOf" : ""
    },
    {
      "name" : "allowDrag",
      "type" : "Boolean",
      "desc" : "false to make this node undraggable if DD is on (defaults to true)",
      "memberOf" : ""
    },
    {
      "name" : "icon",
      "type" : "String",
      "desc" : "The path to an icon for the node. The preferred way to do this",
      "memberOf" : ""
    },
    {
      "name" : "singleClickExpand",
      "type" : "Boolean",
      "desc" : "True for single click expand on this node",
      "memberOf" : ""
    },
    {
      "name" : "qtip",
      "type" : "String",
      "desc" : "An Ext QuickTip for the node",
      "memberOf" : ""
    },
    {
      "name" : "checked",
      "type" : "Boolean",
      "desc" : "True to render a checked checkbox for this node, false to render an unchecked checkbox\n(defaults to undefined with no checkbox rendered)",
      "memberOf" : ""
    },
    {
      "name" : "href",
      "type" : "String",
      "desc" : "URL of the link used for the node (defaults to #)",
      "memberOf" : ""
    },
    {
      "name" : "leaf",
      "type" : "Boolean",
      "desc" : "true if this node is a leaf and does not have children",
      "memberOf" : "Roo.data.Node"
    }
  ],
  "methods" : [
    {
      "name" : "select",
      "type" : "function",
      "desc" : "Triggers selection of this node",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "enable",
      "type" : "function",
      "desc" : "Enables this node",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "collapseChildNodes",
      "type" : "function",
      "desc" : "Collapse all child nodes",
      "sig" : "(deep)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "deep",
          "type" : "Boolean",
          "desc" : "(optional) true if the child nodes should also collapse their child nodes",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "ensureVisible",
      "type" : "function",
      "desc" : "Ensures all parent nodes are expanded",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "isSelected",
      "type" : "function",
      "desc" : "Returns true if this node is selected",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "disable",
      "type" : "function",
      "desc" : "Disables this node",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "getUI",
      "type" : "function",
      "desc" : "Returns the UI object for this node",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "TreeNodeUI",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "setText",
      "type" : "function",
      "desc" : "Sets the text for this node",
      "sig" : "(text)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "text",
          "type" : "String",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "toggle",
      "type" : "function",
      "desc" : "Toggles expanded/collapsed state of the node",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "unselect",
      "type" : "function",
      "desc" : "Triggers deselection of this node",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "isExpanded",
      "type" : "function",
      "desc" : "Returns true if this node is expanded",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "expandChildNodes",
      "type" : "function",
      "desc" : "Expand all child nodes",
      "sig" : "(deep)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "deep",
          "type" : "Boolean",
          "desc" : "(optional) true if the child nodes should also expand their child nodes",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "expand",
      "type" : "function",
      "desc" : "Expand this node.",
      "sig" : "(deep, anim, callback)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "deep",
          "type" : "Boolean",
          "desc" : "(optional) True to expand all children as well",
          "isOptional" : false
        },
        {
          "name" : "anim",
          "type" : "Boolean",
          "desc" : "(optional) false to cancel the default animation",
          "isOptional" : false
        },
        {
          "name" : "callback",
          "type" : "Function",
          "desc" : "(optional) A callback to be called when\nexpanding this node completes (does not wait for deep expand to complete).\nCalled with 1 parameter, this node.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "collapse",
      "type" : "function",
      "desc" : "Collapse this node.",
      "sig" : "(deep, anim)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "deep",
          "type" : "Boolean",
          "desc" : "(optional) True to collapse all children as well",
          "isOptional" : false
        },
        {
          "name" : "anim",
          "type" : "Boolean",
          "desc" : "(optional) false to cancel the default animation",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "sort",
      "type" : "function",
      "desc" : "Sorts this nodes children using the supplied sort function",
      "sig" : "(fn, scope)",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeChild",
      "type" : "function",
      "desc" : "Removes a child node from this node.",
      "sig" : "(node)",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "node",
          "type" : "Node",
          "desc" : "The node to remove",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Node",
          "desc" : "The removed node"
        }
      ]
    },
    {
      "name" : "isAncestor",
      "type" : "function",
      "desc" : "Returns true if the passed node is an ancestor (at any point) of this node.",
      "sig" : "(node)",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "node",
          "type" : "Node",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "contains",
      "type" : "function",
      "desc" : "Returns true if this node is an ancestor (at any point) of the passed node.",
      "sig" : "(node)",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "node",
          "type" : "Node",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "cascade",
      "type" : "function",
      "desc" : "Cascades down the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe cascade is stopped on that branch.",
      "sig" : "(fn, scope, args)",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope of the function (defaults to current node)",
          "isOptional" : false
        },
        {
          "name" : "args",
          "type" : "Array",
          "desc" : "(optional) The args to call the function with (default to passing the current node)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "getDepth",
      "type" : "function",
      "desc" : "Returns depth of this node (the root node has a depth of 0)",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "Number",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "getPath",
      "type" : "function",
      "desc" : "Returns the path for this node. The path can be used to expand or select this node programmatically.",
      "sig" : "(attr)",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "attr",
          "type" : "String",
          "desc" : "(optional) The attr to use for the path (defaults to the node's id)",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "The path"
        }
      ]
    },
    {
      "name" : "indexOf",
      "type" : "function",
      "desc" : "Returns the index of a child node",
      "sig" : "(node)",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "node",
          "type" : "Node",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Number",
          "desc" : "The index of the node or -1 if it was not found"
        }
      ]
    },
    {
      "name" : "isFirst",
      "type" : "function",
      "desc" : "Returns true if this node is the first child of its parent",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "isLast",
      "type" : "function",
      "desc" : "Returns true if this node is the last child of its parent",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "isLeaf",
      "type" : "function",
      "desc" : "Returns true if this node is a leaf",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "insertBefore",
      "type" : "function",
      "desc" : "Inserts the first node before the second node in this nodes childNodes collection.",
      "sig" : "(node, refNode)",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "node",
          "type" : "Node",
          "desc" : "The node to insert",
          "isOptional" : false
        },
        {
          "name" : "refNode",
          "type" : "Node",
          "desc" : "The node to insert before (if null the node is appended)",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Node",
          "desc" : "The inserted node"
        }
      ]
    },
    {
      "name" : "item",
      "type" : "function",
      "desc" : "Returns the child node at the specified index.",
      "sig" : "(index)",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Node",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "getOwnerTree",
      "type" : "function",
      "desc" : "Returns the tree this node is in.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "Tree",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "appendChild",
      "type" : "function",
      "desc" : "Insert node(s) as the last child node of this node.",
      "sig" : "(node)",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "node",
          "type" : "Node/Array",
          "desc" : "The node or Array of nodes to append",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Node",
          "desc" : "The appended node if single append, or null if an array was passed"
        }
      ]
    },
    {
      "name" : "findChildBy",
      "type" : "function",
      "desc" : "Finds the first child by a custom function. The child matches if the function passed\nreturns true.",
      "sig" : "(fn, scope)",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Node",
          "desc" : "The found child or null if none was found"
        }
      ]
    },
    {
      "name" : "replaceChild",
      "type" : "function",
      "desc" : "Replaces one child node in this node with another.",
      "sig" : "(newChild, oldChild)",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "newChild",
          "type" : "Node",
          "desc" : "The replacement node",
          "isOptional" : false
        },
        {
          "name" : "oldChild",
          "type" : "Node",
          "desc" : "The node to replace",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Node",
          "desc" : "The replaced node"
        }
      ]
    },
    {
      "name" : "bubble",
      "type" : "function",
      "desc" : "Bubbles up the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe bubble is stopped.",
      "sig" : "(fn, scope, args)",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope of the function (defaults to current node)",
          "isOptional" : false
        },
        {
          "name" : "args",
          "type" : "Array",
          "desc" : "(optional) The args to call the function with (default to passing the current node)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "eachChild",
      "type" : "function",
      "desc" : "Interates the child nodes of this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe iteration stops.",
      "sig" : "(fn, scope, args)",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope of the function (defaults to current node)",
          "isOptional" : false
        },
        {
          "name" : "args",
          "type" : "Array",
          "desc" : "(optional) The args to call the function with (default to passing the current node)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "findChild",
      "type" : "function",
      "desc" : "Finds the first child that has the attribute with the specified value.",
      "sig" : "(attribute, value)",
      "static" : false,
      "memberOf" : "Roo.data.Node",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "attribute",
          "type" : "String",
          "desc" : "The attribute name",
          "isOptional" : false
        },
        {
          "name" : "value",
          "type" : "Mixed",
          "desc" : "The value to search for",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Node",
          "desc" : "The found child or null if none was found"
        }
      ]
    },
    {
      "name" : "purgeListeners",
      "type" : "function",
      "desc" : "Removes all listeners for this object",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "on",
      "type" : "function",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "sig" : "(eventName, handler, scope, options)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "un",
      "type" : "function",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "sig" : "(eventName, handler, scope)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addEvents",
      "type" : "function",
      "desc" : "Used to define events on this Observable",
      "sig" : "(object)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "releaseCapture",
      "type" : "function",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "sig" : "(o)",
      "static" : true,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeListener",
      "type" : "function",
      "desc" : "Removes a listener",
      "sig" : "(eventName, handler, scope)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "fireEvent",
      "type" : "function",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "sig" : "(eventName, args)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "returns false if any of the handlers return false otherwise it returns true"
        }
      ]
    },
    {
      "name" : "hasListener",
      "type" : "function",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "sig" : "(eventName)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "True if the event is being listened for, else false"
        }
      ]
    },
    {
      "name" : "capture",
      "type" : "function",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "sig" : "(o, fn, scope)",
      "static" : true,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture",
          "isOptional" : false
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addListener",
      "type" : "function",
      "desc" : "Appends an event handler to this component",
      "sig" : "(eventName, handler, scope, options)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>",
          "isOptional" : false
        }
      ],
      "returns" : []
    }
  ],
  "events" : [
    {
      "name" : "beforecollapse",
      "type" : "function",
      "desc" : "Fires before this node is collapsed, return false to cancel.",
      "sig" : "function (_self, deep, anim)\n{\n\n}",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "deep",
          "type" : "Boolean",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "anim",
          "type" : "Boolean",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "dblclick",
      "type" : "function",
      "desc" : "Fires when this node is double clicked",
      "sig" : "function (_self, e)\n{\n\n}",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "The event object",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "disabledchange",
      "type" : "function",
      "desc" : "Fires when the disabled status of this node changes",
      "sig" : "function (_self, disabled)\n{\n\n}",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "disabled",
          "type" : "Boolean",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "beforechildrenrendered",
      "type" : "function",
      "desc" : "Fires right before the child nodes for this node are rendered",
      "sig" : "function (_self)\n{\n\n}",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "beforeclick",
      "type" : "function",
      "desc" : "Fires before click processing. Return false to cancel the default action.",
      "sig" : "function (_self, e)\n{\n\n}",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "The event object",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "checkchange",
      "type" : "function",
      "desc" : "Fires when a node with a checkbox's checked property changes",
      "sig" : "function (_self, checked)\n{\n\n}",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "checked",
          "type" : "Boolean",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "collapse",
      "type" : "function",
      "desc" : "Fires when this node is collapsed",
      "sig" : "function (_self)\n{\n\n}",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "textchange",
      "type" : "function",
      "desc" : "Fires when the text for this node is changed",
      "sig" : "function (_self, text, oldText)\n{\n\n}",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "text",
          "type" : "String",
          "desc" : "The new text",
          "isOptional" : false
        },
        {
          "name" : "oldText",
          "type" : "String",
          "desc" : "The old text",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "beforeexpand",
      "type" : "function",
      "desc" : "Fires before this node is expanded, return false to cancel.",
      "sig" : "function (_self, deep, anim)\n{\n\n}",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "deep",
          "type" : "Boolean",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "anim",
          "type" : "Boolean",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "click",
      "type" : "function",
      "desc" : "Fires when this node is clicked",
      "sig" : "function (_self, e)\n{\n\n}",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "The event object",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "contextmenu",
      "type" : "function",
      "desc" : "Fires when this node is right clicked",
      "sig" : "function (_self, e)\n{\n\n}",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "The event object",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "expand",
      "type" : "function",
      "desc" : "Fires when this node is expanded",
      "sig" : "function (_self)\n{\n\n}",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "beforeappend",
      "type" : "function",
      "desc" : "Fires before a new child is appended, return false to cancel the append.",
      "sig" : "function (tree, _self, node)\n{\n\n}",
      "memberOf" : "Roo.data.Node",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "tree",
          "type" : "Tree",
          "desc" : "The owner tree",
          "isOptional" : false
        },
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "node",
          "type" : "Node",
          "desc" : "The child node to be appended",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "move",
      "type" : "function",
      "desc" : "Fires when this node is moved to a new location in the tree",
      "sig" : "function (tree, _self, oldParent, newParent, index)\n{\n\n}",
      "memberOf" : "Roo.data.Node",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "tree",
          "type" : "Tree",
          "desc" : "The owner tree",
          "isOptional" : false
        },
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "oldParent",
          "type" : "Node",
          "desc" : "The old parent of this node",
          "isOptional" : false
        },
        {
          "name" : "newParent",
          "type" : "Node",
          "desc" : "The new parent of this node",
          "isOptional" : false
        },
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "The index it was moved to",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "append",
      "type" : "function",
      "desc" : "Fires when a new child node is appended",
      "sig" : "function (tree, _self, node, index)\n{\n\n}",
      "memberOf" : "Roo.data.Node",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "tree",
          "type" : "Tree",
          "desc" : "The owner tree",
          "isOptional" : false
        },
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "node",
          "type" : "Node",
          "desc" : "The newly appended node",
          "isOptional" : false
        },
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "The index of the newly appended node",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "beforeremove",
      "type" : "function",
      "desc" : "Fires before a child is removed, return false to cancel the remove.",
      "sig" : "function (tree, _self, node)\n{\n\n}",
      "memberOf" : "Roo.data.Node",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "tree",
          "type" : "Tree",
          "desc" : "The owner tree",
          "isOptional" : false
        },
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "node",
          "type" : "Node",
          "desc" : "The child node to be removed",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "remove",
      "type" : "function",
      "desc" : "Fires when a child node is removed",
      "sig" : "function (tree, _self, node)\n{\n\n}",
      "memberOf" : "Roo.data.Node",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "tree",
          "type" : "Tree",
          "desc" : "The owner tree",
          "isOptional" : false
        },
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "node",
          "type" : "Node",
          "desc" : "The removed node",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "beforeinsert",
      "type" : "function",
      "desc" : "Fires before a new child is inserted, return false to cancel the insert.",
      "sig" : "function (tree, _self, node, refNode)\n{\n\n}",
      "memberOf" : "Roo.data.Node",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "tree",
          "type" : "Tree",
          "desc" : "The owner tree",
          "isOptional" : false
        },
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "node",
          "type" : "Node",
          "desc" : "The child node to be inserted",
          "isOptional" : false
        },
        {
          "name" : "refNode",
          "type" : "Node",
          "desc" : "The child node the node is being inserted before",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "insert",
      "type" : "function",
      "desc" : "Fires when a new child node is inserted.",
      "sig" : "function (tree, _self, node, refNode)\n{\n\n}",
      "memberOf" : "Roo.data.Node",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "tree",
          "type" : "Tree",
          "desc" : "The owner tree",
          "isOptional" : false
        },
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "node",
          "type" : "Node",
          "desc" : "The child node inserted",
          "isOptional" : false
        },
        {
          "name" : "refNode",
          "type" : "Node",
          "desc" : "The child node the node was inserted before",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "beforemove",
      "type" : "function",
      "desc" : "Fires before this node is moved to a new location in the tree. Return false to cancel the move.",
      "sig" : "function (tree, _self, oldParent, newParent, index)\n{\n\n}",
      "memberOf" : "Roo.data.Node",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "tree",
          "type" : "Tree",
          "desc" : "The owner tree",
          "isOptional" : false
        },
        {
          "name" : "this",
          "type" : "Node",
          "desc" : "This node",
          "isOptional" : false
        },
        {
          "name" : "oldParent",
          "type" : "Node",
          "desc" : "The parent of this node",
          "isOptional" : false
        },
        {
          "name" : "newParent",
          "type" : "Node",
          "desc" : "The new parent this node is moving to",
          "isOptional" : false
        },
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "The index it is being moved to",
          "isOptional" : false
        }
      ],
      "returns" : []
    }
  ]
}