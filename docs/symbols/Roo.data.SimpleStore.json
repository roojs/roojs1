{
  "name" : "Roo.data.SimpleStore",
  "augments" : [
    "Roo.data.Store",
    "Roo.util.Observable"
  ],
  "childClasses" : {  },
  "tree_children" : [],
  "tree_parent" : [],
  "desc" : "Small helper class to make creating Stores from Array data easier.",
  "isSingleton" : false,
  "isStatic" : false,
  "isBuiltin" : false,
  "isAbstract" : false,
  "isBuilderTop" : false,
  "memberOf" : "SimpleStore",
  "example" : "",
  "deprecated" : "",
  "since" : "",
  "see" : "",
  "params" : [
    {
      "name" : "config",
      "type" : "Object",
      "desc" : "",
      "isOptional" : false
    }
  ],
  "returns" : [],
  "throws" : "",
  "requires" : "",
  "config" : [
    {
      "name" : "an",
      "type" : "Object",
      "desc" : "existing reader (eg. copied from another store)",
      "memberOf" : ""
    },
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable"
    },
    {
      "name" : "id",
      "type" : "Number",
      "desc" : "The array index of the record id. Leave blank to auto generate ids.",
      "memberOf" : ""
    },
    {
      "name" : "fields",
      "type" : "Array",
      "desc" : "An array of field definition objects, or field name strings.",
      "memberOf" : ""
    },
    {
      "name" : "proxy",
      "type" : "Roo.data.DataProxy",
      "desc" : "[not-required]",
      "memberOf" : ""
    },
    {
      "name" : "multiSort",
      "type" : "Boolean",
      "desc" : "enable multi column sorting (sort is based on the order of columns, remote only at present)",
      "memberOf" : "Roo.data.Store"
    },
    {
      "name" : "pruneModifiedRecords",
      "type" : "boolean",
      "desc" : "True to clear all modified record information each time the store is\nloaded or when a record is removed. (defaults to false).",
      "memberOf" : "Roo.data.Store"
    },
    {
      "name" : "remoteSort",
      "type" : "boolean",
      "desc" : "True if sorting is to be handled by requesting the Proxy to provide a refreshed\nversion of the data object in sorted order, as opposed to sorting the Record cache in place (defaults to false).",
      "memberOf" : "Roo.data.Store"
    },
    {
      "name" : "data",
      "type" : "Array",
      "desc" : "The multi-dimensional array of data",
      "memberOf" : ""
    },
    {
      "name" : "sortInfo",
      "type" : "Object",
      "desc" : "A config object in the format: {field: \"fieldName\", direction: \"ASC|DESC\"}",
      "memberOf" : "Roo.data.Store"
    },
    {
      "name" : "baseParams",
      "type" : "Object",
      "desc" : "An object containing properties which are to be sent as parameters\non any HTTP request",
      "memberOf" : "Roo.data.Store"
    },
    {
      "name" : "reader",
      "type" : "Roo.data.Reader",
      "desc" : "[not-required]",
      "memberOf" : ""
    },
    {
      "name" : "isLocal",
      "type" : "boolean",
      "desc" : "flag if data is locally available (and can be always looked up\nwithout a remote query - used by combo/forms at present.",
      "memberOf" : "Roo.data.Store"
    }
  ],
  "methods" : [
    {
      "name" : "reload",
      "type" : "function",
      "desc" : "Reloads the Record cache from the configured Proxy using the configured Reader and\nthe options from the last load operation performed.",
      "sig" : "(options)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing properties which may override the options\nused in the last load operation. See {@link #load} for details (defaults to null, in which case\nthe most recently used options are reused).",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeAll",
      "type" : "function",
      "desc" : "Remove all Records from the Store and fires the clear event.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "query",
      "type" : "function",
      "desc" : "Query the records by a specified property.",
      "sig" : "(field, value, anyMatch)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "field",
          "type" : "String",
          "desc" : "A field on your records",
          "isOptional" : false
        },
        {
          "name" : "value",
          "type" : "String/RegExp",
          "desc" : "Either a string that the field\nshould start with or a RegExp to test against the field",
          "isOptional" : false
        },
        {
          "name" : "anyMatch",
          "type" : "Boolean",
          "desc" : "True to match any part not just the beginning",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "MixedCollection",
          "desc" : "Returns an Roo.util.MixedCollection of the matched records"
        }
      ]
    },
    {
      "name" : "sum",
      "type" : "function",
      "desc" : "Sums the value of <i>property</i> for each record between start and end and returns the result.",
      "sig" : "(property, start, end)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "property",
          "type" : "String",
          "desc" : "A field on your records",
          "isOptional" : false
        },
        {
          "name" : "start",
          "type" : "Number",
          "desc" : "The record index to start at (defaults to 0)",
          "isOptional" : false
        },
        {
          "name" : "end",
          "type" : "Number",
          "desc" : "The last record index to include (defaults to length - 1)",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Number",
          "desc" : "The sum"
        }
      ]
    },
    {
      "name" : "getById",
      "type" : "function",
      "desc" : "Get the Record with the specified id.",
      "sig" : "(id)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "String",
          "desc" : "The id of the Record to find.",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.data.Record",
          "desc" : "The Record with the passed id. Returns undefined if not found."
        }
      ]
    },
    {
      "name" : "commitChanges",
      "type" : "function",
      "desc" : "Commit all Records with outstanding changes. To handle updates for changes, subscribe to the\nStore's \"update\" event, and perform updating when the third parameter is Roo.data.Record.COMMIT.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "getCount",
      "type" : "function",
      "desc" : "Gets the number of cached records.\n<p>\n<em>If using paging, this may not be the total size of the dataset. If the data object\nused by the Reader contains the dataset size, then the getTotalCount() function returns\nthe data set size</em>",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "indexOf",
      "type" : "function",
      "desc" : "Get the index within the cache of the passed Record.",
      "sig" : "(record)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "record",
          "type" : "Roo.data.Record",
          "desc" : "The Roo.data.Record object to to find.",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Number",
          "desc" : "The index of the passed Record. Returns -1 if not found."
        }
      ]
    },
    {
      "name" : "add",
      "type" : "function",
      "desc" : "Add Records to the Store and fires the add event.",
      "sig" : "(records)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "records",
          "type" : "Roo.data.Record[]",
          "desc" : "An Array of Roo.data.Record objects to add to the cache.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "indexOfId",
      "type" : "function",
      "desc" : "Get the index within the cache of the Record with the passed id.",
      "sig" : "(id)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "String",
          "desc" : "The id of the Record to find.",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Number",
          "desc" : "The index of the Record. Returns -1 if not found."
        }
      ]
    },
    {
      "name" : "filter",
      "type" : "function",
      "desc" : "Filter the records by a specified property.",
      "sig" : "(field, value, anyMatch)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "field",
          "type" : "String",
          "desc" : "A field on your records",
          "isOptional" : false
        },
        {
          "name" : "value",
          "type" : "String/RegExp",
          "desc" : "Either a string that the field\nshould start with or a RegExp to test against the field",
          "isOptional" : false
        },
        {
          "name" : "anyMatch",
          "type" : "Boolean",
          "desc" : "True to match any part not just the beginning",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "sort",
      "type" : "function",
      "desc" : "Sort the Records.\nIf remote sorting is used, the sort is performed on the server, and the cache is\nreloaded. If local sorting is used, the cache is sorted internally.",
      "sig" : "(fieldName, dir)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "fieldName",
          "type" : "String",
          "desc" : "The name of the field to sort by.",
          "isOptional" : false
        },
        {
          "name" : "dir",
          "type" : "String",
          "desc" : "(optional) The sort order, \"ASC\" or \"DESC\" (defaults to \"ASC\")",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "getRange",
      "type" : "function",
      "desc" : "Returns a range of Records between specified indices.",
      "sig" : "(startIndex, endIndex)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "startIndex",
          "type" : "Number",
          "desc" : "(optional) The starting index (defaults to 0)",
          "isOptional" : false
        },
        {
          "name" : "endIndex",
          "type" : "Number",
          "desc" : "(optional) The ending index (defaults to the last Record in the Store)",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.data.Record[]",
          "desc" : "An array of Records"
        }
      ]
    },
    {
      "name" : "queryBy",
      "type" : "function",
      "desc" : "Query by a function. The specified function will be called with each\nrecord in this data source. If the function returns true the record is included\nin the results.",
      "sig" : "(fn, scope)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to be called, it will receive 2 args (record, id)",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope of the function (defaults to this)",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "MixedCollection",
          "desc" : "Returns an Roo.util.MixedCollection of the matched records"
        }
      ]
    },
    {
      "name" : "loadDataFromChildren",
      "type" : "function",
      "desc" : "using 'cn' the nested child reader read the child array into it's child stores.",
      "sig" : "(rec)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "rec",
          "type" : "Object",
          "desc" : "The record with a 'children array",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "clearFilter",
      "type" : "function",
      "desc" : "Revert to a view of the Record cache with no filtering applied.",
      "sig" : "(suppressEvent)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "suppressEvent",
          "type" : "Boolean",
          "desc" : "If true the filter is cleared silently without notifying listeners",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "each",
      "type" : "function",
      "desc" : "Calls the specified function for each of the Records in the cache.",
      "sig" : "(fn, scope)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call. The Record is passed as the first parameter.\nReturning <em>false</em> aborts and exits the iteration.",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to call the function (defaults to the Record).",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "rejectChanges",
      "type" : "function",
      "desc" : "Cancel outstanding changes on all changed records.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "getAt",
      "type" : "function",
      "desc" : "Get the Record at the specified index.",
      "sig" : "(index)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "The index of the Record to find.",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.data.Record",
          "desc" : "The Record at the passed index. Returns undefined if not found."
        }
      ]
    },
    {
      "name" : "getTotalCount",
      "type" : "function",
      "desc" : "Gets the total number of records in the dataset as returned by the server.\n<p>\n<em>If using paging, for this to be accurate, the data object used by the Reader must contain\nthe dataset size</em>",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "filterBy",
      "type" : "function",
      "desc" : "Filter by a function. The specified function will be called with each\nrecord in this data source. If the function returns true the record is included,\notherwise it is filtered.",
      "sig" : "(fn, scope)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to be called, it will receive 2 args (record, id)",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope of the function (defaults to this)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "collect",
      "type" : "function",
      "desc" : "Collects unique values for a particular dataIndex from this store.",
      "sig" : "(dataIndex, allowNull, bypassFilter)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "dataIndex",
          "type" : "String",
          "desc" : "The property to collect",
          "isOptional" : false
        },
        {
          "name" : "allowNull",
          "type" : "Boolean",
          "desc" : "(optional) Pass true to allow null, undefined or empty string values",
          "isOptional" : false
        },
        {
          "name" : "bypassFilter",
          "type" : "Boolean",
          "desc" : "(optional) Pass true to collect from all records, even ones which are filtered",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Array",
          "desc" : "An array of the unique values"
        }
      ]
    },
    {
      "name" : "getModifiedRecords",
      "type" : "function",
      "desc" : "Gets all records modified since the last commit.  Modified records are persisted across load operations\n(e.g., during paging).",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.data.Record[]",
          "desc" : "An array of Records containing outstanding modifications."
        }
      ]
    },
    {
      "name" : "remove",
      "type" : "function",
      "desc" : "Remove a Record from the Store and fires the remove event.",
      "sig" : "(record)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "record",
          "type" : "Ext.data.Record",
          "desc" : "The Roo.data.Record object to remove from the cache.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "loadData",
      "type" : "function",
      "desc" : "Loads data from a passed data block. A Reader which understands the format of the data\nmust have been configured in the constructor.",
      "sig" : "(data, append)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "The data block from which to read the Records.  The format of the data expected\nis dependent on the type of Reader that is configured and should correspond to that Reader's readRecords parameter.",
          "isOptional" : false
        },
        {
          "name" : "append",
          "type" : "Boolean",
          "desc" : "(Optional) True to append the new Records rather than replace the existing cache.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "load",
      "type" : "function",
      "desc" : "Loads the Record cache from the configured Proxy using the configured Reader.\n<p>\nIf using remote paging, then the first load call must specify the <em>start</em>\nand <em>limit</em> properties in the options.params property to establish the initial\nposition within the dataset, and the number of Records to cache on each read from the Proxy.\n<p>\n<strong>It is important to note that for remote data sources, loading is asynchronous,\nand this call will return before the new data has been loaded. Perform any post-processing\nin a callback function, or in a \"load\" event handler.</strong>\n<p>",
      "sig" : "(options)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "An object containing properties which control loading options:<ul>\n<li>params {Object} An object containing properties to pass as HTTP parameters to a remote data source.</li>\n<li>params.data {Object} if you are using a MemoryProxy / JsonReader, use this as the data to load stuff..\n<pre>\n                {\n                    data : data,  // array of key=>value data like JsonReader\n                    total : data.length,\n                    success : true\n                    \n                }\n        </pre>\n            }.</li>\n<li>callback {Function} A function to be called after the Records have been loaded. The callback is\npassed the following arguments:<ul>\n<li>r : Roo.data.Record[]</li>\n<li>options: Options object from the load call</li>\n<li>success: Boolean success indicator</li></ul></li>\n<li>scope {Object} Scope with which to call the callback (defaults to the Store object)</li>\n<li>add {Boolean} indicator to append loaded records rather than replace the current cache.</li>\n</ul>",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "setDefaultSort",
      "type" : "function",
      "desc" : "Sets the default sort column and order to be used by the next load operation.",
      "sig" : "(fieldName, dir)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "fieldName",
          "type" : "String",
          "desc" : "The name of the field to sort by.",
          "isOptional" : false
        },
        {
          "name" : "dir",
          "type" : "String",
          "desc" : "(optional) The sort order, \"ASC\" or \"DESC\" (defaults to \"ASC\")",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "insert",
      "type" : "function",
      "desc" : "Inserts Records to the Store at the given index and fires the add event.",
      "sig" : "(index, records)",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "The start index at which to insert the passed Records.",
          "isOptional" : false
        },
        {
          "name" : "records",
          "type" : "Roo.data.Record[]",
          "desc" : "An Array of Roo.data.Record objects to add to the cache.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "getSortState",
      "type" : "function",
      "desc" : "Returns the sort state of the Store as an object with two properties:\n<pre><code>\n field {String} The name of the field by which the Records are sorted\n direction {String} The sort order, \"ASC\" or \"DESC\"\n</code></pre>",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.data.Store",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "purgeListeners",
      "type" : "function",
      "desc" : "Removes all listeners for this object",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "on",
      "type" : "function",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "sig" : "(eventName, handler, scope, options)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "un",
      "type" : "function",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "sig" : "(eventName, handler, scope)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addEvents",
      "type" : "function",
      "desc" : "Used to define events on this Observable",
      "sig" : "(object)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "releaseCapture",
      "type" : "function",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "sig" : "(o)",
      "static" : true,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeListener",
      "type" : "function",
      "desc" : "Removes a listener",
      "sig" : "(eventName, handler, scope)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "fireEvent",
      "type" : "function",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "sig" : "(eventName, args)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "returns false if any of the handlers return false otherwise it returns true"
        }
      ]
    },
    {
      "name" : "hasListener",
      "type" : "function",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "sig" : "(eventName)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "True if the event is being listened for, else false"
        }
      ]
    },
    {
      "name" : "capture",
      "type" : "function",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "sig" : "(o, fn, scope)",
      "static" : true,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture",
          "isOptional" : false
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addListener",
      "type" : "function",
      "desc" : "Appends an event handler to this component",
      "sig" : "(eventName, handler, scope, options)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>",
          "isOptional" : false
        }
      ],
      "returns" : []
    }
  ],
  "events" : [
    {
      "name" : "beforeloadadd",
      "type" : "function",
      "desc" : "Fires after a new set of Records has been loaded.",
      "sig" : "function (_self, records, options)\n{\n\n}",
      "memberOf" : "Roo.data.Store",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Store",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "records",
          "type" : "Roo.data.Record[]",
          "desc" : "The Records that were loaded",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "The loading options that were specified (see {@link #load} for details)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "loadexception",
      "type" : "function",
      "desc" : "Fires if an exception occurs in the Proxy during loading.\nCalled with the signature of the Proxy's \"loadexception\" event.\nIf you return Json { data: [] , success: false, .... } then this will be thrown with the following args",
      "sig" : "function (, return, load, jsonData)\n{\n\n}",
      "memberOf" : "Roo.data.Store",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "",
          "type" : "Proxy",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "return",
          "type" : "Object",
          "desc" : "from JsonData.reader() - success, totalRecords, records",
          "isOptional" : false
        },
        {
          "name" : "load",
          "type" : "Object",
          "desc" : "options",
          "isOptional" : false
        },
        {
          "name" : "jsonData",
          "type" : "Object",
          "desc" : "from your request (normally this contains the Exception)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "load",
      "type" : "function",
      "desc" : "Fires after a new set of Records has been loaded, before they are added to the store.",
      "sig" : "function (_self, records, options)\n{\n\n}",
      "memberOf" : "Roo.data.Store",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Store",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "records",
          "type" : "Roo.data.Record[]",
          "desc" : "The Records that were loaded",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "The loading options that were specified (see {@link #load} for details)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "add",
      "type" : "function",
      "desc" : "Fires when Records have been added to the Store",
      "sig" : "function (_self, records, index)\n{\n\n}",
      "memberOf" : "Roo.data.Store",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Store",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "records",
          "type" : "Roo.data.Record[]",
          "desc" : "The array of Records added",
          "isOptional" : false
        },
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "The index at which the record(s) were added",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "metachange",
      "type" : "function",
      "desc" : "Fires when this store's reader provides new metadata (fields). This is currently only support for JsonReaders.",
      "sig" : "function (_self, meta)\n{\n\n}",
      "memberOf" : "Roo.data.Store",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Store",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "meta",
          "type" : "Object",
          "desc" : "The JSON metadata",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "clear",
      "type" : "function",
      "desc" : "Fires when the data cache has been cleared.",
      "sig" : "function (_self)\n{\n\n}",
      "memberOf" : "Roo.data.Store",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Store",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "remove",
      "type" : "function",
      "desc" : "Fires when a Record has been removed from the Store",
      "sig" : "function (_self, record, index)\n{\n\n}",
      "memberOf" : "Roo.data.Store",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Store",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "record",
          "type" : "Roo.data.Record",
          "desc" : "The Record that was removed",
          "isOptional" : false
        },
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "The index at which the record was removed",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "update",
      "type" : "function",
      "desc" : "Fires when a Record has been updated",
      "sig" : "function (_self, record, operation)\n{\n\n}",
      "memberOf" : "Roo.data.Store",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Store",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "record",
          "type" : "Roo.data.Record",
          "desc" : "The Record that was updated",
          "isOptional" : false
        },
        {
          "name" : "operation",
          "type" : "String",
          "desc" : "The update operation being performed.  Value may be one of:\n<pre><code>\n Roo.data.Record.EDIT\n Roo.data.Record.REJECT\n Roo.data.Record.COMMIT\n</code></pre>",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "beforeload",
      "type" : "function",
      "desc" : "Fires before a request is made for a new data object.  If the beforeload handler returns false\nthe load action will be canceled.",
      "sig" : "function (_self, options)\n{\n\n}",
      "memberOf" : "Roo.data.Store",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Store",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "The loading options that were specified (see {@link #load} for details)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "datachanged",
      "type" : "function",
      "desc" : "Fires when the data cache has changed, and a widget which is using this Store\nas a Record cache should refresh its view.",
      "sig" : "function (_self)\n{\n\n}",
      "memberOf" : "Roo.data.Store",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Store",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    }
  ]
}