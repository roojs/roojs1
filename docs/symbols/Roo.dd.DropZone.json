{
  "name" : "Roo.dd.DropZone",
  "augments" : [
    "Roo.dd.DropTarget",
    "Roo.dd.DDTarget",
    "Roo.dd.DragDrop",
    "Roo.util.Observable"
  ],
  "childClasses" : {  },
  "tree_children" : [],
  "tree_parent" : [],
  "desc" : "This class provides a container DD instance that proxies for multiple child node targets.<br />\nBy default, this class requires that child nodes accepting drop are registered with {@link Roo.dd.Registry}.",
  "isSingleton" : false,
  "isStatic" : true,
  "isBuiltin" : false,
  "isAbstract" : false,
  "isBuilderTop" : false,
  "memberOf" : "DropZone",
  "example" : "",
  "deprecated" : "",
  "since" : "",
  "see" : "",
  "params" : [
    {
      "name" : "el",
      "type" : "String/HTMLElement/Element",
      "desc" : "The container element",
      "isOptional" : false
    },
    {
      "name" : "config",
      "type" : "Object",
      "desc" : "",
      "isOptional" : false
    }
  ],
  "returns" : [],
  "throws" : "",
  "requires" : "",
  "config" : [
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable"
    },
    {
      "name" : "dropNotAllowed",
      "type" : "String",
      "desc" : "The CSS class returned to the drag source when drop is not allowed (defaults to \"x-dd-drop-nodrop\").",
      "memberOf" : "Roo.dd.DropTarget"
    },
    {
      "name" : "valid",
      "type" : "boolean|String",
      "desc" : "true/false or string (ok-add/ok-sub/ok/nodrop)\nif the drop point is valid for over/enter..",
      "memberOf" : "Roo.dd.DropTarget"
    },
    {
      "name" : "success",
      "type" : "boolean",
      "desc" : "set this after drop listener..",
      "memberOf" : "Roo.dd.DropTarget"
    },
    {
      "name" : "dropAllowed",
      "type" : "String",
      "desc" : "The CSS class returned to the drag source when drop is allowed (defaults to \"x-dd-drop-ok\").",
      "memberOf" : "Roo.dd.DropTarget"
    },
    {
      "name" : "overClass",
      "type" : "String",
      "desc" : "The CSS class applied to the drop target element while the drag source is over it (defaults to \"\").",
      "memberOf" : "Roo.dd.DropTarget"
    },
    {
      "name" : "ddGroup",
      "type" : "String",
      "desc" : "The drag drop group to handle drop events for",
      "memberOf" : "Roo.dd.DropTarget"
    }
  ],
  "methods" : [
    {
      "name" : "onNodeEnter",
      "type" : "function",
      "desc" : "Called internally when the DropZone determines that a {@link Roo.dd.DragSource} has entered a drop node\nthat it has registered.  This method has no default implementation and should be overridden to provide\nnode-specific processing if necessary.",
      "sig" : "(nodeData, source, e, data)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "nodeData",
          "type" : "Object",
          "desc" : "The custom data associated with the drop node (this is the same value returned from \n{@link #getTargetFromEvent} for this node)",
          "isOptional" : false
        },
        {
          "name" : "source",
          "type" : "Roo.dd.DragSource",
          "desc" : "The drag source that was dragged over this drop zone",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event",
          "isOptional" : false
        },
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "An object containing arbitrary data supplied by the drag source",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "onContainerDrop",
      "type" : "function",
      "desc" : "Called internally when the DropZone determines that a {@link Roo.dd.DragSource} has been dropped on it,\nbut not on any of its registered drop nodes.  The default implementation returns false, so it should be\noverridden to provide the appropriate processing of the drop event if you need the drop zone itself to\nbe able to accept drops.  It should return true when valid so that the drag source's repair action does not run.",
      "sig" : "(source, e, data)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "source",
          "type" : "Roo.dd.DragSource",
          "desc" : "The drag source that was dragged over this drop zone",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event",
          "isOptional" : false
        },
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "An object containing arbitrary data supplied by the drag source",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "True if the drop was valid, else false"
        }
      ]
    },
    {
      "name" : "notifyOver",
      "type" : "function",
      "desc" : "The function a {@link Roo.dd.DragSource} calls continuously while it is being dragged over the drop zone.\nThis method will be called on every mouse movement while the drag source is over the drop zone.\nIt will call {@link #onNodeOver} while the drag source is over a registered node, and will also automatically\ndelegate to the appropriate node-specific methods as necessary when the drag source enters and exits\nregistered nodes ({@link #onNodeEnter}, {@link #onNodeOut}). If the drag source is not currently over a\nregistered node, it will call {@link #onContainerOver}.",
      "sig" : "(source, e, data)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "source",
          "type" : "Roo.dd.DragSource",
          "desc" : "The drag source that was dragged over this drop zone",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event",
          "isOptional" : false
        },
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "An object containing arbitrary data supplied by the drag source",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "status The CSS class that communicates the drop status back to the source so that the\nunderlying {@link Roo.dd.StatusProxy} can be updated"
        }
      ]
    },
    {
      "name" : "onNodeDrop",
      "type" : "function",
      "desc" : "Called internally when the DropZone determines that a {@link Roo.dd.DragSource} has been dropped onto\nthe drop node.  The default implementation returns false, so it should be overridden to provide the\nappropriate processing of the drop event and return true so that the drag source's repair action does not run.",
      "sig" : "(nodeData, source, e, data)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "nodeData",
          "type" : "Object",
          "desc" : "The custom data associated with the drop node (this is the same value returned from\n{@link #getTargetFromEvent} for this node)",
          "isOptional" : false
        },
        {
          "name" : "source",
          "type" : "Roo.dd.DragSource",
          "desc" : "The drag source that was dragged over this drop zone",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event",
          "isOptional" : false
        },
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "An object containing arbitrary data supplied by the drag source",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "True if the drop was valid, else false"
        }
      ]
    },
    {
      "name" : "notifyOut",
      "type" : "function",
      "desc" : "The function a {@link Roo.dd.DragSource} calls once to notify this drop zone that the source has been dragged\nout of the zone without dropping.  If the drag source is currently over a registered node, the notification\nwill be delegated to {@link #onNodeOut} for node-specific handling, otherwise it will be ignored.",
      "sig" : "(source, e, data)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "source",
          "type" : "Roo.dd.DragSource",
          "desc" : "The drag source that was dragged over this drop target",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event",
          "isOptional" : false
        },
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "An object containing arbitrary data supplied by the drag zone",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "notifyEnter",
      "type" : "function",
      "desc" : "The function a {@link Roo.dd.DragSource} calls once to notify this drop zone that the source is now over\nthe zone.  The default implementation returns this.dropNotAllowed and expects that only registered drop\nnodes can process drag drop operations, so if you need the drop zone itself to be able to process drops\nyou should override this method and provide a custom implementation.",
      "sig" : "(source, e, data)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "source",
          "type" : "Roo.dd.DragSource",
          "desc" : "The drag source that was dragged over this drop zone",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event",
          "isOptional" : false
        },
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "An object containing arbitrary data supplied by the drag source",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "status The CSS class that communicates the drop status back to the source so that the\nunderlying {@link Roo.dd.StatusProxy} can be updated"
        }
      ]
    },
    {
      "name" : "notifyDrop",
      "type" : "function",
      "desc" : "The function a {@link Roo.dd.DragSource} calls once to notify this drop zone that the dragged item has\nbeen dropped on it.  The drag zone will look up the target node based on the event passed in, and if there\nis a node registered for that event, it will delegate to {@link #onNodeDrop} for node-specific handling,\notherwise it will call {@link #onContainerDrop}.",
      "sig" : "(source, e, data)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "source",
          "type" : "Roo.dd.DragSource",
          "desc" : "The drag source that was dragged over this drop zone",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event",
          "isOptional" : false
        },
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "An object containing arbitrary data supplied by the drag source",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "True if the drop was valid, else false"
        }
      ]
    },
    {
      "name" : "onNodeOut",
      "type" : "function",
      "desc" : "Called internally when the DropZone determines that a {@link Roo.dd.DragSource} has been dragged out of\nthe drop node without dropping.  This method has no default implementation and should be overridden to provide\nnode-specific processing if necessary.",
      "sig" : "(nodeData, source, e, data)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "nodeData",
          "type" : "Object",
          "desc" : "The custom data associated with the drop node (this is the same value returned from\n{@link #getTargetFromEvent} for this node)",
          "isOptional" : false
        },
        {
          "name" : "source",
          "type" : "Roo.dd.DragSource",
          "desc" : "The drag source that was dragged over this drop zone",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event",
          "isOptional" : false
        },
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "An object containing arbitrary data supplied by the drag source",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "onContainerOver",
      "type" : "function",
      "desc" : "Called internally while the DropZone determines that a {@link Roo.dd.DragSource} is being dragged over it,\nbut not over any of its registered drop nodes.  The default implementation returns this.dropNotAllowed, so\nit should be overridden to provide the proper feedback if necessary.",
      "sig" : "(source, e, data)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "source",
          "type" : "Roo.dd.DragSource",
          "desc" : "The drag source that was dragged over this drop zone",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event",
          "isOptional" : false
        },
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "An object containing arbitrary data supplied by the drag source",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "status The CSS class that communicates the drop status back to the source so that the\nunderlying {@link Roo.dd.StatusProxy} can be updated"
        }
      ]
    },
    {
      "name" : "getTargetFromEvent",
      "type" : "function",
      "desc" : "Returns a custom data object associated with the DOM node that is the target of the event.  By default\nthis looks up the event target in the {@link Roo.dd.Registry}, although you can override this method to\nprovide your own custom lookup.",
      "sig" : "(e)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Object",
          "desc" : "data The custom data"
        }
      ]
    },
    {
      "name" : "onNodeOver",
      "type" : "function",
      "desc" : "Called internally while the DropZone determines that a {@link Roo.dd.DragSource} is over a drop node\nthat it has registered.  The default implementation returns this.dropNotAllowed, so it should be\noverridden to provide the proper feedback.",
      "sig" : "(nodeData, source, e, data)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "nodeData",
          "type" : "Object",
          "desc" : "The custom data associated with the drop node (this is the same value returned from\n{@link #getTargetFromEvent} for this node)",
          "isOptional" : false
        },
        {
          "name" : "source",
          "type" : "Roo.dd.DragSource",
          "desc" : "The drag source that was dragged over this drop zone",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event",
          "isOptional" : false
        },
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "An object containing arbitrary data supplied by the drag source",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "status The CSS class that communicates the drop status back to the source so that the\nunderlying {@link Roo.dd.StatusProxy} can be updated"
        }
      ]
    },
    {
      "name" : "setHandleElId",
      "type" : "function",
      "desc" : "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation.",
      "sig" : "(id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "",
          "desc" : "{string} the id of the element that will be used to\ninitiate the drag.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "init",
      "type" : "function",
      "desc" : "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass",
      "sig" : "(id, sGroup, config)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "",
          "desc" : "the id of the linked element",
          "isOptional" : false
        },
        {
          "name" : "sGroup",
          "type" : "String",
          "desc" : "the group of related items",
          "isOptional" : false
        },
        {
          "name" : "config",
          "type" : "object",
          "desc" : "configuration attributes",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeInvalidHandleType",
      "type" : "function",
      "desc" : "Unsets an excluded tag name set by addInvalidHandleType",
      "sig" : "(tagName)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "tagName",
          "type" : "string",
          "desc" : "the type of element to unexclude",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "unreg",
      "type" : "function",
      "desc" : "Remove all drag and drop hooks for this element",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "addInvalidHandleType",
      "type" : "function",
      "desc" : "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag.",
      "sig" : "(tagName)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "tagName",
          "type" : "string",
          "desc" : "the type of element to exclude",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "onDragDrop",
      "type" : "function",
      "desc" : "Abstract method called when this item is dropped on another DragDrop\nobj",
      "sig" : "(e, id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mouseup event",
          "isOptional" : false
        },
        {
          "name" : "id",
          "type" : "String|DragDrop[]",
          "desc" : "In POINT mode, the element\nid this was dropped on.  In INTERSECT mode, an array of dd items this\nwas dropped on.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeInvalidHandleId",
      "type" : "function",
      "desc" : "Unsets an invalid handle id",
      "sig" : "(id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "string",
          "desc" : "the id of the element to re-enable",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "onAvailable",
      "type" : "function",
      "desc" : "Override the onAvailable method to do what is needed after the initial\nposition was determined.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "setOuterHandleElId",
      "type" : "function",
      "desc" : "Allows you to set an element outside of the linked element as a drag\nhandle",
      "sig" : "(id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "",
          "desc" : "the id of the element that will be used to initiate the drag",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "onMouseUp",
      "type" : "function",
      "desc" : "Event handler that fires when a drag/drop obj gets a mouseup",
      "sig" : "(e)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mouseup event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "getDragEl",
      "type" : "function",
      "desc" : "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "HTMLElement",
          "desc" : "the html element"
        }
      ]
    },
    {
      "name" : "setYConstraint",
      "type" : "function",
      "desc" : "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis.",
      "sig" : "(iUp, iDown, iTickSize)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "iUp",
          "type" : "int",
          "desc" : "the number of pixels the element can move up",
          "isOptional" : false
        },
        {
          "name" : "iDown",
          "type" : "int",
          "desc" : "the number of pixels the element can move down",
          "isOptional" : false
        },
        {
          "name" : "iTickSize",
          "type" : "int",
          "desc" : "optional parameter for specifying that the\nelement should move iTickSize pixels at a time.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "clearConstraints",
      "type" : "function",
      "desc" : "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "onInvalidDrop",
      "type" : "function",
      "desc" : "Abstract method called when this item is dropped on an area with no\ndrop target",
      "sig" : "(e)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mouseup event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addInvalidHandleId",
      "type" : "function",
      "desc" : "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag",
      "sig" : "(id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "string",
          "desc" : "the element id of the element you wish to ignore",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeInvalidHandleClass",
      "type" : "function",
      "desc" : "Unsets an invalid css class",
      "sig" : "(cssClass)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "cssClass",
          "type" : "string",
          "desc" : "the class of the element(s) you wish to\nre-enable",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "onDragOut",
      "type" : "function",
      "desc" : "Abstract method called when we are no longer hovering over an element",
      "sig" : "(e, id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mousemove event",
          "isOptional" : false
        },
        {
          "name" : "id",
          "type" : "String|DragDrop[]",
          "desc" : "In POINT mode, the element\nid this was hovering over.  In INTERSECT mode, an array of dd items\nthat the mouse is no longer over.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "setDragElId",
      "type" : "function",
      "desc" : "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag",
      "sig" : "(id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "",
          "desc" : "{string} the id of the element that will be used to initiate the drag",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "endDrag",
      "type" : "function",
      "desc" : "Fired when we are done dragging the object",
      "sig" : "(e)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mouseup event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "getEl",
      "type" : "function",
      "desc" : "Returns a reference to the linked element",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "HTMLElement",
          "desc" : "the html element"
        }
      ]
    },
    {
      "name" : "onDrag",
      "type" : "function",
      "desc" : "Abstract method called during the onMouseMove event while dragging an\nobject.",
      "sig" : "(e)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mousemove event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "onDragEnter",
      "type" : "function",
      "desc" : "Abstract method called when this element fist begins hovering over\nanother DragDrop obj",
      "sig" : "(e, id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mousemove event",
          "isOptional" : false
        },
        {
          "name" : "id",
          "type" : "String|DragDrop[]",
          "desc" : "In POINT mode, the element\nid this is hovering over.  In INTERSECT mode, an array of one or more\ndragdrop items being hovered over.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "lock",
      "type" : "function",
      "desc" : "Lock this instance",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "onMouseDown",
      "type" : "function",
      "desc" : "Event handler that fires when a drag/drop obj gets a mousedown",
      "sig" : "(e)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mousedown event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "applyConfig",
      "type" : "function",
      "desc" : "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "unlock",
      "type" : "function",
      "desc" : "Unlock this instace",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "isTarget",
      "type" : "function",
      "desc" : "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "setInitPosition",
      "type" : "function",
      "desc" : "Stores the initial placement of the linked element.",
      "sig" : "(diffX, diffY)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "diffX",
          "type" : "int",
          "desc" : "the X offset, default 0",
          "isOptional" : false
        },
        {
          "name" : "diffY",
          "type" : "int",
          "desc" : "the Y offset, default 0",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "initTarget",
      "type" : "function",
      "desc" : "Initializes Targeting functionality only... the object does not\nget a mousedown handler.",
      "sig" : "(id, sGroup, config)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "",
          "desc" : "the id of the linked element",
          "isOptional" : false
        },
        {
          "name" : "sGroup",
          "type" : "String",
          "desc" : "the group of related items",
          "isOptional" : false
        },
        {
          "name" : "config",
          "type" : "object",
          "desc" : "configuration attributes",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addToGroup",
      "type" : "function",
      "desc" : "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed.",
      "sig" : "(sGroup)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "sGroup",
          "type" : "",
          "desc" : "{string} the name of the group",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "onDragOver",
      "type" : "function",
      "desc" : "Abstract method called when this element is hovering over another\nDragDrop obj",
      "sig" : "(e, id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mousemove event",
          "isOptional" : false
        },
        {
          "name" : "id",
          "type" : "String|DragDrop[]",
          "desc" : "In POINT mode, the element\nid this is hovering over.  In INTERSECT mode, an array of dd items\nbeing hovered over.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "toString",
      "type" : "function",
      "desc" : "toString method",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "string",
          "desc" : "string representation of the dd obj"
        }
      ]
    },
    {
      "name" : "setPadding",
      "type" : "function",
      "desc" : "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.",
      "sig" : "(iTop, iRight, iBot, iLeft)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "iTop",
          "type" : "int",
          "desc" : "Top pad",
          "isOptional" : false
        },
        {
          "name" : "iRight",
          "type" : "int",
          "desc" : "Right pad",
          "isOptional" : false
        },
        {
          "name" : "iBot",
          "type" : "int",
          "desc" : "Bot pad",
          "isOptional" : false
        },
        {
          "name" : "iLeft",
          "type" : "int",
          "desc" : "Left pad",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeFromGroup",
      "type" : "function",
      "desc" : "Remove's this instance from the supplied interaction group",
      "sig" : "(sGroup)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "sGroup",
          "type" : "string",
          "desc" : "The group to drop",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addInvalidHandleClass",
      "type" : "function",
      "desc" : "Lets you specify a css class of elements that will not initiate a drag",
      "sig" : "(cssClass)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "cssClass",
          "type" : "string",
          "desc" : "the class of the elements you wish to ignore",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "startDrag",
      "type" : "function",
      "desc" : "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met.",
      "sig" : "(X, Y)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "X",
          "type" : "int",
          "desc" : "click location",
          "isOptional" : false
        },
        {
          "name" : "Y",
          "type" : "int",
          "desc" : "click location",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "padding",
      "type" : "function",
      "desc" : "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "resetConstraints",
      "type" : "function",
      "desc" : "resetConstraints must be called if you manually reposition a dd element.",
      "sig" : "(maintainOffset)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "maintainOffset",
          "type" : "boolean",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "clearTicks",
      "type" : "function",
      "desc" : "Clears any tick interval defined for this instance",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "isLocked",
      "type" : "function",
      "desc" : "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "boolean",
          "desc" : "true if this obj or all drag/drop is locked, else\nfalse"
        }
      ]
    },
    {
      "name" : "setXConstraint",
      "type" : "function",
      "desc" : "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis.",
      "sig" : "(iLeft, iRight, iTickSize)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "iLeft",
          "type" : "int",
          "desc" : "the number of pixels the element can move to the left",
          "isOptional" : false
        },
        {
          "name" : "iRight",
          "type" : "int",
          "desc" : "the number of pixels the element can move to the\nright",
          "isOptional" : false
        },
        {
          "name" : "iTickSize",
          "type" : "int",
          "desc" : "optional parameter for specifying that the\nelement\nshould move iTickSize pixels at a time.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "isValidHandleChild",
      "type" : "function",
      "desc" : "Checks the tag exclusion list to see if this click should be ignored",
      "sig" : "(node)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "node",
          "type" : "HTMLElement",
          "desc" : "the HTMLElement to evaluate",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "boolean",
          "desc" : "true if this is a valid tag type, false if not"
        }
      ]
    },
    {
      "name" : "purgeListeners",
      "type" : "function",
      "desc" : "Removes all listeners for this object",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "on",
      "type" : "function",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "sig" : "(eventName, handler, scope, options)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "un",
      "type" : "function",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "sig" : "(eventName, handler, scope)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addEvents",
      "type" : "function",
      "desc" : "Used to define events on this Observable",
      "sig" : "(object)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "releaseCapture",
      "type" : "function",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "sig" : "(o)",
      "static" : true,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeListener",
      "type" : "function",
      "desc" : "Removes a listener",
      "sig" : "(eventName, handler, scope)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "fireEvent",
      "type" : "function",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "sig" : "(eventName, args)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "returns false if any of the handlers return false otherwise it returns true"
        }
      ]
    },
    {
      "name" : "hasListener",
      "type" : "function",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "sig" : "(eventName)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "True if the event is being listened for, else false"
        }
      ]
    },
    {
      "name" : "capture",
      "type" : "function",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "sig" : "(o, fn, scope)",
      "static" : true,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture",
          "isOptional" : false
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addListener",
      "type" : "function",
      "desc" : "Appends an event handler to this component",
      "sig" : "(eventName, handler, scope, options)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>",
          "isOptional" : false
        }
      ],
      "returns" : []
    }
  ],
  "events" : [
    {
      "name" : "out",
      "type" : "function",
      "desc" : "The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the source has been dragged\nout of the target without dropping.  This default implementation simply removes the CSS class specified by\noverClass (if any) from the drop element.",
      "sig" : "function (source, e, data)\n{\n\n}",
      "memberOf" : "Roo.dd.DropTarget",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "source",
          "type" : "Roo.dd.DragSource",
          "desc" : "The drag source that was dragged over this drop target",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event",
          "isOptional" : false
        },
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "An object containing arbitrary data supplied by the drag source",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "over",
      "type" : "function",
      "desc" : "The function a {@link Roo.dd.DragSource} calls continuously while it is being dragged over the target.\nThis method will be called on every mouse movement while the drag source is over the drop target.\nThis default implementation simply returns the dropAllowed config value.\n\nIMPORTANT : it should set  this.valid to true|false",
      "sig" : "function (source, e, data)\n{\n\n}",
      "memberOf" : "Roo.dd.DropTarget",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "source",
          "type" : "Roo.dd.DragSource",
          "desc" : "The drag source that was dragged over this drop target",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event",
          "isOptional" : false
        },
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "An object containing arbitrary data supplied by the drag source",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "enter",
      "type" : "function",
      "desc" : "The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the source is now over the\ntarget.  This default implementation adds the CSS class specified by overClass (if any) to the drop element\nand returns the dropAllowed config value.  This method should be overridden if drop validation is required.\n\nIMPORTANT : it should set  this.valid to true|false",
      "sig" : "function (source, e, data)\n{\n\n}",
      "memberOf" : "Roo.dd.DropTarget",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "source",
          "type" : "Roo.dd.DragSource",
          "desc" : "The drag source that was dragged over this drop target",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event",
          "isOptional" : false
        },
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "An object containing arbitrary data supplied by the drag source",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "drop",
      "type" : "function",
      "desc" : "The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the dragged item has\nbeen dropped on it.  This method has no default implementation and returns false, so you must provide an\nimplementation that does something to process the drop event and returns true so that the drag source's\nrepair action does not run.\n\nIMPORTANT : it should set this.success",
      "sig" : "function (source, e, data)\n{\n\n}",
      "memberOf" : "Roo.dd.DropTarget",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "source",
          "type" : "Roo.dd.DragSource",
          "desc" : "The drag source that was dragged over this drop target",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event",
          "isOptional" : false
        },
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "An object containing arbitrary data supplied by the drag source",
          "isOptional" : false
        }
      ],
      "returns" : []
    }
  ]
}