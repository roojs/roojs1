{
  "name" : "Roo.dd.DragZone",
  "augments" : [
    "Roo.dd.DragSource",
    "Roo.dd.DDProxy",
    "Roo.dd.DD",
    "Roo.dd.DragDrop",
    "Roo.util.Observable"
  ],
  "desc" : "This class provides a container DD instance that proxies for multiple child node sources.<br />\nBy default, this class requires that draggable child nodes are registered with {@link Roo.dd.Registry}.",
  "isSingleton" : false,
  "isStatic" : false,
  "isBuiltin" : false,
  "memberOf" : "DragZone",
  "example" : "",
  "deprecated" : "",
  "since" : "",
  "see" : "",
  "params" : [
    {
      "name" : "el",
      "type" : "String/HTMLElement/Element",
      "desc" : "The container element",
      "isOptional" : false
    },
    {
      "name" : "config",
      "type" : "Object",
      "desc" : "",
      "isOptional" : false
    }
  ],
  "returns" : [],
  "throws" : "",
  "requires" : "",
  "config" : [
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable"
    },
    {
      "name" : "dropNotAllowed",
      "type" : "String",
      "desc" : "The CSS class returned to the drag source when drop is not allowed (defaults to \"x-dd-drop-nodrop\").",
      "memberOf" : "Roo.dd.DragSource"
    },
    {
      "name" : "hlColor",
      "type" : "String",
      "desc" : "The color to use when visually highlighting the drag source in the afterRepair\nmethod after a failed drop (defaults to \"c3daf9\" - light blue)",
      "memberOf" : ""
    },
    {
      "name" : "dropAllowed",
      "type" : "String",
      "desc" : "The CSS class returned to the drag source when drop is allowed (defaults to \"x-dd-drop-ok\").",
      "memberOf" : "Roo.dd.DragSource"
    },
    {
      "name" : "containerScroll",
      "type" : "Boolean",
      "desc" : "True to register this container with the Scrollmanager\nfor auto scrolling during drag operations.",
      "memberOf" : ""
    }
  ],
  "methods" : [
    {
      "name" : "getRepairXY",
      "type" : "function",
      "desc" : "Called before a repair of an invalid drop to get the XY to animate to. By default returns\nthe XY of this.dragData.ddel",
      "sig" : "(e)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "EventObject",
          "desc" : "The mouse up event",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Array",
          "desc" : "The xy location (e.g. [100, 200])"
        }
      ]
    },
    {
      "name" : "afterRepair",
      "type" : "function",
      "desc" : "Called after a repair of an invalid drop. By default, highlights this.dragData.ddel",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "getDragData",
      "type" : "function",
      "desc" : "Called when a mousedown occurs in this container. Looks in {@link Roo.dd.Registry}\nfor a valid target to drag based on the mouse down. Override this method\nto provide your own lookup logic (e.g. finding a child by class name). Make sure your returned\nobject has a \"ddel\" attribute (with an HTML Element) for other functions to work.",
      "sig" : "(e)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "EventObject",
          "desc" : "The mouse down event",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Object",
          "desc" : "The dragData"
        }
      ]
    },
    {
      "name" : "onInitDrag",
      "type" : "function",
      "desc" : "Called once drag threshold has been reached to initialize the proxy element. By default, it clones the\nthis.dragData.ddel",
      "sig" : "(x, y)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "x",
          "type" : "Number",
          "desc" : "The x position of the click on the dragged object",
          "isOptional" : false
        },
        {
          "name" : "y",
          "type" : "Number",
          "desc" : "The y position of the click on the dragged object",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "true to continue the drag, false to cancel"
        }
      ]
    },
    {
      "name" : "beforeDragEnter",
      "type" : "function",
      "desc" : "An empty function by default, but provided so that you can perform a custom action\nbefore the dragged item enters the drop target and optionally cancel the onDragEnter.",
      "sig" : "(target, e, id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragSource",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "target",
          "type" : "Roo.dd.DragDrop",
          "desc" : "The drop target",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event object",
          "isOptional" : false
        },
        {
          "name" : "id",
          "type" : "String",
          "desc" : "The id of the dragged element",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "isValid True if the drag event is valid, else false to cancel"
        }
      ]
    },
    {
      "name" : "hideProxy",
      "type" : "function",
      "desc" : "Hides the drag source's {@link Roo.dd.StatusProxy}",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragSource",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "beforeDragOut",
      "type" : "function",
      "desc" : "An empty function by default, but provided so that you can perform a custom action before the dragged\nitem is dragged out of the target without dropping, and optionally cancel the onDragOut.",
      "sig" : "(target, e, id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragSource",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "target",
          "type" : "Roo.dd.DragDrop",
          "desc" : "The drop target",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event object",
          "isOptional" : false
        },
        {
          "name" : "id",
          "type" : "String",
          "desc" : "The id of the dragged element",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "isValid True if the drag event is valid, else false to cancel"
        }
      ]
    },
    {
      "name" : "beforeInvalidDrop",
      "type" : "function",
      "desc" : "An empty function by default, but provided so that you can perform a custom action after an invalid\ndrop has occurred.",
      "sig" : "(target, e, id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragSource",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "target",
          "type" : "Roo.dd.DragDrop",
          "desc" : "The drop target",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event object",
          "isOptional" : false
        },
        {
          "name" : "id",
          "type" : "String",
          "desc" : "The id of the dragged element",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "isValid True if the invalid drop should proceed, else false to cancel"
        }
      ]
    },
    {
      "name" : "beforeDragDrop",
      "type" : "function",
      "desc" : "An empty function by default, but provided so that you can perform a custom action before the dragged\nitem is dropped onto the target and optionally cancel the onDragDrop.",
      "sig" : "(target, e, id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragSource",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "target",
          "type" : "Roo.dd.DragDrop",
          "desc" : "The drop target",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event object",
          "isOptional" : false
        },
        {
          "name" : "id",
          "type" : "String",
          "desc" : "The id of the dragged element",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "isValid True if the drag drop event is valid, else false to cancel"
        }
      ]
    },
    {
      "name" : "getProxy",
      "type" : "function",
      "desc" : "Returns the drag source's underlying {@link Roo.dd.StatusProxy}",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragSource",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.dd.StatusProxy",
          "desc" : "proxy The StatusProxy"
        }
      ]
    },
    {
      "name" : "onBeforeDrag",
      "type" : "function",
      "desc" : "An empty function by default, but provided so that you can perform a custom action before the initial\ndrag event begins and optionally cancel it.",
      "sig" : "(data, e)",
      "static" : false,
      "memberOf" : "Roo.dd.DragSource",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "An object containing arbitrary data to be shared with drop targets",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event object",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "isValid True if the drag event is valid, else false to cancel"
        }
      ]
    },
    {
      "name" : "onStartDrag",
      "type" : "function",
      "desc" : "An empty function by default, but provided so that you can perform a custom action once the initial\ndrag event has begun.  The drag cannot be canceled from this function.",
      "sig" : "(x, y)",
      "static" : false,
      "memberOf" : "Roo.dd.DragSource",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "x",
          "type" : "Number",
          "desc" : "The x position of the click on the dragged object",
          "isOptional" : false
        },
        {
          "name" : "y",
          "type" : "Number",
          "desc" : "The y position of the click on the dragged object",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "beforeDragOver",
      "type" : "function",
      "desc" : "An empty function by default, but provided so that you can perform a custom action\nwhile the dragged item is over the drop target and optionally cancel the onDragOver.",
      "sig" : "(target, e, id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragSource",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "target",
          "type" : "Roo.dd.DragDrop",
          "desc" : "The drop target",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event object",
          "isOptional" : false
        },
        {
          "name" : "id",
          "type" : "String",
          "desc" : "The id of the dragged element",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "isValid True if the drag event is valid, else false to cancel"
        }
      ]
    },
    {
      "name" : "initFrame",
      "type" : "function",
      "desc" : "Initialization for the drag frame element.  Must be called in the\nconstructor of all subclasses",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DDProxy",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "createFrame",
      "type" : "function",
      "desc" : "Creates the proxy element if it does not yet exist",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DDProxy",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "alignElWithMouse",
      "type" : "function",
      "desc" : "Sets the element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is.",
      "sig" : "(el, iPageX, iPageY)",
      "static" : false,
      "memberOf" : "Roo.dd.DD",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "el",
          "type" : "HTMLElement",
          "desc" : "the element to move",
          "isOptional" : false
        },
        {
          "name" : "iPageX",
          "type" : "int",
          "desc" : "the X coordinate of the mousedown or drag event",
          "isOptional" : false
        },
        {
          "name" : "iPageY",
          "type" : "int",
          "desc" : "the Y coordinate of the mousedown or drag event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "setDelta",
      "type" : "function",
      "desc" : "Sets the pointer offset.  You can call this directly to force the\noffset to be in a particular location (e.g., pass in 0,0 to set it\nto the center of the object)",
      "sig" : "(iDeltaX, iDeltaY)",
      "static" : false,
      "memberOf" : "Roo.dd.DD",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "iDeltaX",
          "type" : "int",
          "desc" : "the distance from the left",
          "isOptional" : false
        },
        {
          "name" : "iDeltaY",
          "type" : "int",
          "desc" : "the distance from the top",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "autoOffset",
      "type" : "function",
      "desc" : "Sets the pointer offset to the distance between the linked element's top\nleft corner and the location the element was clicked",
      "sig" : "(iPageX, iPageY)",
      "static" : false,
      "memberOf" : "Roo.dd.DD",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "iPageX",
          "type" : "int",
          "desc" : "the X coordinate of the click",
          "isOptional" : false
        },
        {
          "name" : "iPageY",
          "type" : "int",
          "desc" : "the Y coordinate of the click",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "setDragElPos",
      "type" : "function",
      "desc" : "Sets the drag element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is.",
      "sig" : "(iPageX, iPageY)",
      "static" : false,
      "memberOf" : "Roo.dd.DD",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "iPageX",
          "type" : "int",
          "desc" : "the X coordinate of the mousedown or drag event",
          "isOptional" : false
        },
        {
          "name" : "iPageY",
          "type" : "int",
          "desc" : "the Y coordinate of the mousedown or drag event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "cachePosition",
      "type" : "function",
      "desc" : "Saves the most recent position so that we can reset the constraints and\ntick marks on-demand.  We need to know this so that we can calculate the\nnumber of pixels the element is offset from its original position.",
      "sig" : "(iPageX, iPageY)",
      "static" : false,
      "memberOf" : "Roo.dd.DD",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "iPageX",
          "type" : "",
          "desc" : "the current x position (optional, this just makes it so we\ndon't have to look it up again)",
          "isOptional" : false
        },
        {
          "name" : "iPageY",
          "type" : "",
          "desc" : "the current y position (optional, this just makes it so we\ndon't have to look it up again)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "setHandleElId",
      "type" : "function",
      "desc" : "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation.",
      "sig" : "(id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "",
          "desc" : "{string} the id of the element that will be used to\ninitiate the drag.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "init",
      "type" : "function",
      "desc" : "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass",
      "sig" : "(id, sGroup, config)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "",
          "desc" : "the id of the linked element",
          "isOptional" : false
        },
        {
          "name" : "sGroup",
          "type" : "String",
          "desc" : "the group of related items",
          "isOptional" : false
        },
        {
          "name" : "config",
          "type" : "object",
          "desc" : "configuration attributes",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeInvalidHandleType",
      "type" : "function",
      "desc" : "Unsets an excluded tag name set by addInvalidHandleType",
      "sig" : "(tagName)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "tagName",
          "type" : "string",
          "desc" : "the type of element to unexclude",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "unreg",
      "type" : "function",
      "desc" : "Remove all drag and drop hooks for this element",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "addInvalidHandleType",
      "type" : "function",
      "desc" : "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag.",
      "sig" : "(tagName)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "tagName",
          "type" : "string",
          "desc" : "the type of element to exclude",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "onDragDrop",
      "type" : "function",
      "desc" : "Abstract method called when this item is dropped on another DragDrop\nobj",
      "sig" : "(e, id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mouseup event",
          "isOptional" : false
        },
        {
          "name" : "id",
          "type" : "String|DragDrop[]",
          "desc" : "In POINT mode, the element\nid this was dropped on.  In INTERSECT mode, an array of dd items this\nwas dropped on.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeInvalidHandleId",
      "type" : "function",
      "desc" : "Unsets an invalid handle id",
      "sig" : "(id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "string",
          "desc" : "the id of the element to re-enable",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "onAvailable",
      "type" : "function",
      "desc" : "Override the onAvailable method to do what is needed after the initial\nposition was determined.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "setOuterHandleElId",
      "type" : "function",
      "desc" : "Allows you to set an element outside of the linked element as a drag\nhandle",
      "sig" : "(id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "",
          "desc" : "the id of the element that will be used to initiate the drag",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "onMouseUp",
      "type" : "function",
      "desc" : "Event handler that fires when a drag/drop obj gets a mouseup",
      "sig" : "(e)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mouseup event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "getDragEl",
      "type" : "function",
      "desc" : "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "HTMLElement",
          "desc" : "the html element"
        }
      ]
    },
    {
      "name" : "setYConstraint",
      "type" : "function",
      "desc" : "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis.",
      "sig" : "(iUp, iDown, iTickSize)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "iUp",
          "type" : "int",
          "desc" : "the number of pixels the element can move up",
          "isOptional" : false
        },
        {
          "name" : "iDown",
          "type" : "int",
          "desc" : "the number of pixels the element can move down",
          "isOptional" : false
        },
        {
          "name" : "iTickSize",
          "type" : "int",
          "desc" : "optional parameter for specifying that the\nelement should move iTickSize pixels at a time.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "clearConstraints",
      "type" : "function",
      "desc" : "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "onInvalidDrop",
      "type" : "function",
      "desc" : "Abstract method called when this item is dropped on an area with no\ndrop target",
      "sig" : "(e)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mouseup event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addInvalidHandleId",
      "type" : "function",
      "desc" : "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag",
      "sig" : "(id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "string",
          "desc" : "the element id of the element you wish to ignore",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeInvalidHandleClass",
      "type" : "function",
      "desc" : "Unsets an invalid css class",
      "sig" : "(cssClass)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "cssClass",
          "type" : "string",
          "desc" : "the class of the element(s) you wish to\nre-enable",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "onDragOut",
      "type" : "function",
      "desc" : "Abstract method called when we are no longer hovering over an element",
      "sig" : "(e, id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mousemove event",
          "isOptional" : false
        },
        {
          "name" : "id",
          "type" : "String|DragDrop[]",
          "desc" : "In POINT mode, the element\nid this was hovering over.  In INTERSECT mode, an array of dd items\nthat the mouse is no longer over.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "setDragElId",
      "type" : "function",
      "desc" : "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag",
      "sig" : "(id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "",
          "desc" : "{string} the id of the element that will be used to initiate the drag",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "endDrag",
      "type" : "function",
      "desc" : "Fired when we are done dragging the object",
      "sig" : "(e)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mouseup event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "getEl",
      "type" : "function",
      "desc" : "Returns a reference to the linked element",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "HTMLElement",
          "desc" : "the html element"
        }
      ]
    },
    {
      "name" : "onDrag",
      "type" : "function",
      "desc" : "Abstract method called during the onMouseMove event while dragging an\nobject.",
      "sig" : "(e)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mousemove event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "onDragEnter",
      "type" : "function",
      "desc" : "Abstract method called when this element fist begins hovering over\nanother DragDrop obj",
      "sig" : "(e, id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mousemove event",
          "isOptional" : false
        },
        {
          "name" : "id",
          "type" : "String|DragDrop[]",
          "desc" : "In POINT mode, the element\nid this is hovering over.  In INTERSECT mode, an array of one or more\ndragdrop items being hovered over.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "lock",
      "type" : "function",
      "desc" : "Lock this instance",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "onMouseDown",
      "type" : "function",
      "desc" : "Event handler that fires when a drag/drop obj gets a mousedown",
      "sig" : "(e)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mousedown event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "applyConfig",
      "type" : "function",
      "desc" : "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "unlock",
      "type" : "function",
      "desc" : "Unlock this instace",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "isTarget",
      "type" : "function",
      "desc" : "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "setInitPosition",
      "type" : "function",
      "desc" : "Stores the initial placement of the linked element.",
      "sig" : "(diffX, diffY)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "diffX",
          "type" : "int",
          "desc" : "the X offset, default 0",
          "isOptional" : false
        },
        {
          "name" : "diffY",
          "type" : "int",
          "desc" : "the Y offset, default 0",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "initTarget",
      "type" : "function",
      "desc" : "Initializes Targeting functionality only... the object does not\nget a mousedown handler.",
      "sig" : "(id, sGroup, config)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "",
          "desc" : "the id of the linked element",
          "isOptional" : false
        },
        {
          "name" : "sGroup",
          "type" : "String",
          "desc" : "the group of related items",
          "isOptional" : false
        },
        {
          "name" : "config",
          "type" : "object",
          "desc" : "configuration attributes",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addToGroup",
      "type" : "function",
      "desc" : "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed.",
      "sig" : "(sGroup)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "sGroup",
          "type" : "",
          "desc" : "{string} the name of the group",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "onDragOver",
      "type" : "function",
      "desc" : "Abstract method called when this element is hovering over another\nDragDrop obj",
      "sig" : "(e, id)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the mousemove event",
          "isOptional" : false
        },
        {
          "name" : "id",
          "type" : "String|DragDrop[]",
          "desc" : "In POINT mode, the element\nid this is hovering over.  In INTERSECT mode, an array of dd items\nbeing hovered over.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "toString",
      "type" : "function",
      "desc" : "toString method",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "string",
          "desc" : "string representation of the dd obj"
        }
      ]
    },
    {
      "name" : "setPadding",
      "type" : "function",
      "desc" : "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.",
      "sig" : "(iTop, iRight, iBot, iLeft)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "iTop",
          "type" : "int",
          "desc" : "Top pad",
          "isOptional" : false
        },
        {
          "name" : "iRight",
          "type" : "int",
          "desc" : "Right pad",
          "isOptional" : false
        },
        {
          "name" : "iBot",
          "type" : "int",
          "desc" : "Bot pad",
          "isOptional" : false
        },
        {
          "name" : "iLeft",
          "type" : "int",
          "desc" : "Left pad",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeFromGroup",
      "type" : "function",
      "desc" : "Remove's this instance from the supplied interaction group",
      "sig" : "(sGroup)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "sGroup",
          "type" : "string",
          "desc" : "The group to drop",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addInvalidHandleClass",
      "type" : "function",
      "desc" : "Lets you specify a css class of elements that will not initiate a drag",
      "sig" : "(cssClass)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "cssClass",
          "type" : "string",
          "desc" : "the class of the elements you wish to ignore",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "startDrag",
      "type" : "function",
      "desc" : "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met.",
      "sig" : "(X, Y)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "X",
          "type" : "int",
          "desc" : "click location",
          "isOptional" : false
        },
        {
          "name" : "Y",
          "type" : "int",
          "desc" : "click location",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "padding",
      "type" : "function",
      "desc" : "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "resetConstraints",
      "type" : "function",
      "desc" : "resetConstraints must be called if you manually reposition a dd element.",
      "sig" : "(maintainOffset)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "maintainOffset",
          "type" : "boolean",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "clearTicks",
      "type" : "function",
      "desc" : "Clears any tick interval defined for this instance",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "isLocked",
      "type" : "function",
      "desc" : "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "boolean",
          "desc" : "true if this obj or all drag/drop is locked, else\nfalse"
        }
      ]
    },
    {
      "name" : "setXConstraint",
      "type" : "function",
      "desc" : "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis.",
      "sig" : "(iLeft, iRight, iTickSize)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "iLeft",
          "type" : "int",
          "desc" : "the number of pixels the element can move to the left",
          "isOptional" : false
        },
        {
          "name" : "iRight",
          "type" : "int",
          "desc" : "the number of pixels the element can move to the\nright",
          "isOptional" : false
        },
        {
          "name" : "iTickSize",
          "type" : "int",
          "desc" : "optional parameter for specifying that the\nelement\nshould move iTickSize pixels at a time.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "isValidHandleChild",
      "type" : "function",
      "desc" : "Checks the tag exclusion list to see if this click should be ignored",
      "sig" : "(node)",
      "static" : false,
      "memberOf" : "Roo.dd.DragDrop",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "node",
          "type" : "HTMLElement",
          "desc" : "the HTMLElement to evaluate",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "boolean",
          "desc" : "true if this is a valid tag type, false if not"
        }
      ]
    },
    {
      "name" : "purgeListeners",
      "type" : "function",
      "desc" : "Removes all listeners for this object",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "on",
      "type" : "function",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "sig" : "(eventName, handler, scope, options)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "un",
      "type" : "function",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "sig" : "(eventName, handler, scope)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addEvents",
      "type" : "function",
      "desc" : "Used to define events on this Observable",
      "sig" : "(object)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "releaseCapture",
      "type" : "function",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "sig" : "(o)",
      "static" : true,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeListener",
      "type" : "function",
      "desc" : "Removes a listener",
      "sig" : "(eventName, handler, scope)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "fireEvent",
      "type" : "function",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "sig" : "(eventName, args)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "returns false if any of the handlers return false otherwise it returns true"
        }
      ]
    },
    {
      "name" : "hasListener",
      "type" : "function",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "sig" : "(eventName)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "True if the event is being listened for, else false"
        }
      ]
    },
    {
      "name" : "capture",
      "type" : "function",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "sig" : "(o, fn, scope)",
      "static" : true,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture",
          "isOptional" : false
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addListener",
      "type" : "function",
      "desc" : "Appends an event handler to this component",
      "sig" : "(eventName, handler, scope, options)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>",
          "isOptional" : false
        }
      ],
      "returns" : []
    }
  ],
  "events" : []
}