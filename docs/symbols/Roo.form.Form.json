{
  "name" : "Roo.form.Form",
  "augments" : [
    "Roo.form.BasicForm",
    "Roo.util.Observable"
  ],
  "childClasses" : {  },
  "tree_children" : [
    "Roo.form.Column",
    "Roo.form.FieldSet",
    "Roo.form.Row",
    "Roo.form.Field",
    "Roo.form.Checkbox",
    "Roo.form.ComboBox",
    "Roo.form.ComboBoxArray",
    "Roo.form.ComboCheck",
    "Roo.form.ComboNested",
    "Roo.form.DateField",
    "Roo.form.DayPicker",
    "Roo.form.DisplayField",
    "Roo.form.FCKeditor",
    "Roo.form.GridField",
    "Roo.form.Hidden",
    "Roo.form.HtmlEditor",
    "Roo.form.MonthField",
    "Roo.form.NumberField",
    "Roo.form.Radio",
    "Roo.form.Select",
    "Roo.form.Signature",
    "Roo.form.TextArea",
    "Roo.form.TextField",
    "Roo.form.TriggerField",
    "Roo.Button",
    "Roo.SplitButton",
    "Roo.Toolbar.Button",
    "Roo.Toolbar.SplitButton",
    "Roo.form.TextItem"
  ],
  "tree_parent" : [],
  "desc" : "Adds the ability to dynamically render forms with JavaScript to {@link Roo.form.BasicForm}.",
  "isSingleton" : false,
  "isStatic" : false,
  "isBuiltin" : false,
  "isAbstract" : false,
  "isBuilderTop" : false,
  "memberOf" : "Form",
  "example" : "",
  "deprecated" : "",
  "since" : "",
  "see" : "",
  "params" : [
    {
      "name" : "config",
      "type" : "Object",
      "desc" : "Configuration options",
      "isOptional" : false
    }
  ],
  "returns" : [],
  "throws" : "",
  "requires" : "",
  "config" : [
    {
      "name" : "labelAlign",
      "type" : "String",
      "desc" : "Valid values are \"left,\" \"top\" and \"right\" (defaults to \"left\").\nThis property cascades to child containers if not set.",
      "memberOf" : "Roo.form.Form"
    },
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable"
    },
    {
      "name" : "formData",
      "type" : "boolean|FormData",
      "desc" : "- true to use new 'FormData' post, or set to a new FormData({dom form}) Object, if\nsending a formdata with extra parameters - eg uploaded elements.",
      "memberOf" : "Roo.form.Form"
    },
    {
      "name" : "monitorValid",
      "type" : "Boolean",
      "desc" : "If true the form monitors its valid state <b>client-side</b> and\nfires a looping event with that state. This is required to bind buttons to the valid\nstate using the config value formBind:true on the button.",
      "memberOf" : "Roo.form.Form"
    },
    {
      "name" : "fileUpload",
      "type" : "Boolean",
      "desc" : "Set to true if this form is a file upload.",
      "memberOf" : "Roo.form.BasicForm"
    },
    {
      "name" : "progressUrl",
      "type" : "String",
      "desc" : "- Url to return progress data",
      "memberOf" : "Roo.form.Form"
    },
    {
      "name" : "buttons[]",
      "type" : "Roo.Button",
      "desc" : "buttons at bottom of form",
      "memberOf" : "Roo.form.Form"
    },
    {
      "name" : "minButtonWidth",
      "type" : "Number",
      "desc" : "Minimum width of all buttons in pixels (defaults to 75)",
      "memberOf" : "Roo.form.Form"
    },
    {
      "name" : "buttonAlign",
      "type" : "String",
      "desc" : "Valid values are \"left,\" \"center\" and \"right\" (defaults to \"center\")",
      "memberOf" : "Roo.form.Form"
    },
    {
      "name" : "method",
      "type" : "String",
      "desc" : "The request method to use (GET or POST) for form actions if one isn't supplied in the action options.",
      "memberOf" : "Roo.form.BasicForm"
    },
    {
      "name" : "errorMask",
      "type" : "Boolean",
      "desc" : "e) default false",
      "memberOf" : "Roo.form.BasicForm"
    },
    {
      "name" : "itemCls",
      "type" : "String",
      "desc" : "A css class to apply to the x-form-item of fields. This property cascades to child containers.",
      "memberOf" : "Roo.form.Form"
    },
    {
      "name" : "labelWidth",
      "type" : "Number",
      "desc" : "The width of labels. This property cascades to child containers.",
      "memberOf" : "Roo.form.Form"
    },
    {
      "name" : "timeout",
      "type" : "Number",
      "desc" : "Timeout for form actions in seconds (default is 30 seconds).",
      "memberOf" : "Roo.form.BasicForm"
    },
    {
      "name" : "monitorPoll",
      "type" : "Number",
      "desc" : "The milliseconds to poll valid state, ignored if monitorValid is not true (defaults to 200)",
      "memberOf" : "Roo.form.Form"
    },
    {
      "name" : "baseParams",
      "type" : "Object",
      "desc" : "Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.",
      "memberOf" : "Roo.form.BasicForm"
    },
    {
      "name" : "trackResetOnLoad",
      "type" : "Boolean",
      "desc" : "If set to true, form.reset() resets to the last loaded\nor setValues() data instead of when the form was first created.",
      "memberOf" : "Roo.form.BasicForm"
    },
    {
      "name" : "reader",
      "type" : "DataReader",
      "desc" : "An Roo.data.DataReader (e.g. {@link Roo.data.XmlReader}) to be used to read data when executing \"load\" actions.\nThis is optional as there is built-in support for processing JSON.",
      "memberOf" : "Roo.form.BasicForm"
    },
    {
      "name" : "errorReader",
      "type" : "DataReader",
      "desc" : "An Roo.data.DataReader (e.g. {@link Roo.data.XmlReader}) to be used to read data when reading validation errors on \"submit\" actions.\nThis is completely optional as there is built-in support for processing JSON.",
      "memberOf" : "Roo.form.BasicForm"
    },
    {
      "name" : "url",
      "type" : "String",
      "desc" : "The URL to use for form actions if one isn't supplied in the action options.",
      "memberOf" : "Roo.form.BasicForm"
    },
    {
      "name" : "maskOffset",
      "type" : "Number",
      "desc" : "Default 100",
      "memberOf" : "Roo.form.BasicForm"
    }
  ],
  "methods" : [
    {
      "name" : "addxtype",
      "type" : "function",
      "desc" : "Adds a series of form elements (using the xtype property as the factory method.\nValid xtypes are:  TextField, TextArea .... Button, Layout, FieldSet, Column, (and 'end' to close a block)",
      "sig" : "(config)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "config",
          "type" : "Object",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "fieldset",
      "type" : "function",
      "desc" : "Opens a new {@link Roo.form.FieldSet} container in the layout stack. If fields are passed after the config, the\nfields are added and the fieldset is closed. If no fields are passed the fieldset remains open\nuntil end() is called.",
      "sig" : "(config, field1, field2, etc)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "config",
          "type" : "Object",
          "desc" : "The config to pass to the fieldset",
          "isOptional" : false
        },
        {
          "name" : "field1",
          "type" : "Field",
          "desc" : "(optional)",
          "isOptional" : false
        },
        {
          "name" : "field2",
          "type" : "Field",
          "desc" : "(optional)",
          "isOptional" : false
        },
        {
          "name" : "etc",
          "type" : "Field",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "",
          "desc" : "FieldSet The fieldset container object"
        }
      ]
    },
    {
      "name" : "start",
      "type" : "function",
      "desc" : "Opens the passed container in the layout stack. The container can be any {@link Roo.form.Layout} or subclass.",
      "sig" : "(container)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "container",
          "type" : "Object",
          "desc" : "A Roo.form.Layout or subclass of Layout",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Form",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "container",
      "type" : "function",
      "desc" : "Opens a new {@link Roo.form.Layout} container in the layout stack. If fields are passed after the config, the\nfields are added and the container is closed. If no fields are passed the container remains open\nuntil end() is called.",
      "sig" : "(config, field1, field2, etc)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "config",
          "type" : "Object",
          "desc" : "The config to pass to the Layout",
          "isOptional" : false
        },
        {
          "name" : "field1",
          "type" : "Field",
          "desc" : "(optional)",
          "isOptional" : false
        },
        {
          "name" : "field2",
          "type" : "Field",
          "desc" : "(optional)",
          "isOptional" : false
        },
        {
          "name" : "etc",
          "type" : "Field",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "",
          "desc" : "Layout The container object"
        }
      ]
    },
    {
      "name" : "render",
      "type" : "function",
      "desc" : "Render this form into the passed container. This should only be called once!",
      "sig" : "(container)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "container",
          "type" : "String/HTMLElement/Element",
          "desc" : "The element this component should be rendered into",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Form",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "startMonitoring",
      "type" : "function",
      "desc" : "Starts monitoring of the valid state of this form. Usually this is done by passing the config\noption \"monitorValid\"",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "addButton",
      "type" : "function",
      "desc" : "Adds a button to the footer of the form - this <b>must</b> be called before the form is rendered.",
      "sig" : "(config, handler, scope)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "config",
          "type" : "String/Object",
          "desc" : "A string becomes the button text, an object can either be a Button config\nobject or a valid Roo.DomHelper element config",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The function called when the button is clicked",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope of the handler function",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Button",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "stopMonitoring",
      "type" : "function",
      "desc" : "Stops monitoring of the valid state of this form",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "add",
      "type" : "function",
      "desc" : "Add Roo.form components to the current open container (e.g. column, fieldset, etc.).  Fields added via this method\ncan also be passed with an additional property of fieldLabel, which if supplied, will provide the text to display\nas the label of the field.",
      "sig" : "(field1, field2)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "field1",
          "type" : "Field",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "field2",
          "type" : "Field",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Form",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "findbyId",
      "type" : "function",
      "desc" : "Find any element that has been added to a form, using it's ID or name\nThis can include framesets, columns etc. along with regular fields..",
      "sig" : "(id)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "String",
          "desc" : "- id or name to find.",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Element",
          "desc" : "e - or false if nothing found."
        }
      ]
    },
    {
      "name" : "column",
      "type" : "function",
      "desc" : "Opens a new {@link Roo.form.Column} container in the layout stack. If fields are passed after the config, the\nfields are added and the column is closed. If no fields are passed the column remains open\nuntil end() is called.",
      "sig" : "(config, field1, field2, etc)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "config",
          "type" : "Object",
          "desc" : "The config to pass to the column",
          "isOptional" : false
        },
        {
          "name" : "field1",
          "type" : "Field",
          "desc" : "(optional)",
          "isOptional" : false
        },
        {
          "name" : "field2",
          "type" : "Field",
          "desc" : "(optional)",
          "isOptional" : false
        },
        {
          "name" : "etc",
          "type" : "Field",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "",
          "desc" : "Column The column container object"
        }
      ]
    },
    {
      "name" : "end",
      "type" : "function",
      "desc" : "Closes the current open container",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "Form",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "remove",
      "type" : "function",
      "desc" : "Removes a field from the items collection (does NOT remove its markup).",
      "sig" : "(field)",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "field",
          "type" : "Field",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "BasicForm",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "loadRecord",
      "type" : "function",
      "desc" : "Loads an Roo.data.Record into this form.",
      "sig" : "(record)",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "record",
          "type" : "Record",
          "desc" : "The record to load",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "BasicForm",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "load",
      "type" : "function",
      "desc" : "Shortcut to do a load action.",
      "sig" : "(options)",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "The options to pass to the action (see {@link #doAction} for details)",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "BasicForm",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "doAction",
      "type" : "function",
      "desc" : "Performs a predefined action (submit or load) or custom actions you define on this form.",
      "sig" : "(actionName, options)",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "actionName",
          "type" : "String",
          "desc" : "The name of the action type",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) The options to pass to the action.  All of the config options listed\nbelow are supported by both the submit and load actions unless otherwise noted (custom actions could also\naccept other config options):\n<pre>\nProperty          Type             Description\n----------------  ---------------  ----------------------------------------------------------------------------------\nurl               String           The url for the action (defaults to the form's url)\nmethod            String           The form method to use (defaults to the form's method, or POST if not defined)\nparams            String/Object    The params to pass (defaults to the form's baseParams, or none if not defined)\nclientValidation  Boolean          Applies to submit only.  Pass true to call form.isValid() prior to posting to\n                                   validate the form on the client (defaults to false)\n</pre>",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "BasicForm",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "getValues",
      "type" : "function",
      "desc" : "Returns the fields in this form as an object with key/value pairs. If multiple fields exist with the same name\nthey are returned as an array.",
      "sig" : "(asString)",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "asString",
          "type" : "Boolean",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Object",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "resetHasChanged",
      "type" : "function",
      "desc" : "Resets all hasChanged to 'false' -\nThe old 'isDirty' used 'original value..' however this breaks reset() and a few other things.\nSo hasChanged storage is only to be used for this purpose",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "",
          "desc" : "Boolean"
        }
      ]
    },
    {
      "name" : "clearInvalid",
      "type" : "function",
      "desc" : "Clears all invalid messages in this form.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "BasicForm",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "isDirty",
      "type" : "function",
      "desc" : "DEPRICATED Returns true if any fields in this form have changed since their original load.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "",
          "desc" : "Boolean"
        }
      ]
    },
    {
      "name" : "updateRecord",
      "type" : "function",
      "desc" : "Persists the values in this form into the passed Roo.data.Record object in a beginEdit/endEdit block.",
      "sig" : "(record)",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "record",
          "type" : "Record",
          "desc" : "The record to edit",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "BasicForm",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "hasChanged",
      "type" : "function",
      "desc" : "Returns true if any fields in this form have changed since their original load. (New version)",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "",
          "desc" : "Boolean"
        }
      ]
    },
    {
      "name" : "applyToFields",
      "type" : "function",
      "desc" : "Calls {@link Ext#apply} for all fields in this form with the passed object.",
      "sig" : "(values)",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "values",
          "type" : "Object",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "BasicForm",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "getFieldValues",
      "type" : "function",
      "desc" : "Returns the fields in this form as an object with key/value pairs. \nThis differs from getValues as it calls getValue on each child item, rather than using dom data.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "Object",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "submit",
      "type" : "function",
      "desc" : "Shortcut to do a submit action.",
      "sig" : "(options)",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "The options to pass to the action (see {@link #doAction} for details)",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "BasicForm",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "markInvalid",
      "type" : "function",
      "desc" : "Mark fields in this form invalid in bulk.",
      "sig" : "(errors)",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "errors",
          "type" : "Array/Object",
          "desc" : "Either an array in the form [{id:'fieldId', msg:'The message'},...] or an object hash of {id: msg, id2: msg2}",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "BasicForm",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "setValues",
      "type" : "function",
      "desc" : "Set values for fields in this form in bulk.",
      "sig" : "(values)",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "values",
          "type" : "Array/Object",
          "desc" : "Either an array in the form [{id:'fieldId', value:'foo'},...] or an object hash of {id: value, id2: value2}",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "BasicForm",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "isValid",
      "type" : "function",
      "desc" : "Returns true if client-side validation on the form is successful.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "",
          "desc" : "Boolean"
        }
      ]
    },
    {
      "name" : "invalidFields",
      "type" : "function",
      "desc" : "Returns array of invalid form fields.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "",
          "desc" : "Array"
        }
      ]
    },
    {
      "name" : "applyIfToFields",
      "type" : "function",
      "desc" : "Calls {@link Ext#applyIf} for all field in this form with the passed object.",
      "sig" : "(values)",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "values",
          "type" : "Object",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "BasicForm",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "findField",
      "type" : "function",
      "desc" : "Find a Roo.form.Field in this form by id, dataIndex, name or hiddenName",
      "sig" : "(id)",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "String",
          "desc" : "The value to search for",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "",
          "desc" : "Field"
        }
      ]
    },
    {
      "name" : "reset",
      "type" : "function",
      "desc" : "Resets this form.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "BasicForm",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "addForm",
      "type" : "function",
      "desc" : "Add a secondary form to this one, \nUsed to provide tabbed forms. One form is primary, with hidden values \nwhich mirror the elements from the other forms.",
      "sig" : "(form)",
      "static" : false,
      "memberOf" : "Roo.form.BasicForm",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "form",
          "type" : "Roo.form.Form",
          "desc" : "to add.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "purgeListeners",
      "type" : "function",
      "desc" : "Removes all listeners for this object",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "on",
      "type" : "function",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "sig" : "(eventName, handler, scope, options)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "un",
      "type" : "function",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "sig" : "(eventName, handler, scope)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addEvents",
      "type" : "function",
      "desc" : "Used to define events on this Observable",
      "sig" : "(object)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "releaseCapture",
      "type" : "function",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "sig" : "(o)",
      "static" : true,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeListener",
      "type" : "function",
      "desc" : "Removes a listener",
      "sig" : "(eventName, handler, scope)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "fireEvent",
      "type" : "function",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "sig" : "(eventName, args)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "returns false if any of the handlers return false otherwise it returns true"
        }
      ]
    },
    {
      "name" : "hasListener",
      "type" : "function",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "sig" : "(eventName)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "True if the event is being listened for, else false"
        }
      ]
    },
    {
      "name" : "capture",
      "type" : "function",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "sig" : "(o, fn, scope)",
      "static" : true,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture",
          "isOptional" : false
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addListener",
      "type" : "function",
      "desc" : "Appends an event handler to this component",
      "sig" : "(eventName, handler, scope, options)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>",
          "isOptional" : false
        }
      ],
      "returns" : []
    }
  ],
  "events" : [
    {
      "name" : "rendered",
      "type" : "function",
      "desc" : "Fires when the form is rendered",
      "sig" : "function (form)\n{\n\n}",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "form",
          "type" : "Roo.form.Form",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "clientvalidation",
      "type" : "function",
      "desc" : "If the monitorValid config option is true, this event fires repetitively to notify of valid state",
      "sig" : "function (_self, valid)\n{\n\n}",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Form",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "valid",
          "type" : "Boolean",
          "desc" : "true if the form has passed client-side validation",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "beforeaction",
      "type" : "function",
      "desc" : "Fires before any action is performed. Return false to cancel the action.",
      "sig" : "function (_self, action)\n{\n\n}",
      "memberOf" : "Roo.form.BasicForm",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Form",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "action",
          "type" : "Action",
          "desc" : "The action to be performed",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "actioncomplete",
      "type" : "function",
      "desc" : "Fires when an action is completed.",
      "sig" : "function (_self, action)\n{\n\n}",
      "memberOf" : "Roo.form.BasicForm",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Form",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "action",
          "type" : "Action",
          "desc" : "The action that completed",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "actionfailed",
      "type" : "function",
      "desc" : "Fires when an action fails.",
      "sig" : "function (_self, action)\n{\n\n}",
      "memberOf" : "Roo.form.BasicForm",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Form",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "action",
          "type" : "Action",
          "desc" : "The action that failed",
          "isOptional" : false
        }
      ],
      "returns" : []
    }
  ]
}