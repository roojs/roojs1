{
  "name" : "Roo.KeyMap",
  "augments" : [],
  "desc" : "Handles mapping keys to actions for an element. One key map can be used for multiple actions.\nThe constructor accepts the same config object as defined by {@link #addBinding}.\nIf you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key\ncombination it will call the function with this signature (if the match is a multi-key\ncombination the callback will still be called only once): (String key, Roo.EventObject e)\nA KeyMap can also handle a string representation of keys.<br />\nUsage:\n <pre><code>\n// map one key by key code\nvar map = new Roo.KeyMap(\"my-element\", {\n    key: 13, // or Roo.EventObject.ENTER\n    fn: myHandler,\n    scope: myObject\n});\n\n// map multiple keys to one action by string\nvar map = new Roo.KeyMap(\"my-element\", {\n    key: \"a\\r\\n\\t\",\n    fn: myHandler,\n    scope: myObject\n});\n\n// map multiple keys to multiple actions by strings and array of codes\nvar map = new Roo.KeyMap(\"my-element\", [\n    {\n        key: [10,13],\n        fn: function(){ alert(\"Return was pressed\"); }\n    }, {\n        key: \"abc\",\n        fn: function(){ alert('a, b or c was pressed'); }\n    }, {\n        key: \"\\t\",\n        ctrl:true,\n        shift:true,\n        fn: function(){ alert('Control + shift + tab was pressed.'); }\n    }\n]);\n</code></pre>\n<b>Note: A KeyMap starts enabled</b>",
  "isSingleton" : false,
  "isStatic" : false,
  "isBuiltin" : false,
  "memberOf" : "KeyMap",
  "example" : "",
  "deprecated" : "",
  "since" : "",
  "see" : "",
  "params" : [
    {
      "name" : "el",
      "type" : "String/HTMLElement/Roo.Element",
      "desc" : "The element to bind to",
      "isOptional" : false
    },
    {
      "name" : "config",
      "type" : "Object",
      "desc" : "The config (see {@link #addBinding})",
      "isOptional" : false
    },
    {
      "name" : "eventName",
      "type" : "String",
      "desc" : "(optional) The event to bind to (defaults to \"keydown\")",
      "isOptional" : false
    }
  ],
  "returns" : [],
  "throws" : "",
  "requires" : "",
  "config" : [],
  "methods" : [
    {
      "name" : "on",
      "type" : "function",
      "desc" : "Shorthand for adding a single key listener",
      "sig" : "(key, fn, scope)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "key",
          "type" : "Number/Array/Object",
          "desc" : "Either the numeric key code, array of key codes or an object with the\nfollowing options:\n{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}",
          "isOptional" : false
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope of the function",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "disable",
      "type" : "function",
      "desc" : "Disable this KeyMap",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "isEnabled",
      "type" : "function",
      "desc" : "Returns true if this KeyMap is enabled",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "enable",
      "type" : "function",
      "desc" : "Enables this KeyMap",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "addBinding",
      "type" : "function",
      "desc" : "Add a new binding to this KeyMap. The following config object properties are supported:\n<pre>\nProperty    Type             Description\n----------  ---------------  ----------------------------------------------------------------------\nkey         String/Array     A single keycode or an array of keycodes to handle\nshift       Boolean          True to handle key only when shift is pressed (defaults to false)\nctrl        Boolean          True to handle key only when ctrl is pressed (defaults to false)\nalt         Boolean          True to handle key only when alt is pressed (defaults to false)\nfn          Function         The function to call when KeyMap finds the expected key combination\nscope       Object           The scope of the callback function\n</pre>\n\nUsage:\n<pre><code>\n// Create a KeyMap\nvar map = new Roo.KeyMap(document, {\n    key: Roo.EventObject.ENTER,\n    fn: handleKey,\n    scope: this\n});\n\n//Add a new binding to the existing KeyMap later\nmap.addBinding({\n    key: 'abc',\n    shift: true,\n    fn: handleKey,\n    scope: this\n});\n</code></pre>",
      "sig" : "(config)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "config",
          "type" : "Object/Array",
          "desc" : "A single KeyMap config or an array of configs",
          "isOptional" : false
        }
      ],
      "returns" : []
    }
  ],
  "events" : []
}