{
  "name" : "Function",
  "augments" : [],
  "desc" : "These functions are available on every Function object (any JavaScript function).",
  "isSingleton" : false,
  "isStatic" : false,
  "isBuiltin" : true,
  "memberOf" : "Function",
  "example" : "",
  "deprecated" : "",
  "since" : "",
  "see" : "",
  "params" : [],
  "returns" : [],
  "throws" : "",
  "requires" : "",
  "config" : [],
  "methods" : [
    {
      "name" : "createDelegate",
      "type" : "function",
      "desc" : "Creates a delegate (callback) that sets the scope to obj.\nCall directly on any function. Example: <code>this.myFunction.createDelegate(this)</code>\nWill create a function that is automatically scoped to this.",
      "sig" : "(obj, args, appendArgs)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "obj",
          "type" : "Object",
          "desc" : "(optional) The object for which the scope is set",
          "isOptional" : false
        },
        {
          "name" : "args",
          "type" : "Array",
          "desc" : "(optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)",
          "isOptional" : false
        },
        {
          "name" : "appendArgs",
          "type" : "Boolean/Number",
          "desc" : "(optional) if True args are appended to call args instead of overriding,\n                                            if a number the args are inserted at the specified position",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Function",
          "desc" : "The new function"
        }
      ]
    },
    {
      "name" : "defer",
      "type" : "function",
      "desc" : "Calls this function after the number of millseconds specified.",
      "sig" : "(millis, obj, args, appendArgs)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "millis",
          "type" : "Number",
          "desc" : "The number of milliseconds for the setTimeout call (if 0 the function is executed immediately)",
          "isOptional" : false
        },
        {
          "name" : "obj",
          "type" : "Object",
          "desc" : "(optional) The object for which the scope is set",
          "isOptional" : false
        },
        {
          "name" : "args",
          "type" : "Array",
          "desc" : "(optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)",
          "isOptional" : false
        },
        {
          "name" : "appendArgs",
          "type" : "Boolean/Number",
          "desc" : "(optional) if True args are appended to call args instead of overriding,\n                                            if a number the args are inserted at the specified position",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Number",
          "desc" : "The timeout id that can be used with clearTimeout"
        }
      ]
    },
    {
      "name" : "createSequence",
      "type" : "function",
      "desc" : "Create a combined function call sequence of the original function + the passed function.\nThe resulting function returns the results of the original function.\nThe passed fcn is called with the parameters of the original function",
      "sig" : "(fcn, scope)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "fcn",
          "type" : "Function",
          "desc" : "The function to sequence",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope of the passed fcn (Defaults to scope of original function or window)",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Function",
          "desc" : "The new function"
        }
      ]
    },
    {
      "name" : "createInterceptor",
      "type" : "function",
      "desc" : "Creates an interceptor function. The passed fcn is called before the original one. If it returns false, the original one is not called.\nThe resulting function returns the results of the original function.\nThe passed fcn is called with the parameters of the original function.",
      "sig" : "(fcn, scope)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "fcn",
          "type" : "Function",
          "desc" : "The function to call before the original",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope of the passed fcn (Defaults to scope of original function or window)",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Function",
          "desc" : "The new function"
        }
      ]
    },
    {
      "name" : "createCallback",
      "type" : "function",
      "desc" : "Creates a callback that passes arguments[0], arguments[1], arguments[2], ...\nCall directly on any function. Example: <code>myFunction.createCallback(myarg, myarg2)</code>\nWill create a function that is bound to those 2 args.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "Function",
          "desc" : "The new function"
        }
      ]
    }
  ],
  "events" : []
}