{
  "name" : "Roo.Fx",
  "augments" : [
  ],
  "desc" : "<p>A class to provide basic animation and visual effects support.  <b>Note:</b> This class is automatically applied\nto the {@link Roo.Element} interface when included, so all effects calls should be performed via Element.\nConversely, since the effects are not actually defined in Element, Roo.Fx <b>must</b> be included in order for the \nElement effects to work.</p><br/>\n\n<p>It is important to note that although the Fx methods and many non-Fx Element methods support \"method chaining\" in that\nthey return the Element object itself as the method return value, it is not always possible to mix the two in a single\nmethod chain.  The Fx methods use an internal effects queue so that each effect can be properly timed and sequenced.\nNon-Fx methods, on the other hand, have no such internal queueing and will always execute immediately.  For this reason,\nwhile it may be possible to mix certain Fx and non-Fx method calls in a single chain, it may not always provide the\nexpected results and should be done with care.</p><br/>\n\n<p>Motion effects support 8-way anchoring, meaning that you can choose one of 8 different anchor points on the Element\nthat will serve as either the start or end point of the animation.  Following are all of the supported anchor positions:</p>\n<pre>\nValue  Description\n-----  -----------------------------\ntl     The top left corner\nt      The center of the top edge\ntr     The top right corner\nl      The center of the left edge\nr      The center of the right edge\nbl     The bottom left corner\nb      The center of the bottom edge\nbr     The bottom right corner\n</pre>\n<b>Although some Fx methods accept specific custom config parameters, the ones shown in the Config Options section\nbelow are common options that can be passed to any Fx method.</b>",
  "isSingleton" : false,
  "isStatic" : false,
  "isBuiltin" : false,
  "memberOf" : "Fx",
  "example" : "",
  "deprecated" : "",
  "since" : "",
  "see" : "",
  "params" : [
  ],
  "returns" : [
  ],
  "config" : [
    {
      "name" : "easing",
      "type" : "String",
      "desc" : "A valid Easing value for the effect",
      "memberOf" : "Roo.Fx",
      "optvals" : [
      ]
    },
    {
      "name" : "afterCls",
      "type" : "String",
      "desc" : "A css class to apply after the effect",
      "memberOf" : "Roo.Fx",
      "optvals" : [
      ]
    },
    {
      "name" : "useDisplay",
      "type" : "Boolean",
      "desc" : "Whether to use the <i>display</i> CSS property instead of <i>visibility</i> when hiding Elements (only applies to \neffects that end with the element being visually hidden, ignored otherwise)",
      "memberOf" : "Roo.Fx",
      "optvals" : [
      ]
    },
    {
      "name" : "stopFx",
      "type" : "Boolean",
      "desc" : "Whether subsequent effects should be stopped and removed after the current effect finishes",
      "memberOf" : "Roo.Fx",
      "optvals" : [
      ]
    },
    {
      "name" : "callback",
      "type" : "Function",
      "desc" : "A function called when the effect is finished",
      "memberOf" : "Roo.Fx",
      "optvals" : [
      ]
    },
    {
      "name" : "scope",
      "type" : "Object",
      "desc" : "The scope of the effect function",
      "memberOf" : "Roo.Fx",
      "optvals" : [
      ]
    },
    {
      "name" : "remove",
      "type" : "Boolean",
      "desc" : "Whether the Element should be removed from the DOM and destroyed after the effect finishes",
      "memberOf" : "Roo.Fx",
      "optvals" : [
      ]
    },
    {
      "name" : "concurrent",
      "type" : "Boolean",
      "desc" : "Whether to allow subsequently-queued effects to run at the same time as the current effect, or to ensure that they run in sequence",
      "memberOf" : "Roo.Fx",
      "optvals" : [
      ]
    },
    {
      "name" : "duration",
      "type" : "Number",
      "desc" : "The length of time (in seconds) that the effect should last",
      "memberOf" : "Roo.Fx",
      "optvals" : [
      ]
    },
    {
      "name" : "afterStyle",
      "type" : "String/Object/Function",
      "desc" : "A style specification string, e.g. \"width:100px\", or an object in the form {width:\"100px\"}, or\na function which returns such a specification that will be applied to the Element after the effect finishes",
      "memberOf" : "Roo.Fx",
      "optvals" : [
      ]
    },
    {
      "name" : "block",
      "type" : "Boolean",
      "desc" : "Whether the effect should block other effects from queueing while it runs",
      "memberOf" : "Roo.Fx",
      "optvals" : [
      ]
    }
  ],
  "methods" : [
    {
      "name" : "fadeOut",
      "desc" : "Fade an element out (from opaque to transparent).  The ending opacity can be specified\nusing the \"endOpacity\" config option.\nUsage:\n<pre><code>\n// default: fade out from the element's current opacity to 0\nel.fadeOut();\n\n// custom: fade out from the element's current opacity to 25% over 2 seconds\nel.fadeOut({ endOpacity: .25, duration: 2});\n\n// common config options shown with default values\nel.fadeOut({\n    endOpacity: 0, //can be any value between 0 and 1 (e.g. .5)\n    easing: 'easeOut',\n    duration: .5\n    remove: false,\n    useDisplay: false\n});\n</code></pre>",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) Object literal with any of the Fx config options",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : "The Element"
        }
      ]
    },
    {
      "name" : "stopFx",
      "desc" : "Stops any running effects and clears the element's internal effects queue if it contains\nany additional effects that haven't started yet.",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : "The Element"
        }
      ]
    },
    {
      "name" : "frame",
      "desc" : "Shows a ripple of exploding, attenuating borders to draw attention to an Element.\nUsage:\n<pre><code>\n// default: a single light blue ripple\nel.frame();\n\n// custom: 3 red ripples lasting 3 seconds total\nel.frame(\"ff0000\", 3, { duration: 3 });\n\n// common config options shown with default values\nel.frame(\"C3DAF9\", 1, {\n    duration: 1 //duration of entire animation (not each individual ripple)\n    // Note: Easing is not configurable and will be ignored if included\n});\n</code></pre>",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "color",
          "type" : "String",
          "desc" : "(optional) The color of the border.  Should be a 6 char hex color without the leading # (defaults to light blue: 'C3DAF9').",
          "isOptional" : false
        },
        {
          "name" : "count",
          "type" : "Number",
          "desc" : "(optional) The number of ripples to display (defaults to 1)",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) Object literal with any of the Fx config options",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : "The Element"
        }
      ]
    },
    {
      "name" : "pause",
      "desc" : "Creates a pause before any subsequent queued effects begin.  If there are\nno effects queued after the pause it will have no effect.\nUsage:\n<pre><code>\nel.pause(1);\n</code></pre>",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "seconds",
          "type" : "Number",
          "desc" : "The length of time to pause (in seconds)",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : "The Element"
        }
      ]
    },
    {
      "name" : "hasFxBlock",
      "desc" : "Returns true if the element is currently blocking so that no other effect can be queued\nuntil this effect is finished, else returns false if blocking is not set.  This is commonly\nused to ensure that an effect initiated by a user action runs to completion prior to the\nsame effect being restarted (e.g., firing only one effect even if the user clicks several times).",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "True if blocking, else false"
        }
      ]
    },
    {
      "name" : "hasActiveFx",
      "desc" : "Returns true if the element has any effects actively running or queued, else returns false.",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "True if element has active effects, else false"
        }
      ]
    },
    {
      "name" : "highlight",
      "desc" : "Highlights the Element by setting a color (applies to the background-color by default, but can be\nchanged using the \"attr\" config option) and then fading back to the original color. If no original\ncolor is available, you should provide the \"endColor\" config option which will be cleared after the animation.\nUsage:\n<pre><code>\n// default: highlight background to yellow\nel.highlight();\n\n// custom: highlight foreground text to blue for 2 seconds\nel.highlight(\"0000ff\", { attr: 'color', duration: 2 });\n\n// common config options shown with default values\nel.highlight(\"ffff9c\", {\n    attr: \"background-color\", //can be any valid CSS property (attribute) that supports a color value\n    endColor: (current color) or \"ffffff\",\n    easing: 'easeIn',\n    duration: 1\n});\n</code></pre>",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "color",
          "type" : "String",
          "desc" : "(optional) The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c')",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) Object literal with any of the Fx config options",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : "The Element"
        }
      ]
    },
    {
      "name" : "syncFx",
      "desc" : "Ensures that all effects queued after syncFx is called on the element are\nrun concurrently.  This is the opposite of {@link #sequenceFx}.",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : "The Element"
        }
      ]
    },
    {
      "name" : "puff",
      "desc" : "Fades the element out while slowly expanding it in all directions.  When the effect is completed, the \nelement will be hidden (visibility = 'hidden') but block elements will still take up space in the document. \nThe element must be removed from the DOM using the 'remove' config option if desired.\nUsage:\n<pre><code>\n// default\nel.puff();\n\n// common config options shown with default values\nel.puff({\n    easing: 'easeOut',\n    duration: .5,\n    remove: false,\n    useDisplay: false\n});\n</code></pre>",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) Object literal with any of the Fx config options",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : "The Element"
        }
      ]
    },
    {
      "name" : "fadeIn",
      "desc" : "Fade an element in (from transparent to opaque).  The ending opacity can be specified\nusing the \"endOpacity\" config option.\nUsage:\n<pre><code>\n// default: fade in from opacity 0 to 100%\nel.fadeIn();\n\n// custom: fade in from opacity 0 to 75% over 2 seconds\nel.fadeIn({ endOpacity: .75, duration: 2});\n\n// common config options shown with default values\nel.fadeIn({\n    endOpacity: 1, //can be any value between 0 and 1 (e.g. .5)\n    easing: 'easeOut',\n    duration: .5\n});\n</code></pre>",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) Object literal with any of the Fx config options",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : "The Element"
        }
      ]
    },
    {
      "name" : "sequenceFx",
      "desc" : "Ensures that all effects queued after sequenceFx is called on the element are\nrun in sequence.  This is the opposite of {@link #syncFx}.",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : "The Element"
        }
      ]
    },
    {
      "name" : "slideIn",
      "desc" : "Slides the element into view.  An anchor point can be optionally passed to set the point of\norigin for the slide effect.  This function automatically handles wrapping the element with\na fixed-size container if needed.  See the Fx class overview for valid anchor point options.\nUsage:\n<pre><code>\n// default: slide the element in from the top\nel.slideIn();\n\n// custom: slide the element in from the right with a 2-second duration\nel.slideIn('r', { duration: 2 });\n\n// common config options shown with default values\nel.slideIn('t', {\n    easing: 'easeOut',\n    duration: .5\n});\n</code></pre>",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "anchor",
          "type" : "String",
          "desc" : "(optional) One of the valid Fx anchor positions (defaults to top: 't')",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) Object literal with any of the Fx config options",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : "The Element"
        }
      ]
    },
    {
      "name" : "ghost",
      "desc" : "Slides the element while fading it out of view.  An anchor point can be optionally passed to set the \nending point of the effect.\nUsage:\n<pre><code>\n// default: slide the element downward while fading out\nel.ghost();\n\n// custom: slide the element out to the right with a 2-second duration\nel.ghost('r', { duration: 2 });\n\n// common config options shown with default values\nel.ghost('b', {\n    easing: 'easeOut',\n    duration: .5\n    remove: false,\n    useDisplay: false\n});\n</code></pre>",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "anchor",
          "type" : "String",
          "desc" : "(optional) One of the valid Fx anchor positions (defaults to bottom: 'b')",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) Object literal with any of the Fx config options",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : "The Element"
        }
      ]
    },
    {
      "name" : "slideOut",
      "desc" : "Slides the element out of view.  An anchor point can be optionally passed to set the end point\nfor the slide effect.  When the effect is completed, the element will be hidden (visibility = \n'hidden') but block elements will still take up space in the document.  The element must be removed\nfrom the DOM using the 'remove' config option if desired.  This function automatically handles \nwrapping the element with a fixed-size container if needed.  See the Fx class overview for valid anchor point options.\nUsage:\n<pre><code>\n// default: slide the element out to the top\nel.slideOut();\n\n// custom: slide the element out to the right with a 2-second duration\nel.slideOut('r', { duration: 2 });\n\n// common config options shown with default values\nel.slideOut('t', {\n    easing: 'easeOut',\n    duration: .5,\n    remove: false,\n    useDisplay: false\n});\n</code></pre>",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "anchor",
          "type" : "String",
          "desc" : "(optional) One of the valid Fx anchor positions (defaults to top: 't')",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) Object literal with any of the Fx config options",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : "The Element"
        }
      ]
    },
    {
      "name" : "scale",
      "desc" : "Animates the transition of an element's dimensions from a starting height/width\nto an ending height/width.\nUsage:\n<pre><code>\n// change height and width to 100x100 pixels\nel.scale(100, 100);\n\n// common config options shown with default values.  The height and width will default to\n// the element's existing values if passed as null.\nel.scale(\n    [element's width],\n    [element's height], {\n    easing: 'easeOut',\n    duration: .35\n});\n</code></pre>",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "width",
          "type" : "Number",
          "desc" : "The new width (pass undefined to keep the original width)",
          "isOptional" : false
        },
        {
          "name" : "height",
          "type" : "Number",
          "desc" : "The new height (pass undefined to keep the original height)",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) Object literal with any of the Fx config options",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : "The Element"
        }
      ]
    },
    {
      "name" : "switchOff",
      "desc" : "Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).\nWhen the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still \ntake up space in the document. The element must be removed from the DOM using the 'remove' config option if desired.\nUsage:\n<pre><code>\n// default\nel.switchOff();\n\n// all config options shown with default values\nel.switchOff({\n    easing: 'easeIn',\n    duration: .3,\n    remove: false,\n    useDisplay: false\n});\n</code></pre>",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) Object literal with any of the Fx config options",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : "The Element"
        }
      ]
    },
    {
      "name" : "shift",
      "desc" : "Animates the transition of any combination of an element's dimensions, xy position and/or opacity.\nAny of these properties not specified in the config object will not be changed.  This effect \nrequires that at least one new dimension, position or opacity setting must be passed in on\nthe config object in order for the function to have any effect.\nUsage:\n<pre><code>\n// slide the element horizontally to x position 200 while changing the height and opacity\nel.shift({ x: 200, height: 50, opacity: .8 });\n\n// common config options shown with default values.\nel.shift({\n    width: [element's width],\n    height: [element's height],\n    x: [element's x position],\n    y: [element's y position],\n    opacity: [element's opacity],\n    easing: 'easeOut',\n    duration: .35\n});\n</code></pre>",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.Fx",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "Object literal with any of the Fx config options",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : "The Element"
        }
      ]
    }
  ],
  "events" : [
  ]
}