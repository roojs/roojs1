{
  "name" : "Roo.grid.PropertyGrid",
  "augments" : [
    "Roo.grid.EditorGrid",
    "Roo.grid.Grid",
    "Roo.util.Observable"
  ],
  "childClasses" : {  },
  "tree_children" : [],
  "tree_parent" : [],
  "desc" : "This class represents the  interface of a component based property grid control.\n<br><br>Usage:<pre><code>\n var grid = new Roo.grid.PropertyGrid(\"my-container-id\", {\n      \n });\n // set any options\n grid.render();\n</code></pre>",
  "isSingleton" : false,
  "isStatic" : false,
  "isBuiltin" : false,
  "isAbstract" : false,
  "isBuilderTop" : false,
  "memberOf" : "PropertyGrid",
  "example" : "",
  "deprecated" : "",
  "since" : "",
  "see" : "",
  "params" : [
    {
      "name" : "container",
      "type" : "String/HTMLElement/Roo.Element",
      "desc" : "The element into which this grid will be rendered -\nThe container MUST have some type of size defined for the grid to fill. The container will be\nautomatically set to position relative if it isn't already.",
      "isOptional" : false
    },
    {
      "name" : "config",
      "type" : "Object",
      "desc" : "A config object that sets properties on this grid.",
      "isOptional" : false
    }
  ],
  "returns" : [],
  "throws" : "",
  "requires" : "",
  "config" : [
    {
      "name" : "trackMouseOver",
      "type" : "Boolean",
      "desc" : "True to highlight rows when the mouse is over. Default is true.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "ddText",
      "type" : "String",
      "desc" : "Configures the text is the drag proxy (defaults to \"%0 selected row(s)\").\n%0 is replaced with the number of selected rows.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "propertyNames",
      "type" : "Object",
      "desc" : "map of property Names to their displayed value",
      "memberOf" : ""
    },
    {
      "name" : "autoExpandMax",
      "type" : "Number",
      "desc" : "The maximum width the autoExpandColumn can have (if enabled). Default is 1000.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "cm[]",
      "type" : "Roo.grid.ColumnModel",
      "desc" : "The columns of the grid",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "view",
      "type" : "Roo.grid.GridView",
      "desc" : "The view that renders the grid (default = Roo.grid.GridView)",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "stripeRows",
      "type" : "Boolean",
      "desc" : "True to stripe the rows.  Default is true.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "minColumnWidth",
      "type" : "Number",
      "desc" : "The minimum width a column can be resized to. Default is 25.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "monitorWindowResize",
      "type" : "Boolean",
      "desc" : "True to autoSize the grid when the window resizes. Default is true.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "enableRowHeightSync",
      "type" : "Boolean",
      "desc" : "True to manually sync row heights across locked and not locked rows. Default is false.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "ds",
      "type" : "Roo.grid.Store",
      "desc" : "The data store for the grid",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "autoSizeHeaders",
      "type" : "Boolean",
      "desc" : "True to measure headers with column data when auto sizing columns. Default is true.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "toolbar",
      "type" : "Roo.Toolbar",
      "desc" : "a toolbar for buttons etc.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "sm",
      "type" : "Roo.grid.AbstractSelectionModel",
      "desc" : "The selection Model (default = Roo.grid.RowSelectionModel)",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable"
    },
    {
      "name" : "enableColumnHide",
      "type" : "Boolean",
      "desc" : "True to enable hiding of columns with the header context menu. Default is true.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "enableColumnMove",
      "type" : "Boolean",
      "desc" : "True to enable drag and drop reorder of columns. Default is true.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "dragGroup",
      "type" : "String",
      "desc" : "- drag group (?? not sure if needed.)",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "ddGroup",
      "type" : "String",
      "desc" : "- drag drop group.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "enableDragDrop",
      "type" : "Boolean",
      "desc" : "True to enable drag and drop of rows. Default is false.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "enableDrop",
      "type" : "Boolean",
      "desc" : "True to enable drop of elements. Default is false. (double check if this is needed?)",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "clicksToEdit",
      "type" : "Number",
      "desc" : "The number of clicks on a cell required to display the cell's editor (defaults to 2)",
      "memberOf" : "Roo.grid.EditorGrid"
    },
    {
      "name" : "autoExpandColumn",
      "type" : "String",
      "desc" : "The id (or dataIndex) of a column in this grid that should expand to fill unused space. This id can not be 0. Default is false.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "maxRowsToMeasure",
      "type" : "Boolean",
      "desc" : "If autoSizeColumns is on, maxRowsToMeasure can be used to limit the number of\nrows measured to get a columns size. Default is 0 (all rows).",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "loadMask",
      "type" : "Object",
      "desc" : "An {@link Roo.LoadMask} config or true to mask the grid while loading. Default is false.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "customEditors",
      "type" : "Object",
      "desc" : "map of colnames=> custom editors.\nthe custom editor can be one of the standard ones (date|string|number|int|boolean), or a\ngrid editor eg. Roo.grid.GridEditor(new Roo.form.TextArea({selectOnFocus:true})),\nfalse disables editing of the field.",
      "memberOf" : ""
    },
    {
      "name" : "autoHeight",
      "type" : "Boolean",
      "desc" : "True to fit the height of the grid container to the height of the data. Default is false.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "autoSizeColumns",
      "type" : "Boolean",
      "desc" : "True to automatically resize the columns to fit their content\n<b>on initial render.</b> It is more efficient to explicitly size the columns\nthrough the ColumnModel's {@link Roo.grid.ColumnModel#width} config option.  Default is false.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "enableDrag",
      "type" : "Boolean",
      "desc" : "True to enable drag of rows. Default is false. (double check if this is needed?)",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "dropTarget",
      "type" : "Roo.dd.DropTarget",
      "desc" : "An {@link Roo.dd.DropTarget} config",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "autoWidth",
      "type" : "Boolean",
      "desc" : "True to set the grid's width to the default total width of the grid's columns instead\nof a fixed width. Default is false.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "maxHeight",
      "type" : "Number",
      "desc" : "Sets the maximum height of the grid - ignored if autoHeight is not on.",
      "memberOf" : "Roo.grid.Grid"
    },
    {
      "name" : "autoExpandMin",
      "type" : "Number",
      "desc" : "The minimum width the autoExpandColumn can have (if enabled).\nDefault is 50.",
      "memberOf" : "Roo.grid.Grid"
    }
  ],
  "methods" : [
    {
      "name" : "getSource",
      "type" : "function",
      "desc" : "Gets all the data from the grid.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "Object",
          "desc" : "data  data stored in grid"
        }
      ]
    },
    {
      "name" : "setSource",
      "type" : "function",
      "desc" : "Sets the data for the Grid\naccepts a Key => Value object of all the elements avaiable.",
      "sig" : "(data)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "to appear in grid.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "stopEditing",
      "type" : "function",
      "desc" : "Stops any active editing",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.grid.EditorGrid",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "getDragDropText",
      "type" : "function",
      "desc" : "Called to get grid's drag proxy text, by default returns this.ddText.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.grid.EditorGrid",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "startEditing",
      "type" : "function",
      "desc" : "Starts editing the specified for the specified row/column",
      "sig" : "(rowIndex, colIndex)",
      "static" : false,
      "memberOf" : "Roo.grid.EditorGrid",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "rowIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "colIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "getSelectionModel",
      "type" : "function",
      "desc" : "Returns the grid's SelectionModel.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.grid.Grid",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "SelectionModel",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "destroy",
      "type" : "function",
      "desc" : "Destroy this grid.",
      "sig" : "(removeEl)",
      "static" : false,
      "memberOf" : "Roo.grid.Grid",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "removeEl",
          "type" : "Boolean",
          "desc" : "True to remove the element",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "getColumnModel",
      "type" : "function",
      "desc" : "Returns the grid's ColumnModel.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.grid.Grid",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "ColumnModel",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "getGridEl",
      "type" : "function",
      "desc" : "Returns the grid's underlying element.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.grid.Grid",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "Element",
          "desc" : "The element"
        }
      ]
    },
    {
      "name" : "getDataSource",
      "type" : "function",
      "desc" : "Returns the grid's DataSource.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.grid.Grid",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "DataSource",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "autoSize",
      "type" : "function",
      "desc" : "Causes the grid to manually recalculate its dimensions. Generally this is done automatically,\nbut if manual update is required this method will initiate it.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.grid.Grid",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "getView",
      "type" : "function",
      "desc" : "Returns the grid's GridView object.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.grid.Grid",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "GridView",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "reconfigure",
      "type" : "function",
      "desc" : "Reconfigures the grid to use a different Store and Column Model.\nThe View will be bound to the new objects and refreshed.",
      "sig" : "(dataSource, The)",
      "static" : false,
      "memberOf" : "Roo.grid.Grid",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "dataSource",
          "type" : "Roo.data.Store",
          "desc" : "The new {@link Roo.data.Store} object",
          "isOptional" : false
        },
        {
          "name" : "The",
          "type" : "Roo.grid.ColumnModel",
          "desc" : "new {@link Roo.grid.ColumnModel} object",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addColumns",
      "type" : "function",
      "desc" : "addColumns\nAdd's a column, default at the end..",
      "sig" : "(position, of)",
      "static" : false,
      "memberOf" : "Roo.grid.Grid",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "position",
          "type" : "int",
          "desc" : "to add (default end)",
          "isOptional" : false
        },
        {
          "name" : "of",
          "type" : "Array",
          "desc" : "objects of column configuration see {@link Roo.grid.ColumnModel}",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "render",
      "type" : "function",
      "desc" : "Called once after all setup has been completed and the grid is ready to be rendered.",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.grid.Grid",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.grid.Grid",
          "desc" : "this"
        }
      ]
    },
    {
      "name" : "purgeListeners",
      "type" : "function",
      "desc" : "Removes all listeners for this object",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "on",
      "type" : "function",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "sig" : "(eventName, handler, scope, options)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "un",
      "type" : "function",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "sig" : "(eventName, handler, scope)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addEvents",
      "type" : "function",
      "desc" : "Used to define events on this Observable",
      "sig" : "(object)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "releaseCapture",
      "type" : "function",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "sig" : "(o)",
      "static" : true,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeListener",
      "type" : "function",
      "desc" : "Removes a listener",
      "sig" : "(eventName, handler, scope)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "fireEvent",
      "type" : "function",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "sig" : "(eventName, args)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "returns false if any of the handlers return false otherwise it returns true"
        }
      ]
    },
    {
      "name" : "hasListener",
      "type" : "function",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "sig" : "(eventName)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "True if the event is being listened for, else false"
        }
      ]
    },
    {
      "name" : "capture",
      "type" : "function",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "sig" : "(o, fn, scope)",
      "static" : true,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture",
          "isOptional" : false
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addListener",
      "type" : "function",
      "desc" : "Appends an event handler to this component",
      "sig" : "(eventName, handler, scope, options)",
      "static" : false,
      "memberOf" : "Roo.util.Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>",
          "isOptional" : false
        }
      ],
      "returns" : []
    }
  ],
  "events" : [
    {
      "name" : "beforepropertychange",
      "type" : "function",
      "desc" : "Fires before a property changes (return false to stop?)",
      "sig" : "function (grid, id, newval, oldval)\n{\n\n}",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "grid",
          "type" : "Roo.grid.PropertyGrid",
          "desc" : "property grid? (check could be store)",
          "isOptional" : false
        },
        {
          "name" : "id",
          "type" : "String",
          "desc" : "Record Id",
          "isOptional" : false
        },
        {
          "name" : "newval",
          "type" : "String",
          "desc" : "New Value",
          "isOptional" : false
        },
        {
          "name" : "oldval",
          "type" : "String",
          "desc" : "Old Value",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "propertychange",
      "type" : "function",
      "desc" : "Fires after a property changes",
      "sig" : "function (grid, id, newval, oldval)\n{\n\n}",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "grid",
          "type" : "Roo.grid.PropertyGrid",
          "desc" : "property grid? (check could be store)",
          "isOptional" : false
        },
        {
          "name" : "id",
          "type" : "String",
          "desc" : "Record Id",
          "isOptional" : false
        },
        {
          "name" : "newval",
          "type" : "String",
          "desc" : "New Value",
          "isOptional" : false
        },
        {
          "name" : "oldval",
          "type" : "String",
          "desc" : "Old Value",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "validateedit",
      "type" : "function",
      "desc" : "Fires after a cell is edited, but before the value is set in the record. \nYou can use this to modify the value being set in the field, Return false\nto cancel the change. The edit event object has the following properties <br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>editor - This editor</li>\n<li>grid - This grid</li>\n<li>record - The record being edited</li>\n<li>field - The field name being edited</li>\n<li>value - The value being set</li>\n<li>originalValue - The original value for the field, before the edit.</li>\n<li>row - The grid row index</li>\n<li>column - The grid column index</li>\n<li>cancel - Set this to true to cancel the edit or return false from your handler.</li>\n</ul>",
      "sig" : "function (e)\n{\n\n}",
      "memberOf" : "Roo.grid.EditorGrid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Object",
          "desc" : "An edit event (see above for description)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "beforeedit",
      "type" : "function",
      "desc" : "Fires before cell editing is triggered. The edit event object has the following properties <br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>grid - This grid</li>\n<li>record - The record being edited</li>\n<li>field - The field name being edited</li>\n<li>value - The value for the field being edited.</li>\n<li>row - The grid row index</li>\n<li>column - The grid column index</li>\n<li>cancel - Set this to true to cancel the edit or return false from your handler.</li>\n</ul>",
      "sig" : "function (e)\n{\n\n}",
      "memberOf" : "Roo.grid.EditorGrid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Object",
          "desc" : "An edit event (see above for description)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "afteredit",
      "type" : "function",
      "desc" : "Fires after a cell is edited. <br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>grid - This grid</li>\n<li>record - The record being edited</li>\n<li>field - The field name being edited</li>\n<li>value - The value being set</li>\n<li>originalValue - The original value for the field, before the edit.</li>\n<li>row - The grid row index</li>\n<li>column - The grid column index</li>\n</ul>",
      "sig" : "function (e)\n{\n\n}",
      "memberOf" : "Roo.grid.EditorGrid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Object",
          "desc" : "An edit event (see above for description)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "rowcontextmenu",
      "type" : "function",
      "desc" : "Fires when a row is right clicked",
      "sig" : "function (_self, rowIndex, e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Grid",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "rowIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "columnmove",
      "type" : "function",
      "desc" : "Fires when the user moves a column",
      "sig" : "function (oldIndex, newIndex)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "oldIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "newIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "headercontextmenu",
      "type" : "function",
      "desc" : "Fires when a header is right clicked",
      "sig" : "function (_self, columnIndex, e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Grid",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "columnIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "render",
      "type" : "function",
      "desc" : "Fires when the grid is rendered",
      "sig" : "function (grid)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "grid",
          "type" : "Grid",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "bodyscroll",
      "type" : "function",
      "desc" : "Fires when the body element is scrolled",
      "sig" : "function (scrollLeft, scrollTop)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "scrollLeft",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "scrollTop",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "columnresize",
      "type" : "function",
      "desc" : "Fires when the user resizes a column",
      "sig" : "function (columnIndex, newSize)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "columnIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "newSize",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "enddrag",
      "type" : "function",
      "desc" : "Fires when a drag operation is complete",
      "sig" : "function (_self, dd, e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Grid",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "dd",
          "type" : "Roo.GridDD",
          "desc" : "The drag drop object",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "event",
          "desc" : "The raw browser event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "mouseout",
      "type" : "function",
      "desc" : "The raw mouseout event for the entire grid.",
      "sig" : "function (e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "cellclick",
      "type" : "function",
      "desc" : "Fires when a cell is clicked",
      "sig" : "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Grid",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "rowIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "columnIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "dragover",
      "type" : "function",
      "desc" : "Fires while row(s) are being dragged. \"targetId\" is the id of the Yahoo.util.DD object the selected rows are being dragged over.",
      "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Grid",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "dd",
          "type" : "Roo.GridDD",
          "desc" : "The drag drop object",
          "isOptional" : false
        },
        {
          "name" : "targetId",
          "type" : "String",
          "desc" : "The target drag drop object",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "event",
          "desc" : "The raw browser event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "rowclass",
      "type" : "function",
      "desc" : "Fires when a row is rendered, so you can change add a style to it.",
      "sig" : "function (gridview, rowcfg)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "gridview",
          "type" : "GridView",
          "desc" : "The grid view",
          "isOptional" : false
        },
        {
          "name" : "rowcfg",
          "type" : "Object",
          "desc" : "contains record  rowIndex and rowClass - set rowClass to add a style.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "keydown",
      "type" : "function",
      "desc" : "The raw keydown event for the entire grid.",
      "sig" : "function (e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "mousedown",
      "type" : "function",
      "desc" : "The raw mousedown event for the entire grid.",
      "sig" : "function (e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "dragenter",
      "type" : "function",
      "desc" : "Fires when the dragged row(s) first cross another DD target while being dragged",
      "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Grid",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "dd",
          "type" : "Roo.GridDD",
          "desc" : "The drag drop object",
          "isOptional" : false
        },
        {
          "name" : "targetId",
          "type" : "String",
          "desc" : "The target drag drop object",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "event",
          "desc" : "The raw browser event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "dragout",
      "type" : "function",
      "desc" : "Fires when the dragged row(s) leave another DD target while being dragged",
      "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Grid",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "dd",
          "type" : "Roo.GridDD",
          "desc" : "The drag drop object",
          "isOptional" : false
        },
        {
          "name" : "targetId",
          "type" : "String",
          "desc" : "The target drag drop object",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "event",
          "desc" : "The raw browser event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "mouseup",
      "type" : "function",
      "desc" : "The raw mouseup event for the entire grid.",
      "sig" : "function (e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "keypress",
      "type" : "function",
      "desc" : "The raw keypress event for the entire grid.",
      "sig" : "function (e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "headerclick",
      "type" : "function",
      "desc" : "Fires when a header is clicked",
      "sig" : "function (_self, columnIndex, e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Grid",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "columnIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "mouseover",
      "type" : "function",
      "desc" : "The raw mouseover event for the entire grid.",
      "sig" : "function (e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "headerdblclick",
      "type" : "function",
      "desc" : "Fires when a header cell is double clicked",
      "sig" : "function (_self, columnIndex, e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Grid",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "columnIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "dragdrop",
      "type" : "function",
      "desc" : "Fires when dragged row(s) are dropped on a valid DD target",
      "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Grid",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "dd",
          "type" : "Roo.GridDD",
          "desc" : "The drag drop object",
          "isOptional" : false
        },
        {
          "name" : "targetId",
          "type" : "String",
          "desc" : "The target drag drop object",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "event",
          "desc" : "The raw browser event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "rowclick",
      "type" : "function",
      "desc" : "Fires when a row is clicked",
      "sig" : "function (_self, rowIndex, e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Grid",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "rowIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "click",
      "type" : "function",
      "desc" : "The raw click event for the entire grid.",
      "sig" : "function (e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "rowdblclick",
      "type" : "function",
      "desc" : "Fires when a row is double clicked",
      "sig" : "function (_self, rowIndex, e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Grid",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "rowIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "startdrag",
      "type" : "function",
      "desc" : "Fires when row(s) start being dragged",
      "sig" : "function (_self, dd, e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Grid",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "dd",
          "type" : "Roo.GridDD",
          "desc" : "The drag drop object",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "event",
          "desc" : "The raw browser event",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "dblclick",
      "type" : "function",
      "desc" : "The raw dblclick event for the entire grid.",
      "sig" : "function (e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "cellcontextmenu",
      "type" : "function",
      "desc" : "Fires when a cell is right clicked",
      "sig" : "function (_self, rowIndex, cellIndex, e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Grid",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "rowIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "cellIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "contextmenu",
      "type" : "function",
      "desc" : "The raw contextmenu event for the entire grid.",
      "sig" : "function (e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "celldblclick",
      "type" : "function",
      "desc" : "Fires when a cell is double clicked",
      "sig" : "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
      "memberOf" : "Roo.grid.Grid",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Grid",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "rowIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "columnIndex",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : []
    }
  ]
}