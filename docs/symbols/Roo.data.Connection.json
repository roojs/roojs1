{
  "name" : "Roo.data.Connection",
  "augments" : [
    "Roo.util.Observable"
  ],
  "desc" : "The class encapsulates a connection to the page's originating domain, allowing requests to be made\neither to a configured URL, or to a URL specified at request time. \n\nRequests made by this class are asynchronous, and will return immediately. No data from\nthe server will be available to the statement immediately following the {@link #request} call.\nTo process returned data, use a callback in the request options object, or an event listener.\n\nNote: If you are doing a file upload, you will not get a normal response object sent back to\nyour callback or event handler.  Since the upload is handled via in IFRAME, there is no XMLHttpRequest.\nThe response object is created using the innerHTML of the IFRAME's document as the responseText\nproperty and, if present, the IFRAME's XML document as the responseXML property.\n\nThis means that a valid XML or HTML document must be returned. If JSON data is required, it is suggested\nthat it be placed either inside a &lt;textarea> in an HTML document and retrieved from the responseText\nusing a regex, or inside a CDATA section in an XML document and retrieved from the responseXML using\nstandard DOM methods.",
  "isSingleton" : false,
  "isStatic" : false,
  "isBuiltin" : false,
  "memberOf" : "Connection",
  "example" : "",
  "deprecated" : "",
  "since" : "",
  "see" : "",
  "params" : [
    {
      "name" : "config",
      "type" : "Object",
      "desc" : "a configuration object.",
      "isOptional" : false
    }
  ],
  "returns" : [],
  "config" : [
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable",
      "optvals" : []
    },
    {
      "name" : "method",
      "type" : "String",
      "desc" : "(Optional) The default HTTP method to be used for requests. (defaults to undefined; if not set but parms are present will use POST, otherwise GET)",
      "memberOf" : "Roo.data.Connection",
      "optvals" : []
    },
    {
      "name" : "timeout",
      "type" : "Number",
      "desc" : "(Optional) The timeout in milliseconds to be used for requests. (defaults to 30000)",
      "memberOf" : "Roo.data.Connection",
      "optvals" : []
    },
    {
      "name" : "autoAbort",
      "type" : "Boolean",
      "desc" : "(Optional) Whether this request should abort any pending requests. (defaults to false)",
      "memberOf" : "Roo.data.Connection",
      "optvals" : []
    },
    {
      "name" : "url",
      "type" : "String",
      "desc" : "(Optional) The default URL to be used for requests to the server. (defaults to undefined)",
      "memberOf" : "Roo.data.Connection",
      "optvals" : []
    },
    {
      "name" : "extraParams",
      "type" : "Object",
      "desc" : "(Optional) An object containing properties which are used as\nextra parameters to each request made by this object. (defaults to undefined)",
      "memberOf" : "Roo.data.Connection",
      "optvals" : []
    },
    {
      "name" : "disableCaching",
      "type" : "Boolean",
      "desc" : "(Optional) True to add a unique cache-buster param to GET requests. (defaults to true)",
      "memberOf" : "Roo.data.Connection",
      "optvals" : []
    },
    {
      "name" : "defaultHeaders",
      "type" : "Object",
      "desc" : "(Optional) An object containing request headers which are added\n to each request made by this object. (defaults to undefined)",
      "memberOf" : "Roo.data.Connection",
      "optvals" : []
    }
  ],
  "methods" : [
    {
      "name" : "isLoading",
      "desc" : "Determine whether this object has a request outstanding.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.data.Connection",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "transactionId",
          "type" : "Number",
          "desc" : "(Optional) defaults to the last transaction",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "True if there is an outstanding request."
        }
      ]
    },
    {
      "name" : "request",
      "desc" : "Sends an HTTP request to a remote server.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.data.Connection",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "An object which may contain the following properties:<ul>\n<li><b>url</b> {String} (Optional) The URL to which to send the request. Defaults to configured URL</li>\n<li><b>params</b> {Object/String/Function} (Optional) An object containing properties which are used as parameters to the\nrequest, a url encoded string or a function to call to get either.</li>\n<li><b>method</b> {String} (Optional) The HTTP method to use for the request. Defaults to the configured method, or\nif no method was configured, \"GET\" if no parameters are being sent, and \"POST\" if parameters are being sent.</li>\n<li><b>callback</b> {Function} (Optional) The function to be called upon receipt of the HTTP response.\nThe callback is called regardless of success or failure and is passed the following parameters:<ul>\n<li>options {Object} The parameter to the request call.</li>\n<li>success {Boolean} True if the request succeeded.</li>\n<li>response {Object} The XMLHttpRequest object containing the response data.</li>\n</ul></li>\n<li><b>success</b> {Function} (Optional) The function to be called upon success of the request.\nThe callback is passed the following parameters:<ul>\n<li>response {Object} The XMLHttpRequest object containing the response data.</li>\n<li>options {Object} The parameter to the request call.</li>\n</ul></li>\n<li><b>failure</b> {Function} (Optional) The function to be called upon failure of the request.\nThe callback is passed the following parameters:<ul>\n<li>response {Object} The XMLHttpRequest object containing the response data.</li>\n<li>options {Object} The parameter to the request call.</li>\n</ul></li>\n<li><b>scope</b> {Object} (Optional) The scope in which to execute the callbacks: The \"this\" object\nfor the callback function. Defaults to the browser window.</li>\n<li><b>form</b> {Object/String} (Optional) A form object or id to pull parameters from.</li>\n<li><b>isUpload</b> {Boolean} (Optional) True if the form object is a file upload (will usually be automatically detected).</li>\n<li><b>headers</b> {Object} (Optional) Request headers to set for the request.</li>\n<li><b>xmlData</b> {Object} (Optional) XML document to use for the post. Note: This will be used instead of\nparams for the post data. Any params will be appended to the URL.</li>\n<li><b>disableCaching</b> {Boolean} (Optional) True to add a unique cache-buster param to GET requests.</li>\n</ul>",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Number",
          "desc" : "transactionId"
        }
      ]
    },
    {
      "name" : "abort",
      "desc" : "Aborts any outstanding request.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.data.Connection",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "transactionId",
          "type" : "Number",
          "desc" : "(Optional) defaults to the last transaction",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "purgeListeners",
      "desc" : "Removes all listeners for this object",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "on",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "un",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addEvents",
      "desc" : "Used to define events on this Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "releaseCapture",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeListener",
      "desc" : "Removes a listener",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "fireEvent",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "returns false if any of the handlers return false otherwise it returns true"
        }
      ]
    },
    {
      "name" : "hasListener",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "True if the event is being listened for, else false"
        }
      ]
    },
    {
      "name" : "capture",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture",
          "isOptional" : false
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addListener",
      "desc" : "Appends an event handler to this component",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>",
          "isOptional" : false
        }
      ],
      "returns" : []
    }
  ],
  "events" : [
    {
      "name" : "requestcomplete",
      "desc" : "Fires if the request was successfully completed.",
      "memberOf" : "Roo.data.Connection",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "conn",
          "type" : "Connection",
          "desc" : "This Connection object.",
          "isOptional" : false
        },
        {
          "name" : "response",
          "type" : "Object",
          "desc" : "The XHR object containing the response data.\nSee {@link http://www.w3.org/TR/XMLHttpRequest/} for details.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "The options config object passed to the {@link #request} method.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "beforerequest",
      "desc" : "Fires before a network request is made to retrieve a data object.",
      "memberOf" : "Roo.data.Connection",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "conn",
          "type" : "Connection",
          "desc" : "This Connection object.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "The options config object passed to the {@link #request} method.",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "requestexception",
      "desc" : "Fires if an error HTTP status was returned from the server.\nSee {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html} for details of HTTP status codes.",
      "memberOf" : "Roo.data.Connection",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "conn",
          "type" : "Connection",
          "desc" : "This Connection object.",
          "isOptional" : false
        },
        {
          "name" : "response",
          "type" : "Object",
          "desc" : "The XHR object containing the response data.\nSee {@link http://www.w3.org/TR/XMLHttpRequest/} for details.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "The options config object passed to the {@link #request} method.",
          "isOptional" : false
        }
      ],
      "returns" : []
    }
  ]
}