{
  "name" : "Roo.util.Format",
  "augments" : [],
  "childClasses" : {  },
  "tree_children" : [],
  "tree_parent" : [],
  "desc" : "Reusable data formatting functions",
  "isSingleton" : false,
  "isStatic" : true,
  "isBuiltin" : false,
  "isAbstract" : false,
  "isBuilderTop" : false,
  "memberOf" : "Format",
  "example" : "",
  "deprecated" : "",
  "since" : "",
  "see" : "",
  "params" : [],
  "returns" : [],
  "throws" : "",
  "requires" : "",
  "config" : [],
  "methods" : [
    {
      "name" : "uppercase",
      "type" : "function",
      "desc" : "Converts a string to all upper case letters",
      "sig" : "(value)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The text to convert",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "The converted text"
        }
      ]
    },
    {
      "name" : "date",
      "type" : "function",
      "desc" : "Parse a value into a formatted date using the specified format pattern.",
      "sig" : "(value, format)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "Mixed",
          "desc" : "The value to format",
          "isOptional" : false
        },
        {
          "name" : "format",
          "type" : "String",
          "desc" : "(optional) Any valid date format string (defaults to 'm/d/Y')",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "The formatted date string"
        }
      ]
    },
    {
      "name" : "lowercase",
      "type" : "function",
      "desc" : "Converts a string to all lower case letters",
      "sig" : "(value)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The text to convert",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "The converted text"
        }
      ]
    },
    {
      "name" : "undef",
      "type" : "function",
      "desc" : "Checks a reference and converts it to empty string if it is undefined",
      "sig" : "(value)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "Mixed",
          "desc" : "Reference to check",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Mixed",
          "desc" : "Empty string if converted, otherwise the original value"
        }
      ]
    },
    {
      "name" : "stripTags",
      "type" : "function",
      "desc" : "Strips all HTML tags",
      "sig" : "(value)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "Mixed",
          "desc" : "The text from which to strip tags",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "The stripped text"
        }
      ]
    },
    {
      "name" : "ellipsis",
      "type" : "function",
      "desc" : "Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length",
      "sig" : "(value, length)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The string to truncate",
          "isOptional" : false
        },
        {
          "name" : "length",
          "type" : "Number",
          "desc" : "The maximum length to allow before truncating",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "The converted text"
        }
      ]
    },
    {
      "name" : "htmlDecode",
      "type" : "function",
      "desc" : "Convert certain characters (&, <, >, and ') from their HTML character equivalents.",
      "sig" : "(value)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The string to decode",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "The decoded text"
        }
      ]
    },
    {
      "name" : "htmlEncode",
      "type" : "function",
      "desc" : "Convert certain characters (&, <, >, and ') to their HTML character equivalents for literal display in web pages.",
      "sig" : "(value)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The string to encode",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "The encoded text"
        }
      ]
    },
    {
      "name" : "size",
      "type" : "function",
      "desc" : "Size in Mb,Gb etc.",
      "sig" : "(value, decimals)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "Number",
          "desc" : "The number to be formated",
          "isOptional" : false
        },
        {
          "name" : "decimals",
          "type" : "number",
          "desc" : "how many decimal places",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "the formated string"
        }
      ]
    },
    {
      "name" : "toFixed",
      "type" : "function",
      "desc" : "safer version of Math.toFixed..??/",
      "sig" : "(value, value)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "Number/String",
          "desc" : "The numeric value to format",
          "isOptional" : false
        },
        {
          "name" : "value",
          "type" : "Number/String",
          "desc" : "Decimal places",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "The formatted currency string"
        }
      ]
    },
    {
      "name" : "substr",
      "type" : "function",
      "desc" : "Returns a substring from within an original string",
      "sig" : "(value, start, length)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The original text",
          "isOptional" : false
        },
        {
          "name" : "start",
          "type" : "Number",
          "desc" : "The start index of the substring",
          "isOptional" : false
        },
        {
          "name" : "length",
          "type" : "Number",
          "desc" : "The length of the substring",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "The substring"
        }
      ]
    },
    {
      "name" : "number",
      "type" : "function",
      "desc" : "Format a number\neventually this should probably emulate php's number_format",
      "sig" : "(value, decimals, delimiter)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "Number/String",
          "desc" : "The numeric value to format",
          "isOptional" : false
        },
        {
          "name" : "decimals",
          "type" : "Number",
          "desc" : "number of decimal places",
          "isOptional" : false
        },
        {
          "name" : "delimiter",
          "type" : "String",
          "desc" : "for thousands (default comma)",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "The formatted currency string"
        }
      ]
    },
    {
      "name" : "usMoney",
      "type" : "function",
      "desc" : "Format a number as US currency",
      "sig" : "(value)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "Number/String",
          "desc" : "The numeric value to format",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "The formatted currency string"
        }
      ]
    },
    {
      "name" : "capitalize",
      "type" : "function",
      "desc" : "Converts the first character only of a string to upper case",
      "sig" : "(value)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The text to convert",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "The converted text"
        }
      ]
    },
    {
      "name" : "trim",
      "type" : "function",
      "desc" : "Trims any whitespace from either side of a string",
      "sig" : "(value)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The text to trim",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "The trimmed text"
        }
      ]
    },
    {
      "name" : "dateRenderer",
      "type" : "function",
      "desc" : "Returns a date rendering function that can be reused to apply a date format multiple times efficiently",
      "sig" : "(format)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "format",
          "type" : "String",
          "desc" : "Any valid date format string",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Function",
          "desc" : "The date formatting function"
        }
      ]
    }
  ],
  "events" : []
}