{
  "name" : "Roo.util.Observable",
  "augments" : [],
  "childClasses" : {
    "Roo.bootstrap.nav.Item" : [
      "Roo.bootstrap.nav.SidebarItem"
    ],
    "Roo.ContentPanel" : [
      "Roo.GridPanel",
      "Roo.NestedLayoutPanel",
      "Roo.TreePanel"
    ],
    "Roo.LayoutRegion" : [
      "Roo.SplitLayoutRegion",
      "Roo.bootstrap.layout.Split"
    ],
    "Roo.form.Layout" : [
      "Roo.form.Column",
      "Roo.form.FieldSet",
      "Roo.form.Row"
    ],
    "Roo.bootstrap.Column" : [
      "Roo.bootstrap.TabGroup"
    ],
    "Roo.grid.EditorGrid" : [
      "Roo.grid.PropertyGrid"
    ],
    "Roo.LayoutManager" : [
      "Roo.BorderLayout"
    ],
    "Roo.dd.DropTarget" : [
      "Roo.dd.DropZone"
    ],
    "Roo.bootstrap.Element" : [
      "Roo.bootstrap.CardFooter",
      "Roo.bootstrap.CardHeader",
      "Roo.bootstrap.CardImageTop",
      "Roo.bootstrap.DropTarget"
    ],
    "Roo.form.TriggerField" : [
      "Roo.form.ComboBox",
      "Roo.form.DateField",
      "Roo.form.MonthField",
      "Roo.form.Select"
    ],
    "Roo.form.ComboBox" : [
      "Roo.form.ComboCheck",
      "Roo.form.ComboNested"
    ],
    "Roo.View" : [
      "Roo.JsonView"
    ],
    "Roo.data.DataProxy" : [
      "Roo.data.HttpProxy"
    ],
    "Roo.menu.Menu" : [
      "Roo.menu.ColorMenu",
      "Roo.menu.DateMenu"
    ],
    "Roo.bootstrap.form.TriggerField" : [
      "Roo.bootstrap.form.ComboBox",
      "Roo.bootstrap.form.PhoneInput"
    ],
    "Roo.dd.DragDrop" : [
      "Roo.dd.DD",
      "Roo.dd.DDTarget"
    ],
    "Roo.tree.TreeNode" : [
      "Roo.tree.AsyncTreeNode"
    ],
    "Roo.Button" : [
      "Roo.SplitButton",
      "Roo.Toolbar.Button"
    ],
    "Roo.util.Observable" : [
      "Roo.BasicDialog",
      "Roo.BasicLayoutRegion",
      "Roo.Button",
      "Roo.Component",
      "Roo.ContentPanel",
      "Roo.Document",
      "Roo.LayoutManager",
      "Roo.Resizable",
      "Roo.SplitBar",
      "Roo.TabPanel",
      "Roo.TabPanelItem",
      "Roo.UpdateManager",
      "Roo.View",
      "Roo.XComponent",
      "Roo.bootstrap.SplitBar",
      "Roo.bootstrap.layout.Basic",
      "Roo.bootstrap.panel.Content",
      "Roo.bootstrap.panel.TabItem",
      "Roo.bootstrap.panel.Tabs",
      "Roo.data.Connection",
      "Roo.data.DataProxy",
      "Roo.data.Node",
      "Roo.data.Store",
      "Roo.data.Tree",
      "Roo.dd.DragDrop",
      "Roo.form.BasicForm",
      "Roo.grid.AbstractGridView",
      "Roo.grid.AbstractSelectionModel",
      "Roo.grid.ColumnModel",
      "Roo.grid.Grid",
      "Roo.grid.GridView",
      "Roo.menu.Menu",
      "Roo.tree.DefaultSelectionModel",
      "Roo.tree.MultiSelectionModel",
      "Roo.tree.TreeLoader",
      "Roo.util.ClickRepeater",
      "Roo.util.MixedCollection"
    ],
    "Roo.bootstrap.layout.Manager" : [
      "Roo.bootstrap.layout.Border"
    ],
    "Roo.Component" : [
      "Roo.BoxComponent",
      "Roo.CalendarPanel",
      "Roo.ColorPalette",
      "Roo.DatePicker",
      "Roo.Editor",
      "Roo.HtmlEditorCore",
      "Roo.bootstrap.Component",
      "Roo.form.Layout",
      "Roo.menu.BaseItem"
    ],
    "Roo.BorderLayout" : [
      "Roo.ReaderLayout"
    ],
    "Roo.menu.Item" : [
      "Roo.menu.CheckItem"
    ],
    "Roo.bootstrap.form.TextArea" : [
      "Roo.bootstrap.form.HtmlEditor",
      "Roo.bootstrap.form.Markdown"
    ],
    "Roo.form.Field" : [
      "Roo.form.Checkbox",
      "Roo.form.DayPicker",
      "Roo.form.DisplayField",
      "Roo.form.GridField",
      "Roo.form.HtmlEditor",
      "Roo.form.Signature",
      "Roo.form.TextField"
    ],
    "Roo.form.BasicForm" : [
      "Roo.form.Form"
    ],
    "Roo.SplitButton" : [
      "Roo.Toolbar.SplitButton"
    ],
    "Roo.bootstrap.panel.Content" : [
      "Roo.bootstrap.panel.Grid",
      "Roo.bootstrap.panel.Nest"
    ],
    "Roo.BasicDialog" : [
      "Roo.LayoutDialog"
    ],
    "Roo.menu.BaseItem" : [
      "Roo.menu.Adapter",
      "Roo.menu.Item",
      "Roo.menu.Separator",
      "Roo.menu.TextItem"
    ],
    "Roo.BoxComponent" : [
      "Roo.form.ComboBoxArray.Item",
      "Roo.form.Field",
      "Roo.form.TextItem"
    ],
    "Roo.data.Store" : [
      "Roo.data.JsonStore",
      "Roo.data.SimpleStore"
    ],
    "Roo.dd.DDProxy" : [
      "Roo.dd.DragSource",
      "Roo.grid.SplitDragZone"
    ],
    "Roo.menu.Adapter" : [
      "Roo.menu.ColorItem",
      "Roo.menu.DateItem"
    ],
    "Roo.tree.TreePanel" : [
      "Roo.tree.ColumnTree"
    ],
    "Roo.bootstrap.layout.Basic" : [
      "Roo.bootstrap.layout.Region"
    ],
    "Roo.form.TextField" : [
      "Roo.form.ComboBoxArray",
      "Roo.form.Hidden",
      "Roo.form.NumberField",
      "Roo.form.TextArea",
      "Roo.form.TriggerField"
    ],
    "Roo.form.Checkbox" : [
      "Roo.form.Radio"
    ],
    "Roo.bootstrap.form.Input" : [
      "Roo.bootstrap.form.CheckBox",
      "Roo.bootstrap.form.DateField",
      "Roo.bootstrap.form.MonthField",
      "Roo.bootstrap.form.NumberField",
      "Roo.bootstrap.form.RadioSet",
      "Roo.bootstrap.form.SecurePass",
      "Roo.bootstrap.form.TextArea",
      "Roo.bootstrap.form.TimeField",
      "Roo.bootstrap.form.TriggerField"
    ],
    "Roo.grid.AbstractSelectionModel" : [
      "Roo.grid.CellSelectionModel",
      "Roo.grid.RowSelectionModel"
    ],
    "Roo.bootstrap.form.ComboBox" : [
      "Roo.bootstrap.form.MoneyField"
    ],
    "Roo.dd.DDTarget" : [
      "Roo.dd.DropTarget"
    ],
    "Roo.bootstrap.Button" : [
      "Roo.bootstrap.ButtonUploader",
      "Roo.bootstrap.form.CardUploader"
    ],
    "Roo.bootstrap.Component" : [
      "Roo.bootstrap.Alert",
      "Roo.bootstrap.BezierSignature",
      "Roo.bootstrap.Body",
      "Roo.bootstrap.Brick",
      "Roo.bootstrap.Button",
      "Roo.bootstrap.ButtonGroup",
      "Roo.bootstrap.Calendar",
      "Roo.bootstrap.Card",
      "Roo.bootstrap.Column",
      "Roo.bootstrap.Container",
      "Roo.bootstrap.DocumentManager",
      "Roo.bootstrap.DocumentSlider",
      "Roo.bootstrap.DocumentViewer",
      "Roo.bootstrap.Element",
      "Roo.bootstrap.Graph",
      "Roo.bootstrap.Header",
      "Roo.bootstrap.Img",
      "Roo.bootstrap.LayoutMasonry",
      "Roo.bootstrap.LayoutMasonryAuto",
      "Roo.bootstrap.Link",
      "Roo.bootstrap.LocationPicker",
      "Roo.bootstrap.MasonryBrick",
      "Roo.bootstrap.MessageBar",
      "Roo.bootstrap.Modal",
      "Roo.bootstrap.Pagination",
      "Roo.bootstrap.PaginationItem",
      "Roo.bootstrap.Popover",
      "Roo.bootstrap.Progress",
      "Roo.bootstrap.ProgressBar",
      "Roo.bootstrap.Row",
      "Roo.bootstrap.Slider",
      "Roo.bootstrap.TabPanel",
      "Roo.bootstrap.Table",
      "Roo.bootstrap.TableBody",
      "Roo.bootstrap.TableCell",
      "Roo.bootstrap.TableRow",
      "Roo.bootstrap.UploadCropbox",
      "Roo.bootstrap.breadcrumb.Item",
      "Roo.bootstrap.breadcrumb.Nav",
      "Roo.bootstrap.dash.NumberBox",
      "Roo.bootstrap.dash.TabBox",
      "Roo.bootstrap.dash.TabPane",
      "Roo.bootstrap.form.DateSplitField",
      "Roo.bootstrap.form.FieldLabel",
      "Roo.bootstrap.form.Form",
      "Roo.bootstrap.form.Input",
      "Roo.bootstrap.form.Radio",
      "Roo.bootstrap.layout.Manager",
      "Roo.bootstrap.menu.Item",
      "Roo.bootstrap.menu.Menu",
      "Roo.bootstrap.menu.Separator",
      "Roo.bootstrap.nav.Bar",
      "Roo.bootstrap.nav.Group",
      "Roo.bootstrap.nav.Item",
      "Roo.bootstrap.nav.ProgressBar",
      "Roo.bootstrap.nav.ProgressBarItem"
    ],
    "Roo.data.Tree" : [
      "Roo.tree.TreePanel"
    ],
    "Roo.dd.DD" : [
      "Roo.dd.DDProxy"
    ],
    "Roo.form.TextArea" : [
      "Roo.form.FCKeditor"
    ],
    "Roo.grid.Grid" : [
      "Roo.grid.Calendar",
      "Roo.grid.EditorGrid"
    ],
    "Roo.Editor" : [
      "Roo.grid.GridEditor",
      "Roo.tree.TreeEditor"
    ],
    "Roo.bootstrap.nav.Simplebar" : [
      "Roo.bootstrap.PagingToolbar",
      "Roo.bootstrap.PopoverNav",
      "Roo.bootstrap.form.HtmlEditorToolbarStandard",
      "Roo.bootstrap.nav.Headerbar"
    ],
    "Roo.data.Connection" : [
      "Roo.Ajax"
    ],
    "Roo.dd.DragSource" : [
      "Roo.dd.DragZone"
    ],
    "Roo.bootstrap.nav.Bar" : [
      "Roo.bootstrap.nav.Sidebar",
      "Roo.bootstrap.nav.Simplebar"
    ],
    "Roo.BasicLayoutRegion" : [
      "Roo.LayoutRegion"
    ],
    "Roo.data.Node" : [
      "Roo.tree.TreeNode"
    ]
  },
  "tree_children" : [],
  "tree_parent" : [],
  "desc" : "Base class that provides a common interface for publishing events. Subclasses are expected to\nto have a property \"events\" with all the events defined.<br>\nFor example:\n<pre><code>\n Employee = function(name){\n    this.name = name;\n    this.addEvents({\n        \"fired\" : true,\n        \"quit\" : true\n    });\n }\n Roo.extend(Employee, Roo.util.Observable);\n</code></pre>",
  "isSingleton" : false,
  "isStatic" : true,
  "isBuiltin" : false,
  "isAbstract" : false,
  "isBuilderTop" : false,
  "memberOf" : "Observable",
  "example" : "",
  "deprecated" : "",
  "since" : "",
  "see" : "",
  "params" : [
    {
      "name" : "config",
      "type" : "Object",
      "desc" : "properties to use (incuding events / listeners)",
      "isOptional" : false
    }
  ],
  "returns" : [],
  "throws" : "",
  "requires" : "",
  "config" : [
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : ""
    }
  ],
  "methods" : [
    {
      "name" : "purgeListeners",
      "type" : "function",
      "desc" : "Removes all listeners for this object",
      "sig" : "()\n{\n\n}",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [],
      "returns" : []
    },
    {
      "name" : "on",
      "type" : "function",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "sig" : "(eventName, handler, scope, options)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "un",
      "type" : "function",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "sig" : "(eventName, handler, scope)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addEvents",
      "type" : "function",
      "desc" : "Used to define events on this Observable",
      "sig" : "(object)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "releaseCapture",
      "type" : "function",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "sig" : "(o)",
      "static" : true,
      "memberOf" : "",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "removeListener",
      "type" : "function",
      "desc" : "Removes a listener",
      "sig" : "(eventName, handler, scope)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "fireEvent",
      "type" : "function",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "sig" : "(eventName, args)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "returns false if any of the handlers return false otherwise it returns true"
        }
      ]
    },
    {
      "name" : "hasListener",
      "type" : "function",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "sig" : "(eventName)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "True if the event is being listened for, else false"
        }
      ]
    },
    {
      "name" : "capture",
      "type" : "function",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "sig" : "(o, fn, scope)",
      "static" : true,
      "memberOf" : "",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture",
          "isOptional" : false
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn",
          "isOptional" : false
        }
      ],
      "returns" : []
    },
    {
      "name" : "addListener",
      "type" : "function",
      "desc" : "Appends an event handler to this component",
      "sig" : "(eventName, handler, scope, options)",
      "static" : false,
      "memberOf" : "",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "exceptions" : "",
      "requires" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>",
          "isOptional" : false
        }
      ],
      "returns" : []
    }
  ],
  "events" : []
}