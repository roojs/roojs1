{
 "success": true,
 "data": {
  "Array": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "indexOf",
     "sig": "(Object o)",
     "type": "function",
     "desc": "Checks whether or not the specified object exists in the array."
    },
    {
     "name": "map",
     "sig": "(Function function)",
     "type": "function",
     "desc": "Map (JS 1.6 compatibility)"
    },
    {
     "name": "remove",
     "sig": "(Object o)",
     "type": "function",
     "desc": "Removes the specified object from the array.  If the object is not found nothing happens."
    }
   ]
  },
  "Date": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "add",
     "sig": "(String interval, Number value)",
     "type": "function",
     "desc": "Provides a convenient method of performing basic date arithmetic.  This method\ndoes not modify the Date instance being called - it creates and returns\na new Date instance containing the resulting date value.\n\nExamples:\n<pre><code>\n//Basic usage:\nvar dt = new Date('10/29/2006').add(Date.DAY, 5);\ndocument.write(dt); //returns 'Fri Oct 06 2006 00:00:00'\n\n//Negative values will subtract correctly:\nvar dt2 = new Date('10/1/2006').add(Date.DAY, -5);\ndocument.write(dt2); //returns 'Tue Sep 26 2006 00:00:00'\n\n//You can even chain several calls together in one line!\nvar dt3 = new Date('10/1/2006').add(Date.DAY, 5).add(Date.HOUR, 8).add(Date.MINUTE, -30);\ndocument.write(dt3); //returns 'Fri Oct 06 2006 07:30:00'\n </code></pre>"
    },
    {
     "name": "clearTime",
     "sig": "(Boolean clone)",
     "type": "function",
     "desc": "Clears any time information from this date"
    },
    {
     "name": "clone",
     "sig": "()",
     "type": "function",
     "desc": "Creates and returns a new Date instance with the exact same date value as the called instance.\nDates are copied and passed by reference, so if a copied date variable is modified later, the original\nvariable will also be changed.  When the intention is to create a new variable that will not\nmodify the original instance, you should create a clone.\n\nExample of correctly cloning a date:\n<pre><code>\n//wrong way:\nvar orig = new Date('10/1/2006');\nvar copy = orig;\ncopy.setDate(5);\ndocument.write(orig);  //returns 'Thu Oct 05 2006'!\n\n//correct way:\nvar orig = new Date('10/1/2006');\nvar copy = orig.clone();\ncopy.setDate(5);\ndocument.write(orig);  //returns 'Thu Oct 01 2006'\n</code></pre>"
    },
    {
     "name": "format",
     "sig": "(String format)",
     "type": "function",
     "desc": "Formats a date given the supplied format string"
    },
    {
     "name": "getDayOfYear",
     "sig": "()",
     "type": "function",
     "desc": "Get the numeric day number of the year, adjusted for leap year."
    },
    {
     "name": "getDaysInMonth",
     "sig": "()",
     "type": "function",
     "desc": "Get the number of days in the current month, adjusted for leap year."
    },
    {
     "name": "getElapsed",
     "sig": "(Date date)",
     "type": "function",
     "desc": "Returns the number of milliseconds between this date and date"
    },
    {
     "name": "getFirstDateOfMonth",
     "sig": "()",
     "type": "function",
     "desc": "Get the first date of this date's month"
    },
    {
     "name": "getFirstDayOfMonth",
     "sig": "()",
     "type": "function",
     "desc": "Get the first day of the current month, adjusted for leap year.  The returned value\nis the numeric day index within the week (0-6) which can be used in conjunction with\nthe {@link #monthNames} array to retrieve the textual day name.\nExample:\n<pre><code>\nvar dt = new Date('1/10/2007');\ndocument.write(Date.dayNames[dt.getFirstDayOfMonth()]); //output: 'Monday'\n</code></pre>"
    },
    {
     "name": "getGMTColonOffset",
     "sig": "()",
     "type": "function",
     "desc": "Get the offset from GMT of the current date (equivalent to the format specifier 'P')."
    },
    {
     "name": "getGMTOffset",
     "sig": "()",
     "type": "function",
     "desc": "Get the offset from GMT of the current date (equivalent to the format specifier 'O')."
    },
    {
     "name": "getLastDateOfMonth",
     "sig": "()",
     "type": "function",
     "desc": "Get the last date of this date's month"
    },
    {
     "name": "getLastDayOfMonth",
     "sig": "()",
     "type": "function",
     "desc": "Get the last day of the current month, adjusted for leap year.  The returned value\nis the numeric day index within the week (0-6) which can be used in conjunction with\nthe {@link #monthNames} array to retrieve the textual day name.\nExample:\n<pre><code>\nvar dt = new Date('1/10/2007');\ndocument.write(Date.dayNames[dt.getLastDayOfMonth()]); //output: 'Wednesday'\n</code></pre>"
    },
    {
     "name": "getSuffix",
     "sig": "()",
     "type": "function",
     "desc": "Get the English ordinal suffix of the current day (equivalent to the format specifier 'S')."
    },
    {
     "name": "getTimezone",
     "sig": "()",
     "type": "function",
     "desc": "Get the timezone abbreviation of the current date (equivalent to the format specifier 'T')."
    },
    {
     "name": "getWeekOfYear",
     "sig": "()",
     "type": "function",
     "desc": "Get the string representation of the numeric week number of the year\n(equivalent to the format specifier 'W')."
    },
    {
     "name": "isLeapYear",
     "sig": "()",
     "type": "function",
     "desc": "Whether or not the current date is in a leap year."
    },
    {
     "name": "parseDate",
     "sig": "(String input, String format)",
     "type": "function",
     "desc": "Parses the passed string using the specified format. Note that this function expects dates in normal calendar\nformat, meaning that months are 1-based (1 = January) and not zero-based like in JavaScript dates.  Any part of\nthe date format that is not specified will default to the current date value for that part.  Time parts can also\nbe specified, but default to 0.  Keep in mind that the input date string must precisely match the specified format\nstring or the parse operation will fail.\nExample Usage:\n<pre><code>\n//dt = Fri May 25 2007 (current date)\nvar dt = new Date();\n\n//dt = Thu May 25 2006 (today's month/day in 2006)\ndt = Date.parseDate(\"2006\", \"Y\");\n\n//dt = Sun Jan 15 2006 (all date parts specified)\ndt = Date.parseDate(\"2006-1-15\", \"Y-m-d\");\n\n//dt = Sun Jan 15 2006 15:20:01 GMT-0600 (CST)\ndt = Date.parseDate(\"2006-1-15 3:20:01 PM\", \"Y-m-d h:i:s A\" );\n</code></pre>"
    }
   ]
  },
  "Function": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "createCallback",
     "sig": "()",
     "type": "function",
     "desc": "Creates a callback that passes arguments[0], arguments[1], arguments[2], ...\nCall directly on any function. Example: <code>myFunction.createCallback(myarg, myarg2)</code>\nWill create a function that is bound to those 2 args."
    },
    {
     "name": "createDelegate",
     "sig": "(Object obj, Array args, Boolean/Number appendArgs)",
     "type": "function",
     "desc": "Creates a delegate (callback) that sets the scope to obj.\nCall directly on any function. Example: <code>this.myFunction.createDelegate(this)</code>\nWill create a function that is automatically scoped to this."
    },
    {
     "name": "createInterceptor",
     "sig": "(Function fcn, Object scope)",
     "type": "function",
     "desc": "Creates an interceptor function. The passed fcn is called before the original one. If it returns false, the original one is not called.\nThe resulting function returns the results of the original function.\nThe passed fcn is called with the parameters of the original function."
    },
    {
     "name": "createSequence",
     "sig": "(Function fcn, Object scope)",
     "type": "function",
     "desc": "Create a combined function call sequence of the original function + the passed function.\nThe resulting function returns the results of the original function.\nThe passed fcn is called with the parameters of the original function"
    },
    {
     "name": "defer",
     "sig": "(Number millis, Object obj, Array args, Boolean/Number appendArgs)",
     "type": "function",
     "desc": "Calls this function after the number of millseconds specified."
    }
   ]
  },
  "Number": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "constrain",
     "sig": "(Number min, Number max)",
     "type": "function",
     "desc": "Checks whether or not the current number is within a desired range.  If the number is already within the\nrange it is returned, otherwise the min or max value is returned depending on which side of the range is\nexceeded.  Note that this method returns the constrained value but does not change the current number."
    }
   ]
  },
  "Roo": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "addBehaviors",
     "sig": "(Object obj)",
     "type": "function",
     "desc": "Applies event listeners to elements by selectors when the document is ready.\nThe event name is specified with an @ suffix.\n<pre><code>\nRoo.addBehaviors({\n   // add a listener for click on all anchors in element with id foo\n   '#foo a@click' : function(e, t){\n       // do something\n   },\n\n   // add the same listener to multiple selectors (separated by comma BEFORE the @)\n   '#foo a, #bar span.some-class@mouseover' : function(){\n       // do something\n   }\n});\n</code></pre>"
    },
    {
     "name": "apply",
     "sig": "(Object obj, Object config, Object defaults)",
     "type": "function",
     "desc": "Copies all the properties of config to obj."
    },
    {
     "name": "applyIf",
     "sig": "(Object obj, Object config)",
     "type": "function",
     "desc": "Copies all the properties of config to obj if they don't already exist."
    },
    {
     "name": "decode",
     "sig": "()",
     "type": "function",
     "desc": "Shorthand for {@link Roo.util.JSON#decode}"
    },
    {
     "name": "each",
     "sig": "(Array/NodeList/Mixed array, Function fn, Object scope)",
     "type": "function",
     "desc": "Iterates an array calling the passed function with each item, stopping if your function returns false. If the\npassed array is not really an array, your function is called once with it.\nThe supplied function is called with (Object item, Number index, Array allItems)."
    },
    {
     "name": "encode",
     "sig": "()",
     "type": "function",
     "desc": "Shorthand for {@link Roo.util.JSON#encode}"
    },
    {
     "name": "encodeURIComponent",
     "sig": "(String data)",
     "type": "function",
     "desc": "Safe version of encodeURIComponent"
    },
    {
     "name": "escapeRe",
     "sig": "(String str)",
     "type": "function",
     "desc": "Escapes the passed string for use in a regular expression"
    },
    {
     "name": "extend",
     "sig": "(Object subclass, Object superclass, Object overrides)",
     "type": "function",
     "desc": "Extends one class with another class and optionally overrides members with the passed literal. This class\nalso adds the function \"override()\" to the class that can be used to override\nmembers on an instance."
    },
    {
     "name": "factory",
     "sig": "(String classname, String namespace)",
     "type": "function",
     "desc": "Creates namespaces to be used for scoping variables and classes so that they are not global.  Usage:\n<pre><code>\nRoo.factory({ xns: Roo.data, xtype : 'Store', .....});\nRoo.factory(conf, Roo.data);\n</code></pre>"
    },
    {
     "name": "fly",
     "sig": "(String/HTMLElement el, String named)",
     "type": "function",
     "desc": "Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -\nthe dom node can be overwritten by other code.\nShorthand of {@link Roo.Element#fly}"
    },
    {
     "name": "get",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Static method to retrieve Element objects. Uses simple caching to consistently return the same object.\nAutomatically fixes if an object was recreated with the same id via AJAX or DOM.\nShorthand of {@link Roo.Element#get}"
    },
    {
     "name": "getCmp",
     "sig": "(String id)",
     "type": "function",
     "desc": "Shorthand for {@link Roo.ComponentMgr#get}"
    },
    {
     "name": "getDom",
     "sig": "(String/HTMLElement/Roo.Element el)",
     "type": "function",
     "desc": "Return the dom node for the passed string (id), dom node, or Roo.Element"
    },
    {
     "name": "id",
     "sig": "(String/HTMLElement/Element el, String prefix)",
     "type": "function",
     "desc": "Generates unique ids. If the element already has an id, it is unchanged"
    },
    {
     "name": "isEmpty",
     "sig": "(Mixed value, Boolean allowBlank)",
     "type": "function",
     "desc": "Returns true if the passed value is null, undefined or an empty string (optional)."
    },
    {
     "name": "log",
     "sig": "(String|Object string)",
     "type": "function",
     "desc": "Logs to console if it can."
    },
    {
     "name": "namespace",
     "sig": "(String namespace1, String namespace2, String etc)",
     "type": "function",
     "desc": "Creates namespaces to be used for scoping variables and classes so that they are not global.  Usage:\n<pre><code>\nRoo.namespace('Company', 'Company.data');\nCompany.Widget = function() { ... }\nCompany.data.CustomStore = function(config) { ... }\n</code></pre>"
    },
    {
     "name": "onReady",
     "sig": "(Function fn, Object scope, boolean override)",
     "type": "function",
     "desc": "Fires when the document is ready (before onload and before images are loaded).  Shorthand of {@link Roo.EventManager#onDocumentReady}."
    },
    {
     "name": "override",
     "sig": "(Object origclass, Object overrides)",
     "type": "function",
     "desc": "Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.\nUsage:<pre><code>\nRoo.override(MyClass, {\n    newMethod1: function(){\n        // etc.\n    },\n    newMethod2: function(foo){\n        // etc.\n    }\n});\n </code></pre>"
    },
    {
     "name": "query",
     "sig": "(String path, Node root)",
     "type": "function",
     "desc": "Selects an array of DOM nodes by CSS/XPath selector. Shorthand of {@link Roo.DomQuery#select}"
    },
    {
     "name": "select",
     "sig": "(String/Array selector, Boolean unique, HTMLElement/String root)",
     "type": "function",
     "desc": "Selects elements based on the passed CSS selector to enable working on them as 1."
    },
    {
     "name": "selectNode",
     "sig": "(String selector, Node root)",
     "type": "function",
     "desc": "Selects a single element as a Roo Element\nThis is about as close as you can get to jQuery's $('do crazy stuff')"
    },
    {
     "name": "type",
     "sig": "(Mixed object)",
     "type": "function",
     "desc": "Returns the type of object that is passed in. If the object passed in is null or undefined it\nreturn false otherwise it returns one of the following values:<ul>\n<li><b>string</b>: If the object passed is a string</li>\n<li><b>number</b>: If the object passed is a number</li>\n<li><b>boolean</b>: If the object passed is a boolean value</li>\n<li><b>function</b>: If the object passed is a function reference</li>\n<li><b>object</b>: If the object passed is an object</li>\n<li><b>array</b>: If the object passed is an array</li>\n<li><b>regexp</b>: If the object passed is a regular expression</li>\n<li><b>element</b>: If the object passed is a DOM Element</li>\n<li><b>nodelist</b>: If the object passed is a DOM NodeList</li>\n<li><b>textnode</b>: If the object passed is a DOM text node and contains something other than whitespace</li>\n<li><b>whitespace</b>: If the object passed is a DOM text node and contains only whitespace</li>"
    },
    {
     "name": "urlDecode",
     "sig": "(String string, Boolean overwrite)",
     "type": "function",
     "desc": "Takes an encoded URL and and converts it to an object. e.g. Roo.urlDecode(\"foo=1&bar=2\"); would return {foo: 1, bar: 2} or Roo.urlDecode(\"foo=1&bar=2&bar=3&bar=4\", true); would return {foo: 1, bar: [2, 3, 4]}."
    },
    {
     "name": "urlEncode",
     "sig": "(Object o)",
     "type": "function",
     "desc": "Takes an object and converts it to an encoded URL. e.g. Roo.urlEncode({foo: 1, bar: 2}); would return \"foo=1&bar=2\".  Optionally, property values can be arrays, instead of keys and the resulting string that's returned will contain a name/value pair for each array value."
    }
   ]
  },
  "Roo.Ajax": {
   "props": [
    {
     "name": "url",
     "type": "String",
     "desc": "The default URL to be used for requests to the server. (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "extraParams",
     "type": "Object",
     "desc": "An object containing properties which are used as extra parameters to each request made by this object. (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "defaultHeaders",
     "type": "Object",
     "desc": "An object containing request headers which are added to each request made by this object. (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "method",
     "type": "String",
     "desc": "(Optional)  The default HTTP method to be used for requests. (defaults to undefined; if not set but parms are present will use POST, otherwise GET)",
     "memberOf": ""
    },
    {
     "name": "timeout",
     "type": "Number",
     "desc": "(Optional) The timeout in milliseconds to be used for requests. (defaults to 30000)",
     "memberOf": ""
    },
    {
     "name": "autoAbort",
     "type": "Boolean",
     "desc": "(Optional) Whether a new request should abort any pending requests. (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "disableCaching",
     "type": "Boolean",
     "desc": "(Optional)   True to add a unique cache-buster param to GET requests. (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforerequest",
     "sig": "function (conn, options)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a network request is made to retrieve a data object."
    },
    {
     "name": "requestcomplete",
     "sig": "function (conn, response, options)\n{\n\n}",
     "type": "function",
     "desc": "Fires if the request was successfully completed."
    },
    {
     "name": "requestexception",
     "sig": "function (conn, response, options)\n{\n\n}",
     "type": "function",
     "desc": "Fires if an error HTTP status was returned from the server.\nSee {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html} for details of HTTP status codes."
    }
   ],
   "methods": [
    {
     "name": "abort",
     "sig": "(Number transactionId)",
     "type": "function",
     "desc": "Aborts any outstanding request."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isLoading",
     "sig": "(Number transactionId)",
     "type": "function",
     "desc": "Determine whether this object has a request outstanding."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "request",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Sends an HTTP request to a remote server."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.BasicDialog": {
   "props": [
    {
     "name": "autoCreate",
     "type": "Boolean/DomHelper",
     "desc": "True to auto create from scratch, or using a DomHelper Object (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "title",
     "type": "String",
     "desc": "Default text to display in the title bar (defaults to null)",
     "memberOf": ""
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "Width of the dialog in pixels (can also be set via CSS).  Determined by browser if unspecified.",
     "memberOf": ""
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "Height of the dialog in pixels (can also be set via CSS).  Determined by browser if unspecified.",
     "memberOf": ""
    },
    {
     "name": "x",
     "type": "Number",
     "desc": "The default left page coordinate of the dialog (defaults to center screen)",
     "memberOf": ""
    },
    {
     "name": "y",
     "type": "Number",
     "desc": "The default top page coordinate of the dialog (defaults to center screen)",
     "memberOf": ""
    },
    {
     "name": "animateTarget",
     "type": "String/Element",
     "desc": "Id or element from which the dialog should animate while opening\n(defaults to null with no animation)",
     "memberOf": ""
    },
    {
     "name": "resizable",
     "type": "Boolean",
     "desc": "False to disable manual dialog resizing (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "resizeHandles",
     "type": "String",
     "desc": "Which resize handles to display - see the {@link Roo.Resizable} handles config\nproperty for valid values (defaults to 'all')",
     "memberOf": ""
    },
    {
     "name": "minHeight",
     "type": "Number",
     "desc": "The minimum allowable height for a resizable dialog (defaults to 80)",
     "memberOf": ""
    },
    {
     "name": "minWidth",
     "type": "Number",
     "desc": "The minimum allowable width for a resizable dialog (defaults to 200)",
     "memberOf": ""
    },
    {
     "name": "modal",
     "type": "Boolean",
     "desc": "True to show the dialog modally, preventing user interaction with the rest of the page (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "autoScroll",
     "type": "Boolean",
     "desc": "True to allow the dialog body contents to overflow and display scrollbars (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "closable",
     "type": "Boolean",
     "desc": "False to remove the built-in top-right corner close button (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "collapsible",
     "type": "Boolean",
     "desc": "False to remove the built-in top-right corner collapse button (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "constraintoviewport",
     "type": "Boolean",
     "desc": "True to keep the dialog constrained within the visible viewport boundaries (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "syncHeightBeforeShow",
     "type": "Boolean",
     "desc": "True to cause the dimensions to be recalculated before the dialog is shown (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "draggable",
     "type": "Boolean",
     "desc": "False to disable dragging of the dialog within the viewport (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "autoTabs",
     "type": "Boolean",
     "desc": "If true, all elements with class 'x-dlg-tab' will get automatically converted to tabs (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "tabTag",
     "type": "String",
     "desc": "The tag name of tab elements, used when autoTabs = true (defaults to 'div')",
     "memberOf": ""
    },
    {
     "name": "proxyDrag",
     "type": "Boolean",
     "desc": "True to drag a lightweight proxy element rather than the dialog itself, used when\ndraggable = true (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "fixedcenter",
     "type": "Boolean",
     "desc": "True to ensure that anytime the dialog is shown or resized it gets centered (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "shadow",
     "type": "Boolean/String",
     "desc": "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right\nshadow (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "shadowOffset",
     "type": "Number",
     "desc": "The number of pixels to offset the shadow if displayed (defaults to 5)",
     "memberOf": ""
    },
    {
     "name": "buttonAlign",
     "type": "String",
     "desc": "Valid values are \"left,\" \"center\" and \"right\" (defaults to \"right\")",
     "memberOf": ""
    },
    {
     "name": "minButtonWidth",
     "type": "Number",
     "desc": "Minimum width of all dialog buttons (defaults to 75)",
     "memberOf": ""
    },
    {
     "name": "buttons",
     "type": "Array",
     "desc": "Array of buttons",
     "memberOf": ""
    },
    {
     "name": "shim",
     "type": "Boolean",
     "desc": "True to create an iframe shim that prevents selects from showing through (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this dialog is hidden."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this dialog is shown."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this dialog is hidden."
    },
    {
     "name": "keydown",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a key is pressed"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this dialog is moved by the user."
    },
    {
     "name": "resize",
     "sig": "function (_self, width, height)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this dialog is resized by the user."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this dialog is shown."
    }
   ],
   "methods": [
    {
     "name": "addButton",
     "sig": "(String/Object config, Function handler, Object scope)",
     "type": "function",
     "desc": "Adds a button to the footer section of the dialog."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addKeyListener",
     "sig": "(Number/Array/Object key, Function fn, Object scope)",
     "type": "function",
     "desc": "Adds a key listener for when this dialog is displayed.  This allows you to hook in a function that will be\nexecuted in response to a particular key being pressed while the dialog is active."
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "alignTo",
     "sig": "(String/HTMLElement/Roo.Element element, String position, Array offsets)",
     "type": "function",
     "desc": "Aligns the dialog to the specified element"
    },
    {
     "name": "anchorTo",
     "sig": "(String/HTMLElement/Roo.Element element, String position, Array offsets, Boolean/Number monitorScroll)",
     "type": "function",
     "desc": "Anchors an element to another element and realigns it when the window is resized."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "center",
     "sig": "()",
     "type": "function",
     "desc": "Centers this dialog in the viewport"
    },
    {
     "name": "collapse",
     "sig": "()",
     "type": "function",
     "desc": "Collapses the dialog to its minimized state (only the title bar is visible).\nEquivalent to the user clicking the collapse dialog button."
    },
    {
     "name": "destroy",
     "sig": "(Boolean removeEl)",
     "type": "function",
     "desc": "Destroys this dialog and all its supporting elements (including any tabs, shim,\nshadow, proxy, mask, etc.)  Also removes all event listeners."
    },
    {
     "name": "expand",
     "sig": "()",
     "type": "function",
     "desc": "Expands a collapsed dialog back to its normal state.  Equivalent to the user\nclicking the expand dialog button."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "()",
     "type": "function",
     "desc": "Focuses the dialog.  If a defaultButton is set, it will receive focus, otherwise the\ndialog itself will receive focus."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the element for this dialog"
    },
    {
     "name": "getTabs",
     "sig": "()",
     "type": "function",
     "desc": "Returns the TabPanel component (creates it if it doesn't exist).\nNote: If you wish to simply check for the existence of tabs without creating them,\ncheck for a null 'tabs' property."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "(Function callback)",
     "type": "function",
     "desc": "Hides the dialog."
    },
    {
     "name": "initTabs",
     "sig": "()",
     "type": "function",
     "desc": "Reinitializes the tabs component, clearing out old tabs and finding new ones."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the dialog is visible"
    },
    {
     "name": "moveTo",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Moves the dialog's top-left corner to the specified point"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "resizeTo",
     "sig": "(Number width, Number height)",
     "type": "function",
     "desc": "Resizes the dialog."
    },
    {
     "name": "restoreState",
     "sig": "()",
     "type": "function",
     "desc": "Restores the previous state of the dialog if Roo.state is configured."
    },
    {
     "name": "setContentSize",
     "sig": "(Number width, Number height)",
     "type": "function",
     "desc": "Resizes the dialog to fit the specified content size."
    },
    {
     "name": "setDefaultButton",
     "sig": "(Roo.BasicDialog.Button btn)",
     "type": "function",
     "desc": "Sets the default button to be focused when the dialog is displayed."
    },
    {
     "name": "setTitle",
     "sig": "(String text)",
     "type": "function",
     "desc": "Sets the dialog title text"
    },
    {
     "name": "show",
     "sig": "(String/HTMLElement/Roo.Element animateTarget)",
     "type": "function",
     "desc": "Shows the dialog."
    },
    {
     "name": "toBack",
     "sig": "()",
     "type": "function",
     "desc": "Sends this dialog to the back (under) of any other visible dialogs"
    },
    {
     "name": "toFront",
     "sig": "()",
     "type": "function",
     "desc": "Brings this dialog to the front of any other visible dialogs"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.BasicLayoutRegion": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforeremove",
     "sig": "function (_self, panel, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a panel is removed (or closed). To cancel the removal set \"e.cancel = true\" on the event argument."
    },
    {
     "name": "collapsed",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this region is collapsed."
    },
    {
     "name": "expanded",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this region is expanded."
    },
    {
     "name": "invalidated",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the layout for this region is changed."
    },
    {
     "name": "panelactivated",
     "sig": "function (_self, panel)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a panel is activated."
    },
    {
     "name": "paneladded",
     "sig": "function (_self, panel)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a panel is added."
    },
    {
     "name": "panelremoved",
     "sig": "function (_self, panel)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a panel is removed."
    },
    {
     "name": "resized",
     "sig": "function (_self, newSize)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the user resizes this region."
    },
    {
     "name": "slidehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this region slides out of view."
    },
    {
     "name": "slideshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this region is slid into view."
    },
    {
     "name": "visibilitychange",
     "sig": "function (_self, visibility)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this region is shown or hidden"
    }
   ],
   "methods": [
    {
     "name": "add",
     "sig": "(ContentPanel... panel)",
     "type": "function",
     "desc": "Add the passed ContentPanel(s)"
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getActivePanel",
     "sig": "()",
     "type": "function",
     "desc": "Get the active panel for this region."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the container element for this region."
    },
    {
     "name": "getPanel",
     "sig": "(Number/String/ContentPanel panel)",
     "type": "function",
     "desc": "Returns the panel specified or null if it's not in this region."
    },
    {
     "name": "getPosition",
     "sig": "()",
     "type": "function",
     "desc": "Returns this regions position (north/south/east/west/center)."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hasPanel",
     "sig": "(Number/String/ContentPanel panel)",
     "type": "function",
     "desc": "Returns true if the panel is in this region."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this region is currently visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "remove",
     "sig": "(Number/String/ContentPanel panel, Boolean preservePanel)",
     "type": "function",
     "desc": "Removes the specified panel. If preservePanel is not true (either here or in the config), the panel is destroyed."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "resizeTo",
     "sig": "(Number newSize)",
     "type": "function",
     "desc": "Resizes the region to the specified size. For vertical regions (west, east) this adjusts \nthe width, for horizontal (north, south) the height."
    },
    {
     "name": "showPanel",
     "sig": "(Number/String/ContentPanel panelId)",
     "type": "function",
     "desc": "Show the specified panel."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.BorderLayout": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "layout",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a layout is performed."
    },
    {
     "name": "regioncollapsed",
     "sig": "function (region)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a region is collapsed."
    },
    {
     "name": "regionexpanded",
     "sig": "function (region)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a region is expanded."
    },
    {
     "name": "regionresized",
     "sig": "function (region, newSize)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the user resizes a region."
    }
   ],
   "methods": [
    {
     "name": "add",
     "sig": "(String target, Roo.ContentPanel panel)",
     "type": "function",
     "desc": "Adds a ContentPanel (or subclass) to this layout."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addRegion",
     "sig": "(String target, Object config)",
     "type": "function",
     "desc": "Creates and adds a new region if it doesn't already exist."
    },
    {
     "name": "addxtype",
     "sig": "(Object cfg)",
     "type": "function",
     "desc": "Adds a xtype elements to the layout.\n<pre><code>\n\nlayout.addxtype({\n       xtype : 'ContentPanel',\n       region: 'west',\n       items: [ .... ]\n   }\n);\n\nlayout.addxtype({\n        xtype : 'NestedLayoutPanel',\n        region: 'west',\n        layout: {\n           center: { },\n           west: { }   \n        },\n        items : [ ... list of content panels or nested layout panels.. ]\n   }\n);\n</code></pre>"
    },
    {
     "name": "batchAdd",
     "sig": "(Object regions)",
     "type": "function",
     "desc": "Adds a batch of multiple ContentPanels dynamically by passing a special regions config object.  This config\nobject should contain properties for each region to add ContentPanels to, and each property's value should be\na valid ContentPanel config object.  Example:\n<pre><code>\n// Create the main layout\nvar layout = new Roo.BorderLayout('main-ct', {\n    west: {\n        split:true,\n        minSize: 175,\n        titlebar: true\n    },\n    center: {\n        title:'Components'\n    }\n}, 'main-ct');\n\n// Create and add multiple ContentPanels at once via configs\nlayout.batchAdd({\n   west: {\n       id: 'source-files',\n       autoCreate:true,\n       title:'Ext Source Files',\n       autoScroll:true,\n       fitToFrame:true\n   },\n   center : {\n       el: cview,\n       autoScroll:true,\n       fitToFrame:true,\n       toolbar: tb,\n       resizeEl:'cbody'\n   }\n});\n</code></pre>"
    },
    {
     "name": "beginUpdate",
     "sig": "()",
     "type": "function",
     "desc": "Suspend the LayoutManager from doing auto-layouts while\nmaking multiple add or remove calls"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "create",
     "sig": "( config,  targetEl)",
     "type": "function",
     "desc": "Shortcut for creating a new BorderLayout object and adding one or more ContentPanels to it in a single step, handling\nthe beginUpdate and endUpdate calls internally.  The key to this method is the <b>panels</b> property that can be\nprovided with each region config, which allows you to add ContentPanel configs in addition to the region configs\nduring creation.  The following code is equivalent to the constructor-based example at the beginning of this class:\n<pre><code>\n// shorthand\nvar CP = Roo.ContentPanel;\n\nvar layout = Roo.BorderLayout.create({\n    north: {\n        initialSize: 25,\n        titlebar: false,\n        panels: [new CP(\"north\", \"North\")]\n    },\n    west: {\n        split:true,\n        initialSize: 200,\n        minSize: 175,\n        maxSize: 400,\n        titlebar: true,\n        collapsible: true,\n        panels: [new CP(\"west\", {title: \"West\"})]\n    },\n    east: {\n        split:true,\n        initialSize: 202,\n        minSize: 175,\n        maxSize: 400,\n        titlebar: true,\n        collapsible: true,\n        panels: [new CP(\"autoTabs\", {title: \"Auto Tabs\", closable: true})]\n    },\n    south: {\n        split:true,\n        initialSize: 100,\n        minSize: 100,\n        maxSize: 200,\n        titlebar: true,\n        collapsible: true,\n        panels: [new CP(\"south\", {title: \"South\", closable: true})]\n    },\n    center: {\n        titlebar: true,\n        autoScroll:true,\n        resizeTabs: true,\n        minTabWidth: 50,\n        preferredTabWidth: 150,\n        panels: [\n            new CP(\"center1\", {title: \"Close Me\", closable: true}),\n            new CP(\"center2\", {title: \"Center Panel\", closable: false})\n        ]\n    }\n}, document.body);\n\nlayout.getRegion(\"center\").showPanel(\"center1\");\n</code></pre>"
    },
    {
     "name": "endUpdate",
     "sig": "(Boolean noLayout)",
     "type": "function",
     "desc": "Restore auto-layouts and optionally disable the manager from performing a layout"
    },
    {
     "name": "findPanel",
     "sig": "(String panelId)",
     "type": "function",
     "desc": "Searches all regions for a panel with the specified id"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the Element this layout is bound to."
    },
    {
     "name": "getRegion",
     "sig": "(String target)",
     "type": "function",
     "desc": "Returns the specified region."
    },
    {
     "name": "getViewSize",
     "sig": "()",
     "type": "function",
     "desc": "Returns the size of the current view. This method normalizes document.body and element embedded layouts and\nperforms box-model adjustments."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isUpdating",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this layout is currently being updated"
    },
    {
     "name": "layout",
     "sig": "()",
     "type": "function",
     "desc": "Performs a layout update."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "remove",
     "sig": "(String target, Number/String/Roo.ContentPanel panel)",
     "type": "function",
     "desc": "Remove a ContentPanel (or subclass) to this layout."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "restoreState",
     "sig": "(Roo.state.Provider provider)",
     "type": "function",
     "desc": "Restores this layout's state using Roo.state.Manager or the state provided by the passed provider."
    },
    {
     "name": "showPanel",
     "sig": "(String/ContentPanel panelId)",
     "type": "function",
     "desc": "Searches all regions for a panel with the specified id and activates (shows) it."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.BoxComponent": {
   "props": [
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": ""
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": ""
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    }
   ]
  },
  "Roo.Button": {
   "props": [
    {
     "name": "text",
     "type": "String",
     "desc": "The button text",
     "memberOf": ""
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "The path to an image to display in the button (the image will be set as the background-image\nCSS property of the button by default, so if you want a mixed icon/text button, set cls:\"x-btn-text-icon\")",
     "memberOf": ""
    },
    {
     "name": "handler",
     "type": "Function",
     "desc": "A function called when the button is clicked (can be used instead of click event)",
     "memberOf": ""
    },
    {
     "name": "scope",
     "type": "Object",
     "desc": "The scope of the handler",
     "memberOf": ""
    },
    {
     "name": "minWidth",
     "type": "Number",
     "desc": "The minimum width for this button (used to give a set of buttons a common width)",
     "memberOf": ""
    },
    {
     "name": "tooltip",
     "type": "String/Object",
     "desc": "The tooltip for the button - can be a string or QuickTips config object",
     "memberOf": ""
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "True to start hidden (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to start disabled (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "pressed",
     "type": "Boolean",
     "desc": "True to start pressed (only if enableToggle = true)",
     "memberOf": ""
    },
    {
     "name": "toggleGroup",
     "type": "String",
     "desc": "The group this toggle button is a member of (only 1 per group can be pressed, only\n   applies if enableToggle = true)",
     "memberOf": ""
    },
    {
     "name": "renderTo",
     "type": "String/HTMLElement/Element",
     "desc": "The element to append the button to",
     "memberOf": ""
    },
    {
     "name": "repeat",
     "type": "Boolean/Object",
     "desc": "True to repeat fire the click event while the mouse is down. This can also be\n  an {@link Roo.util.ClickRepeater} config object (defaults to false).",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the button's main element.",
     "memberOf": ""
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The DOM tabIndex for this button (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "enableToggle",
     "type": "Boolean",
     "desc": "True to enable pressed/not pressed toggling (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "menu",
     "type": "Mixed",
     "desc": "Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).",
     "memberOf": ""
    },
    {
     "name": "menuAlign",
     "type": "String",
     "desc": "The position to align the menu to (see {@link Roo.Element#alignTo} for more details, defaults to 'tl-bl?').",
     "memberOf": ""
    },
    {
     "name": "iconCls",
     "type": "String",
     "desc": "A css class which sets a background image to be used as the icon for this button (defaults to undefined).",
     "memberOf": ""
    },
    {
     "name": "type",
     "type": "String",
     "desc": "The button's type, corresponding to the DOM input element type attribute.  Either \"submit,\" \"reset\" or \"button\" (default).",
     "memberOf": ""
    },
    {
     "name": "clickEvent",
     "type": "String",
     "desc": "The type of event to map to the button's event handler (defaults to 'click')",
     "memberOf": ""
    },
    {
     "name": "handleMouseEvents",
     "type": "Boolean",
     "desc": "False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "tooltipType",
     "type": "String",
     "desc": "The type of tooltip to use. Either \"qtip\" (default) for QuickTips or \"title\" for title attribute.",
     "memberOf": ""
    },
    {
     "name": "template",
     "type": "Roo.Template",
     "desc": "(Optional)\nAn {@link Roo.Template} with which to create the Button's main element. This Template must\ncontain numeric substitution parameter 0 if it is to display the tRoo property. Changing the template could\nrequire code modifications if required elements (e.g. a button) aren't present.",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "click",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this button is clicked"
    },
    {
     "name": "mouseout",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse exits the button"
    },
    {
     "name": "mouseover",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse hovers over the button"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the button is rendered"
    },
    {
     "name": "toggle",
     "sig": "function (_self, pressed)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the \"pressed\" state of this button changes (only if enableToggle = true)"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this Button and removes any listeners."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this button"
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this button"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "()",
     "type": "function",
     "desc": "Focus the button"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the button's underlying element"
    },
    {
     "name": "getText",
     "sig": "()",
     "type": "function",
     "desc": "Gets the text for this button"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this button"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean enabled)",
     "type": "function",
     "desc": "Convenience function for boolean enable/disable"
    },
    {
     "name": "setHandler",
     "sig": "(Function handler, Object scope)",
     "type": "function",
     "desc": "Assigns this button's click handler"
    },
    {
     "name": "setText",
     "sig": "(String text)",
     "type": "function",
     "desc": "Sets this button's text"
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function for boolean show/hide"
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this button"
    },
    {
     "name": "toggle",
     "sig": "(Boolean state)",
     "type": "function",
     "desc": "If a state it passed, it becomes the pressed state otherwise the current state is toggled."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.CalendarPanel": {
   "props": [
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "eventclick",
     "sig": "function (_self, )\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse click an"
    },
    {
     "name": "evententer",
     "sig": "function (_self, Event)\n{\n\n}",
     "type": "function",
     "desc": "Fires when mouse over an event"
    },
    {
     "name": "eventleave",
     "sig": "function (_self, )\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse leaves an"
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "monthchange",
     "sig": "function (_self, date)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the displayed month changes"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "rendered",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the grid is rendered"
    },
    {
     "name": "select",
     "sig": "function (_self, date)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a date is selected"
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.ColorPalette": {
   "props": [
    {
     "name": "itemCls",
     "type": "String",
     "desc": "The CSS class to apply to the containing element (defaults to \"x-color-palette\")",
     "memberOf": ""
    },
    {
     "name": "value",
     "type": "String",
     "desc": "The initial color to highlight (should be a valid 6-digit color hex code without the # symbol).  Note that\nthe hex codes are case-sensitive.",
     "memberOf": ""
    },
    {
     "name": "allowReselect",
     "type": "Boolean",
     "desc": "If set to true then reselecting a color that is already selected fires the selection event",
     "memberOf": ""
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "select",
     "sig": "function (_self, color)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a color is selected"
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "select",
     "sig": "(String color)",
     "type": "function",
     "desc": "Selects the specified color in the palette (fires the select event)"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.Component": {
   "props": [
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": ""
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": ""
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.ComponentMgr": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "get",
     "sig": "(String id)",
     "type": "function",
     "desc": "Returns a component by id"
    },
    {
     "name": "onAvailable",
     "sig": "(String id, Funtction fn, Object scope)",
     "type": "function",
     "desc": "Registers a function that will be called when a specified component is added to ComponentMgr"
    },
    {
     "name": "register",
     "sig": "(Roo.Component c)",
     "type": "function",
     "desc": "Registers a component."
    },
    {
     "name": "unregister",
     "sig": "(Roo.Component c)",
     "type": "function",
     "desc": "Unregisters a component."
    }
   ]
  },
  "Roo.CompositeElement": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "add",
     "sig": "(String/Array els)",
     "type": "function",
     "desc": "Adds elements to this composite."
    },
    {
     "name": "clear",
     "sig": "()",
     "type": "function",
     "desc": "Removes all elements."
    },
    {
     "name": "contains",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this composite contains the passed element"
    },
    {
     "name": "each",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Calls the passed function passing (el, this, index) for each element in this composite."
    },
    {
     "name": "fill",
     "sig": "(String/Array els)",
     "type": "function",
     "desc": "Clears this composite and adds the elements returned by the passed selector."
    },
    {
     "name": "filter",
     "sig": "(String selector, Boolean inverse)",
     "type": "function",
     "desc": "Filters this composite to only elements that match the passed selector."
    },
    {
     "name": "first",
     "sig": "()",
     "type": "function",
     "desc": "Returns the first Element"
    },
    {
     "name": "getCount",
     "sig": "()",
     "type": "function",
     "desc": "Returns the number of elements in this composite"
    },
    {
     "name": "indexOf",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this composite contains the passed element"
    },
    {
     "name": "item",
     "sig": "(Number index)",
     "type": "function",
     "desc": "Returns the Element object at the specified index"
    },
    {
     "name": "last",
     "sig": "()",
     "type": "function",
     "desc": "Returns the last Element"
    },
    {
     "name": "removeElement",
     "sig": "(Mixed el, Boolean removeDom)",
     "type": "function",
     "desc": "Removes the specified element(s)."
    },
    {
     "name": "replaceElement",
     "sig": "(String/HTMLElement/Element/Number el, String/HTMLElement/Element replacement, Boolean domReplace)",
     "type": "function",
     "desc": "Replaces the specified element with the passed element."
    }
   ]
  },
  "Roo.CompositeElementLite": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "add",
     "sig": "(String/Array els)",
     "type": "function",
     "desc": "Adds elements to this composite."
    },
    {
     "name": "clear",
     "sig": "()",
     "type": "function",
     "desc": "Removes all elements."
    },
    {
     "name": "contains",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this composite contains the passed element"
    },
    {
     "name": "each",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Calls the passed function passing (el, this, index) for each element in this composite. <b>The element\npassed is the flyweight (shared) Roo.Element instance, so if you require a\na reference to the dom node, use el.dom.</b>"
    },
    {
     "name": "fill",
     "sig": "(String/Array els)",
     "type": "function",
     "desc": "Clears this composite and adds the elements returned by the passed selector."
    },
    {
     "name": "filter",
     "sig": "(String selector, Boolean inverse)",
     "type": "function",
     "desc": "Filters this composite to only elements that match the passed selector."
    },
    {
     "name": "first",
     "sig": "()",
     "type": "function",
     "desc": "Returns the first Element"
    },
    {
     "name": "getCount",
     "sig": "()",
     "type": "function",
     "desc": "Returns the number of elements in this composite"
    },
    {
     "name": "indexOf",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this composite contains the passed element"
    },
    {
     "name": "item",
     "sig": "(Number index)",
     "type": "function",
     "desc": "Returns a flyweight Element of the dom element object at the specified index"
    },
    {
     "name": "last",
     "sig": "()",
     "type": "function",
     "desc": "Returns the last Element"
    },
    {
     "name": "removeElement",
     "sig": "(Mixed el, Boolean removeDom)",
     "type": "function",
     "desc": "Removes the specified element(s)."
    },
    {
     "name": "replaceElement",
     "sig": "(String/HTMLElement/Element/Number el, String/HTMLElement/Element replacement, Boolean domReplace)",
     "type": "function",
     "desc": "Replaces the specified element with the passed element."
    }
   ]
  },
  "Roo.ContentPanel": {
   "props": [
    {
     "name": "fitToFrame",
     "type": "Boolean",
     "desc": "True for this panel to adjust its size to fit when the region resizes  (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "fitContainer",
     "type": "Boolean",
     "desc": "When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "Boolean/Object",
     "desc": "True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create",
     "memberOf": ""
    },
    {
     "name": "closable",
     "type": "Boolean",
     "desc": "True if the panel can be closed/removed",
     "memberOf": ""
    },
    {
     "name": "background",
     "type": "Boolean",
     "desc": "True if the panel should not be activated when it is added (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "resizeEl",
     "type": "String/HTMLElement/Element",
     "desc": "An element to resize if {@link #fitToFrame} is true (instead of this panel's element)",
     "memberOf": ""
    },
    {
     "name": "toolbar",
     "type": "Toolbar",
     "desc": "A toolbar for this panel",
     "memberOf": ""
    },
    {
     "name": "autoScroll",
     "type": "Boolean",
     "desc": "True to scroll overflow in this panel (use with {@link #fitToFrame})",
     "memberOf": ""
    },
    {
     "name": "title",
     "type": "String",
     "desc": "The title for this panel",
     "memberOf": ""
    },
    {
     "name": "adjustments",
     "type": "Array",
     "desc": "Values to <b>add</b> to the width/height when doing a {@link #fitToFrame} (default is [0, 0])",
     "memberOf": ""
    },
    {
     "name": "url",
     "type": "String",
     "desc": "Calls {@link #setUrl} with this value",
     "memberOf": ""
    },
    {
     "name": "region",
     "type": "String",
     "desc": "which region to put this panel on (when used with xtype constructors)",
     "memberOf": "",
     "optvals": [
      "center",
      "north",
      "south",
      "east",
      "west"
     ]
    },
    {
     "name": "params",
     "type": "String/Object",
     "desc": "When used with {@link #url}, calls {@link #setUrl} with this value",
     "memberOf": ""
    },
    {
     "name": "loadOnce",
     "type": "Boolean",
     "desc": "When used with {@link #url}, calls {@link #setUrl} with this value",
     "memberOf": ""
    },
    {
     "name": "content",
     "type": "String",
     "desc": "Raw content to fill content panel with (uses setContent on construction.)",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this panel is activated."
    },
    {
     "name": "deactivate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this panel is activated."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this tab is created"
    },
    {
     "name": "resize",
     "sig": "function (_self, width, height)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this panel is resized if fitToFrame is true."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addxtype",
     "sig": "(Object cfg)",
     "type": "function",
     "desc": "Adds a xtype elements to the panel - currently only supports Forms, View, JsonView.\n<pre><code>\n\nlayout.addxtype({\n       xtype : 'Form',\n       items: [ .... ]\n   }\n);\n\n</code></pre>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this panel"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns this panel's element - used by regiosn to add."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns this panel's id"
    },
    {
     "name": "getTitle",
     "sig": "()",
     "type": "function",
     "desc": "Returns this panel's title"
    },
    {
     "name": "getToolbar",
     "sig": "()",
     "type": "function",
     "desc": "Returns the toolbar for this Panel if one was configured."
    },
    {
     "name": "getUpdateManager",
     "sig": "()",
     "type": "function",
     "desc": "Get the {@link Roo.UpdateManager} for this panel. Enables you to perform Ajax updates."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isClosable",
     "sig": "()",
     "type": "function",
     "desc": "Returns true is this panel was configured to be closable"
    },
    {
     "name": "load",
     "sig": "(Object/String/Function url, String/Object params, Function callback, Boolean discardUrl)",
     "type": "function",
     "desc": "Loads this content panel immediately with content from XHR. Note: to delay loading until the panel is activated, use {@link #setUrl}."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "refresh",
     "sig": "()",
     "type": "function",
     "desc": "Force a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the {@link #setUrl} method has not been called.\n  This does not activate the panel, just updates its content."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setContent",
     "sig": "(String content, Boolean loadScripts)",
     "type": "function",
     "desc": "Updates this panel's element"
    },
    {
     "name": "setTitle",
     "sig": "(String title)",
     "type": "function",
     "desc": "Set this panel's title"
    },
    {
     "name": "setUrl",
     "sig": "(String/Function url, String/Object params, Boolean loadOnce)",
     "type": "function",
     "desc": "Set a URL to be used to load the content for this panel. When this panel is activated, the content will be loaded from that URL."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.DDView": {
   "props": [
    {
     "name": "dragGroup",
     "type": "String/Array",
     "desc": "The ddgroup name(s) for the View's DragZone.",
     "memberOf": ""
    },
    {
     "name": "dropGroup",
     "type": "String/Array",
     "desc": "The ddgroup name(s) for the View's DropZone.",
     "memberOf": ""
    },
    {
     "name": "copy",
     "type": "Boolean",
     "desc": "Causes drag operations to copy nodes rather than move.",
     "memberOf": ""
    },
    {
     "name": "allowCopy",
     "type": "Boolean",
     "desc": "Causes ctrl/drag operations to copy nodes rather than move.",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "getContextMenu",
     "sig": "()",
     "type": "function",
     "desc": "Return the context menu for this DDView."
    },
    {
     "name": "getDragData",
     "sig": "()",
     "type": "function",
     "desc": "Create the drag data which consists of an object which has the property \"ddel\" as\n\tthe drag proxy element."
    },
    {
     "name": "getDropPoint",
     "sig": "()",
     "type": "function",
     "desc": "Decide whether to drop above or below a View node."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Allows this class to be an Roo.form.Field so it can be found using {@link Roo.form.BasicForm#findField}."
    },
    {
     "name": "getTargetFromEvent",
     "sig": "()",
     "type": "function",
     "desc": "Part of the Roo.dd.DropZone interface. If no target node is found, the\n\twhole Element becomes the target, and this causes the drop gesture to append."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": ""
    },
    {
     "name": "onDblClick",
     "sig": "()",
     "type": "function",
     "desc": "Double click fires the event, but also, if this is draggable, and there is only one other\n\trelated DropZone, it transfers the selected node."
    },
    {
     "name": "remove",
     "sig": "(Array/Number selectedIndices)",
     "type": "function",
     "desc": "Remove {@link Roo.data.Record}s at the specified indices."
    },
    {
     "name": "setDeletable",
     "sig": "(String imageUrl)",
     "type": "function",
     "desc": "Utility method. Add a delete option to the DDView's context menu."
    },
    {
     "name": "setDraggable",
     "sig": "()",
     "type": "function",
     "desc": "Specify to which ddGroup items in this DDView may be dragged."
    },
    {
     "name": "setDroppable",
     "sig": "()",
     "type": "function",
     "desc": "Specify from which ddGroup this DDView accepts drops."
    },
    {
     "name": "setValue",
     "sig": "()",
     "type": "function",
     "desc": "Loads the View from a JSON string representing the Records to put into the Store."
    }
   ]
  },
  "Roo.DatePicker": {
   "props": [
    {
     "name": "todayText",
     "type": "String",
     "desc": "The text to display on the button that selects the current date (defaults to \"Today\")",
     "memberOf": ""
    },
    {
     "name": "okText",
     "type": "String",
     "desc": "The text to display on the ok button",
     "memberOf": ""
    },
    {
     "name": "cancelText",
     "type": "String",
     "desc": "The text to display on the cancel button",
     "memberOf": ""
    },
    {
     "name": "todayTip",
     "type": "String",
     "desc": "The tooltip to display for the button that selects the current date (defaults to \"{current date} (Spacebar)\")",
     "memberOf": ""
    },
    {
     "name": "minDate",
     "type": "Date",
     "desc": "Minimum allowable date (JavaScript date object, defaults to null)",
     "memberOf": ""
    },
    {
     "name": "maxDate",
     "type": "Date",
     "desc": "Maximum allowable date (JavaScript date object, defaults to null)",
     "memberOf": ""
    },
    {
     "name": "minText",
     "type": "String",
     "desc": "The error text to display if the minDate validation fails (defaults to \"This date is before the minimum date\")",
     "memberOf": ""
    },
    {
     "name": "maxText",
     "type": "String",
     "desc": "The error text to display if the maxDate validation fails (defaults to \"This date is after the maximum date\")",
     "memberOf": ""
    },
    {
     "name": "format",
     "type": "String",
     "desc": "The default date format string which can be overriden for localization support.  The format must be\nvalid according to {@link Date#parseDate} (defaults to 'm/d/y').",
     "memberOf": ""
    },
    {
     "name": "disabledDays",
     "type": "Array",
     "desc": "An array of days to disable, 0-based. For example, [0, 6] disables Sunday and Saturday (defaults to null).",
     "memberOf": ""
    },
    {
     "name": "disabledDaysText",
     "type": "String",
     "desc": "The tooltip to display when the date falls on a disabled day (defaults to \"\")",
     "memberOf": ""
    },
    {
     "name": "disabledDatesRE",
     "type": "RegExp",
     "desc": "JavaScript regular expression used to disable a pattern of dates (defaults to null)",
     "memberOf": ""
    },
    {
     "name": "disabledDatesText",
     "type": "String",
     "desc": "The tooltip text to display when the date falls on a disabled date (defaults to \"\")",
     "memberOf": ""
    },
    {
     "name": "constrainToViewport",
     "type": "Boolean",
     "desc": "True to constrain the date picker to the viewport (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "monthNames",
     "type": "Array",
     "desc": "An array of textual month names which can be overriden for localization support (defaults to Date.monthNames)",
     "memberOf": ""
    },
    {
     "name": "dayNames",
     "type": "Array",
     "desc": "An array of textual day names which can be overriden for localization support (defaults to Date.dayNames)",
     "memberOf": ""
    },
    {
     "name": "nextText",
     "type": "String",
     "desc": "The next month navigation button tooltip (defaults to 'Next Month (Control+Right)')",
     "memberOf": ""
    },
    {
     "name": "prevText",
     "type": "String",
     "desc": "The previous month navigation button tooltip (defaults to 'Previous Month (Control+Left)')",
     "memberOf": ""
    },
    {
     "name": "monthYearText",
     "type": "String",
     "desc": "The header month selector tooltip (defaults to 'Choose a month (Control+Up/Down to move years)')",
     "memberOf": ""
    },
    {
     "name": "startDay",
     "type": "Number",
     "desc": "Day index at which the week should begin, 0-based (defaults to 0, which is Sunday)",
     "memberOf": ""
    },
    {
     "name": "showClear",
     "type": "Bool",
     "desc": "Show a clear button (usefull for date form elements that can be blank.)",
     "memberOf": ""
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "monthchange",
     "sig": "function (_self, date)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the displayed month changes"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "select",
     "sig": "function (_self, date)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a date is selected"
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current selected value of the date field"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setValue",
     "sig": "(Date value)",
     "type": "function",
     "desc": "Sets the value of the date field"
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.DialogManager": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "bringToFront",
     "sig": "(String/Object dlg)",
     "type": "function",
     "desc": "Brings the specified dialog to the front"
    },
    {
     "name": "get",
     "sig": "(String/Object id)",
     "type": "function",
     "desc": "Gets a registered dialog by id"
    },
    {
     "name": "hideAll",
     "sig": "()",
     "type": "function",
     "desc": "Hides all dialogs"
    },
    {
     "name": "sendToBack",
     "sig": "(String/Object dlg)",
     "type": "function",
     "desc": "Sends the specified dialog to the back"
    }
   ]
  },
  "Roo.DomHelper": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "append",
     "sig": "(String/HTMLElement/Element el, Object/String o, Boolean returnElement)",
     "type": "function",
     "desc": "Creates new Dom element(s) and appends them to el"
    },
    {
     "name": "applyStyles",
     "sig": "(String/HTMLElement el, String/Object/Function styles)",
     "type": "function",
     "desc": "Applies a style specification to an element"
    },
    {
     "name": "createTemplate",
     "sig": "(Object o)",
     "type": "function",
     "desc": "Creates a new Roo.DomHelper.Template from the Dom object spec"
    },
    {
     "name": "insertAfter",
     "sig": "(String/HTMLElement/Element el, Object o, Boolean returnElement)",
     "type": "function",
     "desc": "Creates new Dom element(s) and inserts them after el"
    },
    {
     "name": "insertBefore",
     "sig": "(String/HTMLElement/Element el, Object/String o, Boolean returnElement)",
     "type": "function",
     "desc": "Creates new Dom element(s) and inserts them before el"
    },
    {
     "name": "insertFirst",
     "sig": "(String/HTMLElement/Element el, Object/String o, Boolean returnElement)",
     "type": "function",
     "desc": "Creates new Dom element(s) and inserts them as the first child of el"
    },
    {
     "name": "insertHtml",
     "sig": "(String where, HTMLElement el, String html)",
     "type": "function",
     "desc": "Inserts an HTML fragment into the Dom"
    },
    {
     "name": "markup",
     "sig": "(Object o)",
     "type": "function",
     "desc": "Returns the markup for the passed Element(s) config"
    },
    {
     "name": "overwrite",
     "sig": "(String/HTMLElement/Element el, Object/String o, Boolean returnElement)",
     "type": "function",
     "desc": "Creates new Dom element(s) and overwrites the contents of el with them"
    }
   ]
  },
  "Roo.DomQuery": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "compile",
     "sig": "(String selector, String type)",
     "type": "function",
     "desc": "Compiles a selector/xpath query into a reusable function. The returned function\ntakes one parameter \"root\" (optional), which is the context node from where the query should start."
    },
    {
     "name": "filter",
     "sig": "(Array el, String selector, Boolean nonMatches)",
     "type": "function",
     "desc": "Filters an array of elements to only include matches of a simple selector (e.g. div.some-class or span:first-child)"
    },
    {
     "name": "is",
     "sig": "(String/HTMLElement/Array el, String selector)",
     "type": "function",
     "desc": "Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)"
    },
    {
     "name": "select",
     "sig": "(String selector, Node root)",
     "type": "function",
     "desc": "Selects a group of elements."
    },
    {
     "name": "selectNode",
     "sig": "(String selector, Node root)",
     "type": "function",
     "desc": "Selects a single element."
    },
    {
     "name": "selectNumber",
     "sig": "(String selector, Node root, Number defaultValue)",
     "type": "function",
     "desc": "Selects the value of a node, parsing integers and floats."
    },
    {
     "name": "selectValue",
     "sig": "(String selector, Node root, String defaultValue)",
     "type": "function",
     "desc": "Selects the value of a node, optionally replacing null with the defaultValue."
    }
   ]
  },
  "Roo.DomTemplate": {
   "props": [
    {
     "name": "url",
     "type": "String",
     "desc": "The Url to load the template from. beware if you are loading from a url, the data may not be ready if you use it instantly..\n                   it should be fixed so that template is observable...",
     "memberOf": "Roo.Template"
    },
    {
     "name": "html",
     "type": "String",
     "desc": "The HTML fragment or an array of fragments to join(\"\") or multiple arguments to join(\"\")",
     "memberOf": "Roo.Template"
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "append",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and appends the new node(s) to el."
    },
    {
     "name": "apply",
     "sig": "()",
     "type": "function",
     "desc": "Alias for {@link #applyTemplate}"
    },
    {
     "name": "applySubTemplate",
     "sig": "(Number id, Object values, Object parent)",
     "type": "function",
     "desc": "same as applyTemplate, except it's done to one of the subTemplates\nwhen using named templates, you can do:\n\nvar str = pl.applySubTemplate('your-name', values);"
    },
    {
     "name": "applyTemplate",
     "sig": "(Object values)",
     "type": "function",
     "desc": "Returns an HTML fragment of this template with the specified values applied."
    },
    {
     "name": "compile",
     "sig": "()",
     "type": "function",
     "desc": "compile the template\n\nThis is not recursive, so I'm not sure how nested templates are really going to be handled.."
    },
    {
     "name": "compileTpl",
     "sig": "()",
     "type": "function",
     "desc": "Compile a segment of the template into a 'sub-template'"
    },
    {
     "name": "from",
     "sig": "(String/HTMLElement el)",
     "type": "function",
     "desc": "Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML."
    },
    {
     "name": "insertAfter",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and inserts the new node(s) after el."
    },
    {
     "name": "insertBefore",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and inserts the new node(s) before el."
    },
    {
     "name": "insertFirst",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and inserts the new node(s) as the first child of el."
    },
    {
     "name": "overwrite",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and overwrites the content of el with the new node(s)."
    },
    {
     "name": "set",
     "sig": "(String html, Boolean compile)",
     "type": "function",
     "desc": "Sets the HTML used as the template and optionally compiles it."
    }
   ]
  },
  "Roo.Editor": {
   "props": [
    {
     "name": "autosize",
     "type": "Boolean/String",
     "desc": "True for the editor to automatically adopt the size of the underlying field, \"width\" to adopt the width only,\nor \"height\" to adopt the height only (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "revertInvalid",
     "type": "Boolean",
     "desc": "True to automatically revert the field value and cancel the edit when the user completes an edit and the field\nvalidation fails (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "ignoreNoChange",
     "type": "Boolean",
     "desc": "True to skip the the edit completion process (no save, no events fired) if the user completes an edit and\nthe value has not changed (defaults to false).  Applies only to string values - edits for other data types\nwill never be ignored.",
     "memberOf": ""
    },
    {
     "name": "hideEl",
     "type": "Boolean",
     "desc": "False to keep the bound element visible while the editor is displayed (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "The data value of the underlying field (defaults to \"\")",
     "memberOf": ""
    },
    {
     "name": "alignment",
     "type": "String",
     "desc": "The position to align to (see {@link Roo.Element#alignTo} for more details, defaults to \"c-c?\").",
     "memberOf": ""
    },
    {
     "name": "shadow",
     "type": "Boolean/String",
     "desc": "\"sides\" for sides/bottom only, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"frame\")",
     "memberOf": ""
    },
    {
     "name": "constrain",
     "type": "Boolean",
     "desc": "True to constrain the editor to the viewport",
     "memberOf": ""
    },
    {
     "name": "completeOnEnter",
     "type": "Boolean",
     "desc": "True to complete the edit when the enter key is pressed (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "cancelOnEsc",
     "type": "Boolean",
     "desc": "True to cancel the edit when the escape key is pressed (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "updateEl",
     "type": "Boolean",
     "desc": "True to update the innerHTML of the bound element when the update completes (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforecomplete",
     "sig": "function (_self, value, startValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires after a change has been made to the field, but before the change is reflected in the underlying\nfield.  Saving the change to the field can be canceled by returning false from the handler of this event.\nNote that if the value has not changed and ignoreNoChange = true, the editing will still end but this\nevent will not fire since no edit actually occurred."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "beforestartedit",
     "sig": "function (_self, boundEl, value)\n{\n\n}",
     "type": "function",
     "desc": "Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning\nfalse from the handler of this event."
    },
    {
     "name": "complete",
     "sig": "function (_self, value, startValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires after editing is complete and any changed value has been written to the underlying field."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "startedit",
     "sig": "function (boundEl, value)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this editor is displayed"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "cancelEdit",
     "sig": "(Boolean remainVisible)",
     "type": "function",
     "desc": "Cancels the editing process and hides the editor without persisting any changes.  The field value will be\nreverted to the original starting value."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "completeEdit",
     "sig": "(Boolean remainVisible)",
     "type": "function",
     "desc": "Ends the editing process, persists the changed value to the underlying field, and hides the editor."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Gets the data value of the editor"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "realign",
     "sig": "()",
     "type": "function",
     "desc": "Realigns the editor to the bound field based on the current alignment config value."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setSize",
     "sig": "(Number width, Number height)",
     "type": "function",
     "desc": "Sets the height and width of this editor."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the data value of the editor"
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "startEdit",
     "sig": "(String/HTMLElement/Element el, String value)",
     "type": "function",
     "desc": "Starts the editing process and shows the editor."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.Element": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "addClass",
     "sig": "(String/Array className)",
     "type": "function",
     "desc": "Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out."
    },
    {
     "name": "addClassOnClick",
     "sig": "(String className)",
     "type": "function",
     "desc": "Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)"
    },
    {
     "name": "addClassOnFocus",
     "sig": "(String className)",
     "type": "function",
     "desc": "Sets up event handlers to add and remove a css class when this element has the focus"
    },
    {
     "name": "addClassOnOver",
     "sig": "(String className, Boolean preventFlicker)",
     "type": "function",
     "desc": "Sets up event handlers to add and remove a css class when the mouse is over this element"
    },
    {
     "name": "addKeyListener",
     "sig": "(Number/Array/Object/String key, Function fn, Object scope)",
     "type": "function",
     "desc": "Convenience method for constructing a KeyMap"
    },
    {
     "name": "addKeyMap",
     "sig": "(Object config)",
     "type": "function",
     "desc": "Creates a KeyMap for this element"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function fn, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler"
    },
    {
     "name": "alignTo",
     "sig": "(String/HTMLElement/Roo.Element element, String position, Array offsets, Boolean/Object animate)",
     "type": "function",
     "desc": "Aligns this element with another element relative to the specified anchor points. If the other element is the\ndocument it aligns it to the viewport.\nThe position parameter is optional, and can be specified in any one of the following formats:\n<ul>\n  <li><b>Blank</b>: Defaults to aligning the element's top-left corner to the target's bottom-left corner (\"tl-bl\").</li>\n  <li><b>One anchor (deprecated)</b>: The passed anchor position is used as the target element's anchor point.\n      The element being aligned will position its top-left corner (tl) to that point.  <i>This method has been\n      deprecated in favor of the newer two anchor syntax below</i>.</li>\n  <li><b>Two anchors</b>: If two values from the table below are passed separated by a dash, the first value is used as the\n      element's anchor point, and the second value is used as the target's anchor point.</li>\n</ul>\nIn addition to the anchor points, the position parameter also supports the \"?\" character.  If \"?\" is passed at the end of\nthe position string, the element will attempt to align as specified, but the position will be adjusted to constrain to\nthe viewport if necessary.  Note that the element being aligned might be swapped to align to a different position than\nthat specified in order to enforce the viewport constraints.\nFollowing are all of the supported anchor positions:\n    <pre>\n    Value  Description\n    -----  -----------------------------\n    tl     The top left corner (default)\n    t      The center of the top edge\n    tr     The top right corner\n    l      The center of the left edge\n    c      In the center of the element\n    r      The center of the right edge\n    bl     The bottom left corner\n    b      The center of the bottom edge\n    br     The bottom right corner\n    </pre>\n    Example Usage:\n    <pre><code>\n    // align el to other-el using the default positioning (\"tl-bl\", non-constrained)\n    el.alignTo(\"other-el\");\n\n    // align the top left corner of el with the top right corner of other-el (constrained to viewport)\n    el.alignTo(\"other-el\", \"tr?\");\n\n    // align the bottom right corner of el with the center left edge of other-el\n    el.alignTo(\"other-el\", \"br-l?\");\n\n    // align the center of el with the bottom left corner of other-el and\n    // adjust the x position by -6 pixels (and the y position by 0)\n    el.alignTo(\"other-el\", \"c-bl\", [-6, 0]);\n    </code></pre>"
    },
    {
     "name": "anchorTo",
     "sig": "(String/HTMLElement/Roo.Element element, String position, Array offsets, Boolean/Object animate, Boolean/Number monitorScroll, Function callback)",
     "type": "function",
     "desc": "Anchors an element to another element and realigns it when the window is resized."
    },
    {
     "name": "animate",
     "sig": "(Object args, Float duration, Function onComplete, String easing, String animType)",
     "type": "function",
     "desc": "Perform animation on this element."
    },
    {
     "name": "appendChild",
     "sig": "(String/HTMLElement/Array/Element/CompositeElement el)",
     "type": "function",
     "desc": "Appends the passed element(s) to this element"
    },
    {
     "name": "appendTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Appends this element to the passed element"
    },
    {
     "name": "applyStyles",
     "sig": "(String/Object/Function styles)",
     "type": "function",
     "desc": "More flexible version of {@link #setStyle} for setting style properties."
    },
    {
     "name": "attr",
     "sig": "(String|Object name, String value)",
     "type": "function",
     "desc": "Sets or Returns the value the dom attribute value"
    },
    {
     "name": "autoHeight",
     "sig": "(Boolean animate, Float duration, Function onComplete, String easing)",
     "type": "function",
     "desc": "Measures the element's content height and updates height to match. Note: this function uses setTimeout so\nthe new height may not be available immediately."
    },
    {
     "name": "beginMeasure",
     "sig": "()",
     "type": "function",
     "desc": "Temporarily enables offsets (width,height,x,y) for an element with display:none, use endMeasure() when done."
    },
    {
     "name": "blur",
     "sig": "()",
     "type": "function",
     "desc": "Tries to blur the element. Any exceptions are caught and ignored."
    },
    {
     "name": "boxWrap",
     "sig": "(String class)",
     "type": "function",
     "desc": "Wraps the specified element with a special markup/CSS block that renders by default as a gray container with a\ngradient background, rounded corners and a 4-way shadow."
    },
    {
     "name": "center",
     "sig": "(String/HTMLElement/Roo.Element centerIn)",
     "type": "function",
     "desc": "Centers the Element in either the viewport, or another Element."
    },
    {
     "name": "child",
     "sig": "(String selector, Boolean returnDom)",
     "type": "function",
     "desc": "Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id)."
    },
    {
     "name": "clean",
     "sig": "(Boolean forceReclean)",
     "type": "function",
     "desc": "Removes worthless text nodes"
    },
    {
     "name": "clearOpacity",
     "sig": "()",
     "type": "function",
     "desc": "Clears any opacity settings from this element. Required in some cases for IE."
    },
    {
     "name": "clearPositioning",
     "sig": "(String value)",
     "type": "function",
     "desc": "Clear positioning back to the default when the document was loaded"
    },
    {
     "name": "clip",
     "sig": "()",
     "type": "function",
     "desc": "Store the current overflow setting and clip overflow on the element - use {@link #unclip} to remove"
    },
    {
     "name": "contains",
     "sig": "(HTMLElement/String el)",
     "type": "function",
     "desc": "Returns true if this element is an ancestor of the passed element"
    },
    {
     "name": "createChild",
     "sig": "(Object config, HTMLElement insertBefore, Boolean returnDom)",
     "type": "function",
     "desc": "Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element."
    },
    {
     "name": "createProxy",
     "sig": "(String/Object config, String/HTMLElement renderTo, Boolean matchBox)",
     "type": "function",
     "desc": "Creates a proxy element of this element"
    },
    {
     "name": "createShim",
     "sig": "()",
     "type": "function",
     "desc": "Creates an iframe shim for this element to keep selects and other windowed objects from\nshowing through."
    },
    {
     "name": "down",
     "sig": "(String selector, Boolean returnDom)",
     "type": "function",
     "desc": "Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id)."
    },
    {
     "name": "enableDisplayMode",
     "sig": "(String display)",
     "type": "function",
     "desc": "Convenience method for setVisibilityMode(Element.DISPLAY)"
    },
    {
     "name": "endMeasure",
     "sig": "()",
     "type": "function",
     "desc": "Restores displays to before beginMeasure was called"
    },
    {
     "name": "findParent",
     "sig": "(String selector, Number/String/HTMLElement/Element maxDepth, Boolean returnEl)",
     "type": "function",
     "desc": "Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)"
    },
    {
     "name": "findParentNode",
     "sig": "(String selector, Number/String/HTMLElement/Element maxDepth, Boolean returnEl)",
     "type": "function",
     "desc": "Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)"
    },
    {
     "name": "fitToParent",
     "sig": "(Boolean monitorResize, String/HTMLElment/Element targetParent)",
     "type": "function",
     "desc": "Sizes this element to its parent element's dimensions performing\nneccessary box adjustments."
    },
    {
     "name": "fly",
     "sig": "(String/HTMLElement el, String named)",
     "type": "function",
     "desc": "Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -\nthe dom node can be overwritten by other code."
    },
    {
     "name": "focus",
     "sig": "()",
     "type": "function",
     "desc": "Tries to focus the element. Any exceptions are caught and ignored."
    },
    {
     "name": "get",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Static method to retrieve Element objects. Uses simple caching to consistently return the same object.\nAutomatically fixes if an object was recreated with the same id via AJAX or DOM."
    },
    {
     "name": "getAlignToXY",
     "sig": "(String/HTMLElement/Roo.Element element, String position, Array offsets)",
     "type": "function",
     "desc": "Gets the x,y coordinates to align this element with another element. See {@link #alignTo} for more info on the\nsupported position values."
    },
    {
     "name": "getAnchorXY",
     "sig": "(String anchor, Object size, Boolean local)",
     "type": "function",
     "desc": "Gets the x,y coordinates specified by the anchor position on the element."
    },
    {
     "name": "getAttributeNS",
     "sig": "(String namespace, String name)",
     "type": "function",
     "desc": "Returns the value of a namespaced attribute from the element's underlying DOM node."
    },
    {
     "name": "getBorderWidth",
     "sig": "(String side)",
     "type": "function",
     "desc": "Gets the width of the border(s) for the specified side(s)"
    },
    {
     "name": "getBottom",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the bottom Y coordinate of the element (element Y position + element height)"
    },
    {
     "name": "getBox",
     "sig": "(Boolean contentBox, Boolean local)",
     "type": "function",
     "desc": "Return a box {x, y, width, height} that can be used to set another elements\nsize/location to match this element."
    },
    {
     "name": "getCenterXY",
     "sig": "()",
     "type": "function",
     "desc": "Calculates the x, y to center this element on the screen"
    },
    {
     "name": "getColor",
     "sig": "(String attr, String defaultValue, String prefix)",
     "type": "function",
     "desc": "Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values\nare convert to standard 6 digit hex color."
    },
    {
     "name": "getComputedHeight",
     "sig": "()",
     "type": "function",
     "desc": "Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders\nwhen needed to simulate offsetHeight when offsets aren't available. This may not work on display:none elements\nif a height has not been set using CSS."
    },
    {
     "name": "getComputedWidth",
     "sig": "()",
     "type": "function",
     "desc": "Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders\nwhen needed to simulate offsetWidth when offsets aren't available. This may not work on display:none elements\nif a width has not been set using CSS."
    },
    {
     "name": "getFrameWidth",
     "sig": "(String sides)",
     "type": "function",
     "desc": "Returns the sum width of the padding and borders for the passed \"sides\". See getBorderWidth()\n         for more information about the sides."
    },
    {
     "name": "getHeight",
     "sig": "(Boolean contentHeight)",
     "type": "function",
     "desc": "Returns the offset height of the element"
    },
    {
     "name": "getLeft",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the left X coordinate"
    },
    {
     "name": "getMargins",
     "sig": "(String sides)",
     "type": "function",
     "desc": "Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,\nthen it returns the calculated width of the sides (see getPadding)"
    },
    {
     "name": "getNextSibling",
     "sig": "()",
     "type": "function",
     "desc": "Gets the next sibling, skipping text nodes"
    },
    {
     "name": "getPadding",
     "sig": "(String side)",
     "type": "function",
     "desc": "Gets the width of the padding(s) for the specified side(s)"
    },
    {
     "name": "getPositioning",
     "sig": "()",
     "type": "function",
     "desc": "Gets an object with all CSS positioning properties. Useful along with setPostioning to get\nsnapshot before performing an update and then restoring the element."
    },
    {
     "name": "getPrevSibling",
     "sig": "()",
     "type": "function",
     "desc": "Gets the previous sibling, skipping text nodes"
    },
    {
     "name": "getRegion",
     "sig": "()",
     "type": "function",
     "desc": "Returns the region of the given element.\nThe element must be part of the DOM tree to have a region (display:none or elements not appended return false)."
    },
    {
     "name": "getRight",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the right X coordinate of the element (element X position + element width)"
    },
    {
     "name": "getScroll",
     "sig": "()",
     "type": "function",
     "desc": "Returns the current scroll position of the element."
    },
    {
     "name": "getSize",
     "sig": "(Boolean contentSize)",
     "type": "function",
     "desc": "Returns the size of the element."
    },
    {
     "name": "getStyle",
     "sig": "(String property)",
     "type": "function",
     "desc": "Normalizes currentStyle and computedStyle. This is not YUI getStyle, it is an optimised version."
    },
    {
     "name": "getStyles",
     "sig": "(String style1, String style2)",
     "type": "function",
     "desc": "Returns an object with properties matching the styles requested.\nFor example, el.getStyles('color', 'font-size', 'width') might return\n{'color': '#FFFFFF', 'font-size': '13px', 'width': '100px'}."
    },
    {
     "name": "getTop",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the top Y coordinate"
    },
    {
     "name": "getUpdateManager",
     "sig": "()",
     "type": "function",
     "desc": "Gets this element's UpdateManager"
    },
    {
     "name": "getValue",
     "sig": "(Boolean asNumber)",
     "type": "function",
     "desc": "Returns the value of the \"value\" attribute"
    },
    {
     "name": "getViewSize",
     "sig": "()",
     "type": "function",
     "desc": "Returns the width and height of the viewport."
    },
    {
     "name": "getWidth",
     "sig": "(Boolean contentWidth)",
     "type": "function",
     "desc": "Returns the offset width of the element"
    },
    {
     "name": "getX",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."
    },
    {
     "name": "getXY",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."
    },
    {
     "name": "getY",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."
    },
    {
     "name": "hasClass",
     "sig": "(String className)",
     "type": "function",
     "desc": "Checks if the specified CSS class exists on this element's DOM node."
    },
    {
     "name": "hide",
     "sig": "(Boolean/Object animate)",
     "type": "function",
     "desc": "Hide this element - Uses display mode to determine whether to use \"display\" or \"visibility\". See {@link #setVisible}."
    },
    {
     "name": "initDD",
     "sig": "(String group, Object config, Object overrides)",
     "type": "function",
     "desc": "Initializes a {@link Roo.dd.DD} drag drop object for this element."
    },
    {
     "name": "initDDProxy",
     "sig": "(String group, Object config, Object overrides)",
     "type": "function",
     "desc": "Initializes a {@link Roo.dd.DDProxy} object for this element."
    },
    {
     "name": "initDDTarget",
     "sig": "(String group, Object config, Object overrides)",
     "type": "function",
     "desc": "Initializes a {@link Roo.dd.DDTarget} object for this element."
    },
    {
     "name": "insertAfter",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Inserts this element after the passed element in the DOM"
    },
    {
     "name": "insertBefore",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Inserts this element before the passed element in the DOM"
    },
    {
     "name": "insertFirst",
     "sig": "(String/HTMLElement/Element/Object el)",
     "type": "function",
     "desc": "Inserts (or creates) an element (or DomHelper config) as the first child of the this element"
    },
    {
     "name": "insertHtml",
     "sig": "(String where, String html, Boolean returnEl)",
     "type": "function",
     "desc": "Inserts an html fragment into this element"
    },
    {
     "name": "insertSibling",
     "sig": "(String/HTMLElement/Element/Object el, String where, Boolean returnDom)",
     "type": "function",
     "desc": "Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element"
    },
    {
     "name": "is",
     "sig": "(String selector)",
     "type": "function",
     "desc": "Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)"
    },
    {
     "name": "isBorderBox",
     "sig": "()",
     "type": "function",
     "desc": "Tests various css rules/browsers to determine if this element uses a border box"
    },
    {
     "name": "isDisplayed",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if display is not \"none\""
    },
    {
     "name": "isMasked",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this element is masked"
    },
    {
     "name": "isScrollable",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this element is scrollable."
    },
    {
     "name": "isVisible",
     "sig": "(Boolean deep)",
     "type": "function",
     "desc": "Checks whether the element is currently visible using both visibility and display properties."
    },
    {
     "name": "load",
     "sig": "(String/Function url, String/Object params, Function callback, Boolean discardUrl)",
     "type": "function",
     "desc": "Direct access to the UpdateManager update() method (takes the same parameters)."
    },
    {
     "name": "mask",
     "sig": "(String msg, String msgCls)",
     "type": "function",
     "desc": "Puts a mask over this element to disable user interaction. Requires core.css.\nThis method can only be applied to elements which accept child nodes."
    },
    {
     "name": "move",
     "sig": "(String direction, Number distance, Boolean/Object animate)",
     "type": "function",
     "desc": "Move this element relative to its current position."
    },
    {
     "name": "moveTo",
     "sig": "(Number x, Number y, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the position of the element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function fn, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler (Shorthand for addListener)"
    },
    {
     "name": "position",
     "sig": "(String pos, Number zIndex, Number x, Number y)",
     "type": "function",
     "desc": "Initializes positioning on this element. If a desired position is not passed, it will make the\nthe element positioned relative IF it is not already positioned."
    },
    {
     "name": "query",
     "sig": "(String selector)",
     "type": "function",
     "desc": "Selects child nodes based on the passed CSS selector (the selector should not contain an id)."
    },
    {
     "name": "radioClass",
     "sig": "(String/Array className)",
     "type": "function",
     "desc": "Adds one or more CSS classes to this element and removes the same class(es) from all siblings."
    },
    {
     "name": "remove",
     "sig": "()",
     "type": "function",
     "desc": "Removes this element from the DOM and deletes it from the cache"
    },
    {
     "name": "removeAllListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all previous added listeners from this element"
    },
    {
     "name": "removeClass",
     "sig": "(String/Array className)",
     "type": "function",
     "desc": "Removes one or more CSS classes from the element."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function fn)",
     "type": "function",
     "desc": "Removes an event handler from this element"
    },
    {
     "name": "repaint",
     "sig": "()",
     "type": "function",
     "desc": "Forces the browser to repaint this element"
    },
    {
     "name": "replace",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Replaces the passed element with this element"
    },
    {
     "name": "replaceClass",
     "sig": "(String oldClassName, String newClassName)",
     "type": "function",
     "desc": "Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added."
    },
    {
     "name": "scroll",
     "sig": "(String direction, Number distance, Boolean/Object animate)",
     "type": "function",
     "desc": "Scrolls this element the specified direction. Does bounds checking to make sure the scroll is\nwithin this element's scrollable range."
    },
    {
     "name": "scrollIntoView",
     "sig": "(String/HTMLElement/Element container, Boolean hscroll)",
     "type": "function",
     "desc": "Scrolls this element into view within the passed container."
    },
    {
     "name": "scrollTo",
     "sig": "(String side, Number value, Boolean/Object animate)",
     "type": "function",
     "desc": "Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll()."
    },
    {
     "name": "select",
     "sig": "(String selector, Boolean unique)",
     "type": "function",
     "desc": "Creates a {@link Roo.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id)."
    },
    {
     "name": "set",
     "sig": "(Object o, Boolean useSet)",
     "type": "function",
     "desc": "Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)"
    },
    {
     "name": "setBottom",
     "sig": "(String bottom)",
     "type": "function",
     "desc": "Sets the element's CSS bottom style."
    },
    {
     "name": "setBounds",
     "sig": "(Number x, Number y, Number width, Number height, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently."
    },
    {
     "name": "setBox",
     "sig": "(Object box, Boolean adjust, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently."
    },
    {
     "name": "setDisplayed",
     "sig": "(Boolean value)",
     "type": "function",
     "desc": "Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true."
    },
    {
     "name": "setHeight",
     "sig": "(Number height, Boolean/Object animate)",
     "type": "function",
     "desc": "Set the height of the element"
    },
    {
     "name": "setLeft",
     "sig": "(String left)",
     "type": "function",
     "desc": "Sets the element's left position directly using CSS style (instead of {@link #setX})."
    },
    {
     "name": "setLeftTop",
     "sig": "(String left, String top)",
     "type": "function",
     "desc": "Quick set left and top adding default units"
    },
    {
     "name": "setLocation",
     "sig": "(Number x, Number y, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the position of the element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."
    },
    {
     "name": "setOpacity",
     "sig": "(Float opacity, Boolean/Object animate)",
     "type": "function",
     "desc": "Set the opacity of the element"
    },
    {
     "name": "setPositioning",
     "sig": "(Object posCfg)",
     "type": "function",
     "desc": "Set positioning with an object returned by getPositioning()."
    },
    {
     "name": "setRegion",
     "sig": "(Roo.lib.Region region, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the element's position and size the the specified region. If animation is true then width, height, x and y will be animated concurrently."
    },
    {
     "name": "setRight",
     "sig": "(String right)",
     "type": "function",
     "desc": "Sets the element's CSS right style."
    },
    {
     "name": "setSize",
     "sig": "(Number width, Number height, Boolean/Object animate)",
     "type": "function",
     "desc": "Set the size of the element. If animation is true, both width an height will be animated concurrently."
    },
    {
     "name": "setStyle",
     "sig": "(String/Object property, String value)",
     "type": "function",
     "desc": "Wrapper for setting style properties, also takes single object parameter of multiple styles."
    },
    {
     "name": "setTop",
     "sig": "(String top)",
     "type": "function",
     "desc": "Sets the element's top position directly using CSS style (instead of {@link #setY})."
    },
    {
     "name": "setVisibilityMode",
     "sig": "( visMode)",
     "type": "function",
     "desc": "Sets the element's visibility mode. When setVisible() is called it\nwill use this to determine whether to set the visibility or the display property."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use\nthe display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property."
    },
    {
     "name": "setWidth",
     "sig": "(Number width, Boolean/Object animate)",
     "type": "function",
     "desc": "Set the width of the element"
    },
    {
     "name": "setX",
     "sig": "(Number The, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."
    },
    {
     "name": "setXY",
     "sig": "(Array pos, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the position of the element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."
    },
    {
     "name": "setY",
     "sig": "(Number The, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."
    },
    {
     "name": "show",
     "sig": "(Boolean/Object animate)",
     "type": "function",
     "desc": "Show this element - Uses display mode to determine whether to use \"display\" or \"visibility\". See {@link #setVisible}."
    },
    {
     "name": "swallowEvent",
     "sig": "(String eventName, Boolean preventDefault)",
     "type": "function",
     "desc": "Stops the specified event from bubbling and optionally prevents the default action"
    },
    {
     "name": "toggle",
     "sig": "(Boolean/Object animate)",
     "type": "function",
     "desc": "Toggles the element's visibility or display, depending on visibility mode."
    },
    {
     "name": "toggleClass",
     "sig": "(String className)",
     "type": "function",
     "desc": "Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it)."
    },
    {
     "name": "translatePoints",
     "sig": "(Number/Array x, Number y)",
     "type": "function",
     "desc": "Translates the passed page coordinates into left/top css values for this element"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function fn)",
     "type": "function",
     "desc": "Removes an event handler from this element (shorthand for removeListener)"
    },
    {
     "name": "unclip",
     "sig": "()",
     "type": "function",
     "desc": "Return clipping (overflow) to original clipping before clip() was called"
    },
    {
     "name": "unmask",
     "sig": "()",
     "type": "function",
     "desc": "Removes a previously applied mask. If removeEl is true the mask overlay is destroyed, otherwise\nit is cached for reuse."
    },
    {
     "name": "unselectable",
     "sig": "()",
     "type": "function",
     "desc": "Disables text selection for this element (normalized across browsers)"
    },
    {
     "name": "up",
     "sig": "(String selector, Number/String/HTMLElement/Element maxDepth)",
     "type": "function",
     "desc": "Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).\nThis is a shortcut for findParentNode() that always returns an Roo.Element."
    },
    {
     "name": "update",
     "sig": "(String html, Boolean loadScripts, Function callback)",
     "type": "function",
     "desc": "Update the innerHTML of this element, optionally searching for and processing scripts"
    },
    {
     "name": "wrap",
     "sig": "(Object config, Boolean returnDom)",
     "type": "function",
     "desc": "Creates and wraps this element with another element"
    }
   ]
  },
  "Roo.EventManager": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "addListener",
     "sig": "(String/HTMLElement element, String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to an element (shorthand for addListener)"
    },
    {
     "name": "on",
     "sig": "(String/HTMLElement element, String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to an element (shorthand for addListener)"
    },
    {
     "name": "onDocumentReady",
     "sig": "(Function fn, Object scope, boolean options)",
     "type": "function",
     "desc": "Fires when the document is ready (before onload and before images are loaded). Can be \naccessed shorthanded Roo.onReady()."
    },
    {
     "name": "onTextResize",
     "sig": "(Function fn, Object scope, boolean options)",
     "type": "function",
     "desc": "Fires when the user changes the active text size. Handler gets called with 2 params, the old size and the new size."
    },
    {
     "name": "onWindowResize",
     "sig": "(Function fn, Object scope, boolean options)",
     "type": "function",
     "desc": "Fires when the window is resized and provides resize event buffering (50 milliseconds), passes new viewport width and height to handlers."
    },
    {
     "name": "removeListener",
     "sig": "(String/HTMLElement element, String eventName, Function fn)",
     "type": "function",
     "desc": "Removes an event handler"
    },
    {
     "name": "removeResizeListener",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Removes the passed window resize listener."
    },
    {
     "name": "wrap",
     "sig": "(Function fn, Object scope, boolean override)",
     "type": "function",
     "desc": "This is no longer needed and is deprecated. Places a simple wrapper around an event handler to override the browser event\nobject with a Roo.EventObject"
    }
   ]
  },
  "Roo.EventObject": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "getCharCode",
     "sig": "()",
     "type": "function",
     "desc": "Gets the key code for the event."
    },
    {
     "name": "getKey",
     "sig": "()",
     "type": "function",
     "desc": "Returns a normalized keyCode for the event."
    },
    {
     "name": "getPageX",
     "sig": "()",
     "type": "function",
     "desc": "Gets the x coordinate of the event."
    },
    {
     "name": "getPageY",
     "sig": "()",
     "type": "function",
     "desc": "Gets the y coordinate of the event."
    },
    {
     "name": "getRelatedTarget",
     "sig": "()",
     "type": "function",
     "desc": "Gets the related target."
    },
    {
     "name": "getTarget",
     "sig": "(String selector, Number/String/HTMLElement/Element maxDepth, Boolean returnEl)",
     "type": "function",
     "desc": "Gets the target for the event."
    },
    {
     "name": "getTime",
     "sig": "()",
     "type": "function",
     "desc": "Gets the time of the event."
    },
    {
     "name": "getWheelDelta",
     "sig": "()",
     "type": "function",
     "desc": "Normalizes mouse wheel delta across browsers"
    },
    {
     "name": "getXY",
     "sig": "()",
     "type": "function",
     "desc": "Gets the page coordinates of the event."
    },
    {
     "name": "hasModifier",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the control, meta, shift or alt key was pressed during this event."
    },
    {
     "name": "preventDefault",
     "sig": "()",
     "type": "function",
     "desc": "Prevents the browsers default handling of the event."
    },
    {
     "name": "stopEvent",
     "sig": "()",
     "type": "function",
     "desc": "Stop the event (preventDefault and stopPropagation)"
    },
    {
     "name": "stopPropagation",
     "sig": "()",
     "type": "function",
     "desc": "Cancels bubbling of the event."
    },
    {
     "name": "within",
     "sig": "(String/HTMLElement/Element el, Boolean related)",
     "type": "function",
     "desc": "Returns true if the target of this event equals el or is a child of el"
    }
   ]
  },
  "Roo.Fx": {
   "props": [
    {
     "name": "callback",
     "type": "Function",
     "desc": "A function called when the effect is finished",
     "memberOf": ""
    },
    {
     "name": "scope",
     "type": "Object",
     "desc": "The scope of the effect function",
     "memberOf": ""
    },
    {
     "name": "easing",
     "type": "String",
     "desc": "A valid Easing value for the effect",
     "memberOf": ""
    },
    {
     "name": "afterCls",
     "type": "String",
     "desc": "A css class to apply after the effect",
     "memberOf": ""
    },
    {
     "name": "duration",
     "type": "Number",
     "desc": "The length of time (in seconds) that the effect should last",
     "memberOf": ""
    },
    {
     "name": "remove",
     "type": "Boolean",
     "desc": "Whether the Element should be removed from the DOM and destroyed after the effect finishes",
     "memberOf": ""
    },
    {
     "name": "useDisplay",
     "type": "Boolean",
     "desc": "Whether to use the <i>display</i> CSS property instead of <i>visibility</i> when hiding Elements (only applies to \neffects that end with the element being visually hidden, ignored otherwise)",
     "memberOf": ""
    },
    {
     "name": "afterStyle",
     "type": "String/Object/Function",
     "desc": "A style specification string, e.g. \"width:100px\", or an object in the form {width:\"100px\"}, or\na function which returns such a specification that will be applied to the Element after the effect finishes",
     "memberOf": ""
    },
    {
     "name": "block",
     "type": "Boolean",
     "desc": "Whether the effect should block other effects from queueing while it runs",
     "memberOf": ""
    },
    {
     "name": "concurrent",
     "type": "Boolean",
     "desc": "Whether to allow subsequently-queued effects to run at the same time as the current effect, or to ensure that they run in sequence",
     "memberOf": ""
    },
    {
     "name": "stopFx",
     "type": "Boolean",
     "desc": "Whether subsequent effects should be stopped and removed after the current effect finishes",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "fadeIn",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Fade an element in (from transparent to opaque).  The ending opacity can be specified\nusing the \"endOpacity\" config option.\nUsage:\n<pre><code>\n// default: fade in from opacity 0 to 100%\nel.fadeIn();\n\n// custom: fade in from opacity 0 to 75% over 2 seconds\nel.fadeIn({ endOpacity: .75, duration: 2});\n\n// common config options shown with default values\nel.fadeIn({\n    endOpacity: 1, //can be any value between 0 and 1 (e.g. .5)\n    easing: 'easeOut',\n    duration: .5\n});\n</code></pre>"
    },
    {
     "name": "fadeOut",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Fade an element out (from opaque to transparent).  The ending opacity can be specified\nusing the \"endOpacity\" config option.\nUsage:\n<pre><code>\n// default: fade out from the element's current opacity to 0\nel.fadeOut();\n\n// custom: fade out from the element's current opacity to 25% over 2 seconds\nel.fadeOut({ endOpacity: .25, duration: 2});\n\n// common config options shown with default values\nel.fadeOut({\n    endOpacity: 0, //can be any value between 0 and 1 (e.g. .5)\n    easing: 'easeOut',\n    duration: .5\n    remove: false,\n    useDisplay: false\n});\n</code></pre>"
    },
    {
     "name": "frame",
     "sig": "(String color, Number count, Object options)",
     "type": "function",
     "desc": "Shows a ripple of exploding, attenuating borders to draw attention to an Element.\nUsage:\n<pre><code>\n// default: a single light blue ripple\nel.frame();\n\n// custom: 3 red ripples lasting 3 seconds total\nel.frame(\"ff0000\", 3, { duration: 3 });\n\n// common config options shown with default values\nel.frame(\"C3DAF9\", 1, {\n    duration: 1 //duration of entire animation (not each individual ripple)\n    // Note: Easing is not configurable and will be ignored if included\n});\n</code></pre>"
    },
    {
     "name": "ghost",
     "sig": "(String anchor, Object options)",
     "type": "function",
     "desc": "Slides the element while fading it out of view.  An anchor point can be optionally passed to set the \nending point of the effect.\nUsage:\n<pre><code>\n// default: slide the element downward while fading out\nel.ghost();\n\n// custom: slide the element out to the right with a 2-second duration\nel.ghost('r', { duration: 2 });\n\n// common config options shown with default values\nel.ghost('b', {\n    easing: 'easeOut',\n    duration: .5\n    remove: false,\n    useDisplay: false\n});\n</code></pre>"
    },
    {
     "name": "hasActiveFx",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the element has any effects actively running or queued, else returns false."
    },
    {
     "name": "hasFxBlock",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the element is currently blocking so that no other effect can be queued\nuntil this effect is finished, else returns false if blocking is not set.  This is commonly\nused to ensure that an effect initiated by a user action runs to completion prior to the\nsame effect being restarted (e.g., firing only one effect even if the user clicks several times)."
    },
    {
     "name": "highlight",
     "sig": "(String color, Object options)",
     "type": "function",
     "desc": "Highlights the Element by setting a color (applies to the background-color by default, but can be\nchanged using the \"attr\" config option) and then fading back to the original color. If no original\ncolor is available, you should provide the \"endColor\" config option which will be cleared after the animation.\nUsage:\n<pre><code>\n// default: highlight background to yellow\nel.highlight();\n\n// custom: highlight foreground text to blue for 2 seconds\nel.highlight(\"0000ff\", { attr: 'color', duration: 2 });\n\n// common config options shown with default values\nel.highlight(\"ffff9c\", {\n    attr: \"background-color\", //can be any valid CSS property (attribute) that supports a color value\n    endColor: (current color) or \"ffffff\",\n    easing: 'easeIn',\n    duration: 1\n});\n</code></pre>"
    },
    {
     "name": "pause",
     "sig": "(Number seconds)",
     "type": "function",
     "desc": "Creates a pause before any subsequent queued effects begin.  If there are\nno effects queued after the pause it will have no effect.\nUsage:\n<pre><code>\nel.pause(1);\n</code></pre>"
    },
    {
     "name": "puff",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Fades the element out while slowly expanding it in all directions.  When the effect is completed, the \nelement will be hidden (visibility = 'hidden') but block elements will still take up space in the document. \nThe element must be removed from the DOM using the 'remove' config option if desired.\nUsage:\n<pre><code>\n// default\nel.puff();\n\n// common config options shown with default values\nel.puff({\n    easing: 'easeOut',\n    duration: .5,\n    remove: false,\n    useDisplay: false\n});\n</code></pre>"
    },
    {
     "name": "scale",
     "sig": "(Number width, Number height, Object options)",
     "type": "function",
     "desc": "Animates the transition of an element's dimensions from a starting height/width\nto an ending height/width.\nUsage:\n<pre><code>\n// change height and width to 100x100 pixels\nel.scale(100, 100);\n\n// common config options shown with default values.  The height and width will default to\n// the element's existing values if passed as null.\nel.scale(\n    [element's width],\n    [element's height], {\n    easing: 'easeOut',\n    duration: .35\n});\n</code></pre>"
    },
    {
     "name": "sequenceFx",
     "sig": "()",
     "type": "function",
     "desc": "Ensures that all effects queued after sequenceFx is called on the element are\nrun in sequence.  This is the opposite of {@link #syncFx}."
    },
    {
     "name": "shift",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Animates the transition of any combination of an element's dimensions, xy position and/or opacity.\nAny of these properties not specified in the config object will not be changed.  This effect \nrequires that at least one new dimension, position or opacity setting must be passed in on\nthe config object in order for the function to have any effect.\nUsage:\n<pre><code>\n// slide the element horizontally to x position 200 while changing the height and opacity\nel.shift({ x: 200, height: 50, opacity: .8 });\n\n// common config options shown with default values.\nel.shift({\n    width: [element's width],\n    height: [element's height],\n    x: [element's x position],\n    y: [element's y position],\n    opacity: [element's opacity],\n    easing: 'easeOut',\n    duration: .35\n});\n</code></pre>"
    },
    {
     "name": "slideIn",
     "sig": "(String anchor, Object options)",
     "type": "function",
     "desc": "Slides the element into view.  An anchor point can be optionally passed to set the point of\norigin for the slide effect.  This function automatically handles wrapping the element with\na fixed-size container if needed.  See the Fx class overview for valid anchor point options.\nUsage:\n<pre><code>\n// default: slide the element in from the top\nel.slideIn();\n\n// custom: slide the element in from the right with a 2-second duration\nel.slideIn('r', { duration: 2 });\n\n// common config options shown with default values\nel.slideIn('t', {\n    easing: 'easeOut',\n    duration: .5\n});\n</code></pre>"
    },
    {
     "name": "slideOut",
     "sig": "(String anchor, Object options)",
     "type": "function",
     "desc": "Slides the element out of view.  An anchor point can be optionally passed to set the end point\nfor the slide effect.  When the effect is completed, the element will be hidden (visibility = \n'hidden') but block elements will still take up space in the document.  The element must be removed\nfrom the DOM using the 'remove' config option if desired.  This function automatically handles \nwrapping the element with a fixed-size container if needed.  See the Fx class overview for valid anchor point options.\nUsage:\n<pre><code>\n// default: slide the element out to the top\nel.slideOut();\n\n// custom: slide the element out to the right with a 2-second duration\nel.slideOut('r', { duration: 2 });\n\n// common config options shown with default values\nel.slideOut('t', {\n    easing: 'easeOut',\n    duration: .5,\n    remove: false,\n    useDisplay: false\n});\n</code></pre>"
    },
    {
     "name": "stopFx",
     "sig": "()",
     "type": "function",
     "desc": "Stops any running effects and clears the element's internal effects queue if it contains\nany additional effects that haven't started yet."
    },
    {
     "name": "switchOff",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).\nWhen the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still \ntake up space in the document. The element must be removed from the DOM using the 'remove' config option if desired.\nUsage:\n<pre><code>\n// default\nel.switchOff();\n\n// all config options shown with default values\nel.switchOff({\n    easing: 'easeIn',\n    duration: .3,\n    remove: false,\n    useDisplay: false\n});\n</code></pre>"
    },
    {
     "name": "syncFx",
     "sig": "()",
     "type": "function",
     "desc": "Ensures that all effects queued after syncFx is called on the element are\nrun concurrently.  This is the opposite of {@link #sequenceFx}."
    }
   ]
  },
  "Roo.GridPanel": {
   "props": [
    {
     "name": "fitToFrame",
     "type": "Boolean",
     "desc": "True for this panel to adjust its size to fit when the region resizes  (defaults to false)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "fitContainer",
     "type": "Boolean",
     "desc": "When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "autoCreate",
     "type": "Boolean/Object",
     "desc": "True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "closable",
     "type": "Boolean",
     "desc": "True if the panel can be closed/removed",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "background",
     "type": "Boolean",
     "desc": "True if the panel should not be activated when it is added (defaults to false)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "resizeEl",
     "type": "String/HTMLElement/Element",
     "desc": "An element to resize if {@link #fitToFrame} is true (instead of this panel's element)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "toolbar",
     "type": "Toolbar",
     "desc": "A toolbar for this panel",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "autoScroll",
     "type": "Boolean",
     "desc": "True to scroll overflow in this panel (use with {@link #fitToFrame})",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "title",
     "type": "String",
     "desc": "The title for this panel",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "adjustments",
     "type": "Array",
     "desc": "Values to <b>add</b> to the width/height when doing a {@link #fitToFrame} (default is [0, 0])",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "url",
     "type": "String",
     "desc": "Calls {@link #setUrl} with this value",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "region",
     "type": "String",
     "desc": "which region to put this panel on (when used with xtype constructors)",
     "memberOf": "Roo.ContentPanel",
     "optvals": [
      "center",
      "north",
      "south",
      "east",
      "west"
     ]
    },
    {
     "name": "params",
     "type": "String/Object",
     "desc": "When used with {@link #url}, calls {@link #setUrl} with this value",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "loadOnce",
     "type": "Boolean",
     "desc": "When used with {@link #url}, calls {@link #setUrl} with this value",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "content",
     "type": "String",
     "desc": "Raw content to fill content panel with (uses setContent on construction.)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this panel is activated."
    },
    {
     "name": "deactivate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this panel is activated."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this tab is created"
    },
    {
     "name": "resize",
     "sig": "function (_self, width, height)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this panel is resized if fitToFrame is true."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addxtype",
     "sig": "(Object cfg)",
     "type": "function",
     "desc": "Adds a xtype elements to the panel - currently only supports Forms, View, JsonView.\n<pre><code>\n\nlayout.addxtype({\n       xtype : 'Form',\n       items: [ .... ]\n   }\n);\n\n</code></pre>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this panel"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns this panel's element - used by regiosn to add."
    },
    {
     "name": "getGrid",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid for this panel"
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns this panel's id"
    },
    {
     "name": "getTitle",
     "sig": "()",
     "type": "function",
     "desc": "Returns this panel's title"
    },
    {
     "name": "getToolbar",
     "sig": "()",
     "type": "function",
     "desc": "Returns the toolbar for this Panel if one was configured."
    },
    {
     "name": "getUpdateManager",
     "sig": "()",
     "type": "function",
     "desc": "Get the {@link Roo.UpdateManager} for this panel. Enables you to perform Ajax updates."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isClosable",
     "sig": "()",
     "type": "function",
     "desc": "Returns true is this panel was configured to be closable"
    },
    {
     "name": "load",
     "sig": "(Object/String/Function url, String/Object params, Function callback, Boolean discardUrl)",
     "type": "function",
     "desc": "Loads this content panel immediately with content from XHR. Note: to delay loading until the panel is activated, use {@link #setUrl}."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "refresh",
     "sig": "()",
     "type": "function",
     "desc": "Force a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the {@link #setUrl} method has not been called.\n  This does not activate the panel, just updates its content."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setContent",
     "sig": "(String content, Boolean loadScripts)",
     "type": "function",
     "desc": "Updates this panel's element"
    },
    {
     "name": "setTitle",
     "sig": "(String title)",
     "type": "function",
     "desc": "Set this panel's title"
    },
    {
     "name": "setUrl",
     "sig": "(String/Function url, String/Object params, Boolean loadOnce)",
     "type": "function",
     "desc": "Set a URL to be used to load the content for this panel. When this panel is activated, the content will be loaded from that URL."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.HtmlEditorCore": {
   "props": [
    {
     "name": "the",
     "type": "Roo.form.HtmlEditor|Roo.bootstrap.HtmlEditor",
     "desc": "owner field",
     "memberOf": ""
    },
    {
     "name": "resizable",
     "type": "String",
     "desc": "'s' or 'se' or 'e' - wrapps the element in a\n                       Roo.resizable.",
     "memberOf": ""
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "(in pixels)",
     "memberOf": ""
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "(in pixels)",
     "memberOf": ""
    },
    {
     "name": "stylesheets",
     "type": "Array",
     "desc": "url of stylesheets. set to [] to disable stylesheets.",
     "memberOf": ""
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the editor is first receives the focus. Any insertion must wait\nuntil after this event."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforepush",
     "sig": "function (_self, html)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the iframe editor is updated with content from the textarea. Return false\nto cancel the push."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "beforesync",
     "sig": "function (_self, html)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the textarea is updated with content from the editor iframe. Return false\nto cancel the sync."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "editorevent",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when on any editor (mouse up/down cursor movement etc.) - used for toolbar hooks."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "initialize",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the editor is fully initialized (including the iframe)"
    },
    {
     "name": "push",
     "sig": "function (_self, html)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the iframe editor is updated with content from the textarea."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "sync",
     "sig": "function (_self, html)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the textarea is updated with content from the editor iframe."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "cleanHtml",
     "sig": "(String html)",
     "type": "function",
     "desc": "Protected method that will not generally be called directly. If you need/want\ncustom HTML cleanup, this is the method you should override."
    },
    {
     "name": "cleanWord",
     "sig": "()",
     "type": "function",
     "desc": "Clean up MS wordisms..."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "execCmd",
     "sig": "(String cmd, String/Boolean value)",
     "type": "function",
     "desc": "Executes a Midas editor command directly on the editor document.\nFor visual commands, you should use {@link #relayCmd} instead.\n<b>This should only be called after the editor is initialized.</b>"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getDocMarkup",
     "sig": "()",
     "type": "function",
     "desc": "Protected method that will not generally be called directly. It\nis called when the editor initializes the iframe with HTML contents. Override this method if you\nwant to change the initialization markup of the iframe (e.g. to add stylesheets)."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "insertAtCursor",
     "sig": "(String text)",
     "type": "function",
     "desc": "Inserts the passed text at the current cursor position. Note: the editor must be initialized and activated\nto insert tRoo."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "pushValue",
     "sig": "()",
     "type": "function",
     "desc": "Protected method that will not generally be called directly. Pushes the value of the textarea\ninto the iframe editor."
    },
    {
     "name": "rangeIntersectsNode",
     "sig": "()",
     "type": "function",
     "desc": "Range intersection.. the hard stuff...\n '-1' = before\n '0' = hits..\n '1' = after.\n        [ -- selected range --- ]\n  [fail]                        [fail]\n\n   basically..\n     if end is before start or  hits it. fail.\n     if start is after end or hits it fail.\n\n  if either hits (but other is outside. - then it's not"
    },
    {
     "name": "relayCmd",
     "sig": "(String cmd, String/Boolean value)",
     "type": "function",
     "desc": "Executes a Midas editor command on the editor document and performs necessary focus and\ntoolbar updates. <b>This should only be called after the editor is initialized.</b>"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncValue",
     "sig": "()",
     "type": "function",
     "desc": "HTML Editor -> Textarea\nProtected method that will not generally be called directly. Syncs the contents\nof the editor iframe with the textarea."
    },
    {
     "name": "toggleSourceEdit",
     "sig": "(Boolean sourceEdit)",
     "type": "function",
     "desc": "Toggles the editor between standard and source edit mode."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.JsonView": {
   "props": [
    {
     "name": "store",
     "type": "Roo.data.Store",
     "desc": "Data store to load data from.",
     "memberOf": "Roo.View"
    },
    {
     "name": "el",
     "type": "String|Roo.Element",
     "desc": "The container element.",
     "memberOf": "Roo.View"
    },
    {
     "name": "tpl",
     "type": "String|Roo.Template",
     "desc": "The template used by this View",
     "memberOf": "Roo.View"
    },
    {
     "name": "dataName",
     "type": "String",
     "desc": "the named area of the template to use as the data area\n                         Works with domtemplates roo-name=\"name\"",
     "memberOf": "Roo.View"
    },
    {
     "name": "selectedClass",
     "type": "String",
     "desc": "The css class to add to selected nodes",
     "memberOf": "Roo.View"
    },
    {
     "name": "emptyText",
     "type": "String",
     "desc": "The empty text to show when nothing is loaded.",
     "memberOf": "Roo.View"
    },
    {
     "name": "text",
     "type": "String",
     "desc": "to display on mask (default Loading)",
     "memberOf": "Roo.View"
    },
    {
     "name": "multiSelect",
     "type": "Boolean",
     "desc": "Allow multiple selection",
     "memberOf": "Roo.View"
    },
    {
     "name": "singleSelect",
     "type": "Boolean",
     "desc": "Allow single selection",
     "memberOf": "Roo.View"
    },
    {
     "name": "toggleSelect",
     "type": "Boolean",
     "desc": "- selecting",
     "memberOf": "Roo.View"
    },
    {
     "name": "tickable",
     "type": "Boolean",
     "desc": "- selecting",
     "memberOf": "Roo.View"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforeclick",
     "sig": "function (_self, index, node, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a click is processed. Returns false to cancel the default action."
    },
    {
     "name": "beforerender",
     "sig": "function (_self, data)\n{\n\n}",
     "type": "function",
     "desc": "Fires before rendering of the downloaded JSON data."
    },
    {
     "name": "beforeselect",
     "sig": "function (_self, node, selections)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a selection is made. If any handlers return false, the selection is cancelled."
    },
    {
     "name": "click",
     "sig": "function (_self, index, node, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a template node is clicked."
    },
    {
     "name": "contextmenu",
     "sig": "function (_self, index, node, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a template node is right clicked."
    },
    {
     "name": "dblclick",
     "sig": "function (_self, index, node, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a template node is double clicked."
    },
    {
     "name": "load",
     "sig": "function (_self, data, response)\n{\n\n}",
     "type": "function",
     "desc": "Fires when data is loaded."
    },
    {
     "name": "loadexception",
     "sig": "function (_self, response)\n{\n\n}",
     "type": "function",
     "desc": "Fires when loading fails."
    },
    {
     "name": "preparedata",
     "sig": "function (_self, data)\n{\n\n}",
     "type": "function",
     "desc": "Fires on every row to render, to allow you to change the data."
    },
    {
     "name": "selectionchange",
     "sig": "function (_self, selections)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the selected nodes change."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearFilter",
     "sig": "()",
     "type": "function",
     "desc": "Clears the current filter."
    },
    {
     "name": "clearSelections",
     "sig": "(Boolean suppressEvent)",
     "type": "function",
     "desc": "Clear all selections"
    },
    {
     "name": "filter",
     "sig": "(String property, String/RegExp value)",
     "type": "function",
     "desc": "Filter the data by a specific property."
    },
    {
     "name": "filterBy",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Filter by a function. The passed function will be called with each\nobject in the current dataset. If the function returns true the value is kept,\notherwise it is filtered."
    },
    {
     "name": "findItemFromChild",
     "sig": "(HTMLElement node)",
     "type": "function",
     "desc": "Returns the template node the passed child belongs to or null if it doesn't belong to one."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getCount",
     "sig": "()",
     "type": "function",
     "desc": "Get the number of records in the current JSON dataset"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the element this view is bound to."
    },
    {
     "name": "getNode",
     "sig": "(HTMLElement/String/Number nodeInfo)",
     "type": "function",
     "desc": "Gets a template node."
    },
    {
     "name": "getNodeData",
     "sig": "(HTMLElement/Array node)",
     "type": "function",
     "desc": "Returns the JSON object for the specified node(s)"
    },
    {
     "name": "getNodes",
     "sig": "(Number startIndex, Number endIndex)",
     "type": "function",
     "desc": "Gets a range template nodes."
    },
    {
     "name": "getSelectedIndexes",
     "sig": "()",
     "type": "function",
     "desc": "Get the indexes of the selected nodes."
    },
    {
     "name": "getSelectedNodes",
     "sig": "()",
     "type": "function",
     "desc": "Get the currently selected nodes."
    },
    {
     "name": "getSelectionCount",
     "sig": "()",
     "type": "function",
     "desc": "Get the number of selected nodes."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "indexOf",
     "sig": "(HTMLElement/String/Number nodeInfo)",
     "type": "function",
     "desc": "Finds the index of the passed node"
    },
    {
     "name": "isSelected",
     "sig": "(HTMLElement/Number node)",
     "type": "function",
     "desc": "Returns true if the passed node is selected"
    },
    {
     "name": "load",
     "sig": "(Object/String/Function url, String/Object params, Function callback, Boolean discardUrl)",
     "type": "function",
     "desc": "Performs an async HTTP request, and loads the JSON from the response. If <i>params</i> are specified it uses POST, otherwise it uses GET."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onBeforeLoad",
     "sig": "()",
     "type": "function",
     "desc": "onbeforeLoad - masks the loading area."
    },
    {
     "name": "prepareData",
     "sig": "(Array/Object data)",
     "type": "function",
     "desc": "Function to override to reformat the data that is sent to\nthe template for each node.\nDEPRICATED - use the preparedata event handler."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "refresh",
     "sig": "()",
     "type": "function",
     "desc": "Refreshes the view."
    },
    {
     "name": "refreshNode",
     "sig": "(Number index)",
     "type": "function",
     "desc": "Refresh an individual node."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "select",
     "sig": "(Array/HTMLElement/String/Number nodeInfo, Boolean keepExisting, Boolean suppressEvent)",
     "type": "function",
     "desc": "Selects nodes."
    },
    {
     "name": "setStore",
     "sig": "(Store store)",
     "type": "function",
     "desc": "Changes the data store this view uses and refresh the view."
    },
    {
     "name": "sort",
     "sig": "(String property, String direction, Function sortType)",
     "type": "function",
     "desc": "Sorts the data for this view and refreshes it."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unselect",
     "sig": "(Array/HTMLElement/String/Number nodeInfo, Boolean keepExisting, Boolean suppressEvent)",
     "type": "function",
     "desc": "Unselects nodes."
    }
   ]
  },
  "Roo.KeyMap": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "addBinding",
     "sig": "(Object/Array config)",
     "type": "function",
     "desc": "Add a new binding to this KeyMap. The following config object properties are supported:\n<pre>\nProperty    Type             Description\n----------  ---------------  ----------------------------------------------------------------------\nkey         String/Array     A single keycode or an array of keycodes to handle\nshift       Boolean          True to handle key only when shift is pressed (defaults to false)\nctrl        Boolean          True to handle key only when ctrl is pressed (defaults to false)\nalt         Boolean          True to handle key only when alt is pressed (defaults to false)\nfn          Function         The function to call when KeyMap finds the expected key combination\nscope       Object           The scope of the callback function\n</pre>\n\nUsage:\n<pre><code>\n// Create a KeyMap\nvar map = new Roo.KeyMap(document, {\n    key: Roo.EventObject.ENTER,\n    fn: handleKey,\n    scope: this\n});\n\n//Add a new binding to the existing KeyMap later\nmap.addBinding({\n    key: 'abc',\n    shift: true,\n    fn: handleKey,\n    scope: this\n});\n</code></pre>"
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this KeyMap"
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enables this KeyMap"
    },
    {
     "name": "isEnabled",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this KeyMap is enabled"
    },
    {
     "name": "on",
     "sig": "(Number/Array/Object key, Function fn, Object scope)",
     "type": "function",
     "desc": "Shorthand for adding a single key listener"
    }
   ]
  },
  "Roo.KeyNav": {
   "props": [
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable this KeyNav instance (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "defaultEventAction",
     "type": "String",
     "desc": "The method to call on the {@link Roo.EventObject} after this KeyNav intercepts a key.  Valid values are\n{@link Roo.EventObject#stopEvent}, {@link Roo.EventObject#preventDefault} and\n{@link Roo.EventObject#stopPropagation} (defaults to 'stopEvent')",
     "memberOf": ""
    },
    {
     "name": "forceKeyDown",
     "type": "Boolean",
     "desc": "Handle the keydown event instead of keypress (defaults to false).  KeyNav automatically does this for IE since\nIE does not propagate special keys on keypress, but setting this to true will force other browsers to also\nhandle keydown instead of keypress.",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this KeyNav"
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this KeyNav"
    }
   ]
  },
  "Roo.Layer": {
   "props": [
    {
     "name": "shim",
     "type": "Boolean",
     "desc": "False to disable the iframe shim in browsers which need one (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "shadow",
     "type": "String/Boolean",
     "desc": "True to create a shadow element with default class \"x-layer-shadow\", or\nyou can pass a string with a CSS class name. False turns off the shadow.",
     "memberOf": ""
    },
    {
     "name": "dh",
     "type": "Object",
     "desc": "DomHelper object config to create element with (defaults to {tag: \"div\", cls: \"x-layer\"}).",
     "memberOf": ""
    },
    {
     "name": "constrain",
     "type": "Boolean",
     "desc": "False to disable constrain to viewport (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "CSS class to add to the element",
     "memberOf": ""
    },
    {
     "name": "zindex",
     "type": "Number",
     "desc": "Starting z-index (defaults to 11000)",
     "memberOf": ""
    },
    {
     "name": "shadowOffset",
     "type": "Number",
     "desc": "Number of pixels to offset the shadow (defaults to 3)",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "addClass",
     "sig": "(String/Array className)",
     "type": "function",
     "desc": "Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out."
    },
    {
     "name": "addClassOnClick",
     "sig": "(String className)",
     "type": "function",
     "desc": "Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)"
    },
    {
     "name": "addClassOnFocus",
     "sig": "(String className)",
     "type": "function",
     "desc": "Sets up event handlers to add and remove a css class when this element has the focus"
    },
    {
     "name": "addClassOnOver",
     "sig": "(String className, Boolean preventFlicker)",
     "type": "function",
     "desc": "Sets up event handlers to add and remove a css class when the mouse is over this element"
    },
    {
     "name": "addKeyListener",
     "sig": "(Number/Array/Object/String key, Function fn, Object scope)",
     "type": "function",
     "desc": "Convenience method for constructing a KeyMap"
    },
    {
     "name": "addKeyMap",
     "sig": "(Object config)",
     "type": "function",
     "desc": "Creates a KeyMap for this element"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function fn, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler"
    },
    {
     "name": "alignTo",
     "sig": "(String/HTMLElement/Roo.Element element, String position, Array offsets, Boolean/Object animate)",
     "type": "function",
     "desc": "Aligns this element with another element relative to the specified anchor points. If the other element is the\ndocument it aligns it to the viewport.\nThe position parameter is optional, and can be specified in any one of the following formats:\n<ul>\n  <li><b>Blank</b>: Defaults to aligning the element's top-left corner to the target's bottom-left corner (\"tl-bl\").</li>\n  <li><b>One anchor (deprecated)</b>: The passed anchor position is used as the target element's anchor point.\n      The element being aligned will position its top-left corner (tl) to that point.  <i>This method has been\n      deprecated in favor of the newer two anchor syntax below</i>.</li>\n  <li><b>Two anchors</b>: If two values from the table below are passed separated by a dash, the first value is used as the\n      element's anchor point, and the second value is used as the target's anchor point.</li>\n</ul>\nIn addition to the anchor points, the position parameter also supports the \"?\" character.  If \"?\" is passed at the end of\nthe position string, the element will attempt to align as specified, but the position will be adjusted to constrain to\nthe viewport if necessary.  Note that the element being aligned might be swapped to align to a different position than\nthat specified in order to enforce the viewport constraints.\nFollowing are all of the supported anchor positions:\n    <pre>\n    Value  Description\n    -----  -----------------------------\n    tl     The top left corner (default)\n    t      The center of the top edge\n    tr     The top right corner\n    l      The center of the left edge\n    c      In the center of the element\n    r      The center of the right edge\n    bl     The bottom left corner\n    b      The center of the bottom edge\n    br     The bottom right corner\n    </pre>\n    Example Usage:\n    <pre><code>\n    // align el to other-el using the default positioning (\"tl-bl\", non-constrained)\n    el.alignTo(\"other-el\");\n\n    // align the top left corner of el with the top right corner of other-el (constrained to viewport)\n    el.alignTo(\"other-el\", \"tr?\");\n\n    // align the bottom right corner of el with the center left edge of other-el\n    el.alignTo(\"other-el\", \"br-l?\");\n\n    // align the center of el with the bottom left corner of other-el and\n    // adjust the x position by -6 pixels (and the y position by 0)\n    el.alignTo(\"other-el\", \"c-bl\", [-6, 0]);\n    </code></pre>"
    },
    {
     "name": "anchorTo",
     "sig": "(String/HTMLElement/Roo.Element element, String position, Array offsets, Boolean/Object animate, Boolean/Number monitorScroll, Function callback)",
     "type": "function",
     "desc": "Anchors an element to another element and realigns it when the window is resized."
    },
    {
     "name": "animate",
     "sig": "(Object args, Float duration, Function onComplete, String easing, String animType)",
     "type": "function",
     "desc": "Perform animation on this element."
    },
    {
     "name": "appendChild",
     "sig": "(String/HTMLElement/Array/Element/CompositeElement el)",
     "type": "function",
     "desc": "Appends the passed element(s) to this element"
    },
    {
     "name": "appendTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Appends this element to the passed element"
    },
    {
     "name": "applyStyles",
     "sig": "(String/Object/Function styles)",
     "type": "function",
     "desc": "More flexible version of {@link #setStyle} for setting style properties."
    },
    {
     "name": "attr",
     "sig": "(String|Object name, String value)",
     "type": "function",
     "desc": "Sets or Returns the value the dom attribute value"
    },
    {
     "name": "autoHeight",
     "sig": "(Boolean animate, Float duration, Function onComplete, String easing)",
     "type": "function",
     "desc": "Measures the element's content height and updates height to match. Note: this function uses setTimeout so\nthe new height may not be available immediately."
    },
    {
     "name": "beginMeasure",
     "sig": "()",
     "type": "function",
     "desc": "Temporarily enables offsets (width,height,x,y) for an element with display:none, use endMeasure() when done."
    },
    {
     "name": "blur",
     "sig": "()",
     "type": "function",
     "desc": "Tries to blur the element. Any exceptions are caught and ignored."
    },
    {
     "name": "boxWrap",
     "sig": "(String class)",
     "type": "function",
     "desc": "Wraps the specified element with a special markup/CSS block that renders by default as a gray container with a\ngradient background, rounded corners and a 4-way shadow."
    },
    {
     "name": "center",
     "sig": "(String/HTMLElement/Roo.Element centerIn)",
     "type": "function",
     "desc": "Centers the Element in either the viewport, or another Element."
    },
    {
     "name": "child",
     "sig": "(String selector, Boolean returnDom)",
     "type": "function",
     "desc": "Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id)."
    },
    {
     "name": "clean",
     "sig": "(Boolean forceReclean)",
     "type": "function",
     "desc": "Removes worthless text nodes"
    },
    {
     "name": "clearOpacity",
     "sig": "()",
     "type": "function",
     "desc": "Clears any opacity settings from this element. Required in some cases for IE."
    },
    {
     "name": "clearPositioning",
     "sig": "(String value)",
     "type": "function",
     "desc": "Clear positioning back to the default when the document was loaded"
    },
    {
     "name": "clip",
     "sig": "()",
     "type": "function",
     "desc": "Store the current overflow setting and clip overflow on the element - use {@link #unclip} to remove"
    },
    {
     "name": "contains",
     "sig": "(HTMLElement/String el)",
     "type": "function",
     "desc": "Returns true if this element is an ancestor of the passed element"
    },
    {
     "name": "createChild",
     "sig": "(Object config, HTMLElement insertBefore, Boolean returnDom)",
     "type": "function",
     "desc": "Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element."
    },
    {
     "name": "createProxy",
     "sig": "(String/Object config, String/HTMLElement renderTo, Boolean matchBox)",
     "type": "function",
     "desc": "Creates a proxy element of this element"
    },
    {
     "name": "createShim",
     "sig": "()",
     "type": "function",
     "desc": "Creates an iframe shim for this element to keep selects and other windowed objects from\nshowing through."
    },
    {
     "name": "down",
     "sig": "(String selector, Boolean returnDom)",
     "type": "function",
     "desc": "Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id)."
    },
    {
     "name": "enableDisplayMode",
     "sig": "(String display)",
     "type": "function",
     "desc": "Convenience method for setVisibilityMode(Element.DISPLAY)"
    },
    {
     "name": "endMeasure",
     "sig": "()",
     "type": "function",
     "desc": "Restores displays to before beginMeasure was called"
    },
    {
     "name": "findParent",
     "sig": "(String selector, Number/String/HTMLElement/Element maxDepth, Boolean returnEl)",
     "type": "function",
     "desc": "Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)"
    },
    {
     "name": "findParentNode",
     "sig": "(String selector, Number/String/HTMLElement/Element maxDepth, Boolean returnEl)",
     "type": "function",
     "desc": "Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)"
    },
    {
     "name": "fitToParent",
     "sig": "(Boolean monitorResize, String/HTMLElment/Element targetParent)",
     "type": "function",
     "desc": "Sizes this element to its parent element's dimensions performing\nneccessary box adjustments."
    },
    {
     "name": "fly",
     "sig": "(String/HTMLElement el, String named)",
     "type": "function",
     "desc": "Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -\nthe dom node can be overwritten by other code."
    },
    {
     "name": "focus",
     "sig": "()",
     "type": "function",
     "desc": "Tries to focus the element. Any exceptions are caught and ignored."
    },
    {
     "name": "get",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Static method to retrieve Element objects. Uses simple caching to consistently return the same object.\nAutomatically fixes if an object was recreated with the same id via AJAX or DOM."
    },
    {
     "name": "getAlignToXY",
     "sig": "(String/HTMLElement/Roo.Element element, String position, Array offsets)",
     "type": "function",
     "desc": "Gets the x,y coordinates to align this element with another element. See {@link #alignTo} for more info on the\nsupported position values."
    },
    {
     "name": "getAnchorXY",
     "sig": "(String anchor, Object size, Boolean local)",
     "type": "function",
     "desc": "Gets the x,y coordinates specified by the anchor position on the element."
    },
    {
     "name": "getAttributeNS",
     "sig": "(String namespace, String name)",
     "type": "function",
     "desc": "Returns the value of a namespaced attribute from the element's underlying DOM node."
    },
    {
     "name": "getBorderWidth",
     "sig": "(String side)",
     "type": "function",
     "desc": "Gets the width of the border(s) for the specified side(s)"
    },
    {
     "name": "getBottom",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the bottom Y coordinate of the element (element Y position + element height)"
    },
    {
     "name": "getBox",
     "sig": "(Boolean contentBox, Boolean local)",
     "type": "function",
     "desc": "Return a box {x, y, width, height} that can be used to set another elements\nsize/location to match this element."
    },
    {
     "name": "getCenterXY",
     "sig": "()",
     "type": "function",
     "desc": "Calculates the x, y to center this element on the screen"
    },
    {
     "name": "getColor",
     "sig": "(String attr, String defaultValue, String prefix)",
     "type": "function",
     "desc": "Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values\nare convert to standard 6 digit hex color."
    },
    {
     "name": "getComputedHeight",
     "sig": "()",
     "type": "function",
     "desc": "Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders\nwhen needed to simulate offsetHeight when offsets aren't available. This may not work on display:none elements\nif a height has not been set using CSS."
    },
    {
     "name": "getComputedWidth",
     "sig": "()",
     "type": "function",
     "desc": "Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders\nwhen needed to simulate offsetWidth when offsets aren't available. This may not work on display:none elements\nif a width has not been set using CSS."
    },
    {
     "name": "getFrameWidth",
     "sig": "(String sides)",
     "type": "function",
     "desc": "Returns the sum width of the padding and borders for the passed \"sides\". See getBorderWidth()\n         for more information about the sides."
    },
    {
     "name": "getHeight",
     "sig": "(Boolean contentHeight)",
     "type": "function",
     "desc": "Returns the offset height of the element"
    },
    {
     "name": "getLeft",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the left X coordinate"
    },
    {
     "name": "getMargins",
     "sig": "(String sides)",
     "type": "function",
     "desc": "Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,\nthen it returns the calculated width of the sides (see getPadding)"
    },
    {
     "name": "getNextSibling",
     "sig": "()",
     "type": "function",
     "desc": "Gets the next sibling, skipping text nodes"
    },
    {
     "name": "getPadding",
     "sig": "(String side)",
     "type": "function",
     "desc": "Gets the width of the padding(s) for the specified side(s)"
    },
    {
     "name": "getPositioning",
     "sig": "()",
     "type": "function",
     "desc": "Gets an object with all CSS positioning properties. Useful along with setPostioning to get\nsnapshot before performing an update and then restoring the element."
    },
    {
     "name": "getPrevSibling",
     "sig": "()",
     "type": "function",
     "desc": "Gets the previous sibling, skipping text nodes"
    },
    {
     "name": "getRegion",
     "sig": "()",
     "type": "function",
     "desc": "Returns the region of the given element.\nThe element must be part of the DOM tree to have a region (display:none or elements not appended return false)."
    },
    {
     "name": "getRight",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the right X coordinate of the element (element X position + element width)"
    },
    {
     "name": "getScroll",
     "sig": "()",
     "type": "function",
     "desc": "Returns the current scroll position of the element."
    },
    {
     "name": "getSize",
     "sig": "(Boolean contentSize)",
     "type": "function",
     "desc": "Returns the size of the element."
    },
    {
     "name": "getStyle",
     "sig": "(String property)",
     "type": "function",
     "desc": "Normalizes currentStyle and computedStyle. This is not YUI getStyle, it is an optimised version."
    },
    {
     "name": "getStyles",
     "sig": "(String style1, String style2)",
     "type": "function",
     "desc": "Returns an object with properties matching the styles requested.\nFor example, el.getStyles('color', 'font-size', 'width') might return\n{'color': '#FFFFFF', 'font-size': '13px', 'width': '100px'}."
    },
    {
     "name": "getTop",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the top Y coordinate"
    },
    {
     "name": "getUpdateManager",
     "sig": "()",
     "type": "function",
     "desc": "Gets this element's UpdateManager"
    },
    {
     "name": "getValue",
     "sig": "(Boolean asNumber)",
     "type": "function",
     "desc": "Returns the value of the \"value\" attribute"
    },
    {
     "name": "getViewSize",
     "sig": "()",
     "type": "function",
     "desc": "Returns the width and height of the viewport."
    },
    {
     "name": "getWidth",
     "sig": "(Boolean contentWidth)",
     "type": "function",
     "desc": "Returns the offset width of the element"
    },
    {
     "name": "getX",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."
    },
    {
     "name": "getXY",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."
    },
    {
     "name": "getY",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."
    },
    {
     "name": "hasClass",
     "sig": "(String className)",
     "type": "function",
     "desc": "Checks if the specified CSS class exists on this element's DOM node."
    },
    {
     "name": "hide",
     "sig": "(Boolean/Object animate)",
     "type": "function",
     "desc": "Hide this element - Uses display mode to determine whether to use \"display\" or \"visibility\". See {@link #setVisible}."
    },
    {
     "name": "initDD",
     "sig": "(String group, Object config, Object overrides)",
     "type": "function",
     "desc": "Initializes a {@link Roo.dd.DD} drag drop object for this element."
    },
    {
     "name": "initDDProxy",
     "sig": "(String group, Object config, Object overrides)",
     "type": "function",
     "desc": "Initializes a {@link Roo.dd.DDProxy} object for this element."
    },
    {
     "name": "initDDTarget",
     "sig": "(String group, Object config, Object overrides)",
     "type": "function",
     "desc": "Initializes a {@link Roo.dd.DDTarget} object for this element."
    },
    {
     "name": "insertAfter",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Inserts this element after the passed element in the DOM"
    },
    {
     "name": "insertBefore",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Inserts this element before the passed element in the DOM"
    },
    {
     "name": "insertFirst",
     "sig": "(String/HTMLElement/Element/Object el)",
     "type": "function",
     "desc": "Inserts (or creates) an element (or DomHelper config) as the first child of the this element"
    },
    {
     "name": "insertHtml",
     "sig": "(String where, String html, Boolean returnEl)",
     "type": "function",
     "desc": "Inserts an html fragment into this element"
    },
    {
     "name": "insertSibling",
     "sig": "(String/HTMLElement/Element/Object el, String where, Boolean returnDom)",
     "type": "function",
     "desc": "Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element"
    },
    {
     "name": "is",
     "sig": "(String selector)",
     "type": "function",
     "desc": "Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)"
    },
    {
     "name": "isBorderBox",
     "sig": "()",
     "type": "function",
     "desc": "Tests various css rules/browsers to determine if this element uses a border box"
    },
    {
     "name": "isDisplayed",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if display is not \"none\""
    },
    {
     "name": "isMasked",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this element is masked"
    },
    {
     "name": "isScrollable",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this element is scrollable."
    },
    {
     "name": "isVisible",
     "sig": "(Boolean deep)",
     "type": "function",
     "desc": "Checks whether the element is currently visible using both visibility and display properties."
    },
    {
     "name": "load",
     "sig": "(String/Function url, String/Object params, Function callback, Boolean discardUrl)",
     "type": "function",
     "desc": "Direct access to the UpdateManager update() method (takes the same parameters)."
    },
    {
     "name": "mask",
     "sig": "(String msg, String msgCls)",
     "type": "function",
     "desc": "Puts a mask over this element to disable user interaction. Requires core.css.\nThis method can only be applied to elements which accept child nodes."
    },
    {
     "name": "move",
     "sig": "(String direction, Number distance, Boolean/Object animate)",
     "type": "function",
     "desc": "Move this element relative to its current position."
    },
    {
     "name": "moveTo",
     "sig": "(Number x, Number y, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the position of the element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function fn, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler (Shorthand for addListener)"
    },
    {
     "name": "position",
     "sig": "(String pos, Number zIndex, Number x, Number y)",
     "type": "function",
     "desc": "Initializes positioning on this element. If a desired position is not passed, it will make the\nthe element positioned relative IF it is not already positioned."
    },
    {
     "name": "query",
     "sig": "(String selector)",
     "type": "function",
     "desc": "Selects child nodes based on the passed CSS selector (the selector should not contain an id)."
    },
    {
     "name": "radioClass",
     "sig": "(String/Array className)",
     "type": "function",
     "desc": "Adds one or more CSS classes to this element and removes the same class(es) from all siblings."
    },
    {
     "name": "remove",
     "sig": "()",
     "type": "function",
     "desc": "Removes this element from the DOM and deletes it from the cache"
    },
    {
     "name": "removeAllListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all previous added listeners from this element"
    },
    {
     "name": "removeClass",
     "sig": "(String/Array className)",
     "type": "function",
     "desc": "Removes one or more CSS classes from the element."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function fn)",
     "type": "function",
     "desc": "Removes an event handler from this element"
    },
    {
     "name": "repaint",
     "sig": "()",
     "type": "function",
     "desc": "Forces the browser to repaint this element"
    },
    {
     "name": "replace",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Replaces the passed element with this element"
    },
    {
     "name": "replaceClass",
     "sig": "(String oldClassName, String newClassName)",
     "type": "function",
     "desc": "Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added."
    },
    {
     "name": "scroll",
     "sig": "(String direction, Number distance, Boolean/Object animate)",
     "type": "function",
     "desc": "Scrolls this element the specified direction. Does bounds checking to make sure the scroll is\nwithin this element's scrollable range."
    },
    {
     "name": "scrollIntoView",
     "sig": "(String/HTMLElement/Element container, Boolean hscroll)",
     "type": "function",
     "desc": "Scrolls this element into view within the passed container."
    },
    {
     "name": "scrollTo",
     "sig": "(String side, Number value, Boolean/Object animate)",
     "type": "function",
     "desc": "Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll()."
    },
    {
     "name": "select",
     "sig": "(String selector, Boolean unique)",
     "type": "function",
     "desc": "Creates a {@link Roo.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id)."
    },
    {
     "name": "set",
     "sig": "(Object o, Boolean useSet)",
     "type": "function",
     "desc": "Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)"
    },
    {
     "name": "setBottom",
     "sig": "(String bottom)",
     "type": "function",
     "desc": "Sets the element's CSS bottom style."
    },
    {
     "name": "setBounds",
     "sig": "(Number x, Number y, Number width, Number height, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently."
    },
    {
     "name": "setBox",
     "sig": "(Object box, Boolean adjust, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently."
    },
    {
     "name": "setDisplayed",
     "sig": "(Boolean value)",
     "type": "function",
     "desc": "Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true."
    },
    {
     "name": "setHeight",
     "sig": "(Number height, Boolean/Object animate)",
     "type": "function",
     "desc": "Set the height of the element"
    },
    {
     "name": "setLeft",
     "sig": "(String left)",
     "type": "function",
     "desc": "Sets the element's left position directly using CSS style (instead of {@link #setX})."
    },
    {
     "name": "setLeftTop",
     "sig": "(String left, String top)",
     "type": "function",
     "desc": "Quick set left and top adding default units"
    },
    {
     "name": "setLocation",
     "sig": "(Number x, Number y, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the position of the element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."
    },
    {
     "name": "setOpacity",
     "sig": "(Float opacity, Boolean/Object animate)",
     "type": "function",
     "desc": "Set the opacity of the element"
    },
    {
     "name": "setPositioning",
     "sig": "(Object posCfg)",
     "type": "function",
     "desc": "Set positioning with an object returned by getPositioning()."
    },
    {
     "name": "setRegion",
     "sig": "(Roo.lib.Region region, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the element's position and size the the specified region. If animation is true then width, height, x and y will be animated concurrently."
    },
    {
     "name": "setRight",
     "sig": "(String right)",
     "type": "function",
     "desc": "Sets the element's CSS right style."
    },
    {
     "name": "setSize",
     "sig": "(Number width, Number height, Boolean/Object animate)",
     "type": "function",
     "desc": "Set the size of the element. If animation is true, both width an height will be animated concurrently."
    },
    {
     "name": "setStyle",
     "sig": "(String/Object property, String value)",
     "type": "function",
     "desc": "Wrapper for setting style properties, also takes single object parameter of multiple styles."
    },
    {
     "name": "setTop",
     "sig": "(String top)",
     "type": "function",
     "desc": "Sets the element's top position directly using CSS style (instead of {@link #setY})."
    },
    {
     "name": "setVisibilityMode",
     "sig": "( visMode)",
     "type": "function",
     "desc": "Sets the element's visibility mode. When setVisible() is called it\nwill use this to determine whether to set the visibility or the display property."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use\nthe display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property."
    },
    {
     "name": "setWidth",
     "sig": "(Number width, Boolean/Object animate)",
     "type": "function",
     "desc": "Set the width of the element"
    },
    {
     "name": "setX",
     "sig": "(Number The, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."
    },
    {
     "name": "setXY",
     "sig": "(Array pos, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the position of the element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."
    },
    {
     "name": "setY",
     "sig": "(Number The, Boolean/Object animate)",
     "type": "function",
     "desc": "Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."
    },
    {
     "name": "setZIndex",
     "sig": "(Number zindex)",
     "type": "function",
     "desc": "Sets the z-index of this layer and adjusts any shadow and shim z-indexes. The layer z-index is automatically\nincremented by two more than the value passed in so that it always shows above any shadow or shim (the shadow\nelement, if any, will be assigned z-index + 1, and the shim element, if any, will be assigned the unmodified z-index)."
    },
    {
     "name": "show",
     "sig": "(Boolean/Object animate)",
     "type": "function",
     "desc": "Show this element - Uses display mode to determine whether to use \"display\" or \"visibility\". See {@link #setVisible}."
    },
    {
     "name": "swallowEvent",
     "sig": "(String eventName, Boolean preventDefault)",
     "type": "function",
     "desc": "Stops the specified event from bubbling and optionally prevents the default action"
    },
    {
     "name": "toggle",
     "sig": "(Boolean/Object animate)",
     "type": "function",
     "desc": "Toggles the element's visibility or display, depending on visibility mode."
    },
    {
     "name": "toggleClass",
     "sig": "(String className)",
     "type": "function",
     "desc": "Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it)."
    },
    {
     "name": "translatePoints",
     "sig": "(Number/Array x, Number y)",
     "type": "function",
     "desc": "Translates the passed page coordinates into left/top css values for this element"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function fn)",
     "type": "function",
     "desc": "Removes an event handler from this element (shorthand for removeListener)"
    },
    {
     "name": "unclip",
     "sig": "()",
     "type": "function",
     "desc": "Return clipping (overflow) to original clipping before clip() was called"
    },
    {
     "name": "unmask",
     "sig": "()",
     "type": "function",
     "desc": "Removes a previously applied mask. If removeEl is true the mask overlay is destroyed, otherwise\nit is cached for reuse."
    },
    {
     "name": "unselectable",
     "sig": "()",
     "type": "function",
     "desc": "Disables text selection for this element (normalized across browsers)"
    },
    {
     "name": "up",
     "sig": "(String selector, Number/String/HTMLElement/Element maxDepth)",
     "type": "function",
     "desc": "Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).\nThis is a shortcut for findParentNode() that always returns an Roo.Element."
    },
    {
     "name": "update",
     "sig": "(String html, Boolean loadScripts, Function callback)",
     "type": "function",
     "desc": "Update the innerHTML of this element, optionally searching for and processing scripts"
    },
    {
     "name": "wrap",
     "sig": "(Object config, Boolean returnDom)",
     "type": "function",
     "desc": "Creates and wraps this element with another element"
    }
   ]
  },
  "Roo.LayoutDialog": {
   "props": [
    {
     "name": "autoCreate",
     "type": "Boolean/DomHelper",
     "desc": "True to auto create from scratch, or using a DomHelper Object (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "title",
     "type": "String",
     "desc": "Default text to display in the title bar (defaults to null)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "Width of the dialog in pixels (can also be set via CSS).  Determined by browser if unspecified.",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "Height of the dialog in pixels (can also be set via CSS).  Determined by browser if unspecified.",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "x",
     "type": "Number",
     "desc": "The default left page coordinate of the dialog (defaults to center screen)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "y",
     "type": "Number",
     "desc": "The default top page coordinate of the dialog (defaults to center screen)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "animateTarget",
     "type": "String/Element",
     "desc": "Id or element from which the dialog should animate while opening\n(defaults to null with no animation)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "resizable",
     "type": "Boolean",
     "desc": "False to disable manual dialog resizing (defaults to true)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "resizeHandles",
     "type": "String",
     "desc": "Which resize handles to display - see the {@link Roo.Resizable} handles config\nproperty for valid values (defaults to 'all')",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "minHeight",
     "type": "Number",
     "desc": "The minimum allowable height for a resizable dialog (defaults to 80)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "minWidth",
     "type": "Number",
     "desc": "The minimum allowable width for a resizable dialog (defaults to 200)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "modal",
     "type": "Boolean",
     "desc": "True to show the dialog modally, preventing user interaction with the rest of the page (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "autoScroll",
     "type": "Boolean",
     "desc": "True to allow the dialog body contents to overflow and display scrollbars (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "closable",
     "type": "Boolean",
     "desc": "False to remove the built-in top-right corner close button (defaults to true)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "collapsible",
     "type": "Boolean",
     "desc": "False to remove the built-in top-right corner collapse button (defaults to true)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "constraintoviewport",
     "type": "Boolean",
     "desc": "True to keep the dialog constrained within the visible viewport boundaries (defaults to true)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "syncHeightBeforeShow",
     "type": "Boolean",
     "desc": "True to cause the dimensions to be recalculated before the dialog is shown (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "draggable",
     "type": "Boolean",
     "desc": "False to disable dragging of the dialog within the viewport (defaults to true)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "autoTabs",
     "type": "Boolean",
     "desc": "If true, all elements with class 'x-dlg-tab' will get automatically converted to tabs (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "tabTag",
     "type": "String",
     "desc": "The tag name of tab elements, used when autoTabs = true (defaults to 'div')",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "proxyDrag",
     "type": "Boolean",
     "desc": "True to drag a lightweight proxy element rather than the dialog itself, used when\ndraggable = true (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "fixedcenter",
     "type": "Boolean",
     "desc": "True to ensure that anytime the dialog is shown or resized it gets centered (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "shadow",
     "type": "Boolean/String",
     "desc": "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right\nshadow (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "shadowOffset",
     "type": "Number",
     "desc": "The number of pixels to offset the shadow if displayed (defaults to 5)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "buttonAlign",
     "type": "String",
     "desc": "Valid values are \"left,\" \"center\" and \"right\" (defaults to \"right\")",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "minButtonWidth",
     "type": "Number",
     "desc": "Minimum width of all dialog buttons (defaults to 75)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "buttons",
     "type": "Array",
     "desc": "Array of buttons",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "shim",
     "type": "Boolean",
     "desc": "True to create an iframe shim that prevents selects from showing through (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this dialog is hidden."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this dialog is shown."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this dialog is hidden."
    },
    {
     "name": "keydown",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a key is pressed"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this dialog is moved by the user."
    },
    {
     "name": "resize",
     "sig": "function (_self, width, height)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this dialog is resized by the user."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this dialog is shown."
    }
   ],
   "methods": [
    {
     "name": "addButton",
     "sig": "(String/Object config, Function handler, Object scope)",
     "type": "function",
     "desc": "Adds a button to the footer section of the dialog."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addKeyListener",
     "sig": "(Number/Array/Object key, Function fn, Object scope)",
     "type": "function",
     "desc": "Adds a key listener for when this dialog is displayed.  This allows you to hook in a function that will be\nexecuted in response to a particular key being pressed while the dialog is active."
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addxtype",
     "sig": "()",
     "type": "function",
     "desc": "Add an xtype element (actually adds to the layout.)"
    },
    {
     "name": "alignTo",
     "sig": "(String/HTMLElement/Roo.Element element, String position, Array offsets)",
     "type": "function",
     "desc": "Aligns the dialog to the specified element"
    },
    {
     "name": "anchorTo",
     "sig": "(String/HTMLElement/Roo.Element element, String position, Array offsets, Boolean/Number monitorScroll)",
     "type": "function",
     "desc": "Anchors an element to another element and realigns it when the window is resized."
    },
    {
     "name": "beginUpdate",
     "sig": "()",
     "type": "function",
     "desc": "Begins an update of the layout <strike>and sets display to block and visibility to hidden</strike>. Use standard beginUpdate/endUpdate on the layout."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "center",
     "sig": "()",
     "type": "function",
     "desc": "Centers this dialog in the viewport"
    },
    {
     "name": "collapse",
     "sig": "()",
     "type": "function",
     "desc": "Collapses the dialog to its minimized state (only the title bar is visible).\nEquivalent to the user clicking the collapse dialog button."
    },
    {
     "name": "destroy",
     "sig": "(Boolean removeEl)",
     "type": "function",
     "desc": "Destroys this dialog and all its supporting elements (including any tabs, shim,\nshadow, proxy, mask, etc.)  Also removes all event listeners."
    },
    {
     "name": "endUpdate",
     "sig": "()",
     "type": "function",
     "desc": "Ends update of the layout <strike>and resets display to none</strike>. Use standard beginUpdate/endUpdate on the layout."
    },
    {
     "name": "expand",
     "sig": "()",
     "type": "function",
     "desc": "Expands a collapsed dialog back to its normal state.  Equivalent to the user\nclicking the expand dialog button."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "()",
     "type": "function",
     "desc": "Focuses the dialog.  If a defaultButton is set, it will receive focus, otherwise the\ndialog itself will receive focus."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the element for this dialog"
    },
    {
     "name": "getLayout",
     "sig": "()",
     "type": "function",
     "desc": "Get the BorderLayout for this dialog"
    },
    {
     "name": "getTabs",
     "sig": "()",
     "type": "function",
     "desc": "Returns the TabPanel component (creates it if it doesn't exist).\nNote: If you wish to simply check for the existence of tabs without creating them,\ncheck for a null 'tabs' property."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "(Function callback)",
     "type": "function",
     "desc": "Hides the dialog."
    },
    {
     "name": "initTabs",
     "sig": "()",
     "type": "function",
     "desc": "Reinitializes the tabs component, clearing out old tabs and finding new ones."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the dialog is visible"
    },
    {
     "name": "moveTo",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Moves the dialog's top-left corner to the specified point"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "resizeTo",
     "sig": "(Number width, Number height)",
     "type": "function",
     "desc": "Resizes the dialog."
    },
    {
     "name": "restoreState",
     "sig": "()",
     "type": "function",
     "desc": "Restores the previous state of the dialog if Roo.state is configured."
    },
    {
     "name": "setContentSize",
     "sig": "(Number width, Number height)",
     "type": "function",
     "desc": "Resizes the dialog to fit the specified content size."
    },
    {
     "name": "setDefaultButton",
     "sig": "(Roo.BasicDialog.Button btn)",
     "type": "function",
     "desc": "Sets the default button to be focused when the dialog is displayed."
    },
    {
     "name": "setTitle",
     "sig": "(String text)",
     "type": "function",
     "desc": "Sets the dialog title text"
    },
    {
     "name": "show",
     "sig": "(String/HTMLElement/Roo.Element animateTarget)",
     "type": "function",
     "desc": "Shows the dialog."
    },
    {
     "name": "toBack",
     "sig": "()",
     "type": "function",
     "desc": "Sends this dialog to the back (under) of any other visible dialogs"
    },
    {
     "name": "toFront",
     "sig": "()",
     "type": "function",
     "desc": "Brings this dialog to the front of any other visible dialogs"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.LayoutManager": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "layout",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a layout is performed."
    },
    {
     "name": "regioncollapsed",
     "sig": "function (region)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a region is collapsed."
    },
    {
     "name": "regionexpanded",
     "sig": "function (region)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a region is expanded."
    },
    {
     "name": "regionresized",
     "sig": "function (region, newSize)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the user resizes a region."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "beginUpdate",
     "sig": "()",
     "type": "function",
     "desc": "Suspend the LayoutManager from doing auto-layouts while\nmaking multiple add or remove calls"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "endUpdate",
     "sig": "(Boolean noLayout)",
     "type": "function",
     "desc": "Restore auto-layouts and optionally disable the manager from performing a layout"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the Element this layout is bound to."
    },
    {
     "name": "getRegion",
     "sig": "(String target)",
     "type": "function",
     "desc": "Returns the specified region."
    },
    {
     "name": "getViewSize",
     "sig": "()",
     "type": "function",
     "desc": "Returns the size of the current view. This method normalizes document.body and element embedded layouts and\nperforms box-model adjustments."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isUpdating",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this layout is currently being updated"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.LayoutRegion": {
   "props": [
    {
     "name": "collapsible",
     "type": "Boolean",
     "desc": "False to disable collapsing (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "collapsed",
     "type": "Boolean",
     "desc": "True to set the initial display to collapsed (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "floatable",
     "type": "Boolean",
     "desc": "False to disable floating (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "margins",
     "type": "Object",
     "desc": "Margins for the element (defaults to {top: 0, left: 0, right:0, bottom: 0})",
     "memberOf": ""
    },
    {
     "name": "cmargins",
     "type": "Object",
     "desc": "Margins for the element when collapsed (defaults to: north/south {top: 2, left: 0, right:0, bottom: 2} or east/west {top: 0, left: 2, right:2, bottom: 0})",
     "memberOf": ""
    },
    {
     "name": "tabPosition",
     "type": "String",
     "desc": "\"top\" or \"bottom\" (defaults to \"bottom\")",
     "memberOf": "",
     "optvals": [
      "top",
      "bottom"
     ]
    },
    {
     "name": "collapsedTitle",
     "type": "String",
     "desc": "Optional string message to display in the collapsed block of a north or south region",
     "memberOf": ""
    },
    {
     "name": "alwaysShowTabs",
     "type": "Boolean",
     "desc": "True to always display tabs even when there is only 1 panel (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "autoScroll",
     "type": "Boolean",
     "desc": "True to enable overflow scrolling (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "titlebar",
     "type": "Boolean",
     "desc": "True to display a title bar (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "title",
     "type": "String",
     "desc": "The title for the region (overrides panel titles)",
     "memberOf": ""
    },
    {
     "name": "animate",
     "type": "Boolean",
     "desc": "True to animate expand/collapse (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "autoHide",
     "type": "Boolean",
     "desc": "False to disable auto hiding when the mouse leaves the \"floated\" region (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "preservePanels",
     "type": "Boolean",
     "desc": "True to preserve removed panels so they can be readded later (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "closeOnTab",
     "type": "Boolean",
     "desc": "True to place the close icon on the tabs instead of the region titlebar (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "hideTabs",
     "type": "Boolean",
     "desc": "True to hide the tab strip (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "resizeTabs",
     "type": "Boolean",
     "desc": "True to enable automatic tab resizing. This will resize the tabs so they are all the same size and fit within\n                     the space available, similar to FireFox 1.5 tabs (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "minTabWidth",
     "type": "Number",
     "desc": "The minimum tab width (defaults to 40)",
     "memberOf": ""
    },
    {
     "name": "preferredTabWidth",
     "type": "Number",
     "desc": "The preferred tab width (defaults to 150)",
     "memberOf": ""
    },
    {
     "name": "showPin",
     "type": "Boolean",
     "desc": "True to show a pin button",
     "memberOf": ""
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "True to start the region hidden (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "hideWhenEmpty",
     "type": "Boolean",
     "desc": "True to hide the region when it has no panels",
     "memberOf": ""
    },
    {
     "name": "disableTabTips",
     "type": "Boolean",
     "desc": "True to disable tab tooltips",
     "memberOf": ""
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "For East/West panels",
     "memberOf": ""
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "For North/South panels",
     "memberOf": ""
    },
    {
     "name": "split",
     "type": "Boolean",
     "desc": "To show the splitter",
     "memberOf": ""
    },
    {
     "name": "toolbar",
     "type": "Boolean",
     "desc": "xtype configuration for a toolbar - shows on right of tabbar",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforeremove",
     "sig": "function (_self, panel, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a panel is removed (or closed). To cancel the removal set \"e.cancel = true\" on the event argument."
    },
    {
     "name": "collapsed",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this region is collapsed."
    },
    {
     "name": "expanded",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this region is expanded."
    },
    {
     "name": "invalidated",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the layout for this region is changed."
    },
    {
     "name": "panelactivated",
     "sig": "function (_self, panel)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a panel is activated."
    },
    {
     "name": "paneladded",
     "sig": "function (_self, panel)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a panel is added."
    },
    {
     "name": "panelremoved",
     "sig": "function (_self, panel)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a panel is removed."
    },
    {
     "name": "resized",
     "sig": "function (_self, newSize)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the user resizes this region."
    },
    {
     "name": "slidehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this region slides out of view."
    },
    {
     "name": "slideshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this region is slid into view."
    },
    {
     "name": "visibilitychange",
     "sig": "function (_self, visibility)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this region is shown or hidden"
    }
   ],
   "methods": [
    {
     "name": "add",
     "sig": "(ContentPanel... panel)",
     "type": "function",
     "desc": "Adds the passed ContentPanel(s) to this region."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "collapse",
     "sig": "(Boolean skipAnim)",
     "type": "function",
     "desc": "Collapses this region."
    },
    {
     "name": "expand",
     "sig": "(Roo.EventObject e, Boolean skipAnim)",
     "type": "function",
     "desc": "Expands this region if it was previously collapsed."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getActivePanel",
     "sig": "()",
     "type": "function",
     "desc": "Get the active panel for this region."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the container element for this region."
    },
    {
     "name": "getPanel",
     "sig": "(Number/String/ContentPanel panel)",
     "type": "function",
     "desc": "Returns the panel specified or null if it's not in this region."
    },
    {
     "name": "getPosition",
     "sig": "()",
     "type": "function",
     "desc": "Returns this regions position (north/south/east/west/center)."
    },
    {
     "name": "getTabs",
     "sig": "()",
     "type": "function",
     "desc": "Returns the TabPanel component used by this region"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hasPanel",
     "sig": "(Number/String/ContentPanel panel)",
     "type": "function",
     "desc": "Returns true if the panel is in this region."
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hides this region."
    },
    {
     "name": "hidePanel",
     "sig": "(Number/String/ContentPanel panel)",
     "type": "function",
     "desc": "Hides the tab for the specified panel."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this region is currently visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "remove",
     "sig": "(Number/String/ContentPanel panel, Boolean preservePanel)",
     "type": "function",
     "desc": "Removes the specified panel. If preservePanel is not true (either here or in the config), the panel is destroyed."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "resizeTo",
     "sig": "(Number newSize)",
     "type": "function",
     "desc": "Resizes the region to the specified size. For vertical regions (west, east) this adjusts \nthe width, for horizontal (north, south) the height."
    },
    {
     "name": "setCollapsedTitle",
     "sig": "(String title)",
     "type": "function",
     "desc": "Updates the title for collapsed north/south regions (used with {@link #collapsedTitle} config option)"
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Shows this region if it was previously hidden."
    },
    {
     "name": "showPanel",
     "sig": "(Number/String/ContentPanel panelId)",
     "type": "function",
     "desc": "Shows the specified panel."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unhidePanel",
     "sig": "(Number/String/ContentPanel panel)",
     "type": "function",
     "desc": "Unhides the tab for a previously hidden panel."
    }
   ]
  },
  "Roo.LoadMask": {
   "props": [
    {
     "name": "removeMask",
     "type": "Boolean",
     "desc": "True to create a single-use mask that is automatically destroyed after loading (useful for page loads),\nFalse to persist the mask element reference for multiple uses (e.g., for paged data widgets).  Defaults to false.",
     "memberOf": "Roo"
    },
    {
     "name": "msg",
     "type": "String",
     "desc": "The text to display in a centered loading message box (defaults to 'Loading...')",
     "memberOf": ""
    },
    {
     "name": "msgCls",
     "type": "String",
     "desc": "The CSS class to apply to the loading message element (defaults to \"x-mask-loading\")",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disables the mask to prevent it from being displayed"
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enables the mask so that it can be displayed"
    }
   ]
  },
  "Roo.Login": {
   "props": [
    {
     "name": "method",
     "type": "String",
     "desc": "Method used to query for login details.",
     "memberOf": ""
    },
    {
     "name": "url",
     "type": "String",
     "desc": "URL to query login data. - eg. baseURL + '/Login.php'",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "Boolean/DomHelper",
     "desc": "True to auto create from scratch, or using a DomHelper Object (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "title",
     "type": "String",
     "desc": "Default text to display in the title bar (defaults to null)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "Width of the dialog in pixels (can also be set via CSS).  Determined by browser if unspecified.",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "Height of the dialog in pixels (can also be set via CSS).  Determined by browser if unspecified.",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "x",
     "type": "Number",
     "desc": "The default left page coordinate of the dialog (defaults to center screen)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "y",
     "type": "Number",
     "desc": "The default top page coordinate of the dialog (defaults to center screen)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "animateTarget",
     "type": "String/Element",
     "desc": "Id or element from which the dialog should animate while opening\n(defaults to null with no animation)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "resizable",
     "type": "Boolean",
     "desc": "False to disable manual dialog resizing (defaults to true)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "resizeHandles",
     "type": "String",
     "desc": "Which resize handles to display - see the {@link Roo.Resizable} handles config\nproperty for valid values (defaults to 'all')",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "minHeight",
     "type": "Number",
     "desc": "The minimum allowable height for a resizable dialog (defaults to 80)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "minWidth",
     "type": "Number",
     "desc": "The minimum allowable width for a resizable dialog (defaults to 200)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "modal",
     "type": "Boolean",
     "desc": "True to show the dialog modally, preventing user interaction with the rest of the page (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "autoScroll",
     "type": "Boolean",
     "desc": "True to allow the dialog body contents to overflow and display scrollbars (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "closable",
     "type": "Boolean",
     "desc": "False to remove the built-in top-right corner close button (defaults to true)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "collapsible",
     "type": "Boolean",
     "desc": "False to remove the built-in top-right corner collapse button (defaults to true)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "constraintoviewport",
     "type": "Boolean",
     "desc": "True to keep the dialog constrained within the visible viewport boundaries (defaults to true)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "syncHeightBeforeShow",
     "type": "Boolean",
     "desc": "True to cause the dimensions to be recalculated before the dialog is shown (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "draggable",
     "type": "Boolean",
     "desc": "False to disable dragging of the dialog within the viewport (defaults to true)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "autoTabs",
     "type": "Boolean",
     "desc": "If true, all elements with class 'x-dlg-tab' will get automatically converted to tabs (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "tabTag",
     "type": "String",
     "desc": "The tag name of tab elements, used when autoTabs = true (defaults to 'div')",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "proxyDrag",
     "type": "Boolean",
     "desc": "True to drag a lightweight proxy element rather than the dialog itself, used when\ndraggable = true (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "fixedcenter",
     "type": "Boolean",
     "desc": "True to ensure that anytime the dialog is shown or resized it gets centered (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "shadow",
     "type": "Boolean/String",
     "desc": "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right\nshadow (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "shadowOffset",
     "type": "Number",
     "desc": "The number of pixels to offset the shadow if displayed (defaults to 5)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "buttonAlign",
     "type": "String",
     "desc": "Valid values are \"left,\" \"center\" and \"right\" (defaults to \"right\")",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "minButtonWidth",
     "type": "Number",
     "desc": "Minimum width of all dialog buttons (defaults to 75)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "buttons",
     "type": "Array",
     "desc": "Array of buttons",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "shim",
     "type": "Boolean",
     "desc": "True to create an iframe shim that prevents selects from showing through (defaults to false)",
     "memberOf": "Roo.BasicDialog"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this dialog is hidden."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this dialog is shown."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this dialog is hidden."
    },
    {
     "name": "keydown",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a key is pressed"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this dialog is moved by the user."
    },
    {
     "name": "resize",
     "sig": "function (_self, width, height)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this dialog is resized by the user."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this dialog is shown."
    }
   ],
   "methods": [
    {
     "name": "addButton",
     "sig": "(String/Object config, Function handler, Object scope)",
     "type": "function",
     "desc": "Adds a button to the footer section of the dialog."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addKeyListener",
     "sig": "(Number/Array/Object key, Function fn, Object scope)",
     "type": "function",
     "desc": "Adds a key listener for when this dialog is displayed.  This allows you to hook in a function that will be\nexecuted in response to a particular key being pressed while the dialog is active."
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addxtype",
     "sig": "()",
     "type": "function",
     "desc": "Add an xtype element (actually adds to the layout.)"
    },
    {
     "name": "alignTo",
     "sig": "(String/HTMLElement/Roo.Element element, String position, Array offsets)",
     "type": "function",
     "desc": "Aligns the dialog to the specified element"
    },
    {
     "name": "anchorTo",
     "sig": "(String/HTMLElement/Roo.Element element, String position, Array offsets, Boolean/Number monitorScroll)",
     "type": "function",
     "desc": "Anchors an element to another element and realigns it when the window is resized."
    },
    {
     "name": "beginUpdate",
     "sig": "()",
     "type": "function",
     "desc": "Begins an update of the layout <strike>and sets display to block and visibility to hidden</strike>. Use standard beginUpdate/endUpdate on the layout."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "center",
     "sig": "()",
     "type": "function",
     "desc": "Centers this dialog in the viewport"
    },
    {
     "name": "collapse",
     "sig": "()",
     "type": "function",
     "desc": "Collapses the dialog to its minimized state (only the title bar is visible).\nEquivalent to the user clicking the collapse dialog button."
    },
    {
     "name": "destroy",
     "sig": "(Boolean removeEl)",
     "type": "function",
     "desc": "Destroys this dialog and all its supporting elements (including any tabs, shim,\nshadow, proxy, mask, etc.)  Also removes all event listeners."
    },
    {
     "name": "endUpdate",
     "sig": "()",
     "type": "function",
     "desc": "Ends update of the layout <strike>and resets display to none</strike>. Use standard beginUpdate/endUpdate on the layout."
    },
    {
     "name": "expand",
     "sig": "()",
     "type": "function",
     "desc": "Expands a collapsed dialog back to its normal state.  Equivalent to the user\nclicking the expand dialog button."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "()",
     "type": "function",
     "desc": "Focuses the dialog.  If a defaultButton is set, it will receive focus, otherwise the\ndialog itself will receive focus."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the element for this dialog"
    },
    {
     "name": "getLayout",
     "sig": "()",
     "type": "function",
     "desc": "Get the BorderLayout for this dialog"
    },
    {
     "name": "getTabs",
     "sig": "()",
     "type": "function",
     "desc": "Returns the TabPanel component (creates it if it doesn't exist).\nNote: If you wish to simply check for the existence of tabs without creating them,\ncheck for a null 'tabs' property."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "(Function callback)",
     "type": "function",
     "desc": "Hides the dialog."
    },
    {
     "name": "initTabs",
     "sig": "()",
     "type": "function",
     "desc": "Reinitializes the tabs component, clearing out old tabs and finding new ones."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the dialog is visible"
    },
    {
     "name": "moveTo",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Moves the dialog's top-left corner to the specified point"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "resizeTo",
     "sig": "(Number width, Number height)",
     "type": "function",
     "desc": "Resizes the dialog."
    },
    {
     "name": "restoreState",
     "sig": "()",
     "type": "function",
     "desc": "Restores the previous state of the dialog if Roo.state is configured."
    },
    {
     "name": "setContentSize",
     "sig": "(Number width, Number height)",
     "type": "function",
     "desc": "Resizes the dialog to fit the specified content size."
    },
    {
     "name": "setDefaultButton",
     "sig": "(Roo.BasicDialog.Button btn)",
     "type": "function",
     "desc": "Sets the default button to be focused when the dialog is displayed."
    },
    {
     "name": "setTitle",
     "sig": "(String text)",
     "type": "function",
     "desc": "Sets the dialog title text"
    },
    {
     "name": "show",
     "sig": "(String/HTMLElement/Roo.Element animateTarget)",
     "type": "function",
     "desc": "Shows the dialog."
    },
    {
     "name": "toBack",
     "sig": "()",
     "type": "function",
     "desc": "Sends this dialog to the back (under) of any other visible dialogs"
    },
    {
     "name": "toFront",
     "sig": "()",
     "type": "function",
     "desc": "Brings this dialog to the front of any other visible dialogs"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.MasterTemplate": {
   "props": [
    {
     "name": "url",
     "type": "String",
     "desc": "The Url to load the template from. beware if you are loading from a url, the data may not be ready if you use it instantly..\n                   it should be fixed so that template is observable...",
     "memberOf": "Roo.Template"
    },
    {
     "name": "html",
     "type": "String",
     "desc": "The HTML fragment or an array of fragments to join(\"\") or multiple arguments to join(\"\")",
     "memberOf": "Roo.Template"
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "add",
     "sig": "(String/Number name, Array/Object values)",
     "type": "function",
     "desc": "Applies the passed values to a child template."
    },
    {
     "name": "addAll",
     "sig": "()",
     "type": "function",
     "desc": "Alias for fill()."
    },
    {
     "name": "append",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and appends the new node(s) to el."
    },
    {
     "name": "apply",
     "sig": "()",
     "type": "function",
     "desc": "Alias for {@link #applyTemplate}"
    },
    {
     "name": "applyTemplate",
     "sig": "(Object values)",
     "type": "function",
     "desc": "Returns an HTML fragment of this template with the specified values applied."
    },
    {
     "name": "compile",
     "sig": "()",
     "type": "function",
     "desc": "Compiles the template into an internal function, eliminating the RegEx overhead."
    },
    {
     "name": "fill",
     "sig": "(String/Number name, Array values, Boolean reset)",
     "type": "function",
     "desc": "Applies all the passed values to a child template."
    },
    {
     "name": "from",
     "sig": "(String/HTMLElement el, Object config)",
     "type": "function",
     "desc": "Creates a template from the passed element's value (display:none textarea, preferred) or innerHTML. e.g.\nvar tpl = Roo.MasterTemplate.from('element-id');"
    },
    {
     "name": "insertAfter",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and inserts the new node(s) after el."
    },
    {
     "name": "insertBefore",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and inserts the new node(s) before el."
    },
    {
     "name": "insertFirst",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and inserts the new node(s) as the first child of el."
    },
    {
     "name": "overwrite",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and overwrites the content of el with the new node(s)."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the template for reuse"
    },
    {
     "name": "set",
     "sig": "(String html, Boolean compile)",
     "type": "function",
     "desc": "Sets the HTML used as the template and optionally compiles it."
    }
   ]
  },
  "Roo.NestedLayoutPanel": {
   "props": [
    {
     "name": "fitToFrame",
     "type": "Boolean",
     "desc": "True for this panel to adjust its size to fit when the region resizes  (defaults to false)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "fitContainer",
     "type": "Boolean",
     "desc": "When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "autoCreate",
     "type": "Boolean/Object",
     "desc": "True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "closable",
     "type": "Boolean",
     "desc": "True if the panel can be closed/removed",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "background",
     "type": "Boolean",
     "desc": "True if the panel should not be activated when it is added (defaults to false)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "resizeEl",
     "type": "String/HTMLElement/Element",
     "desc": "An element to resize if {@link #fitToFrame} is true (instead of this panel's element)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "toolbar",
     "type": "Toolbar",
     "desc": "A toolbar for this panel",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "autoScroll",
     "type": "Boolean",
     "desc": "True to scroll overflow in this panel (use with {@link #fitToFrame})",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "title",
     "type": "String",
     "desc": "The title for this panel",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "adjustments",
     "type": "Array",
     "desc": "Values to <b>add</b> to the width/height when doing a {@link #fitToFrame} (default is [0, 0])",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "url",
     "type": "String",
     "desc": "Calls {@link #setUrl} with this value",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "region",
     "type": "String",
     "desc": "which region to put this panel on (when used with xtype constructors)",
     "memberOf": "Roo.ContentPanel",
     "optvals": [
      "center",
      "north",
      "south",
      "east",
      "west"
     ]
    },
    {
     "name": "params",
     "type": "String/Object",
     "desc": "When used with {@link #url}, calls {@link #setUrl} with this value",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "loadOnce",
     "type": "Boolean",
     "desc": "When used with {@link #url}, calls {@link #setUrl} with this value",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "content",
     "type": "String",
     "desc": "Raw content to fill content panel with (uses setContent on construction.)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this panel is activated."
    },
    {
     "name": "deactivate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this panel is activated."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this tab is created"
    },
    {
     "name": "resize",
     "sig": "function (_self, width, height)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this panel is resized if fitToFrame is true."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addxtype",
     "sig": "(Object cfg)",
     "type": "function",
     "desc": "Adds a xtype elements to the layout of the nested panel\n<pre><code>\n\npanel.addxtype({\n       xtype : 'ContentPanel',\n       region: 'west',\n       items: [ .... ]\n   }\n);\n\npanel.addxtype({\n        xtype : 'NestedLayoutPanel',\n        region: 'west',\n        layout: {\n           center: { },\n           west: { }   \n        },\n        items : [ ... list of content panels or nested layout panels.. ]\n   }\n);\n</code></pre>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this panel"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns this panel's element - used by regiosn to add."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns this panel's id"
    },
    {
     "name": "getLayout",
     "sig": "()",
     "type": "function",
     "desc": "Returns the nested BorderLayout for this panel"
    },
    {
     "name": "getTitle",
     "sig": "()",
     "type": "function",
     "desc": "Returns this panel's title"
    },
    {
     "name": "getToolbar",
     "sig": "()",
     "type": "function",
     "desc": "Returns the toolbar for this Panel if one was configured."
    },
    {
     "name": "getUpdateManager",
     "sig": "()",
     "type": "function",
     "desc": "Get the {@link Roo.UpdateManager} for this panel. Enables you to perform Ajax updates."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isClosable",
     "sig": "()",
     "type": "function",
     "desc": "Returns true is this panel was configured to be closable"
    },
    {
     "name": "load",
     "sig": "(Object/String/Function url, String/Object params, Function callback, Boolean discardUrl)",
     "type": "function",
     "desc": "Loads this content panel immediately with content from XHR. Note: to delay loading until the panel is activated, use {@link #setUrl}."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "refresh",
     "sig": "()",
     "type": "function",
     "desc": "Force a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the {@link #setUrl} method has not been called.\n  This does not activate the panel, just updates its content."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setContent",
     "sig": "(String content, Boolean loadScripts)",
     "type": "function",
     "desc": "Updates this panel's element"
    },
    {
     "name": "setTitle",
     "sig": "(String title)",
     "type": "function",
     "desc": "Set this panel's title"
    },
    {
     "name": "setUrl",
     "sig": "(String/Function url, String/Object params, Boolean loadOnce)",
     "type": "function",
     "desc": "Set a URL to be used to load the content for this panel. When this panel is activated, the content will be loaded from that URL."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.PagingToolbar": {
   "props": [
    {
     "name": "dataSource",
     "type": "Roo.data.Store",
     "desc": "The underlying data store providing the paged data",
     "memberOf": ""
    },
    {
     "name": "container",
     "type": "String/HTMLElement/Element",
     "desc": "container The id or element that will contain the toolbar",
     "memberOf": ""
    },
    {
     "name": "displayInfo",
     "type": "Boolean",
     "desc": "True to display the displayMsg (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "pageSize",
     "type": "Number",
     "desc": "The number of records to display per page (defaults to 20)",
     "memberOf": ""
    },
    {
     "name": "displayMsg",
     "type": "String",
     "desc": "The paging status message to display (defaults to \"Displaying {start} - {end} of {total}\")",
     "memberOf": ""
    },
    {
     "name": "emptyMsg",
     "type": "String",
     "desc": "The message to display when no records are found (defaults to \"No data to display\")",
     "memberOf": ""
    },
    {
     "name": "items",
     "type": "Array",
     "desc": "array of button configs or elements to add (will be converted to a MixedCollection)",
     "memberOf": "Roo"
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "add",
     "sig": "(Mixed arg1, Mixed arg2)",
     "type": "function",
     "desc": "Adds element(s) to the toolbar -- this function takes a variable number of \narguments of mixed type and adds them to the toolbar."
    },
    {
     "name": "addButton",
     "sig": "(Object/Array config)",
     "type": "function",
     "desc": "Adds a button (or buttons). See {@link Roo.Toolbar.Button} for more info on the config."
    },
    {
     "name": "addDom",
     "sig": "(Object config)",
     "type": "function",
     "desc": "Adds a new element to the toolbar from the passed {@link Roo.DomHelper} config."
    },
    {
     "name": "addElement",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Adds any standard HTML element to the toolbar"
    },
    {
     "name": "addField",
     "sig": "(Roo.form.Field field)",
     "type": "function",
     "desc": "Adds a dynamically rendered Roo.form field (TextField, ComboBox, etc).\nNote: the field should not have been rendered yet. For a field that has already been\nrendered, use {@link #addElement}."
    },
    {
     "name": "addFill",
     "sig": "()",
     "type": "function",
     "desc": "Adds a fill element that forces subsequent additions to the right side of the toolbar"
    },
    {
     "name": "addItem",
     "sig": "(Roo.Toolbar.Item item)",
     "type": "function",
     "desc": "Adds any Toolbar.Item or subclass"
    },
    {
     "name": "addSeparator",
     "sig": "()",
     "type": "function",
     "desc": "Adds a separator"
    },
    {
     "name": "addSpacer",
     "sig": "()",
     "type": "function",
     "desc": "Adds a spacer element"
    },
    {
     "name": "addText",
     "sig": "(String text)",
     "type": "function",
     "desc": "Adds text to the toolbar"
    },
    {
     "name": "addxtype",
     "sig": "(Object xtype)",
     "type": "function",
     "desc": "Add an Xtype element"
    },
    {
     "name": "bind",
     "sig": "(Roo.data.Store store)",
     "type": "function",
     "desc": "Binds the paging toolbar to the specified {@link Roo.data.Store}"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the Element for this toolbar."
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide the toolbar"
    },
    {
     "name": "insertButton",
     "sig": "(Number index, Object/Roo.Toolbar.Item/Roo.Toolbar.Button (may be Array) item)",
     "type": "function",
     "desc": "Inserts any {@link Roo.Toolbar.Item}/{@link Roo.Toolbar.Button} at the specified index."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show the toolbar"
    },
    {
     "name": "unbind",
     "sig": "(Roo.data.Store store)",
     "type": "function",
     "desc": "Unbinds the paging toolbar from the specified {@link Roo.data.Store}"
    }
   ]
  },
  "Roo.QuickTips": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this quick tip."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this quick tip."
    },
    {
     "name": "init",
     "sig": "()",
     "type": "function",
     "desc": "Initialize and enable QuickTips for first use.  This should be called once before the first attempt to access\nor display QuickTips in a page."
    },
    {
     "name": "isEnabled",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the quick tip is enabled, else false."
    },
    {
     "name": "register",
     "sig": "(Object config)",
     "type": "function",
     "desc": "Configures a new quick tip instance and assigns it to a target element.  The following config options\nare supported:\n<pre>\nProperty    Type                   Description\n----------  ---------------------  ------------------------------------------------------------------------\ntarget      Element/String/Array   An Element, id or array of ids that this quick tip should be tied to\n</ul>"
    },
    {
     "name": "unregister",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Removes this quick tip from its element and destroys it."
    }
   ]
  },
  "Roo.ReaderLayout": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "layout",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a layout is performed."
    },
    {
     "name": "regioncollapsed",
     "sig": "function (region)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a region is collapsed."
    },
    {
     "name": "regionexpanded",
     "sig": "function (region)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a region is expanded."
    },
    {
     "name": "regionresized",
     "sig": "function (region, newSize)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the user resizes a region."
    }
   ],
   "methods": [
    {
     "name": "add",
     "sig": "(String target, Roo.ContentPanel panel)",
     "type": "function",
     "desc": "Adds a ContentPanel (or subclass) to this layout."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addRegion",
     "sig": "(String target, Object config)",
     "type": "function",
     "desc": "Creates and adds a new region if it doesn't already exist."
    },
    {
     "name": "addxtype",
     "sig": "(Object cfg)",
     "type": "function",
     "desc": "Adds a xtype elements to the layout.\n<pre><code>\n\nlayout.addxtype({\n       xtype : 'ContentPanel',\n       region: 'west',\n       items: [ .... ]\n   }\n);\n\nlayout.addxtype({\n        xtype : 'NestedLayoutPanel',\n        region: 'west',\n        layout: {\n           center: { },\n           west: { }   \n        },\n        items : [ ... list of content panels or nested layout panels.. ]\n   }\n);\n</code></pre>"
    },
    {
     "name": "batchAdd",
     "sig": "(Object regions)",
     "type": "function",
     "desc": "Adds a batch of multiple ContentPanels dynamically by passing a special regions config object.  This config\nobject should contain properties for each region to add ContentPanels to, and each property's value should be\na valid ContentPanel config object.  Example:\n<pre><code>\n// Create the main layout\nvar layout = new Roo.BorderLayout('main-ct', {\n    west: {\n        split:true,\n        minSize: 175,\n        titlebar: true\n    },\n    center: {\n        title:'Components'\n    }\n}, 'main-ct');\n\n// Create and add multiple ContentPanels at once via configs\nlayout.batchAdd({\n   west: {\n       id: 'source-files',\n       autoCreate:true,\n       title:'Ext Source Files',\n       autoScroll:true,\n       fitToFrame:true\n   },\n   center : {\n       el: cview,\n       autoScroll:true,\n       fitToFrame:true,\n       toolbar: tb,\n       resizeEl:'cbody'\n   }\n});\n</code></pre>"
    },
    {
     "name": "beginUpdate",
     "sig": "()",
     "type": "function",
     "desc": "Suspend the LayoutManager from doing auto-layouts while\nmaking multiple add or remove calls"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "create",
     "sig": "( config,  targetEl)",
     "type": "function",
     "desc": "Shortcut for creating a new BorderLayout object and adding one or more ContentPanels to it in a single step, handling\nthe beginUpdate and endUpdate calls internally.  The key to this method is the <b>panels</b> property that can be\nprovided with each region config, which allows you to add ContentPanel configs in addition to the region configs\nduring creation.  The following code is equivalent to the constructor-based example at the beginning of this class:\n<pre><code>\n// shorthand\nvar CP = Roo.ContentPanel;\n\nvar layout = Roo.BorderLayout.create({\n    north: {\n        initialSize: 25,\n        titlebar: false,\n        panels: [new CP(\"north\", \"North\")]\n    },\n    west: {\n        split:true,\n        initialSize: 200,\n        minSize: 175,\n        maxSize: 400,\n        titlebar: true,\n        collapsible: true,\n        panels: [new CP(\"west\", {title: \"West\"})]\n    },\n    east: {\n        split:true,\n        initialSize: 202,\n        minSize: 175,\n        maxSize: 400,\n        titlebar: true,\n        collapsible: true,\n        panels: [new CP(\"autoTabs\", {title: \"Auto Tabs\", closable: true})]\n    },\n    south: {\n        split:true,\n        initialSize: 100,\n        minSize: 100,\n        maxSize: 200,\n        titlebar: true,\n        collapsible: true,\n        panels: [new CP(\"south\", {title: \"South\", closable: true})]\n    },\n    center: {\n        titlebar: true,\n        autoScroll:true,\n        resizeTabs: true,\n        minTabWidth: 50,\n        preferredTabWidth: 150,\n        panels: [\n            new CP(\"center1\", {title: \"Close Me\", closable: true}),\n            new CP(\"center2\", {title: \"Center Panel\", closable: false})\n        ]\n    }\n}, document.body);\n\nlayout.getRegion(\"center\").showPanel(\"center1\");\n</code></pre>"
    },
    {
     "name": "endUpdate",
     "sig": "(Boolean noLayout)",
     "type": "function",
     "desc": "Restore auto-layouts and optionally disable the manager from performing a layout"
    },
    {
     "name": "findPanel",
     "sig": "(String panelId)",
     "type": "function",
     "desc": "Searches all regions for a panel with the specified id"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the Element this layout is bound to."
    },
    {
     "name": "getRegion",
     "sig": "(String target)",
     "type": "function",
     "desc": "Returns the specified region."
    },
    {
     "name": "getViewSize",
     "sig": "()",
     "type": "function",
     "desc": "Returns the size of the current view. This method normalizes document.body and element embedded layouts and\nperforms box-model adjustments."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isUpdating",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this layout is currently being updated"
    },
    {
     "name": "layout",
     "sig": "()",
     "type": "function",
     "desc": "Performs a layout update."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "remove",
     "sig": "(String target, Number/String/Roo.ContentPanel panel)",
     "type": "function",
     "desc": "Remove a ContentPanel (or subclass) to this layout."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "restoreState",
     "sig": "(Roo.state.Provider provider)",
     "type": "function",
     "desc": "Restores this layout's state using Roo.state.Manager or the state provided by the passed provider."
    },
    {
     "name": "showPanel",
     "sig": "(String/ContentPanel panelId)",
     "type": "function",
     "desc": "Searches all regions for a panel with the specified id and activates (shows) it."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.Resizable": {
   "props": [
    {
     "name": "resizeChild",
     "type": "Boolean/String/Element",
     "desc": "True to resize the first child, or id/element to resize (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "adjustments",
     "type": "Array/String",
     "desc": "String \"auto\" or an array [width, height] with values to be <b>added</b> to the\nresize operation's new size (defaults to [0, 0])",
     "memberOf": ""
    },
    {
     "name": "minWidth",
     "type": "Number",
     "desc": "The minimum width for the element (defaults to 5)",
     "memberOf": ""
    },
    {
     "name": "minHeight",
     "type": "Number",
     "desc": "The minimum height for the element (defaults to 5)",
     "memberOf": ""
    },
    {
     "name": "maxWidth",
     "type": "Number",
     "desc": "The maximum width for the element (defaults to 10000)",
     "memberOf": ""
    },
    {
     "name": "maxHeight",
     "type": "Number",
     "desc": "The maximum height for the element (defaults to 10000)",
     "memberOf": ""
    },
    {
     "name": "enabled",
     "type": "Boolean",
     "desc": "False to disable resizing (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "wrap",
     "type": "Boolean",
     "desc": "True to wrap an element with a div if needed (required for textareas and images, defaults to false)",
     "memberOf": ""
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "The width of the element in pixels (defaults to null)",
     "memberOf": ""
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "The height of the element in pixels (defaults to null)",
     "memberOf": ""
    },
    {
     "name": "animate",
     "type": "Boolean",
     "desc": "True to animate the resize (not compatible with dynamic sizing, defaults to false)",
     "memberOf": ""
    },
    {
     "name": "duration",
     "type": "Number",
     "desc": "Animation duration if animate = true (defaults to .35)",
     "memberOf": ""
    },
    {
     "name": "dynamic",
     "type": "Boolean",
     "desc": "True to resize the element while dragging instead of using a proxy (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "handles",
     "type": "String",
     "desc": "String consisting of the resize handles to display (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "multiDirectional",
     "type": "Boolean",
     "desc": "<b>Deprecated</b>.  The old style of adding multi-direction resize handles, deprecated\nin favor of the handles config option (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "disableTrackOver",
     "type": "Boolean",
     "desc": "True to disable mouse tracking. This is only applied at config time. (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "easing",
     "type": "String",
     "desc": "Animation easing if animate = true (defaults to 'easingOutStrong')",
     "memberOf": ""
    },
    {
     "name": "widthIncrement",
     "type": "Number",
     "desc": "The increment to snap the width resize in pixels (dynamic must be true, defaults to 0)",
     "memberOf": ""
    },
    {
     "name": "heightIncrement",
     "type": "Number",
     "desc": "The increment to snap the height resize in pixels (dynamic must be true, defaults to 0)",
     "memberOf": ""
    },
    {
     "name": "pinned",
     "type": "Boolean",
     "desc": "True to ensure that the resize handles are always visible, false to display them only when the\nuser mouses over the resizable borders. This is only applied at config time. (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "preserveRatio",
     "type": "Boolean",
     "desc": "True to preserve the original ratio between height and width during resize (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "transparent",
     "type": "Boolean",
     "desc": "True for transparent handles. This is only applied at config time. (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "minX",
     "type": "Number",
     "desc": "The minimum allowed page X for the element (only used for west resizing, defaults to 0)",
     "memberOf": ""
    },
    {
     "name": "minY",
     "type": "Number",
     "desc": "The minimum allowed page Y for the element (only used for north resizing, defaults to 0)",
     "memberOf": ""
    },
    {
     "name": "draggable",
     "type": "Boolean",
     "desc": "Convenience to initialize drag drop (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "constrainTo",
     "type": "String/HTMLElement/Element",
     "desc": "Constrain the resize to a particular element",
     "memberOf": ""
    },
    {
     "name": "resizeRegion",
     "type": "Roo.lib.Region",
     "desc": "Constrain the resize to a particular region",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforeresize",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fired before resize is allowed. Set enabled to false to cancel resize."
    },
    {
     "name": "resize",
     "sig": "function (_self, width, height, e)\n{\n\n}",
     "type": "function",
     "desc": "Fired after a resize."
    },
    {
     "name": "resizing",
     "sig": "function (_self, x, y, w, h, e)\n{\n\n}",
     "type": "function",
     "desc": "Fired a resizing."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "(Boolean removeEl)",
     "type": "function",
     "desc": "Destroys this resizable. If the element was wrapped and\nremoveEl is not true then the element remains."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the element this component is bound to."
    },
    {
     "name": "getResizeChild",
     "sig": "()",
     "type": "function",
     "desc": "Returns the resizeChild element (or null)."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "resizeTo",
     "sig": "(Number width, Number height)",
     "type": "function",
     "desc": "Perform a manual resize"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.Shadow": {
   "props": [
    {
     "name": "mode",
     "type": "String",
     "desc": "The shadow display mode.  Supports the following options:<br />\nsides: Shadow displays on both sides and bottom only<br />\nframe: Shadow displays equally on all four sides<br />\ndrop: Traditional bottom-right drop shadow (default)",
     "memberOf": "Roo"
    },
    {
     "name": "offset",
     "type": "String",
     "desc": "The number of pixels to offset the shadow from the element (defaults to 4)",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hides this shadow"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the shadow is visible, else false"
    },
    {
     "name": "realign",
     "sig": "(Number left, Number top, Number width, Number height)",
     "type": "function",
     "desc": "Direct alignment when values are already available. Show must be called at least once before\ncalling this method to ensure it is initialized."
    },
    {
     "name": "setZIndex",
     "sig": "(Number zindex)",
     "type": "function",
     "desc": "Adjust the z-index of this shadow"
    },
    {
     "name": "show",
     "sig": "(String/HTMLElement/Element targetEl)",
     "type": "function",
     "desc": "Displays the shadow under the target element"
    }
   ]
  },
  "Roo.SplitBar": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforeresize",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the splitter is dragged"
    },
    {
     "name": "moved",
     "sig": "function (_self, newSize)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the splitter is moved"
    },
    {
     "name": "resize",
     "sig": "function (_self, newSize)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the splitter is moved (alias for {@link #event-moved})"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "(Boolean removeEl)",
     "type": "function",
     "desc": "Destroy this splitbar."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getAdapter",
     "sig": "()",
     "type": "function",
     "desc": "Get the adapter this SplitBar uses"
    },
    {
     "name": "getMaximumSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the maximum size for the resizing element"
    },
    {
     "name": "getMinimumSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the minimum size for the resizing element"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setAdapter",
     "sig": "(Object adapter)",
     "type": "function",
     "desc": "Set the adapter this SplitBar uses"
    },
    {
     "name": "setCurrentSize",
     "sig": "(Number size)",
     "type": "function",
     "desc": "Sets the initialize size for the resizing element"
    },
    {
     "name": "setMaximumSize",
     "sig": "(Number maxSize)",
     "type": "function",
     "desc": "Sets the maximum size for the resizing element"
    },
    {
     "name": "setMinimumSize",
     "sig": "(Number minSize)",
     "type": "function",
     "desc": "Sets the minimum size for the resizing element"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.SplitBar.AbsoluteLayoutAdapter": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "getElementSize",
     "sig": "(Roo.SplitBar s)",
     "type": "function",
     "desc": "Called before drag operations to get the current size of the resizing element."
    },
    {
     "name": "setElementSize",
     "sig": "(Roo.SplitBar s, Number newSize, Function onComplete)",
     "type": "function",
     "desc": "Called after drag operations to set the size of the resizing element."
    }
   ]
  },
  "Roo.SplitBar.BasicLayoutAdapter": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "getElementSize",
     "sig": "(Roo.SplitBar s)",
     "type": "function",
     "desc": "Called before drag operations to get the current size of the resizing element."
    },
    {
     "name": "setElementSize",
     "sig": "(Roo.SplitBar s, Number newSize, Function onComplete)",
     "type": "function",
     "desc": "Called after drag operations to set the size of the resizing element."
    }
   ]
  },
  "Roo.SplitButton": {
   "props": [
    {
     "name": "arrowHandler",
     "type": "Function",
     "desc": "A function called when the arrow button is clicked (can be used instead of click event)",
     "memberOf": ""
    },
    {
     "name": "arrowTooltip",
     "type": "String",
     "desc": "The title attribute of the arrow",
     "memberOf": ""
    },
    {
     "name": "text",
     "type": "String",
     "desc": "The button text",
     "memberOf": "Roo.Button"
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "The path to an image to display in the button (the image will be set as the background-image\nCSS property of the button by default, so if you want a mixed icon/text button, set cls:\"x-btn-text-icon\")",
     "memberOf": "Roo.Button"
    },
    {
     "name": "handler",
     "type": "Function",
     "desc": "A function called when the button is clicked (can be used instead of click event)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "scope",
     "type": "Object",
     "desc": "The scope of the handler",
     "memberOf": "Roo.Button"
    },
    {
     "name": "minWidth",
     "type": "Number",
     "desc": "The minimum width for this button (used to give a set of buttons a common width)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "tooltip",
     "type": "String/Object",
     "desc": "The tooltip for the button - can be a string or QuickTips config object",
     "memberOf": "Roo.Button"
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "True to start hidden (defaults to false)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to start disabled (defaults to false)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "pressed",
     "type": "Boolean",
     "desc": "True to start pressed (only if enableToggle = true)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "toggleGroup",
     "type": "String",
     "desc": "The group this toggle button is a member of (only 1 per group can be pressed, only\n   applies if enableToggle = true)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "renderTo",
     "type": "String/HTMLElement/Element",
     "desc": "The element to append the button to",
     "memberOf": "Roo.Button"
    },
    {
     "name": "repeat",
     "type": "Boolean/Object",
     "desc": "True to repeat fire the click event while the mouse is down. This can also be\n  an {@link Roo.util.ClickRepeater} config object (defaults to false).",
     "memberOf": "Roo.Button"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the button's main element.",
     "memberOf": "Roo.Button"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The DOM tabIndex for this button (defaults to undefined)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "enableToggle",
     "type": "Boolean",
     "desc": "True to enable pressed/not pressed toggling (defaults to false)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "menu",
     "type": "Mixed",
     "desc": "Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).",
     "memberOf": "Roo.Button"
    },
    {
     "name": "menuAlign",
     "type": "String",
     "desc": "The position to align the menu to (see {@link Roo.Element#alignTo} for more details, defaults to 'tl-bl?').",
     "memberOf": "Roo.Button"
    },
    {
     "name": "iconCls",
     "type": "String",
     "desc": "A css class which sets a background image to be used as the icon for this button (defaults to undefined).",
     "memberOf": "Roo.Button"
    },
    {
     "name": "type",
     "type": "String",
     "desc": "The button's type, corresponding to the DOM input element type attribute.  Either \"submit,\" \"reset\" or \"button\" (default).",
     "memberOf": "Roo.Button"
    },
    {
     "name": "clickEvent",
     "type": "String",
     "desc": "The type of event to map to the button's event handler (defaults to 'click')",
     "memberOf": "Roo.Button"
    },
    {
     "name": "handleMouseEvents",
     "type": "Boolean",
     "desc": "False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "tooltipType",
     "type": "String",
     "desc": "The type of tooltip to use. Either \"qtip\" (default) for QuickTips or \"title\" for title attribute.",
     "memberOf": "Roo.Button"
    },
    {
     "name": "template",
     "type": "Roo.Template",
     "desc": "(Optional)\nAn {@link Roo.Template} with which to create the Button's main element. This Template must\ncontain numeric substitution parameter 0 if it is to display the tRoo property. Changing the template could\nrequire code modifications if required elements (e.g. a button) aren't present.",
     "memberOf": "Roo.Button"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "arrowclick",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this button's arrow is clicked"
    },
    {
     "name": "click",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this button is clicked"
    },
    {
     "name": "mouseout",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse exits the button"
    },
    {
     "name": "mouseover",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse hovers over the button"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the button is rendered"
    },
    {
     "name": "toggle",
     "sig": "function (_self, pressed)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the \"pressed\" state of this button changes (only if enableToggle = true)"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this Button and removes any listeners."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this button"
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this button"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "()",
     "type": "function",
     "desc": "Focus the button"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the button's underlying element"
    },
    {
     "name": "getText",
     "sig": "()",
     "type": "function",
     "desc": "Gets the text for this button"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this button"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setArrowHandler",
     "sig": "(Function handler, Object scope)",
     "type": "function",
     "desc": "Sets this button's arrow click handler"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean enabled)",
     "type": "function",
     "desc": "Convenience function for boolean enable/disable"
    },
    {
     "name": "setHandler",
     "sig": "(Function handler, Object scope)",
     "type": "function",
     "desc": "Sets this button's click handler"
    },
    {
     "name": "setText",
     "sig": "(String text)",
     "type": "function",
     "desc": "Sets this button's text"
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function for boolean show/hide"
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this button"
    },
    {
     "name": "toggle",
     "sig": "(Boolean state)",
     "type": "function",
     "desc": "If a state it passed, it becomes the pressed state otherwise the current state is toggled."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.SplitLayoutRegion": {
   "props": [
    {
     "name": "collapsible",
     "type": "Boolean",
     "desc": "False to disable collapsing (defaults to true)",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "collapsed",
     "type": "Boolean",
     "desc": "True to set the initial display to collapsed (defaults to false)",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "floatable",
     "type": "Boolean",
     "desc": "False to disable floating (defaults to true)",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "margins",
     "type": "Object",
     "desc": "Margins for the element (defaults to {top: 0, left: 0, right:0, bottom: 0})",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "cmargins",
     "type": "Object",
     "desc": "Margins for the element when collapsed (defaults to: north/south {top: 2, left: 0, right:0, bottom: 2} or east/west {top: 0, left: 2, right:2, bottom: 0})",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "tabPosition",
     "type": "String",
     "desc": "\"top\" or \"bottom\" (defaults to \"bottom\")",
     "memberOf": "Roo.LayoutRegion",
     "optvals": [
      "top",
      "bottom"
     ]
    },
    {
     "name": "collapsedTitle",
     "type": "String",
     "desc": "Optional string message to display in the collapsed block of a north or south region",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "alwaysShowTabs",
     "type": "Boolean",
     "desc": "True to always display tabs even when there is only 1 panel (defaults to false)",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "autoScroll",
     "type": "Boolean",
     "desc": "True to enable overflow scrolling (defaults to false)",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "titlebar",
     "type": "Boolean",
     "desc": "True to display a title bar (defaults to true)",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "title",
     "type": "String",
     "desc": "The title for the region (overrides panel titles)",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "animate",
     "type": "Boolean",
     "desc": "True to animate expand/collapse (defaults to false)",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "autoHide",
     "type": "Boolean",
     "desc": "False to disable auto hiding when the mouse leaves the \"floated\" region (defaults to true)",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "preservePanels",
     "type": "Boolean",
     "desc": "True to preserve removed panels so they can be readded later (defaults to false)",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "closeOnTab",
     "type": "Boolean",
     "desc": "True to place the close icon on the tabs instead of the region titlebar (defaults to false)",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "hideTabs",
     "type": "Boolean",
     "desc": "True to hide the tab strip (defaults to false)",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "resizeTabs",
     "type": "Boolean",
     "desc": "True to enable automatic tab resizing. This will resize the tabs so they are all the same size and fit within\n                     the space available, similar to FireFox 1.5 tabs (defaults to false)",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "minTabWidth",
     "type": "Number",
     "desc": "The minimum tab width (defaults to 40)",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "preferredTabWidth",
     "type": "Number",
     "desc": "The preferred tab width (defaults to 150)",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "showPin",
     "type": "Boolean",
     "desc": "True to show a pin button",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "True to start the region hidden (defaults to false)",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "hideWhenEmpty",
     "type": "Boolean",
     "desc": "True to hide the region when it has no panels",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "disableTabTips",
     "type": "Boolean",
     "desc": "True to disable tab tooltips",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "For East/West panels",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "For North/South panels",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "split",
     "type": "Boolean",
     "desc": "To show the splitter",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "toolbar",
     "type": "Boolean",
     "desc": "xtype configuration for a toolbar - shows on right of tabbar",
     "memberOf": "Roo.LayoutRegion"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforeremove",
     "sig": "function (_self, panel, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a panel is removed (or closed). To cancel the removal set \"e.cancel = true\" on the event argument."
    },
    {
     "name": "collapsed",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this region is collapsed."
    },
    {
     "name": "expanded",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this region is expanded."
    },
    {
     "name": "invalidated",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the layout for this region is changed."
    },
    {
     "name": "panelactivated",
     "sig": "function (_self, panel)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a panel is activated."
    },
    {
     "name": "paneladded",
     "sig": "function (_self, panel)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a panel is added."
    },
    {
     "name": "panelremoved",
     "sig": "function (_self, panel)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a panel is removed."
    },
    {
     "name": "resized",
     "sig": "function (_self, newSize)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the user resizes this region."
    },
    {
     "name": "slidehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this region slides out of view."
    },
    {
     "name": "slideshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this region is slid into view."
    },
    {
     "name": "visibilitychange",
     "sig": "function (_self, visibility)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this region is shown or hidden"
    }
   ],
   "methods": [
    {
     "name": "add",
     "sig": "(ContentPanel... panel)",
     "type": "function",
     "desc": "Adds the passed ContentPanel(s) to this region."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "collapse",
     "sig": "(Boolean skipAnim)",
     "type": "function",
     "desc": "Collapses this region."
    },
    {
     "name": "expand",
     "sig": "(Roo.EventObject e, Boolean skipAnim)",
     "type": "function",
     "desc": "Expands this region if it was previously collapsed."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getActivePanel",
     "sig": "()",
     "type": "function",
     "desc": "Get the active panel for this region."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the container element for this region."
    },
    {
     "name": "getPanel",
     "sig": "(Number/String/ContentPanel panel)",
     "type": "function",
     "desc": "Returns the panel specified or null if it's not in this region."
    },
    {
     "name": "getPosition",
     "sig": "()",
     "type": "function",
     "desc": "Returns this regions position (north/south/east/west/center)."
    },
    {
     "name": "getSplitBar",
     "sig": "()",
     "type": "function",
     "desc": "Returns the {@link Roo.SplitBar} for this region."
    },
    {
     "name": "getTabs",
     "sig": "()",
     "type": "function",
     "desc": "Returns the TabPanel component used by this region"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hasPanel",
     "sig": "(Number/String/ContentPanel panel)",
     "type": "function",
     "desc": "Returns true if the panel is in this region."
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hides this region."
    },
    {
     "name": "hidePanel",
     "sig": "(Number/String/ContentPanel panel)",
     "type": "function",
     "desc": "Hides the tab for the specified panel."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this region is currently visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "remove",
     "sig": "(Number/String/ContentPanel panel, Boolean preservePanel)",
     "type": "function",
     "desc": "Removes the specified panel. If preservePanel is not true (either here or in the config), the panel is destroyed."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "resizeTo",
     "sig": "(Number newSize)",
     "type": "function",
     "desc": "Resizes the region to the specified size. For vertical regions (west, east) this adjusts \nthe width, for horizontal (north, south) the height."
    },
    {
     "name": "setCollapsedTitle",
     "sig": "(String title)",
     "type": "function",
     "desc": "Updates the title for collapsed north/south regions (used with {@link #collapsedTitle} config option)"
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Shows this region if it was previously hidden."
    },
    {
     "name": "showPanel",
     "sig": "(Number/String/ContentPanel panelId)",
     "type": "function",
     "desc": "Shows the specified panel."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unhidePanel",
     "sig": "(Number/String/ContentPanel panel)",
     "type": "function",
     "desc": "Unhides the tab for a previously hidden panel."
    }
   ]
  },
  "Roo.TabPanel": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforetabchange",
     "sig": "function (_self, e, tab)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the active tab changes, set cancel to true on the \"e\" parameter to cancel the change"
    },
    {
     "name": "tabchange",
     "sig": "function (_self, activePanel)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the active tab changes"
    }
   ],
   "methods": [
    {
     "name": "activate",
     "sig": "(String/Number id)",
     "type": "function",
     "desc": "Activates a {@link Roo.TabPanelItem}. The currently active one will be deactivated."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addTab",
     "sig": "(String id, String text, String content, Boolean closable)",
     "type": "function",
     "desc": "Creates a new {@link Roo.TabPanelItem} by looking for an existing element with the provided id -- if it's not found it creates one."
    },
    {
     "name": "addTabItem",
     "sig": "(Roo.TabPanelItem item)",
     "type": "function",
     "desc": "Adds an existing {@link Roo.TabPanelItem}."
    },
    {
     "name": "autoSizeTabs",
     "sig": "()",
     "type": "function",
     "desc": "Manual call to resize the tabs (if {@link #resizeTabs} is false this does nothing)"
    },
    {
     "name": "beginUpdate",
     "sig": "()",
     "type": "function",
     "desc": "Disables tab resizing while tabs are being added (if {@link #resizeTabs} is false this does nothing)"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "(Boolean removeEl)",
     "type": "function",
     "desc": "Destroys this TabPanel"
    },
    {
     "name": "disableTab",
     "sig": "(String/Number id)",
     "type": "function",
     "desc": "Disables a {@link Roo.TabPanelItem}. It cannot be the active tab, if it is this call is ignored."
    },
    {
     "name": "enableTab",
     "sig": "(String/Number id)",
     "type": "function",
     "desc": "Enables a {@link Roo.TabPanelItem} that is disabled."
    },
    {
     "name": "endUpdate",
     "sig": "()",
     "type": "function",
     "desc": "Stops an update and resizes the tabs (if {@link #resizeTabs} is false this does nothing)"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getActiveTab",
     "sig": "()",
     "type": "function",
     "desc": "Gets the active {@link Roo.TabPanelItem}."
    },
    {
     "name": "getCount",
     "sig": "()",
     "type": "function",
     "desc": "Returns the number of tabs in this TabPanel."
    },
    {
     "name": "getTab",
     "sig": "(String/Number id)",
     "type": "function",
     "desc": "Returns the {@link Roo.TabPanelItem} with the specified id/index"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hideTab",
     "sig": "(String/Number id)",
     "type": "function",
     "desc": "Hides the {@link Roo.TabPanelItem} with the specified id/index"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "removeTab",
     "sig": "(String/Number id)",
     "type": "function",
     "desc": "Removes a {@link Roo.TabPanelItem}."
    },
    {
     "name": "setTabWidth",
     "sig": "(Number The)",
     "type": "function",
     "desc": "Resizes all the tabs to the passed width"
    },
    {
     "name": "syncHeight",
     "sig": "(Number targetHeight)",
     "type": "function",
     "desc": "Updates the tab body element to fit the height of the container element\nfor overflow scrolling"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unhideTab",
     "sig": "(String/Number id)",
     "type": "function",
     "desc": "\"Unhides\" the {@link Roo.TabPanelItem} with the specified id/index."
    }
   ]
  },
  "Roo.TabPanelItem": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (tabPanel, _self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this tab becomes the active tab."
    },
    {
     "name": "beforeclose",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this tab is closed. To cancel the close, set cancel to true on e (e.cancel = true)."
    },
    {
     "name": "close",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this tab is closed."
    },
    {
     "name": "deactivate",
     "sig": "function (tabPanel, _self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this tab is no longer the active tab."
    }
   ],
   "methods": [
    {
     "name": "activate",
     "sig": "()",
     "type": "function",
     "desc": "Activates this TabPanelItem -- this <b>does</b> deactivate the currently active TabPanelItem."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disables this TabPanelItem -- this does nothing if this is the active TabPanelItem."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enables this TabPanelItem if it was previously disabled."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getText",
     "sig": "()",
     "type": "function",
     "desc": "Returns the text for this tab"
    },
    {
     "name": "getUpdateManager",
     "sig": "()",
     "type": "function",
     "desc": "Gets the {@link Roo.UpdateManager} for the body of this TabPanelItem. Enables you to perform Ajax updates."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hides this TabPanelItem -- if you don't activate another TabPanelItem this could look odd."
    },
    {
     "name": "isActive",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this tab is the active tab."
    },
    {
     "name": "isHidden",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this tab is \"hidden\""
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "refresh",
     "sig": "()",
     "type": "function",
     "desc": "Forces a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the setUrl method has not been called.\n  This does not activate the panel, just updates its content."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setContent",
     "sig": "(String content, Boolean loadScripts)",
     "type": "function",
     "desc": "Sets the content for this TabPanelItem."
    },
    {
     "name": "setHidden",
     "sig": "(Boolean hidden)",
     "type": "function",
     "desc": "Show or hide the tab"
    },
    {
     "name": "setText",
     "sig": "(String text)",
     "type": "function",
     "desc": "Sets the text for the tab (Note: this also sets the tooltip text)"
    },
    {
     "name": "setTooltip",
     "sig": "(String tooltip)",
     "type": "function",
     "desc": "Set the tooltip for the tab."
    },
    {
     "name": "setUrl",
     "sig": "(String/Function url, String/Object params, Boolean loadOnce)",
     "type": "function",
     "desc": "Set a URL to be used to load the content for this TabPanelItem."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Shows this TabPanelItem -- this <b>does not</b> deactivate the currently active TabPanelItem."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.Template": {
   "props": [
    {
     "name": "url",
     "type": "String",
     "desc": "The Url to load the template from. beware if you are loading from a url, the data may not be ready if you use it instantly..\n                   it should be fixed so that template is observable...",
     "memberOf": ""
    },
    {
     "name": "html",
     "type": "String",
     "desc": "The HTML fragment or an array of fragments to join(\"\") or multiple arguments to join(\"\")",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "append",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and appends the new node(s) to el."
    },
    {
     "name": "apply",
     "sig": "()",
     "type": "function",
     "desc": "Alias for {@link #applyTemplate}"
    },
    {
     "name": "applyTemplate",
     "sig": "(Object values)",
     "type": "function",
     "desc": "Returns an HTML fragment of this template with the specified values applied."
    },
    {
     "name": "compile",
     "sig": "()",
     "type": "function",
     "desc": "Compiles the template into an internal function, eliminating the RegEx overhead."
    },
    {
     "name": "from",
     "sig": "(String/HTMLElement el)",
     "type": "function",
     "desc": "Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML."
    },
    {
     "name": "insertAfter",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and inserts the new node(s) after el."
    },
    {
     "name": "insertBefore",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and inserts the new node(s) before el."
    },
    {
     "name": "insertFirst",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and inserts the new node(s) as the first child of el."
    },
    {
     "name": "overwrite",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and overwrites the content of el with the new node(s)."
    },
    {
     "name": "set",
     "sig": "(String html, Boolean compile)",
     "type": "function",
     "desc": "Sets the HTML used as the template and optionally compiles it."
    }
   ]
  },
  "Roo.Toolbar": {
   "props": [
    {
     "name": "items",
     "type": "Array",
     "desc": "array of button configs or elements to add (will be converted to a MixedCollection)",
     "memberOf": "Roo"
    },
    {
     "name": "container",
     "type": "String/HTMLElement/Element",
     "desc": "The id or element that will contain the toolbar",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "add",
     "sig": "(Mixed arg1, Mixed arg2)",
     "type": "function",
     "desc": "Adds element(s) to the toolbar -- this function takes a variable number of \narguments of mixed type and adds them to the toolbar."
    },
    {
     "name": "addButton",
     "sig": "(Object/Array config)",
     "type": "function",
     "desc": "Adds a button (or buttons). See {@link Roo.Toolbar.Button} for more info on the config."
    },
    {
     "name": "addDom",
     "sig": "(Object config)",
     "type": "function",
     "desc": "Adds a new element to the toolbar from the passed {@link Roo.DomHelper} config."
    },
    {
     "name": "addElement",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Adds any standard HTML element to the toolbar"
    },
    {
     "name": "addField",
     "sig": "(Roo.form.Field field)",
     "type": "function",
     "desc": "Adds a dynamically rendered Roo.form field (TextField, ComboBox, etc).\nNote: the field should not have been rendered yet. For a field that has already been\nrendered, use {@link #addElement}."
    },
    {
     "name": "addFill",
     "sig": "()",
     "type": "function",
     "desc": "Adds a fill element that forces subsequent additions to the right side of the toolbar"
    },
    {
     "name": "addItem",
     "sig": "(Roo.Toolbar.Item item)",
     "type": "function",
     "desc": "Adds any Toolbar.Item or subclass"
    },
    {
     "name": "addSeparator",
     "sig": "()",
     "type": "function",
     "desc": "Adds a separator"
    },
    {
     "name": "addSpacer",
     "sig": "()",
     "type": "function",
     "desc": "Adds a spacer element"
    },
    {
     "name": "addText",
     "sig": "(String text)",
     "type": "function",
     "desc": "Adds text to the toolbar"
    },
    {
     "name": "addxtype",
     "sig": "(Object xtype)",
     "type": "function",
     "desc": "Add an Xtype element"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the Element for this toolbar."
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide the toolbar"
    },
    {
     "name": "insertButton",
     "sig": "(Number index, Object/Roo.Toolbar.Item/Roo.Toolbar.Button (may be Array) item)",
     "type": "function",
     "desc": "Inserts any {@link Roo.Toolbar.Item}/{@link Roo.Toolbar.Button} at the specified index."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show the toolbar"
    }
   ]
  },
  "Roo.Toolbar.Button": {
   "props": [
    {
     "name": "text",
     "type": "String",
     "desc": "The button text",
     "memberOf": "Roo.Button"
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "The path to an image to display in the button (the image will be set as the background-image\nCSS property of the button by default, so if you want a mixed icon/text button, set cls:\"x-btn-text-icon\")",
     "memberOf": "Roo.Button"
    },
    {
     "name": "handler",
     "type": "Function",
     "desc": "A function called when the button is clicked (can be used instead of click event)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "scope",
     "type": "Object",
     "desc": "The scope of the handler",
     "memberOf": "Roo.Button"
    },
    {
     "name": "minWidth",
     "type": "Number",
     "desc": "The minimum width for this button (used to give a set of buttons a common width)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "tooltip",
     "type": "String/Object",
     "desc": "The tooltip for the button - can be a string or QuickTips config object",
     "memberOf": "Roo.Button"
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "True to start hidden (defaults to false)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to start disabled (defaults to false)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "pressed",
     "type": "Boolean",
     "desc": "True to start pressed (only if enableToggle = true)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "toggleGroup",
     "type": "String",
     "desc": "The group this toggle button is a member of (only 1 per group can be pressed, only\n   applies if enableToggle = true)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "renderTo",
     "type": "String/HTMLElement/Element",
     "desc": "The element to append the button to",
     "memberOf": "Roo.Button"
    },
    {
     "name": "repeat",
     "type": "Boolean/Object",
     "desc": "True to repeat fire the click event while the mouse is down. This can also be\n  an {@link Roo.util.ClickRepeater} config object (defaults to false).",
     "memberOf": "Roo.Button"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the button's main element.",
     "memberOf": "Roo.Button"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The DOM tabIndex for this button (defaults to undefined)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "enableToggle",
     "type": "Boolean",
     "desc": "True to enable pressed/not pressed toggling (defaults to false)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "menu",
     "type": "Mixed",
     "desc": "Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).",
     "memberOf": "Roo.Button"
    },
    {
     "name": "menuAlign",
     "type": "String",
     "desc": "The position to align the menu to (see {@link Roo.Element#alignTo} for more details, defaults to 'tl-bl?').",
     "memberOf": "Roo.Button"
    },
    {
     "name": "iconCls",
     "type": "String",
     "desc": "A css class which sets a background image to be used as the icon for this button (defaults to undefined).",
     "memberOf": "Roo.Button"
    },
    {
     "name": "type",
     "type": "String",
     "desc": "The button's type, corresponding to the DOM input element type attribute.  Either \"submit,\" \"reset\" or \"button\" (default).",
     "memberOf": "Roo.Button"
    },
    {
     "name": "clickEvent",
     "type": "String",
     "desc": "The type of event to map to the button's event handler (defaults to 'click')",
     "memberOf": "Roo.Button"
    },
    {
     "name": "handleMouseEvents",
     "type": "Boolean",
     "desc": "False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "tooltipType",
     "type": "String",
     "desc": "The type of tooltip to use. Either \"qtip\" (default) for QuickTips or \"title\" for title attribute.",
     "memberOf": "Roo.Button"
    },
    {
     "name": "template",
     "type": "Roo.Template",
     "desc": "(Optional)\nAn {@link Roo.Template} with which to create the Button's main element. This Template must\ncontain numeric substitution parameter 0 if it is to display the tRoo property. Changing the template could\nrequire code modifications if required elements (e.g. a button) aren't present.",
     "memberOf": "Roo.Button"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "click",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this button is clicked"
    },
    {
     "name": "mouseout",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse exits the button"
    },
    {
     "name": "mouseover",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse hovers over the button"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the button is rendered"
    },
    {
     "name": "toggle",
     "sig": "function (_self, pressed)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the \"pressed\" state of this button changes (only if enableToggle = true)"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Removes and destroys this button"
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disables this item"
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enables this item"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "()",
     "type": "function",
     "desc": "Focus the button"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the button's underlying element"
    },
    {
     "name": "getText",
     "sig": "()",
     "type": "function",
     "desc": "Gets the text for this button"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hides this button"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean enabled)",
     "type": "function",
     "desc": "Convenience function for boolean enable/disable"
    },
    {
     "name": "setHandler",
     "sig": "(Function handler, Object scope)",
     "type": "function",
     "desc": "Assigns this button's click handler"
    },
    {
     "name": "setText",
     "sig": "(String text)",
     "type": "function",
     "desc": "Sets this button's text"
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function for boolean show/hide"
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Shows this button"
    },
    {
     "name": "toggle",
     "sig": "(Boolean state)",
     "type": "function",
     "desc": "If a state it passed, it becomes the pressed state otherwise the current state is toggled."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.Toolbar.Fill": {
   "props": [],
   "events": [
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the button is rendered"
    }
   ],
   "methods": [
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Removes and destroys this item."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disables this item."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enables this item."
    },
    {
     "name": "focus",
     "sig": "()",
     "type": "function",
     "desc": "Try to focus this item."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Get this item's HTML Element"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hides this item."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function for boolean show/hide."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Shows this item."
    }
   ]
  },
  "Roo.Toolbar.Item": {
   "props": [],
   "events": [
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the button is rendered"
    }
   ],
   "methods": [
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Removes and destroys this item."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disables this item."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enables this item."
    },
    {
     "name": "focus",
     "sig": "()",
     "type": "function",
     "desc": "Try to focus this item."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Get this item's HTML Element"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hides this item."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function for boolean show/hide."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Shows this item."
    }
   ]
  },
  "Roo.Toolbar.Separator": {
   "props": [],
   "events": [
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the button is rendered"
    }
   ],
   "methods": [
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Removes and destroys this item."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disables this item."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enables this item."
    },
    {
     "name": "focus",
     "sig": "()",
     "type": "function",
     "desc": "Try to focus this item."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Get this item's HTML Element"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hides this item."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function for boolean show/hide."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Shows this item."
    }
   ]
  },
  "Roo.Toolbar.Spacer": {
   "props": [],
   "events": [
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the button is rendered"
    }
   ],
   "methods": [
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Removes and destroys this item."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disables this item."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enables this item."
    },
    {
     "name": "focus",
     "sig": "()",
     "type": "function",
     "desc": "Try to focus this item."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Get this item's HTML Element"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hides this item."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function for boolean show/hide."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Shows this item."
    }
   ]
  },
  "Roo.Toolbar.SplitButton": {
   "props": [
    {
     "name": "arrowHandler",
     "type": "Function",
     "desc": "A function called when the arrow button is clicked (can be used instead of click event)",
     "memberOf": "Roo.SplitButton"
    },
    {
     "name": "arrowTooltip",
     "type": "String",
     "desc": "The title attribute of the arrow",
     "memberOf": "Roo.SplitButton"
    },
    {
     "name": "text",
     "type": "String",
     "desc": "The button text",
     "memberOf": "Roo.Button"
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "The path to an image to display in the button (the image will be set as the background-image\nCSS property of the button by default, so if you want a mixed icon/text button, set cls:\"x-btn-text-icon\")",
     "memberOf": "Roo.Button"
    },
    {
     "name": "handler",
     "type": "Function",
     "desc": "A function called when the button is clicked (can be used instead of click event)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "scope",
     "type": "Object",
     "desc": "The scope of the handler",
     "memberOf": "Roo.Button"
    },
    {
     "name": "minWidth",
     "type": "Number",
     "desc": "The minimum width for this button (used to give a set of buttons a common width)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "tooltip",
     "type": "String/Object",
     "desc": "The tooltip for the button - can be a string or QuickTips config object",
     "memberOf": "Roo.Button"
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "True to start hidden (defaults to false)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to start disabled (defaults to false)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "pressed",
     "type": "Boolean",
     "desc": "True to start pressed (only if enableToggle = true)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "toggleGroup",
     "type": "String",
     "desc": "The group this toggle button is a member of (only 1 per group can be pressed, only\n   applies if enableToggle = true)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "renderTo",
     "type": "String/HTMLElement/Element",
     "desc": "The element to append the button to",
     "memberOf": "Roo.Button"
    },
    {
     "name": "repeat",
     "type": "Boolean/Object",
     "desc": "True to repeat fire the click event while the mouse is down. This can also be\n  an {@link Roo.util.ClickRepeater} config object (defaults to false).",
     "memberOf": "Roo.Button"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the button's main element.",
     "memberOf": "Roo.Button"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The DOM tabIndex for this button (defaults to undefined)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "enableToggle",
     "type": "Boolean",
     "desc": "True to enable pressed/not pressed toggling (defaults to false)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "menu",
     "type": "Mixed",
     "desc": "Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).",
     "memberOf": "Roo.Button"
    },
    {
     "name": "menuAlign",
     "type": "String",
     "desc": "The position to align the menu to (see {@link Roo.Element#alignTo} for more details, defaults to 'tl-bl?').",
     "memberOf": "Roo.Button"
    },
    {
     "name": "iconCls",
     "type": "String",
     "desc": "A css class which sets a background image to be used as the icon for this button (defaults to undefined).",
     "memberOf": "Roo.Button"
    },
    {
     "name": "type",
     "type": "String",
     "desc": "The button's type, corresponding to the DOM input element type attribute.  Either \"submit,\" \"reset\" or \"button\" (default).",
     "memberOf": "Roo.Button"
    },
    {
     "name": "clickEvent",
     "type": "String",
     "desc": "The type of event to map to the button's event handler (defaults to 'click')",
     "memberOf": "Roo.Button"
    },
    {
     "name": "handleMouseEvents",
     "type": "Boolean",
     "desc": "False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)",
     "memberOf": "Roo.Button"
    },
    {
     "name": "tooltipType",
     "type": "String",
     "desc": "The type of tooltip to use. Either \"qtip\" (default) for QuickTips or \"title\" for title attribute.",
     "memberOf": "Roo.Button"
    },
    {
     "name": "template",
     "type": "Roo.Template",
     "desc": "(Optional)\nAn {@link Roo.Template} with which to create the Button's main element. This Template must\ncontain numeric substitution parameter 0 if it is to display the tRoo property. Changing the template could\nrequire code modifications if required elements (e.g. a button) aren't present.",
     "memberOf": "Roo.Button"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "arrowclick",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this button's arrow is clicked"
    },
    {
     "name": "click",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this button is clicked"
    },
    {
     "name": "mouseout",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse exits the button"
    },
    {
     "name": "mouseover",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse hovers over the button"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the button is rendered"
    },
    {
     "name": "toggle",
     "sig": "function (_self, pressed)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the \"pressed\" state of this button changes (only if enableToggle = true)"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Removes and destroys this button"
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this button"
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this button"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "()",
     "type": "function",
     "desc": "Focus the button"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the button's underlying element"
    },
    {
     "name": "getText",
     "sig": "()",
     "type": "function",
     "desc": "Gets the text for this button"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hides this button"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setArrowHandler",
     "sig": "(Function handler, Object scope)",
     "type": "function",
     "desc": "Sets this button's arrow click handler"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean enabled)",
     "type": "function",
     "desc": "Convenience function for boolean enable/disable"
    },
    {
     "name": "setHandler",
     "sig": "(Function handler, Object scope)",
     "type": "function",
     "desc": "Sets this button's click handler"
    },
    {
     "name": "setText",
     "sig": "(String text)",
     "type": "function",
     "desc": "Sets this button's text"
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function for boolean show/hide"
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Shows this button"
    },
    {
     "name": "toggle",
     "sig": "(Boolean state)",
     "type": "function",
     "desc": "If a state it passed, it becomes the pressed state otherwise the current state is toggled."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.Toolbar.TextItem": {
   "props": [],
   "events": [
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the button is rendered"
    }
   ],
   "methods": [
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Removes and destroys this item."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disables this item."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enables this item."
    },
    {
     "name": "focus",
     "sig": "()",
     "type": "function",
     "desc": "Try to focus this item."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Get this item's HTML Element"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hides this item."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function for boolean show/hide."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Shows this item."
    }
   ]
  },
  "Roo.TreePanel": {
   "props": [
    {
     "name": "tree",
     "type": "Roo.tree.TreePanel",
     "desc": "The tree TreePanel, with config etc.",
     "memberOf": "Roo"
    },
    {
     "name": "fitToFrame",
     "type": "Boolean",
     "desc": "True for this panel to adjust its size to fit when the region resizes  (defaults to false)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "fitContainer",
     "type": "Boolean",
     "desc": "When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "autoCreate",
     "type": "Boolean/Object",
     "desc": "True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "closable",
     "type": "Boolean",
     "desc": "True if the panel can be closed/removed",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "background",
     "type": "Boolean",
     "desc": "True if the panel should not be activated when it is added (defaults to false)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "resizeEl",
     "type": "String/HTMLElement/Element",
     "desc": "An element to resize if {@link #fitToFrame} is true (instead of this panel's element)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "toolbar",
     "type": "Toolbar",
     "desc": "A toolbar for this panel",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "autoScroll",
     "type": "Boolean",
     "desc": "True to scroll overflow in this panel (use with {@link #fitToFrame})",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "title",
     "type": "String",
     "desc": "The title for this panel",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "adjustments",
     "type": "Array",
     "desc": "Values to <b>add</b> to the width/height when doing a {@link #fitToFrame} (default is [0, 0])",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "url",
     "type": "String",
     "desc": "Calls {@link #setUrl} with this value",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "region",
     "type": "String",
     "desc": "which region to put this panel on (when used with xtype constructors)",
     "memberOf": "Roo.ContentPanel",
     "optvals": [
      "center",
      "north",
      "south",
      "east",
      "west"
     ]
    },
    {
     "name": "params",
     "type": "String/Object",
     "desc": "When used with {@link #url}, calls {@link #setUrl} with this value",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "loadOnce",
     "type": "Boolean",
     "desc": "When used with {@link #url}, calls {@link #setUrl} with this value",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "content",
     "type": "String",
     "desc": "Raw content to fill content panel with (uses setContent on construction.)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this panel is activated."
    },
    {
     "name": "deactivate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this panel is activated."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this tab is created"
    },
    {
     "name": "resize",
     "sig": "function (_self, width, height)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this panel is resized if fitToFrame is true."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addxtype",
     "sig": "(Object cfg)",
     "type": "function",
     "desc": "Adds a xtype elements to the panel - currently only supports Forms, View, JsonView.\n<pre><code>\n\nlayout.addxtype({\n       xtype : 'Form',\n       items: [ .... ]\n   }\n);\n\n</code></pre>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this panel"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns this panel's element - used by regiosn to add."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns this panel's id"
    },
    {
     "name": "getTitle",
     "sig": "()",
     "type": "function",
     "desc": "Returns this panel's title"
    },
    {
     "name": "getToolbar",
     "sig": "()",
     "type": "function",
     "desc": "Returns the toolbar for this Panel if one was configured."
    },
    {
     "name": "getUpdateManager",
     "sig": "()",
     "type": "function",
     "desc": "Get the {@link Roo.UpdateManager} for this panel. Enables you to perform Ajax updates."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isClosable",
     "sig": "()",
     "type": "function",
     "desc": "Returns true is this panel was configured to be closable"
    },
    {
     "name": "load",
     "sig": "(Object/String/Function url, String/Object params, Function callback, Boolean discardUrl)",
     "type": "function",
     "desc": "Loads this content panel immediately with content from XHR. Note: to delay loading until the panel is activated, use {@link #setUrl}."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "refresh",
     "sig": "()",
     "type": "function",
     "desc": "Force a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the {@link #setUrl} method has not been called.\n  This does not activate the panel, just updates its content."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setContent",
     "sig": "(String content, Boolean loadScripts)",
     "type": "function",
     "desc": "Updates this panel's element"
    },
    {
     "name": "setTitle",
     "sig": "(String title)",
     "type": "function",
     "desc": "Set this panel's title"
    },
    {
     "name": "setUrl",
     "sig": "(String/Function url, String/Object params, Boolean loadOnce)",
     "type": "function",
     "desc": "Set a URL to be used to load the content for this panel. When this panel is activated, the content will be loaded from that URL."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.UpdateManager": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforeupdate",
     "sig": "function (el, url, params)\n{\n\n}",
     "type": "function",
     "desc": "Fired before an update is made, return false from your handler and the update is cancelled."
    },
    {
     "name": "failure",
     "sig": "function (el, oResponseObject)\n{\n\n}",
     "type": "function",
     "desc": "Fired on update failure."
    },
    {
     "name": "update",
     "sig": "function (el, oResponseObject)\n{\n\n}",
     "type": "function",
     "desc": "Fired after successful update is made."
    }
   ],
   "methods": [
    {
     "name": "abort",
     "sig": "()",
     "type": "function",
     "desc": "Aborts the executing transaction"
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "formUpdate",
     "sig": "(String/HTMLElement form, String url, Boolean reset, Function callback)",
     "type": "function",
     "desc": "Performs an async form post, updating this element with the response. If the form has the attribute enctype=\"multipart/form-data\", it assumes it's a file upload.\nUses this.sslBlankUrl for SSL file uploads to prevent IE security warning."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Get the Element this UpdateManager is bound to"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isUpdating",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if an update is in progress"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "refresh",
     "sig": "(Function callback)",
     "type": "function",
     "desc": "Refresh the element with the last used url or defaultUrl. If there is no url, it returns immediately"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setDefaultUrl",
     "sig": "(String/Function defaultUrl)",
     "type": "function",
     "desc": "Set the defaultUrl used for updates"
    },
    {
     "name": "setRenderer",
     "sig": "(Object renderer)",
     "type": "function",
     "desc": "Set the content renderer for this UpdateManager. See {@link Roo.UpdateManager.BasicRenderer#render} for more details."
    },
    {
     "name": "showLoading",
     "sig": "()",
     "type": "function",
     "desc": "Called to update the element to \"Loading\" state. Override to perform custom action."
    },
    {
     "name": "startAutoRefresh",
     "sig": "(Number interval, String/Function url, String/Object params, Function callback, Boolean refreshNow)",
     "type": "function",
     "desc": "Set this element to auto refresh."
    },
    {
     "name": "stopAutoRefresh",
     "sig": "()",
     "type": "function",
     "desc": "Stop auto refresh on this element."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "update",
     "sig": "(Object/String/Function url, String/Object params, Function callback, Boolean discardUrl)",
     "type": "function",
     "desc": "Performs an async request, updating this element with the response. If params are specified it uses POST, otherwise it uses GET."
    },
    {
     "name": "updateElement",
     "sig": "(String/HTMLElement/Roo.Element el, String url, String/Object params, Object options)",
     "type": "function",
     "desc": "Static convenience method. This method is deprecated in favor of el.load({url:'foo.php', ...}).\nUsage:\n<pre><code>Roo.UpdateManager.updateElement(\"my-div\", \"stuff.php\");</code></pre>"
    }
   ]
  },
  "Roo.UpdateManager.BasicRenderer": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "render",
     "sig": "(Roo.Element el, Object response, UpdateManager updateManager, Function callback)",
     "type": "function",
     "desc": "This is called when the transaction is completed and it's time to update the element - The BasicRenderer\nupdates the elements innerHTML with the responseText - To perform a custom render (i.e. XML or JSON processing),\ncreate an object with a \"render(el, response)\" method and pass it to setRenderer on the UpdateManager."
    }
   ]
  },
  "Roo.UpdateManager.defaults": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.View": {
   "props": [
    {
     "name": "store",
     "type": "Roo.data.Store",
     "desc": "Data store to load data from.",
     "memberOf": ""
    },
    {
     "name": "el",
     "type": "String|Roo.Element",
     "desc": "The container element.",
     "memberOf": ""
    },
    {
     "name": "tpl",
     "type": "String|Roo.Template",
     "desc": "The template used by this View",
     "memberOf": ""
    },
    {
     "name": "dataName",
     "type": "String",
     "desc": "the named area of the template to use as the data area\n                         Works with domtemplates roo-name=\"name\"",
     "memberOf": ""
    },
    {
     "name": "selectedClass",
     "type": "String",
     "desc": "The css class to add to selected nodes",
     "memberOf": ""
    },
    {
     "name": "emptyText",
     "type": "String",
     "desc": "The empty text to show when nothing is loaded.",
     "memberOf": ""
    },
    {
     "name": "text",
     "type": "String",
     "desc": "to display on mask (default Loading)",
     "memberOf": ""
    },
    {
     "name": "multiSelect",
     "type": "Boolean",
     "desc": "Allow multiple selection",
     "memberOf": ""
    },
    {
     "name": "singleSelect",
     "type": "Boolean",
     "desc": "Allow single selection",
     "memberOf": ""
    },
    {
     "name": "toggleSelect",
     "type": "Boolean",
     "desc": "- selecting",
     "memberOf": ""
    },
    {
     "name": "tickable",
     "type": "Boolean",
     "desc": "- selecting",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforeclick",
     "sig": "function (_self, index, node, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a click is processed. Returns false to cancel the default action."
    },
    {
     "name": "beforeselect",
     "sig": "function (_self, node, selections)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a selection is made. If any handlers return false, the selection is cancelled."
    },
    {
     "name": "click",
     "sig": "function (_self, index, node, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a template node is clicked."
    },
    {
     "name": "contextmenu",
     "sig": "function (_self, index, node, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a template node is right clicked."
    },
    {
     "name": "dblclick",
     "sig": "function (_self, index, node, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a template node is double clicked."
    },
    {
     "name": "preparedata",
     "sig": "function (_self, data)\n{\n\n}",
     "type": "function",
     "desc": "Fires on every row to render, to allow you to change the data."
    },
    {
     "name": "selectionchange",
     "sig": "function (_self, selections)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the selected nodes change."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearSelections",
     "sig": "(Boolean suppressEvent)",
     "type": "function",
     "desc": "Clear all selections"
    },
    {
     "name": "findItemFromChild",
     "sig": "(HTMLElement node)",
     "type": "function",
     "desc": "Returns the template node the passed child belongs to or null if it doesn't belong to one."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the element this view is bound to."
    },
    {
     "name": "getNode",
     "sig": "(HTMLElement/String/Number nodeInfo)",
     "type": "function",
     "desc": "Gets a template node."
    },
    {
     "name": "getNodes",
     "sig": "(Number startIndex, Number endIndex)",
     "type": "function",
     "desc": "Gets a range template nodes."
    },
    {
     "name": "getSelectedIndexes",
     "sig": "()",
     "type": "function",
     "desc": "Get the indexes of the selected nodes."
    },
    {
     "name": "getSelectedNodes",
     "sig": "()",
     "type": "function",
     "desc": "Get the currently selected nodes."
    },
    {
     "name": "getSelectionCount",
     "sig": "()",
     "type": "function",
     "desc": "Get the number of selected nodes."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "indexOf",
     "sig": "(HTMLElement/String/Number nodeInfo)",
     "type": "function",
     "desc": "Finds the index of the passed node"
    },
    {
     "name": "isSelected",
     "sig": "(HTMLElement/Number node)",
     "type": "function",
     "desc": "Returns true if the passed node is selected"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onBeforeLoad",
     "sig": "()",
     "type": "function",
     "desc": "onbeforeLoad - masks the loading area."
    },
    {
     "name": "prepareData",
     "sig": "(Array/Object data)",
     "type": "function",
     "desc": "Function to override to reformat the data that is sent to\nthe template for each node.\nDEPRICATED - use the preparedata event handler."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "refresh",
     "sig": "()",
     "type": "function",
     "desc": "Refreshes the view. - called by datachanged on the store. - do not call directly."
    },
    {
     "name": "refreshNode",
     "sig": "(Number index)",
     "type": "function",
     "desc": "Refresh an individual node."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "select",
     "sig": "(Array/HTMLElement/String/Number nodeInfo, Boolean keepExisting, Boolean suppressEvent)",
     "type": "function",
     "desc": "Selects nodes."
    },
    {
     "name": "setStore",
     "sig": "(Store store)",
     "type": "function",
     "desc": "Changes the data store this view uses and refresh the view."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unselect",
     "sig": "(Array/HTMLElement/String/Number nodeInfo, Boolean keepExisting, Boolean suppressEvent)",
     "type": "function",
     "desc": "Unselects nodes."
    }
   ]
  },
  "Roo.ViewPanel": {
   "props": [
    {
     "name": "fitToFrame",
     "type": "Boolean",
     "desc": "True for this panel to adjust its size to fit when the region resizes  (defaults to false)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "fitContainer",
     "type": "Boolean",
     "desc": "When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "autoCreate",
     "type": "Boolean/Object",
     "desc": "True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "closable",
     "type": "Boolean",
     "desc": "True if the panel can be closed/removed",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "background",
     "type": "Boolean",
     "desc": "True if the panel should not be activated when it is added (defaults to false)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "resizeEl",
     "type": "String/HTMLElement/Element",
     "desc": "An element to resize if {@link #fitToFrame} is true (instead of this panel's element)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "toolbar",
     "type": "Toolbar",
     "desc": "A toolbar for this panel",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "autoScroll",
     "type": "Boolean",
     "desc": "True to scroll overflow in this panel (use with {@link #fitToFrame})",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "title",
     "type": "String",
     "desc": "The title for this panel",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "adjustments",
     "type": "Array",
     "desc": "Values to <b>add</b> to the width/height when doing a {@link #fitToFrame} (default is [0, 0])",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "url",
     "type": "String",
     "desc": "Calls {@link #setUrl} with this value",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "region",
     "type": "String",
     "desc": "which region to put this panel on (when used with xtype constructors)",
     "memberOf": "Roo.ContentPanel",
     "optvals": [
      "center",
      "north",
      "south",
      "east",
      "west"
     ]
    },
    {
     "name": "params",
     "type": "String/Object",
     "desc": "When used with {@link #url}, calls {@link #setUrl} with this value",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "loadOnce",
     "type": "Boolean",
     "desc": "When used with {@link #url}, calls {@link #setUrl} with this value",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "content",
     "type": "String",
     "desc": "Raw content to fill content panel with (uses setContent on construction.)",
     "memberOf": "Roo.ContentPanel"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this panel is activated."
    },
    {
     "name": "deactivate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this panel is activated."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this tab is created"
    },
    {
     "name": "resize",
     "sig": "function (_self, width, height)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this panel is resized if fitToFrame is true."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addxtype",
     "sig": "(Object cfg)",
     "type": "function",
     "desc": "Adds a xtype elements to the panel - currently only supports Forms, View, JsonView.\n<pre><code>\n\nlayout.addxtype({\n       xtype : 'Form',\n       items: [ .... ]\n   }\n);\n\n</code></pre>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this panel"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns this panel's element - used by regiosn to add."
    },
    {
     "name": "getGrid",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid for this panel"
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns this panel's id"
    },
    {
     "name": "getTitle",
     "sig": "()",
     "type": "function",
     "desc": "Returns this panel's title"
    },
    {
     "name": "getToolbar",
     "sig": "()",
     "type": "function",
     "desc": "Returns the toolbar for this Panel if one was configured."
    },
    {
     "name": "getUpdateManager",
     "sig": "()",
     "type": "function",
     "desc": "Get the {@link Roo.UpdateManager} for this panel. Enables you to perform Ajax updates."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isClosable",
     "sig": "()",
     "type": "function",
     "desc": "Returns true is this panel was configured to be closable"
    },
    {
     "name": "load",
     "sig": "(Object/String/Function url, String/Object params, Function callback, Boolean discardUrl)",
     "type": "function",
     "desc": "Loads this content panel immediately with content from XHR. Note: to delay loading until the panel is activated, use {@link #setUrl}."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "refresh",
     "sig": "()",
     "type": "function",
     "desc": "Force a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the {@link #setUrl} method has not been called.\n  This does not activate the panel, just updates its content."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setContent",
     "sig": "(String content, Boolean loadScripts)",
     "type": "function",
     "desc": "Updates this panel's element"
    },
    {
     "name": "setTitle",
     "sig": "(String title)",
     "type": "function",
     "desc": "Set this panel's title"
    },
    {
     "name": "setUrl",
     "sig": "(String/Function url, String/Object params, Boolean loadOnce)",
     "type": "function",
     "desc": "Set a URL to be used to load the content for this panel. When this panel is activated, the content will be loaded from that URL."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.XComponent": {
   "props": [
    {
     "name": "disabled",
     "type": "Function|boolean",
     "desc": "If this module is disabled by some rule, return true from the funtion",
     "memberOf": ""
    },
    {
     "name": "parent",
     "type": "String",
     "desc": "Name of parent element which it get xtype added to..",
     "memberOf": ""
    },
    {
     "name": "order",
     "type": "String",
     "desc": "Used to set the order in which elements are created (usefull for multiple tabs)",
     "memberOf": ""
    },
    {
     "name": "name",
     "type": "String",
     "desc": "String to display while loading.",
     "memberOf": ""
    },
    {
     "name": "region",
     "type": "String",
     "desc": "Region to render component to (defaults to center)",
     "memberOf": ""
    },
    {
     "name": "items",
     "type": "Array",
     "desc": "A single item array - the first element is the root of the tree..\nIt's done this way to stay compatible with the Xtype system...",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "built",
     "sig": "function (c)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this the componnt is built"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "build",
     "sig": "(Object parent, Function optional)",
     "type": "function",
     "desc": "Build the registered modules."
    },
    {
     "name": "buildOrder",
     "sig": "()",
     "type": "function",
     "desc": "make a list of modules to build."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "preBuild",
     "sig": "()",
     "type": "function",
     "desc": "move modules into their correct place in the tree.."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "register",
     "sig": "()",
     "type": "function",
     "desc": "Register components to be built later.\n\nThis solves the following issues\n- Building is not done on page load, but after an authentication process has occured.\n- Interface elements are registered on page load\n- Parent Interface elements may not be loaded before child, so this handles that..\n\n\nexample:\n\nMyApp.register({\n          order : '000001',\n          module : 'Pman.Tab.projectMgr',\n          region : 'center',\n          parent : 'Pman.layout',\n          disabled : false,  // or use a function..\n        })\n* @param {Object} details about module"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(Roo.Element|String|DomElement optional)",
     "type": "function",
     "desc": "render\nrender element to dom or tree"
    },
    {
     "name": "toObject",
     "sig": "()",
     "type": "function",
     "desc": "convert a string to an object..\neg. 'AAA.BBB' -> finds AAA.BBB"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.XComponent#_tree": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.XComponent.event.events": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.XTemplate": {
   "props": [
    {
     "name": "url",
     "type": "String",
     "desc": "The Url to load the template from. beware if you are loading from a url, the data may not be ready if you use it instantly..\n                   it should be fixed so that template is observable...",
     "memberOf": "Roo.Template"
    },
    {
     "name": "html",
     "type": "String",
     "desc": "The HTML fragment or an array of fragments to join(\"\") or multiple arguments to join(\"\")",
     "memberOf": "Roo.Template"
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "append",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and appends the new node(s) to el."
    },
    {
     "name": "apply",
     "sig": "()",
     "type": "function",
     "desc": "Alias for {@link #applyTemplate}"
    },
    {
     "name": "applySubTemplate",
     "sig": "(Number id, Object values, Object parent)",
     "type": "function",
     "desc": "same as applyTemplate, except it's done to one of the subTemplates\nwhen using named templates, you can do:\n\nvar str = pl.applySubTemplate('your-name', values);"
    },
    {
     "name": "applyTemplate",
     "sig": "(Object values)",
     "type": "function",
     "desc": "Returns an HTML fragment of this template with the specified values applied."
    },
    {
     "name": "compile",
     "sig": "()",
     "type": "function",
     "desc": "compile the template\n\nThis is not recursive, so I'm not sure how nested templates are really going to be handled.."
    },
    {
     "name": "from",
     "sig": "(String/HTMLElement el)",
     "type": "function",
     "desc": "Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML."
    },
    {
     "name": "insertAfter",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and inserts the new node(s) after el."
    },
    {
     "name": "insertBefore",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and inserts the new node(s) before el."
    },
    {
     "name": "insertFirst",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and inserts the new node(s) as the first child of el."
    },
    {
     "name": "overwrite",
     "sig": "(String/HTMLElement/Roo.Element el, Object values, Boolean returnElement)",
     "type": "function",
     "desc": "Applies the supplied values to the template and overwrites the content of el with the new node(s)."
    },
    {
     "name": "set",
     "sig": "(String html, Boolean compile)",
     "type": "function",
     "desc": "Sets the HTML used as the template and optionally compiles it."
    }
   ]
  },
  "Roo.bootstrap": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.bootstrap.Alert": {
   "props": [
    {
     "name": "title",
     "type": "String",
     "desc": "The title of alert",
     "memberOf": ""
    },
    {
     "name": "html",
     "type": "String",
     "desc": "The content of alert",
     "memberOf": ""
    },
    {
     "name": "weight",
     "type": "String",
     "desc": "",
     "memberOf": "",
     "optvals": [
      "success",
      "info",
      "warning",
      "danger"
     ]
    },
    {
     "name": "faicon",
     "type": "String",
     "desc": "font-awesomeicon",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.Body": {
   "props": [
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.Button": {
   "props": [
    {
     "name": "html",
     "type": "String",
     "desc": "The button content",
     "memberOf": ""
    },
    {
     "name": "weight",
     "type": "String",
     "desc": "default",
     "memberOf": "",
     "optvals": [
      "primary",
      "success",
      "info",
      "warning",
      "danger",
      "link"
     ]
    },
    {
     "name": "size",
     "type": "String",
     "desc": "",
     "memberOf": "",
     "optvals": [
      "lg",
      "sm",
      "xs"
     ]
    },
    {
     "name": "tag",
     "type": "String",
     "desc": "",
     "memberOf": "",
     "optvals": [
      "a",
      "input",
      "submit"
     ]
    },
    {
     "name": "href",
     "type": "String",
     "desc": "empty or href",
     "memberOf": ""
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "default false;",
     "memberOf": ""
    },
    {
     "name": "isClose",
     "type": "Boolean",
     "desc": "default false;",
     "memberOf": ""
    },
    {
     "name": "glyphicon",
     "type": "String",
     "desc": "",
     "memberOf": "",
     "optvals": [
      "",
      "adjust",
      "align-center",
      "align-justify",
      "align-left",
      "align-right",
      "arrow-down",
      "arrow-left",
      "arrow-right",
      "arrow-up",
      "asterisk",
      "backward",
      "ban-circle",
      "barcode",
      "bell",
      "bold",
      "book",
      "bookmark",
      "briefcase",
      "bullhorn",
      "calendar",
      "camera",
      "certificate",
      "check",
      "chevron-down",
      "chevron-left",
      "chevron-right",
      "chevron-up",
      "circle-arrow-down",
      "circle-arrow-left",
      "circle-arrow-right",
      "circle-arrow-up",
      "cloud",
      "cloud-download",
      "cloud-upload",
      "cog",
      "collapse-down",
      "collapse-up",
      "comment",
      "compressed",
      "copyright-mark",
      "credit-card",
      "cutlery",
      "dashboard",
      "download",
      "download-alt",
      "earphone",
      "edit",
      "eject",
      "envelope",
      "euro",
      "exclamation-sign",
      "expand",
      "export",
      "eye-close",
      "eye-open",
      "facetime-video",
      "fast-backward",
      "fast-forward",
      "file",
      "film",
      "filter",
      "fire",
      "flag",
      "flash",
      "floppy-disk",
      "floppy-open",
      "floppy-remove",
      "floppy-save",
      "floppy-saved",
      "folder-close",
      "folder-open",
      "font",
      "forward",
      "fullscreen",
      "gbp",
      "gift",
      "glass",
      "globe",
      "hand-down",
      "hand-left",
      "hand-right",
      "hand-up",
      "hd-video",
      "hdd",
      "header",
      "headphones",
      "heart",
      "heart-empty",
      "home",
      "import",
      "inbox",
      "indent-left",
      "indent-right",
      "info-sign",
      "italic",
      "leaf",
      "link",
      "list",
      "list-alt",
      "lock",
      "log-in",
      "log-out",
      "magnet",
      "map-marker",
      "minus",
      "minus-sign",
      "move",
      "music",
      "new-window",
      "off",
      "ok",
      "ok-circle",
      "ok-sign",
      "open",
      "paperclip",
      "pause",
      "pencil",
      "phone",
      "phone-alt",
      "picture",
      "plane",
      "play",
      "play-circle",
      "plus",
      "plus-sign",
      "print",
      "pushpin",
      "qrcode",
      "question-sign",
      "random",
      "record",
      "refresh",
      "registration-mark",
      "remove",
      "remove-circle",
      "remove-sign",
      "repeat",
      "resize-full",
      "resize-horizontal",
      "resize-small",
      "resize-vertical",
      "retweet",
      "road",
      "save",
      "saved",
      "screenshot",
      "sd-video",
      "search",
      "send",
      "share",
      "share-alt",
      "shopping-cart",
      "signal",
      "sort",
      "sort-by-alphabet",
      "sort-by-alphabet-alt",
      "sort-by-attributes",
      "sort-by-attributes-alt",
      "sort-by-order",
      "sort-by-order-alt",
      "sound-5-1",
      "sound-6-1",
      "sound-7-1",
      "sound-dolby",
      "sound-stereo",
      "star",
      "star-empty",
      "stats",
      "step-backward",
      "step-forward",
      "stop",
      "subtitles",
      "tag",
      "tags",
      "tasks",
      "text-height",
      "text-width",
      "th",
      "th-large",
      "th-list",
      "thumbs-down",
      "thumbs-up",
      "time",
      "tint",
      "tower",
      "transfer",
      "trash",
      "tree-conifer",
      "tree-deciduous",
      "unchecked",
      "upload",
      "usd",
      "user",
      "volume-down",
      "volume-off",
      "volume-up",
      "warning-sign",
      "wrench",
      "zoom-in",
      "zoom-out"
     ]
    },
    {
     "name": "badge",
     "type": "String",
     "desc": "text for badge",
     "memberOf": ""
    },
    {
     "name": "theme",
     "type": "String",
     "desc": "default",
     "memberOf": ""
    },
    {
     "name": "inverse",
     "type": "Boolean",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "toggle",
     "type": "Boolean",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "ontext",
     "type": "String",
     "desc": "text for on toggle state",
     "memberOf": ""
    },
    {
     "name": "offtext",
     "type": "String",
     "desc": "text for off toggle state",
     "memberOf": ""
    },
    {
     "name": "defaulton",
     "type": "Boolean",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "preventDefault",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": ""
    },
    {
     "name": "removeClass",
     "type": "Boolean",
     "desc": "remove the standard class..",
     "memberOf": ""
    },
    {
     "name": "target",
     "type": "String",
     "desc": "target for a href. (_self|_blank|_parent|_top| other)",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "click",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "When a butotn is pressed"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "toggle",
     "sig": "function (e, pressed)\n{\n\n}",
     "type": "function",
     "desc": "After the button has been toggles"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this button"
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enables this button"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setActive",
     "sig": "(Boolean state)",
     "type": "function",
     "desc": "sets the active state on/off,"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "toggleActive",
     "sig": "()",
     "type": "function",
     "desc": "toggles the current active state"
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.ButtonGroup": {
   "props": [
    {
     "name": "size",
     "type": "String",
     "desc": "lg | sm | xs (default empty normal)",
     "memberOf": ""
    },
    {
     "name": "align",
     "type": "String",
     "desc": "vertical | justified  (default none)",
     "memberOf": ""
    },
    {
     "name": "direction",
     "type": "String",
     "desc": "up | down (default down)",
     "memberOf": ""
    },
    {
     "name": "toolbar",
     "type": "Boolean",
     "desc": "false | true",
     "memberOf": ""
    },
    {
     "name": "btn",
     "type": "Boolean",
     "desc": "true | false",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.Calendar": {
   "props": [
    {
     "name": "loadMask",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "header",
     "type": "Object",
     "desc": "generate the user specific header of the calendar, default false",
     "memberOf": ""
    },
    {
     "name": "startDay",
     "type": "Number",
     "desc": "Day index at which the week should begin, 0-based (defaults to 0, which is Sunday)",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "eventclick",
     "sig": "function (_self, )\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse click an"
    },
    {
     "name": "evententer",
     "sig": "function (_self, Event)\n{\n\n}",
     "type": "function",
     "desc": "Fires when mouse over an event"
    },
    {
     "name": "eventleave",
     "sig": "function (_self, )\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse leaves an"
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "monthchange",
     "sig": "function (_self, date)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the displayed month changes"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "select",
     "sig": "function (_self, date)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a date is selected"
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.CheckBox": {
   "props": [
    {
     "name": "valueOff",
     "type": "String",
     "desc": "The value that should go into the generated input element's value when unchecked.",
     "memberOf": ""
    },
    {
     "name": "inputValue",
     "type": "String",
     "desc": "The value that should go into the generated input element's value when checked.",
     "memberOf": ""
    },
    {
     "name": "boxLabel",
     "type": "String",
     "desc": "The text that appears beside the checkbox",
     "memberOf": ""
    },
    {
     "name": "weight",
     "type": "String",
     "desc": "The text that appears beside the checkbox",
     "memberOf": "",
     "optvals": [
      "primary",
      "warning",
      "info",
      "danger",
      "success"
     ]
    },
    {
     "name": "checked",
     "type": "Boolean",
     "desc": "initnal the element",
     "memberOf": ""
    },
    {
     "name": "inline",
     "type": "Boolean",
     "desc": "inline the element (default false)",
     "memberOf": ""
    },
    {
     "name": "groupId",
     "type": "String",
     "desc": "the checkbox group id // normal just use for checkbox",
     "memberOf": ""
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "is it disabled",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "- the label associated",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "button | checkbox | email | file | hidden | image | number | password | radio | range | reset | search | submit | text",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "name of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "placeholder",
     "type": "string",
     "desc": "- placeholder to put in text.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "before",
     "type": "string",
     "desc": "- input group add on before",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "after",
     "type": "string",
     "desc": "- input group add on after",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "size",
     "type": "string",
     "desc": "- (lg|sm) or leave empty..",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "xs",
     "type": "Number",
     "desc": "colspan out of 12 for mobile-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "sm",
     "type": "Number",
     "desc": "colspan out of 12 for tablet-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "md",
     "type": "Number",
     "desc": "colspan out of 12 for computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "lg",
     "type": "Number",
     "desc": "colspan out of 12 for large computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "value",
     "type": "string",
     "desc": "default value of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "set the width of label (0-12)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "top",
      "left"
     ]
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "Specifies that the field should be read-only",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "autocomplete",
     "type": "String",
     "desc": "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "align",
     "type": "String",
     "desc": "Default left",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "left",
      "center",
      "right"
     ]
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field valid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "hasFeedback",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "invalidFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "check",
     "sig": "function (_self, checked)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the element is checked or unchecked."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "get",
     "sig": "(string the)",
     "type": "function",
     "desc": "fetch a CheckBox Group based on the group ID"
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name of the field"
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "inputEl",
     "sig": "()",
     "type": "function",
     "desc": "return the real input element."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "markValid",
     "sig": "()",
     "type": "function",
     "desc": "Mark this field as valid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "register",
     "sig": "(Roo.bootstrap.CheckBox the)",
     "type": "function",
     "desc": "register a CheckBox Group"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.bootstrap.Column": {
   "props": [
    {
     "name": "xs",
     "type": "Number",
     "desc": "colspan out of 12 for mobile-sized screens or 0 for hidden",
     "memberOf": ""
    },
    {
     "name": "sm",
     "type": "Number",
     "desc": "colspan out of 12 for tablet-sized screens or 0 for hidden",
     "memberOf": ""
    },
    {
     "name": "md",
     "type": "Number",
     "desc": "colspan out of 12 for computer-sized screens or 0 for hidden",
     "memberOf": ""
    },
    {
     "name": "lg",
     "type": "Number",
     "desc": "colspan out of 12 for large computer-sized screens or 0 for hidden",
     "memberOf": ""
    },
    {
     "name": "xsoff",
     "type": "Number",
     "desc": "colspan offset out of 12 for mobile-sized screens or 0 for hidden",
     "memberOf": ""
    },
    {
     "name": "smoff",
     "type": "Number",
     "desc": "colspan offset out of 12 for tablet-sized screens or 0 for hidden",
     "memberOf": ""
    },
    {
     "name": "mdoff",
     "type": "Number",
     "desc": "colspan offset out of 12 for computer-sized screens or 0 for hidden",
     "memberOf": ""
    },
    {
     "name": "lgoff",
     "type": "Number",
     "desc": "colspan offset out of 12 for large computer-sized screens or 0 for hidden",
     "memberOf": ""
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "hide the element",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "alert",
     "type": "String",
     "desc": "type alert (changes background / border...)",
     "memberOf": "",
     "optvals": [
      "success",
      "info",
      "warning",
      "danger"
     ]
    },
    {
     "name": "fa",
     "type": "String",
     "desc": "font awesome icon",
     "memberOf": "",
     "optvals": [
      "ban",
      "check",
      "..."
     ]
    },
    {
     "name": "fasize",
     "type": "Number",
     "desc": "font awsome size",
     "memberOf": "",
     "optvals": [
      "1",
      "2",
      "...."
     ]
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "glyphicon name",
     "memberOf": "",
     "optvals": [
      "info-sign",
      "check",
      "..."
     ]
    },
    {
     "name": "html",
     "type": "String",
     "desc": "content of column.",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.ComboBox": {
   "props": [
    {
     "name": "append",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "autoFocus",
     "type": "Boolean",
     "desc": "auto focus the first item, default true",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "tickable",
     "type": "Boolean",
     "desc": "ComboBox with tickable selections (true|false), default false",
     "memberOf": ""
    },
    {
     "name": "triggerList",
     "type": "Boolean",
     "desc": "trigger show the list or not (true|false) default true",
     "memberOf": ""
    },
    {
     "name": "showToggleBtn",
     "type": "Boolean",
     "desc": "show toggle button or not (true|false) default true",
     "memberOf": ""
    },
    {
     "name": "btnPosition",
     "type": "String",
     "desc": "set the position of the trigger button (left | right) default right",
     "memberOf": ""
    },
    {
     "name": "lazyRender",
     "type": "Boolean",
     "desc": "True to prevent the ComboBox from rendering until requested (should always be used when\nrendering into an Roo.Editor, defaults to false)",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "Boolean/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to:\n{tag: \"input\", type: \"text\", size: \"24\", autocomplete: \"off\"})",
     "memberOf": ""
    },
    {
     "name": "store",
     "type": "Roo.data.Store",
     "desc": "The data store to which this combo is bound (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "title",
     "type": "String",
     "desc": "If supplied, a header element is created containing this text and added into the top of\nthe dropdown list (defaults to undefined, with no header element)",
     "memberOf": ""
    },
    {
     "name": "tpl",
     "type": "String/Roo.Template",
     "desc": "The template to use to render the output",
     "memberOf": ""
    },
    {
     "name": "grow",
     "type": "Boolean",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "growMin",
     "type": "Number",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "growMax",
     "type": "Number",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "listWidth",
     "type": "Number",
     "desc": "The width in pixels of the dropdown list (defaults to the width of the ComboBox field)",
     "memberOf": ""
    },
    {
     "name": "displayField",
     "type": "String",
     "desc": "The underlying data field name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'text' if mode = 'local')",
     "memberOf": ""
    },
    {
     "name": "valueField",
     "type": "String",
     "desc": "The underlying data value name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'value' if mode = 'local'). \nNote: use of a valueField requires the user make a selection\nin order for a value to be mapped.",
     "memberOf": ""
    },
    {
     "name": "hiddenName",
     "type": "String",
     "desc": "If specified, a hidden form field with this name is dynamically generated to store the\nfield's data value (defaults to the underlying DOM element's name)",
     "memberOf": ""
    },
    {
     "name": "listClass",
     "type": "String",
     "desc": "CSS class to apply to the dropdown list element (defaults to '')",
     "memberOf": ""
    },
    {
     "name": "selectedClass",
     "type": "String",
     "desc": "CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')",
     "memberOf": ""
    },
    {
     "name": "shadow",
     "type": "Boolean/String",
     "desc": "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right",
     "memberOf": ""
    },
    {
     "name": "listAlign",
     "type": "String",
     "desc": "A valid anchor position value. See {@link Roo.Element#alignTo} for details on supported\nanchor positions (defaults to 'tl-bl')",
     "memberOf": ""
    },
    {
     "name": "maxHeight",
     "type": "Number",
     "desc": "The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)",
     "memberOf": ""
    },
    {
     "name": "triggerAction",
     "type": "String",
     "desc": "The action to execute when the trigger field is activated.  Use 'all' to run the\nquery specified by the allQuery config option (defaults to 'query')",
     "memberOf": ""
    },
    {
     "name": "minChars",
     "type": "Number",
     "desc": "The minimum number of characters the user must type before autocomplete and typeahead activate\n(defaults to 4, does not apply if editable = false)",
     "memberOf": ""
    },
    {
     "name": "typeAhead",
     "type": "Boolean",
     "desc": "True to populate and autoselect the remainder of the text being typed after a configurable\ndelay (typeAheadDelay) if it matches a known value (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "queryDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds to delay between the start of typing and sending the\nquery to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local')",
     "memberOf": ""
    },
    {
     "name": "pageSize",
     "type": "Number",
     "desc": "If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the\nfilter queries will execute with page start and limit parameters.  Only applies when mode = 'remote' (defaults to 0)",
     "memberOf": ""
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to select any existing text in the field immediately on focus.  Only applies\nwhen editable = true (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "queryParam",
     "type": "String",
     "desc": "Name of the query as it will be passed on the querystring (defaults to 'query')",
     "memberOf": ""
    },
    {
     "name": "loadingText",
     "type": "String",
     "desc": "The text to display in the dropdown list while data is loading.  Only applies\nwhen mode = 'remote' (defaults to 'Loading...')",
     "memberOf": ""
    },
    {
     "name": "resizable",
     "type": "Boolean",
     "desc": "True to add a resize handle to the bottom of the dropdown list (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "handleHeight",
     "type": "Number",
     "desc": "The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8)",
     "memberOf": ""
    },
    {
     "name": "editable",
     "type": "Boolean",
     "desc": "False to prevent the user from typing text directly into the field, just like a\ntraditional select (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "allQuery",
     "type": "String",
     "desc": "The text query to send to the server to return all records for the list with no filtering (defaults to '')",
     "memberOf": ""
    },
    {
     "name": "mode",
     "type": "String",
     "desc": "Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)",
     "memberOf": ""
    },
    {
     "name": "minListWidth",
     "type": "Number",
     "desc": "The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if\nlistWidth has a higher value)",
     "memberOf": ""
    },
    {
     "name": "forceSelection",
     "type": "Boolean",
     "desc": "True to restrict the selected value to one of the values in the list, false to\nallow the user to set arbitrary text into the field (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "typeAheadDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds to wait until the typeahead text is displayed\nif typeAhead = true (defaults to 250)",
     "memberOf": ""
    },
    {
     "name": "valueNotFoundText",
     "type": "String",
     "desc": "When using a name/value combo, if the value passed to setValue is not found in\nthe store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "blockFocus",
     "type": "Boolean",
     "desc": "Prevents all focus calls, so it can work with things like HTML edtor bar",
     "memberOf": ""
    },
    {
     "name": "disableClear",
     "type": "Boolean",
     "desc": "Disable showing of clear button.",
     "memberOf": ""
    },
    {
     "name": "alwaysQuery",
     "type": "Boolean",
     "desc": "Disable caching of results, and always send query",
     "memberOf": ""
    },
    {
     "name": "multiple",
     "type": "Boolean",
     "desc": "ComboBobArray, default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": ""
    },
    {
     "name": "validClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field valid (defaults to \"x-form-invalid\")",
     "memberOf": ""
    },
    {
     "name": "triggerClass",
     "type": "String",
     "desc": "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' by default and triggerClass will be <b>appended</b> if specified.",
     "memberOf": "Roo.bootstrap.TriggerField"
    },
    {
     "name": "caret",
     "type": "String",
     "desc": "a fontawesome for the trigger icon see http://fortawesome.github.io/Font-Awesome/icons/",
     "memberOf": "Roo.bootstrap.TriggerField",
     "optvals": [
      "search",
      "calendar"
     ]
    },
    {
     "name": "hideTrigger",
     "type": "Boolean",
     "desc": "True to hide the trigger element and display only the base text field (defaults to false)",
     "memberOf": "Roo.bootstrap.TriggerField"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "is it disabled",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "- the label associated",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "button | checkbox | email | file | hidden | image | number | password | radio | range | reset | search | submit | text",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "name of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "placeholder",
     "type": "string",
     "desc": "- placeholder to put in text.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "before",
     "type": "string",
     "desc": "- input group add on before",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "after",
     "type": "string",
     "desc": "- input group add on after",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "size",
     "type": "string",
     "desc": "- (lg|sm) or leave empty..",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "xs",
     "type": "Number",
     "desc": "colspan out of 12 for mobile-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "sm",
     "type": "Number",
     "desc": "colspan out of 12 for tablet-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "md",
     "type": "Number",
     "desc": "colspan out of 12 for computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "lg",
     "type": "Number",
     "desc": "colspan out of 12 for large computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "value",
     "type": "string",
     "desc": "default value of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "set the width of label (0-12)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "top",
      "left"
     ]
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "Specifies that the field should be read-only",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "autocomplete",
     "type": "String",
     "desc": "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "align",
     "type": "String",
     "desc": "Default left",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "left",
      "center",
      "right"
     ]
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "hasFeedback",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "invalidFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "add",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the 'add' icon is pressed (add a listener to enable add button)"
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforequery",
     "sig": "function (combo, query, forceAll, cancel, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires before all queries are processed. Return false to cancel the query or set cancel to true.\nThe event object passed has these properties:"
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeselect",
     "sig": "function (combo, record, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a list item is selected. Return false to cancel the selection."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "collapse",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the dropdown list is collapsed"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "edit",
     "sig": "function (combo, record)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the 'edit' icon is pressed (add a listener to enable add button)"
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "expand",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the dropdown list is expanded"
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "remove",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the remove value from the combobox array"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "select",
     "sig": "function (combo, record, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a list item is selected"
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "clearValue",
     "sig": "()",
     "type": "function",
     "desc": "Clears any text/value currently set in the field"
    },
    {
     "name": "collapse",
     "sig": "()",
     "type": "function",
     "desc": "Hides the dropdown list if it is currently expanded. Fires the 'collapse' event on completion."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "doQuery",
     "sig": "(String query, Boolean forceAll)",
     "type": "function",
     "desc": "Execute a query to filter the dropdown list.  Fires the beforequery event prior to performing the\nquery allowing the query action to be canceled if needed."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "expand",
     "sig": "()",
     "type": "function",
     "desc": "Expands the dropdown list if it is currently hidden. Fires the 'expand' event on completion."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name of the field"
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the currently selected field value or empty string if no value is set."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "inputEl",
     "sig": "()",
     "type": "function",
     "desc": "return the real input element."
    },
    {
     "name": "isExpanded",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the dropdown list is expanded, else false."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "markValid",
     "sig": "()",
     "type": "function",
     "desc": "Mark this field as valid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onTriggerClick",
     "sig": "(EventObject e)",
     "type": "function",
     "desc": "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "select",
     "sig": "(Number index, Boolean scrollIntoView)",
     "type": "function",
     "desc": "Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue."
    },
    {
     "name": "selectByValue",
     "sig": "(String value, Boolean scrollIntoView)",
     "type": "function",
     "desc": "Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setEditable",
     "sig": "(Boolean value)",
     "type": "function",
     "desc": "Allow or prevent the user from directly editing the field text.  If false is passed,\nthe user will only be able to select from the items defined in the dropdown list.  This method\nis the runtime equivalent of setting the 'editable' config option at config time."
    },
    {
     "name": "setFromData",
     "sig": "(Object value)",
     "type": "function",
     "desc": "Sets the value of the field based on a object which is related to the record format for the store."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setValue",
     "sig": "(String value)",
     "type": "function",
     "desc": "Sets the specified value into the field.  If the value finds a match, the corresponding record text\nwill be displayed in the field.  If the value does not match the data value of an existing item,\nand the valueNotFoundText config option is defined, it will be displayed as the default field text.\nOtherwise the field will be blank (although the value will still be set)."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.bootstrap.ComboBox2": {
   "props": [
    {
     "name": "append",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "autoFocus",
     "type": "Boolean",
     "desc": "auto focus the first item, default true",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "tickable",
     "type": "Boolean",
     "desc": "ComboBox with tickable selections (true|false), default false",
     "memberOf": ""
    },
    {
     "name": "btnPosition",
     "type": "String",
     "desc": "set the position of the trigger button (left | right) default right",
     "memberOf": ""
    },
    {
     "name": "lazyRender",
     "type": "Boolean",
     "desc": "True to prevent the ComboBox from rendering until requested (should always be used when\nrendering into an Roo.Editor, defaults to false)",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "Boolean/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to:\n{tag: \"input\", type: \"text\", size: \"24\", autocomplete: \"off\"})",
     "memberOf": ""
    },
    {
     "name": "store",
     "type": "Roo.data.Store",
     "desc": "The data store to which this combo is bound (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "title",
     "type": "String",
     "desc": "If supplied, a header element is created containing this text and added into the top of\nthe dropdown list (defaults to undefined, with no header element)",
     "memberOf": ""
    },
    {
     "name": "tpl",
     "type": "String/Roo.Template",
     "desc": "The template to use to render the output",
     "memberOf": ""
    },
    {
     "name": "grow",
     "type": "Boolean",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "growMin",
     "type": "Number",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "growMax",
     "type": "Number",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "listWidth",
     "type": "Number",
     "desc": "The width in pixels of the dropdown list (defaults to the width of the ComboBox field)",
     "memberOf": ""
    },
    {
     "name": "displayField",
     "type": "String",
     "desc": "The underlying data field name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'text' if mode = 'local')",
     "memberOf": ""
    },
    {
     "name": "valueField",
     "type": "String",
     "desc": "The underlying data value name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'value' if mode = 'local'). \nNote: use of a valueField requires the user make a selection\nin order for a value to be mapped.",
     "memberOf": ""
    },
    {
     "name": "hiddenName",
     "type": "String",
     "desc": "If specified, a hidden form field with this name is dynamically generated to store the\nfield's data value (defaults to the underlying DOM element's name)",
     "memberOf": ""
    },
    {
     "name": "listClass",
     "type": "String",
     "desc": "CSS class to apply to the dropdown list element (defaults to '')",
     "memberOf": ""
    },
    {
     "name": "selectedClass",
     "type": "String",
     "desc": "CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')",
     "memberOf": ""
    },
    {
     "name": "shadow",
     "type": "Boolean/String",
     "desc": "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right",
     "memberOf": ""
    },
    {
     "name": "listAlign",
     "type": "String",
     "desc": "A valid anchor position value. See {@link Roo.Element#alignTo} for details on supported\nanchor positions (defaults to 'tl-bl')",
     "memberOf": ""
    },
    {
     "name": "maxHeight",
     "type": "Number",
     "desc": "The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)",
     "memberOf": ""
    },
    {
     "name": "triggerAction",
     "type": "String",
     "desc": "The action to execute when the trigger field is activated.  Use 'all' to run the\nquery specified by the allQuery config option (defaults to 'query')",
     "memberOf": ""
    },
    {
     "name": "minChars",
     "type": "Number",
     "desc": "The minimum number of characters the user must type before autocomplete and typeahead activate\n(defaults to 4, does not apply if editable = false)",
     "memberOf": ""
    },
    {
     "name": "typeAhead",
     "type": "Boolean",
     "desc": "True to populate and autoselect the remainder of the text being typed after a configurable\ndelay (typeAheadDelay) if it matches a known value (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "queryDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds to delay between the start of typing and sending the\nquery to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local')",
     "memberOf": ""
    },
    {
     "name": "pageSize",
     "type": "Number",
     "desc": "If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the\nfilter queries will execute with page start and limit parameters.  Only applies when mode = 'remote' (defaults to 0)",
     "memberOf": ""
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to select any existing text in the field immediately on focus.  Only applies\nwhen editable = true (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "queryParam",
     "type": "String",
     "desc": "Name of the query as it will be passed on the querystring (defaults to 'query')",
     "memberOf": ""
    },
    {
     "name": "loadingText",
     "type": "String",
     "desc": "The text to display in the dropdown list while data is loading.  Only applies\nwhen mode = 'remote' (defaults to 'Loading...')",
     "memberOf": ""
    },
    {
     "name": "resizable",
     "type": "Boolean",
     "desc": "True to add a resize handle to the bottom of the dropdown list (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "handleHeight",
     "type": "Number",
     "desc": "The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8)",
     "memberOf": ""
    },
    {
     "name": "editable",
     "type": "Boolean",
     "desc": "False to prevent the user from typing text directly into the field, just like a\ntraditional select (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "allQuery",
     "type": "String",
     "desc": "The text query to send to the server to return all records for the list with no filtering (defaults to '')",
     "memberOf": ""
    },
    {
     "name": "mode",
     "type": "String",
     "desc": "Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)",
     "memberOf": ""
    },
    {
     "name": "minListWidth",
     "type": "Number",
     "desc": "The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if\nlistWidth has a higher value)",
     "memberOf": ""
    },
    {
     "name": "forceSelection",
     "type": "Boolean",
     "desc": "True to restrict the selected value to one of the values in the list, false to\nallow the user to set arbitrary text into the field (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "typeAheadDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds to wait until the typeahead text is displayed\nif typeAhead = true (defaults to 250)",
     "memberOf": ""
    },
    {
     "name": "valueNotFoundText",
     "type": "String",
     "desc": "When using a name/value combo, if the value passed to setValue is not found in\nthe store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "blockFocus",
     "type": "Boolean",
     "desc": "Prevents all focus calls, so it can work with things like HTML edtor bar",
     "memberOf": ""
    },
    {
     "name": "disableClear",
     "type": "Boolean",
     "desc": "Disable showing of clear button.",
     "memberOf": ""
    },
    {
     "name": "alwaysQuery",
     "type": "Boolean",
     "desc": "Disable caching of results, and always send query",
     "memberOf": ""
    },
    {
     "name": "multiple",
     "type": "Boolean",
     "desc": "ComboBobArray, default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "triggerClass",
     "type": "String",
     "desc": "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' by default and triggerClass will be <b>appended</b> if specified.",
     "memberOf": "Roo.bootstrap.TriggerField"
    },
    {
     "name": "caret",
     "type": "String",
     "desc": "a fontawesome for the trigger icon see http://fortawesome.github.io/Font-Awesome/icons/",
     "memberOf": "Roo.bootstrap.TriggerField",
     "optvals": [
      "search",
      "calendar"
     ]
    },
    {
     "name": "hideTrigger",
     "type": "Boolean",
     "desc": "True to hide the trigger element and display only the base text field (defaults to false)",
     "memberOf": "Roo.bootstrap.TriggerField"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "is it disabled",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "- the label associated",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "button | checkbox | email | file | hidden | image | number | password | radio | range | reset | search | submit | text",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "name of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "placeholder",
     "type": "string",
     "desc": "- placeholder to put in text.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "before",
     "type": "string",
     "desc": "- input group add on before",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "after",
     "type": "string",
     "desc": "- input group add on after",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "size",
     "type": "string",
     "desc": "- (lg|sm) or leave empty..",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "xs",
     "type": "Number",
     "desc": "colspan out of 12 for mobile-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "sm",
     "type": "Number",
     "desc": "colspan out of 12 for tablet-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "md",
     "type": "Number",
     "desc": "colspan out of 12 for computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "lg",
     "type": "Number",
     "desc": "colspan out of 12 for large computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "value",
     "type": "string",
     "desc": "default value of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "set the width of label (0-12)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "top",
      "left"
     ]
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "Specifies that the field should be read-only",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "autocomplete",
     "type": "String",
     "desc": "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "align",
     "type": "String",
     "desc": "Default left",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "left",
      "center",
      "right"
     ]
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field valid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "hasFeedback",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "invalidFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "add",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the 'add' icon is pressed (add a listener to enable add button)"
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforequery",
     "sig": "function (combo, query, forceAll, cancel, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires before all queries are processed. Return false to cancel the query or set cancel to true.\nThe event object passed has these properties:"
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeselect",
     "sig": "function (combo, record, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a list item is selected. Return false to cancel the selection."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "collapse",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the dropdown list is collapsed"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "edit",
     "sig": "function (combo, record)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the 'edit' icon is pressed (add a listener to enable add button)"
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "expand",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the dropdown list is expanded"
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "remove",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the remove value from the combobox array"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "select",
     "sig": "function (combo, record, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a list item is selected"
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "clearValue",
     "sig": "()",
     "type": "function",
     "desc": "Clears any text/value currently set in the field"
    },
    {
     "name": "collapse",
     "sig": "()",
     "type": "function",
     "desc": "Hides the dropdown list if it is currently expanded. Fires the 'collapse' event on completion."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "doQuery",
     "sig": "(String query, Boolean forceAll)",
     "type": "function",
     "desc": "Execute a query to filter the dropdown list.  Fires the beforequery event prior to performing the\nquery allowing the query action to be canceled if needed."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "expand",
     "sig": "()",
     "type": "function",
     "desc": "Expands the dropdown list if it is currently hidden. Fires the 'expand' event on completion."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name of the field"
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the currently selected field value or empty string if no value is set."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "inputEl",
     "sig": "()",
     "type": "function",
     "desc": "return the real input element."
    },
    {
     "name": "isExpanded",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the dropdown list is expanded, else false."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "markValid",
     "sig": "()",
     "type": "function",
     "desc": "Mark this field as valid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onTriggerClick",
     "sig": "(EventObject e)",
     "type": "function",
     "desc": "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "select",
     "sig": "(Number index, Boolean scrollIntoView)",
     "type": "function",
     "desc": "Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue."
    },
    {
     "name": "selectByValue",
     "sig": "(String value, Boolean scrollIntoView)",
     "type": "function",
     "desc": "Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setEditable",
     "sig": "(Boolean value)",
     "type": "function",
     "desc": "Allow or prevent the user from directly editing the field text.  If false is passed,\nthe user will only be able to select from the items defined in the dropdown list.  This method\nis the runtime equivalent of setting the 'editable' config option at config time."
    },
    {
     "name": "setFromData",
     "sig": "(Object value)",
     "type": "function",
     "desc": "Sets the value of the field based on a object which is related to the record format for the store."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setValue",
     "sig": "(String value)",
     "type": "function",
     "desc": "Sets the specified value into the field.  If the value finds a match, the corresponding record text\nwill be displayed in the field.  If the value does not match the data value of an existing item,\nand the valueNotFoundText config option is defined, it will be displayed as the default field text.\nOtherwise the field will be blank (although the value will still be set)."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.bootstrap.ComboBox_old": {
   "props": [
    {
     "name": "append",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "autoFocus",
     "type": "Boolean",
     "desc": "auto focus the first item, default true",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "lazyRender",
     "type": "Boolean",
     "desc": "True to prevent the ComboBox from rendering until requested (should always be used when\nrendering into an Roo.Editor, defaults to false)",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "Boolean/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to:\n{tag: \"input\", type: \"text\", size: \"24\", autocomplete: \"off\"})",
     "memberOf": ""
    },
    {
     "name": "store",
     "type": "Roo.data.Store",
     "desc": "The data store to which this combo is bound (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "title",
     "type": "String",
     "desc": "If supplied, a header element is created containing this text and added into the top of\nthe dropdown list (defaults to undefined, with no header element)",
     "memberOf": ""
    },
    {
     "name": "tpl",
     "type": "String/Roo.Template",
     "desc": "The template to use to render the output",
     "memberOf": ""
    },
    {
     "name": "grow",
     "type": "Boolean",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "growMin",
     "type": "Number",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "growMax",
     "type": "Number",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "listWidth",
     "type": "Number",
     "desc": "The width in pixels of the dropdown list (defaults to the width of the ComboBox field)",
     "memberOf": ""
    },
    {
     "name": "displayField",
     "type": "String",
     "desc": "The underlying data field name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'text' if mode = 'local')",
     "memberOf": ""
    },
    {
     "name": "valueField",
     "type": "String",
     "desc": "The underlying data value name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'value' if mode = 'local'). \nNote: use of a valueField requires the user make a selection\nin order for a value to be mapped.",
     "memberOf": ""
    },
    {
     "name": "hiddenName",
     "type": "String",
     "desc": "If specified, a hidden form field with this name is dynamically generated to store the\nfield's data value (defaults to the underlying DOM element's name)",
     "memberOf": ""
    },
    {
     "name": "listClass",
     "type": "String",
     "desc": "CSS class to apply to the dropdown list element (defaults to '')",
     "memberOf": ""
    },
    {
     "name": "selectedClass",
     "type": "String",
     "desc": "CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')",
     "memberOf": ""
    },
    {
     "name": "shadow",
     "type": "Boolean/String",
     "desc": "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right",
     "memberOf": ""
    },
    {
     "name": "listAlign",
     "type": "String",
     "desc": "A valid anchor position value. See {@link Roo.Element#alignTo} for details on supported\nanchor positions (defaults to 'tl-bl')",
     "memberOf": ""
    },
    {
     "name": "maxHeight",
     "type": "Number",
     "desc": "The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)",
     "memberOf": ""
    },
    {
     "name": "triggerAction",
     "type": "String",
     "desc": "The action to execute when the trigger field is activated.  Use 'all' to run the\nquery specified by the allQuery config option (defaults to 'query')",
     "memberOf": ""
    },
    {
     "name": "minChars",
     "type": "Number",
     "desc": "The minimum number of characters the user must type before autocomplete and typeahead activate\n(defaults to 4, does not apply if editable = false)",
     "memberOf": ""
    },
    {
     "name": "typeAhead",
     "type": "Boolean",
     "desc": "True to populate and autoselect the remainder of the text being typed after a configurable\ndelay (typeAheadDelay) if it matches a known value (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "queryDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds to delay between the start of typing and sending the\nquery to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local')",
     "memberOf": ""
    },
    {
     "name": "pageSize",
     "type": "Number",
     "desc": "If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the\nfilter queries will execute with page start and limit parameters.  Only applies when mode = 'remote' (defaults to 0)",
     "memberOf": ""
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to select any existing text in the field immediately on focus.  Only applies\nwhen editable = true (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "queryParam",
     "type": "String",
     "desc": "Name of the query as it will be passed on the querystring (defaults to 'query')",
     "memberOf": ""
    },
    {
     "name": "loadingText",
     "type": "String",
     "desc": "The text to display in the dropdown list while data is loading.  Only applies\nwhen mode = 'remote' (defaults to 'Loading...')",
     "memberOf": ""
    },
    {
     "name": "resizable",
     "type": "Boolean",
     "desc": "True to add a resize handle to the bottom of the dropdown list (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "handleHeight",
     "type": "Number",
     "desc": "The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8)",
     "memberOf": ""
    },
    {
     "name": "editable",
     "type": "Boolean",
     "desc": "False to prevent the user from typing text directly into the field, just like a\ntraditional select (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "allQuery",
     "type": "String",
     "desc": "The text query to send to the server to return all records for the list with no filtering (defaults to '')",
     "memberOf": ""
    },
    {
     "name": "mode",
     "type": "String",
     "desc": "Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)",
     "memberOf": ""
    },
    {
     "name": "minListWidth",
     "type": "Number",
     "desc": "The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if\nlistWidth has a higher value)",
     "memberOf": ""
    },
    {
     "name": "forceSelection",
     "type": "Boolean",
     "desc": "True to restrict the selected value to one of the values in the list, false to\nallow the user to set arbitrary text into the field (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "typeAheadDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds to wait until the typeahead text is displayed\nif typeAhead = true (defaults to 250)",
     "memberOf": ""
    },
    {
     "name": "valueNotFoundText",
     "type": "String",
     "desc": "When using a name/value combo, if the value passed to setValue is not found in\nthe store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "blockFocus",
     "type": "Boolean",
     "desc": "Prevents all focus calls, so it can work with things like HTML edtor bar",
     "memberOf": ""
    },
    {
     "name": "disableClear",
     "type": "Boolean",
     "desc": "Disable showing of clear button.",
     "memberOf": ""
    },
    {
     "name": "alwaysQuery",
     "type": "Boolean",
     "desc": "Disable caching of results, and always send query",
     "memberOf": ""
    },
    {
     "name": "multiple",
     "type": "Boolean",
     "desc": "ComboBobArray, default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "triggerClass",
     "type": "String",
     "desc": "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' by default and triggerClass will be <b>appended</b> if specified.",
     "memberOf": "Roo.bootstrap.TriggerField"
    },
    {
     "name": "caret",
     "type": "String",
     "desc": "a fontawesome for the trigger icon see http://fortawesome.github.io/Font-Awesome/icons/",
     "memberOf": "Roo.bootstrap.TriggerField",
     "optvals": [
      "search",
      "calendar"
     ]
    },
    {
     "name": "hideTrigger",
     "type": "Boolean",
     "desc": "True to hide the trigger element and display only the base text field (defaults to false)",
     "memberOf": "Roo.bootstrap.TriggerField"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "is it disabled",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "- the label associated",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "button | checkbox | email | file | hidden | image | number | password | radio | range | reset | search | submit | text",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "name of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "placeholder",
     "type": "string",
     "desc": "- placeholder to put in text.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "before",
     "type": "string",
     "desc": "- input group add on before",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "after",
     "type": "string",
     "desc": "- input group add on after",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "size",
     "type": "string",
     "desc": "- (lg|sm) or leave empty..",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "xs",
     "type": "Number",
     "desc": "colspan out of 12 for mobile-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "sm",
     "type": "Number",
     "desc": "colspan out of 12 for tablet-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "md",
     "type": "Number",
     "desc": "colspan out of 12 for computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "lg",
     "type": "Number",
     "desc": "colspan out of 12 for large computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "value",
     "type": "string",
     "desc": "default value of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "set the width of label (0-12)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "top",
      "left"
     ]
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "Specifies that the field should be read-only",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "autocomplete",
     "type": "String",
     "desc": "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "align",
     "type": "String",
     "desc": "Default left",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "left",
      "center",
      "right"
     ]
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field valid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "hasFeedback",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "invalidFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "add",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the 'add' icon is pressed (add a listener to enable add button)"
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforequery",
     "sig": "function (combo, query, forceAll, cancel, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires before all queries are processed. Return false to cancel the query or set cancel to true.\nThe event object passed has these properties:"
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeselect",
     "sig": "function (combo, record, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a list item is selected. Return false to cancel the selection."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "collapse",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the dropdown list is collapsed"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "edit",
     "sig": "function (combo, record)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the 'edit' icon is pressed (add a listener to enable add button)"
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "expand",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the dropdown list is expanded"
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "remove",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the remove value from the combobox array"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "select",
     "sig": "function (combo, record, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a list item is selected"
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "clearValue",
     "sig": "()",
     "type": "function",
     "desc": "Clears any text/value currently set in the field"
    },
    {
     "name": "collapse",
     "sig": "()",
     "type": "function",
     "desc": "Hides the dropdown list if it is currently expanded. Fires the 'collapse' event on completion."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "doQuery",
     "sig": "(String query, Boolean forceAll)",
     "type": "function",
     "desc": "Execute a query to filter the dropdown list.  Fires the beforequery event prior to performing the\nquery allowing the query action to be canceled if needed."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "expand",
     "sig": "()",
     "type": "function",
     "desc": "Expands the dropdown list if it is currently hidden. Fires the 'expand' event on completion."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name of the field"
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the currently selected field value or empty string if no value is set."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "inputEl",
     "sig": "()",
     "type": "function",
     "desc": "return the real input element."
    },
    {
     "name": "isExpanded",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the dropdown list is expanded, else false."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "markValid",
     "sig": "()",
     "type": "function",
     "desc": "Mark this field as valid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onTriggerClick",
     "sig": "(EventObject e)",
     "type": "function",
     "desc": "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "select",
     "sig": "(Number index, Boolean scrollIntoView)",
     "type": "function",
     "desc": "Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue."
    },
    {
     "name": "selectByValue",
     "sig": "(String value, Boolean scrollIntoView)",
     "type": "function",
     "desc": "Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setEditable",
     "sig": "(Boolean value)",
     "type": "function",
     "desc": "Allow or prevent the user from directly editing the field text.  If false is passed,\nthe user will only be able to select from the items defined in the dropdown list.  This method\nis the runtime equivalent of setting the 'editable' config option at config time."
    },
    {
     "name": "setFromData",
     "sig": "(Object value)",
     "type": "function",
     "desc": "Sets the value of the field based on a object which is related to the record format for the store."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setValue",
     "sig": "(String value)",
     "type": "function",
     "desc": "Sets the specified value into the field.  If the value finds a match, the corresponding record text\nwill be displayed in the field.  If the value does not match the data value of an existing item,\nand the valueNotFoundText config option is defined, it will be displayed as the default field text.\nOtherwise the field will be blank (although the value will still be set)."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.bootstrap.Component": {
   "props": [
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": ""
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": ""
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": ""
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": ""
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": ""
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": ""
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": ""
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": ""
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.Container": {
   "props": [
    {
     "name": "jumbotron",
     "type": "Boolean",
     "desc": "is it a jumbotron element",
     "memberOf": ""
    },
    {
     "name": "html",
     "type": "String",
     "desc": "content of element",
     "memberOf": ""
    },
    {
     "name": "well",
     "type": "String",
     "desc": "a well, large, small or medium.",
     "memberOf": "",
     "optvals": [
      "lg",
      "sm",
      "md"
     ]
    },
    {
     "name": "panel",
     "type": "String",
     "desc": "render as a panel.",
     "memberOf": "",
     "optvals": [
      "primary",
      "success",
      "info",
      "warning",
      "danger"
     ]
    },
    {
     "name": "header",
     "type": "String",
     "desc": "content of header (for panel)",
     "memberOf": ""
    },
    {
     "name": "footer",
     "type": "String",
     "desc": "content of footer (for panel)",
     "memberOf": ""
    },
    {
     "name": "sticky",
     "type": "String",
     "desc": "block to use as footer or body- needs css-bootstrap/sticky-footer.css",
     "memberOf": "",
     "optvals": [
      "footer",
      "wrap",
      "push"
     ]
    },
    {
     "name": "tag",
     "type": "String",
     "desc": "type of HTML tag.",
     "memberOf": "",
     "optvals": [
      "header",
      "aside",
      "section"
     ]
    },
    {
     "name": "alert",
     "type": "String",
     "desc": "type alert (changes background / border...)",
     "memberOf": "",
     "optvals": [
      "success",
      "info",
      "warning",
      "danger"
     ]
    },
    {
     "name": "fa",
     "type": "String",
     "desc": "font awesome icon",
     "memberOf": "",
     "optvals": [
      "ban",
      "check",
      "..."
     ]
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "glyphicon name",
     "memberOf": "",
     "optvals": [
      "info-sign",
      "check",
      "..."
     ]
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "hide the element",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.DateField": {
   "props": [
    {
     "name": "weekStart",
     "type": "Number",
     "desc": "default 0",
     "memberOf": ""
    },
    {
     "name": "viewMode",
     "type": "String",
     "desc": "default empty, (months|years)",
     "memberOf": ""
    },
    {
     "name": "minViewMode",
     "type": "String",
     "desc": "default empty, (months|years)",
     "memberOf": ""
    },
    {
     "name": "startDate",
     "type": "Number",
     "desc": "default -Infinity",
     "memberOf": ""
    },
    {
     "name": "endDate",
     "type": "Number",
     "desc": "default Infinity",
     "memberOf": ""
    },
    {
     "name": "todayHighlight",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": ""
    },
    {
     "name": "todayBtn",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": ""
    },
    {
     "name": "calendarWeeks",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": ""
    },
    {
     "name": "daysOfWeekDisabled",
     "type": "Object",
     "desc": "default empty",
     "memberOf": ""
    },
    {
     "name": "singleMode",
     "type": "Boolean",
     "desc": "default false (true | false)",
     "memberOf": ""
    },
    {
     "name": "keyboardNavigation",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": ""
    },
    {
     "name": "language",
     "type": "String",
     "desc": "default en",
     "memberOf": ""
    },
    {
     "name": "format",
     "type": "String",
     "desc": "The default date format string which can be overriden for localization support.  The format must be\nvalid according to {@link Date#parseDate} (defaults to 'm/d/y').",
     "memberOf": ""
    },
    {
     "name": "altFormats",
     "type": "String",
     "desc": "Multiple date formats separated by \"|\" to try when parsing a user input value and it doesn't match the defined\nformat (defaults to 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d').",
     "memberOf": ""
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "is it disabled",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "- the label associated",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "button | checkbox | email | file | hidden | image | number | password | radio | range | reset | search | submit | text",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "name of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "placeholder",
     "type": "string",
     "desc": "- placeholder to put in text.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "before",
     "type": "string",
     "desc": "- input group add on before",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "after",
     "type": "string",
     "desc": "- input group add on after",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "size",
     "type": "string",
     "desc": "- (lg|sm) or leave empty..",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "xs",
     "type": "Number",
     "desc": "colspan out of 12 for mobile-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "sm",
     "type": "Number",
     "desc": "colspan out of 12 for tablet-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "md",
     "type": "Number",
     "desc": "colspan out of 12 for computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "lg",
     "type": "Number",
     "desc": "colspan out of 12 for large computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "value",
     "type": "string",
     "desc": "default value of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "set the width of label (0-12)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "top",
      "left"
     ]
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "Specifies that the field should be read-only",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "autocomplete",
     "type": "String",
     "desc": "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "align",
     "type": "String",
     "desc": "Default left",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "left",
      "center",
      "right"
     ]
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field valid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "hasFeedback",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "invalidFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "select",
     "sig": "function (_self, date)\n{\n\n}",
     "type": "function",
     "desc": "Fires when select a date."
    },
    {
     "name": "show",
     "sig": "function (_self, date)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field show."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name of the field"
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "inputEl",
     "sig": "()",
     "type": "function",
     "desc": "return the real input element."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "markValid",
     "sig": "()",
     "type": "function",
     "desc": "Mark this field as valid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.bootstrap.Element": {
   "props": [
    {
     "name": "html",
     "type": "String",
     "desc": "contents of the element",
     "memberOf": ""
    },
    {
     "name": "tag",
     "type": "String",
     "desc": "tag of the element",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "class of the element",
     "memberOf": ""
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.Form": {
   "props": [
    {
     "name": "method",
     "type": "String",
     "desc": "GET | POST (default POST)",
     "memberOf": ""
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "top | left (default top)",
     "memberOf": ""
    },
    {
     "name": "align",
     "type": "String",
     "desc": "left  | right - for navbars",
     "memberOf": ""
    },
    {
     "name": "loadMask",
     "type": "Boolean",
     "desc": "load mask when submit (default true)",
     "memberOf": ""
    },
    {
     "name": "url",
     "type": "String",
     "desc": "The URL to use for form actions if one isn't supplied in the action options.",
     "memberOf": ""
    },
    {
     "name": "fileUpload",
     "type": "Boolean",
     "desc": "Set to true if this form is a file upload.",
     "memberOf": ""
    },
    {
     "name": "baseParams",
     "type": "Object",
     "desc": "Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.",
     "memberOf": ""
    },
    {
     "name": "timeout",
     "type": "Number",
     "desc": "Timeout for form actions in seconds (default is 30 seconds).",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "actioncomplete",
     "sig": "function (_self, action)\n{\n\n}",
     "type": "function",
     "desc": "Fires when an action is completed."
    },
    {
     "name": "actionfailed",
     "sig": "function (_self, action)\n{\n\n}",
     "type": "function",
     "desc": "Fires when an action fails."
    },
    {
     "name": "beforeaction",
     "sig": "function (_self, action)\n{\n\n}",
     "type": "function",
     "desc": "Fires before any action is performed. Return false to cancel the action."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "clientvalidation",
     "sig": "function (_self, valid)\n{\n\n}",
     "type": "function",
     "desc": "If the monitorValid config option is true, this event fires repetitively to notify of valid state"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clears all invalid messages in this form."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "doAction",
     "sig": "(String actionName, Object options)",
     "type": "function",
     "desc": "Performs a predefined action (submit or load) or custom actions you define on this form."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "findField",
     "sig": "(String id)",
     "type": "function",
     "desc": "Find a Roo.form.Field in this form by id, dataIndex, name or hiddenName"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getFieldValues",
     "sig": "()",
     "type": "function",
     "desc": "Returns the fields in this form as an object with key/value pairs. \nThis differs from getValues as it calls getValue on each child item, rather than using dom data."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getValues",
     "sig": "(Boolean asString)",
     "type": "function",
     "desc": "Returns the fields in this form as an object with key/value pairs. If multiple fields exist with the same name\nthey are returned as an array."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if any fields in this form have changed since their original load."
    },
    {
     "name": "isValid",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if client-side validation on the form is successful."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(Array/Object errors)",
     "type": "function",
     "desc": "Mark fields in this form invalid in bulk."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets this form."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setValues",
     "sig": "(Array/Object values)",
     "type": "function",
     "desc": "Set values for fields in this form in bulk."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.Graph": {
   "props": [
    {
     "name": "graphtype",
     "type": "String",
     "desc": "bar | vbar | pie",
     "memberOf": ""
    },
    {
     "name": "g_x",
     "type": "number",
     "desc": "coodinator | centre x (pie)",
     "memberOf": ""
    },
    {
     "name": "g_y",
     "type": "number",
     "desc": "coodinator | centre y (pie)",
     "memberOf": ""
    },
    {
     "name": "g_r",
     "type": "number",
     "desc": "radius (pie)",
     "memberOf": ""
    },
    {
     "name": "g_height",
     "type": "number",
     "desc": "height of the chart (respected by all elements in the set)",
     "memberOf": ""
    },
    {
     "name": "g_width",
     "type": "number",
     "desc": "width of the chart (respected by all elements in the set)",
     "memberOf": ""
    },
    {
     "name": "title",
     "type": "Object",
     "desc": "The title of the chart\n    \n -{Array}  values\n -opts (object) options for the chart \n     o {\n     o type (string) type of endings of the bar. Default: 'square'. Other options are: 'round', 'sharp', 'soft'.\n     o gutter (number)(string) default '20%' (WHAT DOES IT DO?)\n     o vgutter (number)\n     o colors (array) colors be used repeatedly to plot the bars. If multicolumn bar is used each sequence of bars with use a different color.\n     o stacked (boolean) whether or not to tread values as in a stacked bar chart\n     o to\n     o stretch (boolean)\n     o }\n -opts (object) options for the pie\n     o{\n     o cut\n     o startAngle (number)\n     o endAngle (number)\n     }",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "click",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The img click event for the img."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.Header": {
   "props": [
    {
     "name": "html",
     "type": "String",
     "desc": "content of header",
     "memberOf": ""
    },
    {
     "name": "level",
     "type": "Number",
     "desc": "default 1",
     "memberOf": "",
     "optvals": [
      "1",
      "2",
      "3",
      "4",
      "5",
      "6"
     ]
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.HtmlEditor": {
   "props": [
    {
     "name": "toolbars",
     "type": "Array",
     "desc": "Array of toolbars. - defaults to just the Standard one",
     "memberOf": ""
    },
    {
     "name": "resizable",
     "type": "String",
     "desc": "'s' or 'se' or 'e' - wrapps the element in a\n                       Roo.resizable.",
     "memberOf": ""
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "(in pixels)",
     "memberOf": ""
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "(in pixels)",
     "memberOf": ""
    },
    {
     "name": "stylesheets",
     "type": "Array",
     "desc": "url of stylesheets. set to [] to disable stylesheets.",
     "memberOf": ""
    },
    {
     "name": "cols",
     "type": "Number",
     "desc": "Specifies the visible width of a text area",
     "memberOf": "Roo.bootstrap.TextArea"
    },
    {
     "name": "rows",
     "type": "Number",
     "desc": "Specifies the visible number of lines in a text area",
     "memberOf": "Roo.bootstrap.TextArea"
    },
    {
     "name": "wrap",
     "type": "string",
     "desc": "Specifies how the text in a text area is to be wrapped when submitted in a form",
     "memberOf": "Roo.bootstrap.TextArea",
     "optvals": [
      "soft",
      "hard"
     ]
    },
    {
     "name": "resize",
     "type": "string",
     "desc": "",
     "memberOf": "Roo.bootstrap.TextArea",
     "optvals": [
      "none",
      "both",
      "horizontal",
      "vertical",
      "inherit",
      "initial"
     ]
    },
    {
     "name": "html",
     "type": "string",
     "desc": "text",
     "memberOf": "Roo.bootstrap.TextArea"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "is it disabled",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "- the label associated",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "name of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "placeholder",
     "type": "string",
     "desc": "- placeholder to put in text.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "before",
     "type": "string",
     "desc": "- input group add on before",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "after",
     "type": "string",
     "desc": "- input group add on after",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "size",
     "type": "string",
     "desc": "- (lg|sm) or leave empty..",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "xs",
     "type": "Number",
     "desc": "colspan out of 12 for mobile-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "sm",
     "type": "Number",
     "desc": "colspan out of 12 for tablet-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "md",
     "type": "Number",
     "desc": "colspan out of 12 for computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "lg",
     "type": "Number",
     "desc": "colspan out of 12 for large computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "value",
     "type": "string",
     "desc": "default value of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "set the width of label (0-12)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "top",
      "left"
     ]
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "Specifies that the field should be read-only",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "autocomplete",
     "type": "String",
     "desc": "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "align",
     "type": "String",
     "desc": "Default left",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "left",
      "center",
      "right"
     ]
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field valid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "hasFeedback",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "invalidFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the editor is first receives the focus. Any insertion must wait\nuntil after this event."
    },
    {
     "name": "autosave",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Auto save the htmlEditor value as a file into Events"
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforepush",
     "sig": "function (_self, html)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the iframe editor is updated with content from the textarea. Return false\nto cancel the push."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "beforesync",
     "sig": "function (_self, html)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the textarea is updated with content from the editor iframe. Return false\nto cancel the sync."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "editmodechange",
     "sig": "function (_self, sourceEdit)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the editor switches edit modes"
    },
    {
     "name": "editorevent",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when on any editor (mouse up/down cursor movement etc.) - used for toolbar hooks."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "firstfocus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when on first focus - needed by toolbars.."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "initialize",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the editor is fully initialized (including the iframe)"
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "push",
     "sig": "function (_self, html)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the iframe editor is updated with content from the textarea."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "savedpreview",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "preview the saved version of htmlEditor"
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "sync",
     "sig": "function (_self, html)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the textarea is updated with content from the editor iframe."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "createToolbar",
     "sig": "(HtmlEditor editor)",
     "type": "function",
     "desc": "Protected method that will not generally be called directly. It\nis called when the editor creates its toolbar. Override this method if you need to\nadd custom toolbar buttons."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name of the field"
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "inputEl",
     "sig": "()",
     "type": "function",
     "desc": "return the real textarea element."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "markValid",
     "sig": "()",
     "type": "function",
     "desc": "Mark this field as valid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "toggleSourceEdit",
     "sig": "(Boolean sourceEdit)",
     "type": "function",
     "desc": "Toggles the editor between standard and source edit mode."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.bootstrap.Img": {
   "props": [
    {
     "name": "imgResponsive",
     "type": "Boolean",
     "desc": "false | true",
     "memberOf": ""
    },
    {
     "name": "border",
     "type": "String",
     "desc": "rounded | circle | thumbnail",
     "memberOf": ""
    },
    {
     "name": "src",
     "type": "String",
     "desc": "image source",
     "memberOf": ""
    },
    {
     "name": "alt",
     "type": "String",
     "desc": "image alternative text",
     "memberOf": ""
    },
    {
     "name": "href",
     "type": "String",
     "desc": "a tag href",
     "memberOf": ""
    },
    {
     "name": "target",
     "type": "String",
     "desc": "target for a href.",
     "memberOf": "",
     "optvals": [
      "_self",
      "_blank",
      "_parent",
      "_top"
     ]
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "click",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The img click event for the img."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.Input": {
   "props": [
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "is it disabled",
     "memberOf": ""
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "- the label associated",
     "memberOf": ""
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "button | checkbox | email | file | hidden | image | number | password | radio | range | reset | search | submit | text",
     "memberOf": ""
    },
    {
     "name": "name",
     "type": "String",
     "desc": "name of the input",
     "memberOf": ""
    },
    {
     "name": "placeholder",
     "type": "string",
     "desc": "- placeholder to put in text.",
     "memberOf": ""
    },
    {
     "name": "before",
     "type": "string",
     "desc": "- input group add on before",
     "memberOf": ""
    },
    {
     "name": "after",
     "type": "string",
     "desc": "- input group add on after",
     "memberOf": ""
    },
    {
     "name": "size",
     "type": "string",
     "desc": "- (lg|sm) or leave empty..",
     "memberOf": ""
    },
    {
     "name": "xs",
     "type": "Number",
     "desc": "colspan out of 12 for mobile-sized screens",
     "memberOf": ""
    },
    {
     "name": "sm",
     "type": "Number",
     "desc": "colspan out of 12 for tablet-sized screens",
     "memberOf": ""
    },
    {
     "name": "md",
     "type": "Number",
     "desc": "colspan out of 12 for computer-sized screens",
     "memberOf": ""
    },
    {
     "name": "lg",
     "type": "Number",
     "desc": "colspan out of 12 for large computer-sized screens",
     "memberOf": ""
    },
    {
     "name": "value",
     "type": "string",
     "desc": "default value of the input",
     "memberOf": ""
    },
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "set the width of label (0-12)",
     "memberOf": ""
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "",
     "memberOf": "",
     "optvals": [
      "top",
      "left"
     ]
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "Specifies that the field should be read-only",
     "memberOf": ""
    },
    {
     "name": "autocomplete",
     "type": "String",
     "desc": "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
     "memberOf": ""
    },
    {
     "name": "align",
     "type": "String",
     "desc": "Default left",
     "memberOf": "",
     "optvals": [
      "left",
      "center",
      "right"
     ]
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": ""
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": ""
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": ""
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": ""
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": ""
    },
    {
     "name": "validClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field valid (defaults to \"x-form-invalid\")",
     "memberOf": ""
    },
    {
     "name": "hasFeedback",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "invalidFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": ""
    },
    {
     "name": "validFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": ""
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": ""
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": ""
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": ""
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": ""
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": ""
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": ""
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": ""
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": ""
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": ""
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name of the field"
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "inputEl",
     "sig": "()",
     "type": "function",
     "desc": "return the real input element."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "markValid",
     "sig": "()",
     "type": "function",
     "desc": "Mark this field as valid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.bootstrap.Link": {
   "props": [
    {
     "name": "alt",
     "type": "String",
     "desc": "image alternative text",
     "memberOf": ""
    },
    {
     "name": "href",
     "type": "String",
     "desc": "a tag href",
     "memberOf": ""
    },
    {
     "name": "target",
     "type": "String",
     "desc": "target for a href.",
     "memberOf": "",
     "optvals": [
      "_self",
      "_blank",
      "_parent",
      "_top"
     ]
    },
    {
     "name": "html",
     "type": "String",
     "desc": "the content of the link.",
     "memberOf": ""
    },
    {
     "name": "anchor",
     "type": "String",
     "desc": "name for the anchor link",
     "memberOf": ""
    },
    {
     "name": "preventDefault",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "click",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The img click event for the img."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.LocationPicker": {
   "props": [
    {
     "name": "latitude",
     "type": "Number",
     "desc": "Position when init default 0",
     "memberOf": ""
    },
    {
     "name": "longitude",
     "type": "Number",
     "desc": "Position when init default 0",
     "memberOf": ""
    },
    {
     "name": "zoom",
     "type": "Number",
     "desc": "default 15",
     "memberOf": ""
    },
    {
     "name": "mapTypeId",
     "type": "String",
     "desc": "default google.maps.MapTypeId.ROADMAP",
     "memberOf": ""
    },
    {
     "name": "mapTypeControl",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": ""
    },
    {
     "name": "disableDoubleClickZoom",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": ""
    },
    {
     "name": "scrollwheel",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": ""
    },
    {
     "name": "streetViewControl",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": ""
    },
    {
     "name": "radius",
     "type": "Number",
     "desc": "default 0",
     "memberOf": ""
    },
    {
     "name": "locationName",
     "type": "String",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "draggable",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": ""
    },
    {
     "name": "enableAutocomplete",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": ""
    },
    {
     "name": "enableReverseGeocode",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": ""
    },
    {
     "name": "markerTitle",
     "type": "String",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "OverlayViewDraw",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when OverlayView Draw"
    },
    {
     "name": "OverlayViewHide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when OverlayView Draw"
    },
    {
     "name": "OverlayViewOnAdd",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when OverlayView Draw"
    },
    {
     "name": "OverlayViewOnRemove",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when OverlayView Draw"
    },
    {
     "name": "OverlayViewShow",
     "sig": "function (_self, cpx)\n{\n\n}",
     "type": "function",
     "desc": "Fires when OverlayView Draw"
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the map hide."
    },
    {
     "name": "initial",
     "sig": "function (_self, location)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the picker initialized."
    },
    {
     "name": "mapClick",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when click the map."
    },
    {
     "name": "mapRightClick",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when right click the map."
    },
    {
     "name": "markerClick",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when click the marker."
    },
    {
     "name": "markerRightClick",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when right click the marker."
    },
    {
     "name": "positionchanged",
     "sig": "function (_self, location)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the picker position changed."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the map resize."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the map show."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.Menu": {
   "props": [
    {
     "name": "type",
     "type": "String",
     "desc": "type of menu",
     "memberOf": "",
     "optvals": [
      "dropdown",
      "treeview",
      "submenu"
     ]
    },
    {
     "name": "registerMenu",
     "type": "Boolean",
     "desc": "True (default) - means that clicking on screen etc. hides it.",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this menu is hidden"
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this menu is displayed"
    },
    {
     "name": "click",
     "sig": "function (_self, menuItem, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this menu is clicked (or when the enter key is pressed while it is active)"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after this menu is hidden"
    },
    {
     "name": "itemclick",
     "sig": "function (baseItem, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a menu item contained in this menu is clicked"
    },
    {
     "name": "mouseout",
     "sig": "function (_self, e, menuItem)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse exits this menu"
    },
    {
     "name": "mouseover",
     "sig": "function (_self, e, menuItem)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse is hovering over this menu"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after this menu is displayed"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "(Boolean deep)",
     "type": "function",
     "desc": "Hides this menu and optionally all parent menus"
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "(String/HTMLElement/Roo.Element element, String position, Roo.menu.Menu parentMenu)",
     "type": "function",
     "desc": "Displays this menu relative to another element"
    },
    {
     "name": "showAt",
     "sig": "(Array xyPosition, Roo.menu.Menu parentMenu)",
     "type": "function",
     "desc": "Displays this menu at a specific xy position"
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.MenuItem": {
   "props": [
    {
     "name": "html",
     "type": "String",
     "desc": "the menu label",
     "memberOf": ""
    },
    {
     "name": "href",
     "type": "String",
     "desc": "the link",
     "memberOf": ""
    },
    {
     "name": "preventDefault",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "isContainer",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "click",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw click event for the entire grid."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.MenuMgr": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "get",
     "sig": "(String/Object menu)",
     "type": "function",
     "desc": "Returns a {@link Roo.menu.Menu} object"
    },
    {
     "name": "hideAll",
     "sig": "()",
     "type": "function",
     "desc": "Hides all menus that are currently visible"
    }
   ]
  },
  "Roo.bootstrap.MenuSeparator": {
   "props": [
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.MessageBar": {
   "props": [
    {
     "name": "html",
     "type": "String",
     "desc": "contents of the MessageBar",
     "memberOf": ""
    },
    {
     "name": "weight",
     "type": "String",
     "desc": "default info",
     "memberOf": "",
     "optvals": [
      "info",
      "success",
      "warning",
      "danger"
     ]
    },
    {
     "name": "beforeClass",
     "type": "String",
     "desc": "insert the bar before the given class",
     "memberOf": ""
    },
    {
     "name": "closable",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "fixed",
     "type": "Boolean",
     "desc": "default false, fix the bar at the top",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.MessageBox": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "alert",
     "sig": "(String title, String msg, Function fn, Object scope)",
     "type": "function",
     "desc": "Displays a standard read-only message box with an OK button (comparable to the basic JavaScript Window.alert).\nIf a callback function is passed it will be called after the user clicks the button, and the\nid of the button that was clicked will be passed as the only parameter to the callback\n(could also be the top-right close button)."
    },
    {
     "name": "confirm",
     "sig": "(String title, String msg, Function fn, Object scope)",
     "type": "function",
     "desc": "Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's Window.confirm).\nIf a callback function is passed it will be called after the user clicks either button, and the id of the\nbutton that was clicked will be passed as the only parameter to the callback (could also be the top-right close button)."
    },
    {
     "name": "getDialog",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the underlying {@link Roo.BasicDialog} element"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hides the message box if it is displayed"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the message box is currently displayed"
    },
    {
     "name": "progress",
     "sig": "(String title, String msg)",
     "type": "function",
     "desc": "Displays a message box with a progress bar.  This message box has no buttons and is not closeable by\nthe user.  You are responsible for updating the progress bar as needed via {@link Roo.MessageBox#updateProgress}\nand closing the message box when the process is complete."
    },
    {
     "name": "prompt",
     "sig": "(String title, String msg, Function fn, Object scope, Boolean/Number multiline)",
     "type": "function",
     "desc": "Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to\nJavaScript's Window.prompt).  The prompt can be a single-line or multi-line textbox.  If a callback function\nis passed it will be called after the user clicks either button, and the id of the button that was clicked\n(could also be the top-right close button) and the text that was entered will be passed as the two\nparameters to the callback."
    },
    {
     "name": "show",
     "sig": "(Object config)",
     "type": "function",
     "desc": "Displays a new message box, or reinitializes an existing message box, based on the config options\npassed in. All functions (e.g. prompt, alert, etc) on MessageBox call this function internally.\nThe following config object properties are supported:\n<pre>\nProperty    Type             Description\n----------  ---------------  ------------------------------------------------------------------------------------\nanimEl            String/Element   An id or Element from which the message box should animate as it opens and\n                                   closes (defaults to undefined)\nbuttons           Object/Boolean   A button config object (e.g., Roo.MessageBox.OKCANCEL or {ok:'Foo',\n                                   cancel:'Bar'}), or false to not show any buttons (defaults to false)\nclosable          Boolean          False to hide the top-right close button (defaults to true).  Note that\n                                   progress and wait dialogs will ignore this property and always hide the\n                                   close button as they can only be closed programmatically.\ncls               String           A custom CSS class to apply to the message box element\ndefaultTextHeight Number           The default height in pixels of the message box's multiline textarea if\n                                   displayed (defaults to 75)\nfn                Function         A callback function to execute after closing the dialog.  The arguments to the\n                                   function will be btn (the name of the button that was clicked, if applicable,\n                                   e.g. \"ok\"), and text (the value of the active text field, if applicable).\n                                   Progress and wait dialogs will ignore this option since they do not respond to\n                                   user actions and can only be closed programmatically, so any required function\n                                   should be called by the same code after it closes the dialog.\nicon              String           A CSS class that provides a background image to be used as an icon for\n                                   the dialog (e.g., Roo.MessageBox.WARNING or 'custom-class', defaults to '')\nmaxWidth          Number           The maximum width in pixels of the message box (defaults to 600)\nminWidth          Number           The minimum width in pixels of the message box (defaults to 100)\nmodal             Boolean          False to allow user interaction with the page while the message box is\n                                   displayed (defaults to true)\nmsg               String           A string that will replace the existing message box body text (defaults\n                                   to the XHTML-compliant non-breaking space character '&#160;')\nmultiline         Boolean          True to prompt the user to enter multi-line text (defaults to false)\nprogress          Boolean          True to display a progress bar (defaults to false)\nprogressText      String           The text to display inside the progress bar if progress = true (defaults to '')\nprompt            Boolean          True to prompt the user to enter single-line text (defaults to false)\nproxyDrag         Boolean          True to display a lightweight proxy while dragging (defaults to false)\ntitle             String           The title text\nvalue             String           The string value to set into the active textbox element if displayed\nwait              Boolean          True to display a progress bar (defaults to false)\nwidth             Number           The width of the dialog in pixels\n</pre>\n\nExample usage:\n<pre><code>\nRoo.Msg.show({\n   title: 'Address',\n   msg: 'Please enter your address:',\n   width: 300,\n   buttons: Roo.MessageBox.OKCANCEL,\n   multiline: true,\n   fn: saveAddress,\n   animEl: 'addAddressBtn'\n});\n</code></pre>"
    },
    {
     "name": "updateProgress",
     "sig": "(Number value, String text)",
     "type": "function",
     "desc": "Updates a progress-style message box's text and progress bar.  Only relevant on message boxes\ninitiated via {@link Roo.MessageBox#progress} or by calling {@link Roo.MessageBox#show} with progress: true."
    },
    {
     "name": "updateText",
     "sig": "(String text)",
     "type": "function",
     "desc": "Updates the message box body text"
    },
    {
     "name": "wait",
     "sig": "(String msg, String title)",
     "type": "function",
     "desc": "Displays a message box with an infinitely auto-updating progress bar.  This can be used to block user\ninteraction while waiting for a long-running process to complete that does not have defined intervals.\nYou are responsible for closing the message box when the process is complete."
    }
   ]
  },
  "Roo.bootstrap.Modal": {
   "props": [
    {
     "name": "title",
     "type": "String",
     "desc": "Title of dialog",
     "memberOf": ""
    },
    {
     "name": "specificTitle",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": ""
    },
    {
     "name": "buttons",
     "type": "Array",
     "desc": "Array of buttons or standard button set..",
     "memberOf": ""
    },
    {
     "name": "buttonPosition",
     "type": "String",
     "desc": "default right",
     "memberOf": "",
     "optvals": [
      "left",
      "right",
      "center"
     ]
    },
    {
     "name": "animate",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": ""
    },
    {
     "name": "allow_close",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "btnclick",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw btnclick event for the button"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.MonthField": {
   "props": [
    {
     "name": "language",
     "type": "String",
     "desc": "default en",
     "memberOf": ""
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "is it disabled",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "- the label associated",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "button | checkbox | email | file | hidden | image | number | password | radio | range | reset | search | submit | text",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "name of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "placeholder",
     "type": "string",
     "desc": "- placeholder to put in text.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "before",
     "type": "string",
     "desc": "- input group add on before",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "after",
     "type": "string",
     "desc": "- input group add on after",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "size",
     "type": "string",
     "desc": "- (lg|sm) or leave empty..",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "xs",
     "type": "Number",
     "desc": "colspan out of 12 for mobile-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "sm",
     "type": "Number",
     "desc": "colspan out of 12 for tablet-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "md",
     "type": "Number",
     "desc": "colspan out of 12 for computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "lg",
     "type": "Number",
     "desc": "colspan out of 12 for large computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "value",
     "type": "string",
     "desc": "default value of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "set the width of label (0-12)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "top",
      "left"
     ]
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "Specifies that the field should be read-only",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "autocomplete",
     "type": "String",
     "desc": "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "align",
     "type": "String",
     "desc": "Default left",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "left",
      "center",
      "right"
     ]
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field valid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "hasFeedback",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "invalidFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "select",
     "sig": "function (_self, date)\n{\n\n}",
     "type": "function",
     "desc": "Fires when select a date."
    },
    {
     "name": "show",
     "sig": "function (_self, date)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field show."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name of the field"
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "inputEl",
     "sig": "()",
     "type": "function",
     "desc": "return the real input element."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "markValid",
     "sig": "()",
     "type": "function",
     "desc": "Mark this field as valid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.bootstrap.NavGroup": {
   "props": [
    {
     "name": "align",
     "type": "String",
     "desc": "left | right",
     "memberOf": ""
    },
    {
     "name": "inverse",
     "type": "Boolean",
     "desc": "false | true",
     "memberOf": ""
    },
    {
     "name": "type",
     "type": "String",
     "desc": "default nav",
     "memberOf": "",
     "optvals": [
      "nav",
      "pills",
      "tab"
     ]
    },
    {
     "name": "navId",
     "type": "String",
     "desc": "- reference Id for navbar.",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "changed",
     "sig": "function (_self, selected, prev)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the active item changes"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addItem",
     "sig": "(Roo.bootstrap.NavItem the)",
     "type": "function",
     "desc": "adds a Navigation item"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearAll",
     "sig": "()",
     "type": "function",
     "desc": "clear all the Navigation item"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "get",
     "sig": "(string the)",
     "type": "function",
     "desc": "fetch a Navigation Group based on the navigation ID"
    },
    {
     "name": "getActive",
     "sig": "()",
     "type": "function",
     "desc": "gets the active Navigation item"
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "register",
     "sig": "(Roo.bootstrap.NavItem the)",
     "type": "function",
     "desc": "register a Navigation item"
    },
    {
     "name": "register",
     "sig": "(Roo.bootstrap.NavGroup the)",
     "type": "function",
     "desc": "register a Navigation Group"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setActiveItem",
     "sig": "(Roo.bootstrap.NavItem the)",
     "type": "function",
     "desc": "sets the active Navigation item"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.NavHeaderbar": {
   "props": [
    {
     "name": "brand",
     "type": "String",
     "desc": "what is brand",
     "memberOf": ""
    },
    {
     "name": "position",
     "type": "String",
     "desc": "position",
     "memberOf": "",
     "optvals": [
      "fixed-top",
      "fixed-bottom",
      "static-top"
     ]
    },
    {
     "name": "brand_href",
     "type": "String",
     "desc": "href of the brand",
     "memberOf": ""
    },
    {
     "name": "srButton",
     "type": "Boolean",
     "desc": "generate the (screen reader / mobile) sr-only button   default true",
     "memberOf": ""
    },
    {
     "name": "autohide",
     "type": "Boolean",
     "desc": "a top nav bar header that hides on scroll.",
     "memberOf": ""
    },
    {
     "name": "desktopCenter",
     "type": "Boolean",
     "desc": "should the header be centered on desktop using a container class",
     "memberOf": ""
    },
    {
     "name": "mobilerow",
     "type": "Roo.bootstrap.Row",
     "desc": "- a row to display on mobile only..",
     "memberOf": ""
    },
    {
     "name": "inverse",
     "type": "Boolean",
     "desc": "is inverted color",
     "memberOf": "Roo.bootstrap.NavSimplebar"
    },
    {
     "name": "type",
     "type": "String",
     "desc": "",
     "memberOf": "Roo.bootstrap.NavSimplebar",
     "optvals": [
      "nav",
      "pills",
      "tabs"
     ]
    },
    {
     "name": "arrangement",
     "type": "Boolean",
     "desc": "stacked | justified",
     "memberOf": "Roo.bootstrap.NavSimplebar"
    },
    {
     "name": "align",
     "type": "String",
     "desc": "alignment",
     "memberOf": "Roo.bootstrap.NavSimplebar",
     "optvals": [
      "left",
      "right"
     ]
    },
    {
     "name": "main",
     "type": "Boolean",
     "desc": "main nav bar? default false",
     "memberOf": "Roo.bootstrap.NavSimplebar",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "loadMask",
     "type": "Boolean",
     "desc": "loadMask on the bar",
     "memberOf": "Roo.bootstrap.NavSimplebar",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "tag",
     "type": "String",
     "desc": "default is nav",
     "memberOf": "Roo.bootstrap.NavSimplebar",
     "optvals": [
      "header",
      "footer",
      "nav",
      "div"
     ]
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.NavItem": {
   "props": [
    {
     "name": "href",
     "type": "String",
     "desc": "link to",
     "memberOf": ""
    },
    {
     "name": "html",
     "type": "String",
     "desc": "content of button",
     "memberOf": ""
    },
    {
     "name": "badge",
     "type": "String",
     "desc": "text inside badge",
     "memberOf": ""
    },
    {
     "name": "badgecls",
     "type": "String",
     "desc": "the extra classes for the badge",
     "memberOf": "",
     "optvals": [
      "bg-green",
      "bg-red",
      "bg-yellow"
     ]
    },
    {
     "name": "glyphicon",
     "type": "String",
     "desc": "name of glyphicon",
     "memberOf": ""
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "name of font awesome icon",
     "memberOf": ""
    },
    {
     "name": "active",
     "type": "Boolean",
     "desc": "Is item active",
     "memberOf": ""
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "Is item disabled",
     "memberOf": ""
    },
    {
     "name": "preventDefault",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "tabId",
     "type": "String",
     "desc": "the tab that this item activates.",
     "memberOf": ""
    },
    {
     "name": "tagtype",
     "type": "String",
     "desc": "render as a href or span?",
     "memberOf": "",
     "optvals": [
      "a",
      "span"
     ]
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "changed",
     "sig": "function (_self, state)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the active item active state changes"
    },
    {
     "name": "click",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw click event for the entire grid."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.NavSidebar": {
   "props": [
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.NavSidebarItem": {
   "props": [
    {
     "name": "href",
     "type": "String",
     "desc": "link to",
     "memberOf": "Roo.bootstrap.NavItem"
    },
    {
     "name": "html",
     "type": "String",
     "desc": "content of button",
     "memberOf": "Roo.bootstrap.NavItem"
    },
    {
     "name": "badge",
     "type": "String",
     "desc": "text inside badge",
     "memberOf": "Roo.bootstrap.NavItem"
    },
    {
     "name": "badgecls",
     "type": "String",
     "desc": "the extra classes for the badge",
     "memberOf": "Roo.bootstrap.NavItem",
     "optvals": [
      "bg-green",
      "bg-red",
      "bg-yellow"
     ]
    },
    {
     "name": "glyphicon",
     "type": "String",
     "desc": "name of glyphicon",
     "memberOf": "Roo.bootstrap.NavItem"
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "name of font awesome icon",
     "memberOf": "Roo.bootstrap.NavItem"
    },
    {
     "name": "active",
     "type": "Boolean",
     "desc": "Is item active",
     "memberOf": "Roo.bootstrap.NavItem"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "Is item disabled",
     "memberOf": "Roo.bootstrap.NavItem"
    },
    {
     "name": "preventDefault",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": "Roo.bootstrap.NavItem",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "tabId",
     "type": "String",
     "desc": "the tab that this item activates.",
     "memberOf": "Roo.bootstrap.NavItem"
    },
    {
     "name": "tagtype",
     "type": "String",
     "desc": "render as a href or span?",
     "memberOf": "Roo.bootstrap.NavItem",
     "optvals": [
      "a",
      "span"
     ]
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "changed",
     "sig": "function (_self, state)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the active item active state changes"
    },
    {
     "name": "click",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw click event for the entire grid."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.NavSimplebar": {
   "props": [
    {
     "name": "inverse",
     "type": "Boolean",
     "desc": "is inverted color",
     "memberOf": ""
    },
    {
     "name": "type",
     "type": "String",
     "desc": "",
     "memberOf": "",
     "optvals": [
      "nav",
      "pills",
      "tabs"
     ]
    },
    {
     "name": "arrangement",
     "type": "Boolean",
     "desc": "stacked | justified",
     "memberOf": ""
    },
    {
     "name": "align",
     "type": "String",
     "desc": "alignment",
     "memberOf": "",
     "optvals": [
      "left",
      "right"
     ]
    },
    {
     "name": "main",
     "type": "Boolean",
     "desc": "main nav bar? default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "loadMask",
     "type": "Boolean",
     "desc": "loadMask on the bar",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "tag",
     "type": "String",
     "desc": "default is nav",
     "memberOf": "",
     "optvals": [
      "header",
      "footer",
      "nav",
      "div"
     ]
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.Navbar": {
   "props": [
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.Pagination": {
   "props": [
    {
     "name": "size",
     "type": "String",
     "desc": "xs | sm | md | lg",
     "memberOf": ""
    },
    {
     "name": "inverse",
     "type": "Boolean",
     "desc": "false | true",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.PaginationItem": {
   "props": [
    {
     "name": "html",
     "type": "String",
     "desc": "text",
     "memberOf": ""
    },
    {
     "name": "href",
     "type": "String",
     "desc": "the link",
     "memberOf": ""
    },
    {
     "name": "preventDefault",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "active",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "click",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw click event for the entire grid."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.PagingToolbar": {
   "props": [
    {
     "name": "dataSource",
     "type": "Roo.data.Store",
     "desc": "The underlying data store providing the paged data",
     "memberOf": ""
    },
    {
     "name": "container",
     "type": "String/HTMLElement/Element",
     "desc": "container The id or element that will contain the toolbar",
     "memberOf": ""
    },
    {
     "name": "displayInfo",
     "type": "Boolean",
     "desc": "True to display the displayMsg (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "pageSize",
     "type": "Number",
     "desc": "The number of records to display per page (defaults to 20)",
     "memberOf": ""
    },
    {
     "name": "displayMsg",
     "type": "String",
     "desc": "The paging status message to display (defaults to \"Displaying {start} - {end} of {total}\")",
     "memberOf": ""
    },
    {
     "name": "emptyMsg",
     "type": "String",
     "desc": "The message to display when no records are found (defaults to \"No data to display\")",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "bind",
     "sig": "(Roo.data.Store store)",
     "type": "function",
     "desc": "Binds the paging toolbar to the specified {@link Roo.data.Store}"
    },
    {
     "name": "unbind",
     "sig": "(Roo.data.Store store)",
     "type": "function",
     "desc": "Unbinds the paging toolbar from the specified {@link Roo.data.Store}"
    }
   ]
  },
  "Roo.bootstrap.Popover": {
   "props": [
    {
     "name": "html",
     "type": "String",
     "desc": "contents of the popover   (or false to use children..)",
     "memberOf": ""
    },
    {
     "name": "title",
     "type": "String",
     "desc": "of popover (or false to hide)",
     "memberOf": ""
    },
    {
     "name": "placement",
     "type": "String",
     "desc": "how it is placed",
     "memberOf": ""
    },
    {
     "name": "trigger",
     "type": "String",
     "desc": "click || hover (or false to trigger manually)",
     "memberOf": ""
    },
    {
     "name": "over",
     "type": "String",
     "desc": "what (parent or false to trigger manually.)",
     "memberOf": ""
    },
    {
     "name": "delay",
     "type": "Number",
     "desc": "- delay before showing",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.Progress": {
   "props": [
    {
     "name": "striped",
     "type": "Boolean",
     "desc": "striped of the progress bar",
     "memberOf": ""
    },
    {
     "name": "active",
     "type": "Boolean",
     "desc": "animated of the progress bar",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.ProgressBar": {
   "props": [
    {
     "name": "aria_valuenow",
     "type": "Number",
     "desc": "aria-value now",
     "memberOf": ""
    },
    {
     "name": "aria_valuemin",
     "type": "Number",
     "desc": "aria-value min",
     "memberOf": ""
    },
    {
     "name": "aria_valuemax",
     "type": "Number",
     "desc": "aria-value max",
     "memberOf": ""
    },
    {
     "name": "label",
     "type": "String",
     "desc": "label for the progress bar",
     "memberOf": ""
    },
    {
     "name": "panel",
     "type": "String",
     "desc": "",
     "memberOf": "",
     "optvals": [
      "success",
      "info",
      "warning",
      "danger"
     ]
    },
    {
     "name": "role",
     "type": "String",
     "desc": "role of the progress bar",
     "memberOf": ""
    },
    {
     "name": "sr_only",
     "type": "String",
     "desc": "text",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.Radio": {
   "props": [
    {
     "name": "valueOff",
     "type": "String",
     "desc": "The value that should go into the generated input element's value when unchecked.",
     "memberOf": "Roo.bootstrap.CheckBox"
    },
    {
     "name": "inputValue",
     "type": "String",
     "desc": "The value that should go into the generated input element's value when checked.",
     "memberOf": "Roo.bootstrap.CheckBox"
    },
    {
     "name": "boxLabel",
     "type": "String",
     "desc": "The text that appears beside the checkbox",
     "memberOf": "Roo.bootstrap.CheckBox"
    },
    {
     "name": "weight",
     "type": "String",
     "desc": "The text that appears beside the checkbox",
     "memberOf": "Roo.bootstrap.CheckBox",
     "optvals": [
      "primary",
      "warning",
      "info",
      "danger",
      "success"
     ]
    },
    {
     "name": "checked",
     "type": "Boolean",
     "desc": "initnal the element",
     "memberOf": "Roo.bootstrap.CheckBox"
    },
    {
     "name": "inline",
     "type": "Boolean",
     "desc": "inline the element (default false)",
     "memberOf": "Roo.bootstrap.CheckBox"
    },
    {
     "name": "groupId",
     "type": "String",
     "desc": "the checkbox group id // normal just use for checkbox",
     "memberOf": "Roo.bootstrap.CheckBox"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "is it disabled",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "- the label associated",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "button | checkbox | email | file | hidden | image | number | password | radio | range | reset | search | submit | text",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "name of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "placeholder",
     "type": "string",
     "desc": "- placeholder to put in text.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "before",
     "type": "string",
     "desc": "- input group add on before",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "after",
     "type": "string",
     "desc": "- input group add on after",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "size",
     "type": "string",
     "desc": "- (lg|sm) or leave empty..",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "xs",
     "type": "Number",
     "desc": "colspan out of 12 for mobile-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "sm",
     "type": "Number",
     "desc": "colspan out of 12 for tablet-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "md",
     "type": "Number",
     "desc": "colspan out of 12 for computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "lg",
     "type": "Number",
     "desc": "colspan out of 12 for large computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "value",
     "type": "string",
     "desc": "default value of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "set the width of label (0-12)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "top",
      "left"
     ]
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "Specifies that the field should be read-only",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "autocomplete",
     "type": "String",
     "desc": "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "align",
     "type": "String",
     "desc": "Default left",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "left",
      "center",
      "right"
     ]
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field valid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "hasFeedback",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "invalidFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "check",
     "sig": "function (_self, checked)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the element is checked or unchecked."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "get",
     "sig": "(string the)",
     "type": "function",
     "desc": "fetch a CheckBox Group based on the group ID"
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name of the field"
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "inputEl",
     "sig": "()",
     "type": "function",
     "desc": "return the real input element."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "markValid",
     "sig": "()",
     "type": "function",
     "desc": "Mark this field as valid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "register",
     "sig": "(Roo.bootstrap.CheckBox the)",
     "type": "function",
     "desc": "register a CheckBox Group"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.bootstrap.Row": {
   "props": [
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.Slider": {
   "props": [
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.TabGroup": {
   "props": [
    {
     "name": "navId",
     "type": "String",
     "desc": "the navigation id (for use with navbars) - will be auto generated if it does not exist..",
     "memberOf": ""
    },
    {
     "name": "carousel",
     "type": "Boolean",
     "desc": "true to make the group behave like a carousel",
     "memberOf": ""
    },
    {
     "name": "xs",
     "type": "Number",
     "desc": "colspan out of 12 for mobile-sized screens or 0 for hidden",
     "memberOf": "Roo.bootstrap.Column"
    },
    {
     "name": "sm",
     "type": "Number",
     "desc": "colspan out of 12 for tablet-sized screens or 0 for hidden",
     "memberOf": "Roo.bootstrap.Column"
    },
    {
     "name": "md",
     "type": "Number",
     "desc": "colspan out of 12 for computer-sized screens or 0 for hidden",
     "memberOf": "Roo.bootstrap.Column"
    },
    {
     "name": "lg",
     "type": "Number",
     "desc": "colspan out of 12 for large computer-sized screens or 0 for hidden",
     "memberOf": "Roo.bootstrap.Column"
    },
    {
     "name": "xsoff",
     "type": "Number",
     "desc": "colspan offset out of 12 for mobile-sized screens or 0 for hidden",
     "memberOf": "Roo.bootstrap.Column"
    },
    {
     "name": "smoff",
     "type": "Number",
     "desc": "colspan offset out of 12 for tablet-sized screens or 0 for hidden",
     "memberOf": "Roo.bootstrap.Column"
    },
    {
     "name": "mdoff",
     "type": "Number",
     "desc": "colspan offset out of 12 for computer-sized screens or 0 for hidden",
     "memberOf": "Roo.bootstrap.Column"
    },
    {
     "name": "lgoff",
     "type": "Number",
     "desc": "colspan offset out of 12 for large computer-sized screens or 0 for hidden",
     "memberOf": "Roo.bootstrap.Column"
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "hide the element",
     "memberOf": "Roo.bootstrap.Column",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "alert",
     "type": "String",
     "desc": "type alert (changes background / border...)",
     "memberOf": "Roo.bootstrap.Column",
     "optvals": [
      "success",
      "info",
      "warning",
      "danger"
     ]
    },
    {
     "name": "fa",
     "type": "String",
     "desc": "font awesome icon",
     "memberOf": "Roo.bootstrap.Column",
     "optvals": [
      "ban",
      "check",
      "..."
     ]
    },
    {
     "name": "fasize",
     "type": "Number",
     "desc": "font awsome size",
     "memberOf": "Roo.bootstrap.Column",
     "optvals": [
      "1",
      "2",
      "...."
     ]
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "glyphicon name",
     "memberOf": "Roo.bootstrap.Column",
     "optvals": [
      "info-sign",
      "check",
      "..."
     ]
    },
    {
     "name": "html",
     "type": "String",
     "desc": "content of column.",
     "memberOf": "Roo.bootstrap.Column"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "get",
     "sig": "(string the)",
     "type": "function",
     "desc": "fetch a Navigation Group based on the navigation ID\nif one does not exist , it will get created."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "register",
     "sig": "(Roo.bootstrap.NavItem the)",
     "type": "function",
     "desc": "register a Navigation item"
    },
    {
     "name": "register",
     "sig": "(Roo.bootstrap.NavGroup the)",
     "type": "function",
     "desc": "register a Navigation Group"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "showPanel",
     "sig": "(Roo.bootstrap.TabPanel|number|string panel)",
     "type": "function",
     "desc": "show a specific panel"
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.TabPanel": {
   "props": [
    {
     "name": "active",
     "type": "Boolean",
     "desc": "panel active",
     "memberOf": ""
    },
    {
     "name": "html",
     "type": "String",
     "desc": "panel content",
     "memberOf": ""
    },
    {
     "name": "tabId",
     "type": "String",
     "desc": "unique tab ID (will be autogenerated if not set. - used to match TabItem to Panel)",
     "memberOf": ""
    },
    {
     "name": "navId",
     "type": "String",
     "desc": "The Roo.bootstrap.NavGroup which triggers show hide ()",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedeactivate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a tab is de-activated - can be used to do validation on a form."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "changed",
     "sig": "function (_self, state)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the active status changes"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.Table": {
   "props": [
    {
     "name": "cls",
     "type": "String",
     "desc": "table class",
     "memberOf": ""
    },
    {
     "name": "align",
     "type": "String",
     "desc": "Specifies the alignment of a table according to surrounding text",
     "memberOf": "",
     "optvals": [
      "left",
      "center",
      "right"
     ]
    },
    {
     "name": "bgcolor",
     "type": "String",
     "desc": "Specifies the background color for a table",
     "memberOf": ""
    },
    {
     "name": "border",
     "type": "Number",
     "desc": "Specifies whether the table cells should have borders or not",
     "memberOf": ""
    },
    {
     "name": "cellpadding",
     "type": "Number",
     "desc": "Specifies the space between the cell wall and the cell content",
     "memberOf": ""
    },
    {
     "name": "cellspacing",
     "type": "Number",
     "desc": "Specifies the space between cells",
     "memberOf": ""
    },
    {
     "name": "frame",
     "type": "String",
     "desc": "Specifies which parts of the outside borders that should be visible",
     "memberOf": ""
    },
    {
     "name": "rules",
     "type": "String",
     "desc": "Specifies which parts of the inside borders that should be visible",
     "memberOf": ""
    },
    {
     "name": "sortable",
     "type": "String",
     "desc": "Specifies that the table should be sortable",
     "memberOf": ""
    },
    {
     "name": "summary",
     "type": "String",
     "desc": "Specifies a summary of the content of a table",
     "memberOf": ""
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "Specifies the width of a table",
     "memberOf": ""
    },
    {
     "name": "layout",
     "type": "String",
     "desc": "table layout (auto | fixed | initial | inherit)",
     "memberOf": ""
    },
    {
     "name": "striped",
     "type": "boolean",
     "desc": "Should the rows be alternative striped",
     "memberOf": ""
    },
    {
     "name": "bordered",
     "type": "boolean",
     "desc": "Add borders to the table",
     "memberOf": ""
    },
    {
     "name": "hover",
     "type": "boolean",
     "desc": "Add hover highlighting",
     "memberOf": ""
    },
    {
     "name": "condensed",
     "type": "boolean",
     "desc": "Format condensed",
     "memberOf": ""
    },
    {
     "name": "responsive",
     "type": "boolean",
     "desc": "Format condensed",
     "memberOf": ""
    },
    {
     "name": "loadMask",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "tfoot",
     "type": "Boolean",
     "desc": "generate tfoot, default true",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "thead",
     "type": "Boolean",
     "desc": "generate thead, default true",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "RowSelection",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "CellSelection",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "footer",
     "type": "Roo.bootstrap.PagingToolbar",
     "desc": "a paging toolbar",
     "memberOf": ""
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "cellclick",
     "sig": "function (_self, el, rowIndex, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a cell is clicked"
    },
    {
     "name": "celldblclick",
     "sig": "function (_self, el, rowIndex, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a cell is double clicked"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "mouseout",
     "sig": "function (_self, el, rowIndex, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a mouseout occur"
    },
    {
     "name": "mouseover",
     "sig": "function (_self, el, rowIndex, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a mouseover occur"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "rowclass",
     "sig": "function (_self, rowcfg)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is rendered, so you can change add a style to it."
    },
    {
     "name": "rowclick",
     "sig": "function (_self, el, rowIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is clicked"
    },
    {
     "name": "rowdblclick",
     "sig": "function (_self, el, rowIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is double clicked"
    },
    {
     "name": "rowsrendered",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when all the  rows have been rendered"
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clear",
     "sig": "()",
     "type": "function",
     "desc": "Remove all rows"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setRowVisibility",
     "sig": "(Number rowIndex, Boolean state)",
     "type": "function",
     "desc": "Show or hide a row."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.Table.AbstractSelectionModel": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isLocked",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the selections are locked."
    },
    {
     "name": "lock",
     "sig": "()",
     "type": "function",
     "desc": "Locks the selections."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unlock",
     "sig": "()",
     "type": "function",
     "desc": "Unlocks the selections."
    }
   ]
  },
  "Roo.bootstrap.Table.RowSelectionModel": {
   "props": [
    {
     "name": "singleSelect",
     "type": "Boolean",
     "desc": "True to allow selection of only one row at a time (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "afterselectionchange",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the selection changes (eg. by key press or clicking)"
    },
    {
     "name": "beforerowselect",
     "sig": "function (_self, rowIndex, keepExisting)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is selected being selected, return false to cancel."
    },
    {
     "name": "rowdeselect",
     "sig": "function (_self, rowIndex)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is deselected."
    },
    {
     "name": "rowselect",
     "sig": "function (_self, rowIndex, r)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is selected."
    },
    {
     "name": "selectionchange",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the selection changes"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearSelections",
     "sig": "()",
     "type": "function",
     "desc": "Clears all selections."
    },
    {
     "name": "deselectRange",
     "sig": "(Number startRow, Number endRow)",
     "type": "function",
     "desc": "Deselects a range of rows. All rows in between startRow and endRow are also deselected."
    },
    {
     "name": "deselectRow",
     "sig": "(Number row)",
     "type": "function",
     "desc": "Deselects a row."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getCount",
     "sig": "()",
     "type": "function",
     "desc": "Gets the number of selected rows."
    },
    {
     "name": "getSelected",
     "sig": "()",
     "type": "function",
     "desc": "Returns the first selected record."
    },
    {
     "name": "getSelections",
     "sig": "()",
     "type": "function",
     "desc": "Returns the selected records"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hasSelection",
     "sig": "()",
     "type": "function",
     "desc": "Returns True if there is a selection."
    },
    {
     "name": "isIdSelected",
     "sig": "(String id)",
     "type": "function",
     "desc": "Returns True if the specified record id is selected."
    },
    {
     "name": "isLocked",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the selections are locked."
    },
    {
     "name": "isSelected",
     "sig": "(Number/Record record)",
     "type": "function",
     "desc": "Returns True if the specified row is selected."
    },
    {
     "name": "lock",
     "sig": "()",
     "type": "function",
     "desc": "Locks the selections."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "selectAll",
     "sig": "()",
     "type": "function",
     "desc": "Selects all rows."
    },
    {
     "name": "selectFirstRow",
     "sig": "()",
     "type": "function",
     "desc": "Selects the first row in the grid."
    },
    {
     "name": "selectLastRow",
     "sig": "(Boolean keepExisting)",
     "type": "function",
     "desc": "Select the last row."
    },
    {
     "name": "selectNext",
     "sig": "(Boolean keepExisting)",
     "type": "function",
     "desc": "Selects the row immediately following the last selected row."
    },
    {
     "name": "selectPrevious",
     "sig": "(Boolean keepExisting)",
     "type": "function",
     "desc": "Selects the row that precedes the last selected row."
    },
    {
     "name": "selectRange",
     "sig": "(Number startRow, Number endRow, Boolean keepExisting)",
     "type": "function",
     "desc": "Selects a range of rows. All rows in between startRow and endRow are also selected."
    },
    {
     "name": "selectRecords",
     "sig": "(Array records, Boolean keepExisting)",
     "type": "function",
     "desc": "Select records."
    },
    {
     "name": "selectRow",
     "sig": "(Number row, Boolean keepExisting)",
     "type": "function",
     "desc": "Selects a row."
    },
    {
     "name": "selectRows",
     "sig": "(Array rows, Boolean keepExisting)",
     "type": "function",
     "desc": "Selects multiple rows."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unlock",
     "sig": "()",
     "type": "function",
     "desc": "Unlocks the selections."
    }
   ]
  },
  "Roo.bootstrap.TableBody": {
   "props": [
    {
     "name": "cls",
     "type": "String",
     "desc": "element class",
     "memberOf": ""
    },
    {
     "name": "tag",
     "type": "String",
     "desc": "element tag (thead|tbody|tfoot) default tbody",
     "memberOf": ""
    },
    {
     "name": "align",
     "type": "String",
     "desc": "Aligns the content inside the element",
     "memberOf": ""
    },
    {
     "name": "charoff",
     "type": "Number",
     "desc": "Sets the number of characters the content inside the element will be aligned from the character specified by the char attribute",
     "memberOf": ""
    },
    {
     "name": "valign",
     "type": "String",
     "desc": "Vertical aligns the content inside the <tbody> element",
     "memberOf": ""
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.TableCell": {
   "props": [
    {
     "name": "html",
     "type": "String",
     "desc": "cell contain text",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "cell class",
     "memberOf": ""
    },
    {
     "name": "tag",
     "type": "String",
     "desc": "cell tag (td|th) default td",
     "memberOf": ""
    },
    {
     "name": "abbr",
     "type": "String",
     "desc": "Specifies an abbreviated version of the content in a cell",
     "memberOf": ""
    },
    {
     "name": "align",
     "type": "String",
     "desc": "Aligns the content in a cell",
     "memberOf": ""
    },
    {
     "name": "axis",
     "type": "String",
     "desc": "Categorizes cells",
     "memberOf": ""
    },
    {
     "name": "bgcolor",
     "type": "String",
     "desc": "Specifies the background color of a cell",
     "memberOf": ""
    },
    {
     "name": "charoff",
     "type": "Number",
     "desc": "Sets the number of characters the content will be aligned from the character specified by the char attribute",
     "memberOf": ""
    },
    {
     "name": "colspan",
     "type": "Number",
     "desc": "Specifies the number of columns a cell should span",
     "memberOf": ""
    },
    {
     "name": "headers",
     "type": "String",
     "desc": "Specifies one or more header cells a cell is related to",
     "memberOf": ""
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "Sets the height of a cell",
     "memberOf": ""
    },
    {
     "name": "nowrap",
     "type": "String",
     "desc": "Specifies that the content inside a cell should not wrap",
     "memberOf": ""
    },
    {
     "name": "rowspan",
     "type": "Number",
     "desc": "Sets the number of rows a cell should span",
     "memberOf": ""
    },
    {
     "name": "scope",
     "type": "String",
     "desc": "Defines a way to associate header cells and data cells in a table",
     "memberOf": ""
    },
    {
     "name": "valign",
     "type": "String",
     "desc": "Vertical aligns the content in a cell",
     "memberOf": ""
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "Specifies the width of a cell",
     "memberOf": ""
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.TableRow": {
   "props": [
    {
     "name": "cls",
     "type": "String",
     "desc": "row class",
     "memberOf": ""
    },
    {
     "name": "align",
     "type": "String",
     "desc": "Aligns the content in a table row",
     "memberOf": ""
    },
    {
     "name": "bgcolor",
     "type": "String",
     "desc": "Specifies a background color for a table row",
     "memberOf": ""
    },
    {
     "name": "charoff",
     "type": "Number",
     "desc": "Sets the number of characters the content will be aligned from the character specified by the char attribute",
     "memberOf": ""
    },
    {
     "name": "valign",
     "type": "String",
     "desc": "Vertical aligns the content in a table row",
     "memberOf": ""
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.TextArea": {
   "props": [
    {
     "name": "cols",
     "type": "Number",
     "desc": "Specifies the visible width of a text area",
     "memberOf": ""
    },
    {
     "name": "rows",
     "type": "Number",
     "desc": "Specifies the visible number of lines in a text area",
     "memberOf": ""
    },
    {
     "name": "wrap",
     "type": "string",
     "desc": "Specifies how the text in a text area is to be wrapped when submitted in a form",
     "memberOf": "",
     "optvals": [
      "soft",
      "hard"
     ]
    },
    {
     "name": "resize",
     "type": "string",
     "desc": "",
     "memberOf": "",
     "optvals": [
      "none",
      "both",
      "horizontal",
      "vertical",
      "inherit",
      "initial"
     ]
    },
    {
     "name": "html",
     "type": "string",
     "desc": "text",
     "memberOf": ""
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "is it disabled",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "- the label associated",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "button | checkbox | email | file | hidden | image | number | password | radio | range | reset | search | submit | text",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "name of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "placeholder",
     "type": "string",
     "desc": "- placeholder to put in text.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "before",
     "type": "string",
     "desc": "- input group add on before",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "after",
     "type": "string",
     "desc": "- input group add on after",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "size",
     "type": "string",
     "desc": "- (lg|sm) or leave empty..",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "xs",
     "type": "Number",
     "desc": "colspan out of 12 for mobile-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "sm",
     "type": "Number",
     "desc": "colspan out of 12 for tablet-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "md",
     "type": "Number",
     "desc": "colspan out of 12 for computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "lg",
     "type": "Number",
     "desc": "colspan out of 12 for large computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "value",
     "type": "string",
     "desc": "default value of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "set the width of label (0-12)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "top",
      "left"
     ]
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "Specifies that the field should be read-only",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "autocomplete",
     "type": "String",
     "desc": "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "align",
     "type": "String",
     "desc": "Default left",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "left",
      "center",
      "right"
     ]
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field valid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "hasFeedback",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "invalidFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name of the field"
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "inputEl",
     "sig": "()",
     "type": "function",
     "desc": "return the real textarea element."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "markValid",
     "sig": "()",
     "type": "function",
     "desc": "Mark this field as valid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.bootstrap.TimeField": {
   "props": [
    {
     "name": "format",
     "type": "String",
     "desc": "The default time format string which can be overriden for localization support.  The format must be\nvalid according to {@link Date#parseDate} (defaults to 'H:i').",
     "memberOf": ""
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "is it disabled",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "- the label associated",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "button | checkbox | email | file | hidden | image | number | password | radio | range | reset | search | submit | text",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "name of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "placeholder",
     "type": "string",
     "desc": "- placeholder to put in text.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "before",
     "type": "string",
     "desc": "- input group add on before",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "after",
     "type": "string",
     "desc": "- input group add on after",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "size",
     "type": "string",
     "desc": "- (lg|sm) or leave empty..",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "xs",
     "type": "Number",
     "desc": "colspan out of 12 for mobile-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "sm",
     "type": "Number",
     "desc": "colspan out of 12 for tablet-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "md",
     "type": "Number",
     "desc": "colspan out of 12 for computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "lg",
     "type": "Number",
     "desc": "colspan out of 12 for large computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "value",
     "type": "string",
     "desc": "default value of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "set the width of label (0-12)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "top",
      "left"
     ]
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "Specifies that the field should be read-only",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "autocomplete",
     "type": "String",
     "desc": "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "align",
     "type": "String",
     "desc": "Default left",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "left",
      "center",
      "right"
     ]
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field valid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "hasFeedback",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "invalidFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "select",
     "sig": "function (_self, date)\n{\n\n}",
     "type": "function",
     "desc": "Fires when select a date."
    },
    {
     "name": "show",
     "sig": "function (thisthis, date)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field show."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name of the field"
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "inputEl",
     "sig": "()",
     "type": "function",
     "desc": "return the real input element."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "markValid",
     "sig": "()",
     "type": "function",
     "desc": "Mark this field as valid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.bootstrap.Tooltip": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "currentEl",
     "sig": "()",
     "type": "function",
     "desc": ""
    }
   ]
  },
  "Roo.bootstrap.TriggerField": {
   "props": [
    {
     "name": "triggerClass",
     "type": "String",
     "desc": "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' by default and triggerClass will be <b>appended</b> if specified.",
     "memberOf": ""
    },
    {
     "name": "caret",
     "type": "String",
     "desc": "a fontawesome for the trigger icon see http://fortawesome.github.io/Font-Awesome/icons/",
     "memberOf": "",
     "optvals": [
      "search",
      "calendar"
     ]
    },
    {
     "name": "hideTrigger",
     "type": "Boolean",
     "desc": "True to hide the trigger element and display only the base text field (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "is it disabled",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "- the label associated",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "button | checkbox | email | file | hidden | image | number | password | radio | range | reset | search | submit | text",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "name of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "placeholder",
     "type": "string",
     "desc": "- placeholder to put in text.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "before",
     "type": "string",
     "desc": "- input group add on before",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "after",
     "type": "string",
     "desc": "- input group add on after",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "size",
     "type": "string",
     "desc": "- (lg|sm) or leave empty..",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "xs",
     "type": "Number",
     "desc": "colspan out of 12 for mobile-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "sm",
     "type": "Number",
     "desc": "colspan out of 12 for tablet-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "md",
     "type": "Number",
     "desc": "colspan out of 12 for computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "lg",
     "type": "Number",
     "desc": "colspan out of 12 for large computer-sized screens",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "value",
     "type": "string",
     "desc": "default value of the input",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "set the width of label (0-12)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "top",
      "left"
     ]
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "Specifies that the field should be read-only",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "autocomplete",
     "type": "String",
     "desc": "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "align",
     "type": "String",
     "desc": "Default left",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "left",
      "center",
      "right"
     ]
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field valid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "hasFeedback",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": "Roo.bootstrap.Input",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "invalidFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validFeedbackIcon",
     "type": "String",
     "desc": "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.bootstrap.Input"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name of the field"
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "inputEl",
     "sig": "()",
     "type": "function",
     "desc": "return the real input element."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "markValid",
     "sig": "()",
     "type": "function",
     "desc": "Mark this field as valid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onTriggerClick",
     "sig": "(EventObject e)",
     "type": "function",
     "desc": "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.bootstrap.dash": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.bootstrap.dash.NumberBox": {
   "props": [
    {
     "name": "headline",
     "type": "String",
     "desc": "Box headline",
     "memberOf": ""
    },
    {
     "name": "content",
     "type": "String",
     "desc": "Box content",
     "memberOf": ""
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "Box icon",
     "memberOf": ""
    },
    {
     "name": "footer",
     "type": "String",
     "desc": "Footer text",
     "memberOf": ""
    },
    {
     "name": "fhref",
     "type": "String",
     "desc": "Footer href",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.dash.TabBox": {
   "props": [
    {
     "name": "title",
     "type": "String",
     "desc": "Title of the TabBox",
     "memberOf": ""
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "Icon of the TabBox",
     "memberOf": ""
    },
    {
     "name": "showtabs",
     "type": "Boolean",
     "desc": "show the tabs default true",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "tabScrollable",
     "type": "Boolean",
     "desc": "tab scrollable when mobile view default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activatepane",
     "sig": "function (pane)\n{\n\n}",
     "type": "function",
     "desc": "When a pane is activated"
    },
    {
     "name": "addpane",
     "sig": "function (pane)\n{\n\n}",
     "type": "function",
     "desc": "When a pane is added"
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setTitle",
     "sig": "(String html)",
     "type": "function",
     "desc": "Updates the box title"
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.dash.TabPane": {
   "props": [
    {
     "name": "active",
     "type": "Boolean",
     "desc": "Default false",
     "memberOf": "",
     "optvals": [
      "false",
      "true"
     ]
    },
    {
     "name": "title",
     "type": "String",
     "desc": "title of panel",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (pane)\n{\n\n}",
     "type": "function",
     "desc": "When a pane is activated"
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setTitle",
     "sig": "(String html)",
     "type": "function",
     "desc": "Updates the tab title"
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.htmleditor": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.bootstrap.htmleditor.ToolbarStandard": {
   "props": [
    {
     "name": "disable",
     "type": "Object",
     "desc": "List of elements to disable..",
     "memberOf": ""
    },
    {
     "name": "btns",
     "type": "Array",
     "desc": "List of additional buttons.\n\n\nNEEDS Extra CSS? \n.x-html-editor-tb .x-edit-none .x-btn-text { background: none; }",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "updateToolbar",
     "sig": "()",
     "type": "function",
     "desc": "Protected method that will not generally be called directly. It triggers\na toolbar update by reading the markup state of the current selection in the editor."
    }
   ]
  },
  "Roo.bootstrap.menu": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.bootstrap.menu.Item": {
   "props": [
    {
     "name": "submenu",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "html",
     "type": "String",
     "desc": "text of the item",
     "memberOf": ""
    },
    {
     "name": "href",
     "type": "String",
     "desc": "the link",
     "memberOf": ""
    },
    {
     "name": "disable",
     "type": "Boolean",
     "desc": "default false",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "preventDefault",
     "type": "Boolean",
     "desc": "default true",
     "memberOf": "",
     "optvals": [
      "true",
      "false"
     ]
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "Font awesome icon",
     "memberOf": ""
    },
    {
     "name": "pos",
     "type": "String",
     "desc": "Submenu align to (left | right) default right",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "click",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw click event for the entire grid."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "mouseout",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse exits this menu"
    },
    {
     "name": "mouseover",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse is hovering over this menu"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.menu.Menu": {
   "props": [
    {
     "name": "html",
     "type": "String",
     "desc": "Text of the menu",
     "memberOf": ""
    },
    {
     "name": "weight",
     "type": "String",
     "desc": "",
     "memberOf": "",
     "optvals": [
      "default",
      "primary",
      "success",
      "info",
      "warning",
      "danger",
      "inverse"
     ]
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "Font awesome icon",
     "memberOf": ""
    },
    {
     "name": "pos",
     "type": "String",
     "desc": "Menu align to (top | bottom) default bottom",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this menu is hidden"
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this menu is displayed"
    },
    {
     "name": "click",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this menu is clicked (or when the enter key is pressed while it is active)"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after this menu is hidden"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after this menu is displayed"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.bootstrap.menu.Separator": {
   "props": [
    {
     "name": "cls",
     "type": "String",
     "desc": "css class",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.data": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.data.ArrayReader": {
   "props": [
    {
     "name": "id",
     "type": "String",
     "desc": "(optional) The subscript within row Array that provides an ID for the Record",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "newRow",
     "sig": "(Object data)",
     "type": "function",
     "desc": "Create an empty record"
    },
    {
     "name": "readRecords",
     "sig": "(Object o)",
     "type": "function",
     "desc": "Create a data block containing Roo.data.Records from an XML document."
    }
   ]
  },
  "Roo.data.Connection": {
   "props": [
    {
     "name": "url",
     "type": "String",
     "desc": "(Optional) The default URL to be used for requests to the server. (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "extraParams",
     "type": "Object",
     "desc": "(Optional) An object containing properties which are used as\nextra parameters to each request made by this object. (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "defaultHeaders",
     "type": "Object",
     "desc": "(Optional) An object containing request headers which are added\n to each request made by this object. (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "method",
     "type": "String",
     "desc": "(Optional) The default HTTP method to be used for requests. (defaults to undefined; if not set but parms are present will use POST, otherwise GET)",
     "memberOf": ""
    },
    {
     "name": "timeout",
     "type": "Number",
     "desc": "(Optional) The timeout in milliseconds to be used for requests. (defaults to 30000)",
     "memberOf": ""
    },
    {
     "name": "autoAbort",
     "type": "Boolean",
     "desc": "(Optional) Whether this request should abort any pending requests. (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "disableCaching",
     "type": "Boolean",
     "desc": "(Optional) True to add a unique cache-buster param to GET requests. (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforerequest",
     "sig": "function (conn, options)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a network request is made to retrieve a data object."
    },
    {
     "name": "requestcomplete",
     "sig": "function (conn, response, options)\n{\n\n}",
     "type": "function",
     "desc": "Fires if the request was successfully completed."
    },
    {
     "name": "requestexception",
     "sig": "function (conn, response, options)\n{\n\n}",
     "type": "function",
     "desc": "Fires if an error HTTP status was returned from the server.\nSee {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html} for details of HTTP status codes."
    }
   ],
   "methods": [
    {
     "name": "abort",
     "sig": "(Number transactionId)",
     "type": "function",
     "desc": "Aborts any outstanding request."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isLoading",
     "sig": "(Number transactionId)",
     "type": "function",
     "desc": "Determine whether this object has a request outstanding."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "request",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Sends an HTTP request to a remote server."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.data.DataProxy": {
   "props": [],
   "events": [
    {
     "name": "beforeload",
     "sig": "function (This, params)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a network request is made to retrieve a data object."
    },
    {
     "name": "load",
     "sig": "function (This, o, arg)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the load method's callback is called."
    },
    {
     "name": "loadexception",
     "sig": "function (This, o, arg, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires if an Exception occurs during data retrieval."
    }
   ],
   "methods": []
  },
  "Roo.data.DataReader": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "newRow",
     "sig": "(Object data)",
     "type": "function",
     "desc": "Create an empty record"
    }
   ]
  },
  "Roo.data.HttpProxy": {
   "props": [
    {
     "name": "url",
     "type": "String",
     "desc": "(Optional) The default URL to be used for requests to the server. (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "extraParams",
     "type": "Object",
     "desc": "(Optional) An object containing properties which are used as\nextra parameters to each request made by this object. (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "defaultHeaders",
     "type": "Object",
     "desc": "(Optional) An object containing request headers which are added\n to each request made by this object. (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "method",
     "type": "String",
     "desc": "(Optional) The default HTTP method to be used for requests. (defaults to undefined; if not set but parms are present will use POST, otherwise GET)",
     "memberOf": ""
    },
    {
     "name": "timeout",
     "type": "Number",
     "desc": "(Optional) The timeout in milliseconds to be used for requests. (defaults to 30000)",
     "memberOf": ""
    },
    {
     "name": "autoAbort",
     "type": "Boolean",
     "desc": "(Optional) Whether this request should abort any pending requests. (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "disableCaching",
     "type": "Boolean",
     "desc": "(Optional) True to add a unique cache-buster param to GET requests. (defaults to true)",
     "memberOf": ""
    }
   ],
   "events": [
    {
     "name": "beforeload",
     "sig": "function (This, params)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a network request is made to retrieve a data object."
    },
    {
     "name": "load",
     "sig": "function (This, o, arg)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the load method's callback is called."
    },
    {
     "name": "loadexception",
     "sig": "function (This, o, arg, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires if an Exception occurs during data retrieval."
    }
   ],
   "methods": [
    {
     "name": "getConnection",
     "sig": "()",
     "type": "function",
     "desc": "Return the {@link Roo.data.Connection} object being used by this Proxy."
    },
    {
     "name": "load",
     "sig": "(Object params, Roo.data.DataReader reader, Function callback, Object scope, Object arg)",
     "type": "function",
     "desc": "Load data from the configured {@link Roo.data.Connection}, read the data object into\na block of Roo.data.Records using the passed {@link Roo.data.DataReader} implementation, and\nprocess that block using the passed callback."
    }
   ]
  },
  "Roo.data.JsonReader": {
   "props": [
    {
     "name": "totalProperty",
     "type": "String",
     "desc": "Name of the property from which to retrieve the total number of records\nin the dataset. This is only needed if the whole dataset is not passed in one go, but is being\npaged from the remote server.",
     "memberOf": ""
    },
    {
     "name": "successProperty",
     "type": "String",
     "desc": "Name of the property from which to retrieve the success attribute used by forms.",
     "memberOf": ""
    },
    {
     "name": "root",
     "type": "String",
     "desc": "name of the property which contains the Array of row objects.",
     "memberOf": ""
    },
    {
     "name": "id",
     "type": "String",
     "desc": "Name of the property within a row object that contains a record identifier value.",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "newRow",
     "sig": "(Object data)",
     "type": "function",
     "desc": "Create an empty record"
    },
    {
     "name": "read",
     "sig": "(Object response)",
     "type": "function",
     "desc": "This method is only used by a DataProxy which has retrieved data from a remote server."
    },
    {
     "name": "readRecords",
     "sig": "(Object o)",
     "type": "function",
     "desc": "Create a data block containing Roo.data.Records from an XML document."
    }
   ]
  },
  "Roo.data.JsonStore": {
   "props": [
    {
     "name": "fields",
     "type": "Array",
     "desc": "An array of field definition objects, or field name strings.",
     "memberOf": ""
    },
    {
     "name": "isLocal",
     "type": "boolean",
     "desc": "flag if data is locally available (and can be always looked up\nwithout a remote query - used by combo/forms at present.",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "proxy",
     "type": "Roo.data.DataProxy",
     "desc": "The Proxy object which provides access to a data object.",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "data",
     "type": "Array",
     "desc": "Inline data to be loaded when the store is initialized.",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "reader",
     "type": "Roo.data.Reader",
     "desc": "The Reader object which processes the data object and returns\nan Array of Roo.data.record objects which are cached keyed by their <em>id</em> property.",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "baseParams",
     "type": "Object",
     "desc": "An object containing properties which are to be sent as parameters\non any HTTP request",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "sortInfo",
     "type": "Object",
     "desc": "A config object in the format: {field: \"fieldName\", direction: \"ASC|DESC\"}",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "multiSort",
     "type": "Boolean",
     "desc": "enable multi column sorting (sort is based on the order of columns, remote only at present)",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "remoteSort",
     "type": "boolean",
     "desc": "True if sorting is to be handled by requesting the Proxy to provide a refreshed\nversion of the data object in sorted order, as opposed to sorting the Record cache in place (defaults to false).",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "pruneModifiedRecords",
     "type": "boolean",
     "desc": "True to clear all modified record information each time the store is\nloaded or when a record is removed. (defaults to false).",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "add",
     "sig": "function (_self, records, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when Records have been added to the Store"
    },
    {
     "name": "beforeload",
     "sig": "function (_self, options)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a request is made for a new data object.  If the beforeload handler returns false\nthe load action will be canceled."
    },
    {
     "name": "beforeloadadd",
     "sig": "function (_self, records, options)\n{\n\n}",
     "type": "function",
     "desc": "Fires after a new set of Records has been loaded."
    },
    {
     "name": "clear",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the data cache has been cleared."
    },
    {
     "name": "datachanged",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the data cache has changed, and a widget which is using this Store\nas a Record cache should refresh its view."
    },
    {
     "name": "load",
     "sig": "function (_self, records, options)\n{\n\n}",
     "type": "function",
     "desc": "Fires after a new set of Records has been loaded, before they are added to the store."
    },
    {
     "name": "loadexception",
     "sig": "function (, return, load, jsonData)\n{\n\n}",
     "type": "function",
     "desc": "Fires if an exception occurs in the Proxy during loading.\nCalled with the signature of the Proxy's \"loadexception\" event.\nIf you return Json { data: [] , success: false, .... } then this will be thrown with the following args"
    },
    {
     "name": "metachange",
     "sig": "function (_self, meta)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this store's reader provides new metadata (fields). This is currently only support for JsonReaders."
    },
    {
     "name": "remove",
     "sig": "function (_self, record, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a Record has been removed from the Store"
    },
    {
     "name": "update",
     "sig": "function (_self, record, operation)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a Record has been updated"
    }
   ],
   "methods": [
    {
     "name": "add",
     "sig": "(Roo.data.Record[] records)",
     "type": "function",
     "desc": "Add Records to the Store and fires the add event."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearFilter",
     "sig": "(Boolean suppressEvent)",
     "type": "function",
     "desc": "Revert to a view of the Record cache with no filtering applied."
    },
    {
     "name": "collect",
     "sig": "(String dataIndex, Boolean allowNull, Boolean bypassFilter)",
     "type": "function",
     "desc": "Collects unique values for a particular dataIndex from this store."
    },
    {
     "name": "commitChanges",
     "sig": "()",
     "type": "function",
     "desc": "Commit all Records with outstanding changes. To handle updates for changes, subscribe to the\nStore's \"update\" event, and perform updating when the third parameter is Roo.data.Record.COMMIT."
    },
    {
     "name": "each",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Calls the specified function for each of the Records in the cache."
    },
    {
     "name": "filter",
     "sig": "(String field, String/RegExp value, Boolean anyMatch)",
     "type": "function",
     "desc": "Filter the records by a specified property."
    },
    {
     "name": "filterBy",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Filter by a function. The specified function will be called with each\nrecord in this data source. If the function returns true the record is included,\notherwise it is filtered."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getAt",
     "sig": "(Number index)",
     "type": "function",
     "desc": "Get the Record at the specified index."
    },
    {
     "name": "getById",
     "sig": "(String id)",
     "type": "function",
     "desc": "Get the Record with the specified id."
    },
    {
     "name": "getCount",
     "sig": "()",
     "type": "function",
     "desc": "Gets the number of cached records.\n<p>\n<em>If using paging, this may not be the total size of the dataset. If the data object\nused by the Reader contains the dataset size, then the getTotalCount() function returns\nthe data set size</em>"
    },
    {
     "name": "getModifiedRecords",
     "sig": "()",
     "type": "function",
     "desc": "Gets all records modified since the last commit.  Modified records are persisted across load operations\n(e.g., during paging)."
    },
    {
     "name": "getRange",
     "sig": "(Number startIndex, Number endIndex)",
     "type": "function",
     "desc": "Returns a range of Records between specified indices."
    },
    {
     "name": "getSortState",
     "sig": "()",
     "type": "function",
     "desc": "Returns the sort state of the Store as an object with two properties:\n<pre><code>\n field {String} The name of the field by which the Records are sorted\n direction {String} The sort order, \"ASC\" or \"DESC\"\n</code></pre>"
    },
    {
     "name": "getTotalCount",
     "sig": "()",
     "type": "function",
     "desc": "Gets the total number of records in the dataset as returned by the server.\n<p>\n<em>If using paging, for this to be accurate, the data object used by the Reader must contain\nthe dataset size</em>"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "indexOf",
     "sig": "(Roo.data.Record record)",
     "type": "function",
     "desc": "Get the index within the cache of the passed Record."
    },
    {
     "name": "indexOfId",
     "sig": "(String id)",
     "type": "function",
     "desc": "Get the index within the cache of the Record with the passed id."
    },
    {
     "name": "insert",
     "sig": "(Number index, Roo.data.Record[] records)",
     "type": "function",
     "desc": "Inserts Records to the Store at the given index and fires the add event."
    },
    {
     "name": "load",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Loads the Record cache from the configured Proxy using the configured Reader.\n<p>\nIf using remote paging, then the first load call must specify the <em>start</em>\nand <em>limit</em> properties in the options.params property to establish the initial\nposition within the dataset, and the number of Records to cache on each read from the Proxy.\n<p>\n<strong>It is important to note that for remote data sources, loading is asynchronous,\nand this call will return before the new data has been loaded. Perform any post-processing\nin a callback function, or in a \"load\" event handler.</strong>\n<p>"
    },
    {
     "name": "loadData",
     "sig": "(Object data, Boolean append)",
     "type": "function",
     "desc": "Loads data from a passed data block. A Reader which understands the format of the data\nmust have been configured in the constructor."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "query",
     "sig": "(String field, String/RegExp value, Boolean anyMatch)",
     "type": "function",
     "desc": "Query the records by a specified property."
    },
    {
     "name": "queryBy",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Query by a function. The specified function will be called with each\nrecord in this data source. If the function returns true the record is included\nin the results."
    },
    {
     "name": "rejectChanges",
     "sig": "()",
     "type": "function",
     "desc": "Cancel outstanding changes on all changed records."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "reload",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Reloads the Record cache from the configured Proxy using the configured Reader and\nthe options from the last load operation performed."
    },
    {
     "name": "remove",
     "sig": "(Ext.data.Record record)",
     "type": "function",
     "desc": "Remove a Record from the Store and fires the remove event."
    },
    {
     "name": "removeAll",
     "sig": "()",
     "type": "function",
     "desc": "Remove all Records from the Store and fires the clear event."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setDefaultSort",
     "sig": "(String fieldName, String dir)",
     "type": "function",
     "desc": "Sets the default sort column and order to be used by the next load operation."
    },
    {
     "name": "sort",
     "sig": "(String fieldName, String dir)",
     "type": "function",
     "desc": "Sort the Records.\nIf remote sorting is used, the sort is performed on the server, and the cache is\nreloaded. If local sorting is used, the cache is sorted internally."
    },
    {
     "name": "sum",
     "sig": "(String property, Number start, Number end)",
     "type": "function",
     "desc": "Sums the value of <i>property</i> for each record between start and end and returns the result."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.data.MemoryProxy": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "load",
     "sig": "(Object params, Roo.data.DataReader reader, Function callback, Object scope, Object arg)",
     "type": "function",
     "desc": "Load data from the requested source (in this case an in-memory\ndata object passed to the constructor), read the data object into\na block of Roo.data.Records using the passed Roo.data.DataReader implementation, and\nprocess that block using the passed callback."
    }
   ]
  },
  "Roo.data.Node": {
   "props": [
    {
     "name": "leaf",
     "type": "Boolean",
     "desc": "true if this node is a leaf and does not have children",
     "memberOf": ""
    },
    {
     "name": "id",
     "type": "String",
     "desc": "The id for this node. If one is not specified, one is generated.",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "append",
     "sig": "function (tree, _self, node, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a new child node is appended"
    },
    {
     "name": "beforeappend",
     "sig": "function (tree, _self, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a new child is appended, return false to cancel the append."
    },
    {
     "name": "beforeinsert",
     "sig": "function (tree, _self, node, refNode)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a new child is inserted, return false to cancel the insert."
    },
    {
     "name": "beforemove",
     "sig": "function (tree, _self, oldParent, newParent, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this node is moved to a new location in the tree. Return false to cancel the move."
    },
    {
     "name": "beforeremove",
     "sig": "function (tree, _self, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a child is removed, return false to cancel the remove."
    },
    {
     "name": "insert",
     "sig": "function (tree, _self, node, refNode)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a new child node is inserted."
    },
    {
     "name": "move",
     "sig": "function (tree, _self, oldParent, newParent, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this node is moved to a new location in the tree"
    },
    {
     "name": "remove",
     "sig": "function (tree, _self, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a child node is removed"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "appendChild",
     "sig": "(Node/Array node)",
     "type": "function",
     "desc": "Insert node(s) as the last child node of this node."
    },
    {
     "name": "bubble",
     "sig": "(Function fn, Object scope, Array args)",
     "type": "function",
     "desc": "Bubbles up the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe bubble is stopped."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "cascade",
     "sig": "(Function fn, Object scope, Array args)",
     "type": "function",
     "desc": "Cascades down the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe cascade is stopped on that branch."
    },
    {
     "name": "contains",
     "sig": "(Node node)",
     "type": "function",
     "desc": "Returns true if this node is an ancestor (at any point) of the passed node."
    },
    {
     "name": "eachChild",
     "sig": "(Function fn, Object scope, Array args)",
     "type": "function",
     "desc": "Interates the child nodes of this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe iteration stops."
    },
    {
     "name": "findChild",
     "sig": "(String attribute, Mixed value)",
     "type": "function",
     "desc": "Finds the first child that has the attribute with the specified value."
    },
    {
     "name": "findChildBy",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Finds the first child by a custom function. The child matches if the function passed\nreturns true."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getDepth",
     "sig": "()",
     "type": "function",
     "desc": "Returns depth of this node (the root node has a depth of 0)"
    },
    {
     "name": "getOwnerTree",
     "sig": "()",
     "type": "function",
     "desc": "Returns the tree this node is in."
    },
    {
     "name": "getPath",
     "sig": "(String attr)",
     "type": "function",
     "desc": "Returns the path for this node. The path can be used to expand or select this node programmatically."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "indexOf",
     "sig": "(Node node)",
     "type": "function",
     "desc": "Returns the index of a child node"
    },
    {
     "name": "insertBefore",
     "sig": "(Node node, Node refNode)",
     "type": "function",
     "desc": "Inserts the first node before the second node in this nodes childNodes collection."
    },
    {
     "name": "isAncestor",
     "sig": "(Node node)",
     "type": "function",
     "desc": "Returns true if the passed node is an ancestor (at any point) of this node."
    },
    {
     "name": "isFirst",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this node is the first child of its parent"
    },
    {
     "name": "isLast",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this node is the last child of its parent"
    },
    {
     "name": "isLeaf",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this node is a leaf"
    },
    {
     "name": "item",
     "sig": "(Number index)",
     "type": "function",
     "desc": "Returns the child node at the specified index."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeChild",
     "sig": "(Node node)",
     "type": "function",
     "desc": "Removes a child node from this node."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "replaceChild",
     "sig": "(Node newChild, Node oldChild)",
     "type": "function",
     "desc": "Replaces one child node in this node with another."
    },
    {
     "name": "sort",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Sorts this nodes children using the supplied sort function"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.data.Record": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "commit",
     "sig": "()",
     "type": "function",
     "desc": "Usually called by the {@link Roo.data.Store} which owns the Record.\nCommits all changes made to the Record since either creation, or the last commit operation.\n<p>\nDevelopers should subscribe to the {@link Roo.data.Store#update} event to have their code notified\nof commit operations."
    },
    {
     "name": "copy",
     "sig": "(String id)",
     "type": "function",
     "desc": "Creates a copy of this record."
    },
    {
     "name": "create",
     "sig": "(Array o)",
     "type": "function",
     "desc": "Generate a constructor for a specific record layout."
    },
    {
     "name": "get",
     "sig": "(String name)",
     "type": "function",
     "desc": "Get the value of the named field."
    },
    {
     "name": "reject",
     "sig": "()",
     "type": "function",
     "desc": "Usually called by the {@link Roo.data.Store} which owns the Record.\nRejects all changes made to the Record since either creation, or the last commit operation.\nModified fields are reverted to their original values.\n<p>\nDevelopers should subscribe to the {@link Roo.data.Store#update} event to have their code notified\nof reject operations."
    },
    {
     "name": "set",
     "sig": "(String name, Object value)",
     "type": "function",
     "desc": "Set the named field to the specified value."
    }
   ]
  },
  "Roo.data.ScriptTagProxy": {
   "props": [
    {
     "name": "url",
     "type": "String",
     "desc": "The URL from which to request the data object.",
     "memberOf": ""
    },
    {
     "name": "timeout",
     "type": "Number",
     "desc": "(Optional) The number of milliseconds to wait for a response. Defaults to 30 seconds.",
     "memberOf": ""
    },
    {
     "name": "callbackParam",
     "type": "String",
     "desc": "(Optional) The name of the parameter to pass to the server which tells\nthe server the name of the callback function set up by the load call to process the returned data object.\nDefaults to \"callback\".<p>The server-side processing must read this parameter value, and generate\njavascript output which calls this named function passing the data object as its only parameter.",
     "memberOf": ""
    },
    {
     "name": "nocache",
     "type": "Boolean",
     "desc": "(Optional) Defaults to true. Disable cacheing by adding a unique parameter\nname to the request.",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "abort",
     "sig": "()",
     "type": "function",
     "desc": "Abort the current server request."
    },
    {
     "name": "load",
     "sig": "(Object params, Roo.data.DataReader reader, Function callback, Object scope, Object arg)",
     "type": "function",
     "desc": "Load data from the configured URL, read the data object into\na block of Roo.data.Records using the passed Roo.data.DataReader implementation, and\nprocess that block using the passed callback."
    }
   ]
  },
  "Roo.data.SimpleStore": {
   "props": [
    {
     "name": "id",
     "type": "Number",
     "desc": "The array index of the record id. Leave blank to auto generate ids.",
     "memberOf": ""
    },
    {
     "name": "fields",
     "type": "Array",
     "desc": "An array of field definition objects, or field name strings.",
     "memberOf": ""
    },
    {
     "name": "data",
     "type": "Array",
     "desc": "The multi-dimensional array of data",
     "memberOf": ""
    },
    {
     "name": "isLocal",
     "type": "boolean",
     "desc": "flag if data is locally available (and can be always looked up\nwithout a remote query - used by combo/forms at present.",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "proxy",
     "type": "Roo.data.DataProxy",
     "desc": "The Proxy object which provides access to a data object.",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "reader",
     "type": "Roo.data.Reader",
     "desc": "The Reader object which processes the data object and returns\nan Array of Roo.data.record objects which are cached keyed by their <em>id</em> property.",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "baseParams",
     "type": "Object",
     "desc": "An object containing properties which are to be sent as parameters\non any HTTP request",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "sortInfo",
     "type": "Object",
     "desc": "A config object in the format: {field: \"fieldName\", direction: \"ASC|DESC\"}",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "multiSort",
     "type": "Boolean",
     "desc": "enable multi column sorting (sort is based on the order of columns, remote only at present)",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "remoteSort",
     "type": "boolean",
     "desc": "True if sorting is to be handled by requesting the Proxy to provide a refreshed\nversion of the data object in sorted order, as opposed to sorting the Record cache in place (defaults to false).",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "pruneModifiedRecords",
     "type": "boolean",
     "desc": "True to clear all modified record information each time the store is\nloaded or when a record is removed. (defaults to false).",
     "memberOf": "Roo.data.Store"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "add",
     "sig": "function (_self, records, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when Records have been added to the Store"
    },
    {
     "name": "beforeload",
     "sig": "function (_self, options)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a request is made for a new data object.  If the beforeload handler returns false\nthe load action will be canceled."
    },
    {
     "name": "beforeloadadd",
     "sig": "function (_self, records, options)\n{\n\n}",
     "type": "function",
     "desc": "Fires after a new set of Records has been loaded."
    },
    {
     "name": "clear",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the data cache has been cleared."
    },
    {
     "name": "datachanged",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the data cache has changed, and a widget which is using this Store\nas a Record cache should refresh its view."
    },
    {
     "name": "load",
     "sig": "function (_self, records, options)\n{\n\n}",
     "type": "function",
     "desc": "Fires after a new set of Records has been loaded, before they are added to the store."
    },
    {
     "name": "loadexception",
     "sig": "function (, return, load, jsonData)\n{\n\n}",
     "type": "function",
     "desc": "Fires if an exception occurs in the Proxy during loading.\nCalled with the signature of the Proxy's \"loadexception\" event.\nIf you return Json { data: [] , success: false, .... } then this will be thrown with the following args"
    },
    {
     "name": "metachange",
     "sig": "function (_self, meta)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this store's reader provides new metadata (fields). This is currently only support for JsonReaders."
    },
    {
     "name": "remove",
     "sig": "function (_self, record, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a Record has been removed from the Store"
    },
    {
     "name": "update",
     "sig": "function (_self, record, operation)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a Record has been updated"
    }
   ],
   "methods": [
    {
     "name": "add",
     "sig": "(Roo.data.Record[] records)",
     "type": "function",
     "desc": "Add Records to the Store and fires the add event."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearFilter",
     "sig": "(Boolean suppressEvent)",
     "type": "function",
     "desc": "Revert to a view of the Record cache with no filtering applied."
    },
    {
     "name": "collect",
     "sig": "(String dataIndex, Boolean allowNull, Boolean bypassFilter)",
     "type": "function",
     "desc": "Collects unique values for a particular dataIndex from this store."
    },
    {
     "name": "commitChanges",
     "sig": "()",
     "type": "function",
     "desc": "Commit all Records with outstanding changes. To handle updates for changes, subscribe to the\nStore's \"update\" event, and perform updating when the third parameter is Roo.data.Record.COMMIT."
    },
    {
     "name": "each",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Calls the specified function for each of the Records in the cache."
    },
    {
     "name": "filter",
     "sig": "(String field, String/RegExp value, Boolean anyMatch)",
     "type": "function",
     "desc": "Filter the records by a specified property."
    },
    {
     "name": "filterBy",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Filter by a function. The specified function will be called with each\nrecord in this data source. If the function returns true the record is included,\notherwise it is filtered."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getAt",
     "sig": "(Number index)",
     "type": "function",
     "desc": "Get the Record at the specified index."
    },
    {
     "name": "getById",
     "sig": "(String id)",
     "type": "function",
     "desc": "Get the Record with the specified id."
    },
    {
     "name": "getCount",
     "sig": "()",
     "type": "function",
     "desc": "Gets the number of cached records.\n<p>\n<em>If using paging, this may not be the total size of the dataset. If the data object\nused by the Reader contains the dataset size, then the getTotalCount() function returns\nthe data set size</em>"
    },
    {
     "name": "getModifiedRecords",
     "sig": "()",
     "type": "function",
     "desc": "Gets all records modified since the last commit.  Modified records are persisted across load operations\n(e.g., during paging)."
    },
    {
     "name": "getRange",
     "sig": "(Number startIndex, Number endIndex)",
     "type": "function",
     "desc": "Returns a range of Records between specified indices."
    },
    {
     "name": "getSortState",
     "sig": "()",
     "type": "function",
     "desc": "Returns the sort state of the Store as an object with two properties:\n<pre><code>\n field {String} The name of the field by which the Records are sorted\n direction {String} The sort order, \"ASC\" or \"DESC\"\n</code></pre>"
    },
    {
     "name": "getTotalCount",
     "sig": "()",
     "type": "function",
     "desc": "Gets the total number of records in the dataset as returned by the server.\n<p>\n<em>If using paging, for this to be accurate, the data object used by the Reader must contain\nthe dataset size</em>"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "indexOf",
     "sig": "(Roo.data.Record record)",
     "type": "function",
     "desc": "Get the index within the cache of the passed Record."
    },
    {
     "name": "indexOfId",
     "sig": "(String id)",
     "type": "function",
     "desc": "Get the index within the cache of the Record with the passed id."
    },
    {
     "name": "insert",
     "sig": "(Number index, Roo.data.Record[] records)",
     "type": "function",
     "desc": "Inserts Records to the Store at the given index and fires the add event."
    },
    {
     "name": "load",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Loads the Record cache from the configured Proxy using the configured Reader.\n<p>\nIf using remote paging, then the first load call must specify the <em>start</em>\nand <em>limit</em> properties in the options.params property to establish the initial\nposition within the dataset, and the number of Records to cache on each read from the Proxy.\n<p>\n<strong>It is important to note that for remote data sources, loading is asynchronous,\nand this call will return before the new data has been loaded. Perform any post-processing\nin a callback function, or in a \"load\" event handler.</strong>\n<p>"
    },
    {
     "name": "loadData",
     "sig": "(Object data, Boolean append)",
     "type": "function",
     "desc": "Loads data from a passed data block. A Reader which understands the format of the data\nmust have been configured in the constructor."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "query",
     "sig": "(String field, String/RegExp value, Boolean anyMatch)",
     "type": "function",
     "desc": "Query the records by a specified property."
    },
    {
     "name": "queryBy",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Query by a function. The specified function will be called with each\nrecord in this data source. If the function returns true the record is included\nin the results."
    },
    {
     "name": "rejectChanges",
     "sig": "()",
     "type": "function",
     "desc": "Cancel outstanding changes on all changed records."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "reload",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Reloads the Record cache from the configured Proxy using the configured Reader and\nthe options from the last load operation performed."
    },
    {
     "name": "remove",
     "sig": "(Ext.data.Record record)",
     "type": "function",
     "desc": "Remove a Record from the Store and fires the remove event."
    },
    {
     "name": "removeAll",
     "sig": "()",
     "type": "function",
     "desc": "Remove all Records from the Store and fires the clear event."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setDefaultSort",
     "sig": "(String fieldName, String dir)",
     "type": "function",
     "desc": "Sets the default sort column and order to be used by the next load operation."
    },
    {
     "name": "sort",
     "sig": "(String fieldName, String dir)",
     "type": "function",
     "desc": "Sort the Records.\nIf remote sorting is used, the sort is performed on the server, and the cache is\nreloaded. If local sorting is used, the cache is sorted internally."
    },
    {
     "name": "sum",
     "sig": "(String property, Number start, Number end)",
     "type": "function",
     "desc": "Sums the value of <i>property</i> for each record between start and end and returns the result."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.data.SortTypes": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "asDate",
     "sig": "(Mixed s)",
     "type": "function",
     "desc": "Date sorting"
    },
    {
     "name": "asFloat",
     "sig": "(Mixed s)",
     "type": "function",
     "desc": "Float sorting"
    },
    {
     "name": "asInt",
     "sig": "(Mixed s)",
     "type": "function",
     "desc": "Integer sorting"
    },
    {
     "name": "asText",
     "sig": "(Mixed s)",
     "type": "function",
     "desc": "Strips all HTML tags to sort on text only"
    },
    {
     "name": "asUCString",
     "sig": "(Mixed s)",
     "type": "function",
     "desc": "Case insensitive string"
    },
    {
     "name": "asUCText",
     "sig": "(Mixed s)",
     "type": "function",
     "desc": "Strips all HTML tags to sort on text only - Case insensitive"
    },
    {
     "name": "none",
     "sig": "(Mixed s)",
     "type": "function",
     "desc": "Default sort that does nothing"
    }
   ]
  },
  "Roo.data.Store": {
   "props": [
    {
     "name": "isLocal",
     "type": "boolean",
     "desc": "flag if data is locally available (and can be always looked up\nwithout a remote query - used by combo/forms at present.",
     "memberOf": ""
    },
    {
     "name": "proxy",
     "type": "Roo.data.DataProxy",
     "desc": "The Proxy object which provides access to a data object.",
     "memberOf": ""
    },
    {
     "name": "data",
     "type": "Array",
     "desc": "Inline data to be loaded when the store is initialized.",
     "memberOf": ""
    },
    {
     "name": "reader",
     "type": "Roo.data.Reader",
     "desc": "The Reader object which processes the data object and returns\nan Array of Roo.data.record objects which are cached keyed by their <em>id</em> property.",
     "memberOf": ""
    },
    {
     "name": "baseParams",
     "type": "Object",
     "desc": "An object containing properties which are to be sent as parameters\non any HTTP request",
     "memberOf": ""
    },
    {
     "name": "sortInfo",
     "type": "Object",
     "desc": "A config object in the format: {field: \"fieldName\", direction: \"ASC|DESC\"}",
     "memberOf": ""
    },
    {
     "name": "multiSort",
     "type": "Boolean",
     "desc": "enable multi column sorting (sort is based on the order of columns, remote only at present)",
     "memberOf": ""
    },
    {
     "name": "remoteSort",
     "type": "boolean",
     "desc": "True if sorting is to be handled by requesting the Proxy to provide a refreshed\nversion of the data object in sorted order, as opposed to sorting the Record cache in place (defaults to false).",
     "memberOf": ""
    },
    {
     "name": "pruneModifiedRecords",
     "type": "boolean",
     "desc": "True to clear all modified record information each time the store is\nloaded or when a record is removed. (defaults to false).",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "add",
     "sig": "function (_self, records, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when Records have been added to the Store"
    },
    {
     "name": "beforeload",
     "sig": "function (_self, options)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a request is made for a new data object.  If the beforeload handler returns false\nthe load action will be canceled."
    },
    {
     "name": "beforeloadadd",
     "sig": "function (_self, records, options)\n{\n\n}",
     "type": "function",
     "desc": "Fires after a new set of Records has been loaded."
    },
    {
     "name": "clear",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the data cache has been cleared."
    },
    {
     "name": "datachanged",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the data cache has changed, and a widget which is using this Store\nas a Record cache should refresh its view."
    },
    {
     "name": "load",
     "sig": "function (_self, records, options)\n{\n\n}",
     "type": "function",
     "desc": "Fires after a new set of Records has been loaded, before they are added to the store."
    },
    {
     "name": "loadexception",
     "sig": "function (, return, load, jsonData)\n{\n\n}",
     "type": "function",
     "desc": "Fires if an exception occurs in the Proxy during loading.\nCalled with the signature of the Proxy's \"loadexception\" event.\nIf you return Json { data: [] , success: false, .... } then this will be thrown with the following args"
    },
    {
     "name": "metachange",
     "sig": "function (_self, meta)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this store's reader provides new metadata (fields). This is currently only support for JsonReaders."
    },
    {
     "name": "remove",
     "sig": "function (_self, record, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a Record has been removed from the Store"
    },
    {
     "name": "update",
     "sig": "function (_self, record, operation)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a Record has been updated"
    }
   ],
   "methods": [
    {
     "name": "add",
     "sig": "(Roo.data.Record[] records)",
     "type": "function",
     "desc": "Add Records to the Store and fires the add event."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearFilter",
     "sig": "(Boolean suppressEvent)",
     "type": "function",
     "desc": "Revert to a view of the Record cache with no filtering applied."
    },
    {
     "name": "collect",
     "sig": "(String dataIndex, Boolean allowNull, Boolean bypassFilter)",
     "type": "function",
     "desc": "Collects unique values for a particular dataIndex from this store."
    },
    {
     "name": "commitChanges",
     "sig": "()",
     "type": "function",
     "desc": "Commit all Records with outstanding changes. To handle updates for changes, subscribe to the\nStore's \"update\" event, and perform updating when the third parameter is Roo.data.Record.COMMIT."
    },
    {
     "name": "each",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Calls the specified function for each of the Records in the cache."
    },
    {
     "name": "filter",
     "sig": "(String field, String/RegExp value, Boolean anyMatch)",
     "type": "function",
     "desc": "Filter the records by a specified property."
    },
    {
     "name": "filterBy",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Filter by a function. The specified function will be called with each\nrecord in this data source. If the function returns true the record is included,\notherwise it is filtered."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getAt",
     "sig": "(Number index)",
     "type": "function",
     "desc": "Get the Record at the specified index."
    },
    {
     "name": "getById",
     "sig": "(String id)",
     "type": "function",
     "desc": "Get the Record with the specified id."
    },
    {
     "name": "getCount",
     "sig": "()",
     "type": "function",
     "desc": "Gets the number of cached records.\n<p>\n<em>If using paging, this may not be the total size of the dataset. If the data object\nused by the Reader contains the dataset size, then the getTotalCount() function returns\nthe data set size</em>"
    },
    {
     "name": "getModifiedRecords",
     "sig": "()",
     "type": "function",
     "desc": "Gets all records modified since the last commit.  Modified records are persisted across load operations\n(e.g., during paging)."
    },
    {
     "name": "getRange",
     "sig": "(Number startIndex, Number endIndex)",
     "type": "function",
     "desc": "Returns a range of Records between specified indices."
    },
    {
     "name": "getSortState",
     "sig": "()",
     "type": "function",
     "desc": "Returns the sort state of the Store as an object with two properties:\n<pre><code>\n field {String} The name of the field by which the Records are sorted\n direction {String} The sort order, \"ASC\" or \"DESC\"\n</code></pre>"
    },
    {
     "name": "getTotalCount",
     "sig": "()",
     "type": "function",
     "desc": "Gets the total number of records in the dataset as returned by the server.\n<p>\n<em>If using paging, for this to be accurate, the data object used by the Reader must contain\nthe dataset size</em>"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "indexOf",
     "sig": "(Roo.data.Record record)",
     "type": "function",
     "desc": "Get the index within the cache of the passed Record."
    },
    {
     "name": "indexOfId",
     "sig": "(String id)",
     "type": "function",
     "desc": "Get the index within the cache of the Record with the passed id."
    },
    {
     "name": "insert",
     "sig": "(Number index, Roo.data.Record[] records)",
     "type": "function",
     "desc": "Inserts Records to the Store at the given index and fires the add event."
    },
    {
     "name": "load",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Loads the Record cache from the configured Proxy using the configured Reader.\n<p>\nIf using remote paging, then the first load call must specify the <em>start</em>\nand <em>limit</em> properties in the options.params property to establish the initial\nposition within the dataset, and the number of Records to cache on each read from the Proxy.\n<p>\n<strong>It is important to note that for remote data sources, loading is asynchronous,\nand this call will return before the new data has been loaded. Perform any post-processing\nin a callback function, or in a \"load\" event handler.</strong>\n<p>"
    },
    {
     "name": "loadData",
     "sig": "(Object data, Boolean append)",
     "type": "function",
     "desc": "Loads data from a passed data block. A Reader which understands the format of the data\nmust have been configured in the constructor."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "query",
     "sig": "(String field, String/RegExp value, Boolean anyMatch)",
     "type": "function",
     "desc": "Query the records by a specified property."
    },
    {
     "name": "queryBy",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Query by a function. The specified function will be called with each\nrecord in this data source. If the function returns true the record is included\nin the results."
    },
    {
     "name": "rejectChanges",
     "sig": "()",
     "type": "function",
     "desc": "Cancel outstanding changes on all changed records."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "reload",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Reloads the Record cache from the configured Proxy using the configured Reader and\nthe options from the last load operation performed."
    },
    {
     "name": "remove",
     "sig": "(Ext.data.Record record)",
     "type": "function",
     "desc": "Remove a Record from the Store and fires the remove event."
    },
    {
     "name": "removeAll",
     "sig": "()",
     "type": "function",
     "desc": "Remove all Records from the Store and fires the clear event."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setDefaultSort",
     "sig": "(String fieldName, String dir)",
     "type": "function",
     "desc": "Sets the default sort column and order to be used by the next load operation."
    },
    {
     "name": "sort",
     "sig": "(String fieldName, String dir)",
     "type": "function",
     "desc": "Sort the Records.\nIf remote sorting is used, the sort is performed on the server, and the cache is\nreloaded. If local sorting is used, the cache is sorted internally."
    },
    {
     "name": "sum",
     "sig": "(String property, Number start, Number end)",
     "type": "function",
     "desc": "Sums the value of <i>property</i> for each record between start and end and returns the result."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.data.Tree": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "append",
     "sig": "function (tree, parent, node, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a new child node is appended to a node in this tree."
    },
    {
     "name": "beforeappend",
     "sig": "function (tree, parent, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a new child is appended to a node in this tree, return false to cancel the append."
    },
    {
     "name": "beforeinsert",
     "sig": "function (tree, parent, node, refNode)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a new child is inserted in a node in this tree, return false to cancel the insert."
    },
    {
     "name": "beforemove",
     "sig": "function (tree, node, oldParent, newParent, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a node is moved to a new location in the tree. Return false to cancel the move."
    },
    {
     "name": "beforeremove",
     "sig": "function (tree, parent, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a child is removed from a node in this tree, return false to cancel the remove."
    },
    {
     "name": "insert",
     "sig": "function (tree, parent, node, refNode)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a new child node is inserted in a node in this tree."
    },
    {
     "name": "move",
     "sig": "function (tree, node, oldParent, newParent, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a node is moved to a new location in the tree"
    },
    {
     "name": "remove",
     "sig": "function (tree, parent, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a child node is removed from a node in this tree."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getNodeById",
     "sig": "(String id)",
     "type": "function",
     "desc": "Gets a node in this tree by its id."
    },
    {
     "name": "getRootNode",
     "sig": "()",
     "type": "function",
     "desc": "Returns the root node for this tree."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setRootNode",
     "sig": "(Node node)",
     "type": "function",
     "desc": "Sets the root node for this tree."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.data.XmlReader": {
   "props": [
    {
     "name": "totalRecords",
     "type": "String",
     "desc": "The DomQuery path from which to retrieve the total number of records\nin the dataset. This is only needed if the whole dataset is not passed in one go, but is being\npaged from the remote server.",
     "memberOf": ""
    },
    {
     "name": "record",
     "type": "String",
     "desc": "The DomQuery path to the repeated element which contains record information.",
     "memberOf": ""
    },
    {
     "name": "success",
     "type": "String",
     "desc": "The DomQuery path to the success attribute used by forms.",
     "memberOf": ""
    },
    {
     "name": "id",
     "type": "String",
     "desc": "The DomQuery path relative from the record element to the element that contains\na record identifier value.",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "newRow",
     "sig": "(Object data)",
     "type": "function",
     "desc": "Create an empty record"
    },
    {
     "name": "read",
     "sig": "(Object response)",
     "type": "function",
     "desc": "This method is only used by a DataProxy which has retrieved data from a remote server."
    },
    {
     "name": "readRecords",
     "sig": "(Object doc)",
     "type": "function",
     "desc": "Create a data block containing Roo.data.Records from an XML document."
    }
   ]
  },
  "Roo.dd": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.dd.DD": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addInvalidHandleClass",
     "sig": "(string cssClass)",
     "type": "function",
     "desc": "Lets you specify a css class of elements that will not initiate a drag"
    },
    {
     "name": "addInvalidHandleId",
     "sig": "(string id)",
     "type": "function",
     "desc": "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag"
    },
    {
     "name": "addInvalidHandleType",
     "sig": "(string tagName)",
     "type": "function",
     "desc": "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag."
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addToGroup",
     "sig": "( sGroup)",
     "type": "function",
     "desc": "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed."
    },
    {
     "name": "alignElWithMouse",
     "sig": "(HTMLElement el, int iPageX, int iPageY)",
     "type": "function",
     "desc": "Sets the element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is."
    },
    {
     "name": "applyConfig",
     "sig": "()",
     "type": "function",
     "desc": "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object."
    },
    {
     "name": "autoOffset",
     "sig": "(int iPageX, int iPageY)",
     "type": "function",
     "desc": "Sets the pointer offset to the distance between the linked element's top\nleft corner and the location the element was clicked"
    },
    {
     "name": "cachePosition",
     "sig": "( iPageX,  iPageY)",
     "type": "function",
     "desc": "Saves the most recent position so that we can reset the constraints and\ntick marks on-demand.  We need to know this so that we can calculate the\nnumber of pixels the element is offset from its original position."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearConstraints",
     "sig": "()",
     "type": "function",
     "desc": "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time."
    },
    {
     "name": "clearTicks",
     "sig": "()",
     "type": "function",
     "desc": "Clears any tick interval defined for this instance"
    },
    {
     "name": "endDrag",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Fired when we are done dragging the object"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "function toString() {\n    [native code]\n}",
     "sig": "()",
     "type": "function",
     "desc": "toString method"
    },
    {
     "name": "getDragEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the linked element"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "init",
     "sig": "( id, String sGroup, object config)",
     "type": "function",
     "desc": "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass"
    },
    {
     "name": "initTarget",
     "sig": "( id, String sGroup, object config)",
     "type": "function",
     "desc": "Initializes Targeting functionality only... the object does not\nget a mousedown handler."
    },
    {
     "name": "isLocked",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)"
    },
    {
     "name": "isTarget",
     "sig": "()",
     "type": "function",
     "desc": "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false."
    },
    {
     "name": "isValidHandleChild",
     "sig": "(HTMLElement node)",
     "type": "function",
     "desc": "Checks the tag exclusion list to see if this click should be ignored"
    },
    {
     "name": "lock",
     "sig": "()",
     "type": "function",
     "desc": "Lock this instance"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onAvailable",
     "sig": "()",
     "type": "function",
     "desc": "Override the onAvailable method to do what is needed after the initial\nposition was determined."
    },
    {
     "name": "onDrag",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Abstract method called during the onMouseMove event while dragging an\nobject."
    },
    {
     "name": "onDragDrop",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this item is dropped on another DragDrop\nobj"
    },
    {
     "name": "onDragEnter",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this element fist begins hovering over\nanother DragDrop obj"
    },
    {
     "name": "onDragOut",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when we are no longer hovering over an element"
    },
    {
     "name": "onDragOver",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this element is hovering over another\nDragDrop obj"
    },
    {
     "name": "onInvalidDrop",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Abstract method called when this item is dropped on an area with no\ndrop target"
    },
    {
     "name": "onMouseDown",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Event handler that fires when a drag/drop obj gets a mousedown"
    },
    {
     "name": "onMouseUp",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Event handler that fires when a drag/drop obj gets a mouseup"
    },
    {
     "name": "padding",
     "sig": "()",
     "type": "function",
     "desc": "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeFromGroup",
     "sig": "(string sGroup)",
     "type": "function",
     "desc": "Remove's this instance from the supplied interaction group"
    },
    {
     "name": "removeInvalidHandleClass",
     "sig": "(string cssClass)",
     "type": "function",
     "desc": "Unsets an invalid css class"
    },
    {
     "name": "removeInvalidHandleId",
     "sig": "(string id)",
     "type": "function",
     "desc": "Unsets an invalid handle id"
    },
    {
     "name": "removeInvalidHandleType",
     "sig": "(string tagName)",
     "type": "function",
     "desc": "Unsets an excluded tag name set by addInvalidHandleType"
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "resetConstraints",
     "sig": "(boolean maintainOffset)",
     "type": "function",
     "desc": "resetConstraints must be called if you manually reposition a dd element."
    },
    {
     "name": "setDelta",
     "sig": "(int iDeltaX, int iDeltaY)",
     "type": "function",
     "desc": "Sets the pointer offset.  You can call this directly to force the\noffset to be in a particular location (e.g., pass in 0,0 to set it\nto the center of the object)"
    },
    {
     "name": "setDragElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag"
    },
    {
     "name": "setDragElPos",
     "sig": "(int iPageX, int iPageY)",
     "type": "function",
     "desc": "Sets the drag element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is."
    },
    {
     "name": "setHandleElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation."
    },
    {
     "name": "setInitPosition",
     "sig": "(int diffX, int diffY)",
     "type": "function",
     "desc": "Stores the initial placement of the linked element."
    },
    {
     "name": "setOuterHandleElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to set an element outside of the linked element as a drag\nhandle"
    },
    {
     "name": "setPadding",
     "sig": "(int iTop, int iRight, int iBot, int iLeft)",
     "type": "function",
     "desc": "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second."
    },
    {
     "name": "setXConstraint",
     "sig": "(int iLeft, int iRight, int iTickSize)",
     "type": "function",
     "desc": "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis."
    },
    {
     "name": "setYConstraint",
     "sig": "(int iUp, int iDown, int iTickSize)",
     "type": "function",
     "desc": "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis."
    },
    {
     "name": "startDrag",
     "sig": "(int X, int Y)",
     "type": "function",
     "desc": "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unlock",
     "sig": "()",
     "type": "function",
     "desc": "Unlock this instace"
    },
    {
     "name": "unreg",
     "sig": "()",
     "type": "function",
     "desc": "Remove all drag and drop hooks for this element"
    }
   ]
  },
  "Roo.dd.DDProxy": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addInvalidHandleClass",
     "sig": "(string cssClass)",
     "type": "function",
     "desc": "Lets you specify a css class of elements that will not initiate a drag"
    },
    {
     "name": "addInvalidHandleId",
     "sig": "(string id)",
     "type": "function",
     "desc": "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag"
    },
    {
     "name": "addInvalidHandleType",
     "sig": "(string tagName)",
     "type": "function",
     "desc": "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag."
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addToGroup",
     "sig": "( sGroup)",
     "type": "function",
     "desc": "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed."
    },
    {
     "name": "alignElWithMouse",
     "sig": "(HTMLElement el, int iPageX, int iPageY)",
     "type": "function",
     "desc": "Sets the element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is."
    },
    {
     "name": "applyConfig",
     "sig": "()",
     "type": "function",
     "desc": "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object."
    },
    {
     "name": "autoOffset",
     "sig": "(int iPageX, int iPageY)",
     "type": "function",
     "desc": "Sets the pointer offset to the distance between the linked element's top\nleft corner and the location the element was clicked"
    },
    {
     "name": "cachePosition",
     "sig": "( iPageX,  iPageY)",
     "type": "function",
     "desc": "Saves the most recent position so that we can reset the constraints and\ntick marks on-demand.  We need to know this so that we can calculate the\nnumber of pixels the element is offset from its original position."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearConstraints",
     "sig": "()",
     "type": "function",
     "desc": "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time."
    },
    {
     "name": "clearTicks",
     "sig": "()",
     "type": "function",
     "desc": "Clears any tick interval defined for this instance"
    },
    {
     "name": "createFrame",
     "sig": "()",
     "type": "function",
     "desc": "Creates the proxy element if it does not yet exist"
    },
    {
     "name": "endDrag",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Fired when we are done dragging the object"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "function toString() {\n    [native code]\n}",
     "sig": "()",
     "type": "function",
     "desc": "toString method"
    },
    {
     "name": "getDragEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the linked element"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "init",
     "sig": "( id, String sGroup, object config)",
     "type": "function",
     "desc": "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass"
    },
    {
     "name": "initFrame",
     "sig": "()",
     "type": "function",
     "desc": "Initialization for the drag frame element.  Must be called in the\nconstructor of all subclasses"
    },
    {
     "name": "initTarget",
     "sig": "( id, String sGroup, object config)",
     "type": "function",
     "desc": "Initializes Targeting functionality only... the object does not\nget a mousedown handler."
    },
    {
     "name": "isLocked",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)"
    },
    {
     "name": "isTarget",
     "sig": "()",
     "type": "function",
     "desc": "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false."
    },
    {
     "name": "isValidHandleChild",
     "sig": "(HTMLElement node)",
     "type": "function",
     "desc": "Checks the tag exclusion list to see if this click should be ignored"
    },
    {
     "name": "lock",
     "sig": "()",
     "type": "function",
     "desc": "Lock this instance"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onAvailable",
     "sig": "()",
     "type": "function",
     "desc": "Override the onAvailable method to do what is needed after the initial\nposition was determined."
    },
    {
     "name": "onDrag",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Abstract method called during the onMouseMove event while dragging an\nobject."
    },
    {
     "name": "onDragDrop",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this item is dropped on another DragDrop\nobj"
    },
    {
     "name": "onDragEnter",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this element fist begins hovering over\nanother DragDrop obj"
    },
    {
     "name": "onDragOut",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when we are no longer hovering over an element"
    },
    {
     "name": "onDragOver",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this element is hovering over another\nDragDrop obj"
    },
    {
     "name": "onInvalidDrop",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Abstract method called when this item is dropped on an area with no\ndrop target"
    },
    {
     "name": "onMouseDown",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Event handler that fires when a drag/drop obj gets a mousedown"
    },
    {
     "name": "onMouseUp",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Event handler that fires when a drag/drop obj gets a mouseup"
    },
    {
     "name": "padding",
     "sig": "()",
     "type": "function",
     "desc": "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeFromGroup",
     "sig": "(string sGroup)",
     "type": "function",
     "desc": "Remove's this instance from the supplied interaction group"
    },
    {
     "name": "removeInvalidHandleClass",
     "sig": "(string cssClass)",
     "type": "function",
     "desc": "Unsets an invalid css class"
    },
    {
     "name": "removeInvalidHandleId",
     "sig": "(string id)",
     "type": "function",
     "desc": "Unsets an invalid handle id"
    },
    {
     "name": "removeInvalidHandleType",
     "sig": "(string tagName)",
     "type": "function",
     "desc": "Unsets an excluded tag name set by addInvalidHandleType"
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "resetConstraints",
     "sig": "(boolean maintainOffset)",
     "type": "function",
     "desc": "resetConstraints must be called if you manually reposition a dd element."
    },
    {
     "name": "setDelta",
     "sig": "(int iDeltaX, int iDeltaY)",
     "type": "function",
     "desc": "Sets the pointer offset.  You can call this directly to force the\noffset to be in a particular location (e.g., pass in 0,0 to set it\nto the center of the object)"
    },
    {
     "name": "setDragElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag"
    },
    {
     "name": "setDragElPos",
     "sig": "(int iPageX, int iPageY)",
     "type": "function",
     "desc": "Sets the drag element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is."
    },
    {
     "name": "setHandleElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation."
    },
    {
     "name": "setInitPosition",
     "sig": "(int diffX, int diffY)",
     "type": "function",
     "desc": "Stores the initial placement of the linked element."
    },
    {
     "name": "setOuterHandleElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to set an element outside of the linked element as a drag\nhandle"
    },
    {
     "name": "setPadding",
     "sig": "(int iTop, int iRight, int iBot, int iLeft)",
     "type": "function",
     "desc": "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second."
    },
    {
     "name": "setXConstraint",
     "sig": "(int iLeft, int iRight, int iTickSize)",
     "type": "function",
     "desc": "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis."
    },
    {
     "name": "setYConstraint",
     "sig": "(int iUp, int iDown, int iTickSize)",
     "type": "function",
     "desc": "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis."
    },
    {
     "name": "startDrag",
     "sig": "(int X, int Y)",
     "type": "function",
     "desc": "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unlock",
     "sig": "()",
     "type": "function",
     "desc": "Unlock this instace"
    },
    {
     "name": "unreg",
     "sig": "()",
     "type": "function",
     "desc": "Remove all drag and drop hooks for this element"
    }
   ]
  },
  "Roo.dd.DDTarget": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addInvalidHandleClass",
     "sig": "(string cssClass)",
     "type": "function",
     "desc": "Lets you specify a css class of elements that will not initiate a drag"
    },
    {
     "name": "addInvalidHandleId",
     "sig": "(string id)",
     "type": "function",
     "desc": "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag"
    },
    {
     "name": "addInvalidHandleType",
     "sig": "(string tagName)",
     "type": "function",
     "desc": "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag."
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addToGroup",
     "sig": "( sGroup)",
     "type": "function",
     "desc": "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed."
    },
    {
     "name": "applyConfig",
     "sig": "()",
     "type": "function",
     "desc": "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearConstraints",
     "sig": "()",
     "type": "function",
     "desc": "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time."
    },
    {
     "name": "clearTicks",
     "sig": "()",
     "type": "function",
     "desc": "Clears any tick interval defined for this instance"
    },
    {
     "name": "endDrag",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Fired when we are done dragging the object"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "function toString() {\n    [native code]\n}",
     "sig": "()",
     "type": "function",
     "desc": "toString method"
    },
    {
     "name": "getDragEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the linked element"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "init",
     "sig": "( id, String sGroup, object config)",
     "type": "function",
     "desc": "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass"
    },
    {
     "name": "initTarget",
     "sig": "( id, String sGroup, object config)",
     "type": "function",
     "desc": "Initializes Targeting functionality only... the object does not\nget a mousedown handler."
    },
    {
     "name": "isLocked",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)"
    },
    {
     "name": "isTarget",
     "sig": "()",
     "type": "function",
     "desc": "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false."
    },
    {
     "name": "isValidHandleChild",
     "sig": "(HTMLElement node)",
     "type": "function",
     "desc": "Checks the tag exclusion list to see if this click should be ignored"
    },
    {
     "name": "lock",
     "sig": "()",
     "type": "function",
     "desc": "Lock this instance"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onAvailable",
     "sig": "()",
     "type": "function",
     "desc": "Override the onAvailable method to do what is needed after the initial\nposition was determined."
    },
    {
     "name": "onDrag",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Abstract method called during the onMouseMove event while dragging an\nobject."
    },
    {
     "name": "onDragDrop",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this item is dropped on another DragDrop\nobj"
    },
    {
     "name": "onDragEnter",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this element fist begins hovering over\nanother DragDrop obj"
    },
    {
     "name": "onDragOut",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when we are no longer hovering over an element"
    },
    {
     "name": "onDragOver",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this element is hovering over another\nDragDrop obj"
    },
    {
     "name": "onInvalidDrop",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Abstract method called when this item is dropped on an area with no\ndrop target"
    },
    {
     "name": "onMouseDown",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Event handler that fires when a drag/drop obj gets a mousedown"
    },
    {
     "name": "onMouseUp",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Event handler that fires when a drag/drop obj gets a mouseup"
    },
    {
     "name": "padding",
     "sig": "()",
     "type": "function",
     "desc": "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeFromGroup",
     "sig": "(string sGroup)",
     "type": "function",
     "desc": "Remove's this instance from the supplied interaction group"
    },
    {
     "name": "removeInvalidHandleClass",
     "sig": "(string cssClass)",
     "type": "function",
     "desc": "Unsets an invalid css class"
    },
    {
     "name": "removeInvalidHandleId",
     "sig": "(string id)",
     "type": "function",
     "desc": "Unsets an invalid handle id"
    },
    {
     "name": "removeInvalidHandleType",
     "sig": "(string tagName)",
     "type": "function",
     "desc": "Unsets an excluded tag name set by addInvalidHandleType"
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "resetConstraints",
     "sig": "(boolean maintainOffset)",
     "type": "function",
     "desc": "resetConstraints must be called if you manually reposition a dd element."
    },
    {
     "name": "setDragElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag"
    },
    {
     "name": "setHandleElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation."
    },
    {
     "name": "setInitPosition",
     "sig": "(int diffX, int diffY)",
     "type": "function",
     "desc": "Stores the initial placement of the linked element."
    },
    {
     "name": "setOuterHandleElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to set an element outside of the linked element as a drag\nhandle"
    },
    {
     "name": "setPadding",
     "sig": "(int iTop, int iRight, int iBot, int iLeft)",
     "type": "function",
     "desc": "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second."
    },
    {
     "name": "setXConstraint",
     "sig": "(int iLeft, int iRight, int iTickSize)",
     "type": "function",
     "desc": "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis."
    },
    {
     "name": "setYConstraint",
     "sig": "(int iUp, int iDown, int iTickSize)",
     "type": "function",
     "desc": "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis."
    },
    {
     "name": "startDrag",
     "sig": "(int X, int Y)",
     "type": "function",
     "desc": "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unlock",
     "sig": "()",
     "type": "function",
     "desc": "Unlock this instace"
    },
    {
     "name": "unreg",
     "sig": "()",
     "type": "function",
     "desc": "Remove all drag and drop hooks for this element"
    }
   ]
  },
  "Roo.dd.DragDrop": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addInvalidHandleClass",
     "sig": "(string cssClass)",
     "type": "function",
     "desc": "Lets you specify a css class of elements that will not initiate a drag"
    },
    {
     "name": "addInvalidHandleId",
     "sig": "(string id)",
     "type": "function",
     "desc": "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag"
    },
    {
     "name": "addInvalidHandleType",
     "sig": "(string tagName)",
     "type": "function",
     "desc": "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag."
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addToGroup",
     "sig": "( sGroup)",
     "type": "function",
     "desc": "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed."
    },
    {
     "name": "applyConfig",
     "sig": "()",
     "type": "function",
     "desc": "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearConstraints",
     "sig": "()",
     "type": "function",
     "desc": "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time."
    },
    {
     "name": "clearTicks",
     "sig": "()",
     "type": "function",
     "desc": "Clears any tick interval defined for this instance"
    },
    {
     "name": "endDrag",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Fired when we are done dragging the object"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "function toString() {\n    [native code]\n}",
     "sig": "()",
     "type": "function",
     "desc": "toString method"
    },
    {
     "name": "getDragEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the linked element"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "init",
     "sig": "( id, String sGroup, object config)",
     "type": "function",
     "desc": "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass"
    },
    {
     "name": "initTarget",
     "sig": "( id, String sGroup, object config)",
     "type": "function",
     "desc": "Initializes Targeting functionality only... the object does not\nget a mousedown handler."
    },
    {
     "name": "isLocked",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)"
    },
    {
     "name": "isTarget",
     "sig": "()",
     "type": "function",
     "desc": "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false."
    },
    {
     "name": "isValidHandleChild",
     "sig": "(HTMLElement node)",
     "type": "function",
     "desc": "Checks the tag exclusion list to see if this click should be ignored"
    },
    {
     "name": "lock",
     "sig": "()",
     "type": "function",
     "desc": "Lock this instance"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onAvailable",
     "sig": "()",
     "type": "function",
     "desc": "Override the onAvailable method to do what is needed after the initial\nposition was determined."
    },
    {
     "name": "onDrag",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Abstract method called during the onMouseMove event while dragging an\nobject."
    },
    {
     "name": "onDragDrop",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this item is dropped on another DragDrop\nobj"
    },
    {
     "name": "onDragEnter",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this element fist begins hovering over\nanother DragDrop obj"
    },
    {
     "name": "onDragOut",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when we are no longer hovering over an element"
    },
    {
     "name": "onDragOver",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this element is hovering over another\nDragDrop obj"
    },
    {
     "name": "onInvalidDrop",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Abstract method called when this item is dropped on an area with no\ndrop target"
    },
    {
     "name": "onMouseDown",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Event handler that fires when a drag/drop obj gets a mousedown"
    },
    {
     "name": "onMouseUp",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Event handler that fires when a drag/drop obj gets a mouseup"
    },
    {
     "name": "padding",
     "sig": "()",
     "type": "function",
     "desc": "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeFromGroup",
     "sig": "(string sGroup)",
     "type": "function",
     "desc": "Remove's this instance from the supplied interaction group"
    },
    {
     "name": "removeInvalidHandleClass",
     "sig": "(string cssClass)",
     "type": "function",
     "desc": "Unsets an invalid css class"
    },
    {
     "name": "removeInvalidHandleId",
     "sig": "(string id)",
     "type": "function",
     "desc": "Unsets an invalid handle id"
    },
    {
     "name": "removeInvalidHandleType",
     "sig": "(string tagName)",
     "type": "function",
     "desc": "Unsets an excluded tag name set by addInvalidHandleType"
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "resetConstraints",
     "sig": "(boolean maintainOffset)",
     "type": "function",
     "desc": "resetConstraints must be called if you manually reposition a dd element."
    },
    {
     "name": "setDragElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag"
    },
    {
     "name": "setHandleElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation."
    },
    {
     "name": "setInitPosition",
     "sig": "(int diffX, int diffY)",
     "type": "function",
     "desc": "Stores the initial placement of the linked element."
    },
    {
     "name": "setOuterHandleElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to set an element outside of the linked element as a drag\nhandle"
    },
    {
     "name": "setPadding",
     "sig": "(int iTop, int iRight, int iBot, int iLeft)",
     "type": "function",
     "desc": "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second."
    },
    {
     "name": "setXConstraint",
     "sig": "(int iLeft, int iRight, int iTickSize)",
     "type": "function",
     "desc": "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis."
    },
    {
     "name": "setYConstraint",
     "sig": "(int iUp, int iDown, int iTickSize)",
     "type": "function",
     "desc": "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis."
    },
    {
     "name": "startDrag",
     "sig": "(int X, int Y)",
     "type": "function",
     "desc": "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unlock",
     "sig": "()",
     "type": "function",
     "desc": "Unlock this instace"
    },
    {
     "name": "unreg",
     "sig": "()",
     "type": "function",
     "desc": "Remove all drag and drop hooks for this element"
    }
   ]
  },
  "Roo.dd.DragDropMgr": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "getBestMatch",
     "sig": "(DragDrop[] dds)",
     "type": "function",
     "desc": "Helper function for getting the best match from the list of drag\nand drop objects returned by the drag and drop events when we are\nin INTERSECT mode.  It returns either the first object that the\ncursor is over, or the object that has the greatest overlap with\nthe dragged element."
    },
    {
     "name": "getCss",
     "sig": "(String id)",
     "type": "function",
     "desc": "Returns the style property for the DOM element (i.e.,\ndocument.getElById(id).style)"
    },
    {
     "name": "getDDById",
     "sig": "(String id)",
     "type": "function",
     "desc": "Returns the DragDrop instance for a given id"
    },
    {
     "name": "getElement",
     "sig": "(String id)",
     "type": "function",
     "desc": "Returns the actual DOM element"
    },
    {
     "name": "getLocation",
     "sig": "(DragDrop oDD)",
     "type": "function",
     "desc": "Returns a Region object containing the drag and drop element's position\nand size, including the padding configured for it"
    },
    {
     "name": "getPosX",
     "sig": "( el)",
     "type": "function",
     "desc": "Returns the X position of an html element"
    },
    {
     "name": "getPosY",
     "sig": "( el)",
     "type": "function",
     "desc": "Returns the Y position of an html element"
    },
    {
     "name": "getRelated",
     "sig": "(DragDrop p_oDD, boolean bTargetsOnly)",
     "type": "function",
     "desc": "Returns the drag and drop instances that are in all groups the\npassed in instance belongs to."
    },
    {
     "name": "getScrollLeft",
     "sig": "()",
     "type": "function",
     "desc": "Gets the scrollLeft"
    },
    {
     "name": "getScrollTop",
     "sig": "()",
     "type": "function",
     "desc": "Gets the scrollTop"
    },
    {
     "name": "getStyle",
     "sig": "(HTMLElement el, string styleProp)",
     "type": "function",
     "desc": "Returns the specified element style property"
    },
    {
     "name": "handleWasClicked",
     "sig": "( node)",
     "type": "function",
     "desc": "Recursively searches the immediate parent and all child nodes for\nthe handle element in order to determine wheter or not it was\nclicked."
    },
    {
     "name": "isDragDrop",
     "sig": "(String id)",
     "type": "function",
     "desc": "Utility function to determine if a given element has been\nregistered as a drag drop item."
    },
    {
     "name": "isHandle",
     "sig": "(String id)",
     "type": "function",
     "desc": "Utility function to determine if a given element has been\nregistered as a drag drop handle for the given Drag Drop object."
    },
    {
     "name": "isLegalTarget",
     "sig": "(DragDrop the, DragDrop the)",
     "type": "function",
     "desc": "Returns true if the specified dd target is a legal target for\nthe specifice drag obj"
    },
    {
     "name": "isLocked",
     "sig": "()",
     "type": "function",
     "desc": "Is drag and drop locked?"
    },
    {
     "name": "isTypeOfDD",
     "sig": "(Object the)",
     "type": "function",
     "desc": "My goal is to be able to transparently determine if an object is\ntypeof DragDrop, and the exact subclass of DragDrop.  typeof\nreturns \"object\", oDD.constructor.toString() always returns\n\"DragDrop\" and not the name of the subclass.  So for now it just\nevaluates a well-known variable in DragDrop."
    },
    {
     "name": "lock",
     "sig": "()",
     "type": "function",
     "desc": "Lock all drag and drop functionality"
    },
    {
     "name": "moveToEl",
     "sig": "(HTMLElement moveEl, HTMLElement targetEl)",
     "type": "function",
     "desc": "Sets the x/y position of an element to the location of the\ntarget element."
    },
    {
     "name": "numericSort",
     "sig": "()",
     "type": "function",
     "desc": "Numeric array sort function"
    },
    {
     "name": "refreshCache",
     "sig": "(Object groups)",
     "type": "function",
     "desc": "Refreshes the cache of the top-left and bottom-right points of the\ndrag and drop objects in the specified group(s).  This is in the\nformat that is stored in the drag and drop instance, so typical\nusage is:\n<code>\nRoo.dd.DragDropMgr.refreshCache(ddinstance.groups);\n</code>\nAlternatively:\n<code>\nRoo.dd.DragDropMgr.refreshCache({group1:true, group2:true});\n</code>"
    },
    {
     "name": "regDragDrop",
     "sig": "(DragDrop oDD, String sGroup)",
     "type": "function",
     "desc": "Each DragDrop instance must be registered with the DragDropMgr.\nThis is executed in DragDrop.init()"
    },
    {
     "name": "regHandle",
     "sig": "(String sDDId, String sHandleId)",
     "type": "function",
     "desc": "Each DragDrop handle element must be registered.  This is done\nautomatically when executing DragDrop.setHandleElId()"
    },
    {
     "name": "startDrag",
     "sig": "( x,  y)",
     "type": "function",
     "desc": "Fired when either the drag pixel threshol or the mousedown hold\ntime threshold has been met."
    },
    {
     "name": "stopEvent",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Utility to stop event propagation and event default, if these\nfeatures are turned on."
    },
    {
     "name": "swapNode",
     "sig": "( n1,  n2)",
     "type": "function",
     "desc": "Swap two nodes.  In IE, we use the native method, for others we\nemulate the IE behavior"
    },
    {
     "name": "unlock",
     "sig": "()",
     "type": "function",
     "desc": "Unlock all drag and drop functionality"
    },
    {
     "name": "verifyEl",
     "sig": "(HTMLElement el)",
     "type": "function",
     "desc": "This checks to make sure an element exists and is in the DOM.  The\nmain purpose is to handle cases where innerHTML is used to remove\ndrag and drop objects from the DOM.  IE provides an 'unspecified\nerror' when trying to access the offsetParent of such an element"
    }
   ]
  },
  "Roo.dd.DragSource": {
   "props": [
    {
     "name": "dropAllowed",
     "type": "String",
     "desc": "The CSS class returned to the drag source when drop is allowed (defaults to \"x-dd-drop-ok\").",
     "memberOf": ""
    },
    {
     "name": "dropNotAllowed",
     "type": "String",
     "desc": "The CSS class returned to the drag source when drop is not allowed (defaults to \"x-dd-drop-nodrop\").",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addInvalidHandleClass",
     "sig": "(string cssClass)",
     "type": "function",
     "desc": "Lets you specify a css class of elements that will not initiate a drag"
    },
    {
     "name": "addInvalidHandleId",
     "sig": "(string id)",
     "type": "function",
     "desc": "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag"
    },
    {
     "name": "addInvalidHandleType",
     "sig": "(string tagName)",
     "type": "function",
     "desc": "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag."
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addToGroup",
     "sig": "( sGroup)",
     "type": "function",
     "desc": "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed."
    },
    {
     "name": "alignElWithMouse",
     "sig": "(HTMLElement el, int iPageX, int iPageY)",
     "type": "function",
     "desc": "Sets the element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is."
    },
    {
     "name": "applyConfig",
     "sig": "()",
     "type": "function",
     "desc": "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object."
    },
    {
     "name": "autoOffset",
     "sig": "(int iPageX, int iPageY)",
     "type": "function",
     "desc": "Sets the pointer offset to the distance between the linked element's top\nleft corner and the location the element was clicked"
    },
    {
     "name": "beforeDragDrop",
     "sig": "(Roo.dd.DragDrop target, Event e, String id)",
     "type": "function",
     "desc": "An empty function by default, but provided so that you can perform a custom action before the dragged\nitem is dropped onto the target and optionally cancel the onDragDrop."
    },
    {
     "name": "beforeDragEnter",
     "sig": "(Roo.dd.DragDrop target, Event e, String id)",
     "type": "function",
     "desc": "An empty function by default, but provided so that you can perform a custom action\nbefore the dragged item enters the drop target and optionally cancel the onDragEnter."
    },
    {
     "name": "beforeDragOut",
     "sig": "(Roo.dd.DragDrop target, Event e, String id)",
     "type": "function",
     "desc": "An empty function by default, but provided so that you can perform a custom action before the dragged\nitem is dragged out of the target without dropping, and optionally cancel the onDragOut."
    },
    {
     "name": "beforeDragOver",
     "sig": "(Roo.dd.DragDrop target, Event e, String id)",
     "type": "function",
     "desc": "An empty function by default, but provided so that you can perform a custom action\nwhile the dragged item is over the drop target and optionally cancel the onDragOver."
    },
    {
     "name": "beforeInvalidDrop",
     "sig": "(Roo.dd.DragDrop target, Event e, String id)",
     "type": "function",
     "desc": "An empty function by default, but provided so that you can perform a custom action after an invalid\ndrop has occurred."
    },
    {
     "name": "cachePosition",
     "sig": "( iPageX,  iPageY)",
     "type": "function",
     "desc": "Saves the most recent position so that we can reset the constraints and\ntick marks on-demand.  We need to know this so that we can calculate the\nnumber of pixels the element is offset from its original position."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearConstraints",
     "sig": "()",
     "type": "function",
     "desc": "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time."
    },
    {
     "name": "clearTicks",
     "sig": "()",
     "type": "function",
     "desc": "Clears any tick interval defined for this instance"
    },
    {
     "name": "createFrame",
     "sig": "()",
     "type": "function",
     "desc": "Creates the proxy element if it does not yet exist"
    },
    {
     "name": "endDrag",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Fired when we are done dragging the object"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "function toString() {\n    [native code]\n}",
     "sig": "()",
     "type": "function",
     "desc": "toString method"
    },
    {
     "name": "getDragData",
     "sig": "()",
     "type": "function",
     "desc": "Returns the data object associated with this drag source"
    },
    {
     "name": "getDragEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the linked element"
    },
    {
     "name": "getProxy",
     "sig": "()",
     "type": "function",
     "desc": "Returns the drag source's underlying {@link Roo.dd.StatusProxy}"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hideProxy",
     "sig": "()",
     "type": "function",
     "desc": "Hides the drag source's {@link Roo.dd.StatusProxy}"
    },
    {
     "name": "init",
     "sig": "( id, String sGroup, object config)",
     "type": "function",
     "desc": "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass"
    },
    {
     "name": "initFrame",
     "sig": "()",
     "type": "function",
     "desc": "Initialization for the drag frame element.  Must be called in the\nconstructor of all subclasses"
    },
    {
     "name": "initTarget",
     "sig": "( id, String sGroup, object config)",
     "type": "function",
     "desc": "Initializes Targeting functionality only... the object does not\nget a mousedown handler."
    },
    {
     "name": "isLocked",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)"
    },
    {
     "name": "isTarget",
     "sig": "()",
     "type": "function",
     "desc": "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false."
    },
    {
     "name": "isValidHandleChild",
     "sig": "(HTMLElement node)",
     "type": "function",
     "desc": "Checks the tag exclusion list to see if this click should be ignored"
    },
    {
     "name": "lock",
     "sig": "()",
     "type": "function",
     "desc": "Lock this instance"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onAvailable",
     "sig": "()",
     "type": "function",
     "desc": "Override the onAvailable method to do what is needed after the initial\nposition was determined."
    },
    {
     "name": "onBeforeDrag",
     "sig": "(Object data, Event e)",
     "type": "function",
     "desc": "An empty function by default, but provided so that you can perform a custom action before the initial\ndrag event begins and optionally cancel it."
    },
    {
     "name": "onDrag",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Abstract method called during the onMouseMove event while dragging an\nobject."
    },
    {
     "name": "onDragDrop",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this item is dropped on another DragDrop\nobj"
    },
    {
     "name": "onDragEnter",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this element fist begins hovering over\nanother DragDrop obj"
    },
    {
     "name": "onDragOut",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when we are no longer hovering over an element"
    },
    {
     "name": "onDragOver",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this element is hovering over another\nDragDrop obj"
    },
    {
     "name": "onInvalidDrop",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Abstract method called when this item is dropped on an area with no\ndrop target"
    },
    {
     "name": "onMouseDown",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Event handler that fires when a drag/drop obj gets a mousedown"
    },
    {
     "name": "onMouseUp",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Event handler that fires when a drag/drop obj gets a mouseup"
    },
    {
     "name": "onStartDrag",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "An empty function by default, but provided so that you can perform a custom action once the initial\ndrag event has begun.  The drag cannot be canceled from this function."
    },
    {
     "name": "padding",
     "sig": "()",
     "type": "function",
     "desc": "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeFromGroup",
     "sig": "(string sGroup)",
     "type": "function",
     "desc": "Remove's this instance from the supplied interaction group"
    },
    {
     "name": "removeInvalidHandleClass",
     "sig": "(string cssClass)",
     "type": "function",
     "desc": "Unsets an invalid css class"
    },
    {
     "name": "removeInvalidHandleId",
     "sig": "(string id)",
     "type": "function",
     "desc": "Unsets an invalid handle id"
    },
    {
     "name": "removeInvalidHandleType",
     "sig": "(string tagName)",
     "type": "function",
     "desc": "Unsets an excluded tag name set by addInvalidHandleType"
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "resetConstraints",
     "sig": "(boolean maintainOffset)",
     "type": "function",
     "desc": "resetConstraints must be called if you manually reposition a dd element."
    },
    {
     "name": "setDelta",
     "sig": "(int iDeltaX, int iDeltaY)",
     "type": "function",
     "desc": "Sets the pointer offset.  You can call this directly to force the\noffset to be in a particular location (e.g., pass in 0,0 to set it\nto the center of the object)"
    },
    {
     "name": "setDragElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag"
    },
    {
     "name": "setDragElPos",
     "sig": "(int iPageX, int iPageY)",
     "type": "function",
     "desc": "Sets the drag element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is."
    },
    {
     "name": "setHandleElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation."
    },
    {
     "name": "setInitPosition",
     "sig": "(int diffX, int diffY)",
     "type": "function",
     "desc": "Stores the initial placement of the linked element."
    },
    {
     "name": "setOuterHandleElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to set an element outside of the linked element as a drag\nhandle"
    },
    {
     "name": "setPadding",
     "sig": "(int iTop, int iRight, int iBot, int iLeft)",
     "type": "function",
     "desc": "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second."
    },
    {
     "name": "setXConstraint",
     "sig": "(int iLeft, int iRight, int iTickSize)",
     "type": "function",
     "desc": "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis."
    },
    {
     "name": "setYConstraint",
     "sig": "(int iUp, int iDown, int iTickSize)",
     "type": "function",
     "desc": "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis."
    },
    {
     "name": "startDrag",
     "sig": "(int X, int Y)",
     "type": "function",
     "desc": "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unlock",
     "sig": "()",
     "type": "function",
     "desc": "Unlock this instace"
    },
    {
     "name": "unreg",
     "sig": "()",
     "type": "function",
     "desc": "Remove all drag and drop hooks for this element"
    }
   ]
  },
  "Roo.dd.DragZone": {
   "props": [
    {
     "name": "containerScroll",
     "type": "Boolean",
     "desc": "True to register this container with the Scrollmanager\nfor auto scrolling during drag operations.",
     "memberOf": ""
    },
    {
     "name": "hlColor",
     "type": "String",
     "desc": "The color to use when visually highlighting the drag source in the afterRepair\nmethod after a failed drop (defaults to \"c3daf9\" - light blue)",
     "memberOf": ""
    },
    {
     "name": "dropAllowed",
     "type": "String",
     "desc": "The CSS class returned to the drag source when drop is allowed (defaults to \"x-dd-drop-ok\").",
     "memberOf": "Roo.dd.DragSource"
    },
    {
     "name": "dropNotAllowed",
     "type": "String",
     "desc": "The CSS class returned to the drag source when drop is not allowed (defaults to \"x-dd-drop-nodrop\").",
     "memberOf": "Roo.dd.DragSource"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addInvalidHandleClass",
     "sig": "(string cssClass)",
     "type": "function",
     "desc": "Lets you specify a css class of elements that will not initiate a drag"
    },
    {
     "name": "addInvalidHandleId",
     "sig": "(string id)",
     "type": "function",
     "desc": "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag"
    },
    {
     "name": "addInvalidHandleType",
     "sig": "(string tagName)",
     "type": "function",
     "desc": "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag."
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addToGroup",
     "sig": "( sGroup)",
     "type": "function",
     "desc": "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed."
    },
    {
     "name": "afterRepair",
     "sig": "()",
     "type": "function",
     "desc": "Called after a repair of an invalid drop. By default, highlights this.dragData.ddel"
    },
    {
     "name": "alignElWithMouse",
     "sig": "(HTMLElement el, int iPageX, int iPageY)",
     "type": "function",
     "desc": "Sets the element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is."
    },
    {
     "name": "applyConfig",
     "sig": "()",
     "type": "function",
     "desc": "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object."
    },
    {
     "name": "autoOffset",
     "sig": "(int iPageX, int iPageY)",
     "type": "function",
     "desc": "Sets the pointer offset to the distance between the linked element's top\nleft corner and the location the element was clicked"
    },
    {
     "name": "beforeDragDrop",
     "sig": "(Roo.dd.DragDrop target, Event e, String id)",
     "type": "function",
     "desc": "An empty function by default, but provided so that you can perform a custom action before the dragged\nitem is dropped onto the target and optionally cancel the onDragDrop."
    },
    {
     "name": "beforeDragEnter",
     "sig": "(Roo.dd.DragDrop target, Event e, String id)",
     "type": "function",
     "desc": "An empty function by default, but provided so that you can perform a custom action\nbefore the dragged item enters the drop target and optionally cancel the onDragEnter."
    },
    {
     "name": "beforeDragOut",
     "sig": "(Roo.dd.DragDrop target, Event e, String id)",
     "type": "function",
     "desc": "An empty function by default, but provided so that you can perform a custom action before the dragged\nitem is dragged out of the target without dropping, and optionally cancel the onDragOut."
    },
    {
     "name": "beforeDragOver",
     "sig": "(Roo.dd.DragDrop target, Event e, String id)",
     "type": "function",
     "desc": "An empty function by default, but provided so that you can perform a custom action\nwhile the dragged item is over the drop target and optionally cancel the onDragOver."
    },
    {
     "name": "beforeInvalidDrop",
     "sig": "(Roo.dd.DragDrop target, Event e, String id)",
     "type": "function",
     "desc": "An empty function by default, but provided so that you can perform a custom action after an invalid\ndrop has occurred."
    },
    {
     "name": "cachePosition",
     "sig": "( iPageX,  iPageY)",
     "type": "function",
     "desc": "Saves the most recent position so that we can reset the constraints and\ntick marks on-demand.  We need to know this so that we can calculate the\nnumber of pixels the element is offset from its original position."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearConstraints",
     "sig": "()",
     "type": "function",
     "desc": "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time."
    },
    {
     "name": "clearTicks",
     "sig": "()",
     "type": "function",
     "desc": "Clears any tick interval defined for this instance"
    },
    {
     "name": "createFrame",
     "sig": "()",
     "type": "function",
     "desc": "Creates the proxy element if it does not yet exist"
    },
    {
     "name": "endDrag",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Fired when we are done dragging the object"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "function toString() {\n    [native code]\n}",
     "sig": "()",
     "type": "function",
     "desc": "toString method"
    },
    {
     "name": "getDragData",
     "sig": "(EventObject e)",
     "type": "function",
     "desc": "Called when a mousedown occurs in this container. Looks in {@link Roo.dd.Registry}\nfor a valid target to drag based on the mouse down. Override this method\nto provide your own lookup logic (e.g. finding a child by class name). Make sure your returned\nobject has a \"ddel\" attribute (with an HTML Element) for other functions to work."
    },
    {
     "name": "getDragEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the linked element"
    },
    {
     "name": "getProxy",
     "sig": "()",
     "type": "function",
     "desc": "Returns the drag source's underlying {@link Roo.dd.StatusProxy}"
    },
    {
     "name": "getRepairXY",
     "sig": "(EventObject e)",
     "type": "function",
     "desc": "Called before a repair of an invalid drop to get the XY to animate to. By default returns\nthe XY of this.dragData.ddel"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hideProxy",
     "sig": "()",
     "type": "function",
     "desc": "Hides the drag source's {@link Roo.dd.StatusProxy}"
    },
    {
     "name": "init",
     "sig": "( id, String sGroup, object config)",
     "type": "function",
     "desc": "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass"
    },
    {
     "name": "initFrame",
     "sig": "()",
     "type": "function",
     "desc": "Initialization for the drag frame element.  Must be called in the\nconstructor of all subclasses"
    },
    {
     "name": "initTarget",
     "sig": "( id, String sGroup, object config)",
     "type": "function",
     "desc": "Initializes Targeting functionality only... the object does not\nget a mousedown handler."
    },
    {
     "name": "isLocked",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)"
    },
    {
     "name": "isTarget",
     "sig": "()",
     "type": "function",
     "desc": "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false."
    },
    {
     "name": "isValidHandleChild",
     "sig": "(HTMLElement node)",
     "type": "function",
     "desc": "Checks the tag exclusion list to see if this click should be ignored"
    },
    {
     "name": "lock",
     "sig": "()",
     "type": "function",
     "desc": "Lock this instance"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onAvailable",
     "sig": "()",
     "type": "function",
     "desc": "Override the onAvailable method to do what is needed after the initial\nposition was determined."
    },
    {
     "name": "onBeforeDrag",
     "sig": "(Object data, Event e)",
     "type": "function",
     "desc": "An empty function by default, but provided so that you can perform a custom action before the initial\ndrag event begins and optionally cancel it."
    },
    {
     "name": "onDrag",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Abstract method called during the onMouseMove event while dragging an\nobject."
    },
    {
     "name": "onDragDrop",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this item is dropped on another DragDrop\nobj"
    },
    {
     "name": "onDragEnter",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this element fist begins hovering over\nanother DragDrop obj"
    },
    {
     "name": "onDragOut",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when we are no longer hovering over an element"
    },
    {
     "name": "onDragOver",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this element is hovering over another\nDragDrop obj"
    },
    {
     "name": "onInitDrag",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called once drag threshold has been reached to initialize the proxy element. By default, it clones the\nthis.dragData.ddel"
    },
    {
     "name": "onInvalidDrop",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Abstract method called when this item is dropped on an area with no\ndrop target"
    },
    {
     "name": "onMouseDown",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Event handler that fires when a drag/drop obj gets a mousedown"
    },
    {
     "name": "onMouseUp",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Event handler that fires when a drag/drop obj gets a mouseup"
    },
    {
     "name": "onStartDrag",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "An empty function by default, but provided so that you can perform a custom action once the initial\ndrag event has begun.  The drag cannot be canceled from this function."
    },
    {
     "name": "padding",
     "sig": "()",
     "type": "function",
     "desc": "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeFromGroup",
     "sig": "(string sGroup)",
     "type": "function",
     "desc": "Remove's this instance from the supplied interaction group"
    },
    {
     "name": "removeInvalidHandleClass",
     "sig": "(string cssClass)",
     "type": "function",
     "desc": "Unsets an invalid css class"
    },
    {
     "name": "removeInvalidHandleId",
     "sig": "(string id)",
     "type": "function",
     "desc": "Unsets an invalid handle id"
    },
    {
     "name": "removeInvalidHandleType",
     "sig": "(string tagName)",
     "type": "function",
     "desc": "Unsets an excluded tag name set by addInvalidHandleType"
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "resetConstraints",
     "sig": "(boolean maintainOffset)",
     "type": "function",
     "desc": "resetConstraints must be called if you manually reposition a dd element."
    },
    {
     "name": "setDelta",
     "sig": "(int iDeltaX, int iDeltaY)",
     "type": "function",
     "desc": "Sets the pointer offset.  You can call this directly to force the\noffset to be in a particular location (e.g., pass in 0,0 to set it\nto the center of the object)"
    },
    {
     "name": "setDragElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag"
    },
    {
     "name": "setDragElPos",
     "sig": "(int iPageX, int iPageY)",
     "type": "function",
     "desc": "Sets the drag element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is."
    },
    {
     "name": "setHandleElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation."
    },
    {
     "name": "setInitPosition",
     "sig": "(int diffX, int diffY)",
     "type": "function",
     "desc": "Stores the initial placement of the linked element."
    },
    {
     "name": "setOuterHandleElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to set an element outside of the linked element as a drag\nhandle"
    },
    {
     "name": "setPadding",
     "sig": "(int iTop, int iRight, int iBot, int iLeft)",
     "type": "function",
     "desc": "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second."
    },
    {
     "name": "setXConstraint",
     "sig": "(int iLeft, int iRight, int iTickSize)",
     "type": "function",
     "desc": "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis."
    },
    {
     "name": "setYConstraint",
     "sig": "(int iUp, int iDown, int iTickSize)",
     "type": "function",
     "desc": "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis."
    },
    {
     "name": "startDrag",
     "sig": "(int X, int Y)",
     "type": "function",
     "desc": "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unlock",
     "sig": "()",
     "type": "function",
     "desc": "Unlock this instace"
    },
    {
     "name": "unreg",
     "sig": "()",
     "type": "function",
     "desc": "Remove all drag and drop hooks for this element"
    }
   ]
  },
  "Roo.dd.DropTarget": {
   "props": [
    {
     "name": "overClass",
     "type": "String",
     "desc": "The CSS class applied to the drop target element while the drag source is over it (defaults to \"\").",
     "memberOf": ""
    },
    {
     "name": "ddGroup",
     "type": "String",
     "desc": "The drag drop group to handle drop events for",
     "memberOf": ""
    },
    {
     "name": "dropAllowed",
     "type": "String",
     "desc": "The CSS class returned to the drag source when drop is allowed (defaults to \"x-dd-drop-ok\").",
     "memberOf": ""
    },
    {
     "name": "dropNotAllowed",
     "type": "String",
     "desc": "The CSS class returned to the drag source when drop is not allowed (defaults to \"x-dd-drop-nodrop\").",
     "memberOf": ""
    },
    {
     "name": "success",
     "type": "boolean",
     "desc": "set this after drop listener..",
     "memberOf": ""
    },
    {
     "name": "valid",
     "type": "boolean|String",
     "desc": "true/false or string (ok-add/ok-sub/ok/nodrop)\nif the drop point is valid for over/enter..",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "drop",
     "sig": "function (source, e, data)\n{\n\n}",
     "type": "function",
     "desc": "The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the dragged item has\nbeen dropped on it.  This method has no default implementation and returns false, so you must provide an\nimplementation that does something to process the drop event and returns true so that the drag source's\nrepair action does not run.\n\nIMPORTANT : it should set this.success"
    },
    {
     "name": "enter",
     "sig": "function (source, e, data)\n{\n\n}",
     "type": "function",
     "desc": "The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the source is now over the\ntarget.  This default implementation adds the CSS class specified by overClass (if any) to the drop element\nand returns the dropAllowed config value.  This method should be overridden if drop validation is required.\n\nIMPORTANT : it should set this.overClass and this.dropAllowed"
    },
    {
     "name": "out",
     "sig": "function (source, e, data)\n{\n\n}",
     "type": "function",
     "desc": "The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the source has been dragged\nout of the target without dropping.  This default implementation simply removes the CSS class specified by\noverClass (if any) from the drop element."
    },
    {
     "name": "over",
     "sig": "function (source, e, data)\n{\n\n}",
     "type": "function",
     "desc": "The function a {@link Roo.dd.DragSource} calls continuously while it is being dragged over the target.\nThis method will be called on every mouse movement while the drag source is over the drop target.\nThis default implementation simply returns the dropAllowed config value.\n\nIMPORTANT : it should set this.dropAllowed"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addInvalidHandleClass",
     "sig": "(string cssClass)",
     "type": "function",
     "desc": "Lets you specify a css class of elements that will not initiate a drag"
    },
    {
     "name": "addInvalidHandleId",
     "sig": "(string id)",
     "type": "function",
     "desc": "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag"
    },
    {
     "name": "addInvalidHandleType",
     "sig": "(string tagName)",
     "type": "function",
     "desc": "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag."
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addToGroup",
     "sig": "( sGroup)",
     "type": "function",
     "desc": "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed."
    },
    {
     "name": "applyConfig",
     "sig": "()",
     "type": "function",
     "desc": "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearConstraints",
     "sig": "()",
     "type": "function",
     "desc": "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time."
    },
    {
     "name": "clearTicks",
     "sig": "()",
     "type": "function",
     "desc": "Clears any tick interval defined for this instance"
    },
    {
     "name": "endDrag",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Fired when we are done dragging the object"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "function toString() {\n    [native code]\n}",
     "sig": "()",
     "type": "function",
     "desc": "toString method"
    },
    {
     "name": "getDragEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the linked element"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "init",
     "sig": "( id, String sGroup, object config)",
     "type": "function",
     "desc": "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass"
    },
    {
     "name": "initTarget",
     "sig": "( id, String sGroup, object config)",
     "type": "function",
     "desc": "Initializes Targeting functionality only... the object does not\nget a mousedown handler."
    },
    {
     "name": "isLocked",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)"
    },
    {
     "name": "isTarget",
     "sig": "()",
     "type": "function",
     "desc": "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false."
    },
    {
     "name": "isValidHandleChild",
     "sig": "(HTMLElement node)",
     "type": "function",
     "desc": "Checks the tag exclusion list to see if this click should be ignored"
    },
    {
     "name": "lock",
     "sig": "()",
     "type": "function",
     "desc": "Lock this instance"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onAvailable",
     "sig": "()",
     "type": "function",
     "desc": "Override the onAvailable method to do what is needed after the initial\nposition was determined."
    },
    {
     "name": "onDrag",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Abstract method called during the onMouseMove event while dragging an\nobject."
    },
    {
     "name": "onDragDrop",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this item is dropped on another DragDrop\nobj"
    },
    {
     "name": "onDragEnter",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this element fist begins hovering over\nanother DragDrop obj"
    },
    {
     "name": "onDragOut",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when we are no longer hovering over an element"
    },
    {
     "name": "onDragOver",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this element is hovering over another\nDragDrop obj"
    },
    {
     "name": "onInvalidDrop",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Abstract method called when this item is dropped on an area with no\ndrop target"
    },
    {
     "name": "onMouseDown",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Event handler that fires when a drag/drop obj gets a mousedown"
    },
    {
     "name": "onMouseUp",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Event handler that fires when a drag/drop obj gets a mouseup"
    },
    {
     "name": "padding",
     "sig": "()",
     "type": "function",
     "desc": "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeFromGroup",
     "sig": "(string sGroup)",
     "type": "function",
     "desc": "Remove's this instance from the supplied interaction group"
    },
    {
     "name": "removeInvalidHandleClass",
     "sig": "(string cssClass)",
     "type": "function",
     "desc": "Unsets an invalid css class"
    },
    {
     "name": "removeInvalidHandleId",
     "sig": "(string id)",
     "type": "function",
     "desc": "Unsets an invalid handle id"
    },
    {
     "name": "removeInvalidHandleType",
     "sig": "(string tagName)",
     "type": "function",
     "desc": "Unsets an excluded tag name set by addInvalidHandleType"
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "resetConstraints",
     "sig": "(boolean maintainOffset)",
     "type": "function",
     "desc": "resetConstraints must be called if you manually reposition a dd element."
    },
    {
     "name": "setDragElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag"
    },
    {
     "name": "setHandleElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation."
    },
    {
     "name": "setInitPosition",
     "sig": "(int diffX, int diffY)",
     "type": "function",
     "desc": "Stores the initial placement of the linked element."
    },
    {
     "name": "setOuterHandleElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to set an element outside of the linked element as a drag\nhandle"
    },
    {
     "name": "setPadding",
     "sig": "(int iTop, int iRight, int iBot, int iLeft)",
     "type": "function",
     "desc": "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second."
    },
    {
     "name": "setXConstraint",
     "sig": "(int iLeft, int iRight, int iTickSize)",
     "type": "function",
     "desc": "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis."
    },
    {
     "name": "setYConstraint",
     "sig": "(int iUp, int iDown, int iTickSize)",
     "type": "function",
     "desc": "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis."
    },
    {
     "name": "startDrag",
     "sig": "(int X, int Y)",
     "type": "function",
     "desc": "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unlock",
     "sig": "()",
     "type": "function",
     "desc": "Unlock this instace"
    },
    {
     "name": "unreg",
     "sig": "()",
     "type": "function",
     "desc": "Remove all drag and drop hooks for this element"
    }
   ]
  },
  "Roo.dd.DropZone": {
   "props": [
    {
     "name": "overClass",
     "type": "String",
     "desc": "The CSS class applied to the drop target element while the drag source is over it (defaults to \"\").",
     "memberOf": "Roo.dd.DropTarget"
    },
    {
     "name": "ddGroup",
     "type": "String",
     "desc": "The drag drop group to handle drop events for",
     "memberOf": "Roo.dd.DropTarget"
    },
    {
     "name": "dropAllowed",
     "type": "String",
     "desc": "The CSS class returned to the drag source when drop is allowed (defaults to \"x-dd-drop-ok\").",
     "memberOf": "Roo.dd.DropTarget"
    },
    {
     "name": "dropNotAllowed",
     "type": "String",
     "desc": "The CSS class returned to the drag source when drop is not allowed (defaults to \"x-dd-drop-nodrop\").",
     "memberOf": "Roo.dd.DropTarget"
    },
    {
     "name": "success",
     "type": "boolean",
     "desc": "set this after drop listener..",
     "memberOf": "Roo.dd.DropTarget"
    },
    {
     "name": "valid",
     "type": "boolean|String",
     "desc": "true/false or string (ok-add/ok-sub/ok/nodrop)\nif the drop point is valid for over/enter..",
     "memberOf": "Roo.dd.DropTarget"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "drop",
     "sig": "function (source, e, data)\n{\n\n}",
     "type": "function",
     "desc": "The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the dragged item has\nbeen dropped on it.  This method has no default implementation and returns false, so you must provide an\nimplementation that does something to process the drop event and returns true so that the drag source's\nrepair action does not run.\n\nIMPORTANT : it should set this.success"
    },
    {
     "name": "enter",
     "sig": "function (source, e, data)\n{\n\n}",
     "type": "function",
     "desc": "The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the source is now over the\ntarget.  This default implementation adds the CSS class specified by overClass (if any) to the drop element\nand returns the dropAllowed config value.  This method should be overridden if drop validation is required.\n\nIMPORTANT : it should set this.overClass and this.dropAllowed"
    },
    {
     "name": "out",
     "sig": "function (source, e, data)\n{\n\n}",
     "type": "function",
     "desc": "The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the source has been dragged\nout of the target without dropping.  This default implementation simply removes the CSS class specified by\noverClass (if any) from the drop element."
    },
    {
     "name": "over",
     "sig": "function (source, e, data)\n{\n\n}",
     "type": "function",
     "desc": "The function a {@link Roo.dd.DragSource} calls continuously while it is being dragged over the target.\nThis method will be called on every mouse movement while the drag source is over the drop target.\nThis default implementation simply returns the dropAllowed config value.\n\nIMPORTANT : it should set this.dropAllowed"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addInvalidHandleClass",
     "sig": "(string cssClass)",
     "type": "function",
     "desc": "Lets you specify a css class of elements that will not initiate a drag"
    },
    {
     "name": "addInvalidHandleId",
     "sig": "(string id)",
     "type": "function",
     "desc": "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag"
    },
    {
     "name": "addInvalidHandleType",
     "sig": "(string tagName)",
     "type": "function",
     "desc": "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag."
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addToGroup",
     "sig": "( sGroup)",
     "type": "function",
     "desc": "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed."
    },
    {
     "name": "applyConfig",
     "sig": "()",
     "type": "function",
     "desc": "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearConstraints",
     "sig": "()",
     "type": "function",
     "desc": "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time."
    },
    {
     "name": "clearTicks",
     "sig": "()",
     "type": "function",
     "desc": "Clears any tick interval defined for this instance"
    },
    {
     "name": "endDrag",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Fired when we are done dragging the object"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "function toString() {\n    [native code]\n}",
     "sig": "()",
     "type": "function",
     "desc": "toString method"
    },
    {
     "name": "getDragEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns a reference to the linked element"
    },
    {
     "name": "getTargetFromEvent",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Returns a custom data object associated with the DOM node that is the target of the event.  By default\nthis looks up the event target in the {@link Roo.dd.Registry}, although you can override this method to\nprovide your own custom lookup."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "init",
     "sig": "( id, String sGroup, object config)",
     "type": "function",
     "desc": "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass"
    },
    {
     "name": "initTarget",
     "sig": "( id, String sGroup, object config)",
     "type": "function",
     "desc": "Initializes Targeting functionality only... the object does not\nget a mousedown handler."
    },
    {
     "name": "isLocked",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)"
    },
    {
     "name": "isTarget",
     "sig": "()",
     "type": "function",
     "desc": "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false."
    },
    {
     "name": "isValidHandleChild",
     "sig": "(HTMLElement node)",
     "type": "function",
     "desc": "Checks the tag exclusion list to see if this click should be ignored"
    },
    {
     "name": "lock",
     "sig": "()",
     "type": "function",
     "desc": "Lock this instance"
    },
    {
     "name": "notifyDrop",
     "sig": "(Roo.dd.DragSource source, Event e, Object data)",
     "type": "function",
     "desc": "The function a {@link Roo.dd.DragSource} calls once to notify this drop zone that the dragged item has\nbeen dropped on it.  The drag zone will look up the target node based on the event passed in, and if there\nis a node registered for that event, it will delegate to {@link #onNodeDrop} for node-specific handling,\notherwise it will call {@link #onContainerDrop}."
    },
    {
     "name": "notifyEnter",
     "sig": "(Roo.dd.DragSource source, Event e, Object data)",
     "type": "function",
     "desc": "The function a {@link Roo.dd.DragSource} calls once to notify this drop zone that the source is now over\nthe zone.  The default implementation returns this.dropNotAllowed and expects that only registered drop\nnodes can process drag drop operations, so if you need the drop zone itself to be able to process drops\nyou should override this method and provide a custom implementation."
    },
    {
     "name": "notifyOut",
     "sig": "(Roo.dd.DragSource source, Event e, Object data)",
     "type": "function",
     "desc": "The function a {@link Roo.dd.DragSource} calls once to notify this drop zone that the source has been dragged\nout of the zone without dropping.  If the drag source is currently over a registered node, the notification\nwill be delegated to {@link #onNodeOut} for node-specific handling, otherwise it will be ignored."
    },
    {
     "name": "notifyOver",
     "sig": "(Roo.dd.DragSource source, Event e, Object data)",
     "type": "function",
     "desc": "The function a {@link Roo.dd.DragSource} calls continuously while it is being dragged over the drop zone.\nThis method will be called on every mouse movement while the drag source is over the drop zone.\nIt will call {@link #onNodeOver} while the drag source is over a registered node, and will also automatically\ndelegate to the appropriate node-specific methods as necessary when the drag source enters and exits\nregistered nodes ({@link #onNodeEnter}, {@link #onNodeOut}). If the drag source is not currently over a\nregistered node, it will call {@link #onContainerOver}."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onAvailable",
     "sig": "()",
     "type": "function",
     "desc": "Override the onAvailable method to do what is needed after the initial\nposition was determined."
    },
    {
     "name": "onContainerDrop",
     "sig": "(Roo.dd.DragSource source, Event e, Object data)",
     "type": "function",
     "desc": "Called internally when the DropZone determines that a {@link Roo.dd.DragSource} has been dropped on it,\nbut not on any of its registered drop nodes.  The default implementation returns false, so it should be\noverridden to provide the appropriate processing of the drop event if you need the drop zone itself to\nbe able to accept drops.  It should return true when valid so that the drag source's repair action does not run."
    },
    {
     "name": "onContainerOver",
     "sig": "(Roo.dd.DragSource source, Event e, Object data)",
     "type": "function",
     "desc": "Called internally while the DropZone determines that a {@link Roo.dd.DragSource} is being dragged over it,\nbut not over any of its registered drop nodes.  The default implementation returns this.dropNotAllowed, so\nit should be overridden to provide the proper feedback if necessary."
    },
    {
     "name": "onDrag",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Abstract method called during the onMouseMove event while dragging an\nobject."
    },
    {
     "name": "onDragDrop",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this item is dropped on another DragDrop\nobj"
    },
    {
     "name": "onDragEnter",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this element fist begins hovering over\nanother DragDrop obj"
    },
    {
     "name": "onDragOut",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when we are no longer hovering over an element"
    },
    {
     "name": "onDragOver",
     "sig": "(Event e, String|DragDrop[] id)",
     "type": "function",
     "desc": "Abstract method called when this element is hovering over another\nDragDrop obj"
    },
    {
     "name": "onInvalidDrop",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Abstract method called when this item is dropped on an area with no\ndrop target"
    },
    {
     "name": "onMouseDown",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Event handler that fires when a drag/drop obj gets a mousedown"
    },
    {
     "name": "onMouseUp",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Event handler that fires when a drag/drop obj gets a mouseup"
    },
    {
     "name": "onNodeDrop",
     "sig": "(Object nodeData, Roo.dd.DragSource source, Event e, Object data)",
     "type": "function",
     "desc": "Called internally when the DropZone determines that a {@link Roo.dd.DragSource} has been dropped onto\nthe drop node.  The default implementation returns false, so it should be overridden to provide the\nappropriate processing of the drop event and return true so that the drag source's repair action does not run."
    },
    {
     "name": "onNodeEnter",
     "sig": "(Object nodeData, Roo.dd.DragSource source, Event e, Object data)",
     "type": "function",
     "desc": "Called internally when the DropZone determines that a {@link Roo.dd.DragSource} has entered a drop node\nthat it has registered.  This method has no default implementation and should be overridden to provide\nnode-specific processing if necessary."
    },
    {
     "name": "onNodeOut",
     "sig": "(Object nodeData, Roo.dd.DragSource source, Event e, Object data)",
     "type": "function",
     "desc": "Called internally when the DropZone determines that a {@link Roo.dd.DragSource} has been dragged out of\nthe drop node without dropping.  This method has no default implementation and should be overridden to provide\nnode-specific processing if necessary."
    },
    {
     "name": "onNodeOver",
     "sig": "(Object nodeData, Roo.dd.DragSource source, Event e, Object data)",
     "type": "function",
     "desc": "Called internally while the DropZone determines that a {@link Roo.dd.DragSource} is over a drop node\nthat it has registered.  The default implementation returns this.dropNotAllowed, so it should be\noverridden to provide the proper feedback."
    },
    {
     "name": "padding",
     "sig": "()",
     "type": "function",
     "desc": "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeFromGroup",
     "sig": "(string sGroup)",
     "type": "function",
     "desc": "Remove's this instance from the supplied interaction group"
    },
    {
     "name": "removeInvalidHandleClass",
     "sig": "(string cssClass)",
     "type": "function",
     "desc": "Unsets an invalid css class"
    },
    {
     "name": "removeInvalidHandleId",
     "sig": "(string id)",
     "type": "function",
     "desc": "Unsets an invalid handle id"
    },
    {
     "name": "removeInvalidHandleType",
     "sig": "(string tagName)",
     "type": "function",
     "desc": "Unsets an excluded tag name set by addInvalidHandleType"
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "resetConstraints",
     "sig": "(boolean maintainOffset)",
     "type": "function",
     "desc": "resetConstraints must be called if you manually reposition a dd element."
    },
    {
     "name": "setDragElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag"
    },
    {
     "name": "setHandleElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation."
    },
    {
     "name": "setInitPosition",
     "sig": "(int diffX, int diffY)",
     "type": "function",
     "desc": "Stores the initial placement of the linked element."
    },
    {
     "name": "setOuterHandleElId",
     "sig": "( id)",
     "type": "function",
     "desc": "Allows you to set an element outside of the linked element as a drag\nhandle"
    },
    {
     "name": "setPadding",
     "sig": "(int iTop, int iRight, int iBot, int iLeft)",
     "type": "function",
     "desc": "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second."
    },
    {
     "name": "setXConstraint",
     "sig": "(int iLeft, int iRight, int iTickSize)",
     "type": "function",
     "desc": "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis."
    },
    {
     "name": "setYConstraint",
     "sig": "(int iUp, int iDown, int iTickSize)",
     "type": "function",
     "desc": "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis."
    },
    {
     "name": "startDrag",
     "sig": "(int X, int Y)",
     "type": "function",
     "desc": "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unlock",
     "sig": "()",
     "type": "function",
     "desc": "Unlock this instace"
    },
    {
     "name": "unreg",
     "sig": "()",
     "type": "function",
     "desc": "Remove all drag and drop hooks for this element"
    }
   ]
  },
  "Roo.dd.Registry": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "getHandle",
     "sig": "(String|HTMLElement id)",
     "type": "function",
     "desc": "Returns the handle registered for a DOM Node by id"
    },
    {
     "name": "getHandleFromEvent",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Returns the handle that is registered for the DOM node that is the target of the event"
    },
    {
     "name": "getTarget",
     "sig": "(String|HTMLElement id)",
     "type": "function",
     "desc": "Returns a custom data object that is registered for a DOM node by id"
    },
    {
     "name": "getTargetFromEvent",
     "sig": "(Event e)",
     "type": "function",
     "desc": "Returns a custom data object that is registered for the DOM node that is the target of the event"
    },
    {
     "name": "register",
     "sig": "(String|HTMLElement element, Object data)",
     "type": "function",
     "desc": "Register a drag drop element"
    },
    {
     "name": "unregister",
     "sig": "(String|HTMLElement element)",
     "type": "function",
     "desc": "Unregister a drag drop element"
    }
   ]
  },
  "Roo.dd.ScrollManager": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "refreshCache",
     "sig": "()",
     "type": "function",
     "desc": "Manually trigger a cache refresh."
    },
    {
     "name": "register",
     "sig": "(String/HTMLElement/Element/Array el)",
     "type": "function",
     "desc": "Registers new overflow element(s) to auto scroll"
    },
    {
     "name": "unregister",
     "sig": "(String/HTMLElement/Element/Array el)",
     "type": "function",
     "desc": "Unregisters overflow element(s) so they are no longer scrolled"
    }
   ]
  },
  "Roo.dd.StatusProxy": {
   "props": [
    {
     "name": "dropAllowed",
     "type": "String",
     "desc": "The CSS class to apply to the status element when drop is allowed (defaults to \"x-dd-drop-ok\").",
     "memberOf": ""
    },
    {
     "name": "dropNotAllowed",
     "type": "String",
     "desc": "The CSS class to apply to the status element when drop is not allowed (defaults to \"x-dd-drop-nodrop\").",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying proxy {@link Roo.Layer}"
    },
    {
     "name": "getGhost",
     "sig": "()",
     "type": "function",
     "desc": "Returns the ghost element"
    },
    {
     "name": "hide",
     "sig": "(Boolean clear)",
     "type": "function",
     "desc": "Hides the proxy"
    },
    {
     "name": "repair",
     "sig": "(Array xy, Function callback, Object scope)",
     "type": "function",
     "desc": "Causes the proxy to return to its position of origin via an animation.  Should be called after an\ninvalid drop operation by the item being dragged."
    },
    {
     "name": "reset",
     "sig": "(Boolean clearGhost)",
     "type": "function",
     "desc": "Resets the status indicator to the default dropNotAllowed value"
    },
    {
     "name": "setStatus",
     "sig": "(String cssClass)",
     "type": "function",
     "desc": "Updates the proxy's visual element to indicate the status of whether or not drop is allowed\nover the current target element."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Displays this proxy"
    },
    {
     "name": "stop",
     "sig": "()",
     "type": "function",
     "desc": "Stops the repair animation if it's currently running"
    },
    {
     "name": "sync",
     "sig": "()",
     "type": "function",
     "desc": "Force the Layer to sync its shadow and shim positions to the element"
    },
    {
     "name": "update",
     "sig": "(String html)",
     "type": "function",
     "desc": "Updates the contents of the ghost element"
    }
   ]
  },
  "Roo.form": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.form.Action": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.form.BasicForm": {
   "props": [
    {
     "name": "method",
     "type": "String",
     "desc": "The request method to use (GET or POST) for form actions if one isn't supplied in the action options.",
     "memberOf": ""
    },
    {
     "name": "reader",
     "type": "DataReader",
     "desc": "An Roo.data.DataReader (e.g. {@link Roo.data.XmlReader}) to be used to read data when executing \"load\" actions.\nThis is optional as there is built-in support for processing JSON.",
     "memberOf": ""
    },
    {
     "name": "errorReader",
     "type": "DataReader",
     "desc": "An Roo.data.DataReader (e.g. {@link Roo.data.XmlReader}) to be used to read data when reading validation errors on \"submit\" actions.\nThis is completely optional as there is built-in support for processing JSON.",
     "memberOf": ""
    },
    {
     "name": "url",
     "type": "String",
     "desc": "The URL to use for form actions if one isn't supplied in the action options.",
     "memberOf": ""
    },
    {
     "name": "fileUpload",
     "type": "Boolean",
     "desc": "Set to true if this form is a file upload.",
     "memberOf": ""
    },
    {
     "name": "baseParams",
     "type": "Object",
     "desc": "Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.",
     "memberOf": ""
    },
    {
     "name": "timeout",
     "type": "Number",
     "desc": "Timeout for form actions in seconds (default is 30 seconds).",
     "memberOf": ""
    },
    {
     "name": "trackResetOnLoad",
     "type": "Boolean",
     "desc": "If set to true, form.reset() resets to the last loaded\nor setValues() data instead of when the form was first created.",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "actioncomplete",
     "sig": "function (_self, action)\n{\n\n}",
     "type": "function",
     "desc": "Fires when an action is completed."
    },
    {
     "name": "actionfailed",
     "sig": "function (_self, action)\n{\n\n}",
     "type": "function",
     "desc": "Fires when an action fails."
    },
    {
     "name": "beforeaction",
     "sig": "function (_self, action)\n{\n\n}",
     "type": "function",
     "desc": "Fires before any action is performed. Return false to cancel the action."
    }
   ],
   "methods": [
    {
     "name": "add",
     "sig": "(Field field1, Field field2, Field etc)",
     "type": "function",
     "desc": "Add Roo.form components to this form."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addForm",
     "sig": "(Roo.form.Form form)",
     "type": "function",
     "desc": "Add a secondary form to this one, \nUsed to provide tabbed forms. One form is primary, with hidden values \nwhich mirror the elements from the other forms."
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyIfToFields",
     "sig": "(Object values)",
     "type": "function",
     "desc": "Calls {@link Ext#applyIf} for all field in this form with the passed object."
    },
    {
     "name": "applyToFields",
     "sig": "(Object values)",
     "type": "function",
     "desc": "Calls {@link Ext#apply} for all fields in this form with the passed object."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clears all invalid messages in this form."
    },
    {
     "name": "doAction",
     "sig": "(String actionName, Object options)",
     "type": "function",
     "desc": "Performs a predefined action (submit or load) or custom actions you define on this form."
    },
    {
     "name": "findField",
     "sig": "(String id)",
     "type": "function",
     "desc": "Find a Roo.form.Field in this form by id, dataIndex, name or hiddenName"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getFieldValues",
     "sig": "()",
     "type": "function",
     "desc": "Returns the fields in this form as an object with key/value pairs. \nThis differs from getValues as it calls getValue on each child item, rather than using dom data."
    },
    {
     "name": "getValues",
     "sig": "(Boolean asString)",
     "type": "function",
     "desc": "Returns the fields in this form as an object with key/value pairs. If multiple fields exist with the same name\nthey are returned as an array."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if any fields in this form have changed since their original load."
    },
    {
     "name": "isValid",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if client-side validation on the form is successful."
    },
    {
     "name": "load",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Shortcut to do a load action."
    },
    {
     "name": "loadRecord",
     "sig": "(Record record)",
     "type": "function",
     "desc": "Loads an Roo.data.Record into this form."
    },
    {
     "name": "markInvalid",
     "sig": "(Array/Object errors)",
     "type": "function",
     "desc": "Mark fields in this form invalid in bulk."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "remove",
     "sig": "(Field field)",
     "type": "function",
     "desc": "Removes a field from the items collection (does NOT remove its markup)."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "()",
     "type": "function",
     "desc": "Looks at the fields in this form, checks them for an id attribute,\nand calls applyTo on the existing dom element with that id."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets this form."
    },
    {
     "name": "setValues",
     "sig": "(Array/Object values)",
     "type": "function",
     "desc": "Set values for fields in this form in bulk."
    },
    {
     "name": "submit",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Shortcut to do a submit action."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateRecord",
     "sig": "(Record record)",
     "type": "function",
     "desc": "Persists the values in this form into the passed Roo.data.Record object in a beginEdit/endEdit block."
    }
   ]
  },
  "Roo.form.Checkbox": {
   "props": [
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the checkbox receives focus (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the checkbox (defaults to \"x-form-field\")",
     "memberOf": ""
    },
    {
     "name": "checked",
     "type": "Boolean",
     "desc": "True if the the checkbox should render already checked (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"checkbox\", autocomplete: \"off\"})",
     "memberOf": ""
    },
    {
     "name": "boxLabel",
     "type": "String",
     "desc": "The text that appears beside the checkbox",
     "memberOf": ""
    },
    {
     "name": "inputValue",
     "type": "String",
     "desc": "The value that should go into the generated input element's value attribute",
     "memberOf": ""
    },
    {
     "name": "valueOff",
     "type": "String",
     "desc": "The value that should go into the generated input element's value when unchecked.",
     "memberOf": ""
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "check",
     "sig": "function (_self, checked)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the checkbox is checked or unchecked."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the checked state of the checkbox."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(Boolean/String value, Boolean/String suppressEvent)",
     "type": "function",
     "desc": "Sets the checked state of the checkbox.\nOn is always based on a string comparison between inputValue and the param."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    }
   ]
  },
  "Roo.form.Column": {
   "props": [
    {
     "name": "width",
     "type": "Number/String",
     "desc": "The fixed width of the column in pixels or CSS value (defaults to \"auto\")",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec used to autocreate the column (defaults to {tag: 'div', cls: 'x-form-ct x-form-column'})",
     "memberOf": ""
    },
    {
     "name": "style",
     "type": "String/Object/Function",
     "desc": "A style specification string, e.g. \"width:100px\", or object in the form {width:\"100px\"}, or\na function which returns such a specification.",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "Valid values are \"left,\" \"top\" and \"right\" (defaults to \"left\")",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "Fixed width in pixels of all field labels (defaults to undefined)",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "clear",
     "type": "Boolean",
     "desc": "True to add a clearing element at the end of this layout, equivalent to CSS clear: both (defaults to true)",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "labelSeparator",
     "type": "String",
     "desc": "The separator to use after field labels (defaults to ':')",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "hideLabels",
     "type": "Boolean",
     "desc": "True to suppress the display of field labels in this layout (defaults to false)",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addxtype",
     "sig": "(Object config)",
     "type": "function",
     "desc": "Adds a object form elements (using the xtype property as the factory method.)\nValid xtypes are:  TextField, TextArea .... Button, Layout, FieldSet, Column"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.form.ComboBox": {
   "props": [
    {
     "name": "transform",
     "type": "String/HTMLElement/Element",
     "desc": "The id, DOM node or element of an existing select to convert to a ComboBox",
     "memberOf": ""
    },
    {
     "name": "lazyRender",
     "type": "Boolean",
     "desc": "True to prevent the ComboBox from rendering until requested (should always be used when\nrendering into an Roo.Editor, defaults to false)",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "Boolean/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to:\n{tag: \"input\", type: \"text\", size: \"24\", autocomplete: \"off\"})",
     "memberOf": ""
    },
    {
     "name": "store",
     "type": "Roo.data.Store",
     "desc": "The data store to which this combo is bound (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "title",
     "type": "String",
     "desc": "If supplied, a header element is created containing this text and added into the top of\nthe dropdown list (defaults to undefined, with no header element)",
     "memberOf": ""
    },
    {
     "name": "grow",
     "type": "Boolean",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "growMin",
     "type": "Number",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "growMax",
     "type": "Number",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "tpl",
     "type": "String/Roo.Template",
     "desc": "The template to use to render the output",
     "memberOf": ""
    },
    {
     "name": "listWidth",
     "type": "Number",
     "desc": "The width in pixels of the dropdown list (defaults to the width of the ComboBox field)",
     "memberOf": ""
    },
    {
     "name": "displayField",
     "type": "String",
     "desc": "The underlying data field name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'text' if mode = 'local')",
     "memberOf": ""
    },
    {
     "name": "valueField",
     "type": "String",
     "desc": "The underlying data value name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'value' if mode = 'local'). \nNote: use of a valueField requires the user make a selection\nin order for a value to be mapped.",
     "memberOf": ""
    },
    {
     "name": "hiddenName",
     "type": "String",
     "desc": "If specified, a hidden form field with this name is dynamically generated to store the\nfield's data value (defaults to the underlying DOM element's name)",
     "memberOf": ""
    },
    {
     "name": "listClass",
     "type": "String",
     "desc": "CSS class to apply to the dropdown list element (defaults to '')",
     "memberOf": ""
    },
    {
     "name": "selectedClass",
     "type": "String",
     "desc": "CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')",
     "memberOf": ""
    },
    {
     "name": "triggerClass",
     "type": "String",
     "desc": "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-arrow-trigger'\nwhich displays a downward arrow icon).",
     "memberOf": ""
    },
    {
     "name": "shadow",
     "type": "Boolean/String",
     "desc": "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right",
     "memberOf": ""
    },
    {
     "name": "listAlign",
     "type": "String",
     "desc": "A valid anchor position value. See {@link Roo.Element#alignTo} for details on supported\nanchor positions (defaults to 'tl-bl')",
     "memberOf": ""
    },
    {
     "name": "maxHeight",
     "type": "Number",
     "desc": "The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)",
     "memberOf": ""
    },
    {
     "name": "triggerAction",
     "type": "String",
     "desc": "The action to execute when the trigger field is activated.  Use 'all' to run the\nquery specified by the allQuery config option (defaults to 'query')",
     "memberOf": ""
    },
    {
     "name": "minChars",
     "type": "Number",
     "desc": "The minimum number of characters the user must type before autocomplete and typeahead activate\n(defaults to 4, does not apply if editable = false)",
     "memberOf": ""
    },
    {
     "name": "typeAhead",
     "type": "Boolean",
     "desc": "True to populate and autoselect the remainder of the text being typed after a configurable\ndelay (typeAheadDelay) if it matches a known value (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "queryDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds to delay between the start of typing and sending the\nquery to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local')",
     "memberOf": ""
    },
    {
     "name": "pageSize",
     "type": "Number",
     "desc": "If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the\nfilter queries will execute with page start and limit parameters.  Only applies when mode = 'remote' (defaults to 0)",
     "memberOf": ""
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to select any existing text in the field immediately on focus.  Only applies\nwhen editable = true (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "queryParam",
     "type": "String",
     "desc": "Name of the query as it will be passed on the querystring (defaults to 'query')",
     "memberOf": ""
    },
    {
     "name": "loadingText",
     "type": "String",
     "desc": "The text to display in the dropdown list while data is loading.  Only applies\nwhen mode = 'remote' (defaults to 'Loading...')",
     "memberOf": ""
    },
    {
     "name": "resizable",
     "type": "Boolean",
     "desc": "True to add a resize handle to the bottom of the dropdown list (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "handleHeight",
     "type": "Number",
     "desc": "The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8)",
     "memberOf": ""
    },
    {
     "name": "editable",
     "type": "Boolean",
     "desc": "False to prevent the user from typing text directly into the field, just like a\ntraditional select (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "allQuery",
     "type": "String",
     "desc": "The text query to send to the server to return all records for the list with no filtering (defaults to '')",
     "memberOf": ""
    },
    {
     "name": "mode",
     "type": "String",
     "desc": "Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)",
     "memberOf": ""
    },
    {
     "name": "minListWidth",
     "type": "Number",
     "desc": "The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if\nlistWidth has a higher value)",
     "memberOf": ""
    },
    {
     "name": "forceSelection",
     "type": "Boolean",
     "desc": "True to restrict the selected value to one of the values in the list, false to\nallow the user to set arbitrary text into the field (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "typeAheadDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds to wait until the typeahead text is displayed\nif typeAhead = true (defaults to 250)",
     "memberOf": ""
    },
    {
     "name": "valueNotFoundText",
     "type": "String",
     "desc": "When using a name/value combo, if the value passed to setValue is not found in\nthe store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "blockFocus",
     "type": "Boolean",
     "desc": "Prevents all focus calls, so it can work with things like HTML edtor bar",
     "memberOf": ""
    },
    {
     "name": "disableClear",
     "type": "Boolean",
     "desc": "Disable showing of clear button.",
     "memberOf": ""
    },
    {
     "name": "alwaysQuery",
     "type": "Boolean",
     "desc": "Disable caching of results, and always send query",
     "memberOf": ""
    },
    {
     "name": "hideTrigger",
     "type": "Boolean",
     "desc": "True to hide the trigger element and display only the base text field (defaults to false)",
     "memberOf": "Roo.form.TriggerField"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "emptyText",
     "type": "String",
     "desc": "The default text to display in an empty field - placeholder... (defaults to null).",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the field (defaults to \"x-form-field\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "add",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the 'add' icon is pressed (add a listener to enable add button)"
    },
    {
     "name": "autosize",
     "sig": "function (_self, width)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforequery",
     "sig": "function (combo, query, forceAll, cancel, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires before all queries are processed. Return false to cancel the query or set cancel to true.\nThe event object passed has these properties:"
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeselect",
     "sig": "function (combo, record, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a list item is selected. Return false to cancel the selection."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "collapse",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the dropdown list is collapsed"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "edit",
     "sig": "function (combo, record)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the 'edit' icon is pressed (add a listener to enable add button)"
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "expand",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the dropdown list is expanded"
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "select",
     "sig": "function (combo, record, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a list item is selected"
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "clearValue",
     "sig": "()",
     "type": "function",
     "desc": "Clears any text/value currently set in the field"
    },
    {
     "name": "collapse",
     "sig": "()",
     "type": "function",
     "desc": "Hides the dropdown list if it is currently expanded. Fires the 'collapse' event on completion."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "doQuery",
     "sig": "(String query, Boolean forceAll)",
     "type": "function",
     "desc": "Execute a query to filter the dropdown list.  Fires the beforequery event prior to performing the\nquery allowing the query action to be canceled if needed."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "expand",
     "sig": "()",
     "type": "function",
     "desc": "Expands the dropdown list if it is currently hidden. Fires the 'expand' event on completion."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the currently selected field value or empty string if no value is set."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isExpanded",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the dropdown list is expanded, else false."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "onTriggerClick",
     "sig": "(EventObject e)",
     "type": "function",
     "desc": "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally-loaded value and clears any validation messages."
    },
    {
     "name": "select",
     "sig": "(Number index, Boolean scrollIntoView)",
     "type": "function",
     "desc": "Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue."
    },
    {
     "name": "selectByValue",
     "sig": "(String value, Boolean scrollIntoView)",
     "type": "function",
     "desc": "Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue."
    },
    {
     "name": "selectText",
     "sig": "(Number start, Number end)",
     "type": "function",
     "desc": "Selects text in this field"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setEditable",
     "sig": "(Boolean value)",
     "type": "function",
     "desc": "Allow or prevent the user from directly editing the field text.  If false is passed,\nthe user will only be able to select from the items defined in the dropdown list.  This method\nis the runtime equivalent of setting the 'editable' config option at config time."
    },
    {
     "name": "setFromData",
     "sig": "(Object value)",
     "type": "function",
     "desc": "Sets the value of the field based on a object which is related to the record format for the store."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(String value)",
     "type": "function",
     "desc": "Sets the specified value into the field.  If the value finds a match, the corresponding record text\nwill be displayed in the field.  If the value does not match the data value of an existing item,\nand the valueNotFoundText config option is defined, it will be displayed as the default field text.\nOtherwise the field will be blank (although the value will still be set)."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.form.ComboBoxArray": {
   "props": [
    {
     "name": "combo",
     "type": "Roo.form.Combo",
     "desc": "The combo box that is wrapped",
     "memberOf": ""
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "The width of the box that displays the selected element",
     "memberOf": ""
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The name of the visable items on this form (eg. titles not ids)",
     "memberOf": ""
    },
    {
     "name": "hiddenName",
     "type": "String",
     "desc": "The hidden name of the field, often contains an comma seperated list of names",
     "memberOf": ""
    },
    {
     "name": "grow",
     "type": "Boolean",
     "desc": "True if this field should automatically grow and shrink to its content",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "growMin",
     "type": "Number",
     "desc": "The minimum width to allow when grow = true (defaults to 30)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "growMax",
     "type": "Number",
     "desc": "The maximum width to allow when grow = true (defaults to 800)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "emptyText",
     "type": "String",
     "desc": "The default text to display in an empty field - placeholder... (defaults to null).",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"20\", autocomplete: \"off\"})",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the field (defaults to \"x-form-field\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "autosize",
     "sig": "function (_self, width)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforeremove",
     "sig": "function (_self, item)\n{\n\n}",
     "type": "function",
     "desc": "Fires before remove the value from the list"
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "remove",
     "sig": "function (_self, item)\n{\n\n}",
     "type": "function",
     "desc": "Fires when remove the value from the list"
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "autoSize",
     "sig": "()",
     "type": "function",
     "desc": "Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.\nThis only takes effect if grow = true, and fires the autosize event."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally-loaded value and clears any validation messages."
    },
    {
     "name": "selectText",
     "sig": "(Number start, Number end)",
     "type": "function",
     "desc": "Selects text in this field"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the combox array value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.form.ComboBoxArray.Item": {
   "props": [
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    }
   ]
  },
  "Roo.form.ComboCheck": {
   "props": [
    {
     "name": "transform",
     "type": "String/HTMLElement/Element",
     "desc": "The id, DOM node or element of an existing select to convert to a ComboBox",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "lazyRender",
     "type": "Boolean",
     "desc": "True to prevent the ComboBox from rendering until requested (should always be used when\nrendering into an Roo.Editor, defaults to false)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "autoCreate",
     "type": "Boolean/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to:\n{tag: \"input\", type: \"text\", size: \"24\", autocomplete: \"off\"})",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "store",
     "type": "Roo.data.Store",
     "desc": "The data store to which this combo is bound (defaults to undefined)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "title",
     "type": "String",
     "desc": "If supplied, a header element is created containing this text and added into the top of\nthe dropdown list (defaults to undefined, with no header element)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "grow",
     "type": "Boolean",
     "desc": "",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "growMin",
     "type": "Number",
     "desc": "",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "growMax",
     "type": "Number",
     "desc": "",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "tpl",
     "type": "String/Roo.Template",
     "desc": "The template to use to render the output",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "listWidth",
     "type": "Number",
     "desc": "The width in pixels of the dropdown list (defaults to the width of the ComboBox field)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "displayField",
     "type": "String",
     "desc": "The underlying data field name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'text' if mode = 'local')",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "valueField",
     "type": "String",
     "desc": "The underlying data value name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'value' if mode = 'local'). \nNote: use of a valueField requires the user make a selection\nin order for a value to be mapped.",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "hiddenName",
     "type": "String",
     "desc": "If specified, a hidden form field with this name is dynamically generated to store the\nfield's data value (defaults to the underlying DOM element's name)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "listClass",
     "type": "String",
     "desc": "CSS class to apply to the dropdown list element (defaults to '')",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "selectedClass",
     "type": "String",
     "desc": "CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "triggerClass",
     "type": "String",
     "desc": "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-arrow-trigger'\nwhich displays a downward arrow icon).",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "shadow",
     "type": "Boolean/String",
     "desc": "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "listAlign",
     "type": "String",
     "desc": "A valid anchor position value. See {@link Roo.Element#alignTo} for details on supported\nanchor positions (defaults to 'tl-bl')",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "maxHeight",
     "type": "Number",
     "desc": "The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "triggerAction",
     "type": "String",
     "desc": "The action to execute when the trigger field is activated.  Use 'all' to run the\nquery specified by the allQuery config option (defaults to 'query')",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "minChars",
     "type": "Number",
     "desc": "The minimum number of characters the user must type before autocomplete and typeahead activate\n(defaults to 4, does not apply if editable = false)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "typeAhead",
     "type": "Boolean",
     "desc": "True to populate and autoselect the remainder of the text being typed after a configurable\ndelay (typeAheadDelay) if it matches a known value (defaults to false)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "queryDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds to delay between the start of typing and sending the\nquery to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local')",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "pageSize",
     "type": "Number",
     "desc": "If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the\nfilter queries will execute with page start and limit parameters.  Only applies when mode = 'remote' (defaults to 0)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to select any existing text in the field immediately on focus.  Only applies\nwhen editable = true (defaults to false)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "queryParam",
     "type": "String",
     "desc": "Name of the query as it will be passed on the querystring (defaults to 'query')",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "loadingText",
     "type": "String",
     "desc": "The text to display in the dropdown list while data is loading.  Only applies\nwhen mode = 'remote' (defaults to 'Loading...')",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "resizable",
     "type": "Boolean",
     "desc": "True to add a resize handle to the bottom of the dropdown list (defaults to false)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "handleHeight",
     "type": "Number",
     "desc": "The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "editable",
     "type": "Boolean",
     "desc": "False to prevent the user from typing text directly into the field, just like a\ntraditional select (defaults to true)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "allQuery",
     "type": "String",
     "desc": "The text query to send to the server to return all records for the list with no filtering (defaults to '')",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "mode",
     "type": "String",
     "desc": "Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "minListWidth",
     "type": "Number",
     "desc": "The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if\nlistWidth has a higher value)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "forceSelection",
     "type": "Boolean",
     "desc": "True to restrict the selected value to one of the values in the list, false to\nallow the user to set arbitrary text into the field (defaults to false)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "typeAheadDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds to wait until the typeahead text is displayed\nif typeAhead = true (defaults to 250)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "valueNotFoundText",
     "type": "String",
     "desc": "When using a name/value combo, if the value passed to setValue is not found in\nthe store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "blockFocus",
     "type": "Boolean",
     "desc": "Prevents all focus calls, so it can work with things like HTML edtor bar",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "disableClear",
     "type": "Boolean",
     "desc": "Disable showing of clear button.",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "alwaysQuery",
     "type": "Boolean",
     "desc": "Disable caching of results, and always send query",
     "memberOf": "Roo.form.ComboBox"
    },
    {
     "name": "hideTrigger",
     "type": "Boolean",
     "desc": "True to hide the trigger element and display only the base text field (defaults to false)",
     "memberOf": "Roo.form.TriggerField"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "emptyText",
     "type": "String",
     "desc": "The default text to display in an empty field - placeholder... (defaults to null).",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the field (defaults to \"x-form-field\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "add",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the 'add' icon is pressed (add a listener to enable add button)"
    },
    {
     "name": "autosize",
     "sig": "function (_self, width)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforequery",
     "sig": "function (combo, query, forceAll, cancel, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires before all queries are processed. Return false to cancel the query or set cancel to true.\nThe event object passed has these properties:"
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeselect",
     "sig": "function (combo, record, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a list item is selected. Return false to cancel the selection."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "collapse",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the dropdown list is collapsed"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "edit",
     "sig": "function (combo, record)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the 'edit' icon is pressed (add a listener to enable add button)"
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "expand",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the dropdown list is expanded"
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "select",
     "sig": "function (combo, record, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a list item is selected"
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "clearValue",
     "sig": "()",
     "type": "function",
     "desc": "Clears any text/value currently set in the field"
    },
    {
     "name": "collapse",
     "sig": "()",
     "type": "function",
     "desc": "Hides the dropdown list if it is currently expanded. Fires the 'collapse' event on completion."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "doQuery",
     "sig": "(String query, Boolean forceAll)",
     "type": "function",
     "desc": "Execute a query to filter the dropdown list.  Fires the beforequery event prior to performing the\nquery allowing the query action to be canceled if needed."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "expand",
     "sig": "()",
     "type": "function",
     "desc": "Expands the dropdown list if it is currently hidden. Fires the 'expand' event on completion."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the currently selected field value or empty string if no value is set."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isExpanded",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the dropdown list is expanded, else false."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "onTriggerClick",
     "sig": "(EventObject e)",
     "type": "function",
     "desc": "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally-loaded value and clears any validation messages."
    },
    {
     "name": "select",
     "sig": "(Number index, Boolean scrollIntoView)",
     "type": "function",
     "desc": "Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue."
    },
    {
     "name": "selectByValue",
     "sig": "(String value, Boolean scrollIntoView)",
     "type": "function",
     "desc": "Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue."
    },
    {
     "name": "selectText",
     "sig": "(Number start, Number end)",
     "type": "function",
     "desc": "Selects text in this field"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setEditable",
     "sig": "(Boolean value)",
     "type": "function",
     "desc": "Allow or prevent the user from directly editing the field text.  If false is passed,\nthe user will only be able to select from the items defined in the dropdown list.  This method\nis the runtime equivalent of setting the 'editable' config option at config time."
    },
    {
     "name": "setFromData",
     "sig": "(Object value)",
     "type": "function",
     "desc": "Sets the value of the field based on a object which is related to the record format for the store."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(String value)",
     "type": "function",
     "desc": "Sets the specified value into the field.  If the value finds a match, the corresponding record text\nwill be displayed in the field.  If the value does not match the data value of an existing item,\nand the valueNotFoundText config option is defined, it will be displayed as the default field text.\nOtherwise the field will be blank (although the value will still be set)."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.form.DateField": {
   "props": [
    {
     "name": "format",
     "type": "String",
     "desc": "The default date format string which can be overriden for localization support.  The format must be\nvalid according to {@link Date#parseDate} (defaults to 'm/d/y').",
     "memberOf": ""
    },
    {
     "name": "altFormats",
     "type": "String",
     "desc": "Multiple date formats separated by \"|\" to try when parsing a user input value and it doesn't match the defined\nformat (defaults to 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d').",
     "memberOf": ""
    },
    {
     "name": "disabledDays",
     "type": "Array",
     "desc": "An array of days to disable, 0 based. For example, [0, 6] disables Sunday and Saturday (defaults to null).",
     "memberOf": ""
    },
    {
     "name": "disabledDaysText",
     "type": "String",
     "desc": "The tooltip to display when the date falls on a disabled day (defaults to 'Disabled')",
     "memberOf": ""
    },
    {
     "name": "disabledDates",
     "type": "Array",
     "desc": "An array of \"dates\" to disable, as strings. These strings will be used to build a dynamic regular\nexpression so they are very powerful. Some examples:\n<ul>\n<li>[\"03/08/2003\", \"09/16/2003\"] would disable those exact dates</li>\n<li>[\"03/08\", \"09/16\"] would disable those days for every year</li>\n<li>[\"^03/08\"] would only match the beginning (useful if you are using short years)</li>\n<li>[\"03/../2006\"] would disable every day in March 2006</li>\n<li>[\"^03\"] would disable every day in every March</li>\n</ul>\nIn order to support regular expressions, if you are using a date format that has \".\" in it, you will have to\nescape the dot when restricting dates. For example: [\"03\\\\.08\\\\.03\"].",
     "memberOf": ""
    },
    {
     "name": "disabledDatesText",
     "type": "String",
     "desc": "The tooltip text to display when the date falls on a disabled date (defaults to 'Disabled')",
     "memberOf": ""
    },
    {
     "name": "minValue",
     "type": "Date/String",
     "desc": "The minimum allowed date. Can be either a Javascript date object or a string date in a\nvalid format (defaults to null).",
     "memberOf": ""
    },
    {
     "name": "maxValue",
     "type": "Date/String",
     "desc": "The maximum allowed date. Can be either a Javascript date object or a string date in a\nvalid format (defaults to null).",
     "memberOf": ""
    },
    {
     "name": "minText",
     "type": "String",
     "desc": "The error text to display when the date in the cell is before minValue (defaults to\n'The date in this field must be after {minValue}').",
     "memberOf": ""
    },
    {
     "name": "maxText",
     "type": "String",
     "desc": "The error text to display when the date in the cell is after maxValue (defaults to\n'The date in this field must be before {maxValue}').",
     "memberOf": ""
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to display when the date in the field is invalid (defaults to\n'{value} is not a valid date - it must be in the format {format}').",
     "memberOf": ""
    },
    {
     "name": "triggerClass",
     "type": "String",
     "desc": "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-date-trigger'\nwhich displays a calendar icon).",
     "memberOf": ""
    },
    {
     "name": "useIso",
     "type": "Boolean",
     "desc": "if enabled, then the date field will use a hidden field to store the \nreal value as iso formated date. default (false)",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"10\", autocomplete: \"off\"})",
     "memberOf": ""
    },
    {
     "name": "hideTrigger",
     "type": "Boolean",
     "desc": "True to hide the trigger element and display only the base text field (defaults to false)",
     "memberOf": "Roo.form.TriggerField"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "emptyText",
     "type": "String",
     "desc": "The default text to display in an empty field - placeholder... (defaults to null).",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the field (defaults to \"x-form-field\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "autosize",
     "sig": "function (_self, width)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "select",
     "sig": "function (combo, date)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a date is selected"
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the current date value of the date field."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "onTriggerClick",
     "sig": "(EventObject e)",
     "type": "function",
     "desc": "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally-loaded value and clears any validation messages."
    },
    {
     "name": "selectText",
     "sig": "(Number start, Number end)",
     "type": "function",
     "desc": "Selects text in this field"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(String/Date date)",
     "type": "function",
     "desc": "Sets the value of the date field.  You can pass a date object or any string that can be parsed into a valid\ndate, using DateField.format as the date format, according to the same rules as {@link Date#parseDate}\n(the default format used is \"m/d/y\").\n<br />Usage:\n<pre><code>\n//All of these calls set the same date value (May 4, 2006)\n\n//Pass a date object:\nvar dt = new Date('5/4/06');\ndateField.setValue(dt);\n\n//Pass a date string (default format):\ndateField.setValue('5/4/06');\n\n//Pass a date string (custom format):\ndateField.format = 'Y-m-d';\ndateField.setValue('2006-5-4');\n</code></pre>"
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.form.DayPicker": {
   "props": [
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the checkbox receives focus (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the checkbox (defaults to \"x-form-field\")",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"checkbox\", autocomplete: \"off\"})",
     "memberOf": ""
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the checked state of the checkbox."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(Boolean/String value, Boolean/String suppressEvent)",
     "type": "function",
     "desc": "Sets the checked state of the checkbox.\nOn is always based on a string comparison between inputValue and the param."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    }
   ]
  },
  "Roo.form.DisplayField": {
   "props": [
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the checkbox receives focus (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the checkbox (defaults to \"x-form-field\")",
     "memberOf": ""
    },
    {
     "name": "valueRenderer",
     "type": "Function",
     "desc": "The renderer for the field (so you can reformat output). should return raw HTML",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"checkbox\", autocomplete: \"off\"})",
     "memberOf": ""
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(Boolean/String checked)",
     "type": "function",
     "desc": "Sets the checked state of the checkbox."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    }
   ]
  },
  "Roo.form.FCKeditor": {
   "props": [
    {
     "name": "fck",
     "type": "Object",
     "desc": "options - see fck manual for details.",
     "memberOf": ""
    },
    {
     "name": "growMin",
     "type": "Number",
     "desc": "The minimum height to allow when grow = true (defaults to 60)",
     "memberOf": "Roo.form.TextArea"
    },
    {
     "name": "growMax",
     "type": "Number",
     "desc": "The maximum height to allow when grow = true (defaults to 1000)",
     "memberOf": "Roo.form.TextArea"
    },
    {
     "name": "preventScrollbars",
     "type": "Boolean",
     "desc": "True to prevent scrollbars from appearing regardless of how much text is\nin the field (equivalent to setting overflow: hidden, defaults to false)",
     "memberOf": "Roo.form.TextArea"
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"textarea\", style: \"width:300px;height:60px;\", autocomplete: \"off\"})",
     "memberOf": "Roo.form.TextArea"
    },
    {
     "name": "grow",
     "type": "Boolean",
     "desc": "True if this field should automatically grow and shrink to its content",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "emptyText",
     "type": "String",
     "desc": "The default text to display in an empty field - placeholder... (defaults to null).",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the field (defaults to \"x-form-field\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "autosize",
     "sig": "function (_self, width)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "editorinit",
     "sig": "function (_self, the)\n{\n\n}",
     "type": "function",
     "desc": "Fired when the editor is initialized - you can add extra handlers here.."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "autoSize",
     "sig": "()",
     "type": "function",
     "desc": "Automatically grows the field to accomodate the height of the text up to the maximum field height allowed.\nThis only takes effect if grow = true, and fires the autosize event if the height changes."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally-loaded value and clears any validation messages."
    },
    {
     "name": "selectText",
     "sig": "(Number start, Number end)",
     "type": "function",
     "desc": "Selects text in this field"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.form.Field": {
   "props": [
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": ""
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": ""
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": ""
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": ""
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": ""
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": ""
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": ""
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": ""
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"20\", autocomplete: \"off\"})",
     "memberOf": ""
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the field (defaults to \"x-form-field\")",
     "memberOf": ""
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": ""
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": ""
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": ""
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": ""
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": ""
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": ""
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": ""
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    }
   ]
  },
  "Roo.form.FieldSet": {
   "props": [
    {
     "name": "legend",
     "type": "String",
     "desc": "The text to display as the legend for the FieldSet (defaults to '')",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec used to autocreate the fieldset (defaults to {tag: 'fieldset', cn: {tag:'legend'}})",
     "memberOf": ""
    },
    {
     "name": "style",
     "type": "String/Object/Function",
     "desc": "A style specification string, e.g. \"width:100px\", or object in the form {width:\"100px\"}, or\na function which returns such a specification.",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "Valid values are \"left,\" \"top\" and \"right\" (defaults to \"left\")",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "Fixed width in pixels of all field labels (defaults to undefined)",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "clear",
     "type": "Boolean",
     "desc": "True to add a clearing element at the end of this layout, equivalent to CSS clear: both (defaults to true)",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "labelSeparator",
     "type": "String",
     "desc": "The separator to use after field labels (defaults to ':')",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "hideLabels",
     "type": "Boolean",
     "desc": "True to suppress the display of field labels in this layout (defaults to false)",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addxtype",
     "sig": "(Object config)",
     "type": "function",
     "desc": "Adds a object form elements (using the xtype property as the factory method.)\nValid xtypes are:  TextField, TextArea .... Button, Layout, FieldSet, Column"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.form.Form": {
   "props": [
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "The width of labels. This property cascades to child containers.",
     "memberOf": ""
    },
    {
     "name": "itemCls",
     "type": "String",
     "desc": "A css class to apply to the x-form-item of fields. This property cascades to child containers.",
     "memberOf": ""
    },
    {
     "name": "buttonAlign",
     "type": "String",
     "desc": "Valid values are \"left,\" \"center\" and \"right\" (defaults to \"center\")",
     "memberOf": ""
    },
    {
     "name": "minButtonWidth",
     "type": "Number",
     "desc": "Minimum width of all buttons in pixels (defaults to 75)",
     "memberOf": ""
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "Valid values are \"left,\" \"top\" and \"right\" (defaults to \"left\").\nThis property cascades to child containers if not set.",
     "memberOf": ""
    },
    {
     "name": "monitorValid",
     "type": "Boolean",
     "desc": "If true the form monitors its valid state <b>client-side</b> and\nfires a looping event with that state. This is required to bind buttons to the valid\nstate using the config value formBind:true on the button.",
     "memberOf": ""
    },
    {
     "name": "monitorPoll",
     "type": "Number",
     "desc": "The milliseconds to poll valid state, ignored if monitorValid is not true (defaults to 200)",
     "memberOf": ""
    },
    {
     "name": "progressUrl",
     "type": "String",
     "desc": "- Url to return progress data",
     "memberOf": ""
    },
    {
     "name": "method",
     "type": "String",
     "desc": "The request method to use (GET or POST) for form actions if one isn't supplied in the action options.",
     "memberOf": "Roo.form.BasicForm"
    },
    {
     "name": "reader",
     "type": "DataReader",
     "desc": "An Roo.data.DataReader (e.g. {@link Roo.data.XmlReader}) to be used to read data when executing \"load\" actions.\nThis is optional as there is built-in support for processing JSON.",
     "memberOf": "Roo.form.BasicForm"
    },
    {
     "name": "errorReader",
     "type": "DataReader",
     "desc": "An Roo.data.DataReader (e.g. {@link Roo.data.XmlReader}) to be used to read data when reading validation errors on \"submit\" actions.\nThis is completely optional as there is built-in support for processing JSON.",
     "memberOf": "Roo.form.BasicForm"
    },
    {
     "name": "url",
     "type": "String",
     "desc": "The URL to use for form actions if one isn't supplied in the action options.",
     "memberOf": "Roo.form.BasicForm"
    },
    {
     "name": "fileUpload",
     "type": "Boolean",
     "desc": "Set to true if this form is a file upload.",
     "memberOf": "Roo.form.BasicForm"
    },
    {
     "name": "baseParams",
     "type": "Object",
     "desc": "Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.",
     "memberOf": "Roo.form.BasicForm"
    },
    {
     "name": "timeout",
     "type": "Number",
     "desc": "Timeout for form actions in seconds (default is 30 seconds).",
     "memberOf": "Roo.form.BasicForm"
    },
    {
     "name": "trackResetOnLoad",
     "type": "Boolean",
     "desc": "If set to true, form.reset() resets to the last loaded\nor setValues() data instead of when the form was first created.",
     "memberOf": "Roo.form.BasicForm"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "actioncomplete",
     "sig": "function (_self, action)\n{\n\n}",
     "type": "function",
     "desc": "Fires when an action is completed."
    },
    {
     "name": "actionfailed",
     "sig": "function (_self, action)\n{\n\n}",
     "type": "function",
     "desc": "Fires when an action fails."
    },
    {
     "name": "beforeaction",
     "sig": "function (_self, action)\n{\n\n}",
     "type": "function",
     "desc": "Fires before any action is performed. Return false to cancel the action."
    },
    {
     "name": "clientvalidation",
     "sig": "function (_self, valid)\n{\n\n}",
     "type": "function",
     "desc": "If the monitorValid config option is true, this event fires repetitively to notify of valid state"
    },
    {
     "name": "rendered",
     "sig": "function (form)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the form is rendered"
    }
   ],
   "methods": [
    {
     "name": "add",
     "sig": "(Field field1, Field field2)",
     "type": "function",
     "desc": "Add Roo.form components to the current open container (e.g. column, fieldset, etc.).  Fields added via this method\ncan also be passed with an additional property of fieldLabel, which if supplied, will provide the text to display\nas the label of the field."
    },
    {
     "name": "addButton",
     "sig": "(String/Object config, Function handler, Object scope)",
     "type": "function",
     "desc": "Adds a button to the footer of the form - this <b>must</b> be called before the form is rendered."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addForm",
     "sig": "(Roo.form.Form form)",
     "type": "function",
     "desc": "Add a secondary form to this one, \nUsed to provide tabbed forms. One form is primary, with hidden values \nwhich mirror the elements from the other forms."
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addxtype",
     "sig": "(Object config)",
     "type": "function",
     "desc": "Adds a series of form elements (using the xtype property as the factory method.\nValid xtypes are:  TextField, TextArea .... Button, Layout, FieldSet, Column, (and 'end' to close a block)"
    },
    {
     "name": "applyIfToFields",
     "sig": "(Object values)",
     "type": "function",
     "desc": "Calls {@link Ext#applyIf} for all field in this form with the passed object."
    },
    {
     "name": "applyToFields",
     "sig": "(Object values)",
     "type": "function",
     "desc": "Calls {@link Ext#apply} for all fields in this form with the passed object."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clears all invalid messages in this form."
    },
    {
     "name": "column",
     "sig": "(Object config, Field field1, Field field2, Field etc)",
     "type": "function",
     "desc": "Opens a new {@link Roo.form.Column} container in the layout stack. If fields are passed after the config, the\nfields are added and the column is closed. If no fields are passed the column remains open\nuntil end() is called."
    },
    {
     "name": "container",
     "sig": "(Object config, Field field1, Field field2, Field etc)",
     "type": "function",
     "desc": "Opens a new {@link Roo.form.Layout} container in the layout stack. If fields are passed after the config, the\nfields are added and the container is closed. If no fields are passed the container remains open\nuntil end() is called."
    },
    {
     "name": "doAction",
     "sig": "(String actionName, Object options)",
     "type": "function",
     "desc": "Performs a predefined action (submit or load) or custom actions you define on this form."
    },
    {
     "name": "end",
     "sig": "()",
     "type": "function",
     "desc": "Closes the current open container"
    },
    {
     "name": "fieldset",
     "sig": "(Object config, Field field1, Field field2, Field etc)",
     "type": "function",
     "desc": "Opens a new {@link Roo.form.FieldSet} container in the layout stack. If fields are passed after the config, the\nfields are added and the fieldset is closed. If no fields are passed the fieldset remains open\nuntil end() is called."
    },
    {
     "name": "findField",
     "sig": "(String id)",
     "type": "function",
     "desc": "Find a Roo.form.Field in this form by id, dataIndex, name or hiddenName"
    },
    {
     "name": "findbyId",
     "sig": "(String id)",
     "type": "function",
     "desc": "Find any element that has been added to a form, using it's ID or name\nThis can include framesets, columns etc. along with regular fields.."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getFieldValues",
     "sig": "()",
     "type": "function",
     "desc": "Returns the fields in this form as an object with key/value pairs. \nThis differs from getValues as it calls getValue on each child item, rather than using dom data."
    },
    {
     "name": "getValues",
     "sig": "(Boolean asString)",
     "type": "function",
     "desc": "Returns the fields in this form as an object with key/value pairs. If multiple fields exist with the same name\nthey are returned as an array."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if any fields in this form have changed since their original load."
    },
    {
     "name": "isValid",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if client-side validation on the form is successful."
    },
    {
     "name": "load",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Shortcut to do a load action."
    },
    {
     "name": "loadRecord",
     "sig": "(Record record)",
     "type": "function",
     "desc": "Loads an Roo.data.Record into this form."
    },
    {
     "name": "markInvalid",
     "sig": "(Array/Object errors)",
     "type": "function",
     "desc": "Mark fields in this form invalid in bulk."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "remove",
     "sig": "(Field field)",
     "type": "function",
     "desc": "Removes a field from the items collection (does NOT remove its markup)."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "Render this form into the passed container. This should only be called once!"
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets this form."
    },
    {
     "name": "setValues",
     "sig": "(Array/Object values)",
     "type": "function",
     "desc": "Set values for fields in this form in bulk."
    },
    {
     "name": "start",
     "sig": "(Object container)",
     "type": "function",
     "desc": "Opens the passed container in the layout stack. The container can be any {@link Roo.form.Layout} or subclass."
    },
    {
     "name": "startMonitoring",
     "sig": "()",
     "type": "function",
     "desc": "Starts monitoring of the valid state of this form. Usually this is done by passing the config\noption \"monitorValid\""
    },
    {
     "name": "stopMonitoring",
     "sig": "()",
     "type": "function",
     "desc": "Stops monitoring of the valid state of this form"
    },
    {
     "name": "submit",
     "sig": "(Object options)",
     "type": "function",
     "desc": "Shortcut to do a submit action."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateRecord",
     "sig": "(Record record)",
     "type": "function",
     "desc": "Persists the values in this form into the passed Roo.data.Record object in a beginEdit/endEdit block."
    }
   ]
  },
  "Roo.form.GridField": {
   "props": [
    {
     "name": "width",
     "type": "Number",
     "desc": "- used to restrict width of grid..",
     "memberOf": ""
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "- used to restrict height of grid..",
     "memberOf": ""
    },
    {
     "name": "xgrid",
     "type": "Object",
     "desc": "(xtype'd description of grid) { xtype : 'Grid', dataSource: .... }\n\n}",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"checkbox\", autocomplete: \"off\"})",
     "memberOf": ""
    },
    {
     "name": "addTitle",
     "type": "String",
     "desc": "Text to include for adding a title.",
     "memberOf": ""
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the field (defaults to \"x-form-field\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(String either)",
     "type": "function",
     "desc": "Sets the value of the item."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    }
   ]
  },
  "Roo.form.Hidden": {
   "props": [
    {
     "name": "grow",
     "type": "Boolean",
     "desc": "True if this field should automatically grow and shrink to its content",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "growMin",
     "type": "Number",
     "desc": "The minimum width to allow when grow = true (defaults to 30)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "growMax",
     "type": "Number",
     "desc": "The maximum width to allow when grow = true (defaults to 800)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "emptyText",
     "type": "String",
     "desc": "The default text to display in an empty field - placeholder... (defaults to null).",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"20\", autocomplete: \"off\"})",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the field (defaults to \"x-form-field\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "autosize",
     "sig": "function (_self, width)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "autoSize",
     "sig": "()",
     "type": "function",
     "desc": "Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.\nThis only takes effect if grow = true, and fires the autosize event."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally-loaded value and clears any validation messages."
    },
    {
     "name": "selectText",
     "sig": "(Number start, Number end)",
     "type": "function",
     "desc": "Selects text in this field"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.form.HtmlEditor": {
   "props": [
    {
     "name": "clearUp",
     "type": "Boolean",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "toolbars",
     "type": "Array",
     "desc": "Array of toolbars. - defaults to just the Standard one",
     "memberOf": ""
    },
    {
     "name": "resizable",
     "type": "String",
     "desc": "'s' or 'se' or 'e' - wrapps the element in a\n                       Roo.resizable.",
     "memberOf": ""
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "(in pixels)",
     "memberOf": ""
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "(in pixels)",
     "memberOf": ""
    },
    {
     "name": "stylesheets",
     "type": "Array",
     "desc": "url of stylesheets. set to [] to disable stylesheets.",
     "memberOf": ""
    },
    {
     "name": "blacklist",
     "type": "Array",
     "desc": "of css styles style attributes (blacklist overrides whitelist)",
     "memberOf": ""
    },
    {
     "name": "whitelist",
     "type": "Array",
     "desc": "of css styles style attributes (blacklist overrides whitelist)",
     "memberOf": ""
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the editor is first receives the focus. Any insertion must wait\nuntil after this event."
    },
    {
     "name": "autosave",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Auto save the htmlEditor value as a file into Events"
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforepush",
     "sig": "function (_self, html)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the iframe editor is updated with content from the textarea. Return false\nto cancel the push."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "beforesync",
     "sig": "function (_self, html)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the textarea is updated with content from the editor iframe. Return false\nto cancel the sync."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "editmodechange",
     "sig": "function (_self, sourceEdit)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the editor switches edit modes"
    },
    {
     "name": "editorevent",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when on any editor (mouse up/down cursor movement etc.) - used for toolbar hooks."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "firstfocus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when on first focus - needed by toolbars.."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "initialize",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the editor is fully initialized (including the iframe)"
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "push",
     "sig": "function (_self, html)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the iframe editor is updated with content from the textarea."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "savedpreview",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "preview the saved version of htmlEditor"
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "stylesheetsclick",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when press the Sytlesheets button"
    },
    {
     "name": "sync",
     "sig": "function (_self, html)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the textarea is updated with content from the editor iframe."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide"
    },
    {
     "name": "createToolbar",
     "sig": "(HtmlEditor editor)",
     "type": "function",
     "desc": "Protected method that will not generally be called directly. It\nis called when the editor creates its toolbar. Override this method if you need to\nadd custom toolbar buttons."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "toggleSourceEdit",
     "sig": "(Boolean sourceEdit)",
     "type": "function",
     "desc": "Toggles the editor between standard and source edit mode."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    }
   ]
  },
  "Roo.form.HtmlEditor.ToolbarContext": {
   "props": [
    {
     "name": "disable",
     "type": "Object",
     "desc": "List of toolbar elements to disable",
     "memberOf": ""
    },
    {
     "name": "styles",
     "type": "Object",
     "desc": "List of styles \n   eg. { '*' : [ 'headline' ] , 'TD' : [ 'underline', 'double-underline' ] } \n\nThese must be defined in the page, so they get rendered correctly..\n.headline { }\nTD.underline { }",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "updateToolbar",
     "sig": "()",
     "type": "function",
     "desc": "Protected method that will not generally be called directly. It triggers\na toolbar update by reading the markup state of the current selection in the editor."
    }
   ]
  },
  "Roo.form.HtmlEditor.ToolbarStandard": {
   "props": [
    {
     "name": "disable",
     "type": "Object",
     "desc": "List of elements to disable..",
     "memberOf": ""
    },
    {
     "name": "btns",
     "type": "Array",
     "desc": "List of additional buttons.\n\n\nNEEDS Extra CSS? \n.x-html-editor-tb .x-edit-none .x-btn-text { background: none; }",
     "memberOf": ""
    },
    {
     "name": "createLinkText",
     "type": "String",
     "desc": "The default text for the create link prompt",
     "memberOf": ""
    },
    {
     "name": "defaultLinkValue",
     "type": "String",
     "desc": "The default value for the create link prompt (defaults to http:/ /)",
     "memberOf": ""
    },
    {
     "name": "fontFamilies",
     "type": "Array",
     "desc": "An array of available font families",
     "memberOf": ""
    },
    {
     "name": "defaultFont",
     "type": "String",
     "desc": "default font to use.",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "updateToolbar",
     "sig": "()",
     "type": "function",
     "desc": "Protected method that will not generally be called directly. It triggers\na toolbar update by reading the markup state of the current selection in the editor."
    }
   ]
  },
  "Roo.form.Layout": {
   "props": [
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec used to autocreate the layout (defaults to {tag: 'div', cls: 'x-form-ct'})",
     "memberOf": ""
    },
    {
     "name": "style",
     "type": "String/Object/Function",
     "desc": "A style specification string, e.g. \"width:100px\", or object in the form {width:\"100px\"}, or\na function which returns such a specification.",
     "memberOf": ""
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "Valid values are \"left,\" \"top\" and \"right\" (defaults to \"left\")",
     "memberOf": ""
    },
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "Fixed width in pixels of all field labels (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "clear",
     "type": "Boolean",
     "desc": "True to add a clearing element at the end of this layout, equivalent to CSS clear: both (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "labelSeparator",
     "type": "String",
     "desc": "The separator to use after field labels (defaults to ':')",
     "memberOf": ""
    },
    {
     "name": "hideLabels",
     "type": "Boolean",
     "desc": "True to suppress the display of field labels in this layout (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addxtype",
     "sig": "(Object config)",
     "type": "function",
     "desc": "Adds a object form elements (using the xtype property as the factory method.)\nValid xtypes are:  TextField, TextArea .... Button, Layout, FieldSet, Column"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.form.MonthField": {
   "props": [
    {
     "name": "format",
     "type": "String",
     "desc": "The default date format string which can be overriden for localization support.  The format must be\nvalid according to {@link Date#parseDate} (defaults to 'm/d/y').",
     "memberOf": ""
    },
    {
     "name": "altFormats",
     "type": "String",
     "desc": "Multiple date formats separated by \"|\" to try when parsing a user input value and it doesn't match the defined\nformat (defaults to 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d').",
     "memberOf": ""
    },
    {
     "name": "disabledDays",
     "type": "Array",
     "desc": "An array of days to disable, 0 based. For example, [0, 6] disables Sunday and Saturday (defaults to null).",
     "memberOf": ""
    },
    {
     "name": "disabledDaysText",
     "type": "String",
     "desc": "The tooltip to display when the date falls on a disabled day (defaults to 'Disabled')",
     "memberOf": ""
    },
    {
     "name": "disabledDates",
     "type": "Array",
     "desc": "An array of \"dates\" to disable, as strings. These strings will be used to build a dynamic regular\nexpression so they are very powerful. Some examples:\n<ul>\n<li>[\"03/08/2003\", \"09/16/2003\"] would disable those exact dates</li>\n<li>[\"03/08\", \"09/16\"] would disable those days for every year</li>\n<li>[\"^03/08\"] would only match the beginning (useful if you are using short years)</li>\n<li>[\"03/../2006\"] would disable every day in March 2006</li>\n<li>[\"^03\"] would disable every day in every March</li>\n</ul>\nIn order to support regular expressions, if you are using a date format that has \".\" in it, you will have to\nescape the dot when restricting dates. For example: [\"03\\\\.08\\\\.03\"].",
     "memberOf": ""
    },
    {
     "name": "disabledDatesText",
     "type": "String",
     "desc": "The tooltip text to display when the date falls on a disabled date (defaults to 'Disabled')",
     "memberOf": ""
    },
    {
     "name": "minValue",
     "type": "Date/String",
     "desc": "The minimum allowed date. Can be either a Javascript date object or a string date in a\nvalid format (defaults to null).",
     "memberOf": ""
    },
    {
     "name": "maxValue",
     "type": "Date/String",
     "desc": "The maximum allowed date. Can be either a Javascript date object or a string date in a\nvalid format (defaults to null).",
     "memberOf": ""
    },
    {
     "name": "minText",
     "type": "String",
     "desc": "The error text to display when the date in the cell is before minValue (defaults to\n'The date in this field must be after {minValue}').",
     "memberOf": ""
    },
    {
     "name": "maxTextf",
     "type": "String",
     "desc": "The error text to display when the date in the cell is after maxValue (defaults to\n'The date in this field must be before {maxValue}').",
     "memberOf": ""
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to display when the date in the field is invalid (defaults to\n'{value} is not a valid date - it must be in the format {format}').",
     "memberOf": ""
    },
    {
     "name": "triggerClass",
     "type": "String",
     "desc": "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-date-trigger'\nwhich displays a calendar icon).",
     "memberOf": ""
    },
    {
     "name": "useIso",
     "type": "Boolean",
     "desc": "if enabled, then the date field will use a hidden field to store the \nreal value as iso formated date. default (true)",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"10\", autocomplete: \"off\"})",
     "memberOf": ""
    },
    {
     "name": "hideTrigger",
     "type": "Boolean",
     "desc": "True to hide the trigger element and display only the base text field (defaults to false)",
     "memberOf": "Roo.form.TriggerField"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "emptyText",
     "type": "String",
     "desc": "The default text to display in an empty field - placeholder... (defaults to null).",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the field (defaults to \"x-form-field\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "autosize",
     "sig": "function (_self, width)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "select",
     "sig": "function (combo, date)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a date is selected"
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the current date value of the date field."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "onTriggerClick",
     "sig": "(EventObject e)",
     "type": "function",
     "desc": "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally-loaded value and clears any validation messages."
    },
    {
     "name": "selectText",
     "sig": "(Number start, Number end)",
     "type": "function",
     "desc": "Selects text in this field"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(String/Date date)",
     "type": "function",
     "desc": "Sets the value of the date field.  You can pass a date object or any string that can be parsed into a valid\ndate, using MonthField.format as the date format, according to the same rules as {@link Date#parseDate}\n(the default format used is \"m/d/y\").\n<br />Usage:\n<pre><code>\n//All of these calls set the same date value (May 4, 2006)\n\n//Pass a date object:\nvar dt = new Date('5/4/06');\nmonthField.setValue(dt);\n\n//Pass a date string (default format):\nmonthField.setValue('5/4/06');\n\n//Pass a date string (custom format):\nmonthField.format = 'Y-m-d';\nmonthField.setValue('2006-5-4');\n</code></pre>"
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.form.NumberField": {
   "props": [
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the field (defaults to \"x-form-field x-form-num-field\")",
     "memberOf": ""
    },
    {
     "name": "allowDecimals",
     "type": "Boolean",
     "desc": "False to disallow decimal values (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "decimalSeparator",
     "type": "String",
     "desc": "Character(s) to allow as the decimal separator (defaults to '.')",
     "memberOf": ""
    },
    {
     "name": "decimalPrecision",
     "type": "Number",
     "desc": "The maximum precision to display after the decimal separator (defaults to 2)",
     "memberOf": ""
    },
    {
     "name": "allowNegative",
     "type": "Boolean",
     "desc": "False to prevent entering a negative sign (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "minValue",
     "type": "Number",
     "desc": "The minimum allowed value (defaults to Number.NEGATIVE_INFINITY)",
     "memberOf": ""
    },
    {
     "name": "maxValue",
     "type": "Number",
     "desc": "The maximum allowed value (defaults to Number.MAX_VALUE)",
     "memberOf": ""
    },
    {
     "name": "minText",
     "type": "String",
     "desc": "Error text to display if the minimum value validation fails (defaults to \"The minimum value for this field is {minValue}\")",
     "memberOf": ""
    },
    {
     "name": "maxText",
     "type": "String",
     "desc": "Error text to display if the maximum value validation fails (defaults to \"The maximum value for this field is {maxValue}\")",
     "memberOf": ""
    },
    {
     "name": "nanText",
     "type": "String",
     "desc": "Error text to display if the value is not a valid number.  For example, this can happen\nif a valid character like '.' or '-' is left in the field with no number (defaults to \"{value} is not a valid number\")",
     "memberOf": ""
    },
    {
     "name": "grow",
     "type": "Boolean",
     "desc": "True if this field should automatically grow and shrink to its content",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "growMin",
     "type": "Number",
     "desc": "The minimum width to allow when grow = true (defaults to 30)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "growMax",
     "type": "Number",
     "desc": "The maximum width to allow when grow = true (defaults to 800)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "emptyText",
     "type": "String",
     "desc": "The default text to display in an empty field - placeholder... (defaults to null).",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"20\", autocomplete: \"off\"})",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "autosize",
     "sig": "function (_self, width)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "autoSize",
     "sig": "()",
     "type": "function",
     "desc": "Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.\nThis only takes effect if grow = true, and fires the autosize event."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally-loaded value and clears any validation messages."
    },
    {
     "name": "selectText",
     "sig": "(Number start, Number end)",
     "type": "function",
     "desc": "Selects text in this field"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.form.Radio": {
   "props": [
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the checkbox receives focus (defaults to undefined)",
     "memberOf": "Roo.form.Checkbox"
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the checkbox (defaults to \"x-form-field\")",
     "memberOf": "Roo.form.Checkbox"
    },
    {
     "name": "checked",
     "type": "Boolean",
     "desc": "True if the the checkbox should render already checked (defaults to false)",
     "memberOf": "Roo.form.Checkbox"
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"checkbox\", autocomplete: \"off\"})",
     "memberOf": "Roo.form.Checkbox"
    },
    {
     "name": "boxLabel",
     "type": "String",
     "desc": "The text that appears beside the checkbox",
     "memberOf": "Roo.form.Checkbox"
    },
    {
     "name": "inputValue",
     "type": "String",
     "desc": "The value that should go into the generated input element's value attribute",
     "memberOf": "Roo.form.Checkbox"
    },
    {
     "name": "valueOff",
     "type": "String",
     "desc": "The value that should go into the generated input element's value when unchecked.",
     "memberOf": "Roo.form.Checkbox"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "check",
     "sig": "function (_self, checked)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the checkbox is checked or unchecked."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getGroupValue",
     "sig": "()",
     "type": "function",
     "desc": "If this radio is part of a group, it will return the selected value"
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the checked state of the checkbox."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(Boolean/String value, Boolean/String suppressEvent)",
     "type": "function",
     "desc": "Sets the checked state of the checkbox.\nOn is always based on a string comparison between inputValue and the param."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    }
   ]
  },
  "Roo.form.Row": {
   "props": [
    {
     "name": "width",
     "type": "Number/String",
     "desc": "The fixed width of the column in pixels or CSS value (defaults to \"auto\")",
     "memberOf": ""
    },
    {
     "name": "height",
     "type": "Number/String",
     "desc": "The fixed height of the column in pixels or CSS value (defaults to \"auto\")",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec used to autocreate the layout (defaults to {tag: 'div', cls: 'x-form-ct'})",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "style",
     "type": "String/Object/Function",
     "desc": "A style specification string, e.g. \"width:100px\", or object in the form {width:\"100px\"}, or\na function which returns such a specification.",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "labelAlign",
     "type": "String",
     "desc": "Valid values are \"left,\" \"top\" and \"right\" (defaults to \"left\")",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "labelWidth",
     "type": "Number",
     "desc": "Fixed width in pixels of all field labels (defaults to undefined)",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "clear",
     "type": "Boolean",
     "desc": "True to add a clearing element at the end of this layout, equivalent to CSS clear: both (defaults to true)",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "labelSeparator",
     "type": "String",
     "desc": "The separator to use after field labels (defaults to ':')",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "hideLabels",
     "type": "Boolean",
     "desc": "True to suppress the display of field labels in this layout (defaults to false)",
     "memberOf": "Roo.form.Layout"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addxtype",
     "sig": "(Object config)",
     "type": "function",
     "desc": "Adds a object form elements (using the xtype property as the factory method.)\nValid xtypes are:  TextField, TextArea .... Button, Layout, FieldSet, Column"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.form.Select": {
   "props": [
    {
     "name": "transform",
     "type": "String/HTMLElement/Element",
     "desc": "The id, DOM node or element of an existing select to convert to a ComboBox",
     "memberOf": ""
    },
    {
     "name": "lazyRender",
     "type": "Boolean",
     "desc": "True to prevent the ComboBox from rendering until requested (should always be used when\nrendering into an Roo.Editor, defaults to false)",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "Boolean/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to:\n{tag: \"input\", type: \"text\", size: \"24\", autocomplete: \"off\"})",
     "memberOf": ""
    },
    {
     "name": "store",
     "type": "Roo.data.Store",
     "desc": "The data store to which this combo is bound (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "title",
     "type": "String",
     "desc": "If supplied, a header element is created containing this text and added into the top of\nthe dropdown list (defaults to undefined, with no header element)",
     "memberOf": ""
    },
    {
     "name": "grow",
     "type": "Boolean",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "growMin",
     "type": "Number",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "growMax",
     "type": "Number",
     "desc": "",
     "memberOf": ""
    },
    {
     "name": "tpl",
     "type": "String/Roo.Template",
     "desc": "The template to use to render the output",
     "memberOf": ""
    },
    {
     "name": "listWidth",
     "type": "Number",
     "desc": "The width in pixels of the dropdown list (defaults to the width of the ComboBox field)",
     "memberOf": ""
    },
    {
     "name": "displayField",
     "type": "String",
     "desc": "The underlying data field name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'text' if mode = 'local')",
     "memberOf": ""
    },
    {
     "name": "valueField",
     "type": "String",
     "desc": "The underlying data value name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'value' if mode = 'local'). \nNote: use of a valueField requires the user make a selection\nin order for a value to be mapped.",
     "memberOf": ""
    },
    {
     "name": "hiddenName",
     "type": "String",
     "desc": "If specified, a hidden form field with this name is dynamically generated to store the\nfield's data value (defaults to the underlying DOM element's name)",
     "memberOf": ""
    },
    {
     "name": "listClass",
     "type": "String",
     "desc": "CSS class to apply to the dropdown list element (defaults to '')",
     "memberOf": ""
    },
    {
     "name": "selectedClass",
     "type": "String",
     "desc": "CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')",
     "memberOf": ""
    },
    {
     "name": "triggerClass",
     "type": "String",
     "desc": "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-arrow-trigger'\nwhich displays a downward arrow icon).",
     "memberOf": ""
    },
    {
     "name": "shadow",
     "type": "Boolean/String",
     "desc": "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right",
     "memberOf": ""
    },
    {
     "name": "listAlign",
     "type": "String",
     "desc": "A valid anchor position value. See {@link Roo.Element#alignTo} for details on supported\nanchor positions (defaults to 'tl-bl')",
     "memberOf": ""
    },
    {
     "name": "maxHeight",
     "type": "Number",
     "desc": "The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)",
     "memberOf": ""
    },
    {
     "name": "triggerAction",
     "type": "String",
     "desc": "The action to execute when the trigger field is activated.  Use 'all' to run the\nquery specified by the allQuery config option (defaults to 'query')",
     "memberOf": ""
    },
    {
     "name": "minChars",
     "type": "Number",
     "desc": "The minimum number of characters the user must type before autocomplete and typeahead activate\n(defaults to 4, does not apply if editable = false)",
     "memberOf": ""
    },
    {
     "name": "typeAhead",
     "type": "Boolean",
     "desc": "True to populate and autoselect the remainder of the text being typed after a configurable\ndelay (typeAheadDelay) if it matches a known value (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "queryDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds to delay between the start of typing and sending the\nquery to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local')",
     "memberOf": ""
    },
    {
     "name": "pageSize",
     "type": "Number",
     "desc": "If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the\nfilter queries will execute with page start and limit parameters.  Only applies when mode = 'remote' (defaults to 0)",
     "memberOf": ""
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to select any existing text in the field immediately on focus.  Only applies\nwhen editable = true (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "queryParam",
     "type": "String",
     "desc": "Name of the query as it will be passed on the querystring (defaults to 'query')",
     "memberOf": ""
    },
    {
     "name": "loadingText",
     "type": "String",
     "desc": "The text to display in the dropdown list while data is loading.  Only applies\nwhen mode = 'remote' (defaults to 'Loading...')",
     "memberOf": ""
    },
    {
     "name": "resizable",
     "type": "Boolean",
     "desc": "True to add a resize handle to the bottom of the dropdown list (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "handleHeight",
     "type": "Number",
     "desc": "The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8)",
     "memberOf": ""
    },
    {
     "name": "editable",
     "type": "Boolean",
     "desc": "False to prevent the user from typing text directly into the field, just like a\ntraditional select (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "allQuery",
     "type": "String",
     "desc": "The text query to send to the server to return all records for the list with no filtering (defaults to '')",
     "memberOf": ""
    },
    {
     "name": "mode",
     "type": "String",
     "desc": "Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)",
     "memberOf": ""
    },
    {
     "name": "minListWidth",
     "type": "Number",
     "desc": "The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if\nlistWidth has a higher value)",
     "memberOf": ""
    },
    {
     "name": "forceSelection",
     "type": "Boolean",
     "desc": "True to restrict the selected value to one of the values in the list, false to\nallow the user to set arbitrary text into the field (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "typeAheadDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds to wait until the typeahead text is displayed\nif typeAhead = true (defaults to 250)",
     "memberOf": ""
    },
    {
     "name": "valueNotFoundText",
     "type": "String",
     "desc": "When using a name/value combo, if the value passed to setValue is not found in\nthe store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "defaultValue",
     "type": "String",
     "desc": "The value displayed after loading the store.",
     "memberOf": ""
    },
    {
     "name": "blockFocus",
     "type": "Boolean",
     "desc": "Prevents all focus calls, so it can work with things like HTML edtor bar",
     "memberOf": ""
    },
    {
     "name": "disableClear",
     "type": "Boolean",
     "desc": "Disable showing of clear button.",
     "memberOf": ""
    },
    {
     "name": "alwaysQuery",
     "type": "Boolean",
     "desc": "Disable caching of results, and always send query",
     "memberOf": ""
    },
    {
     "name": "hideTrigger",
     "type": "Boolean",
     "desc": "True to hide the trigger element and display only the base text field (defaults to false)",
     "memberOf": "Roo.form.TriggerField"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "emptyText",
     "type": "String",
     "desc": "The default text to display in an empty field - placeholder... (defaults to null).",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the field (defaults to \"x-form-field\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "autosize",
     "sig": "function (_self, width)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "clearValue",
     "sig": "()",
     "type": "function",
     "desc": "Clears any text/value currently set in the field"
    },
    {
     "name": "collapse",
     "sig": "()",
     "type": "function",
     "desc": "Hides the dropdown list if it is currently expanded. Fires the 'collapse' event on completion."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "doQuery",
     "sig": "(String query, Boolean forceAll)",
     "type": "function",
     "desc": "Execute a query to filter the dropdown list.  Fires the beforequery event prior to performing the\nquery allowing the query action to be canceled if needed."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "expand",
     "sig": "()",
     "type": "function",
     "desc": "Expands the dropdown list if it is currently hidden. Fires the 'expand' event on completion."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the currently selected field value or empty string if no value is set."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isExpanded",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the dropdown list is expanded, else false."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "onTriggerClick",
     "sig": "(EventObject e)",
     "type": "function",
     "desc": "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally-loaded value and clears any validation messages."
    },
    {
     "name": "select",
     "sig": "(Number index, Boolean scrollIntoView)",
     "type": "function",
     "desc": "Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue."
    },
    {
     "name": "selectByValue",
     "sig": "(String value, Boolean scrollIntoView)",
     "type": "function",
     "desc": "Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue."
    },
    {
     "name": "selectText",
     "sig": "(Number start, Number end)",
     "type": "function",
     "desc": "Selects text in this field"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setEditable",
     "sig": "(Boolean value)",
     "type": "function",
     "desc": "Allow or prevent the user from directly editing the field text.  If false is passed,\nthe user will only be able to select from the items defined in the dropdown list.  This method\nis the runtime equivalent of setting the 'editable' config option at config time."
    },
    {
     "name": "setFromData",
     "sig": "(Object value)",
     "type": "function",
     "desc": "Sets the value of the field based on a object which is related to the record format for the store."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(String value)",
     "type": "function",
     "desc": "Sets the specified value into the field.  If the value finds a match, the corresponding record text\nwill be displayed in the field.  If the value does not match the data value of an existing item,\nand the valueNotFoundText config option is defined, it will be displayed as the default field text.\nOtherwise the field will be blank (although the value will still be set)."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.form.Signature": {
   "props": [
    {
     "name": "labels",
     "type": "Object",
     "desc": "Label to use when rendering a form.\ndefaults to \nlabels : { \n     clear : \"Clear\",\n     confirm : \"Confirm\"\n }",
     "memberOf": ""
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "The signature panel width (defaults to 300)",
     "memberOf": ""
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "The signature panel height (defaults to 100)",
     "memberOf": ""
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"20\", autocomplete: \"off\"})",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the field (defaults to \"x-form-field\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "confirm",
     "sig": "function (combo)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the 'confirm' icon is pressed (add a listener to enable add button)"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "reset",
     "sig": "function (combo, record)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the 'edit' icon is pressed (add a listener to enable add button)"
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "createToolbar",
     "sig": "(HtmlEditor editor)",
     "type": "function",
     "desc": "Protected method that will not generally be called directly. It\nis called when the editor creates its toolbar. Override this method if you need to\nadd custom toolbar buttons."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getConfirmed",
     "sig": "()",
     "type": "function",
     "desc": ""
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getHeight",
     "sig": "()",
     "type": "function",
     "desc": ""
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getImageDataURI",
     "sig": "()",
     "type": "function",
     "desc": "when user is clicked confirm then show this image....."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "getWidth",
     "sig": "()",
     "type": "function",
     "desc": ""
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally loaded value and clears any validation messages"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    }
   ]
  },
  "Roo.form.TextArea": {
   "props": [
    {
     "name": "growMin",
     "type": "Number",
     "desc": "The minimum height to allow when grow = true (defaults to 60)",
     "memberOf": ""
    },
    {
     "name": "growMax",
     "type": "Number",
     "desc": "The maximum height to allow when grow = true (defaults to 1000)",
     "memberOf": ""
    },
    {
     "name": "preventScrollbars",
     "type": "Boolean",
     "desc": "True to prevent scrollbars from appearing regardless of how much text is\nin the field (equivalent to setting overflow: hidden, defaults to false)",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"textarea\", style: \"width:300px;height:60px;\", autocomplete: \"off\"})",
     "memberOf": ""
    },
    {
     "name": "grow",
     "type": "Boolean",
     "desc": "True if this field should automatically grow and shrink to its content",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "emptyText",
     "type": "String",
     "desc": "The default text to display in an empty field - placeholder... (defaults to null).",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the field (defaults to \"x-form-field\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "autosize",
     "sig": "function (_self, width)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "autoSize",
     "sig": "()",
     "type": "function",
     "desc": "Automatically grows the field to accomodate the height of the text up to the maximum field height allowed.\nThis only takes effect if grow = true, and fires the autosize event if the height changes."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally-loaded value and clears any validation messages."
    },
    {
     "name": "selectText",
     "sig": "(Number start, Number end)",
     "type": "function",
     "desc": "Selects text in this field"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.form.TextField": {
   "props": [
    {
     "name": "grow",
     "type": "Boolean",
     "desc": "True if this field should automatically grow and shrink to its content",
     "memberOf": ""
    },
    {
     "name": "growMin",
     "type": "Number",
     "desc": "The minimum width to allow when grow = true (defaults to 30)",
     "memberOf": ""
    },
    {
     "name": "growMax",
     "type": "Number",
     "desc": "The maximum width to allow when grow = true (defaults to 800)",
     "memberOf": ""
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": ""
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": ""
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": ""
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": ""
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": ""
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": ""
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": ""
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": ""
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": ""
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": ""
    },
    {
     "name": "emptyText",
     "type": "String",
     "desc": "The default text to display in an empty field - placeholder... (defaults to null).",
     "memberOf": ""
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"20\", autocomplete: \"off\"})",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the field (defaults to \"x-form-field\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "autosize",
     "sig": "function (_self, width)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "autoSize",
     "sig": "()",
     "type": "function",
     "desc": "Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.\nThis only takes effect if grow = true, and fires the autosize event."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally-loaded value and clears any validation messages."
    },
    {
     "name": "selectText",
     "sig": "(Number start, Number end)",
     "type": "function",
     "desc": "Selects text in this field"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.form.TriggerField": {
   "props": [
    {
     "name": "triggerClass",
     "type": "String",
     "desc": "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' by default and triggerClass will be <b>appended</b> if specified.",
     "memberOf": ""
    },
    {
     "name": "autoCreate",
     "type": "String/Object",
     "desc": "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"16\", autocomplete: \"off\"})",
     "memberOf": ""
    },
    {
     "name": "hideTrigger",
     "type": "Boolean",
     "desc": "True to hide the trigger element and display only the base text field (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "vtype",
     "type": "String",
     "desc": "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maskRe",
     "type": "String",
     "desc": "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "disableKeyFilter",
     "type": "Boolean",
     "desc": "True to disable input keystroke filtering (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "allowBlank",
     "type": "Boolean",
     "desc": "False to validate that the value length > 0 (defaults to true)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLength",
     "type": "Number",
     "desc": "Minimum input field length required (defaults to 0)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLength",
     "type": "Number",
     "desc": "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "minLengthText",
     "type": "String",
     "desc": "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "maxLengthText",
     "type": "String",
     "desc": "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "selectOnFocus",
     "type": "Boolean",
     "desc": "True to automatically select any existing field text when the field receives input focus (defaults to false)",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "blankText",
     "type": "String",
     "desc": "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "validator",
     "type": "Function",
     "desc": "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regex",
     "type": "RegExp",
     "desc": "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "regexText",
     "type": "String",
     "desc": "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "emptyText",
     "type": "String",
     "desc": "The default text to display in an empty field - placeholder... (defaults to null).",
     "memberOf": "Roo.form.TextField"
    },
    {
     "name": "fieldLabel",
     "type": "String",
     "desc": "Label to use when rendering a form.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "Mouse over tip",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "name",
     "type": "String",
     "desc": "The field's HTML name attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidClass",
     "type": "String",
     "desc": "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "invalidText",
     "type": "String",
     "desc": "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "focusClass",
     "type": "String",
     "desc": "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationEvent",
     "type": "String/Boolean",
     "desc": "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validateOnBlur",
     "type": "Boolean",
     "desc": "Whether the field should validate when it loses focus (defaults to true).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "validationDelay",
     "type": "Number",
     "desc": "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "fieldClass",
     "type": "String",
     "desc": "The default CSS class for the field (defaults to \"x-form-field\")",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgTarget",
     "type": "String",
     "desc": "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "msgFx",
     "type": "String",
     "desc": "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "readOnly",
     "type": "Boolean",
     "desc": "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "True to disable the field (defaults to false).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "inputType",
     "type": "String",
     "desc": "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "tabIndex",
     "type": "Number",
     "desc": "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "A value to initialize this field with.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A CSS class to apply to the field's underlying element.",
     "memberOf": "Roo.form.Field"
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "width (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "height",
     "type": "Number",
     "desc": "height (optional) size of component",
     "memberOf": "Roo.BoxComponent"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "autosize",
     "sig": "function (_self, width)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "blur",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field loses input focus."
    },
    {
     "name": "change",
     "sig": "function (_self, newValue, oldValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires just before the field blurs if the field value has changed."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "focus",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this field receives input focus."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "invalid",
     "sig": "function (_self, msg)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been marked as invalid."
    },
    {
     "name": "keyup",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the key up"
    },
    {
     "name": "move",
     "sig": "function (_self, x, y)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is moved."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "resize",
     "sig": "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is resized."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "valid",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the field has been validated with no errors."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "applyTo",
     "sig": "(String/HTMLElement/Element el)",
     "type": "function",
     "desc": "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearInvalid",
     "sig": "()",
     "type": "function",
     "desc": "Clear any invalid styles/messages for this field"
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getBox",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current box measurements of the component's underlying element."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getName",
     "sig": "()",
     "type": "function",
     "desc": "Returns the name attribute of the field if available"
    },
    {
     "name": "getPosition",
     "sig": "(Boolean local)",
     "type": "function",
     "desc": "Gets the current XY position of the component's underlying element."
    },
    {
     "name": "getRawValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}."
    },
    {
     "name": "getSize",
     "sig": "()",
     "type": "function",
     "desc": "Gets the current size of the component's underlying element."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isDirty",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this field has been changed since it was originally loaded and is not disabled."
    },
    {
     "name": "isValid",
     "sig": "(Boolean preventMark)",
     "type": "function",
     "desc": "Returns whether or not the field value is currently valid"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "markInvalid",
     "sig": "(String msg)",
     "type": "function",
     "desc": "Mark this field as invalid"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onPosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs."
    },
    {
     "name": "onResize",
     "sig": "(Number adjWidth, Number adjHeight, Number rawWidth, Number rawHeight)",
     "type": "function",
     "desc": "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs."
    },
    {
     "name": "onTriggerClick",
     "sig": "(EventObject e)",
     "type": "function",
     "desc": "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "reset",
     "sig": "()",
     "type": "function",
     "desc": "Resets the current field value to the originally-loaded value and clears any validation messages."
    },
    {
     "name": "selectText",
     "sig": "(Number start, Number end)",
     "type": "function",
     "desc": "Selects text in this field"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setPagePosition",
     "sig": "(Number x, Number y)",
     "type": "function",
     "desc": "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event."
    },
    {
     "name": "setPosition",
     "sig": "(Number left, Number top)",
     "type": "function",
     "desc": "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event."
    },
    {
     "name": "setRawValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}."
    },
    {
     "name": "setSize",
     "sig": "(Number/Object width, Number height)",
     "type": "function",
     "desc": "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "syncSize",
     "sig": "()",
     "type": "function",
     "desc": "Force the component's size to recalculate based on the underlying element's current height and width."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "updateBox",
     "sig": "(Object box)",
     "type": "function",
     "desc": "Sets the current box measurements of the component's underlying element."
    },
    {
     "name": "validate",
     "sig": "()",
     "type": "function",
     "desc": "Validates the field value"
    },
    {
     "name": "validateValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails"
    }
   ]
  },
  "Roo.form.VTypes": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "alpha",
     "sig": "(String value)",
     "type": "function",
     "desc": "The function used to validate alpha values"
    },
    {
     "name": "alphanum",
     "sig": "(String value)",
     "type": "function",
     "desc": "The function used to validate alphanumeric values"
    },
    {
     "name": "email",
     "sig": "(String value)",
     "type": "function",
     "desc": "The function used to validate email addresses"
    },
    {
     "name": "url",
     "sig": "(String value)",
     "type": "function",
     "desc": "The function used to validate URLs"
    }
   ]
  },
  "Roo.grid": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.grid.AbstractGridView": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.grid.AbstractSelectionModel": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isLocked",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the selections are locked."
    },
    {
     "name": "lock",
     "sig": "()",
     "type": "function",
     "desc": "Locks the selections."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unlock",
     "sig": "()",
     "type": "function",
     "desc": "Unlocks the selections."
    }
   ]
  },
  "Roo.grid.Calendar": {
   "props": [
    {
     "name": "eventStore",
     "type": "Store",
     "desc": "The store that loads events.",
     "memberOf": ""
    }
   ],
   "events": [
    {
     "name": "bodyscroll",
     "sig": "function (scrollLeft, scrollTop)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the body element is scrolled"
    },
    {
     "name": "cellclick",
     "sig": "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a cell is clicked"
    },
    {
     "name": "cellcontextmenu",
     "sig": "function (_self, rowIndex, cellIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a cell is right clicked"
    },
    {
     "name": "celldblclick",
     "sig": "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a cell is double clicked"
    },
    {
     "name": "click",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw click event for the entire grid."
    },
    {
     "name": "columnmove",
     "sig": "function (oldIndex, newIndex)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the user moves a column"
    },
    {
     "name": "columnresize",
     "sig": "function (columnIndex, newSize)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the user resizes a column"
    },
    {
     "name": "contextmenu",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw contextmenu event for the entire grid."
    },
    {
     "name": "dblclick",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw dblclick event for the entire grid."
    },
    {
     "name": "dragdrop",
     "sig": "function (_self, dd, targetId, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when dragged row(s) are dropped on a valid DD target"
    },
    {
     "name": "dragenter\n Fires when the dragged row(s) first cross another DD target while being dragged",
     "sig": "function (_self, dd, targetId, e)\n{\n\n}",
     "type": "function",
     "desc": ""
    },
    {
     "name": "dragout",
     "sig": "function (_self, dd, targetId, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the dragged row(s) leave another DD target while being dragged"
    },
    {
     "name": "dragover",
     "sig": "function (_self, dd, targetId, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires while row(s) are being dragged. \"targetId\" is the id of the Yahoo.util.DD object the selected rows are being dragged over."
    },
    {
     "name": "enddrag",
     "sig": "function (_self, dd, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a drag operation is complete"
    },
    {
     "name": "eventclick",
     "sig": "function (_self, )\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse click an"
    },
    {
     "name": "evententer",
     "sig": "function (_self, Event)\n{\n\n}",
     "type": "function",
     "desc": "Fires when mouse over an event"
    },
    {
     "name": "eventleave",
     "sig": "function (_self, )\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse leaves an"
    },
    {
     "name": "eventrender",
     "sig": "function (_self, data)\n{\n\n}",
     "type": "function",
     "desc": "Fires before each cell is rendered, so you can modify the contents, like cls / title / qtip"
    },
    {
     "name": "headerclick",
     "sig": "function (_self, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a header is clicked"
    },
    {
     "name": "headercontextmenu",
     "sig": "function (_self, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a header is right clicked"
    },
    {
     "name": "headerdblclick",
     "sig": "function (_self, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a header cell is double clicked"
    },
    {
     "name": "keydown",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw keydown event for the entire grid."
    },
    {
     "name": "keypress",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw keypress event for the entire grid."
    },
    {
     "name": "monthchange",
     "sig": "function (_self, date)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the displayed month changes"
    },
    {
     "name": "mousedown",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw mousedown event for the entire grid."
    },
    {
     "name": "mouseout",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw mouseout event for the entire grid."
    },
    {
     "name": "mouseover",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw mouseover event for the entire grid."
    },
    {
     "name": "mouseup",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw mouseup event for the entire grid."
    },
    {
     "name": "render",
     "sig": "function (grid)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the grid is rendered"
    },
    {
     "name": "rowclass",
     "sig": "function (gridview, rowcfg)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is rendered, so you can change add a style to it."
    },
    {
     "name": "rowclick",
     "sig": "function (_self, rowIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is clicked"
    },
    {
     "name": "rowcontextmenu",
     "sig": "function (_self, rowIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is right clicked"
    },
    {
     "name": "rowdblclick",
     "sig": "function (_self, rowIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is double clicked"
    },
    {
     "name": "select",
     "sig": "function (_self, date)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a date is selected"
    },
    {
     "name": "startdrag",
     "sig": "function (_self, dd, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when row(s) start being dragged"
    }
   ],
   "methods": [
    {
     "name": "getSelectionModel",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid's SelectionModel."
    }
   ]
  },
  "Roo.grid.CellSelectionModel": {
   "props": [
    {
     "name": "enter_is_tab",
     "type": "Boolean",
     "desc": "Enter behaves the same as tab. (eg. goes to next cell) default: false",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforeeditnext",
     "sig": "function (eventdata)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the next editable sell is made active\nYou can use this to skip to another cell or fire the tabend\n   if you set cell to false"
    },
    {
     "name": "beforerowselect",
     "sig": "function (_self, rowIndex, colIndex)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a cell is selected."
    },
    {
     "name": "cellselect",
     "sig": "function (_self, rowIndex, colIndex)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a cell is selected."
    },
    {
     "name": "selectionchange",
     "sig": "function (_self, selection)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the active selection changes."
    },
    {
     "name": "tabend",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the tab (or enter) was pressed on the last editable cell\nYou can use this to trigger add new row."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearSelections",
     "sig": "(Boolean true)",
     "type": "function",
     "desc": "Clears all selections."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getSelectedCell",
     "sig": "()",
     "type": "function",
     "desc": "Returns the currently selected cell,."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hasSelection",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if there is a selection."
    },
    {
     "name": "isLocked",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the selections are locked."
    },
    {
     "name": "lock",
     "sig": "()",
     "type": "function",
     "desc": "Locks the selections."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "onEditorKey",
     "sig": "(Number field, Number e)",
     "type": "function",
     "desc": "Selects a cell."
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "select",
     "sig": "(Number rowIndex, Number collIndex)",
     "type": "function",
     "desc": "Selects a cell."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unlock",
     "sig": "()",
     "type": "function",
     "desc": "Unlocks the selections."
    }
   ]
  },
  "Roo.grid.ColumnModel": {
   "props": [
    {
     "name": "header",
     "type": "String",
     "desc": "The header text to display in the Grid view.",
     "memberOf": ""
    },
    {
     "name": "dataIndex",
     "type": "String",
     "desc": "(Optional) The name of the field in the grid's {@link Roo.data.Store}'s\n{@link Roo.data.Record} definition from which to draw the column's value. If not\nspecified, the column's index is used as an index into the Record's data Array.",
     "memberOf": ""
    },
    {
     "name": "width",
     "type": "Number",
     "desc": "(Optional) The initial width in pixels of the column. Using this\ninstead of {@link Roo.grid.Grid#autoSizeColumns} is more efficient.",
     "memberOf": ""
    },
    {
     "name": "sortable",
     "type": "Boolean",
     "desc": "(Optional) True if sorting is to be allowed on this column.\nDefaults to the value of the {@link #defaultSortable} property.\nWhether local/remote sorting is used is specified in {@link Roo.data.Store#remoteSort}.",
     "memberOf": ""
    },
    {
     "name": "locked",
     "type": "Boolean",
     "desc": "(Optional) True to lock the column in place while scrolling the Grid.  Defaults to false.",
     "memberOf": ""
    },
    {
     "name": "fixed",
     "type": "Boolean",
     "desc": "(Optional) True if the column width cannot be changed.  Defaults to false.",
     "memberOf": ""
    },
    {
     "name": "resizable",
     "type": "Boolean",
     "desc": "(Optional) False to disable column resizing. Defaults to true.",
     "memberOf": ""
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "(Optional) True to hide the column. Defaults to false.",
     "memberOf": ""
    },
    {
     "name": "renderer",
     "type": "Function",
     "desc": "(Optional) A function used to generate HTML markup for a cell\ngiven the cell's data value. See {@link #setRenderer}. If not specified, the\ndefault renderer uses the raw data value. If an object is returned (bootstrap only)\nthen it is treated as a Roo Component object instance, and it is rendered after the initial row is rendered",
     "memberOf": ""
    },
    {
     "name": "editor",
     "type": "Roo.grid.GridEditor",
     "desc": "(Optional) For grid editors - returns the grid editor",
     "memberOf": ""
    },
    {
     "name": "align",
     "type": "String",
     "desc": "(Optional) Set the CSS text-align property of the column.  Defaults to undefined.",
     "memberOf": ""
    },
    {
     "name": "cursor",
     "type": "String",
     "desc": "(Optional)",
     "memberOf": ""
    },
    {
     "name": "tooltip",
     "type": "String",
     "desc": "(Optional)",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "columlockchange",
     "sig": "function (_self, colIndex, locked)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a column's locked state is changed"
    },
    {
     "name": "columnmoved",
     "sig": "function (_self, oldIndex, newIndex)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a column is moved."
    },
    {
     "name": "headerchange",
     "sig": "function (_self, columnIndex, newText)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the text of a header changes."
    },
    {
     "name": "hiddenchange",
     "sig": "function (_self, columnIndex, hidden)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a column is hidden or \"unhidden\"."
    },
    {
     "name": "widthchange",
     "sig": "function (_self, columnIndex, newWidth)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the width of a column changes."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "findColumnIndex",
     "sig": "(String dataIndex)",
     "type": "function",
     "desc": "Returns the index for a specified column dataIndex."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getCellEditor",
     "sig": "(Number colIndex, Number rowIndex)",
     "type": "function",
     "desc": "Returns the editor defined for the cell/column.\nreturn false or null to disable editing."
    },
    {
     "name": "getColumnByDataIndex",
     "sig": "(String dataIndex)",
     "type": "function",
     "desc": "Returns the column for a specified dataIndex."
    },
    {
     "name": "getColumnById",
     "sig": "(String id)",
     "type": "function",
     "desc": "Returns the column for a specified id."
    },
    {
     "name": "getColumnCount",
     "sig": "()",
     "type": "function",
     "desc": "Returns the number of columns."
    },
    {
     "name": "getColumnHeader",
     "sig": "(Number col)",
     "type": "function",
     "desc": "Returns the header for the specified column."
    },
    {
     "name": "getColumnId",
     "sig": "(Number index)",
     "type": "function",
     "desc": "Returns the id of the column at the specified index."
    },
    {
     "name": "getColumnTooltip",
     "sig": "(Number col)",
     "type": "function",
     "desc": "Returns the tooltip for the specified column."
    },
    {
     "name": "getColumnWidth",
     "sig": "(Number col)",
     "type": "function",
     "desc": "Returns the width for the specified column."
    },
    {
     "name": "getColumnsBy",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Returns the column configs that return true by the passed function that is called with (columnConfig, index)"
    },
    {
     "name": "getDataIndex",
     "sig": "(Number col)",
     "type": "function",
     "desc": "Returns the dataIndex for the specified column."
    },
    {
     "name": "getIndexById",
     "sig": "(String id)",
     "type": "function",
     "desc": "Returns the index for a specified column id."
    },
    {
     "name": "getRenderer",
     "sig": "(Number col)",
     "type": "function",
     "desc": "Returns the rendering (formatting) function defined for the column."
    },
    {
     "name": "getTotalWidth",
     "sig": "(Boolean includeHidden)",
     "type": "function",
     "desc": "Returns the total width of all columns."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isCellEditable",
     "sig": "(Number colIndex, Number rowIndex)",
     "type": "function",
     "desc": "Returns true if the cell is editable."
    },
    {
     "name": "isFixed",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the column width cannot be changed"
    },
    {
     "name": "isHidden",
     "sig": "(Number colIndex)",
     "type": "function",
     "desc": "Returns true if the column is hidden."
    },
    {
     "name": "isResizable",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the column can be resized"
    },
    {
     "name": "isSortable",
     "sig": "(Number col)",
     "type": "function",
     "desc": "Returns true if the specified column is sortable."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "setColumnHeader",
     "sig": "(Number col, String header)",
     "type": "function",
     "desc": "Sets the header for a column."
    },
    {
     "name": "setColumnTooltip",
     "sig": "(Number col, String tooltip)",
     "type": "function",
     "desc": "Sets the tooltip for a column."
    },
    {
     "name": "setColumnWidth",
     "sig": "(Number col, Number width)",
     "type": "function",
     "desc": "Sets the width for a column."
    },
    {
     "name": "setDataIndex",
     "sig": "(Number col, Number dataIndex)",
     "type": "function",
     "desc": "Sets the dataIndex for a column."
    },
    {
     "name": "setEditable",
     "sig": "(Number col, Boolean editable)",
     "type": "function",
     "desc": "Sets if a column is editable."
    },
    {
     "name": "setEditor",
     "sig": "(Number col, Object editor)",
     "type": "function",
     "desc": "Sets the editor for a column."
    },
    {
     "name": "setHidden",
     "sig": "(Number colIndex, Boolean hidden)",
     "type": "function",
     "desc": "Sets if a column is hidden."
    },
    {
     "name": "setRenderer",
     "sig": "(Number col, Function fn)",
     "type": "function",
     "desc": "Sets the rendering (formatting) function for a column."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.grid.EditorGrid": {
   "props": [
    {
     "name": "clicksToEdit",
     "type": "Number",
     "desc": "The number of clicks on a cell required to display the cell's editor (defaults to 2)",
     "memberOf": ""
    },
    {
     "name": "ddGroup",
     "type": "String",
     "desc": "- drag drop group.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "enableDrag",
     "type": "Boolean",
     "desc": "True to enable drag of rows. Default is false. (double check if this is needed?)",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "autoWidth",
     "type": "Boolean",
     "desc": "True to set the grid's width to the default total width of the grid's columns instead\nof a fixed width. Default is false.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "maxHeight",
     "type": "Number",
     "desc": "Sets the maximum height of the grid - ignored if autoHeight is not on.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "minColumnWidth",
     "type": "Number",
     "desc": "The minimum width a column can be resized to. Default is 25.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "autoSizeColumns",
     "type": "Boolean",
     "desc": "True to automatically resize the columns to fit their content\n<b>on initial render.</b> It is more efficient to explicitly size the columns\nthrough the ColumnModel's {@link Roo.grid.ColumnModel#width} config option.  Default is false.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "autoSizeHeaders",
     "type": "Boolean",
     "desc": "True to measure headers with column data when auto sizing columns. Default is true.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "monitorWindowResize",
     "type": "Boolean",
     "desc": "True to autoSize the grid when the window resizes. Default is true.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "maxRowsToMeasure",
     "type": "Boolean",
     "desc": "If autoSizeColumns is on, maxRowsToMeasure can be used to limit the number of\nrows measured to get a columns size. Default is 0 (all rows).",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "trackMouseOver",
     "type": "Boolean",
     "desc": "True to highlight rows when the mouse is over. Default is true.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "enableDragDrop",
     "type": "Boolean",
     "desc": "True to enable drag and drop of rows. Default is false.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "enableColumnMove",
     "type": "Boolean",
     "desc": "True to enable drag and drop reorder of columns. Default is true.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "enableColumnHide",
     "type": "Boolean",
     "desc": "True to enable hiding of columns with the header context menu. Default is true.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "enableRowHeightSync",
     "type": "Boolean",
     "desc": "True to manually sync row heights across locked and not locked rows. Default is false.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "stripeRows",
     "type": "Boolean",
     "desc": "True to stripe the rows.  Default is true.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "autoHeight",
     "type": "Boolean",
     "desc": "True to fit the height of the grid container to the height of the data. Default is false.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "autoExpandColumn",
     "type": "String",
     "desc": "The id (or dataIndex) of a column in this grid that should expand to fill unused space. This id can not be 0. Default is false.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "autoExpandMin",
     "type": "Number",
     "desc": "The minimum width the autoExpandColumn can have (if enabled).\nDefault is 50.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "autoExpandMax",
     "type": "Number",
     "desc": "The maximum width the autoExpandColumn can have (if enabled). Default is 1000.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "view",
     "type": "Object",
     "desc": "The {@link Roo.grid.GridView} used by the grid. This can be set before a call to render().",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "loadMask",
     "type": "Object",
     "desc": "An {@link Roo.LoadMask} config or true to mask the grid while loading. Default is false.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "dropTarget",
     "type": "Roo.dd.DropTarget",
     "desc": "An {@link Roo.dd.DropTarget} config",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "afteredit",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after a cell is edited. <br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>grid - This grid</li>\n<li>record - The record being edited</li>\n<li>field - The field name being edited</li>\n<li>value - The value being set</li>\n<li>originalValue - The original value for the field, before the edit.</li>\n<li>row - The grid row index</li>\n<li>column - The grid column index</li>\n</ul>"
    },
    {
     "name": "beforeedit",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "Fires before cell editing is triggered. The edit event object has the following properties <br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>grid - This grid</li>\n<li>record - The record being edited</li>\n<li>field - The field name being edited</li>\n<li>value - The value for the field being edited.</li>\n<li>row - The grid row index</li>\n<li>column - The grid column index</li>\n<li>cancel - Set this to true to cancel the edit or return false from your handler.</li>\n</ul>"
    },
    {
     "name": "bodyscroll",
     "sig": "function (scrollLeft, scrollTop)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the body element is scrolled"
    },
    {
     "name": "cellclick",
     "sig": "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a cell is clicked"
    },
    {
     "name": "cellcontextmenu",
     "sig": "function (_self, rowIndex, cellIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a cell is right clicked"
    },
    {
     "name": "celldblclick",
     "sig": "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a cell is double clicked"
    },
    {
     "name": "click",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw click event for the entire grid."
    },
    {
     "name": "columnmove",
     "sig": "function (oldIndex, newIndex)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the user moves a column"
    },
    {
     "name": "columnresize",
     "sig": "function (columnIndex, newSize)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the user resizes a column"
    },
    {
     "name": "contextmenu",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw contextmenu event for the entire grid."
    },
    {
     "name": "dblclick",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw dblclick event for the entire grid."
    },
    {
     "name": "dragdrop",
     "sig": "function (_self, dd, targetId, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when dragged row(s) are dropped on a valid DD target"
    },
    {
     "name": "dragenter\n Fires when the dragged row(s) first cross another DD target while being dragged",
     "sig": "function (_self, dd, targetId, e)\n{\n\n}",
     "type": "function",
     "desc": ""
    },
    {
     "name": "dragout",
     "sig": "function (_self, dd, targetId, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the dragged row(s) leave another DD target while being dragged"
    },
    {
     "name": "dragover",
     "sig": "function (_self, dd, targetId, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires while row(s) are being dragged. \"targetId\" is the id of the Yahoo.util.DD object the selected rows are being dragged over."
    },
    {
     "name": "enddrag",
     "sig": "function (_self, dd, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a drag operation is complete"
    },
    {
     "name": "headerclick",
     "sig": "function (_self, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a header is clicked"
    },
    {
     "name": "headercontextmenu",
     "sig": "function (_self, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a header is right clicked"
    },
    {
     "name": "headerdblclick",
     "sig": "function (_self, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a header cell is double clicked"
    },
    {
     "name": "keydown",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw keydown event for the entire grid."
    },
    {
     "name": "keypress",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw keypress event for the entire grid."
    },
    {
     "name": "mousedown",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw mousedown event for the entire grid."
    },
    {
     "name": "mouseout",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw mouseout event for the entire grid."
    },
    {
     "name": "mouseover",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw mouseover event for the entire grid."
    },
    {
     "name": "mouseup",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw mouseup event for the entire grid."
    },
    {
     "name": "render",
     "sig": "function (grid)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the grid is rendered"
    },
    {
     "name": "rowclass",
     "sig": "function (gridview, rowcfg)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is rendered, so you can change add a style to it."
    },
    {
     "name": "rowclick",
     "sig": "function (_self, rowIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is clicked"
    },
    {
     "name": "rowcontextmenu",
     "sig": "function (_self, rowIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is right clicked"
    },
    {
     "name": "rowdblclick",
     "sig": "function (_self, rowIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is double clicked"
    },
    {
     "name": "startdrag",
     "sig": "function (_self, dd, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when row(s) start being dragged"
    },
    {
     "name": "validateedit",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after a cell is edited, but before the value is set in the record. \nYou can use this to modify the value being set in the field, Return false\nto cancel the change. The edit event object has the following properties <br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>editor - This editor</li>\n<li>grid - This grid</li>\n<li>record - The record being edited</li>\n<li>field - The field name being edited</li>\n<li>value - The value being set</li>\n<li>originalValue - The original value for the field, before the edit.</li>\n<li>row - The grid row index</li>\n<li>column - The grid column index</li>\n<li>cancel - Set this to true to cancel the edit or return false from your handler.</li>\n</ul>"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "autoSize",
     "sig": "()",
     "type": "function",
     "desc": "Causes the grid to manually recalculate its dimensions. Generally this is done automatically,\nbut if manual update is required this method will initiate it."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "(Boolean removeEl)",
     "type": "function",
     "desc": "Destroy this grid."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getColumnModel",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid's ColumnModel."
    },
    {
     "name": "getDataSource",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid's DataSource."
    },
    {
     "name": "getDragDropText",
     "sig": "()",
     "type": "function",
     "desc": "Called to get grid's drag proxy text, by default returns this.ddText."
    },
    {
     "name": "getGridEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid's underlying element."
    },
    {
     "name": "getSelectionModel",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid's SelectionModel."
    },
    {
     "name": "getView",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid's GridView object."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "reconfigure",
     "sig": "(Roo.data.Store dataSource, Roo.grid.ColumnModel The)",
     "type": "function",
     "desc": "Reconfigures the grid to use a different Store and Column Model.\nThe View will be bound to the new objects and refreshed."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "()",
     "type": "function",
     "desc": "Called once after all setup has been completed and the grid is ready to be rendered."
    },
    {
     "name": "startEditing",
     "sig": "(Number rowIndex, Number colIndex)",
     "type": "function",
     "desc": "Starts editing the specified for the specified row/column"
    },
    {
     "name": "stopEditing",
     "sig": "()",
     "type": "function",
     "desc": "Stops any active editing"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.grid.Grid": {
   "props": [
    {
     "name": "ddGroup",
     "type": "String",
     "desc": "- drag drop group.",
     "memberOf": ""
    },
    {
     "name": "enableDrag",
     "type": "Boolean",
     "desc": "True to enable drag of rows. Default is false. (double check if this is needed?)",
     "memberOf": ""
    },
    {
     "name": "autoWidth",
     "type": "Boolean",
     "desc": "True to set the grid's width to the default total width of the grid's columns instead\nof a fixed width. Default is false.",
     "memberOf": ""
    },
    {
     "name": "maxHeight",
     "type": "Number",
     "desc": "Sets the maximum height of the grid - ignored if autoHeight is not on.",
     "memberOf": ""
    },
    {
     "name": "minColumnWidth",
     "type": "Number",
     "desc": "The minimum width a column can be resized to. Default is 25.",
     "memberOf": ""
    },
    {
     "name": "autoSizeColumns",
     "type": "Boolean",
     "desc": "True to automatically resize the columns to fit their content\n<b>on initial render.</b> It is more efficient to explicitly size the columns\nthrough the ColumnModel's {@link Roo.grid.ColumnModel#width} config option.  Default is false.",
     "memberOf": ""
    },
    {
     "name": "autoSizeHeaders",
     "type": "Boolean",
     "desc": "True to measure headers with column data when auto sizing columns. Default is true.",
     "memberOf": ""
    },
    {
     "name": "monitorWindowResize",
     "type": "Boolean",
     "desc": "True to autoSize the grid when the window resizes. Default is true.",
     "memberOf": ""
    },
    {
     "name": "maxRowsToMeasure",
     "type": "Boolean",
     "desc": "If autoSizeColumns is on, maxRowsToMeasure can be used to limit the number of\nrows measured to get a columns size. Default is 0 (all rows).",
     "memberOf": ""
    },
    {
     "name": "trackMouseOver",
     "type": "Boolean",
     "desc": "True to highlight rows when the mouse is over. Default is true.",
     "memberOf": ""
    },
    {
     "name": "enableDragDrop",
     "type": "Boolean",
     "desc": "True to enable drag and drop of rows. Default is false.",
     "memberOf": ""
    },
    {
     "name": "enableColumnMove",
     "type": "Boolean",
     "desc": "True to enable drag and drop reorder of columns. Default is true.",
     "memberOf": ""
    },
    {
     "name": "enableColumnHide",
     "type": "Boolean",
     "desc": "True to enable hiding of columns with the header context menu. Default is true.",
     "memberOf": ""
    },
    {
     "name": "enableRowHeightSync",
     "type": "Boolean",
     "desc": "True to manually sync row heights across locked and not locked rows. Default is false.",
     "memberOf": ""
    },
    {
     "name": "stripeRows",
     "type": "Boolean",
     "desc": "True to stripe the rows.  Default is true.",
     "memberOf": ""
    },
    {
     "name": "autoHeight",
     "type": "Boolean",
     "desc": "True to fit the height of the grid container to the height of the data. Default is false.",
     "memberOf": ""
    },
    {
     "name": "autoExpandColumn",
     "type": "String",
     "desc": "The id (or dataIndex) of a column in this grid that should expand to fill unused space. This id can not be 0. Default is false.",
     "memberOf": ""
    },
    {
     "name": "autoExpandMin",
     "type": "Number",
     "desc": "The minimum width the autoExpandColumn can have (if enabled).\nDefault is 50.",
     "memberOf": ""
    },
    {
     "name": "autoExpandMax",
     "type": "Number",
     "desc": "The maximum width the autoExpandColumn can have (if enabled). Default is 1000.",
     "memberOf": ""
    },
    {
     "name": "view",
     "type": "Object",
     "desc": "The {@link Roo.grid.GridView} used by the grid. This can be set before a call to render().",
     "memberOf": ""
    },
    {
     "name": "loadMask",
     "type": "Object",
     "desc": "An {@link Roo.LoadMask} config or true to mask the grid while loading. Default is false.",
     "memberOf": ""
    },
    {
     "name": "dropTarget",
     "type": "Roo.dd.DropTarget",
     "desc": "An {@link Roo.dd.DropTarget} config",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "bodyscroll",
     "sig": "function (scrollLeft, scrollTop)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the body element is scrolled"
    },
    {
     "name": "cellclick",
     "sig": "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a cell is clicked"
    },
    {
     "name": "cellcontextmenu",
     "sig": "function (_self, rowIndex, cellIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a cell is right clicked"
    },
    {
     "name": "celldblclick",
     "sig": "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a cell is double clicked"
    },
    {
     "name": "click",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw click event for the entire grid."
    },
    {
     "name": "columnmove",
     "sig": "function (oldIndex, newIndex)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the user moves a column"
    },
    {
     "name": "columnresize",
     "sig": "function (columnIndex, newSize)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the user resizes a column"
    },
    {
     "name": "contextmenu",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw contextmenu event for the entire grid."
    },
    {
     "name": "dblclick",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw dblclick event for the entire grid."
    },
    {
     "name": "dragdrop",
     "sig": "function (_self, dd, targetId, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when dragged row(s) are dropped on a valid DD target"
    },
    {
     "name": "dragenter\n Fires when the dragged row(s) first cross another DD target while being dragged",
     "sig": "function (_self, dd, targetId, e)\n{\n\n}",
     "type": "function",
     "desc": ""
    },
    {
     "name": "dragout",
     "sig": "function (_self, dd, targetId, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the dragged row(s) leave another DD target while being dragged"
    },
    {
     "name": "dragover",
     "sig": "function (_self, dd, targetId, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires while row(s) are being dragged. \"targetId\" is the id of the Yahoo.util.DD object the selected rows are being dragged over."
    },
    {
     "name": "enddrag",
     "sig": "function (_self, dd, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a drag operation is complete"
    },
    {
     "name": "headerclick",
     "sig": "function (_self, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a header is clicked"
    },
    {
     "name": "headercontextmenu",
     "sig": "function (_self, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a header is right clicked"
    },
    {
     "name": "headerdblclick",
     "sig": "function (_self, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a header cell is double clicked"
    },
    {
     "name": "keydown",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw keydown event for the entire grid."
    },
    {
     "name": "keypress",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw keypress event for the entire grid."
    },
    {
     "name": "mousedown",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw mousedown event for the entire grid."
    },
    {
     "name": "mouseout",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw mouseout event for the entire grid."
    },
    {
     "name": "mouseover",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw mouseover event for the entire grid."
    },
    {
     "name": "mouseup",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw mouseup event for the entire grid."
    },
    {
     "name": "render",
     "sig": "function (grid)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the grid is rendered"
    },
    {
     "name": "rowclass",
     "sig": "function (gridview, rowcfg)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is rendered, so you can change add a style to it."
    },
    {
     "name": "rowclick",
     "sig": "function (_self, rowIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is clicked"
    },
    {
     "name": "rowcontextmenu",
     "sig": "function (_self, rowIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is right clicked"
    },
    {
     "name": "rowdblclick",
     "sig": "function (_self, rowIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is double clicked"
    },
    {
     "name": "startdrag",
     "sig": "function (_self, dd, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when row(s) start being dragged"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "autoSize",
     "sig": "()",
     "type": "function",
     "desc": "Causes the grid to manually recalculate its dimensions. Generally this is done automatically,\nbut if manual update is required this method will initiate it."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "(Boolean removeEl)",
     "type": "function",
     "desc": "Destroy this grid."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getColumnModel",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid's ColumnModel."
    },
    {
     "name": "getDataSource",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid's DataSource."
    },
    {
     "name": "getDragDropText",
     "sig": "()",
     "type": "function",
     "desc": "Called to get grid's drag proxy text, by default returns this.ddText."
    },
    {
     "name": "getGridEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid's underlying element."
    },
    {
     "name": "getSelectionModel",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid's SelectionModel."
    },
    {
     "name": "getView",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid's GridView object."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "reconfigure",
     "sig": "(Roo.data.Store dataSource, Roo.grid.ColumnModel The)",
     "type": "function",
     "desc": "Reconfigures the grid to use a different Store and Column Model.\nThe View will be bound to the new objects and refreshed."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "()",
     "type": "function",
     "desc": "Called once after all setup has been completed and the grid is ready to be rendered."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.grid.GridEditor": {
   "props": [
    {
     "name": "field",
     "type": "Roo.form.Field",
     "desc": "Field to wrap (or xtyped)",
     "memberOf": ""
    },
    {
     "name": "autosize",
     "type": "Boolean/String",
     "desc": "True for the editor to automatically adopt the size of the underlying field, \"width\" to adopt the width only,\nor \"height\" to adopt the height only (defaults to false)",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "revertInvalid",
     "type": "Boolean",
     "desc": "True to automatically revert the field value and cancel the edit when the user completes an edit and the field\nvalidation fails (defaults to true)",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "ignoreNoChange",
     "type": "Boolean",
     "desc": "True to skip the the edit completion process (no save, no events fired) if the user completes an edit and\nthe value has not changed (defaults to false).  Applies only to string values - edits for other data types\nwill never be ignored.",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "hideEl",
     "type": "Boolean",
     "desc": "False to keep the bound element visible while the editor is displayed (defaults to true)",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "The data value of the underlying field (defaults to \"\")",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "alignment",
     "type": "String",
     "desc": "The position to align to (see {@link Roo.Element#alignTo} for more details, defaults to \"c-c?\").",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "shadow",
     "type": "Boolean/String",
     "desc": "\"sides\" for sides/bottom only, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"frame\")",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "constrain",
     "type": "Boolean",
     "desc": "True to constrain the editor to the viewport",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "completeOnEnter",
     "type": "Boolean",
     "desc": "True to complete the edit when the enter key is pressed (defaults to false)",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "cancelOnEsc",
     "type": "Boolean",
     "desc": "True to cancel the edit when the escape key is pressed (defaults to false)",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "updateEl",
     "type": "Boolean",
     "desc": "True to update the innerHTML of the bound element when the update completes (defaults to false)",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforecomplete",
     "sig": "function (_self, value, startValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires after a change has been made to the field, but before the change is reflected in the underlying\nfield.  Saving the change to the field can be canceled by returning false from the handler of this event.\nNote that if the value has not changed and ignoreNoChange = true, the editing will still end but this\nevent will not fire since no edit actually occurred."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "beforestartedit",
     "sig": "function (_self, boundEl, value)\n{\n\n}",
     "type": "function",
     "desc": "Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning\nfalse from the handler of this event."
    },
    {
     "name": "complete",
     "sig": "function (_self, value, startValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires after editing is complete and any changed value has been written to the underlying field."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "startedit",
     "sig": "function (boundEl, value)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this editor is displayed"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "cancelEdit",
     "sig": "(Boolean remainVisible)",
     "type": "function",
     "desc": "Cancels the editing process and hides the editor without persisting any changes.  The field value will be\nreverted to the original starting value."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "completeEdit",
     "sig": "(Boolean remainVisible)",
     "type": "function",
     "desc": "Ends the editing process, persists the changed value to the underlying field, and hides the editor."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Gets the data value of the editor"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "realign",
     "sig": "()",
     "type": "function",
     "desc": "Realigns the editor to the bound field based on the current alignment config value."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setSize",
     "sig": "(Number width, Number height)",
     "type": "function",
     "desc": "Sets the height and width of this editor."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the data value of the editor"
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "startEdit",
     "sig": "(String/HTMLElement/Element el, String value)",
     "type": "function",
     "desc": "Starts the editing process and shows the editor."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.grid.GridView": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "autoSizeColumn",
     "sig": "(Number colIndex, Boolean forceMinSize)",
     "type": "function",
     "desc": "Autofit a column to its content."
    },
    {
     "name": "autoSizeColumns",
     "sig": "()",
     "type": "function",
     "desc": "Autofits all columns to their content and then expands to fit any extra space in the grid"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "ensureVisible",
     "sig": "(Number row, Number col, Boolean hscroll)",
     "type": "function",
     "desc": "Scrolls the specified cell into view"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "fitColumns",
     "sig": "(Boolean reserveScrollSpace)",
     "type": "function",
     "desc": "Autofits all columns to the grid's width proportionate with their current size"
    },
    {
     "name": "focusCell",
     "sig": "(Number row, Number col, Boolean hscroll)",
     "type": "function",
     "desc": "Focuses the specified cell."
    },
    {
     "name": "focusRow",
     "sig": "(Number row)",
     "type": "function",
     "desc": "Focuses the specified row."
    },
    {
     "name": "getCell",
     "sig": "(Integer rowIndex, Integer colIndex)",
     "type": "function",
     "desc": "Gets the 'td' of the cell"
    },
    {
     "name": "getFooterPanel",
     "sig": "(Boolean doShow)",
     "type": "function",
     "desc": "Gets a panel in the footer of the grid that can be used for toolbars etc.\nAfter modifying the contents of this panel a call to grid.autoSize() may be\nrequired to register any changes in size."
    },
    {
     "name": "getHeaderPanel",
     "sig": "(Boolean doShow)",
     "type": "function",
     "desc": "Gets a panel in the header of the grid that can be used for toolbars etc.\nAfter modifying the contents of this panel a call to grid.autoSize() may be\nrequired to register any changes in size."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "refresh",
     "sig": "(Boolean headersToo)",
     "type": "function",
     "desc": "Refreshes the grid"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "scrollToTop",
     "sig": "()",
     "type": "function",
     "desc": "Scrolls the grid to the top"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.grid.PropertyGrid": {
   "props": [
    {
     "name": "customEditors",
     "type": "Object",
     "desc": "map of colnames=> custom editors.\nthe custom editor can be one of the standard ones (date|string|number|int|boolean), or a\ngrid editor eg. Roo.grid.GridEditor(new Roo.form.TextArea({selectOnFocus:true})),\nfalse disables editing of the field.",
     "memberOf": ""
    },
    {
     "name": "propertyNames",
     "type": "Object",
     "desc": "map of property Names to their displayed value",
     "memberOf": ""
    },
    {
     "name": "clicksToEdit",
     "type": "Number",
     "desc": "The number of clicks on a cell required to display the cell's editor (defaults to 2)",
     "memberOf": "Roo.grid.EditorGrid"
    },
    {
     "name": "ddGroup",
     "type": "String",
     "desc": "- drag drop group.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "enableDrag",
     "type": "Boolean",
     "desc": "True to enable drag of rows. Default is false. (double check if this is needed?)",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "autoWidth",
     "type": "Boolean",
     "desc": "True to set the grid's width to the default total width of the grid's columns instead\nof a fixed width. Default is false.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "maxHeight",
     "type": "Number",
     "desc": "Sets the maximum height of the grid - ignored if autoHeight is not on.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "minColumnWidth",
     "type": "Number",
     "desc": "The minimum width a column can be resized to. Default is 25.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "autoSizeColumns",
     "type": "Boolean",
     "desc": "True to automatically resize the columns to fit their content\n<b>on initial render.</b> It is more efficient to explicitly size the columns\nthrough the ColumnModel's {@link Roo.grid.ColumnModel#width} config option.  Default is false.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "autoSizeHeaders",
     "type": "Boolean",
     "desc": "True to measure headers with column data when auto sizing columns. Default is true.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "monitorWindowResize",
     "type": "Boolean",
     "desc": "True to autoSize the grid when the window resizes. Default is true.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "maxRowsToMeasure",
     "type": "Boolean",
     "desc": "If autoSizeColumns is on, maxRowsToMeasure can be used to limit the number of\nrows measured to get a columns size. Default is 0 (all rows).",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "trackMouseOver",
     "type": "Boolean",
     "desc": "True to highlight rows when the mouse is over. Default is true.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "enableDragDrop",
     "type": "Boolean",
     "desc": "True to enable drag and drop of rows. Default is false.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "enableColumnMove",
     "type": "Boolean",
     "desc": "True to enable drag and drop reorder of columns. Default is true.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "enableColumnHide",
     "type": "Boolean",
     "desc": "True to enable hiding of columns with the header context menu. Default is true.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "enableRowHeightSync",
     "type": "Boolean",
     "desc": "True to manually sync row heights across locked and not locked rows. Default is false.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "stripeRows",
     "type": "Boolean",
     "desc": "True to stripe the rows.  Default is true.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "autoHeight",
     "type": "Boolean",
     "desc": "True to fit the height of the grid container to the height of the data. Default is false.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "autoExpandColumn",
     "type": "String",
     "desc": "The id (or dataIndex) of a column in this grid that should expand to fill unused space. This id can not be 0. Default is false.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "autoExpandMin",
     "type": "Number",
     "desc": "The minimum width the autoExpandColumn can have (if enabled).\nDefault is 50.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "autoExpandMax",
     "type": "Number",
     "desc": "The maximum width the autoExpandColumn can have (if enabled). Default is 1000.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "view",
     "type": "Object",
     "desc": "The {@link Roo.grid.GridView} used by the grid. This can be set before a call to render().",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "loadMask",
     "type": "Object",
     "desc": "An {@link Roo.LoadMask} config or true to mask the grid while loading. Default is false.",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "dropTarget",
     "type": "Roo.dd.DropTarget",
     "desc": "An {@link Roo.dd.DropTarget} config",
     "memberOf": "Roo.grid.Grid"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "afteredit",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after a cell is edited. <br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>grid - This grid</li>\n<li>record - The record being edited</li>\n<li>field - The field name being edited</li>\n<li>value - The value being set</li>\n<li>originalValue - The original value for the field, before the edit.</li>\n<li>row - The grid row index</li>\n<li>column - The grid column index</li>\n</ul>"
    },
    {
     "name": "beforeedit",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "Fires before cell editing is triggered. The edit event object has the following properties <br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>grid - This grid</li>\n<li>record - The record being edited</li>\n<li>field - The field name being edited</li>\n<li>value - The value for the field being edited.</li>\n<li>row - The grid row index</li>\n<li>column - The grid column index</li>\n<li>cancel - Set this to true to cancel the edit or return false from your handler.</li>\n</ul>"
    },
    {
     "name": "beforepropertychange",
     "sig": "function (grid, id, newval, oldval)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a property changes (return false to stop?)"
    },
    {
     "name": "bodyscroll",
     "sig": "function (scrollLeft, scrollTop)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the body element is scrolled"
    },
    {
     "name": "cellclick",
     "sig": "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a cell is clicked"
    },
    {
     "name": "cellcontextmenu",
     "sig": "function (_self, rowIndex, cellIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a cell is right clicked"
    },
    {
     "name": "celldblclick",
     "sig": "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a cell is double clicked"
    },
    {
     "name": "click",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw click event for the entire grid."
    },
    {
     "name": "columnmove",
     "sig": "function (oldIndex, newIndex)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the user moves a column"
    },
    {
     "name": "columnresize",
     "sig": "function (columnIndex, newSize)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the user resizes a column"
    },
    {
     "name": "contextmenu",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw contextmenu event for the entire grid."
    },
    {
     "name": "dblclick",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw dblclick event for the entire grid."
    },
    {
     "name": "dragdrop",
     "sig": "function (_self, dd, targetId, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when dragged row(s) are dropped on a valid DD target"
    },
    {
     "name": "dragenter\n Fires when the dragged row(s) first cross another DD target while being dragged",
     "sig": "function (_self, dd, targetId, e)\n{\n\n}",
     "type": "function",
     "desc": ""
    },
    {
     "name": "dragout",
     "sig": "function (_self, dd, targetId, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the dragged row(s) leave another DD target while being dragged"
    },
    {
     "name": "dragover",
     "sig": "function (_self, dd, targetId, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires while row(s) are being dragged. \"targetId\" is the id of the Yahoo.util.DD object the selected rows are being dragged over."
    },
    {
     "name": "enddrag",
     "sig": "function (_self, dd, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a drag operation is complete"
    },
    {
     "name": "headerclick",
     "sig": "function (_self, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a header is clicked"
    },
    {
     "name": "headercontextmenu",
     "sig": "function (_self, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a header is right clicked"
    },
    {
     "name": "headerdblclick",
     "sig": "function (_self, columnIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a header cell is double clicked"
    },
    {
     "name": "keydown",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw keydown event for the entire grid."
    },
    {
     "name": "keypress",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw keypress event for the entire grid."
    },
    {
     "name": "mousedown",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw mousedown event for the entire grid."
    },
    {
     "name": "mouseout",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw mouseout event for the entire grid."
    },
    {
     "name": "mouseover",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw mouseover event for the entire grid."
    },
    {
     "name": "mouseup",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "The raw mouseup event for the entire grid."
    },
    {
     "name": "propertychange",
     "sig": "function (grid, id, newval, oldval)\n{\n\n}",
     "type": "function",
     "desc": "Fires after a property changes"
    },
    {
     "name": "render",
     "sig": "function (grid)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the grid is rendered"
    },
    {
     "name": "rowclass",
     "sig": "function (gridview, rowcfg)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is rendered, so you can change add a style to it."
    },
    {
     "name": "rowclick",
     "sig": "function (_self, rowIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is clicked"
    },
    {
     "name": "rowcontextmenu",
     "sig": "function (_self, rowIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is right clicked"
    },
    {
     "name": "rowdblclick",
     "sig": "function (_self, rowIndex, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is double clicked"
    },
    {
     "name": "startdrag",
     "sig": "function (_self, dd, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when row(s) start being dragged"
    },
    {
     "name": "validateedit",
     "sig": "function (e)\n{\n\n}",
     "type": "function",
     "desc": "Fires after a cell is edited, but before the value is set in the record. \nYou can use this to modify the value being set in the field, Return false\nto cancel the change. The edit event object has the following properties <br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>editor - This editor</li>\n<li>grid - This grid</li>\n<li>record - The record being edited</li>\n<li>field - The field name being edited</li>\n<li>value - The value being set</li>\n<li>originalValue - The original value for the field, before the edit.</li>\n<li>row - The grid row index</li>\n<li>column - The grid column index</li>\n<li>cancel - Set this to true to cancel the edit or return false from your handler.</li>\n</ul>"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "autoSize",
     "sig": "()",
     "type": "function",
     "desc": "Causes the grid to manually recalculate its dimensions. Generally this is done automatically,\nbut if manual update is required this method will initiate it."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "(Boolean removeEl)",
     "type": "function",
     "desc": "Destroy this grid."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getColumnModel",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid's ColumnModel."
    },
    {
     "name": "getDataSource",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid's DataSource."
    },
    {
     "name": "getDragDropText",
     "sig": "()",
     "type": "function",
     "desc": "Called to get grid's drag proxy text, by default returns this.ddText."
    },
    {
     "name": "getGridEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid's underlying element."
    },
    {
     "name": "getSelectionModel",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid's SelectionModel."
    },
    {
     "name": "getSource",
     "sig": "()",
     "type": "function",
     "desc": "Gets all the data from the grid."
    },
    {
     "name": "getView",
     "sig": "()",
     "type": "function",
     "desc": "Returns the grid's GridView object."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "reconfigure",
     "sig": "(Roo.data.Store dataSource, Roo.grid.ColumnModel The)",
     "type": "function",
     "desc": "Reconfigures the grid to use a different Store and Column Model.\nThe View will be bound to the new objects and refreshed."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "()",
     "type": "function",
     "desc": "Called once after all setup has been completed and the grid is ready to be rendered."
    },
    {
     "name": "setSource",
     "sig": "(Object data)",
     "type": "function",
     "desc": "Sets the data for the Grid\naccepts a Key => Value object of all the elements avaiable."
    },
    {
     "name": "startEditing",
     "sig": "(Number rowIndex, Number colIndex)",
     "type": "function",
     "desc": "Starts editing the specified for the specified row/column"
    },
    {
     "name": "stopEditing",
     "sig": "()",
     "type": "function",
     "desc": "Stops any active editing"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.grid.RowSelectionModel": {
   "props": [
    {
     "name": "singleSelect",
     "type": "Boolean",
     "desc": "True to allow selection of only one row at a time (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "afterselectionchange",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the selection changes (eg. by key press or clicking)"
    },
    {
     "name": "beforerowselect",
     "sig": "function (_self, rowIndex, keepExisting)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is selected being selected, return false to cancel."
    },
    {
     "name": "rowdeselect",
     "sig": "function (_self, rowIndex)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is deselected."
    },
    {
     "name": "rowselect",
     "sig": "function (_self, rowIndex, r)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a row is selected."
    },
    {
     "name": "selectionchange",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the selection changes"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearSelections",
     "sig": "()",
     "type": "function",
     "desc": "Clears all selections."
    },
    {
     "name": "deselectRange",
     "sig": "(Number startRow, Number endRow)",
     "type": "function",
     "desc": "Deselects a range of rows. All rows in between startRow and endRow are also deselected."
    },
    {
     "name": "deselectRow",
     "sig": "(Number row)",
     "type": "function",
     "desc": "Deselects a row."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getCount",
     "sig": "()",
     "type": "function",
     "desc": "Gets the number of selected rows."
    },
    {
     "name": "getSelected",
     "sig": "()",
     "type": "function",
     "desc": "Returns the first selected record."
    },
    {
     "name": "getSelections",
     "sig": "()",
     "type": "function",
     "desc": "Returns the selected records"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hasSelection",
     "sig": "()",
     "type": "function",
     "desc": "Returns True if there is a selection."
    },
    {
     "name": "isIdSelected",
     "sig": "(String id)",
     "type": "function",
     "desc": "Returns True if the specified record id is selected."
    },
    {
     "name": "isLocked",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if the selections are locked."
    },
    {
     "name": "isSelected",
     "sig": "(Number/Record record)",
     "type": "function",
     "desc": "Returns True if the specified row is selected."
    },
    {
     "name": "lock",
     "sig": "()",
     "type": "function",
     "desc": "Locks the selections."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "selectAll",
     "sig": "()",
     "type": "function",
     "desc": "Selects all rows."
    },
    {
     "name": "selectFirstRow",
     "sig": "()",
     "type": "function",
     "desc": "Selects the first row in the grid."
    },
    {
     "name": "selectLastRow",
     "sig": "(Boolean keepExisting)",
     "type": "function",
     "desc": "Select the last row."
    },
    {
     "name": "selectNext",
     "sig": "(Boolean keepExisting)",
     "type": "function",
     "desc": "Selects the row immediately following the last selected row."
    },
    {
     "name": "selectPrevious",
     "sig": "(Boolean keepExisting)",
     "type": "function",
     "desc": "Selects the row that precedes the last selected row."
    },
    {
     "name": "selectRange",
     "sig": "(Number startRow, Number endRow, Boolean keepExisting)",
     "type": "function",
     "desc": "Selects a range of rows. All rows in between startRow and endRow are also selected."
    },
    {
     "name": "selectRecords",
     "sig": "(Array records, Boolean keepExisting)",
     "type": "function",
     "desc": "Select records."
    },
    {
     "name": "selectRow",
     "sig": "(Number row, Boolean keepExisting)",
     "type": "function",
     "desc": "Selects a row."
    },
    {
     "name": "selectRows",
     "sig": "(Array rows, Boolean keepExisting)",
     "type": "function",
     "desc": "Selects multiple rows."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unlock",
     "sig": "()",
     "type": "function",
     "desc": "Unlocks the selections."
    }
   ]
  },
  "Roo.lib": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.lib.Ajax": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "request",
     "sig": "()",
     "type": "function",
     "desc": ""
    }
   ]
  },
  "Roo.lib.Dom": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.mailer": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.mailer.Block": {
   "props": [
    {
     "name": "cls",
     "type": "String",
     "desc": "class of the element",
     "memberOf": ""
    },
    {
     "name": "html",
     "type": "String",
     "desc": "content of header (not used for columns)",
     "memberOf": ""
    },
    {
     "name": "blocktype",
     "type": "String",
     "desc": "",
     "memberOf": "",
     "optvals": [
      "header",
      "preheader",
      "footer",
      "body",
      "row"
     ]
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.mailer.BodyContainer": {
   "props": [
    {
     "name": "cls",
     "type": "String",
     "desc": "class of the element",
     "memberOf": ""
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.mailer.Column": {
   "props": [
    {
     "name": "cls",
     "type": "String",
     "desc": "class of the element",
     "memberOf": ""
    },
    {
     "name": "html",
     "type": "String",
     "desc": "content of body",
     "memberOf": ""
    },
    {
     "name": "src",
     "type": "String",
     "desc": "image url",
     "memberOf": ""
    },
    {
     "name": "column",
     "type": "String",
     "desc": "",
     "memberOf": "",
     "optvals": [
      "left",
      "right"
     ]
    },
    {
     "name": "",
     "type": "",
     "desc": "{String width (100%|200|340|260)",
     "memberOf": ""
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.menu": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.menu.Adapter": {
   "props": [
    {
     "name": "handler",
     "type": "Function",
     "desc": "A function that will handle the click event of this menu item (defaults to undefined)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "canActivate",
     "type": "Boolean",
     "desc": "True if this item can be visually activated (defaults to false)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "True to prevent creation of this menu item (defaults to false)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "activeClass",
     "type": "String",
     "desc": "The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hideOnClick",
     "type": "Boolean",
     "desc": "True to hide the containing menu after this item is clicked (defaults to true)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hideDelay",
     "type": "Number",
     "desc": "Length of time in milliseconds to wait before hiding after a click (defaults to 100)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is activated"
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "click",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is clicked"
    },
    {
     "name": "deactivate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is deactivated"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.menu.BaseItem": {
   "props": [
    {
     "name": "handler",
     "type": "Function",
     "desc": "A function that will handle the click event of this menu item (defaults to undefined)",
     "memberOf": ""
    },
    {
     "name": "canActivate",
     "type": "Boolean",
     "desc": "True if this item can be visually activated (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "True to prevent creation of this menu item (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "activeClass",
     "type": "String",
     "desc": "The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")",
     "memberOf": ""
    },
    {
     "name": "hideOnClick",
     "type": "Boolean",
     "desc": "True to hide the containing menu after this item is clicked (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "hideDelay",
     "type": "Number",
     "desc": "Length of time in milliseconds to wait before hiding after a click (defaults to 100)",
     "memberOf": ""
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is activated"
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "click",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is clicked"
    },
    {
     "name": "deactivate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is deactivated"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.menu.CheckItem": {
   "props": [
    {
     "name": "group",
     "type": "String",
     "desc": "All check items with the same group name will automatically be grouped into a single-select\nradio button group (defaults to '')",
     "memberOf": ""
    },
    {
     "name": "itemCls",
     "type": "String",
     "desc": "The default CSS class to use for check items (defaults to \"x-menu-item x-menu-check-item\")",
     "memberOf": ""
    },
    {
     "name": "groupClass",
     "type": "String",
     "desc": "The default CSS class to use for radio group check items (defaults to \"x-menu-group-item\")",
     "memberOf": ""
    },
    {
     "name": "checked",
     "type": "Boolean",
     "desc": "True to initialize this checkbox as checked (defaults to false).  Note that\nif this checkbox is part of a radio group (group = true) only the last item in the group that is\ninitialized with checked = true will be rendered as checked.",
     "memberOf": ""
    },
    {
     "name": "text",
     "type": "String",
     "desc": "The text to show on the menu item.",
     "memberOf": "Roo.menu.Item"
    },
    {
     "name": "HTML",
     "type": "String",
     "desc": "to render in menu\nThe text to show on the menu item (HTML version).",
     "memberOf": "Roo.menu.Item"
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "The path to an icon to display in this menu item (defaults to Roo.BLANK_IMAGE_URL)",
     "memberOf": "Roo.menu.Item"
    },
    {
     "name": "canActivate",
     "type": "Boolean",
     "desc": "True if this item can be visually activated (defaults to true)",
     "memberOf": "Roo.menu.Item"
    },
    {
     "name": "showDelay",
     "type": "Number",
     "desc": "Length of time in milliseconds to wait before showing this item (defaults to 200)",
     "memberOf": "Roo.menu.Item"
    },
    {
     "name": "handler",
     "type": "Function",
     "desc": "A function that will handle the click event of this menu item (defaults to undefined)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "True to prevent creation of this menu item (defaults to false)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "activeClass",
     "type": "String",
     "desc": "The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hideOnClick",
     "type": "Boolean",
     "desc": "True to hide the containing menu after this item is clicked (defaults to true)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hideDelay",
     "type": "Number",
     "desc": "Length of time in milliseconds to wait before hiding after a click (defaults to 100)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is activated"
    },
    {
     "name": "beforecheckchange",
     "sig": "function (_self, checked)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the checked value is set, providing an opportunity to cancel if needed"
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "checkchange",
     "sig": "function (_self, checked)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the checked value has been set"
    },
    {
     "name": "click",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is clicked"
    },
    {
     "name": "deactivate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is deactivated"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setChecked",
     "sig": "(Boolean checked, Boolean suppressEvent)",
     "type": "function",
     "desc": "Set the checked state of this item"
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setText",
     "sig": "(String text, Boolean isHTML)",
     "type": "function",
     "desc": "Sets the text to display in this menu item"
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.menu.ColorItem": {
   "props": [
    {
     "name": "handler",
     "type": "Function",
     "desc": "A function that will handle the click event of this menu item (defaults to undefined)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "canActivate",
     "type": "Boolean",
     "desc": "True if this item can be visually activated (defaults to false)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "True to prevent creation of this menu item (defaults to false)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "activeClass",
     "type": "String",
     "desc": "The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hideOnClick",
     "type": "Boolean",
     "desc": "True to hide the containing menu after this item is clicked (defaults to true)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hideDelay",
     "type": "Number",
     "desc": "Length of time in milliseconds to wait before hiding after a click (defaults to 100)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is activated"
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "click",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is clicked"
    },
    {
     "name": "deactivate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is deactivated"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.menu.ColorMenu": {
   "props": [
    {
     "name": "minWidth",
     "type": "Number",
     "desc": "The minimum width of the menu in pixels (defaults to 120)",
     "memberOf": "Roo.menu.Menu"
    },
    {
     "name": "shadow",
     "type": "Boolean/String",
     "desc": "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"sides\")",
     "memberOf": "Roo.menu.Menu"
    },
    {
     "name": "subMenuAlign",
     "type": "String",
     "desc": "The {@link Roo.Element#alignTo} anchor position value to use for submenus of\nthis menu (defaults to \"tl-tr?\")",
     "memberOf": "Roo.menu.Menu"
    },
    {
     "name": "defaultAlign",
     "type": "String",
     "desc": "The default {@link Roo.Element#alignTo) anchor position value for this menu\nrelative to its element of origin (defaults to \"tl-bl?\")",
     "memberOf": "Roo.menu.Menu"
    },
    {
     "name": "allowOtherMenus",
     "type": "Boolean",
     "desc": "True to allow multiple menus to be displayed at the same time (defaults to false)",
     "memberOf": "Roo.menu.Menu"
    },
    {
     "name": "registerMenu",
     "type": "Boolean",
     "desc": "True (default) - means that clicking on screen etc. hides it.",
     "memberOf": "Roo.menu.Menu"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this menu is hidden"
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this menu is displayed"
    },
    {
     "name": "click",
     "sig": "function (_self, menuItem, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this menu is clicked (or when the enter key is pressed while it is active)"
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after this menu is hidden"
    },
    {
     "name": "itemclick",
     "sig": "function (baseItem, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a menu item contained in this menu is clicked"
    },
    {
     "name": "mouseout",
     "sig": "function (_self, e, menuItem)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse exits this menu"
    },
    {
     "name": "mouseover",
     "sig": "function (_self, e, menuItem)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse is hovering over this menu"
    },
    {
     "name": "select",
     "sig": "function (palette, color)\n{\n\n}",
     "type": "function",
     "desc": ""
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after this menu is displayed"
    }
   ],
   "methods": [
    {
     "name": "add",
     "sig": "(Mixed args)",
     "type": "function",
     "desc": "Addds one or more items of any type supported by the Menu class, or that can be converted into menu items.\nAny of the following are valid:\n<ul>\n<li>Any menu item object based on {@link Roo.menu.Item}</li>\n<li>An HTMLElement object which will be converted to a menu item</li>\n<li>A menu item config object that will be created as a new menu item</li>\n<li>A string, which can either be '-' or 'separator' to add a menu separator, otherwise\nit will be converted into a {@link Roo.menu.TextItem} and added</li>\n</ul>\nUsage:\n<pre><code>\n// Create the menu\nvar menu = new Roo.menu.Menu();\n\n// Create a menu item to add by reference\nvar menuItem = new Roo.menu.Item({ text: 'New Item!' });\n\n// Add a bunch of items at once using different methods.\n// Only the last item added will be returned.\nvar item = menu.add(\n    menuItem,                // add existing item by ref\n    'Dynamic Item',          // new TextItem\n    '-',                     // new separator\n    { text: 'Config Item' }  // new item by config\n);\n</code></pre>"
    },
    {
     "name": "addElement",
     "sig": "(String/HTMLElement/Roo.Element el)",
     "type": "function",
     "desc": "Adds an {@link Roo.Element} object to the menu"
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addItem",
     "sig": "(Roo.menu.Item item)",
     "type": "function",
     "desc": "Adds an existing object based on {@link Roo.menu.Item} to the menu"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addMenuItem",
     "sig": "(Object config)",
     "type": "function",
     "desc": "Creates a new {@link Roo.menu.Item} based an the supplied config object and adds it to the menu"
    },
    {
     "name": "addSeparator",
     "sig": "()",
     "type": "function",
     "desc": "Adds a separator bar to the menu"
    },
    {
     "name": "addText",
     "sig": "(String text)",
     "type": "function",
     "desc": "Creates a new {@link Roo.menu.TextItem} with the supplied text and adds it to the menu"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns this menu's underlying {@link Roo.Element} object"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "(Boolean deep)",
     "type": "function",
     "desc": "Hides this menu and optionally all parent menus"
    },
    {
     "name": "insert",
     "sig": "(Number index, Roo.menu.Item item)",
     "type": "function",
     "desc": "Inserts an existing object based on {@link Roo.menu.Item} to the menu at a specified index"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Read-only.  Returns true if the menu is currently displayed, else false."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "remove",
     "sig": "(Roo.menu.Item item)",
     "type": "function",
     "desc": "Removes an {@link Roo.menu.Item} from the menu and destroys the object"
    },
    {
     "name": "removeAll",
     "sig": "()",
     "type": "function",
     "desc": "Removes and destroys all items in the menu"
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "show",
     "sig": "(String/HTMLElement/Roo.Element element, String position, Roo.menu.Menu parentMenu)",
     "type": "function",
     "desc": "Displays this menu relative to another element"
    },
    {
     "name": "showAt",
     "sig": "(Array xyPosition, Roo.menu.Menu parentMenu)",
     "type": "function",
     "desc": "Displays this menu at a specific xy position"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.menu.DateItem": {
   "props": [
    {
     "name": "handler",
     "type": "Function",
     "desc": "A function that will handle the click event of this menu item (defaults to undefined)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "canActivate",
     "type": "Boolean",
     "desc": "True if this item can be visually activated (defaults to false)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "True to prevent creation of this menu item (defaults to false)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "activeClass",
     "type": "String",
     "desc": "The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hideOnClick",
     "type": "Boolean",
     "desc": "True to hide the containing menu after this item is clicked (defaults to true)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hideDelay",
     "type": "Number",
     "desc": "Length of time in milliseconds to wait before hiding after a click (defaults to 100)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is activated"
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "click",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is clicked"
    },
    {
     "name": "deactivate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is deactivated"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.menu.DateMenu": {
   "props": [
    {
     "name": "minWidth",
     "type": "Number",
     "desc": "The minimum width of the menu in pixels (defaults to 120)",
     "memberOf": "Roo.menu.Menu"
    },
    {
     "name": "shadow",
     "type": "Boolean/String",
     "desc": "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"sides\")",
     "memberOf": "Roo.menu.Menu"
    },
    {
     "name": "subMenuAlign",
     "type": "String",
     "desc": "The {@link Roo.Element#alignTo} anchor position value to use for submenus of\nthis menu (defaults to \"tl-tr?\")",
     "memberOf": "Roo.menu.Menu"
    },
    {
     "name": "defaultAlign",
     "type": "String",
     "desc": "The default {@link Roo.Element#alignTo) anchor position value for this menu\nrelative to its element of origin (defaults to \"tl-bl?\")",
     "memberOf": "Roo.menu.Menu"
    },
    {
     "name": "allowOtherMenus",
     "type": "Boolean",
     "desc": "True to allow multiple menus to be displayed at the same time (defaults to false)",
     "memberOf": "Roo.menu.Menu"
    },
    {
     "name": "registerMenu",
     "type": "Boolean",
     "desc": "True (default) - means that clicking on screen etc. hides it.",
     "memberOf": "Roo.menu.Menu"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this menu is hidden"
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this menu is displayed"
    },
    {
     "name": "click",
     "sig": "function (_self, menuItem, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this menu is clicked (or when the enter key is pressed while it is active)"
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after this menu is hidden"
    },
    {
     "name": "itemclick",
     "sig": "function (baseItem, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a menu item contained in this menu is clicked"
    },
    {
     "name": "mouseout",
     "sig": "function (_self, e, menuItem)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse exits this menu"
    },
    {
     "name": "mouseover",
     "sig": "function (_self, e, menuItem)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse is hovering over this menu"
    },
    {
     "name": "select",
     "sig": "function (picker, date)\n{\n\n}",
     "type": "function",
     "desc": ""
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after this menu is displayed"
    }
   ],
   "methods": [
    {
     "name": "add",
     "sig": "(Mixed args)",
     "type": "function",
     "desc": "Addds one or more items of any type supported by the Menu class, or that can be converted into menu items.\nAny of the following are valid:\n<ul>\n<li>Any menu item object based on {@link Roo.menu.Item}</li>\n<li>An HTMLElement object which will be converted to a menu item</li>\n<li>A menu item config object that will be created as a new menu item</li>\n<li>A string, which can either be '-' or 'separator' to add a menu separator, otherwise\nit will be converted into a {@link Roo.menu.TextItem} and added</li>\n</ul>\nUsage:\n<pre><code>\n// Create the menu\nvar menu = new Roo.menu.Menu();\n\n// Create a menu item to add by reference\nvar menuItem = new Roo.menu.Item({ text: 'New Item!' });\n\n// Add a bunch of items at once using different methods.\n// Only the last item added will be returned.\nvar item = menu.add(\n    menuItem,                // add existing item by ref\n    'Dynamic Item',          // new TextItem\n    '-',                     // new separator\n    { text: 'Config Item' }  // new item by config\n);\n</code></pre>"
    },
    {
     "name": "addElement",
     "sig": "(String/HTMLElement/Roo.Element el)",
     "type": "function",
     "desc": "Adds an {@link Roo.Element} object to the menu"
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addItem",
     "sig": "(Roo.menu.Item item)",
     "type": "function",
     "desc": "Adds an existing object based on {@link Roo.menu.Item} to the menu"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addMenuItem",
     "sig": "(Object config)",
     "type": "function",
     "desc": "Creates a new {@link Roo.menu.Item} based an the supplied config object and adds it to the menu"
    },
    {
     "name": "addSeparator",
     "sig": "()",
     "type": "function",
     "desc": "Adds a separator bar to the menu"
    },
    {
     "name": "addText",
     "sig": "(String text)",
     "type": "function",
     "desc": "Creates a new {@link Roo.menu.TextItem} with the supplied text and adds it to the menu"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns this menu's underlying {@link Roo.Element} object"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "(Boolean deep)",
     "type": "function",
     "desc": "Hides this menu and optionally all parent menus"
    },
    {
     "name": "insert",
     "sig": "(Number index, Roo.menu.Item item)",
     "type": "function",
     "desc": "Inserts an existing object based on {@link Roo.menu.Item} to the menu at a specified index"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Read-only.  Returns true if the menu is currently displayed, else false."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "remove",
     "sig": "(Roo.menu.Item item)",
     "type": "function",
     "desc": "Removes an {@link Roo.menu.Item} from the menu and destroys the object"
    },
    {
     "name": "removeAll",
     "sig": "()",
     "type": "function",
     "desc": "Removes and destroys all items in the menu"
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "show",
     "sig": "(String/HTMLElement/Roo.Element element, String position, Roo.menu.Menu parentMenu)",
     "type": "function",
     "desc": "Displays this menu relative to another element"
    },
    {
     "name": "showAt",
     "sig": "(Array xyPosition, Roo.menu.Menu parentMenu)",
     "type": "function",
     "desc": "Displays this menu at a specific xy position"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.menu.Item": {
   "props": [
    {
     "name": "text",
     "type": "String",
     "desc": "The text to show on the menu item.",
     "memberOf": ""
    },
    {
     "name": "HTML",
     "type": "String",
     "desc": "to render in menu\nThe text to show on the menu item (HTML version).",
     "memberOf": ""
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "The path to an icon to display in this menu item (defaults to Roo.BLANK_IMAGE_URL)",
     "memberOf": ""
    },
    {
     "name": "itemCls",
     "type": "String",
     "desc": "The default CSS class to use for menu items (defaults to \"x-menu-item\")",
     "memberOf": ""
    },
    {
     "name": "canActivate",
     "type": "Boolean",
     "desc": "True if this item can be visually activated (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "showDelay",
     "type": "Number",
     "desc": "Length of time in milliseconds to wait before showing this item (defaults to 200)",
     "memberOf": ""
    },
    {
     "name": "handler",
     "type": "Function",
     "desc": "A function that will handle the click event of this menu item (defaults to undefined)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "True to prevent creation of this menu item (defaults to false)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "activeClass",
     "type": "String",
     "desc": "The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hideOnClick",
     "type": "Boolean",
     "desc": "True to hide the containing menu after this item is clicked (defaults to true)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hideDelay",
     "type": "Number",
     "desc": "Length of time in milliseconds to wait before hiding after a click (defaults to 100)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is activated"
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "click",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is clicked"
    },
    {
     "name": "deactivate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is deactivated"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setText",
     "sig": "(String text, Boolean isHTML)",
     "type": "function",
     "desc": "Sets the text to display in this menu item"
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.menu.Menu": {
   "props": [
    {
     "name": "minWidth",
     "type": "Number",
     "desc": "The minimum width of the menu in pixels (defaults to 120)",
     "memberOf": ""
    },
    {
     "name": "shadow",
     "type": "Boolean/String",
     "desc": "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"sides\")",
     "memberOf": ""
    },
    {
     "name": "subMenuAlign",
     "type": "String",
     "desc": "The {@link Roo.Element#alignTo} anchor position value to use for submenus of\nthis menu (defaults to \"tl-tr?\")",
     "memberOf": ""
    },
    {
     "name": "defaultAlign",
     "type": "String",
     "desc": "The default {@link Roo.Element#alignTo) anchor position value for this menu\nrelative to its element of origin (defaults to \"tl-bl?\")",
     "memberOf": ""
    },
    {
     "name": "allowOtherMenus",
     "type": "Boolean",
     "desc": "True to allow multiple menus to be displayed at the same time (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "registerMenu",
     "type": "Boolean",
     "desc": "True (default) - means that clicking on screen etc. hides it.",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this menu is hidden"
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this menu is displayed"
    },
    {
     "name": "click",
     "sig": "function (_self, menuItem, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this menu is clicked (or when the enter key is pressed while it is active)"
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after this menu is hidden"
    },
    {
     "name": "itemclick",
     "sig": "function (baseItem, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a menu item contained in this menu is clicked"
    },
    {
     "name": "mouseout",
     "sig": "function (_self, e, menuItem)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse exits this menu"
    },
    {
     "name": "mouseover",
     "sig": "function (_self, e, menuItem)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse is hovering over this menu"
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after this menu is displayed"
    }
   ],
   "methods": [
    {
     "name": "add",
     "sig": "(Mixed args)",
     "type": "function",
     "desc": "Addds one or more items of any type supported by the Menu class, or that can be converted into menu items.\nAny of the following are valid:\n<ul>\n<li>Any menu item object based on {@link Roo.menu.Item}</li>\n<li>An HTMLElement object which will be converted to a menu item</li>\n<li>A menu item config object that will be created as a new menu item</li>\n<li>A string, which can either be '-' or 'separator' to add a menu separator, otherwise\nit will be converted into a {@link Roo.menu.TextItem} and added</li>\n</ul>\nUsage:\n<pre><code>\n// Create the menu\nvar menu = new Roo.menu.Menu();\n\n// Create a menu item to add by reference\nvar menuItem = new Roo.menu.Item({ text: 'New Item!' });\n\n// Add a bunch of items at once using different methods.\n// Only the last item added will be returned.\nvar item = menu.add(\n    menuItem,                // add existing item by ref\n    'Dynamic Item',          // new TextItem\n    '-',                     // new separator\n    { text: 'Config Item' }  // new item by config\n);\n</code></pre>"
    },
    {
     "name": "addElement",
     "sig": "(String/HTMLElement/Roo.Element el)",
     "type": "function",
     "desc": "Adds an {@link Roo.Element} object to the menu"
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addItem",
     "sig": "(Roo.menu.Item item)",
     "type": "function",
     "desc": "Adds an existing object based on {@link Roo.menu.Item} to the menu"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "addMenuItem",
     "sig": "(Object config)",
     "type": "function",
     "desc": "Creates a new {@link Roo.menu.Item} based an the supplied config object and adds it to the menu"
    },
    {
     "name": "addSeparator",
     "sig": "()",
     "type": "function",
     "desc": "Adds a separator bar to the menu"
    },
    {
     "name": "addText",
     "sig": "(String text)",
     "type": "function",
     "desc": "Creates a new {@link Roo.menu.TextItem} with the supplied text and adds it to the menu"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns this menu's underlying {@link Roo.Element} object"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "(Boolean deep)",
     "type": "function",
     "desc": "Hides this menu and optionally all parent menus"
    },
    {
     "name": "insert",
     "sig": "(Number index, Roo.menu.Item item)",
     "type": "function",
     "desc": "Inserts an existing object based on {@link Roo.menu.Item} to the menu at a specified index"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Read-only.  Returns true if the menu is currently displayed, else false."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "remove",
     "sig": "(Roo.menu.Item item)",
     "type": "function",
     "desc": "Removes an {@link Roo.menu.Item} from the menu and destroys the object"
    },
    {
     "name": "removeAll",
     "sig": "()",
     "type": "function",
     "desc": "Removes and destroys all items in the menu"
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "show",
     "sig": "(String/HTMLElement/Roo.Element element, String position, Roo.menu.Menu parentMenu)",
     "type": "function",
     "desc": "Displays this menu relative to another element"
    },
    {
     "name": "showAt",
     "sig": "(Array xyPosition, Roo.menu.Menu parentMenu)",
     "type": "function",
     "desc": "Displays this menu at a specific xy position"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.menu.MenuMgr": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "get",
     "sig": "(String/Object menu)",
     "type": "function",
     "desc": "Returns a {@link Roo.menu.Menu} object"
    },
    {
     "name": "hideAll",
     "sig": "()",
     "type": "function",
     "desc": "Hides all menus that are currently visible"
    }
   ]
  },
  "Roo.menu.Separator": {
   "props": [
    {
     "name": "itemCls",
     "type": "String",
     "desc": "The default CSS class to use for separators (defaults to \"x-menu-sep\")",
     "memberOf": ""
    },
    {
     "name": "hideOnClick",
     "type": "Boolean",
     "desc": "True to hide the containing menu after this item is clicked (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "handler",
     "type": "Function",
     "desc": "A function that will handle the click event of this menu item (defaults to undefined)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "canActivate",
     "type": "Boolean",
     "desc": "True if this item can be visually activated (defaults to false)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "True to prevent creation of this menu item (defaults to false)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "activeClass",
     "type": "String",
     "desc": "The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hideDelay",
     "type": "Number",
     "desc": "Length of time in milliseconds to wait before hiding after a click (defaults to 100)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is activated"
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "click",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is clicked"
    },
    {
     "name": "deactivate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is deactivated"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.menu.TextItem": {
   "props": [
    {
     "name": "text",
     "type": "Boolean",
     "desc": "Text to show on item.",
     "memberOf": ""
    },
    {
     "name": "hideOnClick",
     "type": "Boolean",
     "desc": "True to hide the containing menu after this item is clicked (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "itemCls",
     "type": "String",
     "desc": "The default CSS class to use for text items (defaults to \"x-menu-text\")",
     "memberOf": ""
    },
    {
     "name": "handler",
     "type": "Function",
     "desc": "A function that will handle the click event of this menu item (defaults to undefined)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "canActivate",
     "type": "Boolean",
     "desc": "True if this item can be visually activated (defaults to false)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hidden",
     "type": "Boolean",
     "desc": "True to prevent creation of this menu item (defaults to false)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "activeClass",
     "type": "String",
     "desc": "The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "hideDelay",
     "type": "Number",
     "desc": "Length of time in milliseconds to wait before hiding after a click (defaults to 100)",
     "memberOf": "Roo.menu.BaseItem"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "activate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is activated"
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "click",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is clicked"
    },
    {
     "name": "deactivate",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this item is deactivated"
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.state": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.state.CookieProvider": {
   "props": [
    {
     "name": "path",
     "type": "String",
     "desc": "The path for which the cookie is active (defaults to root '/' which makes it active for all pages in the site)",
     "memberOf": ""
    },
    {
     "name": "expires",
     "type": "Date",
     "desc": "The cookie expiration date (defaults to 7 days from now)",
     "memberOf": ""
    },
    {
     "name": "domain",
     "type": "String",
     "desc": "The domain to save the cookie for.  Note that you cannot specify a different domain than\nyour page is on, but you can specify a sub-domain, or simply the domain itself like 'roojs.com' to include\nall sub-domains if you need to access cookies across different sub-domains (defaults to null which uses the same\ndomain the page is running on including the 'www' like 'www.roojs.com')",
     "memberOf": ""
    },
    {
     "name": "secure",
     "type": "Boolean",
     "desc": "True if the site is using SSL (defaults to false)",
     "memberOf": ""
    }
   ],
   "events": [
    {
     "name": "statechange",
     "sig": "function (_self, key, value)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a state change occurs."
    }
   ],
   "methods": [
    {
     "name": "clear",
     "sig": "(String name)",
     "type": "function",
     "desc": "Clears a value from the state"
    },
    {
     "name": "decodeValue",
     "sig": "(String value)",
     "type": "function",
     "desc": "Decodes a string previously encoded with {@link #encodeValue}."
    },
    {
     "name": "encodeValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Encodes a value including type information.  Decode with {@link #decodeValue}."
    },
    {
     "name": "get",
     "sig": "(String name, Mixed defaultValue)",
     "type": "function",
     "desc": "Returns the current value for a key"
    },
    {
     "name": "set",
     "sig": "(String name, Mixed value)",
     "type": "function",
     "desc": "Sets the value for a key"
    }
   ]
  },
  "Roo.state.Manager": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "clear",
     "sig": "(String name)",
     "type": "function",
     "desc": "Clears a value from the state"
    },
    {
     "name": "get",
     "sig": "(String name, Mixed defaultValue)",
     "type": "function",
     "desc": "Returns the current value for a key"
    },
    {
     "name": "getProvider",
     "sig": "()",
     "type": "function",
     "desc": "Gets the currently configured state provider"
    },
    {
     "name": "set",
     "sig": "(String name, Mixed value)",
     "type": "function",
     "desc": "Sets the value for a key"
    },
    {
     "name": "setProvider",
     "sig": "(Provider stateProvider)",
     "type": "function",
     "desc": "Configures the default state provider for your application"
    }
   ]
  },
  "Roo.state.Provider": {
   "props": [],
   "events": [
    {
     "name": "statechange",
     "sig": "function (_self, key, value)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a state change occurs."
    }
   ],
   "methods": [
    {
     "name": "clear",
     "sig": "(String name)",
     "type": "function",
     "desc": "Clears a value from the state"
    },
    {
     "name": "decodeValue",
     "sig": "(String value)",
     "type": "function",
     "desc": "Decodes a string previously encoded with {@link #encodeValue}."
    },
    {
     "name": "encodeValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Encodes a value including type information.  Decode with {@link #decodeValue}."
    },
    {
     "name": "get",
     "sig": "(String name, Mixed defaultValue)",
     "type": "function",
     "desc": "Returns the current value for a key"
    },
    {
     "name": "set",
     "sig": "(String name, Mixed value)",
     "type": "function",
     "desc": "Sets the value for a key"
    }
   ]
  },
  "Roo.tree": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.tree.AsyncTreeNode": {
   "props": [
    {
     "name": "loader",
     "type": "TreeLoader",
     "desc": "A TreeLoader to be used by this node (defaults to the loader defined on the tree)",
     "memberOf": ""
    },
    {
     "name": "text",
     "type": "String",
     "desc": "The text for this node",
     "memberOf": "Roo.tree.TreeNode"
    },
    {
     "name": "expanded",
     "type": "Boolean",
     "desc": "true to start the node expanded",
     "memberOf": "Roo.tree.TreeNode"
    },
    {
     "name": "allowDrag",
     "type": "Boolean",
     "desc": "false to make this node undraggable if DD is on (defaults to true)",
     "memberOf": "Roo.tree.TreeNode"
    },
    {
     "name": "allowDrop",
     "type": "Boolean",
     "desc": "false if this node cannot be drop on",
     "memberOf": "Roo.tree.TreeNode"
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "true to start the node disabled",
     "memberOf": "Roo.tree.TreeNode"
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "The path to an icon for the node. The preferred way to do this",
     "memberOf": "Roo.tree.TreeNode"
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A css class to be added to the node",
     "memberOf": "Roo.tree.TreeNode"
    },
    {
     "name": "iconCls",
     "type": "String",
     "desc": "A css class to be added to the nodes icon element for applying css background images",
     "memberOf": "Roo.tree.TreeNode"
    },
    {
     "name": "href",
     "type": "String",
     "desc": "URL of the link used for the node (defaults to #)",
     "memberOf": "Roo.tree.TreeNode"
    },
    {
     "name": "hrefTarget",
     "type": "String",
     "desc": "target frame for the link",
     "memberOf": "Roo.tree.TreeNode"
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "An Ext QuickTip for the node",
     "memberOf": "Roo.tree.TreeNode"
    },
    {
     "name": "qtipCfg",
     "type": "String",
     "desc": "An Ext QuickTip config for the node (used instead of qtip)",
     "memberOf": "Roo.tree.TreeNode"
    },
    {
     "name": "singleClickExpand",
     "type": "Boolean",
     "desc": "True for single click expand on this node",
     "memberOf": "Roo.tree.TreeNode"
    },
    {
     "name": "uiProvider",
     "type": "Function",
     "desc": "A UI <b>class</b> to use for this node (defaults to Roo.tree.TreeNodeUI)",
     "memberOf": "Roo.tree.TreeNode"
    },
    {
     "name": "checked",
     "type": "Boolean",
     "desc": "True to render a checked checkbox for this node, false to render an unchecked checkbox\n(defaults to undefined with no checkbox rendered)",
     "memberOf": "Roo.tree.TreeNode"
    },
    {
     "name": "leaf",
     "type": "Boolean",
     "desc": "true if this node is a leaf and does not have children",
     "memberOf": "Roo.data.Node"
    },
    {
     "name": "id",
     "type": "String",
     "desc": "The id for this node. If one is not specified, one is generated.",
     "memberOf": "Roo.data.Node"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "append",
     "sig": "function (tree, _self, node, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a new child node is appended"
    },
    {
     "name": "beforeappend",
     "sig": "function (tree, _self, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a new child is appended, return false to cancel the append."
    },
    {
     "name": "beforechildrenrendered",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires right before the child nodes for this node are rendered"
    },
    {
     "name": "beforeclick",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires before click processing. Return false to cancel the default action."
    },
    {
     "name": "beforecollapse",
     "sig": "function (_self, deep, anim)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this node is collapsed, return false to cancel."
    },
    {
     "name": "beforeexpand",
     "sig": "function (_self, deep, anim)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this node is expanded, return false to cancel."
    },
    {
     "name": "beforeinsert",
     "sig": "function (tree, _self, node, refNode)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a new child is inserted, return false to cancel the insert."
    },
    {
     "name": "beforeload",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this node is loaded, return false to cancel"
    },
    {
     "name": "beforemove",
     "sig": "function (tree, _self, oldParent, newParent, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this node is moved to a new location in the tree. Return false to cancel the move."
    },
    {
     "name": "beforeremove",
     "sig": "function (tree, _self, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a child is removed, return false to cancel the remove."
    },
    {
     "name": "checkchange",
     "sig": "function (_self, checked)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a node with a checkbox's checked property changes"
    },
    {
     "name": "click",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this node is clicked"
    },
    {
     "name": "collapse",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this node is collapsed"
    },
    {
     "name": "contextmenu",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this node is right clicked"
    },
    {
     "name": "dblclick",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this node is double clicked"
    },
    {
     "name": "disabledchange",
     "sig": "function (_self, disabled)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the disabled status of this node changes"
    },
    {
     "name": "expand",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this node is expanded"
    },
    {
     "name": "insert",
     "sig": "function (tree, _self, node, refNode)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a new child node is inserted."
    },
    {
     "name": "load",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this node is loaded"
    },
    {
     "name": "move",
     "sig": "function (tree, _self, oldParent, newParent, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this node is moved to a new location in the tree"
    },
    {
     "name": "remove",
     "sig": "function (tree, _self, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a child node is removed"
    },
    {
     "name": "textchange",
     "sig": "function (_self, text, oldText)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the text for this node is changed"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "appendChild",
     "sig": "(Node/Array node)",
     "type": "function",
     "desc": "Insert node(s) as the last child node of this node."
    },
    {
     "name": "bubble",
     "sig": "(Function fn, Object scope, Array args)",
     "type": "function",
     "desc": "Bubbles up the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe bubble is stopped."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "cascade",
     "sig": "(Function fn, Object scope, Array args)",
     "type": "function",
     "desc": "Cascades down the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe cascade is stopped on that branch."
    },
    {
     "name": "collapse",
     "sig": "(Boolean deep, Boolean anim)",
     "type": "function",
     "desc": "Collapse this node."
    },
    {
     "name": "collapseChildNodes",
     "sig": "(Boolean deep)",
     "type": "function",
     "desc": "Collapse all child nodes"
    },
    {
     "name": "contains",
     "sig": "(Node node)",
     "type": "function",
     "desc": "Returns true if this node is an ancestor (at any point) of the passed node."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disables this node"
    },
    {
     "name": "eachChild",
     "sig": "(Function fn, Object scope, Array args)",
     "type": "function",
     "desc": "Interates the child nodes of this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe iteration stops."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enables this node"
    },
    {
     "name": "ensureVisible",
     "sig": "()",
     "type": "function",
     "desc": "Ensures all parent nodes are expanded"
    },
    {
     "name": "expand",
     "sig": "(Boolean deep, Boolean anim, Function callback)",
     "type": "function",
     "desc": "Expand this node."
    },
    {
     "name": "expandChildNodes",
     "sig": "(Boolean deep)",
     "type": "function",
     "desc": "Expand all child nodes"
    },
    {
     "name": "findChild",
     "sig": "(String attribute, Mixed value)",
     "type": "function",
     "desc": "Finds the first child that has the attribute with the specified value."
    },
    {
     "name": "findChildBy",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Finds the first child by a custom function. The child matches if the function passed\nreturns true."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getDepth",
     "sig": "()",
     "type": "function",
     "desc": "Returns depth of this node (the root node has a depth of 0)"
    },
    {
     "name": "getOwnerTree",
     "sig": "()",
     "type": "function",
     "desc": "Returns the tree this node is in."
    },
    {
     "name": "getPath",
     "sig": "(String attr)",
     "type": "function",
     "desc": "Returns the path for this node. The path can be used to expand or select this node programmatically."
    },
    {
     "name": "getUI",
     "sig": "()",
     "type": "function",
     "desc": "Returns the UI object for this node"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "indexOf",
     "sig": "(Node node)",
     "type": "function",
     "desc": "Returns the index of a child node"
    },
    {
     "name": "insertBefore",
     "sig": "(Node node, Node refNode)",
     "type": "function",
     "desc": "Inserts the first node before the second node in this nodes childNodes collection."
    },
    {
     "name": "isAncestor",
     "sig": "(Node node)",
     "type": "function",
     "desc": "Returns true if the passed node is an ancestor (at any point) of this node."
    },
    {
     "name": "isExpanded",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this node is expanded"
    },
    {
     "name": "isFirst",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this node is the first child of its parent"
    },
    {
     "name": "isLast",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this node is the last child of its parent"
    },
    {
     "name": "isLeaf",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this node is a leaf"
    },
    {
     "name": "isLoaded",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this node has been loaded"
    },
    {
     "name": "isLoading",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this node is currently loading"
    },
    {
     "name": "isSelected",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this node is selected"
    },
    {
     "name": "item",
     "sig": "(Number index)",
     "type": "function",
     "desc": "Returns the child node at the specified index."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "reload",
     "sig": "(Function callback)",
     "type": "function",
     "desc": "Trigger a reload for this node"
    },
    {
     "name": "removeChild",
     "sig": "(Node node)",
     "type": "function",
     "desc": "Removes a child node from this node."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "replaceChild",
     "sig": "(Node newChild, Node oldChild)",
     "type": "function",
     "desc": "Replaces one child node in this node with another."
    },
    {
     "name": "select",
     "sig": "()",
     "type": "function",
     "desc": "Triggers selection of this node"
    },
    {
     "name": "setText",
     "sig": "(String text)",
     "type": "function",
     "desc": "Sets the text for this node"
    },
    {
     "name": "sort",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Sorts this nodes children using the supplied sort function"
    },
    {
     "name": "toggle",
     "sig": "()",
     "type": "function",
     "desc": "Toggles expanded/collapsed state of the node"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unselect",
     "sig": "()",
     "type": "function",
     "desc": "Triggers deselection of this node"
    }
   ]
  },
  "Roo.tree.ColumnTree": {
   "props": [
    {
     "name": "columns",
     "type": "Object",
     "desc": "Including width, header, renderer, cls, dataIndex",
     "memberOf": ""
    },
    {
     "name": "borderWidth",
     "type": "int",
     "desc": "compined right/left border allowance",
     "memberOf": ""
    }
   ],
   "events": [
    {
     "name": "resize",
     "sig": "function (w, h)\n{\n\n}",
     "type": "function",
     "desc": "Fire this event on a container when it resizes"
    }
   ],
   "methods": []
  },
  "Roo.tree.DefaultSelectionModel": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforeselect",
     "sig": "function (_self, node, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the selected node changes, return false to cancel the change"
    },
    {
     "name": "selectionchange",
     "sig": "function (_self, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the selected node changes"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearSelections",
     "sig": "()",
     "type": "function",
     "desc": "Clear all selections"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getSelectedNode",
     "sig": "()",
     "type": "function",
     "desc": "Get the selected node"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isSelected",
     "sig": "(TreeNode node)",
     "type": "function",
     "desc": "Returns true if the node is selected"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "select",
     "sig": "(TreeNode node)",
     "type": "function",
     "desc": "Select a node."
    },
    {
     "name": "selectNext",
     "sig": "()",
     "type": "function",
     "desc": "Selects the node above the selected node in the tree, intelligently walking the nodes"
    },
    {
     "name": "selectPrevious",
     "sig": "()",
     "type": "function",
     "desc": "Selects the node above the selected node in the tree, intelligently walking the nodes"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unselect",
     "sig": "(TreeNode node)",
     "type": "function",
     "desc": "Deselect a node."
    }
   ]
  },
  "Roo.tree.MultiSelectionModel": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "selectionchange",
     "sig": "function (_self, nodes)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the selected nodes change"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clearSelections",
     "sig": "()",
     "type": "function",
     "desc": "Clear all selections"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getSelectedNodes",
     "sig": "()",
     "type": "function",
     "desc": "Returns an array of the selected nodes"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "isSelected",
     "sig": "(TreeNode node)",
     "type": "function",
     "desc": "Returns true if the node is selected"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "select",
     "sig": "(TreeNode node, EventObject e, Boolean keepExisting)",
     "type": "function",
     "desc": "Select a node."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unselect",
     "sig": "(TreeNode node)",
     "type": "function",
     "desc": "Deselect a node."
    }
   ]
  },
  "Roo.tree.TreeEditor": {
   "props": [
    {
     "name": "tree",
     "type": "Roo.tree.TreePanel",
     "desc": "The tree to bind to.",
     "memberOf": ""
    },
    {
     "name": "field",
     "type": "Roo.form.TextField|Object",
     "desc": "The field configuration",
     "memberOf": ""
    },
    {
     "name": "alignment",
     "type": "String",
     "desc": "The position to align to (see {@link Roo.Element#alignTo} for more details, defaults to \"l-l\").",
     "memberOf": ""
    },
    {
     "name": "hideEl",
     "type": "Boolean",
     "desc": "True to hide the bound element while the editor is displayed (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "CSS class to apply to the editor (defaults to \"x-small-editor x-tree-editor\")",
     "memberOf": ""
    },
    {
     "name": "shim",
     "type": "Boolean",
     "desc": "True to shim the editor if selects/iframes could be displayed beneath it (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "maxWidth",
     "type": "Number",
     "desc": "The maximum width in pixels of the editor field (defaults to 250).  Note that if the maxWidth would exceed\nthe containing tree element's size, it will be automatically limited for you to the container width, taking\nscroll and client offsets into account prior to each edit.",
     "memberOf": ""
    },
    {
     "name": "autosize",
     "type": "Boolean/String",
     "desc": "True for the editor to automatically adopt the size of the underlying field, \"width\" to adopt the width only,\nor \"height\" to adopt the height only (defaults to false)",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "revertInvalid",
     "type": "Boolean",
     "desc": "True to automatically revert the field value and cancel the edit when the user completes an edit and the field\nvalidation fails (defaults to true)",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "ignoreNoChange",
     "type": "Boolean",
     "desc": "True to skip the the edit completion process (no save, no events fired) if the user completes an edit and\nthe value has not changed (defaults to false).  Applies only to string values - edits for other data types\nwill never be ignored.",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "value",
     "type": "Mixed",
     "desc": "The data value of the underlying field (defaults to \"\")",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "shadow",
     "type": "Boolean/String",
     "desc": "\"sides\" for sides/bottom only, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"frame\")",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "constrain",
     "type": "Boolean",
     "desc": "True to constrain the editor to the viewport",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "completeOnEnter",
     "type": "Boolean",
     "desc": "True to complete the edit when the enter key is pressed (defaults to false)",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "cancelOnEsc",
     "type": "Boolean",
     "desc": "True to cancel the edit when the escape key is pressed (defaults to false)",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "updateEl",
     "type": "Boolean",
     "desc": "True to update the innerHTML of the bound element when the update completes (defaults to false)",
     "memberOf": "Roo.Editor"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforecomplete",
     "sig": "function (_self, value, startValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires after a change has been made to the field, but before the change is reflected in the underlying\nfield.  Saving the change to the field can be canceled by returning false from the handler of this event.\nNote that if the value has not changed and ignoreNoChange = true, the editing will still end but this\nevent will not fire since no edit actually occurred."
    },
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforenodeedit",
     "sig": "function (_self, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning\nfalse from the handler of this event."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "beforestartedit",
     "sig": "function (_self, boundEl, value)\n{\n\n}",
     "type": "function",
     "desc": "Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning\nfalse from the handler of this event."
    },
    {
     "name": "complete",
     "sig": "function (_self, value, startValue)\n{\n\n}",
     "type": "function",
     "desc": "Fires after editing is complete and any changed value has been written to the underlying field."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    },
    {
     "name": "specialkey",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed."
    },
    {
     "name": "startedit",
     "sig": "function (boundEl, value)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this editor is displayed"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "cancelEdit",
     "sig": "(Boolean remainVisible)",
     "type": "function",
     "desc": "Cancels the editing process and hides the editor without persisting any changes.  The field value will be\nreverted to the original starting value."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "completeEdit",
     "sig": "(Boolean remainVisible)",
     "type": "function",
     "desc": "Ends the editing process, persists the changed value to the underlying field, and hides the editor."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "getValue",
     "sig": "()",
     "type": "function",
     "desc": "Gets the data value of the editor"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "realign",
     "sig": "()",
     "type": "function",
     "desc": "Realigns the editor to the bound field based on the current alignment config value."
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setSize",
     "sig": "(Number width, Number height)",
     "type": "function",
     "desc": "Sets the height and width of this editor."
    },
    {
     "name": "setValue",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Sets the data value of the editor"
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "startEdit",
     "sig": "(String/HTMLElement/Element el, String value)",
     "type": "function",
     "desc": "Starts the editing process and shows the editor."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.tree.TreeFilter": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "clear",
     "sig": "()",
     "type": "function",
     "desc": "Clears the current filter. Note: with the \"remove\" option\nset a filter cannot be cleared."
    },
    {
     "name": "filter",
     "sig": "(String/RegExp value, String attr, TreeNode startNode)",
     "type": "function",
     "desc": "Filter the data by a specific attribute."
    },
    {
     "name": "filterBy",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Filter by a function. The passed function will be called with each\nnode in the tree (or from the startNode). If the function returns true, the node is kept\notherwise it is filtered. If a node is filtered, its children are also filtered."
    }
   ]
  },
  "Roo.tree.TreeLoader": {
   "props": [
    {
     "name": "dataUrl",
     "type": "String",
     "desc": "The URL from which to request a Json string which\nspecifies an array of node definition object representing the child nodes\nto be loaded.",
     "memberOf": ""
    },
    {
     "name": "requestMethod",
     "type": "String",
     "desc": "either GET or POST\ndefaults to POST (due to BC)\nto be loaded.",
     "memberOf": ""
    },
    {
     "name": "baseParams",
     "type": "Object",
     "desc": "(optional) An object containing properties which\nspecify HTTP parameters to be passed to each request for child nodes.",
     "memberOf": ""
    },
    {
     "name": "baseAttrs",
     "type": "Object",
     "desc": "(optional) An object containing attributes to be added to all nodes\ncreated by this loader. If the attributes sent by the server have an attribute in this object,\nthey take priority.",
     "memberOf": ""
    },
    {
     "name": "uiProviders",
     "type": "Object",
     "desc": "(optional) An object containing properties which\n\nDEPRECATED - use 'create' event handler to modify attributes - which affect creation.\nspecify custom {@link Roo.tree.TreeNodeUI} implementations. If the optional\n<i>uiProvider</i> attribute of a returned child node is a string rather\nthan a reference to a TreeNodeUI implementation, this that string value\nis used as a property name in the uiProviders object. You can define the provider named\n'default' , and this will be used for all nodes (if no uiProvider is delivered by the node data)",
     "memberOf": ""
    },
    {
     "name": "clearOnLoad",
     "type": "Boolean",
     "desc": "(optional) Default to true. Remove previously existing\nchild nodes before loading.",
     "memberOf": ""
    },
    {
     "name": "root",
     "type": "String",
     "desc": "(optional) Default to false. Use this to read data from an object \nproperty on loading, rather than expecting an array. (eg. more compatible to a standard\nGrid query { data : [ .....] }",
     "memberOf": ""
    },
    {
     "name": "queryParam",
     "type": "String",
     "desc": "(optional) \nName of the query as it will be passed on the querystring (defaults to 'node')\neg. the request will be ?node=[id]",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforeload",
     "sig": "function (This, node, callback)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a network request is made to retrieve the Json text which specifies a node's children."
    },
    {
     "name": "create",
     "sig": "function (This, attr)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a node is created, enabling you to return custom Node types"
    },
    {
     "name": "load",
     "sig": "function (This, node, response)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the node has been successfuly loaded."
    },
    {
     "name": "loadexception",
     "sig": "function (This, node, response)\n{\n\n}",
     "type": "function",
     "desc": "Fires if the network request failed."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "load",
     "sig": "(Roo.tree.TreeNode node, Function callback)",
     "type": "function",
     "desc": "Load an {@link Roo.tree.TreeNode} from the URL specified in the constructor.\nThis is called automatically when a node is expanded, but may be used to reload\na node (or append new children if the {@link #clearOnLoad} option is false.)"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.tree.TreeNode": {
   "props": [
    {
     "name": "text",
     "type": "String",
     "desc": "The text for this node",
     "memberOf": ""
    },
    {
     "name": "expanded",
     "type": "Boolean",
     "desc": "true to start the node expanded",
     "memberOf": ""
    },
    {
     "name": "allowDrag",
     "type": "Boolean",
     "desc": "false to make this node undraggable if DD is on (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "allowDrop",
     "type": "Boolean",
     "desc": "false if this node cannot be drop on",
     "memberOf": ""
    },
    {
     "name": "disabled",
     "type": "Boolean",
     "desc": "true to start the node disabled",
     "memberOf": ""
    },
    {
     "name": "icon",
     "type": "String",
     "desc": "The path to an icon for the node. The preferred way to do this",
     "memberOf": ""
    },
    {
     "name": "cls",
     "type": "String",
     "desc": "A css class to be added to the node",
     "memberOf": ""
    },
    {
     "name": "iconCls",
     "type": "String",
     "desc": "A css class to be added to the nodes icon element for applying css background images",
     "memberOf": ""
    },
    {
     "name": "href",
     "type": "String",
     "desc": "URL of the link used for the node (defaults to #)",
     "memberOf": ""
    },
    {
     "name": "hrefTarget",
     "type": "String",
     "desc": "target frame for the link",
     "memberOf": ""
    },
    {
     "name": "qtip",
     "type": "String",
     "desc": "An Ext QuickTip for the node",
     "memberOf": ""
    },
    {
     "name": "qtipCfg",
     "type": "String",
     "desc": "An Ext QuickTip config for the node (used instead of qtip)",
     "memberOf": ""
    },
    {
     "name": "singleClickExpand",
     "type": "Boolean",
     "desc": "True for single click expand on this node",
     "memberOf": ""
    },
    {
     "name": "uiProvider",
     "type": "Function",
     "desc": "A UI <b>class</b> to use for this node (defaults to Roo.tree.TreeNodeUI)",
     "memberOf": ""
    },
    {
     "name": "checked",
     "type": "Boolean",
     "desc": "True to render a checked checkbox for this node, false to render an unchecked checkbox\n(defaults to undefined with no checkbox rendered)",
     "memberOf": ""
    },
    {
     "name": "leaf",
     "type": "Boolean",
     "desc": "true if this node is a leaf and does not have children",
     "memberOf": "Roo.data.Node"
    },
    {
     "name": "id",
     "type": "String",
     "desc": "The id for this node. If one is not specified, one is generated.",
     "memberOf": "Roo.data.Node"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "append",
     "sig": "function (tree, _self, node, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a new child node is appended"
    },
    {
     "name": "beforeappend",
     "sig": "function (tree, _self, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a new child is appended, return false to cancel the append."
    },
    {
     "name": "beforechildrenrendered",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires right before the child nodes for this node are rendered"
    },
    {
     "name": "beforeclick",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires before click processing. Return false to cancel the default action."
    },
    {
     "name": "beforecollapse",
     "sig": "function (_self, deep, anim)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this node is collapsed, return false to cancel."
    },
    {
     "name": "beforeexpand",
     "sig": "function (_self, deep, anim)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this node is expanded, return false to cancel."
    },
    {
     "name": "beforeinsert",
     "sig": "function (tree, _self, node, refNode)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a new child is inserted, return false to cancel the insert."
    },
    {
     "name": "beforemove",
     "sig": "function (tree, _self, oldParent, newParent, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires before this node is moved to a new location in the tree. Return false to cancel the move."
    },
    {
     "name": "beforeremove",
     "sig": "function (tree, _self, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a child is removed, return false to cancel the remove."
    },
    {
     "name": "checkchange",
     "sig": "function (_self, checked)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a node with a checkbox's checked property changes"
    },
    {
     "name": "click",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this node is clicked"
    },
    {
     "name": "collapse",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this node is collapsed"
    },
    {
     "name": "contextmenu",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this node is right clicked"
    },
    {
     "name": "dblclick",
     "sig": "function (_self, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this node is double clicked"
    },
    {
     "name": "disabledchange",
     "sig": "function (_self, disabled)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the disabled status of this node changes"
    },
    {
     "name": "expand",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this node is expanded"
    },
    {
     "name": "insert",
     "sig": "function (tree, _self, node, refNode)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a new child node is inserted."
    },
    {
     "name": "move",
     "sig": "function (tree, _self, oldParent, newParent, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when this node is moved to a new location in the tree"
    },
    {
     "name": "remove",
     "sig": "function (tree, _self, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a child node is removed"
    },
    {
     "name": "textchange",
     "sig": "function (_self, text, oldText)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the text for this node is changed"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "appendChild",
     "sig": "(Node/Array node)",
     "type": "function",
     "desc": "Insert node(s) as the last child node of this node."
    },
    {
     "name": "bubble",
     "sig": "(Function fn, Object scope, Array args)",
     "type": "function",
     "desc": "Bubbles up the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe bubble is stopped."
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "cascade",
     "sig": "(Function fn, Object scope, Array args)",
     "type": "function",
     "desc": "Cascades down the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe cascade is stopped on that branch."
    },
    {
     "name": "collapse",
     "sig": "(Boolean deep, Boolean anim)",
     "type": "function",
     "desc": "Collapse this node."
    },
    {
     "name": "collapseChildNodes",
     "sig": "(Boolean deep)",
     "type": "function",
     "desc": "Collapse all child nodes"
    },
    {
     "name": "contains",
     "sig": "(Node node)",
     "type": "function",
     "desc": "Returns true if this node is an ancestor (at any point) of the passed node."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disables this node"
    },
    {
     "name": "eachChild",
     "sig": "(Function fn, Object scope, Array args)",
     "type": "function",
     "desc": "Interates the child nodes of this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe iteration stops."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enables this node"
    },
    {
     "name": "ensureVisible",
     "sig": "()",
     "type": "function",
     "desc": "Ensures all parent nodes are expanded"
    },
    {
     "name": "expand",
     "sig": "(Boolean deep, Boolean anim, Function callback)",
     "type": "function",
     "desc": "Expand this node."
    },
    {
     "name": "expandChildNodes",
     "sig": "(Boolean deep)",
     "type": "function",
     "desc": "Expand all child nodes"
    },
    {
     "name": "findChild",
     "sig": "(String attribute, Mixed value)",
     "type": "function",
     "desc": "Finds the first child that has the attribute with the specified value."
    },
    {
     "name": "findChildBy",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Finds the first child by a custom function. The child matches if the function passed\nreturns true."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getDepth",
     "sig": "()",
     "type": "function",
     "desc": "Returns depth of this node (the root node has a depth of 0)"
    },
    {
     "name": "getOwnerTree",
     "sig": "()",
     "type": "function",
     "desc": "Returns the tree this node is in."
    },
    {
     "name": "getPath",
     "sig": "(String attr)",
     "type": "function",
     "desc": "Returns the path for this node. The path can be used to expand or select this node programmatically."
    },
    {
     "name": "getUI",
     "sig": "()",
     "type": "function",
     "desc": "Returns the UI object for this node"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "indexOf",
     "sig": "(Node node)",
     "type": "function",
     "desc": "Returns the index of a child node"
    },
    {
     "name": "insertBefore",
     "sig": "(Node node, Node refNode)",
     "type": "function",
     "desc": "Inserts the first node before the second node in this nodes childNodes collection."
    },
    {
     "name": "isAncestor",
     "sig": "(Node node)",
     "type": "function",
     "desc": "Returns true if the passed node is an ancestor (at any point) of this node."
    },
    {
     "name": "isExpanded",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this node is expanded"
    },
    {
     "name": "isFirst",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this node is the first child of its parent"
    },
    {
     "name": "isLast",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this node is the last child of its parent"
    },
    {
     "name": "isLeaf",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this node is a leaf"
    },
    {
     "name": "isSelected",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this node is selected"
    },
    {
     "name": "item",
     "sig": "(Number index)",
     "type": "function",
     "desc": "Returns the child node at the specified index."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeChild",
     "sig": "(Node node)",
     "type": "function",
     "desc": "Removes a child node from this node."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "replaceChild",
     "sig": "(Node newChild, Node oldChild)",
     "type": "function",
     "desc": "Replaces one child node in this node with another."
    },
    {
     "name": "select",
     "sig": "()",
     "type": "function",
     "desc": "Triggers selection of this node"
    },
    {
     "name": "setText",
     "sig": "(String text)",
     "type": "function",
     "desc": "Sets the text for this node"
    },
    {
     "name": "sort",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Sorts this nodes children using the supplied sort function"
    },
    {
     "name": "toggle",
     "sig": "()",
     "type": "function",
     "desc": "Toggles expanded/collapsed state of the node"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    },
    {
     "name": "unselect",
     "sig": "()",
     "type": "function",
     "desc": "Triggers deselection of this node"
    }
   ]
  },
  "Roo.tree.TreeNodeUI": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.tree.TreePanel": {
   "props": [
    {
     "name": "rootVisible",
     "type": "Boolean",
     "desc": "false to hide the root node (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "lines",
     "type": "Boolean",
     "desc": "false to disable tree lines (defaults to true)",
     "memberOf": ""
    },
    {
     "name": "enableDD",
     "type": "Boolean",
     "desc": "true to enable drag and drop",
     "memberOf": ""
    },
    {
     "name": "enableDrag",
     "type": "Boolean",
     "desc": "true to enable just drag",
     "memberOf": ""
    },
    {
     "name": "enableDrop",
     "type": "Boolean",
     "desc": "true to enable just drop",
     "memberOf": ""
    },
    {
     "name": "dragConfig",
     "type": "Object",
     "desc": "Custom config to pass to the {@link Roo.tree.TreeDragZone} instance",
     "memberOf": ""
    },
    {
     "name": "dropConfig",
     "type": "Object",
     "desc": "Custom config to pass to the {@link Roo.tree.TreeDropZone} instance",
     "memberOf": ""
    },
    {
     "name": "ddGroup",
     "type": "String",
     "desc": "The DD group this TreePanel belongs to",
     "memberOf": ""
    },
    {
     "name": "ddAppendOnly",
     "type": "String",
     "desc": "True if the tree should only allow append drops (use for trees which are sorted)",
     "memberOf": ""
    },
    {
     "name": "ddScroll",
     "type": "Boolean",
     "desc": "true to enable YUI body scrolling",
     "memberOf": ""
    },
    {
     "name": "containerScroll",
     "type": "Boolean",
     "desc": "true to register this container with ScrollManager",
     "memberOf": ""
    },
    {
     "name": "hlDrop",
     "type": "Boolean",
     "desc": "false to disable node highlight on drop (defaults to the value of Roo.enableFx)",
     "memberOf": ""
    },
    {
     "name": "hlColor",
     "type": "String",
     "desc": "The color of the node highlight (defaults to C3DAF9)",
     "memberOf": ""
    },
    {
     "name": "animate",
     "type": "Boolean",
     "desc": "true to enable animated expand/collapse (defaults to the value of Roo.enableFx)",
     "memberOf": ""
    },
    {
     "name": "singleExpand",
     "type": "Boolean",
     "desc": "true if only 1 node per branch may be expanded",
     "memberOf": ""
    },
    {
     "name": "selModel",
     "type": "Boolean",
     "desc": "A tree selection model to use with this TreePanel (defaults to a {@link Roo.tree.DefaultSelectionModel})",
     "memberOf": ""
    },
    {
     "name": "loader",
     "type": "Boolean",
     "desc": "A TreeLoader for use with this TreePanel",
     "memberOf": ""
    },
    {
     "name": "editor",
     "type": "Object|Roo.tree.TreeEditor",
     "desc": "The TreeEditor or xtype data to display when clicked.",
     "memberOf": ""
    },
    {
     "name": "pathSeparator",
     "type": "String",
     "desc": "The token used to separate sub-paths in path strings (defaults to '/')",
     "memberOf": ""
    },
    {
     "name": "renderer",
     "type": "Function",
     "desc": "DEPRECATED - use TreeLoader:create event / Sets the rendering (formatting) function for the nodes. to return HTML markup for the tree view. The render function is called with  the following parameters:<ul><li>The {Object} The data for the node.</li></ul>",
     "memberOf": ""
    },
    {
     "name": "rendererTip",
     "type": "Function",
     "desc": "DEPRECATED - use TreeLoader:create event / Sets the rendering (formatting) function for the nodes hovertip to return HTML markup for the tree view. The render function is called with  the following parameters:<ul><li>The {Object} The data for the node.</li></ul>",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "append",
     "sig": "function (tree, parent, node, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a new child node is appended to a node in this tree."
    },
    {
     "name": "beforeappend",
     "sig": "function (tree, parent, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a new child is appended to a node in this tree, return false to cancel the append."
    },
    {
     "name": "beforechildrenrendered",
     "sig": "function (node)\n{\n\n}",
     "type": "function",
     "desc": "Fires right before the child nodes for a node are rendered"
    },
    {
     "name": "beforeclick",
     "sig": "function (node, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires before click processing on a node. Return false to cancel the default action."
    },
    {
     "name": "beforecollapse",
     "sig": "function (node, deep, anim)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a node is collapsed, return false to cancel."
    },
    {
     "name": "beforeexpand",
     "sig": "function (node, deep, anim)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a node is expanded, return false to cancel."
    },
    {
     "name": "beforeinsert",
     "sig": "function (tree, parent, node, refNode)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a new child is inserted in a node in this tree, return false to cancel the insert."
    },
    {
     "name": "beforeload",
     "sig": "function (node)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a node is loaded, return false to cancel"
    },
    {
     "name": "beforemove",
     "sig": "function (tree, node, oldParent, newParent, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a node is moved to a new location in the tree. Return false to cancel the move."
    },
    {
     "name": "beforenodedrop",
     "sig": "function (dropEvent)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a DD object is dropped on a node in this tree for preprocessing. Return false to cancel the drop. The dropEvent\npassed to handlers has the following properties:<br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>tree - The TreePanel</li>\n<li>target - The node being targeted for the drop</li>\n<li>data - The drag data from the drag source</li>\n<li>point - The point of the drop - append, above or below</li>\n<li>source - The drag source</li>\n<li>rawEvent - Raw mouse event</li>\n<li>dropNode - Drop node(s) provided by the source <b>OR</b> you can supply node(s)\nto be inserted by setting them on this object.</li>\n<li>cancel - Set this to true to cancel the drop.</li>\n</ul>"
    },
    {
     "name": "beforeremove",
     "sig": "function (tree, parent, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires before a child is removed from a node in this tree, return false to cancel the remove."
    },
    {
     "name": "checkchange",
     "sig": "function (_self, checked)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a node with a checkbox's checked property changes"
    },
    {
     "name": "click",
     "sig": "function (node, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a node is clicked"
    },
    {
     "name": "collapse",
     "sig": "function (node)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a node is collapsed"
    },
    {
     "name": "contextmenu",
     "sig": "function (node, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a node is right clicked"
    },
    {
     "name": "dblclick",
     "sig": "function (node, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a node is double clicked"
    },
    {
     "name": "disabledchange",
     "sig": "function (node, disabled)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the disabled status of a node changes"
    },
    {
     "name": "dragdrop",
     "sig": "function (_self, node, dd, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a dragged node is dropped on a valid DD target"
    },
    {
     "name": "enddrag",
     "sig": "function (_self, node, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a drag operation is complete"
    },
    {
     "name": "expand",
     "sig": "function (node)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a node is expanded"
    },
    {
     "name": "insert",
     "sig": "function (tree, parent, node, refNode)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a new child node is inserted in a node in this tree."
    },
    {
     "name": "load",
     "sig": "function (node)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a node is loaded"
    },
    {
     "name": "move",
     "sig": "function (tree, node, oldParent, newParent, index)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a node is moved to a new location in the tree"
    },
    {
     "name": "nodedragover",
     "sig": "function (dragOverEvent)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a tree node is being targeted for a drag drop, return false to signal drop not allowed. The dragOverEvent\npassed to handlers has the following properties:<br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>tree - The TreePanel</li>\n<li>target - The node being targeted for the drop</li>\n<li>data - The drag data from the drag source</li>\n<li>point - The point of the drop - append, above or below</li>\n<li>source - The drag source</li>\n<li>rawEvent - Raw mouse event</li>\n<li>dropNode - Drop node(s) provided by the source.</li>\n<li>cancel - Set this to true to signal drop not allowed.</li>\n</ul>"
    },
    {
     "name": "nodedrop",
     "sig": "function (dropEvent)\n{\n\n}",
     "type": "function",
     "desc": "Fires after a DD object is dropped on a node in this tree. The dropEvent\npassed to handlers has the following properties:<br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>tree - The TreePanel</li>\n<li>target - The node being targeted for the drop</li>\n<li>data - The drag data from the drag source</li>\n<li>point - The point of the drop - append, above or below</li>\n<li>source - The drag source</li>\n<li>rawEvent - Raw mouse event</li>\n<li>dropNode - Dropped node(s).</li>\n</ul>"
    },
    {
     "name": "remove",
     "sig": "function (tree, parent, node)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a child node is removed from a node in this tree."
    },
    {
     "name": "startdrag",
     "sig": "function (_self, node, e)\n{\n\n}",
     "type": "function",
     "desc": "Fires when a node starts being dragged"
    },
    {
     "name": "textchange",
     "sig": "function (node, text, oldText)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the text for a node is changed"
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "collapseAll",
     "sig": "()",
     "type": "function",
     "desc": "Collapse all nodes"
    },
    {
     "name": "expandAll",
     "sig": "()",
     "type": "function",
     "desc": "Expand all nodes"
    },
    {
     "name": "expandPath",
     "sig": "(String path, String attr, Function callback)",
     "type": "function",
     "desc": "Expands a specified path in this TreePanel. A path can be retrieved from a node with {@link Roo.data.Node#getPath}"
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "getChecked",
     "sig": "(String attribute, TreeNode startNode)",
     "type": "function",
     "desc": "Retrieve an array of checked nodes, or an array of a specific attribute of checked nodes (e.g. \"id\")"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the container element for this TreePanel"
    },
    {
     "name": "getLoader",
     "sig": "()",
     "type": "function",
     "desc": "Returns the default TreeLoader for this TreePanel"
    },
    {
     "name": "getNodeById",
     "sig": "(String id)",
     "type": "function",
     "desc": "Gets a node in this tree by its id."
    },
    {
     "name": "getRootNode",
     "sig": "()",
     "type": "function",
     "desc": "Returns the root node for this tree."
    },
    {
     "name": "getSelectionModel",
     "sig": "()",
     "type": "function",
     "desc": "Returns the selection model used by this TreePanel"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "()",
     "type": "function",
     "desc": "Trigger rendering of this TreePanel"
    },
    {
     "name": "selectPath",
     "sig": "(String path, String attr, Function callback)",
     "type": "function",
     "desc": "Selects the node in this tree at the specified path. A path can be retrieved from a node with {@link Roo.data.Node#getPath}"
    },
    {
     "name": "setRootNode",
     "sig": "(Node node)",
     "type": "function",
     "desc": "Sets the root node for this tree."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.tree.TreeSorter": {
   "props": [
    {
     "name": "folderSort",
     "type": "Boolean",
     "desc": "True to sort leaf nodes under non leaf nodes",
     "memberOf": ""
    },
    {
     "name": "property",
     "type": "String",
     "desc": "The named attribute on the node to sort by (defaults to text)",
     "memberOf": ""
    },
    {
     "name": "dir",
     "type": "String",
     "desc": "The direction to sort (asc or desc) (defaults to asc)",
     "memberOf": ""
    },
    {
     "name": "leafAttr",
     "type": "String",
     "desc": "The attribute used to determine leaf nodes in folder sort (defaults to \"leaf\")",
     "memberOf": ""
    },
    {
     "name": "caseSensitive",
     "type": "Boolean",
     "desc": "true for case sensitive sort (defaults to false)",
     "memberOf": ""
    },
    {
     "name": "sortType",
     "type": "Function",
     "desc": "A custom \"casting\" function used to convert node values before sorting",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": []
  },
  "Roo.util": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.util.CSS": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "createStyleSheet",
     "sig": "(String|Object cssText, String id)",
     "type": "function",
     "desc": "Very simple dynamic creation of stylesheets from a text blob of rules.  The text will wrapped in a style\ntag and appended to the HEAD of the document."
    },
    {
     "name": "getRule",
     "sig": "(String/Array selector, Boolean refreshCache)",
     "type": "function",
     "desc": "Gets an an individual CSS rule by selector(s)"
    },
    {
     "name": "getRules",
     "sig": "(Boolean refreshCache)",
     "type": "function",
     "desc": "Gets all css rules for the document"
    },
    {
     "name": "refreshCache",
     "sig": "()",
     "type": "function",
     "desc": "Refresh the rule cache if you have dynamically added stylesheets"
    },
    {
     "name": "removeStyleSheet",
     "sig": "(String id)",
     "type": "function",
     "desc": "Removes a style or link tag by id"
    },
    {
     "name": "swapStyleSheet",
     "sig": "(String id, String url)",
     "type": "function",
     "desc": "Dynamically swaps an existing stylesheet reference for a new one"
    },
    {
     "name": "updateRule",
     "sig": "(String/Array selector, String property, String value)",
     "type": "function",
     "desc": "Updates a rule property"
    }
   ]
  },
  "Roo.util.ClickRepeater": {
   "props": [
    {
     "name": "el",
     "type": "String/HTMLElement/Element",
     "desc": "The element to act as a button.",
     "memberOf": ""
    },
    {
     "name": "delay",
     "type": "Number",
     "desc": "The initial delay before the repeating event begins firing.\nSimilar to an autorepeat key delay.",
     "memberOf": ""
    },
    {
     "name": "interval",
     "type": "Number",
     "desc": "The interval between firings of the \"click\" event. Default 10 ms.",
     "memberOf": ""
    },
    {
     "name": "pressClass",
     "type": "String",
     "desc": "A CSS class name to be applied to the element while pressed.",
     "memberOf": ""
    },
    {
     "name": "accelerate",
     "type": "Boolean",
     "desc": "True if autorepeating should start slowly and accelerate.\n          \"interval\" and \"delay\" are ignored. \"immediate\" is honored.",
     "memberOf": ""
    },
    {
     "name": "preventDefault",
     "type": "Boolean",
     "desc": "True to prevent the default click event",
     "memberOf": ""
    },
    {
     "name": "stopDefault",
     "type": "Boolean",
     "desc": "True to stop the default click event",
     "memberOf": ""
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "click",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires on a specified interval during the time the element is pressed."
    },
    {
     "name": "mousedown",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse button is depressed."
    },
    {
     "name": "mouseup",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires when the mouse key is released."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.util.DelayedTask": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.util.Format": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "capitalize",
     "sig": "(String value)",
     "type": "function",
     "desc": "Converts the first character only of a string to upper case"
    },
    {
     "name": "date",
     "sig": "(Mixed value, String format)",
     "type": "function",
     "desc": "Parse a value into a formatted date using the specified format pattern."
    },
    {
     "name": "dateRenderer",
     "sig": "(String format)",
     "type": "function",
     "desc": "Returns a date rendering function that can be reused to apply a date format multiple times efficiently"
    },
    {
     "name": "ellipsis",
     "sig": "(String value, Number length)",
     "type": "function",
     "desc": "Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length"
    },
    {
     "name": "htmlDecode",
     "sig": "(String value)",
     "type": "function",
     "desc": "Convert certain characters (&, <, >, and ') from their HTML character equivalents."
    },
    {
     "name": "htmlEncode",
     "sig": "(String value)",
     "type": "function",
     "desc": "Convert certain characters (&, <, >, and ') to their HTML character equivalents for literal display in web pages."
    },
    {
     "name": "lowercase",
     "sig": "(String value)",
     "type": "function",
     "desc": "Converts a string to all lower case letters"
    },
    {
     "name": "number",
     "sig": "(Number/String value, Number decimals)",
     "type": "function",
     "desc": "Format a number\neventually this should probably emulate php's number_format"
    },
    {
     "name": "stripTags",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Strips all HTML tags"
    },
    {
     "name": "substr",
     "sig": "(String value, Number start, Number length)",
     "type": "function",
     "desc": "Returns a substring from within an original string"
    },
    {
     "name": "toFixed",
     "sig": "(Number/String value, Number/String value)",
     "type": "function",
     "desc": "safer version of Math.toFixed..??/"
    },
    {
     "name": "trim",
     "sig": "(String value)",
     "type": "function",
     "desc": "Trims any whitespace from either side of a string"
    },
    {
     "name": "undef",
     "sig": "(Mixed value)",
     "type": "function",
     "desc": "Checks a reference and converts it to empty string if it is undefined"
    },
    {
     "name": "uppercase",
     "sig": "(String value)",
     "type": "function",
     "desc": "Converts a string to all upper case letters"
    },
    {
     "name": "usMoney",
     "sig": "(Number/String value)",
     "type": "function",
     "desc": "Format a number as US currency"
    }
   ]
  },
  "Roo.util.JSON": {
   "props": [],
   "events": [],
   "methods": []
  },
  "Roo.util.Math": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "abs",
     "sig": "()",
     "type": "function",
     "desc": "abs number"
    },
    {
     "name": "add",
     "sig": "(Object|Number value)",
     "type": "function",
     "desc": "Add number"
    },
    {
     "name": "compare",
     "sig": "(Object|Number value)",
     "type": "function",
     "desc": "Compare number"
    },
    {
     "name": "function toString() {\n    [native code]\n}",
     "sig": "()",
     "type": "function",
     "desc": "value of the number"
    },
    {
     "name": "function valueOf() {\n    [native code]\n}",
     "sig": "()",
     "type": "function",
     "desc": "value of thenumber"
    },
    {
     "name": "intPart",
     "sig": "()",
     "type": "function",
     "desc": "integer part of number"
    },
    {
     "name": "mod",
     "sig": "(Object|Number value)",
     "type": "function",
     "desc": "Modulus number"
    },
    {
     "name": "multiply",
     "sig": "(Object|Number value)",
     "type": "function",
     "desc": "Mulitply number"
    },
    {
     "name": "negate",
     "sig": "()",
     "type": "function",
     "desc": "negate number"
    },
    {
     "name": "pow",
     "sig": "(Object|Number value)",
     "type": "function",
     "desc": "To Power number"
    },
    {
     "name": "set",
     "sig": "(Object|Number value)",
     "type": "function",
     "desc": "Set number"
    },
    {
     "name": "subtract",
     "sig": "(Object|Number value)",
     "type": "function",
     "desc": "Subtract number"
    },
    {
     "name": "toFixed",
     "sig": "()",
     "type": "function",
     "desc": "value of the number at a fixed precission"
    }
   ]
  },
  "Roo.util.MixedCollection": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "add",
     "sig": "function (index, o, key)\n{\n\n}",
     "type": "function",
     "desc": "Fires when an item is added to the collection."
    },
    {
     "name": "clear",
     "sig": "function ()\n{\n\n}",
     "type": "function",
     "desc": "Fires when the collection is cleared."
    },
    {
     "name": "remove",
     "sig": "function (o, key)\n{\n\n}",
     "type": "function",
     "desc": "Fires when an item is removed from the collection."
    },
    {
     "name": "replace",
     "sig": "function (key, old, new)\n{\n\n}",
     "type": "function",
     "desc": "Fires when an item is replaced in the collection."
    }
   ],
   "methods": [
    {
     "name": "add",
     "sig": "(String key, Object o)",
     "type": "function",
     "desc": "Adds an item to the collection."
    },
    {
     "name": "addAll",
     "sig": "(Object/Array objs)",
     "type": "function",
     "desc": "Adds all elements of an Array or an Object to the collection."
    },
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "clear",
     "sig": "()",
     "type": "function",
     "desc": "Removes all items from the collection."
    },
    {
     "name": "clone",
     "sig": "()",
     "type": "function",
     "desc": "Creates a duplicate of this collection"
    },
    {
     "name": "contains",
     "sig": "(Object o)",
     "type": "function",
     "desc": "Returns true if the collection contains the passed Object as an item."
    },
    {
     "name": "containsKey",
     "sig": "(String key)",
     "type": "function",
     "desc": "Returns true if the collection contains the passed Object as a key."
    },
    {
     "name": "each",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Executes the specified function once for every item in the collection, passing each\nitem as the first and only parameter. returning false from the function will stop the iteration."
    },
    {
     "name": "eachKey",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Executes the specified function once for every key in the collection, passing each\nkey, and its associated item as the first two parameters."
    },
    {
     "name": "filter",
     "sig": "(String property, String/RegExp value)",
     "type": "function",
     "desc": "Filter the <i>objects</i> in this collection by a specific property. \nReturns a new collection that has been filtered."
    },
    {
     "name": "filterBy",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Filter by a function. * Returns a new collection that has been filtered.\nThe passed function will be called with each \nobject in the collection. If the function returns true, the value is included \notherwise it is filtered."
    },
    {
     "name": "find",
     "sig": "(Function fn, Object scope)",
     "type": "function",
     "desc": "Returns the first item in the collection which elicits a true return value from the\npassed selection function."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "first",
     "sig": "()",
     "type": "function",
     "desc": "Returns the first item in the collection."
    },
    {
     "name": "get",
     "sig": "(String/Number key)",
     "type": "function",
     "desc": "Returns the item associated with the passed key or index."
    },
    {
     "name": "getCount",
     "sig": "()",
     "type": "function",
     "desc": "Returns the number of items in the collection."
    },
    {
     "name": "getKey",
     "sig": "( o)",
     "type": "function",
     "desc": "MixedCollection has a generic way to fetch keys if you implement getKey.\n<pre><code>\n// normal way\nvar mc = new Roo.util.MixedCollection();\nmc.add(someEl.dom.id, someEl);\nmc.add(otherEl.dom.id, otherEl);\n//and so on\n\n// using getKey\nvar mc = new Roo.util.MixedCollection();\nmc.getKey = function(el){\n   return el.dom.id;\n};\nmc.add(someEl);\nmc.add(otherEl);\n\n// or via the constructor\nvar mc = new Roo.util.MixedCollection(false, function(el){\n   return el.dom.id;\n});\nmc.add(someEl);\nmc.add(otherEl);\n</code></pre>"
    },
    {
     "name": "getRange",
     "sig": "(Number startIndex, Number endIndex)",
     "type": "function",
     "desc": "Returns a range of items in this collection"
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "indexOf",
     "sig": "(Object o)",
     "type": "function",
     "desc": "Returns index within the collection of the passed Object."
    },
    {
     "name": "indexOfKey",
     "sig": "(String key)",
     "type": "function",
     "desc": "Returns index within the collection of the passed key."
    },
    {
     "name": "insert",
     "sig": "(Number index, String key, Object o)",
     "type": "function",
     "desc": "Inserts an item at the specified index in the collection."
    },
    {
     "name": "item",
     "sig": "(String/Number key)",
     "type": "function",
     "desc": "Returns the item associated with the passed key OR index. Key has priority over index."
    },
    {
     "name": "itemAt",
     "sig": "(Number index)",
     "type": "function",
     "desc": "Returns the item at the specified index."
    },
    {
     "name": "key",
     "sig": "(String/Number key)",
     "type": "function",
     "desc": "Returns the item associated with the passed key."
    },
    {
     "name": "keySort",
     "sig": "(String direction, Function fn)",
     "type": "function",
     "desc": "Sorts this collection by keys"
    },
    {
     "name": "last",
     "sig": "()",
     "type": "function",
     "desc": "Returns the last item in the collection."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "remove",
     "sig": "(Object o)",
     "type": "function",
     "desc": "Removed an item from the collection."
    },
    {
     "name": "removeAt",
     "sig": "(Number index)",
     "type": "function",
     "desc": "Remove an item from a specified index in the collection."
    },
    {
     "name": "removeKey",
     "sig": "(String key)",
     "type": "function",
     "desc": "Removed an item associated with the passed key fom the collection."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "replace",
     "sig": "(String key,  o)",
     "type": "function",
     "desc": "Replaces an item in the collection."
    },
    {
     "name": "sort",
     "sig": "(String direction, Function fn)",
     "type": "function",
     "desc": "Sorts this collection with the passed comparison function"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.util.Observable": {
   "props": [
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": ""
    }
   ],
   "events": [],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "Roo.util.TextMetrics": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "createInstance",
     "sig": "(String/HTMLElement el, Number fixedWidth)",
     "type": "function",
     "desc": "Return a unique TextMetrics instance that can be bound directly to an element and reused.  This reduces\nthe overhead of multiple calls to initialize the style properties on each measurement."
    },
    {
     "name": "measure",
     "sig": "(String/HTMLElement el, String text, Number fixedWidth)",
     "type": "function",
     "desc": "Measures the size of the specified text"
    }
   ]
  },
  "Roo.util.TextMetrics.Instance": {
   "props": [],
   "events": [],
   "methods": []
  },
  "String": {
   "props": [],
   "events": [],
   "methods": [
    {
     "name": "escape",
     "sig": "(String string)",
     "type": "function",
     "desc": "Escapes the passed string for ' and \\"
    },
    {
     "name": "format",
     "sig": "(String string, String value1, String value2)",
     "type": "function",
     "desc": "Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each\ntoken must be unique, and must increment in the format {0}, {1}, etc.  Example usage:\n<pre><code>\nvar cls = 'my-class', text = 'Some text';\nvar s = String.format('<div class=\"{0}\">{1}</div>', cls, text);\n// s now contains the string: '<div class=\"my-class\">Some text</div>'\n</code></pre>"
    },
    {
     "name": "leftPad",
     "sig": "(String string, Number size, String char)",
     "type": "function",
     "desc": "Pads the left side of a string with a specified character.  This is especially useful\nfor normalizing number and date strings.  Example usage:\n<pre><code>\nvar s = String.leftPad('123', 5, '0');\n// s now contains the string: '00123'\n</code></pre>"
    },
    {
     "name": "toggle",
     "sig": "(String value, String other)",
     "type": "function",
     "desc": "Utility function that allows you to easily switch a string between two alternating values.  The passed value\nis compared to the current string, and if they are equal, the other value that was passed in is returned.  If\nthey are already different, the first value passed in is returned.  Note that this method returns the new value\nbut does not change the current string.\n<pre><code>\n// alternate sort directions\nsort = sort.toggle('ASC', 'DESC');\n\n// instead of conditional logic:\nsort = (sort == 'ASC' ? 'DESC' : 'ASC');\n</code></pre>"
    }
   ]
  },
  "_calls": {
   "props": [
    {
     "name": "cls",
     "type": "String",
     "desc": "class of the element",
     "memberOf": ""
    },
    {
     "name": "style",
     "type": "String",
     "desc": "any extra css",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "xattr",
     "type": "Object",
     "desc": "extra attributes to add to 'element' (used by builder to store stuff.)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "can_build_overlaid",
     "type": "Boolean",
     "desc": "True if element can be rebuild from a HTML page",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "dataId",
     "type": "string",
     "desc": "cutomer id",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "name",
     "type": "string",
     "desc": "Specifies name attribute",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "tooltip",
     "type": "string",
     "desc": "Text for the tooltip",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "container_method",
     "type": "string",
     "desc": "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
     "memberOf": "Roo.bootstrap.Component"
    },
    {
     "name": "disableClass",
     "type": "String",
     "desc": "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
     "memberOf": "Roo.Component"
    },
    {
     "name": "allowDomMove",
     "type": "Boolean",
     "desc": "Whether the component can move the Dom node when rendering (defaults to true).",
     "memberOf": "Roo.Component"
    },
    {
     "name": "hideMode",
     "type": "String",
     "desc": "How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".",
     "memberOf": "Roo.Component",
     "optvals": [
      "display",
      "visibility"
     ]
    },
    {
     "name": "actionMode",
     "type": "String",
     "desc": "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
     "memberOf": "Roo.Component"
    },
    {
     "name": "listeners",
     "type": "Object",
     "desc": "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
     "memberOf": "Roo.util.Observable"
    }
   ],
   "events": [
    {
     "name": "beforedestroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is destroyed. Return false to stop the destroy."
    },
    {
     "name": "beforehide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is hidden. Return false to stop the hide."
    },
    {
     "name": "beforerender",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is rendered. Return false to stop the render."
    },
    {
     "name": "beforeshow",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires before the component is shown.  Return false to stop the show."
    },
    {
     "name": "destroy",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is destroyed."
    },
    {
     "name": "disable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is disabled."
    },
    {
     "name": "enable",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is enabled."
    },
    {
     "name": "hide",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is hidden."
    },
    {
     "name": "render",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is rendered."
    },
    {
     "name": "show",
     "sig": "function (_self)\n{\n\n}",
     "type": "function",
     "desc": "Fires after the component is shown."
    }
   ],
   "methods": [
    {
     "name": "addEvents",
     "sig": "(Object object)",
     "type": "function",
     "desc": "Used to define events on this Observable"
    },
    {
     "name": "addListener",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this component"
    },
    {
     "name": "capture",
     "sig": "(Observable o, Function fn, Object scope)",
     "type": "function",
     "desc": "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire."
    },
    {
     "name": "destroy",
     "sig": "()",
     "type": "function",
     "desc": "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}."
    },
    {
     "name": "disable",
     "sig": "()",
     "type": "function",
     "desc": "Disable this component."
    },
    {
     "name": "enable",
     "sig": "()",
     "type": "function",
     "desc": "Enable this component."
    },
    {
     "name": "fireEvent",
     "sig": "(String eventName, Object... args)",
     "type": "function",
     "desc": "Fires the specified event with the passed parameters (minus the event name)."
    },
    {
     "name": "focus",
     "sig": "(Boolean selectText)",
     "type": "function",
     "desc": "Try to focus this component."
    },
    {
     "name": "getChildContainer",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to add children to"
    },
    {
     "name": "getEl",
     "sig": "()",
     "type": "function",
     "desc": "Returns the underlying {@link Roo.Element}."
    },
    {
     "name": "getId",
     "sig": "()",
     "type": "function",
     "desc": "Returns the id of this component."
    },
    {
     "name": "hasListener",
     "sig": "(String eventName)",
     "type": "function",
     "desc": "Checks to see if this object has any listeners for a specified event"
    },
    {
     "name": "hide",
     "sig": "()",
     "type": "function",
     "desc": "Hide this component."
    },
    {
     "name": "initEvents",
     "sig": "()",
     "type": "function",
     "desc": "Initialize Events for the element"
    },
    {
     "name": "isVisible",
     "sig": "()",
     "type": "function",
     "desc": "Returns true if this component is visible."
    },
    {
     "name": "on",
     "sig": "(String eventName, Function handler, Object scope, Object options)",
     "type": "function",
     "desc": "Appends an event handler to this element (shorthand for addListener)"
    },
    {
     "name": "purgeListeners",
     "sig": "()",
     "type": "function",
     "desc": "Removes all listeners for this object"
    },
    {
     "name": "releaseCapture",
     "sig": "(Observable o)",
     "type": "function",
     "desc": "Removes <b>all</b> added captures from the Observable."
    },
    {
     "name": "removeListener",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener"
    },
    {
     "name": "render",
     "sig": "(String/HTMLElement/Element container)",
     "type": "function",
     "desc": "If this is a lazy rendering component, render it to its container element."
    },
    {
     "name": "setDisabled",
     "sig": "(Boolean disabled)",
     "type": "function",
     "desc": "Convenience function for setting disabled/enabled by boolean."
    },
    {
     "name": "setVisible",
     "sig": "(Boolean visible)",
     "type": "function",
     "desc": "Convenience function to hide or show this component by boolean."
    },
    {
     "name": "show",
     "sig": "()",
     "type": "function",
     "desc": "Show this component."
    },
    {
     "name": "tooltipEl",
     "sig": "()",
     "type": "function",
     "desc": "Fetch the element to display the tooltip on."
    },
    {
     "name": "un",
     "sig": "(String eventName, Function handler, Object scope)",
     "type": "function",
     "desc": "Removes a listener (shorthand for removeListener)"
    }
   ]
  },
  "this": {
   "props": [],
   "events": [],
   "methods": []
  }
 }
}