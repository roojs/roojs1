{
  "Array" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "equals",
        "type" : "function",
        "desc" : "equals",
        "sig" : "(o)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "indexOf",
        "type" : "function",
        "desc" : "Checks whether or not the specified object exists in the array.",
        "sig" : "(o)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "map",
        "type" : "function",
        "desc" : "Map (JS 1.6 compatibility)",
        "sig" : "(function() {\n\n})",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Removes the specified object from the array.  If the object is not found nothing happens.",
        "sig" : "(o)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Date" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Provides a convenient method of performing basic date arithmetic.  This method\ndoes not modify the Date instance being called - it creates and returns\na new Date instance containing the resulting date value.\n\nExamples:\n<pre><code>\n//Basic usage:\nvar dt = new Date('10/29/2006').add(Date.DAY, 5);\ndocument.write(dt); //returns 'Fri Oct 06 2006 00:00:00'\n\n//Negative values will subtract correctly:\nvar dt2 = new Date('10/1/2006').add(Date.DAY, -5);\ndocument.write(dt2); //returns 'Tue Sep 26 2006 00:00:00'\n\n//You can even chain several calls together in one line!\nvar dt3 = new Date('10/1/2006').add(Date.DAY, 5).add(Date.HOUR, 8).add(Date.MINUTE, -30);\ndocument.write(dt3); //returns 'Fri Oct 06 2006 07:30:00'\n </code></pre>",
        "sig" : "(interval, value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "clearTime",
        "type" : "function",
        "desc" : "Clears any time information from this date",
        "sig" : "(clone)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "clone",
        "type" : "function",
        "desc" : "Creates and returns a new Date instance with the exact same date value as the called instance.\nDates are copied and passed by reference, so if a copied date variable is modified later, the original\nvariable will also be changed.  When the intention is to create a new variable that will not\nmodify the original instance, you should create a clone.\n\nExample of correctly cloning a date:\n<pre><code>\n//wrong way:\nvar orig = new Date('10/1/2006');\nvar copy = orig;\ncopy.setDate(5);\ndocument.write(orig);  //returns 'Thu Oct 05 2006'!\n\n//correct way:\nvar orig = new Date('10/1/2006');\nvar copy = orig.clone();\ncopy.setDate(5);\ndocument.write(orig);  //returns 'Thu Oct 01 2006'\n</code></pre>",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "format",
        "type" : "function",
        "desc" : "Formats a date given the supplied format string",
        "sig" : "(format)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getDayOfYear",
        "type" : "function",
        "desc" : "Get the numeric day number of the year, adjusted for leap year.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getDaysInMonth",
        "type" : "function",
        "desc" : "Get the number of days in the current month, adjusted for leap year.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getElapsed",
        "type" : "function",
        "desc" : "Returns the number of milliseconds between this date and date",
        "sig" : "(date)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getFirstDateOfMonth",
        "type" : "function",
        "desc" : "Get the first date of this date's month",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getFirstDayOfMonth",
        "type" : "function",
        "desc" : "Get the first day of the current month, adjusted for leap year.  The returned value\nis the numeric day index within the week (0-6) which can be used in conjunction with\nthe {@link #monthNames} array to retrieve the textual day name.\nExample:\n<pre><code>\nvar dt = new Date('1/10/2007');\ndocument.write(Date.dayNames[dt.getFirstDayOfMonth()]); //output: 'Monday'\n</code></pre>",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getGMTColonOffset",
        "type" : "function",
        "desc" : "Get the offset from GMT of the current date (equivalent to the format specifier 'P').",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getGMTOffset",
        "type" : "function",
        "desc" : "Get the offset from GMT of the current date (equivalent to the format specifier 'O').",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getLastDateOfMonth",
        "type" : "function",
        "desc" : "Get the last date of this date's month",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getLastDayOfMonth",
        "type" : "function",
        "desc" : "Get the last day of the current month, adjusted for leap year.  The returned value\nis the numeric day index within the week (0-6) which can be used in conjunction with\nthe {@link #monthNames} array to retrieve the textual day name.\nExample:\n<pre><code>\nvar dt = new Date('1/10/2007');\ndocument.write(Date.dayNames[dt.getLastDayOfMonth()]); //output: 'Wednesday'\n</code></pre>",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getSuffix",
        "type" : "function",
        "desc" : "Get the English ordinal suffix of the current day (equivalent to the format specifier 'S').",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTimezone",
        "type" : "function",
        "desc" : "Get the timezone abbreviation of the current date (equivalent to the format specifier 'T').",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getWeekOfYear",
        "type" : "function",
        "desc" : "Get the string representation of the numeric week number of the year\n(equivalent to the format specifier 'W').",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isLeapYear",
        "type" : "function",
        "desc" : "Whether or not the current date is in a leap year.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "parseDate",
        "type" : "function",
        "desc" : "Parses the passed string using the specified format. Note that this function expects dates in normal calendar\nformat, meaning that months are 1-based (1 = January) and not zero-based like in JavaScript dates.  Any part of\nthe date format that is not specified will default to the current date value for that part.  Time parts can also\nbe specified, but default to 0.  Keep in mind that the input date string must precisely match the specified format\nstring or the parse operation will fail.\nExample Usage:\n<pre><code>\n//dt = Fri May 25 2007 (current date)\nvar dt = new Date();\n\n//dt = Thu May 25 2006 (today's month/day in 2006)\ndt = Date.parseDate(\"2006\", \"Y\");\n\n//dt = Sun Jan 15 2006 (all date parts specified)\ndt = Date.parseDate(\"2006-1-15\", \"Y-m-d\");\n\n//dt = Sun Jan 15 2006 15:20:01 GMT-0600 (CST)\ndt = Date.parseDate(\"2006-1-15 3:20:01 PM\", \"Y-m-d h:i:s A\" );\n</code></pre>",
        "sig" : "(input, format)",
        "static" : true,
        "memberOf" : ""
      }
    ]
  },
  "Function" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "createCallback",
        "type" : "function",
        "desc" : "Creates a callback that passes arguments[0], arguments[1], arguments[2], ...\nCall directly on any function. Example: <code>myFunction.createCallback(myarg, myarg2)</code>\nWill create a function that is bound to those 2 args.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "createDelegate",
        "type" : "function",
        "desc" : "Creates a delegate (callback) that sets the scope to obj.\nCall directly on any function. Example: <code>this.myFunction.createDelegate(this)</code>\nWill create a function that is automatically scoped to this.",
        "sig" : "(obj, args, appendArgs)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "createInterceptor",
        "type" : "function",
        "desc" : "Creates an interceptor function. The passed fcn is called before the original one. If it returns false, the original one is not called.\nThe resulting function returns the results of the original function.\nThe passed fcn is called with the parameters of the original function.",
        "sig" : "(fcn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "createSequence",
        "type" : "function",
        "desc" : "Create a combined function call sequence of the original function + the passed function.\nThe resulting function returns the results of the original function.\nThe passed fcn is called with the parameters of the original function",
        "sig" : "(fcn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "defer",
        "type" : "function",
        "desc" : "Calls this function after the number of millseconds specified.",
        "sig" : "(millis, obj, args, appendArgs)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Number" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "constrain",
        "type" : "function",
        "desc" : "Checks whether or not the current number is within a desired range.  If the number is already within the\nrange it is returned, otherwise the min or max value is returned depending on which side of the range is\nexceeded.  Note that this method returns the constrained value but does not change the current number.",
        "sig" : "(min, max)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "addBehaviors",
        "type" : "function",
        "desc" : "Applies event listeners to elements by selectors when the document is ready.\nThe event name is specified with an @ suffix.\n<pre><code>\nRoo.addBehaviors({\n   // add a listener for click on all anchors in element with id foo\n   '#foo a@click' : function(e, t){\n       // do something\n   },\n\n   // add the same listener to multiple selectors (separated by comma BEFORE the @)\n   '#foo a, #bar span.some-class@mouseover' : function(){\n       // do something\n   }\n});\n</code></pre>",
        "sig" : "(obj)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "apply",
        "type" : "function",
        "desc" : "Copies all the properties of config to obj.",
        "sig" : "(obj, config, defaults)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "applyIf",
        "type" : "function",
        "desc" : "Copies all the properties of config to obj if they don't already exist.",
        "sig" : "(obj, config)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "decode",
        "type" : "function",
        "desc" : "Shorthand for {@link Roo.util.JSON#decode}",
        "sig" : "()\n{\n\n}",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "each",
        "type" : "function",
        "desc" : "Iterates an array calling the passed function with each item, stopping if your function returns false. If the\npassed array is not really an array, your function is called once with it.\nThe supplied function is called with (Object item, Number index, Array allItems).",
        "sig" : "(array, fn, scope)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "encode",
        "type" : "function",
        "desc" : "Shorthand for {@link Roo.util.JSON#encode}",
        "sig" : "()\n{\n\n}",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "encodeURIComponent",
        "type" : "function",
        "desc" : "Safe version of encodeURIComponent",
        "sig" : "(data)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "escapeRe",
        "type" : "function",
        "desc" : "Escapes the passed string for use in a regular expression",
        "sig" : "(str)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "extend",
        "type" : "function",
        "desc" : "Extends one class with another class and optionally overrides members with the passed literal. This class\nalso adds the function \"override()\" to the class that can be used to override\nmembers on an instance.",
        "sig" : "(subclass, superclass, overrides)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "factory",
        "type" : "function",
        "desc" : "Creates namespaces to be used for scoping variables and classes so that they are not global.  Usage:\n<pre><code>\nRoo.factory({ xns: Roo.data, xtype : 'Store', .....});\nRoo.factory(conf, Roo.data);\n</code></pre>",
        "sig" : "(classname, namespace)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "fly",
        "type" : "function",
        "desc" : "Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -\nthe dom node can be overwritten by other code.\nShorthand of {@link Roo.Element#fly}",
        "sig" : "(el, named)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "get",
        "type" : "function",
        "desc" : "Static method to retrieve Element objects. Uses simple caching to consistently return the same object.\nAutomatically fixes if an object was recreated with the same id via AJAX or DOM.\nShorthand of {@link Roo.Element#get}",
        "sig" : "(el)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "getCmp",
        "type" : "function",
        "desc" : "Shorthand for {@link Roo.ComponentMgr#get}",
        "sig" : "(id)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "getDom",
        "type" : "function",
        "desc" : "Return the dom node for the passed string (id), dom node, or Roo.Element",
        "sig" : "(el)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "id",
        "type" : "function",
        "desc" : "Generates unique ids. If the element already has an id, it is unchanged",
        "sig" : "(el, prefix)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "isEmpty",
        "type" : "function",
        "desc" : "Returns true if the passed value is null, undefined or an empty string (optional).",
        "sig" : "(value, allowBlank)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "onReady",
        "type" : "function",
        "desc" : "Fires when the document is ready (before onload and before images are loaded).  Shorthand of {@link Roo.EventManager#onDocumentReady}.",
        "sig" : "(fn, scope, override)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "override",
        "type" : "function",
        "desc" : "Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.\nUsage:<pre><code>\nRoo.override(MyClass, {\n    newMethod1: function(){\n        // etc.\n    },\n    newMethod2: function(foo){\n        // etc.\n    }\n});\n </code></pre>",
        "sig" : "(origclass, overrides)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "query",
        "type" : "function",
        "desc" : "Selects an array of DOM nodes by CSS/XPath selector. Shorthand of {@link Roo.DomQuery#select}",
        "sig" : "(path, root)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Selects elements based on the passed CSS selector to enable working on them as 1.",
        "sig" : "(selector, unique, root)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "selectNode",
        "type" : "function",
        "desc" : "Selects a single element as a Roo Element\nThis is about as close as you can get to jQuery's $('do crazy stuff')",
        "sig" : "(selector, root)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "type",
        "type" : "function",
        "desc" : "Returns the type of object that is passed in. If the object passed in is null or undefined it\nreturn false otherwise it returns one of the following values:<ul>\n<li><b>string</b>: If the object passed is a string</li>\n<li><b>number</b>: If the object passed is a number</li>\n<li><b>boolean</b>: If the object passed is a boolean value</li>\n<li><b>function</b>: If the object passed is a function reference</li>\n<li><b>object</b>: If the object passed is an object</li>\n<li><b>array</b>: If the object passed is an array</li>\n<li><b>regexp</b>: If the object passed is a regular expression</li>\n<li><b>element</b>: If the object passed is a DOM Element</li>\n<li><b>nodelist</b>: If the object passed is a DOM NodeList</li>\n<li><b>textnode</b>: If the object passed is a DOM text node and contains something other than whitespace</li>\n<li><b>whitespace</b>: If the object passed is a DOM text node and contains only whitespace</li>",
        "sig" : "(object)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "urlDecode",
        "type" : "function",
        "desc" : "Takes an encoded URL and and converts it to an object. e.g. Roo.urlDecode(\"foo=1&bar=2\"); would return {foo: 1, bar: 2} or Roo.urlDecode(\"foo=1&bar=2&bar=3&bar=4\", true); would return {foo: 1, bar: [2, 3, 4]}.",
        "sig" : "(string, overwrite)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "urlEncode",
        "type" : "function",
        "desc" : "Takes an object and converts it to an encoded URL. e.g. Roo.urlEncode({foo: 1, bar: 2}); would return \"foo=1&bar=2\".  Optionally, property values can be arrays, instead of keys and the resulting string that's returned will contain a name/value pair for each array value.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : ""
      }
    ]
  },
  "Roo.Ajax" : {
    "props" : [
      {
        "name" : "autoAbort",
        "type" : "Boolean",
        "desc" : "(Optional) Whether a new request should abort any pending requests. (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "defaultHeaders",
        "type" : "Object",
        "desc" : "An object containing request headers which are added to each request made by this object. (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "disableCaching",
        "type" : "Boolean",
        "desc" : "(Optional)   True to add a unique cache-buster param to GET requests. (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "extraParams",
        "type" : "Object",
        "desc" : "An object containing properties which are used as extra parameters to each request made by this object. (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "method",
        "type" : "String",
        "desc" : "(Optional)  The default HTTP method to be used for requests. (defaults to undefined; if not set but parms are present will use POST, otherwise GET)",
        "memberOf" : ""
      },
      {
        "name" : "timeout",
        "type" : "Number",
        "desc" : "(Optional) The timeout in milliseconds to be used for requests. (defaults to 30000)",
        "memberOf" : ""
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "The default URL to be used for requests to the server. (defaults to undefined)",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforerequest",
        "type" : "function",
        "desc" : "Fires before a network request is made to retrieve a data object.",
        "sig" : "function (conn, options)\n{\n\n}",
        "memberOf" : "Roo.data.Connection"
      },
      {
        "name" : "requestcomplete",
        "type" : "function",
        "desc" : "Fires if the request was successfully completed.",
        "sig" : "function (conn, response, options)\n{\n\n}",
        "memberOf" : "Roo.data.Connection"
      },
      {
        "name" : "requestexception",
        "type" : "function",
        "desc" : "Fires if an error HTTP status was returned from the server.\nSee {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html} for details of HTTP status codes.",
        "sig" : "function (conn, response, options)\n{\n\n}",
        "memberOf" : "Roo.data.Connection"
      }
    ],
    "methods" : [
      {
        "name" : "abort",
        "type" : "function",
        "desc" : "Aborts any outstanding request.",
        "sig" : "(transactionId)",
        "static" : false,
        "memberOf" : "Roo.data.Connection"
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isLoading",
        "type" : "function",
        "desc" : "Determine whether this object has a request outstanding.",
        "sig" : "(transactionId)",
        "static" : false,
        "memberOf" : "Roo.data.Connection"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "request",
        "type" : "function",
        "desc" : "Sends an HTTP request to a remote server.",
        "sig" : "(options)",
        "static" : false,
        "memberOf" : "Roo.data.Connection"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.BasicDialog" : {
    "props" : [
      {
        "name" : "animateTarget",
        "type" : "String/Element",
        "desc" : "Id or element from which the dialog should animate while opening\n(defaults to null with no animation)",
        "memberOf" : ""
      },
      {
        "name" : "autoCreate",
        "type" : "Boolean/DomHelper",
        "desc" : "True to auto create from scratch, or using a DomHelper Object (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "autoScroll",
        "type" : "Boolean",
        "desc" : "True to allow the dialog body contents to overflow and display scrollbars (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "autoTabs",
        "type" : "Boolean",
        "desc" : "If true, all elements with class 'x-dlg-tab' will get automatically converted to tabs (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "buttonAlign",
        "type" : "String",
        "desc" : "Valid values are \"left,\" \"center\" and \"right\" (defaults to \"right\")",
        "memberOf" : ""
      },
      {
        "name" : "buttons",
        "type" : "Array",
        "desc" : "Array of buttons",
        "memberOf" : ""
      },
      {
        "name" : "closable",
        "type" : "Boolean",
        "desc" : "False to remove the built-in top-right corner close button (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "collapsible",
        "type" : "Boolean",
        "desc" : "False to remove the built-in top-right corner collapse button (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "constraintoviewport",
        "type" : "Boolean",
        "desc" : "True to keep the dialog constrained within the visible viewport boundaries (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "draggable",
        "type" : "Boolean",
        "desc" : "False to disable dragging of the dialog within the viewport (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "fixedcenter",
        "type" : "Boolean",
        "desc" : "True to ensure that anytime the dialog is shown or resized it gets centered (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "Height of the dialog in pixels (can also be set via CSS).  Determined by browser if unspecified.",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "minButtonWidth",
        "type" : "Number",
        "desc" : "Minimum width of all dialog buttons (defaults to 75)",
        "memberOf" : ""
      },
      {
        "name" : "minHeight",
        "type" : "Number",
        "desc" : "The minimum allowable height for a resizable dialog (defaults to 80)",
        "memberOf" : ""
      },
      {
        "name" : "minWidth",
        "type" : "Number",
        "desc" : "The minimum allowable width for a resizable dialog (defaults to 200)",
        "memberOf" : ""
      },
      {
        "name" : "modal",
        "type" : "Boolean",
        "desc" : "True to show the dialog modally, preventing user interaction with the rest of the page (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "proxyDrag",
        "type" : "Boolean",
        "desc" : "True to drag a lightweight proxy element rather than the dialog itself, used when\ndraggable = true (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "resizable",
        "type" : "Boolean",
        "desc" : "False to disable manual dialog resizing (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "resizeHandles",
        "type" : "String",
        "desc" : "Which resize handles to display - see the {@link Roo.Resizable} handles config\nproperty for valid values (defaults to 'all')",
        "memberOf" : ""
      },
      {
        "name" : "shadow",
        "type" : "Boolean/String",
        "desc" : "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right\nshadow (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "shadowOffset",
        "type" : "Number",
        "desc" : "The number of pixels to offset the shadow if displayed (defaults to 5)",
        "memberOf" : ""
      },
      {
        "name" : "shim",
        "type" : "Boolean",
        "desc" : "True to create an iframe shim that prevents selects from showing through (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "syncHeightBeforeShow",
        "type" : "Boolean",
        "desc" : "True to cause the dimensions to be recalculated before the dialog is shown (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "tabTag",
        "type" : "String",
        "desc" : "The tag name of tab elements, used when autoTabs = true (defaults to 'div')",
        "memberOf" : ""
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "Default text to display in the title bar (defaults to null)",
        "memberOf" : ""
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "Width of the dialog in pixels (can also be set via CSS).  Determined by browser if unspecified.",
        "memberOf" : ""
      },
      {
        "name" : "x",
        "type" : "Number",
        "desc" : "The default left page coordinate of the dialog (defaults to center screen)",
        "memberOf" : ""
      },
      {
        "name" : "y",
        "type" : "Number",
        "desc" : "The default top page coordinate of the dialog (defaults to center screen)",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before this dialog is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before this dialog is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires when this dialog is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "keydown",
        "type" : "function",
        "desc" : "Fires when a key is pressed",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires when this dialog is moved by the user.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires when this dialog is resized by the user.",
        "sig" : "function (_self, width, height)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires when this dialog is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addButton",
        "type" : "function",
        "desc" : "Adds a button to the footer section of the dialog.",
        "sig" : "(config, handler, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addKeyListener",
        "type" : "function",
        "desc" : "Adds a key listener for when this dialog is displayed.  This allows you to hook in a function that will be\nexecuted in response to a particular key being pressed while the dialog is active.",
        "sig" : "(key, fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "alignTo",
        "type" : "function",
        "desc" : "Aligns the dialog to the specified element",
        "sig" : "(element, position, offsets)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "anchorTo",
        "type" : "function",
        "desc" : "Anchors an element to another element and realigns it when the window is resized.",
        "sig" : "(element, position, offsets, monitorScroll)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "center",
        "type" : "function",
        "desc" : "Centers this dialog in the viewport",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Collapses the dialog to its minimized state (only the title bar is visible).\nEquivalent to the user clicking the collapse dialog button.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this dialog and all its supporting elements (including any tabs, shim,\nshadow, proxy, mask, etc.)  Also removes all event listeners.",
        "sig" : "(removeEl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expands a collapsed dialog back to its normal state.  Equivalent to the user\nclicking the expand dialog button.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Focuses the dialog.  If a defaultButton is set, it will receive focus, otherwise the\ndialog itself will receive focus.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the element for this dialog",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTabs",
        "type" : "function",
        "desc" : "Returns the TabPanel component (creates it if it doesn't exist).\nNote: If you wish to simply check for the existence of tabs without creating them,\ncheck for a null 'tabs' property.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides the dialog.",
        "sig" : "(callback)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "initTabs",
        "type" : "function",
        "desc" : "Reinitializes the tabs component, clearing out old tabs and finding new ones.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if the dialog is visible",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "moveTo",
        "type" : "function",
        "desc" : "Moves the dialog's top-left corner to the specified point",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resizeTo",
        "type" : "function",
        "desc" : "Resizes the dialog.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "restoreState",
        "type" : "function",
        "desc" : "Restores the previous state of the dialog if Roo.state is configured.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setContentSize",
        "type" : "function",
        "desc" : "Resizes the dialog to fit the specified content size.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDefaultButton",
        "type" : "function",
        "desc" : "Sets the default button to be focused when the dialog is displayed.",
        "sig" : "(btn)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setTitle",
        "type" : "function",
        "desc" : "Sets the dialog title text",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Shows the dialog.",
        "sig" : "(animateTarget)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "toBack",
        "type" : "function",
        "desc" : "Sends this dialog to the back (under) of any other visible dialogs",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "toFront",
        "type" : "function",
        "desc" : "Brings this dialog to the front of any other visible dialogs",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.BasicLayoutRegion" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "beforecollapse",
        "type" : "function",
        "desc" : "Fires when this region before collapse.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeremove",
        "type" : "function",
        "desc" : "Fires before a panel is removed (or closed). To cancel the removal set \"e.cancel = true\" on the event argument.",
        "sig" : "function (_self, panel, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "collapsed",
        "type" : "function",
        "desc" : "Fires when this region is collapsed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "expanded",
        "type" : "function",
        "desc" : "Fires when this region is expanded.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "invalidated",
        "type" : "function",
        "desc" : "Fires when the layout for this region is changed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "panelactivated",
        "type" : "function",
        "desc" : "Fires when a panel is activated.",
        "sig" : "function (_self, panel)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "paneladded",
        "type" : "function",
        "desc" : "Fires when a panel is added.",
        "sig" : "function (_self, panel)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "panelremoved",
        "type" : "function",
        "desc" : "Fires when a panel is removed.",
        "sig" : "function (_self, panel)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "resized",
        "type" : "function",
        "desc" : "Fires when the user resizes this region.",
        "sig" : "function (_self, newSize)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "slidehide",
        "type" : "function",
        "desc" : "Fires when this region slides out of view.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "slideshow",
        "type" : "function",
        "desc" : "Fires when this region is slid into view.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "visibilitychange",
        "type" : "function",
        "desc" : "Fires when this region is shown or hidden",
        "sig" : "function (_self, visibility)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Add the passed ContentPanel(s)",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getActivePanel",
        "type" : "function",
        "desc" : "Get the active panel for this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the container element for this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getPanel",
        "type" : "function",
        "desc" : "Returns the panel specified or null if it's not in this region.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Returns this regions position (north/south/east/west/center).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hasPanel",
        "type" : "function",
        "desc" : "Returns true if the panel is in this region.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this region is currently visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Removes the specified panel. If preservePanel is not true (either here or in the config), the panel is destroyed.",
        "sig" : "(panel, preservePanel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resizeTo",
        "type" : "function",
        "desc" : "Resizes the region to the specified size. For vertical regions (west, east) this adjusts \nthe width, for horizontal (north, south) the height.",
        "sig" : "(newSize)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "showPanel",
        "type" : "function",
        "desc" : "Show the specified panel.",
        "sig" : "(panelId)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.BorderLayout" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "layout",
        "type" : "function",
        "desc" : "Fires when a layout is performed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "regioncollapsed",
        "type" : "function",
        "desc" : "Fires when a region is collapsed.",
        "sig" : "function (region)\n{\n\n}",
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "regionexpanded",
        "type" : "function",
        "desc" : "Fires when a region is expanded.",
        "sig" : "function (region)\n{\n\n}",
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "regionresized",
        "type" : "function",
        "desc" : "Fires when the user resizes a region.",
        "sig" : "function (region, newSize)\n{\n\n}",
        "memberOf" : "Roo.LayoutManager"
      }
    ],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Adds a ContentPanel (or subclass) to this layout.",
        "sig" : "(target, panel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addRegion",
        "type" : "function",
        "desc" : "Creates and adds a new region if it doesn't already exist.",
        "sig" : "(target, config)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addxtype",
        "type" : "function",
        "desc" : "Adds a xtype elements to the layout.\n<pre><code>\n\nlayout.addxtype({\n       xtype : 'ContentPanel',\n       region: 'west',\n       items: [ .... ]\n   }\n);\n\nlayout.addxtype({\n        xtype : 'NestedLayoutPanel',\n        region: 'west',\n        layout: {\n           center: { },\n           west: { }   \n        },\n        items : [ ... list of content panels or nested layout panels.. ]\n   }\n);\n</code></pre>",
        "sig" : "(cfg)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "batchAdd",
        "type" : "function",
        "desc" : "Adds a batch of multiple ContentPanels dynamically by passing a special regions config object.  This config\nobject should contain properties for each region to add ContentPanels to, and each property's value should be\na valid ContentPanel config object.  Example:\n<pre><code>\n// Create the main layout\nvar layout = new Roo.BorderLayout('main-ct', {\n    west: {\n        split:true,\n        minSize: 175,\n        titlebar: true\n    },\n    center: {\n        title:'Components'\n    }\n}, 'main-ct');\n\n// Create and add multiple ContentPanels at once via configs\nlayout.batchAdd({\n   west: {\n       id: 'source-files',\n       autoCreate:true,\n       title:'Ext Source Files',\n       autoScroll:true,\n       fitToFrame:true\n   },\n   center : {\n       el: cview,\n       autoScroll:true,\n       fitToFrame:true,\n       toolbar: tb,\n       resizeEl:'cbody'\n   }\n});\n</code></pre>",
        "sig" : "(regions)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "beginUpdate",
        "type" : "function",
        "desc" : "Suspend the LayoutManager from doing auto-layouts while\nmaking multiple add or remove calls",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "create",
        "type" : "function",
        "desc" : "Shortcut for creating a new BorderLayout object and adding one or more ContentPanels to it in a single step, handling\nthe beginUpdate and endUpdate calls internally.  The key to this method is the <b>panels</b> property that can be\nprovided with each region config, which allows you to add ContentPanel configs in addition to the region configs\nduring creation.  The following code is equivalent to the constructor-based example at the beginning of this class:\n<pre><code>\n// shorthand\nvar CP = Roo.ContentPanel;\n\nvar layout = Roo.BorderLayout.create({\n    north: {\n        initialSize: 25,\n        titlebar: false,\n        panels: [new CP(\"north\", \"North\")]\n    },\n    west: {\n        split:true,\n        initialSize: 200,\n        minSize: 175,\n        maxSize: 400,\n        titlebar: true,\n        collapsible: true,\n        panels: [new CP(\"west\", {title: \"West\"})]\n    },\n    east: {\n        split:true,\n        initialSize: 202,\n        minSize: 175,\n        maxSize: 400,\n        titlebar: true,\n        collapsible: true,\n        panels: [new CP(\"autoTabs\", {title: \"Auto Tabs\", closable: true})]\n    },\n    south: {\n        split:true,\n        initialSize: 100,\n        minSize: 100,\n        maxSize: 200,\n        titlebar: true,\n        collapsible: true,\n        panels: [new CP(\"south\", {title: \"South\", closable: true})]\n    },\n    center: {\n        titlebar: true,\n        autoScroll:true,\n        resizeTabs: true,\n        minTabWidth: 50,\n        preferredTabWidth: 150,\n        panels: [\n            new CP(\"center1\", {title: \"Close Me\", closable: true}),\n            new CP(\"center2\", {title: \"Center Panel\", closable: false})\n        ]\n    }\n}, document.body);\n\nlayout.getRegion(\"center\").showPanel(\"center1\");\n</code></pre>",
        "sig" : "(config, targetEl)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "endUpdate",
        "type" : "function",
        "desc" : "Restore auto-layouts and optionally disable the manager from performing a layout",
        "sig" : "(noLayout)",
        "static" : false,
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "findPanel",
        "type" : "function",
        "desc" : "Searches all regions for a panel with the specified id",
        "sig" : "(panelId)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the Element this layout is bound to.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "getRegion",
        "type" : "function",
        "desc" : "Returns the specified region.",
        "sig" : "(target)",
        "static" : false,
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "getViewSize",
        "type" : "function",
        "desc" : "Returns the size of the current view. This method normalizes document.body and element embedded layouts and\nperforms box-model adjustments.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isUpdating",
        "type" : "function",
        "desc" : "Returns true if this layout is currently being updated",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "layout",
        "type" : "function",
        "desc" : "Performs a layout update.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Remove a ContentPanel (or subclass) to this layout.",
        "sig" : "(target, panel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "restoreState",
        "type" : "function",
        "desc" : "Restores this layout's state using Roo.state.Manager or the state provided by the passed provider.",
        "sig" : "(provider)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "showPanel",
        "type" : "function",
        "desc" : "Searches all regions for a panel with the specified id and activates (shows) it.",
        "sig" : "(panelId)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.BoxComponent" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.Button" : {
    "props" : [
      {
        "name" : "clickEvent",
        "type" : "String",
        "desc" : "The type of event to map to the button's event handler (defaults to 'click')",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the button's main element.",
        "memberOf" : ""
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to start disabled (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "enableToggle",
        "type" : "Boolean",
        "desc" : "True to enable pressed/not pressed toggling (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "handleMouseEvents",
        "type" : "Boolean",
        "desc" : "False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "handler",
        "type" : "Function",
        "desc" : "A function called when the button is clicked (can be used instead of click event)",
        "memberOf" : ""
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "True to start hidden (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : "The path to an image to display in the button (the image will be set as the background-image\nCSS property of the button by default, so if you want a mixed icon/text button, set cls:\"x-btn-text-icon\")",
        "memberOf" : ""
      },
      {
        "name" : "iconCls",
        "type" : "String",
        "desc" : "A css class which sets a background image to be used as the icon for this button (defaults to undefined).",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "menu",
        "type" : "Mixed",
        "desc" : "Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).",
        "memberOf" : ""
      },
      {
        "name" : "menuAlign",
        "type" : "String",
        "desc" : "The position to align the menu to (see {@link Roo.Element#alignTo} for more details, defaults to 'tl-bl?').",
        "memberOf" : ""
      },
      {
        "name" : "minWidth",
        "type" : "Number",
        "desc" : "The minimum width for this button (used to give a set of buttons a common width)",
        "memberOf" : ""
      },
      {
        "name" : "pressed",
        "type" : "Boolean",
        "desc" : "True to start pressed (only if enableToggle = true)",
        "memberOf" : ""
      },
      {
        "name" : "renderTo",
        "type" : "String/HTMLElement/Element",
        "desc" : "The element to append the button to",
        "memberOf" : ""
      },
      {
        "name" : "repeat",
        "type" : "Boolean/Object",
        "desc" : "True to repeat fire the click event while the mouse is down. This can also be\n  an {@link Roo.util.ClickRepeater} config object (defaults to false).",
        "memberOf" : ""
      },
      {
        "name" : "scope",
        "type" : "Object",
        "desc" : "The scope of the handler",
        "memberOf" : ""
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The DOM tabIndex for this button (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "template",
        "type" : "Roo.Template",
        "desc" : "(Optional)\nAn {@link Roo.Template} with which to create the Button's main element. This Template must\ncontain numeric substitution parameter 0 if it is to display the tRoo property. Changing the template could\nrequire code modifications if required elements (e.g. a button) aren't present.",
        "memberOf" : ""
      },
      {
        "name" : "text",
        "type" : "String",
        "desc" : "The button text",
        "memberOf" : ""
      },
      {
        "name" : "toggleGroup",
        "type" : "String",
        "desc" : "The group this toggle button is a member of (only 1 per group can be pressed, only\n   applies if enableToggle = true)",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "String/Object",
        "desc" : "The tooltip for the button - can be a string or QuickTips config object",
        "memberOf" : ""
      },
      {
        "name" : "tooltipType",
        "type" : "String",
        "desc" : "The type of tooltip to use. Either \"qtip\" (default) for QuickTips or \"title\" for title attribute.",
        "memberOf" : ""
      },
      {
        "name" : "type",
        "type" : "String",
        "desc" : "The button's type, corresponding to the DOM input element type attribute.  Either \"submit,\" \"reset\" or \"button\" (default).",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this button is clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mouseout",
        "type" : "function",
        "desc" : "Fires when the mouse exits the button",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mouseover",
        "type" : "function",
        "desc" : "Fires when the mouse hovers over the button",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when the button is rendered",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "toggle",
        "type" : "function",
        "desc" : "Fires when the \"pressed\" state of this button changes (only if enableToggle = true)",
        "sig" : "function (_self, pressed)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this Button and removes any listeners.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Focus the button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the button's underlying element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getText",
        "type" : "function",
        "desc" : "Gets the text for this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for boolean enable/disable",
        "sig" : "(enabled)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setHandler",
        "type" : "function",
        "desc" : "Assigns this button's click handler",
        "sig" : "(handler, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setText",
        "type" : "function",
        "desc" : "Sets this button's text",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function for boolean show/hide",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "toggle",
        "type" : "function",
        "desc" : "If a state it passed, it becomes the pressed state otherwise the current state is toggled.",
        "sig" : "(state)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.CalendarPanel" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "eventclick",
        "type" : "function",
        "desc" : "Fires when the mouse click an",
        "sig" : "function (_self, )\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "evententer",
        "type" : "function",
        "desc" : "Fires when mouse over an event",
        "sig" : "function (_self, Event)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "eventleave",
        "type" : "function",
        "desc" : "Fires when the mouse leaves an",
        "sig" : "function (_self, )\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "monthchange",
        "type" : "function",
        "desc" : "Fires when the displayed month changes",
        "sig" : "function (_self, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "rendered",
        "type" : "function",
        "desc" : "Fires when the grid is rendered",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Fires when a date is selected",
        "sig" : "function (_self, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.ColorPalette" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowReselect",
        "type" : "Boolean",
        "desc" : "If set to true then reselecting a color that is already selected fires the selection event",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "itemCls",
        "type" : "String",
        "desc" : "The CSS class to apply to the containing element (defaults to \"x-color-palette\")",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "value",
        "type" : "String",
        "desc" : "The initial color to highlight (should be a valid 6-digit color hex code without the # symbol).  Note that\nthe hex codes are case-sensitive.",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Fires when a color is selected",
        "sig" : "function (_self, color)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Selects the specified color in the palette (fires the select event)",
        "sig" : "(color)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.Component" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.ComponentMgr" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "get",
        "type" : "function",
        "desc" : "Returns a component by id",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onAvailable",
        "type" : "function",
        "desc" : "Registers a function that will be called when a specified component is added to ComponentMgr",
        "sig" : "(id, fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "register",
        "type" : "function",
        "desc" : "Registers a component.",
        "sig" : "(c)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "unregister",
        "type" : "function",
        "desc" : "Unregisters a component.",
        "sig" : "(c)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.CompositeElement" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Adds elements to this composite.",
        "sig" : "(els)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "clear",
        "type" : "function",
        "desc" : "Removes all elements.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "contains",
        "type" : "function",
        "desc" : "Returns true if this composite contains the passed element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "each",
        "type" : "function",
        "desc" : "Calls the passed function passing (el, this, index) for each element in this composite.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fill",
        "type" : "function",
        "desc" : "Clears this composite and adds the elements returned by the passed selector.",
        "sig" : "(els)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "filter",
        "type" : "function",
        "desc" : "Filters this composite to only elements that match the passed selector.",
        "sig" : "(selector, inverse)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "first",
        "type" : "function",
        "desc" : "Returns the first Element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getCount",
        "type" : "function",
        "desc" : "Returns the number of elements in this composite",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "indexOf",
        "type" : "function",
        "desc" : "Returns true if this composite contains the passed element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "item",
        "type" : "function",
        "desc" : "Returns the Element object at the specified index",
        "sig" : "(index)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "last",
        "type" : "function",
        "desc" : "Returns the last Element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeElement",
        "type" : "function",
        "desc" : "Removes the specified element(s).",
        "sig" : "(el, removeDom)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "replaceElement",
        "type" : "function",
        "desc" : "Replaces the specified element with the passed element.",
        "sig" : "(el, replacement, domReplace)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.CompositeElementLite" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Adds elements to this composite.",
        "sig" : "(els)",
        "static" : false,
        "memberOf" : "Roo.CompositeElement"
      },
      {
        "name" : "clear",
        "type" : "function",
        "desc" : "Removes all elements.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.CompositeElement"
      },
      {
        "name" : "contains",
        "type" : "function",
        "desc" : "Returns true if this composite contains the passed element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.CompositeElement"
      },
      {
        "name" : "each",
        "type" : "function",
        "desc" : "Calls the passed function passing (el, this, index) for each element in this composite. <b>The element\npassed is the flyweight (shared) Roo.Element instance, so if you require a\na reference to the dom node, use el.dom.</b>",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fill",
        "type" : "function",
        "desc" : "Clears this composite and adds the elements returned by the passed selector.",
        "sig" : "(els)",
        "static" : false,
        "memberOf" : "Roo.CompositeElement"
      },
      {
        "name" : "filter",
        "type" : "function",
        "desc" : "Filters this composite to only elements that match the passed selector.",
        "sig" : "(selector, inverse)",
        "static" : false,
        "memberOf" : "Roo.CompositeElement"
      },
      {
        "name" : "first",
        "type" : "function",
        "desc" : "Returns the first Element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.CompositeElement"
      },
      {
        "name" : "getCount",
        "type" : "function",
        "desc" : "Returns the number of elements in this composite",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.CompositeElement"
      },
      {
        "name" : "indexOf",
        "type" : "function",
        "desc" : "Returns true if this composite contains the passed element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.CompositeElement"
      },
      {
        "name" : "item",
        "type" : "function",
        "desc" : "Returns a flyweight Element of the dom element object at the specified index",
        "sig" : "(index)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "last",
        "type" : "function",
        "desc" : "Returns the last Element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.CompositeElement"
      },
      {
        "name" : "removeElement",
        "type" : "function",
        "desc" : "Removes the specified element(s).",
        "sig" : "(el, removeDom)",
        "static" : false,
        "memberOf" : "Roo.CompositeElement"
      },
      {
        "name" : "replaceElement",
        "type" : "function",
        "desc" : "Replaces the specified element with the passed element.",
        "sig" : "(el, replacement, domReplace)",
        "static" : false,
        "memberOf" : "Roo.CompositeElement"
      }
    ]
  },
  "Roo.ContentPanel" : {
    "props" : [
      {
        "name" : "adjustments",
        "type" : "Array",
        "desc" : "Values to <b>add</b> to the width/height when doing a {@link #fitToFrame} (default is [0, 0])",
        "memberOf" : ""
      },
      {
        "name" : "autoCreate",
        "type" : "Boolean/Object",
        "desc" : "True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create",
        "memberOf" : ""
      },
      {
        "name" : "autoScroll",
        "type" : "Boolean",
        "desc" : "True to scroll overflow in this panel (use with {@link #fitToFrame})",
        "memberOf" : ""
      },
      {
        "name" : "background",
        "type" : "Boolean",
        "desc" : "True if the panel should not be activated when it is added (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "closable",
        "type" : "Boolean",
        "desc" : "True if the panel can be closed/removed",
        "memberOf" : ""
      },
      {
        "name" : "content",
        "type" : "String",
        "desc" : "Raw content to fill content panel with (uses setContent on construction.)",
        "memberOf" : ""
      },
      {
        "name" : "fitContainer",
        "type" : "Boolean",
        "desc" : "When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "fitToFrame",
        "type" : "Boolean",
        "desc" : "True for this panel to adjust its size to fit when the region resizes  (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadOnce",
        "type" : "Boolean",
        "desc" : "When used with {@link #url}, calls {@link #setUrl} with this value",
        "memberOf" : ""
      },
      {
        "name" : "params",
        "type" : "String/Object",
        "desc" : "When used with {@link #url}, calls {@link #setUrl} with this value",
        "memberOf" : ""
      },
      {
        "name" : "region",
        "type" : "String",
        "desc" : [
          "(center",
          "north",
          "south",
          "east",
          "west)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "resizeEl",
        "type" : "String/HTMLElement/Element",
        "desc" : "An element to resize if {@link #fitToFrame} is true (instead of this panel's element)",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "Extra style to add to the content panel",
        "memberOf" : ""
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "The title for this panel",
        "memberOf" : ""
      },
      {
        "name" : "toolbar",
        "type" : "Toolbar",
        "desc" : "A toolbar for this panel",
        "memberOf" : ""
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "Calls {@link #setUrl} with this value",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this panel is activated.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this panel is activated.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when this tab is created",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires when this panel is resized if fitToFrame is true.",
        "sig" : "function (_self, width, height)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addxtype",
        "type" : "function",
        "desc" : "Adds a xtype elements to the panel - currently only supports Forms, View, JsonView.\n<pre><code>\n\nlayout.addxtype({\n       xtype : 'Form',\n       items: [ .... ]\n   }\n);\n\n</code></pre>",
        "sig" : "(cfg)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this panel",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns this panel's element - used by regiosn to add.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns this panel's id",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTitle",
        "type" : "function",
        "desc" : "Returns this panel's title",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getToolbar",
        "type" : "function",
        "desc" : "Returns the toolbar for this Panel if one was configured.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getUpdateManager",
        "type" : "function",
        "desc" : "Get the {@link Roo.UpdateManager} for this panel. Enables you to perform Ajax updates.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isClosable",
        "type" : "function",
        "desc" : "Returns true is this panel was configured to be closable",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Loads this content panel immediately with content from XHR. Note: to delay loading until the panel is activated, use {@link #setUrl}.",
        "sig" : "(url, params, callback, discardUrl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "refresh",
        "type" : "function",
        "desc" : "Force a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the {@link #setUrl} method has not been called.\n  This does not activate the panel, just updates its content.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setContent",
        "type" : "function",
        "desc" : "Updates this panel's element",
        "sig" : "(content, loadScripts)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setTitle",
        "type" : "function",
        "desc" : "Set this panel's title",
        "sig" : "(title)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setUrl",
        "type" : "function",
        "desc" : "Set a URL to be used to load the content for this panel. When this panel is activated, the content will be loaded from that URL.",
        "sig" : "(url, params, loadOnce)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.DDView" : {
    "props" : [
      {
        "name" : "allowCopy",
        "type" : "Boolean",
        "desc" : "Causes ctrl/drag operations to copy nodes rather than move.",
        "memberOf" : ""
      },
      {
        "name" : "copy",
        "type" : "Boolean",
        "desc" : "Causes drag operations to copy nodes rather than move.",
        "memberOf" : ""
      },
      {
        "name" : "dragGroup",
        "type" : "String/Array",
        "desc" : "The ddgroup name(s) for the View's DragZone.",
        "memberOf" : ""
      },
      {
        "name" : "dropGroup",
        "type" : "String/Array",
        "desc" : "The ddgroup name(s) for the View's DropZone.",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "getContextMenu",
        "type" : "function",
        "desc" : "Return the context menu for this DDView.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getDragData",
        "type" : "function",
        "desc" : "Create the drag data which consists of an object which has the property \"ddel\" as\n\tthe drag proxy element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getDropPoint",
        "type" : "function",
        "desc" : "Decide whether to drop above or below a View node.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Allows this class to be an Roo.form.Field so it can be found using {@link Roo.form.BasicForm#findField}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTargetFromEvent",
        "type" : "function",
        "desc" : "Part of the Roo.dd.DropZone interface. If no target node is found, the\n\twhole Element becomes the target, and this causes the drop gesture to append.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onDblClick",
        "type" : "function",
        "desc" : "Double click fires the event, but also, if this is draggable, and there is only one other\n\trelated DropZone, it transfers the selected node.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Remove {@link Roo.data.Record}s at the specified indices.",
        "sig" : "(selectedIndices)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDeletable",
        "type" : "function",
        "desc" : "Utility method. Add a delete option to the DDView's context menu.",
        "sig" : "(imageUrl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDraggable",
        "type" : "function",
        "desc" : "Specify to which ddGroup items in this DDView may be dragged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDroppable",
        "type" : "function",
        "desc" : "Specify from which ddGroup this DDView accepts drops.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Loads the View from a JSON string representing the Records to put into the Store.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.DatePicker" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "cancelText",
        "type" : "String",
        "desc" : "The text to display on the cancel button",
        "memberOf" : ""
      },
      {
        "name" : "constrainToViewport",
        "type" : "Boolean",
        "desc" : "True to constrain the date picker to the viewport (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "dayNames",
        "type" : "Array",
        "desc" : "An array of textual day names which can be overriden for localization support (defaults to Date.dayNames)",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disabledDatesRE",
        "type" : "RegExp",
        "desc" : "JavaScript regular expression used to disable a pattern of dates (defaults to null)",
        "memberOf" : ""
      },
      {
        "name" : "disabledDatesText",
        "type" : "String",
        "desc" : "The tooltip text to display when the date falls on a disabled date (defaults to \"\")",
        "memberOf" : ""
      },
      {
        "name" : "disabledDays",
        "type" : "Array",
        "desc" : "An array of days to disable, 0-based. For example, [0, 6] disables Sunday and Saturday (defaults to null).",
        "memberOf" : ""
      },
      {
        "name" : "disabledDaysText",
        "type" : "String",
        "desc" : "The tooltip to display when the date falls on a disabled day (defaults to \"\")",
        "memberOf" : ""
      },
      {
        "name" : "format",
        "type" : "String",
        "desc" : "The default date format string which can be overriden for localization support.  The format must be\nvalid according to {@link Date#parseDate} (defaults to 'm/d/y').",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maxDate",
        "type" : "Date",
        "desc" : "Maximum allowable date (JavaScript date object, defaults to null)",
        "memberOf" : ""
      },
      {
        "name" : "maxText",
        "type" : "String",
        "desc" : "The error text to display if the maxDate validation fails (defaults to \"This date is after the maximum date\")",
        "memberOf" : ""
      },
      {
        "name" : "minDate",
        "type" : "Date",
        "desc" : "Minimum allowable date (JavaScript date object, defaults to null)",
        "memberOf" : ""
      },
      {
        "name" : "minText",
        "type" : "String",
        "desc" : "The error text to display if the minDate validation fails (defaults to \"This date is before the minimum date\")",
        "memberOf" : ""
      },
      {
        "name" : "monthNames",
        "type" : "Array",
        "desc" : "An array of textual month names which can be overriden for localization support (defaults to Date.monthNames)",
        "memberOf" : ""
      },
      {
        "name" : "monthYearText",
        "type" : "String",
        "desc" : "The header month selector tooltip (defaults to 'Choose a month (Control+Up/Down to move years)')",
        "memberOf" : ""
      },
      {
        "name" : "nextText",
        "type" : "String",
        "desc" : "The next month navigation button tooltip (defaults to 'Next Month (Control+Right)')",
        "memberOf" : ""
      },
      {
        "name" : "okText",
        "type" : "String",
        "desc" : "The text to display on the ok button",
        "memberOf" : ""
      },
      {
        "name" : "prevText",
        "type" : "String",
        "desc" : "The previous month navigation button tooltip (defaults to 'Previous Month (Control+Left)')",
        "memberOf" : ""
      },
      {
        "name" : "showClear",
        "type" : "Bool",
        "desc" : "Show a clear button (usefull for date form elements that can be blank.)",
        "memberOf" : ""
      },
      {
        "name" : "startDay",
        "type" : "Number",
        "desc" : "Day index at which the week should begin, 0-based (defaults to 0, which is Sunday)",
        "memberOf" : ""
      },
      {
        "name" : "todayText",
        "type" : "String",
        "desc" : "The text to display on the button that selects the current date (defaults to \"Today\")",
        "memberOf" : ""
      },
      {
        "name" : "todayTip",
        "type" : "String",
        "desc" : "The tooltip to display for the button that selects the current date (defaults to \"{current date} (Spacebar)\")",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "monthchange",
        "type" : "function",
        "desc" : "Fires when the displayed month changes",
        "sig" : "function (_self, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Fires when a date is selected",
        "sig" : "function (_self, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Gets the current selected value of the date field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the value of the date field",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.DialogManager" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "bringToFront",
        "type" : "function",
        "desc" : "Brings the specified dialog to the front",
        "sig" : "(dlg)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "get",
        "type" : "function",
        "desc" : "Gets a registered dialog by id",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hideAll",
        "type" : "function",
        "desc" : "Hides all dialogs",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "sendToBack",
        "type" : "function",
        "desc" : "Sends the specified dialog to the back",
        "sig" : "(dlg)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.Document" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.DomHelper" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "append",
        "type" : "function",
        "desc" : "Creates new Dom element(s) and appends them to el",
        "sig" : "(el, o, returnElement)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "applyStyles",
        "type" : "function",
        "desc" : "Applies a style specification to an element",
        "sig" : "(el, styles)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "createTemplate",
        "type" : "function",
        "desc" : "Creates a new Roo.DomHelper.Template from the Dom object spec",
        "sig" : "(o)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "insertAfter",
        "type" : "function",
        "desc" : "Creates new Dom element(s) and inserts them after el",
        "sig" : "(el, o, returnElement)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "insertBefore",
        "type" : "function",
        "desc" : "Creates new Dom element(s) and inserts them before el",
        "sig" : "(el, o, returnElement)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "insertFirst",
        "type" : "function",
        "desc" : "Creates new Dom element(s) and inserts them as the first child of el",
        "sig" : "(el, o, returnElement)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "insertHtml",
        "type" : "function",
        "desc" : "Inserts an HTML fragment into the Dom",
        "sig" : "(where, el, html)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "markup",
        "type" : "function",
        "desc" : "Returns the markup for the passed Element(s) config",
        "sig" : "(o)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "overwrite",
        "type" : "function",
        "desc" : "Creates new Dom element(s) and overwrites the contents of el with them",
        "sig" : "(el, o, returnElement)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.DomQuery" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "compile",
        "type" : "function",
        "desc" : "Compiles a selector/xpath query into a reusable function. The returned function\ntakes one parameter \"root\" (optional), which is the context node from where the query should start.",
        "sig" : "(selector, type)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "filter",
        "type" : "function",
        "desc" : "Filters an array of elements to only include matches of a simple selector (e.g. div.some-class or span:first-child)",
        "sig" : "(el, selector, nonMatches)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "is",
        "type" : "function",
        "desc" : "Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)",
        "sig" : "(el, selector)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Selects a group of elements.",
        "sig" : "(selector, root)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectNode",
        "type" : "function",
        "desc" : "Selects a single element.",
        "sig" : "(selector, root)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectNumber",
        "type" : "function",
        "desc" : "Selects the value of a node, parsing integers and floats.",
        "sig" : "(selector, root, defaultValue)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectValue",
        "type" : "function",
        "desc" : "Selects the value of a node, optionally replacing null with the defaultValue.",
        "sig" : "(selector, root, defaultValue)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.DomTemplate" : {
    "props" : [
      {
        "name" : "html",
        "type" : "String",
        "desc" : "The HTML fragment or an array of fragments to join(\"\") or multiple arguments to join(\"\")",
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "onLoad",
        "type" : "Function",
        "desc" : "Called after the template has been loaded and complied (usually from a remove source)",
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "The Url to load the template from. beware if you are loading from a url, the data may not be ready if you use it instantly..\n                   it should be fixed so that template is observable...",
        "memberOf" : "Roo.Template"
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "append",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and appends the new node(s) to el.",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "apply",
        "type" : "function",
        "desc" : "Alias for {@link #applyTemplate}",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "applySubTemplate",
        "type" : "function",
        "desc" : "same as applyTemplate, except it's done to one of the subTemplates\nwhen using named templates, you can do:\n\nvar str = pl.applySubTemplate('your-name', values);",
        "sig" : "(id, values, parent)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "applyTemplate",
        "type" : "function",
        "desc" : "Returns an HTML fragment of this template with the specified values applied.",
        "sig" : "(values)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "compile",
        "type" : "function",
        "desc" : "compile the template\n\nThis is not recursive, so I'm not sure how nested templates are really going to be handled..",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "compileTpl",
        "type" : "function",
        "desc" : "Compile a segment of the template into a 'sub-template'",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "from",
        "type" : "function",
        "desc" : "Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.",
        "sig" : "(el)",
        "static" : true,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "insertAfter",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and inserts the new node(s) after el.",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "insertBefore",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and inserts the new node(s) before el.",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "insertFirst",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and inserts the new node(s) as the first child of el.",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "overwrite",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and overwrites the content of el with the new node(s).",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "set",
        "type" : "function",
        "desc" : "Sets the HTML used as the template and optionally compiles it.",
        "sig" : "(html, compile)",
        "static" : false,
        "memberOf" : "Roo.Template"
      }
    ]
  },
  "Roo.Editor" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "alignment",
        "type" : "String",
        "desc" : "The position to align to (see {@link Roo.Element#alignTo} for more details, defaults to \"c-c?\").",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autosize",
        "type" : "Boolean/String",
        "desc" : "True for the editor to automatically adopt the size of the underlying field, \"width\" to adopt the width only,\nor \"height\" to adopt the height only (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "cancelOnEsc",
        "type" : "Boolean",
        "desc" : "True to cancel the edit when the escape key is pressed (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "completeOnEnter",
        "type" : "Boolean",
        "desc" : "True to complete the edit when the enter key is pressed (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "constrain",
        "type" : "Boolean",
        "desc" : "True to constrain the editor to the viewport",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideEl",
        "type" : "Boolean",
        "desc" : "False to keep the bound element visible while the editor is displayed (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "ignoreNoChange",
        "type" : "Boolean",
        "desc" : "True to skip the the edit completion process (no save, no events fired) if the user completes an edit and\nthe value has not changed (defaults to false).  Applies only to string values - edits for other data types\nwill never be ignored.",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "revertInvalid",
        "type" : "Boolean",
        "desc" : "True to automatically revert the field value and cancel the edit when the user completes an edit and the field\nvalidation fails (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "shadow",
        "type" : "Boolean/String",
        "desc" : "\"sides\" for sides/bottom only, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"frame\")",
        "memberOf" : ""
      },
      {
        "name" : "updateEl",
        "type" : "Boolean",
        "desc" : "True to update the innerHTML of the bound element when the update completes (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "The data value of the underlying field (defaults to \"\")",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforecomplete",
        "type" : "function",
        "desc" : "Fires after a change has been made to the field, but before the change is reflected in the underlying\nfield.  Saving the change to the field can be canceled by returning false from the handler of this event.\nNote that if the value has not changed and ignoreNoChange = true, the editing will still end but this\nevent will not fire since no edit actually occurred.",
        "sig" : "function (_self, value, startValue)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforestartedit",
        "type" : "function",
        "desc" : "Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning\nfalse from the handler of this event.",
        "sig" : "function (_self, boundEl, value)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "complete",
        "type" : "function",
        "desc" : "Fires after editing is complete and any changed value has been written to the underlying field.",
        "sig" : "function (_self, value, startValue)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "startedit",
        "type" : "function",
        "desc" : "Fires when this editor is displayed",
        "sig" : "function (boundEl, value)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "cancelEdit",
        "type" : "function",
        "desc" : "Cancels the editing process and hides the editor without persisting any changes.  The field value will be\nreverted to the original starting value.",
        "sig" : "(remainVisible)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "completeEdit",
        "type" : "function",
        "desc" : "Ends the editing process, persists the changed value to the underlying field, and hides the editor.",
        "sig" : "(remainVisible)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Gets the data value of the editor",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "realign",
        "type" : "function",
        "desc" : "Realigns the editor to the bound field based on the current alignment config value.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the height and width of this editor.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the data value of the editor",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "startEdit",
        "type" : "function",
        "desc" : "Starts the editing process and shows the editor.",
        "sig" : "(el, value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.Element" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "addClass",
        "type" : "function",
        "desc" : "Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out.",
        "sig" : "(className)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addClassOnClick",
        "type" : "function",
        "desc" : "Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)",
        "sig" : "(className)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addClassOnFocus",
        "type" : "function",
        "desc" : "Sets up event handlers to add and remove a css class when this element has the focus",
        "sig" : "(className)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addClassOnOver",
        "type" : "function",
        "desc" : "Sets up event handlers to add and remove a css class when the mouse is over this element",
        "sig" : "(className, preventFlicker)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addKeyListener",
        "type" : "function",
        "desc" : "Convenience method for constructing a KeyMap",
        "sig" : "(key, fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addKeyMap",
        "type" : "function",
        "desc" : "Creates a KeyMap for this element",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler",
        "sig" : "(eventName, fn, scope, options)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "alignTo",
        "type" : "function",
        "desc" : "Aligns this element with another element relative to the specified anchor points. If the other element is the\ndocument it aligns it to the viewport.\nThe position parameter is optional, and can be specified in any one of the following formats:\n<ul>\n  <li><b>Blank</b>: Defaults to aligning the element's top-left corner to the target's bottom-left corner (\"tl-bl\").</li>\n  <li><b>One anchor (deprecated)</b>: The passed anchor position is used as the target element's anchor point.\n      The element being aligned will position its top-left corner (tl) to that point.  <i>This method has been\n      deprecated in favor of the newer two anchor syntax below</i>.</li>\n  <li><b>Two anchors</b>: If two values from the table below are passed separated by a dash, the first value is used as the\n      element's anchor point, and the second value is used as the target's anchor point.</li>\n</ul>\nIn addition to the anchor points, the position parameter also supports the \"?\" character.  If \"?\" is passed at the end of\nthe position string, the element will attempt to align as specified, but the position will be adjusted to constrain to\nthe viewport if necessary.  Note that the element being aligned might be swapped to align to a different position than\nthat specified in order to enforce the viewport constraints.\nFollowing are all of the supported anchor positions:\n    <pre>\n    Value  Description\n    -----  -----------------------------\n    tl     The top left corner (default)\n    t      The center of the top edge\n    tr     The top right corner\n    l      The center of the left edge\n    c      In the center of the element\n    r      The center of the right edge\n    bl     The bottom left corner\n    b      The center of the bottom edge\n    br     The bottom right corner\n    </pre>\n    Example Usage:\n    <pre><code>\n    // align el to other-el using the default positioning (\"tl-bl\", non-constrained)\n    el.alignTo(\"other-el\");\n\n    // align the top left corner of el with the top right corner of other-el (constrained to viewport)\n    el.alignTo(\"other-el\", \"tr?\");\n\n    // align the bottom right corner of el with the center left edge of other-el\n    el.alignTo(\"other-el\", \"br-l?\");\n\n    // align the center of el with the bottom left corner of other-el and\n    // adjust the x position by -6 pixels (and the y position by 0)\n    el.alignTo(\"other-el\", \"c-bl\", [-6, 0]);\n    </code></pre>",
        "sig" : "(element, position, offsets, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "anchorTo",
        "type" : "function",
        "desc" : "Anchors an element to another element and realigns it when the window is resized.",
        "sig" : "(element, position, offsets, animate, monitorScroll, callback)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "animate",
        "type" : "function",
        "desc" : "Perform animation on this element.",
        "sig" : "(args, duration, onComplete, easing, animType)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "appendChild",
        "type" : "function",
        "desc" : "Appends the passed element(s) to this element",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "appendTo",
        "type" : "function",
        "desc" : "Appends this element to the passed element",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "applyStyles",
        "type" : "function",
        "desc" : "More flexible version of {@link #setStyle} for setting style properties.",
        "sig" : "(styles)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "attr",
        "type" : "function",
        "desc" : "Sets or Returns the value the dom attribute value",
        "sig" : "(name, value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "autoHeight",
        "type" : "function",
        "desc" : "Measures the element's content height and updates height to match. Note: this function uses setTimeout so\nthe new height may not be available immediately.",
        "sig" : "(animate, duration, onComplete, easing)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "beginMeasure",
        "type" : "function",
        "desc" : "Temporarily enables offsets (width,height,x,y) for an element with display:none, use endMeasure() when done.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Tries to blur the element. Any exceptions are caught and ignored.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "boxWrap",
        "type" : "function",
        "desc" : "Wraps the specified element with a special markup/CSS block that renders by default as a gray container with a\ngradient background, rounded corners and a 4-way shadow.",
        "sig" : "(class)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "center",
        "type" : "function",
        "desc" : "Centers the Element in either the viewport, or another Element.",
        "sig" : "(centerIn)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "child",
        "type" : "function",
        "desc" : "Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).",
        "sig" : "(selector, returnDom)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "clean",
        "type" : "function",
        "desc" : "Removes worthless text nodes",
        "sig" : "(forceReclean)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "clearOpacity",
        "type" : "function",
        "desc" : "Clears any opacity settings from this element. Required in some cases for IE.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "clearPositioning",
        "type" : "function",
        "desc" : "Clear positioning back to the default when the document was loaded",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "clip",
        "type" : "function",
        "desc" : "Store the current overflow setting and clip overflow on the element - use {@link #unclip} to remove",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "contains",
        "type" : "function",
        "desc" : "Returns true if this element is an ancestor of the passed element",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "createChild",
        "type" : "function",
        "desc" : "Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.",
        "sig" : "(config, insertBefore, returnDom)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "createProxy",
        "type" : "function",
        "desc" : "Creates a proxy element of this element",
        "sig" : "(config, renderTo, matchBox)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "createShim",
        "type" : "function",
        "desc" : "Creates an iframe shim for this element to keep selects and other windowed objects from\nshowing through.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "down",
        "type" : "function",
        "desc" : "Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).",
        "sig" : "(selector, returnDom)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enableDisplayMode",
        "type" : "function",
        "desc" : "Convenience method for setVisibilityMode(Element.DISPLAY)",
        "sig" : "(display)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "endMeasure",
        "type" : "function",
        "desc" : "Restores displays to before beginMeasure was called",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "findParent",
        "type" : "function",
        "desc" : "Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)",
        "sig" : "(selector, maxDepth, returnEl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "findParentNode",
        "type" : "function",
        "desc" : "Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)",
        "sig" : "(selector, maxDepth, returnEl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "findScrollableParent",
        "type" : "function",
        "desc" : "Looks at  the scrollable parent element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fitToParent",
        "type" : "function",
        "desc" : "Sizes this element to its parent element's dimensions performing\nneccessary box adjustments.",
        "sig" : "(monitorResize, targetParent)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fly",
        "type" : "function",
        "desc" : "Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -\nthe dom node can be overwritten by other code.",
        "sig" : "(el, named)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Tries to focus the element. Any exceptions are caught and ignored.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "get",
        "type" : "function",
        "desc" : "Static method to retrieve Element objects. Uses simple caching to consistently return the same object.\nAutomatically fixes if an object was recreated with the same id via AJAX or DOM.",
        "sig" : "(el)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "getAlignToXY",
        "type" : "function",
        "desc" : "Gets the x,y coordinates to align this element with another element. See {@link #alignTo} for more info on the\nsupported position values.",
        "sig" : "(element, position, offsets)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getAnchorXY",
        "type" : "function",
        "desc" : "Gets the x,y coordinates specified by the anchor position on the element.",
        "sig" : "(anchor, size, local)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getAttributeNS",
        "type" : "function",
        "desc" : "Returns the value of a namespaced attribute from the element's underlying DOM node.",
        "sig" : "(namespace, name)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getBorderWidth",
        "type" : "function",
        "desc" : "Gets the width of the border(s) for the specified side(s)",
        "sig" : "(side)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getBottom",
        "type" : "function",
        "desc" : "Gets the bottom Y coordinate of the element (element Y position + element height)",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Return a box {x, y, width, height} that can be used to set another elements\nsize/location to match this element.",
        "sig" : "(contentBox, local)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getCenterXY",
        "type" : "function",
        "desc" : "Calculates the x, y to center this element on the screen",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getColor",
        "type" : "function",
        "desc" : "Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values\nare convert to standard 6 digit hex color.",
        "sig" : "(attr, defaultValue, prefix)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getComputedHeight",
        "type" : "function",
        "desc" : "Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders\nwhen needed to simulate offsetHeight when offsets aren't available. This may not work on display:none elements\nif a height has not been set using CSS.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getComputedWidth",
        "type" : "function",
        "desc" : "Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders\nwhen needed to simulate offsetWidth when offsets aren't available. This may not work on display:none elements\nif a width has not been set using CSS.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getFrameWidth",
        "type" : "function",
        "desc" : "Returns the sum width of the padding and borders for the passed \"sides\". See getBorderWidth()\n         for more information about the sides.",
        "sig" : "(sides)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getHeight",
        "type" : "function",
        "desc" : "Returns the offset height of the element",
        "sig" : "(contentHeight)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getLeft",
        "type" : "function",
        "desc" : "Gets the left X coordinate",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getMargins",
        "type" : "function",
        "desc" : "Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,\nthen it returns the calculated width of the sides (see getPadding)",
        "sig" : "(sides)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getNextSibling",
        "type" : "function",
        "desc" : "Gets the next sibling, skipping text nodes",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getPadding",
        "type" : "function",
        "desc" : "Gets the width of the padding(s) for the specified side(s)",
        "sig" : "(side)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getPositioning",
        "type" : "function",
        "desc" : "Gets an object with all CSS positioning properties. Useful along with setPostioning to get\nsnapshot before performing an update and then restoring the element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getPrevSibling",
        "type" : "function",
        "desc" : "Gets the previous sibling, skipping text nodes",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getRegion",
        "type" : "function",
        "desc" : "Returns the region of the given element.\nThe element must be part of the DOM tree to have a region (display:none or elements not appended return false).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getRight",
        "type" : "function",
        "desc" : "Gets the right X coordinate of the element (element X position + element width)",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getScroll",
        "type" : "function",
        "desc" : "Returns the current scroll position of the element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Returns the size of the element.",
        "sig" : "(contentSize)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getStyle",
        "type" : "function",
        "desc" : "Normalizes currentStyle and computedStyle. This is not YUI getStyle, it is an optimised version.",
        "sig" : "(property)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getStyles",
        "type" : "function",
        "desc" : "Returns an object with properties matching the styles requested.\nFor example, el.getStyles('color', 'font-size', 'width') might return\n{'color': '#FFFFFF', 'font-size': '13px', 'width': '100px'}.",
        "sig" : "(style1, style2)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTop",
        "type" : "function",
        "desc" : "Gets the top Y coordinate",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getUpdateManager",
        "type" : "function",
        "desc" : "Gets this element's UpdateManager",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the value of the \"value\" attribute",
        "sig" : "(asNumber)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getViewSize",
        "type" : "function",
        "desc" : "Returns the width and height of the viewport.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getWidth",
        "type" : "function",
        "desc" : "Returns the offset width of the element",
        "sig" : "(contentWidth)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getX",
        "type" : "function",
        "desc" : "Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getXY",
        "type" : "function",
        "desc" : "Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getY",
        "type" : "function",
        "desc" : "Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasClass",
        "type" : "function",
        "desc" : "Checks if the specified CSS class exists on this element's DOM node.",
        "sig" : "(className)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this element - Uses display mode to determine whether to use \"display\" or \"visibility\". See {@link #setVisible}.",
        "sig" : "(animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "initDD",
        "type" : "function",
        "desc" : "Initializes a {@link Roo.dd.DD} drag drop object for this element.",
        "sig" : "(group, config, overrides)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "initDDProxy",
        "type" : "function",
        "desc" : "Initializes a {@link Roo.dd.DDProxy} object for this element.",
        "sig" : "(group, config, overrides)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "initDDTarget",
        "type" : "function",
        "desc" : "Initializes a {@link Roo.dd.DDTarget} object for this element.",
        "sig" : "(group, config, overrides)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "insertAfter",
        "type" : "function",
        "desc" : "Inserts this element after the passed element in the DOM",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "insertBefore",
        "type" : "function",
        "desc" : "Inserts this element before the passed element in the DOM",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "insertFirst",
        "type" : "function",
        "desc" : "Inserts (or creates) an element (or DomHelper config) as the first child of the this element",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "insertHtml",
        "type" : "function",
        "desc" : "Inserts an html fragment into this element",
        "sig" : "(where, html, returnEl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "insertSibling",
        "type" : "function",
        "desc" : "Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element",
        "sig" : "(el, where, returnDom)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "is",
        "type" : "function",
        "desc" : "Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)",
        "sig" : "(selector)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isBorderBox",
        "type" : "function",
        "desc" : "Tests various css rules/browsers to determine if this element uses a border box",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isDisplayed",
        "type" : "function",
        "desc" : "Returns true if display is not \"none\"",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isMasked",
        "type" : "function",
        "desc" : "Returns true if this element is masked",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isScrollable",
        "type" : "function",
        "desc" : "Returns true if this element is scrollable.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Checks whether the element is currently visible using both visibility and display properties.",
        "sig" : "(deep)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Direct access to the UpdateManager update() method (takes the same parameters).",
        "sig" : "(url, params, callback, discardUrl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "mask",
        "type" : "function",
        "desc" : "Puts a mask over this element to disable user interaction. Requires core.css.\nThis method can only be applied to elements which accept child nodes.",
        "sig" : "(msg, msgCls)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Move this element relative to its current position.",
        "sig" : "(direction, distance, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "moveTo",
        "type" : "function",
        "desc" : "Sets the position of the element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
        "sig" : "(x, y, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler (Shorthand for addListener)",
        "sig" : "(eventName, fn, scope, options)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "position",
        "type" : "function",
        "desc" : "Initializes positioning on this element. If a desired position is not passed, it will make the\nthe element positioned relative IF it is not already positioned.",
        "sig" : "(pos, zIndex, x, y)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "query",
        "type" : "function",
        "desc" : "Selects child nodes based on the passed CSS selector (the selector should not contain an id).",
        "sig" : "(selector)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "radioClass",
        "type" : "function",
        "desc" : "Adds one or more CSS classes to this element and removes the same class(es) from all siblings.",
        "sig" : "(className)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Removes this element from the DOM and deletes it from the cache",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeAllListeners",
        "type" : "function",
        "desc" : "Removes all previous added listeners from this element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeClass",
        "type" : "function",
        "desc" : "Removes one or more CSS classes from the element.",
        "sig" : "(className)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes an event handler from this element",
        "sig" : "(eventName, fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "repaint",
        "type" : "function",
        "desc" : "Forces the browser to repaint this element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "replace",
        "type" : "function",
        "desc" : "Replaces the passed element with this element",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "replaceClass",
        "type" : "function",
        "desc" : "Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added.",
        "sig" : "(oldClassName, newClassName)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "scroll",
        "type" : "function",
        "desc" : "Scrolls this element the specified direction. Does bounds checking to make sure the scroll is\nwithin this element's scrollable range.",
        "sig" : "(direction, distance, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "scrollIntoView",
        "type" : "function",
        "desc" : "Scrolls this element into view within the passed container.",
        "sig" : "(container, hscroll)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "scrollTo",
        "type" : "function",
        "desc" : "Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().",
        "sig" : "(side, value, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Creates a {@link Roo.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id).",
        "sig" : "(selector, unique)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "set",
        "type" : "function",
        "desc" : "Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)",
        "sig" : "(o, useSet)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setBottom",
        "type" : "function",
        "desc" : "Sets the element's CSS bottom style.",
        "sig" : "(bottom)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setBounds",
        "type" : "function",
        "desc" : "Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently.",
        "sig" : "(x, y, width, height, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setBox",
        "type" : "function",
        "desc" : "Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently.",
        "sig" : "(box, adjust, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDisplayed",
        "type" : "function",
        "desc" : "Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setHeight",
        "type" : "function",
        "desc" : "Set the height of the element",
        "sig" : "(height, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setLeft",
        "type" : "function",
        "desc" : "Sets the element's left position directly using CSS style (instead of {@link #setX}).",
        "sig" : "(left)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setLeftTop",
        "type" : "function",
        "desc" : "Quick set left and top adding default units",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setLocation",
        "type" : "function",
        "desc" : "Sets the position of the element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
        "sig" : "(x, y, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setOpacity",
        "type" : "function",
        "desc" : "Set the opacity of the element",
        "sig" : "(opacity, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setPositioning",
        "type" : "function",
        "desc" : "Set positioning with an object returned by getPositioning().",
        "sig" : "(posCfg)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setRegion",
        "type" : "function",
        "desc" : "Sets the element's position and size the the specified region. If animation is true then width, height, x and y will be animated concurrently.",
        "sig" : "(region, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setRight",
        "type" : "function",
        "desc" : "Sets the element's CSS right style.",
        "sig" : "(right)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Set the size of the element. If animation is true, both width an height will be animated concurrently.",
        "sig" : "(width, height, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setStyle",
        "type" : "function",
        "desc" : "Wrapper for setting style properties, also takes single object parameter of multiple styles.",
        "sig" : "(property, value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setTop",
        "type" : "function",
        "desc" : "Sets the element's top position directly using CSS style (instead of {@link #setY}).",
        "sig" : "(top)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisibilityMode",
        "type" : "function",
        "desc" : "Sets the element's visibility mode. When setVisible() is called it\nwill use this to determine whether to set the visibility or the display property.",
        "sig" : "(visMode)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use\nthe display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property.",
        "sig" : "(visible, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setWidth",
        "type" : "function",
        "desc" : "Set the width of the element",
        "sig" : "(width, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setX",
        "type" : "function",
        "desc" : "Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
        "sig" : "(The, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setXY",
        "type" : "function",
        "desc" : "Sets the position of the element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
        "sig" : "(pos, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setY",
        "type" : "function",
        "desc" : "Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
        "sig" : "(The, animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this element - Uses display mode to determine whether to use \"display\" or \"visibility\". See {@link #setVisible}.",
        "sig" : "(animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "swallowEvent",
        "type" : "function",
        "desc" : "Stops the specified event from bubbling and optionally prevents the default action",
        "sig" : "(eventName, preventDefault)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "toggle",
        "type" : "function",
        "desc" : "Toggles the element's visibility or display, depending on visibility mode.",
        "sig" : "(animate)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "toggleClass",
        "type" : "function",
        "desc" : "Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).",
        "sig" : "(className)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "translatePoints",
        "type" : "function",
        "desc" : "Translates the passed page coordinates into left/top css values for this element",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes an event handler from this element (shorthand for removeListener)",
        "sig" : "(eventName, fn)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "unclip",
        "type" : "function",
        "desc" : "Return clipping (overflow) to original clipping before clip() was called",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "unmask",
        "type" : "function",
        "desc" : "Removes a previously applied mask. If removeEl is true the mask overlay is destroyed, otherwise\nit is cached for reuse.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "unselectable",
        "type" : "function",
        "desc" : "Disables text selection for this element (normalized across browsers)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "up",
        "type" : "function",
        "desc" : "Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).\nThis is a shortcut for findParentNode() that always returns an Roo.Element.",
        "sig" : "(selector, maxDepth)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "update",
        "type" : "function",
        "desc" : "Update the innerHTML of this element, optionally searching for and processing scripts",
        "sig" : "(html, loadScripts, callback)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "wrap",
        "type" : "function",
        "desc" : "Creates and wraps this element with another element",
        "sig" : "(config, returnDom)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.EventManager" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to an element (shorthand for addListener)",
        "sig" : "(element, eventName, handler, scope, options)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to an element (shorthand for addListener)",
        "sig" : "(element, eventName, handler, scope, options)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "onDocumentReady",
        "type" : "function",
        "desc" : "Fires when the document is ready (before onload and before images are loaded). Can be \naccessed shorthanded Roo.onReady().",
        "sig" : "(fn, scope, options)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "onTextResize",
        "type" : "function",
        "desc" : "Fires when the user changes the active text size. Handler gets called with 2 params, the old size and the new size.",
        "sig" : "(fn, scope, options)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "onWindowResize",
        "type" : "function",
        "desc" : "Fires when the window is resized and provides resize event buffering (50 milliseconds), passes new viewport width and height to handlers.",
        "sig" : "(fn, scope, options)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes an event handler",
        "sig" : "(element, eventName, fn)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "removeResizeListener",
        "type" : "function",
        "desc" : "Removes the passed window resize listener.",
        "sig" : "(fn, scope)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "wrap",
        "type" : "function",
        "desc" : "This is no longer needed and is deprecated. Places a simple wrapper around an event handler to override the browser event\nobject with a Roo.EventObject",
        "sig" : "(fn, scope, override)",
        "static" : true,
        "memberOf" : ""
      }
    ]
  },
  "Roo.EventObject" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "getCharCode",
        "type" : "function",
        "desc" : "Gets the key code for the event.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getKey",
        "type" : "function",
        "desc" : "Returns a normalized keyCode for the event.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getPageX",
        "type" : "function",
        "desc" : "Gets the x coordinate of the event.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getPageY",
        "type" : "function",
        "desc" : "Gets the y coordinate of the event.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getRelatedTarget",
        "type" : "function",
        "desc" : "Gets the related target.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTarget",
        "type" : "function",
        "desc" : "Gets the target for the event.",
        "sig" : "(selector, maxDepth, returnEl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTime",
        "type" : "function",
        "desc" : "Gets the time of the event.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getWheelDelta",
        "type" : "function",
        "desc" : "Normalizes mouse wheel delta across browsers",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getXY",
        "type" : "function",
        "desc" : "Gets the page coordinates of the event.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasModifier",
        "type" : "function",
        "desc" : "Returns true if the control, meta, shift or alt key was pressed during this event.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "preventDefault",
        "type" : "function",
        "desc" : "Prevents the browsers default handling of the event.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "stopEvent",
        "type" : "function",
        "desc" : "Stop the event (preventDefault and stopPropagation)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "stopPropagation",
        "type" : "function",
        "desc" : "Cancels bubbling of the event.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "within",
        "type" : "function",
        "desc" : "Returns true if the target of this event equals el or is a child of el",
        "sig" : "(el, related)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.Fx" : {
    "props" : [
      {
        "name" : "afterCls",
        "type" : "String",
        "desc" : "A css class to apply after the effect",
        "memberOf" : ""
      },
      {
        "name" : "afterStyle",
        "type" : "String/Object/Function",
        "desc" : "A style specification string, e.g. \"width:100px\", or an object in the form {width:\"100px\"}, or\na function which returns such a specification that will be applied to the Element after the effect finishes",
        "memberOf" : ""
      },
      {
        "name" : "block",
        "type" : "Boolean",
        "desc" : "Whether the effect should block other effects from queueing while it runs",
        "memberOf" : ""
      },
      {
        "name" : "callback",
        "type" : "Function",
        "desc" : "A function called when the effect is finished",
        "memberOf" : ""
      },
      {
        "name" : "concurrent",
        "type" : "Boolean",
        "desc" : "Whether to allow subsequently-queued effects to run at the same time as the current effect, or to ensure that they run in sequence",
        "memberOf" : ""
      },
      {
        "name" : "duration",
        "type" : "Number",
        "desc" : "The length of time (in seconds) that the effect should last",
        "memberOf" : ""
      },
      {
        "name" : "easing",
        "type" : "String",
        "desc" : "A valid Easing value for the effect",
        "memberOf" : ""
      },
      {
        "name" : "remove",
        "type" : "Boolean",
        "desc" : "Whether the Element should be removed from the DOM and destroyed after the effect finishes",
        "memberOf" : ""
      },
      {
        "name" : "scope",
        "type" : "Object",
        "desc" : "The scope of the effect function",
        "memberOf" : ""
      },
      {
        "name" : "stopFx",
        "type" : "Boolean",
        "desc" : "Whether subsequent effects should be stopped and removed after the current effect finishes",
        "memberOf" : ""
      },
      {
        "name" : "useDisplay",
        "type" : "Boolean",
        "desc" : "Whether to use the <i>display</i> CSS property instead of <i>visibility</i> when hiding Elements (only applies to \neffects that end with the element being visually hidden, ignored otherwise)",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "fadeIn",
        "type" : "function",
        "desc" : "Fade an element in (from transparent to opaque).  The ending opacity can be specified\nusing the \"endOpacity\" config option.\nUsage:\n<pre><code>\n// default: fade in from opacity 0 to 100%\nel.fadeIn();\n\n// custom: fade in from opacity 0 to 75% over 2 seconds\nel.fadeIn({ endOpacity: .75, duration: 2});\n\n// common config options shown with default values\nel.fadeIn({\n    endOpacity: 1, //can be any value between 0 and 1 (e.g. .5)\n    easing: 'easeOut',\n    duration: .5\n});\n</code></pre>",
        "sig" : "(options)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "fadeOut",
        "type" : "function",
        "desc" : "Fade an element out (from opaque to transparent).  The ending opacity can be specified\nusing the \"endOpacity\" config option.\nUsage:\n<pre><code>\n// default: fade out from the element's current opacity to 0\nel.fadeOut();\n\n// custom: fade out from the element's current opacity to 25% over 2 seconds\nel.fadeOut({ endOpacity: .25, duration: 2});\n\n// common config options shown with default values\nel.fadeOut({\n    endOpacity: 0, //can be any value between 0 and 1 (e.g. .5)\n    easing: 'easeOut',\n    duration: .5\n    remove: false,\n    useDisplay: false\n});\n</code></pre>",
        "sig" : "(options)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "frame",
        "type" : "function",
        "desc" : "Shows a ripple of exploding, attenuating borders to draw attention to an Element.\nUsage:\n<pre><code>\n// default: a single light blue ripple\nel.frame();\n\n// custom: 3 red ripples lasting 3 seconds total\nel.frame(\"ff0000\", 3, { duration: 3 });\n\n// common config options shown with default values\nel.frame(\"C3DAF9\", 1, {\n    duration: 1 //duration of entire animation (not each individual ripple)\n    // Note: Easing is not configurable and will be ignored if included\n});\n</code></pre>",
        "sig" : "(color, count, options)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "ghost",
        "type" : "function",
        "desc" : "Slides the element while fading it out of view.  An anchor point can be optionally passed to set the \nending point of the effect.\nUsage:\n<pre><code>\n// default: slide the element downward while fading out\nel.ghost();\n\n// custom: slide the element out to the right with a 2-second duration\nel.ghost('r', { duration: 2 });\n\n// common config options shown with default values\nel.ghost('b', {\n    easing: 'easeOut',\n    duration: .5\n    remove: false,\n    useDisplay: false\n});\n</code></pre>",
        "sig" : "(anchor, options)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "hasActiveFx",
        "type" : "function",
        "desc" : "Returns true if the element has any effects actively running or queued, else returns false.",
        "sig" : "()\n{\n\n}",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "hasFxBlock",
        "type" : "function",
        "desc" : "Returns true if the element is currently blocking so that no other effect can be queued\nuntil this effect is finished, else returns false if blocking is not set.  This is commonly\nused to ensure that an effect initiated by a user action runs to completion prior to the\nsame effect being restarted (e.g., firing only one effect even if the user clicks several times).",
        "sig" : "()\n{\n\n}",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "highlight",
        "type" : "function",
        "desc" : "Highlights the Element by setting a color (applies to the background-color by default, but can be\nchanged using the \"attr\" config option) and then fading back to the original color. If no original\ncolor is available, you should provide the \"endColor\" config option which will be cleared after the animation.\nUsage:\n<pre><code>\n// default: highlight background to yellow\nel.highlight();\n\n// custom: highlight foreground text to blue for 2 seconds\nel.highlight(\"0000ff\", { attr: 'color', duration: 2 });\n\n// common config options shown with default values\nel.highlight(\"ffff9c\", {\n    attr: \"background-color\", //can be any valid CSS property (attribute) that supports a color value\n    endColor: (current color) or \"ffffff\",\n    easing: 'easeIn',\n    duration: 1\n});\n</code></pre>",
        "sig" : "(color, options)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "pause",
        "type" : "function",
        "desc" : "Creates a pause before any subsequent queued effects begin.  If there are\nno effects queued after the pause it will have no effect.\nUsage:\n<pre><code>\nel.pause(1);\n</code></pre>",
        "sig" : "(seconds)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "puff",
        "type" : "function",
        "desc" : "Fades the element out while slowly expanding it in all directions.  When the effect is completed, the \nelement will be hidden (visibility = 'hidden') but block elements will still take up space in the document. \nThe element must be removed from the DOM using the 'remove' config option if desired.\nUsage:\n<pre><code>\n// default\nel.puff();\n\n// common config options shown with default values\nel.puff({\n    easing: 'easeOut',\n    duration: .5,\n    remove: false,\n    useDisplay: false\n});\n</code></pre>",
        "sig" : "(options)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "scale",
        "type" : "function",
        "desc" : "Animates the transition of an element's dimensions from a starting height/width\nto an ending height/width.\nUsage:\n<pre><code>\n// change height and width to 100x100 pixels\nel.scale(100, 100);\n\n// common config options shown with default values.  The height and width will default to\n// the element's existing values if passed as null.\nel.scale(\n    [element's width],\n    [element's height], {\n    easing: 'easeOut',\n    duration: .35\n});\n</code></pre>",
        "sig" : "(width, height, options)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "sequenceFx",
        "type" : "function",
        "desc" : "Ensures that all effects queued after sequenceFx is called on the element are\nrun in sequence.  This is the opposite of {@link #syncFx}.",
        "sig" : "()\n{\n\n}",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "shift",
        "type" : "function",
        "desc" : "Animates the transition of any combination of an element's dimensions, xy position and/or opacity.\nAny of these properties not specified in the config object will not be changed.  This effect \nrequires that at least one new dimension, position or opacity setting must be passed in on\nthe config object in order for the function to have any effect.\nUsage:\n<pre><code>\n// slide the element horizontally to x position 200 while changing the height and opacity\nel.shift({ x: 200, height: 50, opacity: .8 });\n\n// common config options shown with default values.\nel.shift({\n    width: [element's width],\n    height: [element's height],\n    x: [element's x position],\n    y: [element's y position],\n    opacity: [element's opacity],\n    easing: 'easeOut',\n    duration: .35\n});\n</code></pre>",
        "sig" : "(options)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "slideIn",
        "type" : "function",
        "desc" : "Slides the element into view.  An anchor point can be optionally passed to set the point of\norigin for the slide effect.  This function automatically handles wrapping the element with\na fixed-size container if needed.  See the Fx class overview for valid anchor point options.\nUsage:\n<pre><code>\n// default: slide the element in from the top\nel.slideIn();\n\n// custom: slide the element in from the right with a 2-second duration\nel.slideIn('r', { duration: 2 });\n\n// common config options shown with default values\nel.slideIn('t', {\n    easing: 'easeOut',\n    duration: .5\n});\n</code></pre>",
        "sig" : "(anchor, options)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "slideOut",
        "type" : "function",
        "desc" : "Slides the element out of view.  An anchor point can be optionally passed to set the end point\nfor the slide effect.  When the effect is completed, the element will be hidden (visibility = \n'hidden') but block elements will still take up space in the document.  The element must be removed\nfrom the DOM using the 'remove' config option if desired.  This function automatically handles \nwrapping the element with a fixed-size container if needed.  See the Fx class overview for valid anchor point options.\nUsage:\n<pre><code>\n// default: slide the element out to the top\nel.slideOut();\n\n// custom: slide the element out to the right with a 2-second duration\nel.slideOut('r', { duration: 2 });\n\n// common config options shown with default values\nel.slideOut('t', {\n    easing: 'easeOut',\n    duration: .5,\n    remove: false,\n    useDisplay: false\n});\n</code></pre>",
        "sig" : "(anchor, options)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "stopFx",
        "type" : "function",
        "desc" : "Stops any running effects and clears the element's internal effects queue if it contains\nany additional effects that haven't started yet.",
        "sig" : "()\n{\n\n}",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "switchOff",
        "type" : "function",
        "desc" : "Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).\nWhen the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still \ntake up space in the document. The element must be removed from the DOM using the 'remove' config option if desired.\nUsage:\n<pre><code>\n// default\nel.switchOff();\n\n// all config options shown with default values\nel.switchOff({\n    easing: 'easeIn',\n    duration: .3,\n    remove: false,\n    useDisplay: false\n});\n</code></pre>",
        "sig" : "(options)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "syncFx",
        "type" : "function",
        "desc" : "Ensures that all effects queued after syncFx is called on the element are\nrun concurrently.  This is the opposite of {@link #sequenceFx}.",
        "sig" : "()\n{\n\n}",
        "static" : true,
        "memberOf" : ""
      }
    ]
  },
  "Roo.GridPanel" : {
    "props" : [
      {
        "name" : "adjustments",
        "type" : "Array",
        "desc" : "Values to <b>add</b> to the width/height when doing a {@link #fitToFrame} (default is [0, 0])",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "autoCreate",
        "type" : "Boolean/Object",
        "desc" : "True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "autoScroll",
        "type" : "Boolean",
        "desc" : "True to scroll overflow in this panel (use with {@link #fitToFrame})",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "background",
        "type" : "Boolean",
        "desc" : "True if the panel should not be activated when it is added (defaults to false)",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "closable",
        "type" : "Boolean",
        "desc" : "True if the panel can be closed/removed",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "content",
        "type" : "String",
        "desc" : "Raw content to fill content panel with (uses setContent on construction.)",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "fitContainer",
        "type" : "Boolean",
        "desc" : "When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "fitToFrame",
        "type" : "Boolean",
        "desc" : "True for this panel to adjust its size to fit when the region resizes  (defaults to false)",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadOnce",
        "type" : "Boolean",
        "desc" : "When used with {@link #url}, calls {@link #setUrl} with this value",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "params",
        "type" : "String/Object",
        "desc" : "When used with {@link #url}, calls {@link #setUrl} with this value",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "region",
        "type" : "String",
        "desc" : [
          "(center",
          "north",
          "south",
          "east",
          "west)"
        ],
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "resizeEl",
        "type" : "String/HTMLElement/Element",
        "desc" : "An element to resize if {@link #fitToFrame} is true (instead of this panel's element)",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "Extra style to add to the content panel",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "The title for this panel",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "toolbar",
        "type" : "Toolbar",
        "desc" : "A toolbar for this panel",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "Calls {@link #setUrl} with this value",
        "memberOf" : "Roo.ContentPanel"
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this panel is activated.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this panel is activated.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when this tab is created",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires when this panel is resized if fitToFrame is true.",
        "sig" : "function (_self, width, height)\n{\n\n}",
        "memberOf" : "Roo.ContentPanel"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addxtype",
        "type" : "function",
        "desc" : "Adds a xtype elements to the panel - currently only supports Forms, View, JsonView.\n<pre><code>\n\nlayout.addxtype({\n       xtype : 'Form',\n       items: [ .... ]\n   }\n);\n\n</code></pre>",
        "sig" : "(cfg)",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this panel",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns this panel's element - used by regiosn to add.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "getGrid",
        "type" : "function",
        "desc" : "Returns the grid for this panel",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns this panel's id",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "getTitle",
        "type" : "function",
        "desc" : "Returns this panel's title",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "getToolbar",
        "type" : "function",
        "desc" : "Returns the toolbar for this Panel if one was configured.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "getUpdateManager",
        "type" : "function",
        "desc" : "Get the {@link Roo.UpdateManager} for this panel. Enables you to perform Ajax updates.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isClosable",
        "type" : "function",
        "desc" : "Returns true is this panel was configured to be closable",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Loads this content panel immediately with content from XHR. Note: to delay loading until the panel is activated, use {@link #setUrl}.",
        "sig" : "(url, params, callback, discardUrl)",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "refresh",
        "type" : "function",
        "desc" : "Force a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the {@link #setUrl} method has not been called.\n  This does not activate the panel, just updates its content.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setContent",
        "type" : "function",
        "desc" : "Updates this panel's element",
        "sig" : "(content, loadScripts)",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "setTitle",
        "type" : "function",
        "desc" : "Set this panel's title",
        "sig" : "(title)",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "setUrl",
        "type" : "function",
        "desc" : "Set a URL to be used to load the content for this panel. When this panel is activated, the content will be loaded from that URL.",
        "sig" : "(url, params, loadOnce)",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.HtmlEditorCore" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "(in pixels)",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resizable",
        "type" : "String",
        "desc" : "'s' or 'se' or 'e' - wrapps the element in a\n                       Roo.resizable.",
        "memberOf" : ""
      },
      {
        "name" : "stylesheets",
        "type" : "Array",
        "desc" : "url of stylesheets. set to [] to disable stylesheets.",
        "memberOf" : ""
      },
      {
        "name" : "the",
        "type" : "Roo.form.HtmlEditor|Roo.bootstrap.HtmlEditor",
        "desc" : "owner field",
        "memberOf" : ""
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "(in pixels)",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when the editor is first receives the focus. Any insertion must wait\nuntil after this event.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforepush",
        "type" : "function",
        "desc" : "Fires before the iframe editor is updated with content from the textarea. Return false\nto cancel the push.",
        "sig" : "function (_self, html)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforesync",
        "type" : "function",
        "desc" : "Fires before the textarea is updated with content from the editor iframe. Return false\nto cancel the sync.",
        "sig" : "function (_self, html)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "",
        "sig" : "function ()\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "",
        "sig" : "function ()\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "editorevent",
        "type" : "function",
        "desc" : "Fires when on any editor (mouse up/down cursor movement etc.) - used for toolbar hooks.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "",
        "sig" : "function ()\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "initialize",
        "type" : "function",
        "desc" : "Fires when the editor is fully initialized (including the iframe)",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "push",
        "type" : "function",
        "desc" : "Fires when the iframe editor is updated with content from the textarea.",
        "sig" : "function (_self, html)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "",
        "sig" : "function ()\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "sync",
        "type" : "function",
        "desc" : "Fires when the textarea is updated with content from the editor iframe.",
        "sig" : "function (_self, html)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "cleanHtml",
        "type" : "function",
        "desc" : "Protected method that will not generally be called directly. If you need/want\ncustom HTML cleanup, this is the method you should override.",
        "sig" : "(html)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "cleanTableWidths",
        "type" : "function",
        "desc" : "cleanTableWidths.\n\nQuite often pasting from word etc.. results in tables with column and widths.\nThis does not work well on fluid HTML layouts - like emails. - so this code should hunt an destroy them..",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "cleanWord",
        "type" : "function",
        "desc" : "Clean up MS wordisms...",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "execCmd",
        "type" : "function",
        "desc" : "Executes a Midas editor command directly on the editor document.\nFor visual commands, you should use {@link #relayCmd} instead.\n<b>This should only be called after the editor is initialized.</b>",
        "sig" : "(cmd, value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getDocMarkup",
        "type" : "function",
        "desc" : "Protected method that will not generally be called directly. It\nis called when the editor initializes the iframe with HTML contents. Override this method if you\nwant to change the initialization markup of the iframe (e.g. to add stylesheets).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "insertAtCursor",
        "type" : "function",
        "desc" : "Inserts the passed text at the current cursor position. Note: the editor must be initialized and activated\nto insert tRoo.",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "iterateChildren",
        "type" : "function",
        "desc" : "iterateChildren of a Node, calling fn each time, using this as the scole..",
        "sig" : "(node, fn)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "pushValue",
        "type" : "function",
        "desc" : "Protected method that will not generally be called directly. Pushes the value of the textarea\ninto the iframe editor.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "rangeIntersectsNode",
        "type" : "function",
        "desc" : "Range intersection.. the hard stuff...\n '-1' = before\n '0' = hits..\n '1' = after.\n        [ -- selected range --- ]\n  [fail]                        [fail]\n\n   basically..\n     if end is before start or  hits it. fail.\n     if start is after end or hits it fail.\n\n  if either hits (but other is outside. - then it's not",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "relayCmd",
        "type" : "function",
        "desc" : "Executes a Midas editor command on the editor document and performs necessary focus and\ntoolbar updates. <b>This should only be called after the editor is initialized.</b>",
        "sig" : "(cmd, value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncValue",
        "type" : "function",
        "desc" : "HTML Editor -> Textarea\nProtected method that will not generally be called directly. Syncs the contents\nof the editor iframe with the textarea.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "toggleSourceEdit",
        "type" : "function",
        "desc" : "Toggles the editor between standard and source edit mode.",
        "sig" : "(sourceEdit)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.JsonView" : {
    "props" : [
      {
        "name" : "dataName",
        "type" : "String",
        "desc" : "the named area of the template to use as the data area\n                         Works with domtemplates roo-name=\"name\"",
        "memberOf" : "Roo.View"
      },
      {
        "name" : "el",
        "type" : "String|Roo.Element",
        "desc" : "The container element.",
        "memberOf" : "Roo.View"
      },
      {
        "name" : "emptyText",
        "type" : "String",
        "desc" : "The empty text to show when nothing is loaded.",
        "memberOf" : "Roo.View"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "multiSelect",
        "type" : "Boolean",
        "desc" : "Allow multiple selection",
        "memberOf" : "Roo.View"
      },
      {
        "name" : "selectedClass",
        "type" : "String",
        "desc" : "The css class to add to selected nodes",
        "memberOf" : "Roo.View"
      },
      {
        "name" : "singleSelect",
        "type" : "Boolean",
        "desc" : "Allow single selection",
        "memberOf" : "Roo.View"
      },
      {
        "name" : "store",
        "type" : "Roo.data.Store",
        "desc" : "Data store to load data from.",
        "memberOf" : "Roo.View"
      },
      {
        "name" : "text",
        "type" : "String",
        "desc" : "to display on mask (default Loading)",
        "memberOf" : "Roo.View"
      },
      {
        "name" : "tickable",
        "type" : "Boolean",
        "desc" : "- selecting",
        "memberOf" : "Roo.View"
      },
      {
        "name" : "toggleSelect",
        "type" : "Boolean",
        "desc" : "- selecting",
        "memberOf" : "Roo.View"
      },
      {
        "name" : "tpl",
        "type" : "String|Roo.Template",
        "desc" : "The template used by this View",
        "memberOf" : "Roo.View"
      }
    ],
    "events" : [
      {
        "name" : "beforeclick",
        "type" : "function",
        "desc" : "Fires before a click is processed. Returns false to cancel the default action.",
        "sig" : "function (_self, index, node, e)\n{\n\n}",
        "memberOf" : "Roo.View"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before rendering of the downloaded JSON data.",
        "sig" : "function (_self, data)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeselect",
        "type" : "function",
        "desc" : "Fires before a selection is made. If any handlers return false, the selection is cancelled.",
        "sig" : "function (_self, node, selections)\n{\n\n}",
        "memberOf" : "Roo.View"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when a template node is clicked.",
        "sig" : "function (_self, index, node, e)\n{\n\n}",
        "memberOf" : "Roo.View"
      },
      {
        "name" : "contextmenu",
        "type" : "function",
        "desc" : "Fires when a template node is right clicked.",
        "sig" : "function (_self, index, node, e)\n{\n\n}",
        "memberOf" : "Roo.View"
      },
      {
        "name" : "dblclick",
        "type" : "function",
        "desc" : "Fires when a template node is double clicked.",
        "sig" : "function (_self, index, node, e)\n{\n\n}",
        "memberOf" : "Roo.View"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Fires when data is loaded.",
        "sig" : "function (_self, data, response)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "loadexception",
        "type" : "function",
        "desc" : "Fires when loading fails.",
        "sig" : "function (_self, response)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "preparedata",
        "type" : "function",
        "desc" : "Fires on every row to render, to allow you to change the data.",
        "sig" : "function (_self, data)\n{\n\n}",
        "memberOf" : "Roo.View"
      },
      {
        "name" : "selectionchange",
        "type" : "function",
        "desc" : "Fires when the selected nodes change.",
        "sig" : "function (_self, selections)\n{\n\n}",
        "memberOf" : "Roo.View"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearFilter",
        "type" : "function",
        "desc" : "Clears the current filter.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "clearSelections",
        "type" : "function",
        "desc" : "Clear all selections",
        "sig" : "(suppressEvent)",
        "static" : false,
        "memberOf" : "Roo.View"
      },
      {
        "name" : "filter",
        "type" : "function",
        "desc" : "Filter the data by a specific property.",
        "sig" : "(property, value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "filterBy",
        "type" : "function",
        "desc" : "Filter by a function. The passed function will be called with each\nobject in the current dataset. If the function returns true the value is kept,\notherwise it is filtered.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "findItemFromChild",
        "type" : "function",
        "desc" : "Returns the template node the passed child belongs to or null if it doesn't belong to one.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.View"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getCount",
        "type" : "function",
        "desc" : "Get the number of records in the current JSON dataset",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the element this view is bound to.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.View"
      },
      {
        "name" : "getNode",
        "type" : "function",
        "desc" : "Gets a template node.",
        "sig" : "(nodeInfo)",
        "static" : false,
        "memberOf" : "Roo.View"
      },
      {
        "name" : "getNodeData",
        "type" : "function",
        "desc" : "Returns the JSON object for the specified node(s)",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getNodes",
        "type" : "function",
        "desc" : "Gets a range template nodes.",
        "sig" : "(startIndex, endIndex)",
        "static" : false,
        "memberOf" : "Roo.View"
      },
      {
        "name" : "getSelectedIndexes",
        "type" : "function",
        "desc" : "Get the indexes of the selected nodes.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.View"
      },
      {
        "name" : "getSelectedNodes",
        "type" : "function",
        "desc" : "Get the currently selected nodes.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.View"
      },
      {
        "name" : "getSelectionCount",
        "type" : "function",
        "desc" : "Get the number of selected nodes.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.View"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "indexOf",
        "type" : "function",
        "desc" : "Finds the index of the passed node",
        "sig" : "(nodeInfo)",
        "static" : false,
        "memberOf" : "Roo.View"
      },
      {
        "name" : "isSelected",
        "type" : "function",
        "desc" : "Returns true if the passed node is selected",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.View"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Performs an async HTTP request, and loads the JSON from the response. If <i>params</i> are specified it uses POST, otherwise it uses GET.",
        "sig" : "(url, params, callback, discardUrl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onBeforeLoad",
        "type" : "function",
        "desc" : "onbeforeLoad - masks the loading area.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.View"
      },
      {
        "name" : "prepareData",
        "type" : "function",
        "desc" : "Function to override to reformat the data that is sent to\nthe template for each node.\nDEPRICATED - use the preparedata event handler.",
        "sig" : "(data)",
        "static" : false,
        "memberOf" : "Roo.View"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "refresh",
        "type" : "function",
        "desc" : "Refreshes the view.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "refreshNode",
        "type" : "function",
        "desc" : "Refresh an individual node.",
        "sig" : "(index)",
        "static" : false,
        "memberOf" : "Roo.View"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Selects nodes.",
        "sig" : "(nodeInfo, keepExisting, suppressEvent)",
        "static" : false,
        "memberOf" : "Roo.View"
      },
      {
        "name" : "setStore",
        "type" : "function",
        "desc" : "Changes the data store this view uses and refresh the view.",
        "sig" : "(store)",
        "static" : false,
        "memberOf" : "Roo.View"
      },
      {
        "name" : "sort",
        "type" : "function",
        "desc" : "Sorts the data for this view and refreshes it.",
        "sig" : "(property, direction, sortType)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unselect",
        "type" : "function",
        "desc" : "Unselects nodes.",
        "sig" : "(nodeInfo, keepExisting, suppressEvent)",
        "static" : false,
        "memberOf" : "Roo.View"
      }
    ]
  },
  "Roo.KeyMap" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "addBinding",
        "type" : "function",
        "desc" : "Add a new binding to this KeyMap. The following config object properties are supported:\n<pre>\nProperty    Type             Description\n----------  ---------------  ----------------------------------------------------------------------\nkey         String/Array     A single keycode or an array of keycodes to handle\nshift       Boolean          True to handle key only when shift is pressed (defaults to false)\nctrl        Boolean          True to handle key only when ctrl is pressed (defaults to false)\nalt         Boolean          True to handle key only when alt is pressed (defaults to false)\nfn          Function         The function to call when KeyMap finds the expected key combination\nscope       Object           The scope of the callback function\n</pre>\n\nUsage:\n<pre><code>\n// Create a KeyMap\nvar map = new Roo.KeyMap(document, {\n    key: Roo.EventObject.ENTER,\n    fn: handleKey,\n    scope: this\n});\n\n//Add a new binding to the existing KeyMap later\nmap.addBinding({\n    key: 'abc',\n    shift: true,\n    fn: handleKey,\n    scope: this\n});\n</code></pre>",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this KeyMap",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enables this KeyMap",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isEnabled",
        "type" : "function",
        "desc" : "Returns true if this KeyMap is enabled",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Shorthand for adding a single key listener",
        "sig" : "(key, fn, scope)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.KeyNav" : {
    "props" : [
      {
        "name" : "defaultEventAction",
        "type" : "String",
        "desc" : "The method to call on the {@link Roo.EventObject} after this KeyNav intercepts a key.  Valid values are\n{@link Roo.EventObject#stopEvent}, {@link Roo.EventObject#preventDefault} and\n{@link Roo.EventObject#stopPropagation} (defaults to 'stopEvent')",
        "memberOf" : ""
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable this KeyNav instance (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "forceKeyDown",
        "type" : "Boolean",
        "desc" : "Handle the keydown event instead of keypress (defaults to false).  KeyNav automatically does this for IE since\nIE does not propagate special keys on keypress, but setting this to true will force other browsers to also\nhandle keydown instead of keypress.",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this KeyNav",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this KeyNav",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.Layer" : {
    "props" : [
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "CSS class to add to the element",
        "memberOf" : ""
      },
      {
        "name" : "constrain",
        "type" : "Boolean",
        "desc" : "False to disable constrain to viewport (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "dh",
        "type" : "Object",
        "desc" : "DomHelper object config to create element with (defaults to {tag: \"div\", cls: \"x-layer\"}).",
        "memberOf" : ""
      },
      {
        "name" : "shadow",
        "type" : "String/Boolean",
        "desc" : "True to create a shadow element with default class \"x-layer-shadow\", or\nyou can pass a string with a CSS class name. False turns off the shadow.",
        "memberOf" : ""
      },
      {
        "name" : "shadowOffset",
        "type" : "Number",
        "desc" : "Number of pixels to offset the shadow (defaults to 3)",
        "memberOf" : ""
      },
      {
        "name" : "shim",
        "type" : "Boolean",
        "desc" : "False to disable the iframe shim in browsers which need one (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "zindex",
        "type" : "Number",
        "desc" : "Starting z-index (defaults to 11000)",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "addClass",
        "type" : "function",
        "desc" : "Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out.",
        "sig" : "(className)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "addClassOnClick",
        "type" : "function",
        "desc" : "Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)",
        "sig" : "(className)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "addClassOnFocus",
        "type" : "function",
        "desc" : "Sets up event handlers to add and remove a css class when this element has the focus",
        "sig" : "(className)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "addClassOnOver",
        "type" : "function",
        "desc" : "Sets up event handlers to add and remove a css class when the mouse is over this element",
        "sig" : "(className, preventFlicker)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "addKeyListener",
        "type" : "function",
        "desc" : "Convenience method for constructing a KeyMap",
        "sig" : "(key, fn, scope)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "addKeyMap",
        "type" : "function",
        "desc" : "Creates a KeyMap for this element",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler",
        "sig" : "(eventName, fn, scope, options)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "alignTo",
        "type" : "function",
        "desc" : "Aligns this element with another element relative to the specified anchor points. If the other element is the\ndocument it aligns it to the viewport.\nThe position parameter is optional, and can be specified in any one of the following formats:\n<ul>\n  <li><b>Blank</b>: Defaults to aligning the element's top-left corner to the target's bottom-left corner (\"tl-bl\").</li>\n  <li><b>One anchor (deprecated)</b>: The passed anchor position is used as the target element's anchor point.\n      The element being aligned will position its top-left corner (tl) to that point.  <i>This method has been\n      deprecated in favor of the newer two anchor syntax below</i>.</li>\n  <li><b>Two anchors</b>: If two values from the table below are passed separated by a dash, the first value is used as the\n      element's anchor point, and the second value is used as the target's anchor point.</li>\n</ul>\nIn addition to the anchor points, the position parameter also supports the \"?\" character.  If \"?\" is passed at the end of\nthe position string, the element will attempt to align as specified, but the position will be adjusted to constrain to\nthe viewport if necessary.  Note that the element being aligned might be swapped to align to a different position than\nthat specified in order to enforce the viewport constraints.\nFollowing are all of the supported anchor positions:\n    <pre>\n    Value  Description\n    -----  -----------------------------\n    tl     The top left corner (default)\n    t      The center of the top edge\n    tr     The top right corner\n    l      The center of the left edge\n    c      In the center of the element\n    r      The center of the right edge\n    bl     The bottom left corner\n    b      The center of the bottom edge\n    br     The bottom right corner\n    </pre>\n    Example Usage:\n    <pre><code>\n    // align el to other-el using the default positioning (\"tl-bl\", non-constrained)\n    el.alignTo(\"other-el\");\n\n    // align the top left corner of el with the top right corner of other-el (constrained to viewport)\n    el.alignTo(\"other-el\", \"tr?\");\n\n    // align the bottom right corner of el with the center left edge of other-el\n    el.alignTo(\"other-el\", \"br-l?\");\n\n    // align the center of el with the bottom left corner of other-el and\n    // adjust the x position by -6 pixels (and the y position by 0)\n    el.alignTo(\"other-el\", \"c-bl\", [-6, 0]);\n    </code></pre>",
        "sig" : "(element, position, offsets, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "anchorTo",
        "type" : "function",
        "desc" : "Anchors an element to another element and realigns it when the window is resized.",
        "sig" : "(element, position, offsets, animate, monitorScroll, callback)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "animate",
        "type" : "function",
        "desc" : "Perform animation on this element.",
        "sig" : "(args, duration, onComplete, easing, animType)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "appendChild",
        "type" : "function",
        "desc" : "Appends the passed element(s) to this element",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "appendTo",
        "type" : "function",
        "desc" : "Appends this element to the passed element",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "applyStyles",
        "type" : "function",
        "desc" : "More flexible version of {@link #setStyle} for setting style properties.",
        "sig" : "(styles)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "attr",
        "type" : "function",
        "desc" : "Sets or Returns the value the dom attribute value",
        "sig" : "(name, value)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "autoHeight",
        "type" : "function",
        "desc" : "Measures the element's content height and updates height to match. Note: this function uses setTimeout so\nthe new height may not be available immediately.",
        "sig" : "(animate, duration, onComplete, easing)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "beginMeasure",
        "type" : "function",
        "desc" : "Temporarily enables offsets (width,height,x,y) for an element with display:none, use endMeasure() when done.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Tries to blur the element. Any exceptions are caught and ignored.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "boxWrap",
        "type" : "function",
        "desc" : "Wraps the specified element with a special markup/CSS block that renders by default as a gray container with a\ngradient background, rounded corners and a 4-way shadow.",
        "sig" : "(class)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "center",
        "type" : "function",
        "desc" : "Centers the Element in either the viewport, or another Element.",
        "sig" : "(centerIn)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "child",
        "type" : "function",
        "desc" : "Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).",
        "sig" : "(selector, returnDom)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "clean",
        "type" : "function",
        "desc" : "Removes worthless text nodes",
        "sig" : "(forceReclean)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "clearOpacity",
        "type" : "function",
        "desc" : "Clears any opacity settings from this element. Required in some cases for IE.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "clearPositioning",
        "type" : "function",
        "desc" : "Clear positioning back to the default when the document was loaded",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "clip",
        "type" : "function",
        "desc" : "Store the current overflow setting and clip overflow on the element - use {@link #unclip} to remove",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "contains",
        "type" : "function",
        "desc" : "Returns true if this element is an ancestor of the passed element",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "createChild",
        "type" : "function",
        "desc" : "Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.",
        "sig" : "(config, insertBefore, returnDom)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "createProxy",
        "type" : "function",
        "desc" : "Creates a proxy element of this element",
        "sig" : "(config, renderTo, matchBox)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "createShim",
        "type" : "function",
        "desc" : "Creates an iframe shim for this element to keep selects and other windowed objects from\nshowing through.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "down",
        "type" : "function",
        "desc" : "Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).",
        "sig" : "(selector, returnDom)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "enableDisplayMode",
        "type" : "function",
        "desc" : "Convenience method for setVisibilityMode(Element.DISPLAY)",
        "sig" : "(display)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "endMeasure",
        "type" : "function",
        "desc" : "Restores displays to before beginMeasure was called",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "findParent",
        "type" : "function",
        "desc" : "Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)",
        "sig" : "(selector, maxDepth, returnEl)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "findParentNode",
        "type" : "function",
        "desc" : "Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)",
        "sig" : "(selector, maxDepth, returnEl)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "findScrollableParent",
        "type" : "function",
        "desc" : "Looks at  the scrollable parent element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "fitToParent",
        "type" : "function",
        "desc" : "Sizes this element to its parent element's dimensions performing\nneccessary box adjustments.",
        "sig" : "(monitorResize, targetParent)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "fly",
        "type" : "function",
        "desc" : "Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -\nthe dom node can be overwritten by other code.",
        "sig" : "(el, named)",
        "static" : true,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Tries to focus the element. Any exceptions are caught and ignored.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "get",
        "type" : "function",
        "desc" : "Static method to retrieve Element objects. Uses simple caching to consistently return the same object.\nAutomatically fixes if an object was recreated with the same id via AJAX or DOM.",
        "sig" : "(el)",
        "static" : true,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getAlignToXY",
        "type" : "function",
        "desc" : "Gets the x,y coordinates to align this element with another element. See {@link #alignTo} for more info on the\nsupported position values.",
        "sig" : "(element, position, offsets)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getAnchorXY",
        "type" : "function",
        "desc" : "Gets the x,y coordinates specified by the anchor position on the element.",
        "sig" : "(anchor, size, local)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getAttributeNS",
        "type" : "function",
        "desc" : "Returns the value of a namespaced attribute from the element's underlying DOM node.",
        "sig" : "(namespace, name)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getBorderWidth",
        "type" : "function",
        "desc" : "Gets the width of the border(s) for the specified side(s)",
        "sig" : "(side)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getBottom",
        "type" : "function",
        "desc" : "Gets the bottom Y coordinate of the element (element Y position + element height)",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Return a box {x, y, width, height} that can be used to set another elements\nsize/location to match this element.",
        "sig" : "(contentBox, local)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getCenterXY",
        "type" : "function",
        "desc" : "Calculates the x, y to center this element on the screen",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getColor",
        "type" : "function",
        "desc" : "Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values\nare convert to standard 6 digit hex color.",
        "sig" : "(attr, defaultValue, prefix)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getComputedHeight",
        "type" : "function",
        "desc" : "Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders\nwhen needed to simulate offsetHeight when offsets aren't available. This may not work on display:none elements\nif a height has not been set using CSS.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getComputedWidth",
        "type" : "function",
        "desc" : "Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders\nwhen needed to simulate offsetWidth when offsets aren't available. This may not work on display:none elements\nif a width has not been set using CSS.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getFrameWidth",
        "type" : "function",
        "desc" : "Returns the sum width of the padding and borders for the passed \"sides\". See getBorderWidth()\n         for more information about the sides.",
        "sig" : "(sides)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getHeight",
        "type" : "function",
        "desc" : "Returns the offset height of the element",
        "sig" : "(contentHeight)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getLeft",
        "type" : "function",
        "desc" : "Gets the left X coordinate",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getMargins",
        "type" : "function",
        "desc" : "Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,\nthen it returns the calculated width of the sides (see getPadding)",
        "sig" : "(sides)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getNextSibling",
        "type" : "function",
        "desc" : "Gets the next sibling, skipping text nodes",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getPadding",
        "type" : "function",
        "desc" : "Gets the width of the padding(s) for the specified side(s)",
        "sig" : "(side)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getPositioning",
        "type" : "function",
        "desc" : "Gets an object with all CSS positioning properties. Useful along with setPostioning to get\nsnapshot before performing an update and then restoring the element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getPrevSibling",
        "type" : "function",
        "desc" : "Gets the previous sibling, skipping text nodes",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getRegion",
        "type" : "function",
        "desc" : "Returns the region of the given element.\nThe element must be part of the DOM tree to have a region (display:none or elements not appended return false).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getRight",
        "type" : "function",
        "desc" : "Gets the right X coordinate of the element (element X position + element width)",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getScroll",
        "type" : "function",
        "desc" : "Returns the current scroll position of the element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Returns the size of the element.",
        "sig" : "(contentSize)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getStyle",
        "type" : "function",
        "desc" : "Normalizes currentStyle and computedStyle. This is not YUI getStyle, it is an optimised version.",
        "sig" : "(property)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getStyles",
        "type" : "function",
        "desc" : "Returns an object with properties matching the styles requested.\nFor example, el.getStyles('color', 'font-size', 'width') might return\n{'color': '#FFFFFF', 'font-size': '13px', 'width': '100px'}.",
        "sig" : "(style1, style2)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getTop",
        "type" : "function",
        "desc" : "Gets the top Y coordinate",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getUpdateManager",
        "type" : "function",
        "desc" : "Gets this element's UpdateManager",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the value of the \"value\" attribute",
        "sig" : "(asNumber)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getViewSize",
        "type" : "function",
        "desc" : "Returns the width and height of the viewport.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getWidth",
        "type" : "function",
        "desc" : "Returns the offset width of the element",
        "sig" : "(contentWidth)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getX",
        "type" : "function",
        "desc" : "Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getXY",
        "type" : "function",
        "desc" : "Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "getY",
        "type" : "function",
        "desc" : "Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "hasClass",
        "type" : "function",
        "desc" : "Checks if the specified CSS class exists on this element's DOM node.",
        "sig" : "(className)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this element - Uses display mode to determine whether to use \"display\" or \"visibility\". See {@link #setVisible}.",
        "sig" : "(animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "initDD",
        "type" : "function",
        "desc" : "Initializes a {@link Roo.dd.DD} drag drop object for this element.",
        "sig" : "(group, config, overrides)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "initDDProxy",
        "type" : "function",
        "desc" : "Initializes a {@link Roo.dd.DDProxy} object for this element.",
        "sig" : "(group, config, overrides)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "initDDTarget",
        "type" : "function",
        "desc" : "Initializes a {@link Roo.dd.DDTarget} object for this element.",
        "sig" : "(group, config, overrides)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "insertAfter",
        "type" : "function",
        "desc" : "Inserts this element after the passed element in the DOM",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "insertBefore",
        "type" : "function",
        "desc" : "Inserts this element before the passed element in the DOM",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "insertFirst",
        "type" : "function",
        "desc" : "Inserts (or creates) an element (or DomHelper config) as the first child of the this element",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "insertHtml",
        "type" : "function",
        "desc" : "Inserts an html fragment into this element",
        "sig" : "(where, html, returnEl)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "insertSibling",
        "type" : "function",
        "desc" : "Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element",
        "sig" : "(el, where, returnDom)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "is",
        "type" : "function",
        "desc" : "Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)",
        "sig" : "(selector)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "isBorderBox",
        "type" : "function",
        "desc" : "Tests various css rules/browsers to determine if this element uses a border box",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "isDisplayed",
        "type" : "function",
        "desc" : "Returns true if display is not \"none\"",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "isMasked",
        "type" : "function",
        "desc" : "Returns true if this element is masked",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "isScrollable",
        "type" : "function",
        "desc" : "Returns true if this element is scrollable.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Checks whether the element is currently visible using both visibility and display properties.",
        "sig" : "(deep)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Direct access to the UpdateManager update() method (takes the same parameters).",
        "sig" : "(url, params, callback, discardUrl)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "mask",
        "type" : "function",
        "desc" : "Puts a mask over this element to disable user interaction. Requires core.css.\nThis method can only be applied to elements which accept child nodes.",
        "sig" : "(msg, msgCls)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Move this element relative to its current position.",
        "sig" : "(direction, distance, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "moveTo",
        "type" : "function",
        "desc" : "Sets the position of the element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
        "sig" : "(x, y, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler (Shorthand for addListener)",
        "sig" : "(eventName, fn, scope, options)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "position",
        "type" : "function",
        "desc" : "Initializes positioning on this element. If a desired position is not passed, it will make the\nthe element positioned relative IF it is not already positioned.",
        "sig" : "(pos, zIndex, x, y)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "query",
        "type" : "function",
        "desc" : "Selects child nodes based on the passed CSS selector (the selector should not contain an id).",
        "sig" : "(selector)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "radioClass",
        "type" : "function",
        "desc" : "Adds one or more CSS classes to this element and removes the same class(es) from all siblings.",
        "sig" : "(className)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Removes this element from the DOM and deletes it from the cache",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "removeAllListeners",
        "type" : "function",
        "desc" : "Removes all previous added listeners from this element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "removeClass",
        "type" : "function",
        "desc" : "Removes one or more CSS classes from the element.",
        "sig" : "(className)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes an event handler from this element",
        "sig" : "(eventName, fn, scope)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "repaint",
        "type" : "function",
        "desc" : "Forces the browser to repaint this element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "replace",
        "type" : "function",
        "desc" : "Replaces the passed element with this element",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "replaceClass",
        "type" : "function",
        "desc" : "Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added.",
        "sig" : "(oldClassName, newClassName)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "scroll",
        "type" : "function",
        "desc" : "Scrolls this element the specified direction. Does bounds checking to make sure the scroll is\nwithin this element's scrollable range.",
        "sig" : "(direction, distance, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "scrollIntoView",
        "type" : "function",
        "desc" : "Scrolls this element into view within the passed container.",
        "sig" : "(container, hscroll)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "scrollTo",
        "type" : "function",
        "desc" : "Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().",
        "sig" : "(side, value, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Creates a {@link Roo.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id).",
        "sig" : "(selector, unique)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "set",
        "type" : "function",
        "desc" : "Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)",
        "sig" : "(o, useSet)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setBottom",
        "type" : "function",
        "desc" : "Sets the element's CSS bottom style.",
        "sig" : "(bottom)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setBounds",
        "type" : "function",
        "desc" : "Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently.",
        "sig" : "(x, y, width, height, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setBox",
        "type" : "function",
        "desc" : "Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently.",
        "sig" : "(box, adjust, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setDisplayed",
        "type" : "function",
        "desc" : "Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setHeight",
        "type" : "function",
        "desc" : "Set the height of the element",
        "sig" : "(height, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setLeft",
        "type" : "function",
        "desc" : "Sets the element's left position directly using CSS style (instead of {@link #setX}).",
        "sig" : "(left)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setLeftTop",
        "type" : "function",
        "desc" : "Quick set left and top adding default units",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setLocation",
        "type" : "function",
        "desc" : "Sets the position of the element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
        "sig" : "(x, y, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setOpacity",
        "type" : "function",
        "desc" : "Set the opacity of the element",
        "sig" : "(opacity, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setPositioning",
        "type" : "function",
        "desc" : "Set positioning with an object returned by getPositioning().",
        "sig" : "(posCfg)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setRegion",
        "type" : "function",
        "desc" : "Sets the element's position and size the the specified region. If animation is true then width, height, x and y will be animated concurrently.",
        "sig" : "(region, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setRight",
        "type" : "function",
        "desc" : "Sets the element's CSS right style.",
        "sig" : "(right)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Set the size of the element. If animation is true, both width an height will be animated concurrently.",
        "sig" : "(width, height, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setStyle",
        "type" : "function",
        "desc" : "Wrapper for setting style properties, also takes single object parameter of multiple styles.",
        "sig" : "(property, value)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setTop",
        "type" : "function",
        "desc" : "Sets the element's top position directly using CSS style (instead of {@link #setY}).",
        "sig" : "(top)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setVisibilityMode",
        "type" : "function",
        "desc" : "Sets the element's visibility mode. When setVisible() is called it\nwill use this to determine whether to set the visibility or the display property.",
        "sig" : "(visMode)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use\nthe display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property.",
        "sig" : "(visible, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setWidth",
        "type" : "function",
        "desc" : "Set the width of the element",
        "sig" : "(width, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setX",
        "type" : "function",
        "desc" : "Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
        "sig" : "(The, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setXY",
        "type" : "function",
        "desc" : "Sets the position of the element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
        "sig" : "(pos, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setY",
        "type" : "function",
        "desc" : "Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).",
        "sig" : "(The, animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "setZIndex",
        "type" : "function",
        "desc" : "Sets the z-index of this layer and adjusts any shadow and shim z-indexes. The layer z-index is automatically\nincremented by two more than the value passed in so that it always shows above any shadow or shim (the shadow\nelement, if any, will be assigned z-index + 1, and the shim element, if any, will be assigned the unmodified z-index).",
        "sig" : "(zindex)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this element - Uses display mode to determine whether to use \"display\" or \"visibility\". See {@link #setVisible}.",
        "sig" : "(animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "swallowEvent",
        "type" : "function",
        "desc" : "Stops the specified event from bubbling and optionally prevents the default action",
        "sig" : "(eventName, preventDefault)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "toggle",
        "type" : "function",
        "desc" : "Toggles the element's visibility or display, depending on visibility mode.",
        "sig" : "(animate)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "toggleClass",
        "type" : "function",
        "desc" : "Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).",
        "sig" : "(className)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "translatePoints",
        "type" : "function",
        "desc" : "Translates the passed page coordinates into left/top css values for this element",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes an event handler from this element (shorthand for removeListener)",
        "sig" : "(eventName, fn)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "unclip",
        "type" : "function",
        "desc" : "Return clipping (overflow) to original clipping before clip() was called",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "unmask",
        "type" : "function",
        "desc" : "Removes a previously applied mask. If removeEl is true the mask overlay is destroyed, otherwise\nit is cached for reuse.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "unselectable",
        "type" : "function",
        "desc" : "Disables text selection for this element (normalized across browsers)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "up",
        "type" : "function",
        "desc" : "Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).\nThis is a shortcut for findParentNode() that always returns an Roo.Element.",
        "sig" : "(selector, maxDepth)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "update",
        "type" : "function",
        "desc" : "Update the innerHTML of this element, optionally searching for and processing scripts",
        "sig" : "(html, loadScripts, callback)",
        "static" : false,
        "memberOf" : "Roo.Element"
      },
      {
        "name" : "wrap",
        "type" : "function",
        "desc" : "Creates and wraps this element with another element",
        "sig" : "(config, returnDom)",
        "static" : false,
        "memberOf" : "Roo.Element"
      }
    ]
  },
  "Roo.LayoutDialog" : {
    "props" : [
      {
        "name" : "animateTarget",
        "type" : "String/Element",
        "desc" : "Id or element from which the dialog should animate while opening\n(defaults to null with no animation)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "autoCreate",
        "type" : "Boolean/DomHelper",
        "desc" : "True to auto create from scratch, or using a DomHelper Object (defaults to false)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "autoScroll",
        "type" : "Boolean",
        "desc" : "True to allow the dialog body contents to overflow and display scrollbars (defaults to false)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "autoTabs",
        "type" : "Boolean",
        "desc" : "If true, all elements with class 'x-dlg-tab' will get automatically converted to tabs (defaults to false)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "buttonAlign",
        "type" : "String",
        "desc" : "Valid values are \"left,\" \"center\" and \"right\" (defaults to \"right\")",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "buttons",
        "type" : "Array",
        "desc" : "Array of buttons",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "closable",
        "type" : "Boolean",
        "desc" : "False to remove the built-in top-right corner close button (defaults to true)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "collapsible",
        "type" : "Boolean",
        "desc" : "False to remove the built-in top-right corner collapse button (defaults to true)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "constraintoviewport",
        "type" : "Boolean",
        "desc" : "True to keep the dialog constrained within the visible viewport boundaries (defaults to true)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "draggable",
        "type" : "Boolean",
        "desc" : "False to disable dragging of the dialog within the viewport (defaults to true)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "fixedcenter",
        "type" : "Boolean",
        "desc" : "True to ensure that anytime the dialog is shown or resized it gets centered (defaults to false)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "Height of the dialog in pixels (can also be set via CSS).  Determined by browser if unspecified.",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "minButtonWidth",
        "type" : "Number",
        "desc" : "Minimum width of all dialog buttons (defaults to 75)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "minHeight",
        "type" : "Number",
        "desc" : "The minimum allowable height for a resizable dialog (defaults to 80)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "minWidth",
        "type" : "Number",
        "desc" : "The minimum allowable width for a resizable dialog (defaults to 200)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "modal",
        "type" : "Boolean",
        "desc" : "True to show the dialog modally, preventing user interaction with the rest of the page (defaults to false)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "proxyDrag",
        "type" : "Boolean",
        "desc" : "True to drag a lightweight proxy element rather than the dialog itself, used when\ndraggable = true (defaults to false)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "resizable",
        "type" : "Boolean",
        "desc" : "False to disable manual dialog resizing (defaults to true)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "resizeHandles",
        "type" : "String",
        "desc" : "Which resize handles to display - see the {@link Roo.Resizable} handles config\nproperty for valid values (defaults to 'all')",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "shadow",
        "type" : "Boolean/String",
        "desc" : "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right\nshadow (defaults to false)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "shadowOffset",
        "type" : "Number",
        "desc" : "The number of pixels to offset the shadow if displayed (defaults to 5)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "shim",
        "type" : "Boolean",
        "desc" : "True to create an iframe shim that prevents selects from showing through (defaults to false)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "syncHeightBeforeShow",
        "type" : "Boolean",
        "desc" : "True to cause the dimensions to be recalculated before the dialog is shown (defaults to false)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "tabTag",
        "type" : "String",
        "desc" : "The tag name of tab elements, used when autoTabs = true (defaults to 'div')",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "Default text to display in the title bar (defaults to null)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "Width of the dialog in pixels (can also be set via CSS).  Determined by browser if unspecified.",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "x",
        "type" : "Number",
        "desc" : "The default left page coordinate of the dialog (defaults to center screen)",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "y",
        "type" : "Number",
        "desc" : "The default top page coordinate of the dialog (defaults to center screen)",
        "memberOf" : "Roo.BasicDialog"
      }
    ],
    "events" : [
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before this dialog is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before this dialog is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires when this dialog is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "keydown",
        "type" : "function",
        "desc" : "Fires when a key is pressed",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires when this dialog is moved by the user.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires when this dialog is resized by the user.",
        "sig" : "function (_self, width, height)\n{\n\n}",
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires when this dialog is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicDialog"
      }
    ],
    "methods" : [
      {
        "name" : "addButton",
        "type" : "function",
        "desc" : "Adds a button to the footer section of the dialog.",
        "sig" : "(config, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addKeyListener",
        "type" : "function",
        "desc" : "Adds a key listener for when this dialog is displayed.  This allows you to hook in a function that will be\nexecuted in response to a particular key being pressed while the dialog is active.",
        "sig" : "(key, fn, scope)",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addxtype",
        "type" : "function",
        "desc" : "Add an xtype element (actually adds to the layout.)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "alignTo",
        "type" : "function",
        "desc" : "Aligns the dialog to the specified element",
        "sig" : "(element, position, offsets)",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "anchorTo",
        "type" : "function",
        "desc" : "Anchors an element to another element and realigns it when the window is resized.",
        "sig" : "(element, position, offsets, monitorScroll)",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "beginUpdate",
        "type" : "function",
        "desc" : "Begins an update of the layout <strike>and sets display to block and visibility to hidden</strike>. Use standard beginUpdate/endUpdate on the layout.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "center",
        "type" : "function",
        "desc" : "Centers this dialog in the viewport",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Collapses the dialog to its minimized state (only the title bar is visible).\nEquivalent to the user clicking the collapse dialog button.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this dialog and all its supporting elements (including any tabs, shim,\nshadow, proxy, mask, etc.)  Also removes all event listeners.",
        "sig" : "(removeEl)",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "endUpdate",
        "type" : "function",
        "desc" : "Ends update of the layout <strike>and resets display to none</strike>. Use standard beginUpdate/endUpdate on the layout.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expands a collapsed dialog back to its normal state.  Equivalent to the user\nclicking the expand dialog button.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Focuses the dialog.  If a defaultButton is set, it will receive focus, otherwise the\ndialog itself will receive focus.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the element for this dialog",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "getLayout",
        "type" : "function",
        "desc" : "Get the BorderLayout for this dialog",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTabs",
        "type" : "function",
        "desc" : "Returns the TabPanel component (creates it if it doesn't exist).\nNote: If you wish to simply check for the existence of tabs without creating them,\ncheck for a null 'tabs' property.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides the dialog.",
        "sig" : "(callback)",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "initTabs",
        "type" : "function",
        "desc" : "Reinitializes the tabs component, clearing out old tabs and finding new ones.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if the dialog is visible",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "moveTo",
        "type" : "function",
        "desc" : "Moves the dialog's top-left corner to the specified point",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resizeTo",
        "type" : "function",
        "desc" : "Resizes the dialog.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "restoreState",
        "type" : "function",
        "desc" : "Restores the previous state of the dialog if Roo.state is configured.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "setContentSize",
        "type" : "function",
        "desc" : "Resizes the dialog to fit the specified content size.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "setDefaultButton",
        "type" : "function",
        "desc" : "Sets the default button to be focused when the dialog is displayed.",
        "sig" : "(btn)",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "setTitle",
        "type" : "function",
        "desc" : "Sets the dialog title text",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Shows the dialog.",
        "sig" : "(animateTarget)",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "toBack",
        "type" : "function",
        "desc" : "Sends this dialog to the back (under) of any other visible dialogs",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "toFront",
        "type" : "function",
        "desc" : "Brings this dialog to the front of any other visible dialogs",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BasicDialog"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.LayoutManager" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "layout",
        "type" : "function",
        "desc" : "Fires when a layout is performed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "regioncollapsed",
        "type" : "function",
        "desc" : "Fires when a region is collapsed.",
        "sig" : "function (region)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "regionexpanded",
        "type" : "function",
        "desc" : "Fires when a region is expanded.",
        "sig" : "function (region)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "regionresized",
        "type" : "function",
        "desc" : "Fires when the user resizes a region.",
        "sig" : "function (region, newSize)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "beginUpdate",
        "type" : "function",
        "desc" : "Suspend the LayoutManager from doing auto-layouts while\nmaking multiple add or remove calls",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "endUpdate",
        "type" : "function",
        "desc" : "Restore auto-layouts and optionally disable the manager from performing a layout",
        "sig" : "(noLayout)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the Element this layout is bound to.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getRegion",
        "type" : "function",
        "desc" : "Returns the specified region.",
        "sig" : "(target)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getViewSize",
        "type" : "function",
        "desc" : "Returns the size of the current view. This method normalizes document.body and element embedded layouts and\nperforms box-model adjustments.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isUpdating",
        "type" : "function",
        "desc" : "Returns true if this layout is currently being updated",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.LayoutRegion" : {
    "props" : [
      {
        "name" : "alwaysShowTabs",
        "type" : "Boolean",
        "desc" : "True to always display tabs even when there is only 1 panel (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "animate",
        "type" : "Boolean",
        "desc" : "True to animate expand/collapse (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "autoHide",
        "type" : "Boolean",
        "desc" : "False to disable auto hiding when the mouse leaves the \"floated\" region (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "autoScroll",
        "type" : "Boolean",
        "desc" : "True to enable overflow scrolling (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "closeOnTab",
        "type" : "Boolean",
        "desc" : "True to place the close icon on the tabs instead of the region titlebar (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "cmargins",
        "type" : "Object",
        "desc" : "Margins for the element when collapsed (defaults to: north/south {top: 2, left: 0, right:0, bottom: 2} or east/west {top: 0, left: 2, right:2, bottom: 0})",
        "memberOf" : ""
      },
      {
        "name" : "collapsed",
        "type" : "Boolean",
        "desc" : "True to set the initial display to collapsed (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "collapsedTitle",
        "type" : "String",
        "desc" : "Optional string message to display in the collapsed block of a north or south region",
        "memberOf" : ""
      },
      {
        "name" : "collapsible",
        "type" : "Boolean",
        "desc" : "False to disable collapsing (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "disableTabTips",
        "type" : "Boolean",
        "desc" : "True to disable tab tooltips",
        "memberOf" : ""
      },
      {
        "name" : "floatable",
        "type" : "Boolean",
        "desc" : "False to disable floating (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "For North/South panels",
        "memberOf" : ""
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "True to start the region hidden (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "hideTabs",
        "type" : "Boolean",
        "desc" : "True to hide the tab strip (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "hideWhenEmpty",
        "type" : "Boolean",
        "desc" : "True to hide the region when it has no panels",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "margins",
        "type" : "Object",
        "desc" : "Margins for the element (defaults to {top: 0, left: 0, right:0, bottom: 0})",
        "memberOf" : ""
      },
      {
        "name" : "minTabWidth",
        "type" : "Number",
        "desc" : "The minimum tab width (defaults to 40)",
        "memberOf" : ""
      },
      {
        "name" : "preferredTabWidth",
        "type" : "Number",
        "desc" : "The preferred tab width (defaults to 150)",
        "memberOf" : ""
      },
      {
        "name" : "preservePanels",
        "type" : "Boolean",
        "desc" : "True to preserve removed panels so they can be readded later (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "resizeTabs",
        "type" : "Boolean",
        "desc" : "True to enable automatic tab resizing. This will resize the tabs so they are all the same size and fit within\n                     the space available, similar to FireFox 1.5 tabs (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "showPin",
        "type" : "Boolean",
        "desc" : "True to show a pin button",
        "memberOf" : ""
      },
      {
        "name" : "split",
        "type" : "Boolean",
        "desc" : "To show the splitter",
        "memberOf" : ""
      },
      {
        "name" : "tabPosition",
        "type" : "String",
        "desc" : [
          "(top",
          "bottom)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "The title for the region (overrides panel titles)",
        "memberOf" : ""
      },
      {
        "name" : "titlebar",
        "type" : "Boolean",
        "desc" : "True to display a title bar (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "toolbar",
        "type" : "Boolean",
        "desc" : "xtype configuration for a toolbar - shows on right of tabbar",
        "memberOf" : ""
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "For East/West panels",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforecollapse",
        "type" : "function",
        "desc" : "Fires when this region before collapse.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "beforeremove",
        "type" : "function",
        "desc" : "Fires before a panel is removed (or closed). To cancel the removal set \"e.cancel = true\" on the event argument.",
        "sig" : "function (_self, panel, e)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "collapsed",
        "type" : "function",
        "desc" : "Fires when this region is collapsed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "expanded",
        "type" : "function",
        "desc" : "Fires when this region is expanded.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "invalidated",
        "type" : "function",
        "desc" : "Fires when the layout for this region is changed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "panelactivated",
        "type" : "function",
        "desc" : "Fires when a panel is activated.",
        "sig" : "function (_self, panel)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "paneladded",
        "type" : "function",
        "desc" : "Fires when a panel is added.",
        "sig" : "function (_self, panel)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "panelremoved",
        "type" : "function",
        "desc" : "Fires when a panel is removed.",
        "sig" : "function (_self, panel)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "resized",
        "type" : "function",
        "desc" : "Fires when the user resizes this region.",
        "sig" : "function (_self, newSize)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "slidehide",
        "type" : "function",
        "desc" : "Fires when this region slides out of view.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "slideshow",
        "type" : "function",
        "desc" : "Fires when this region is slid into view.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "visibilitychange",
        "type" : "function",
        "desc" : "Fires when this region is shown or hidden",
        "sig" : "function (_self, visibility)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      }
    ],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Adds the passed ContentPanel(s) to this region.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Collapses this region.",
        "sig" : "(skipAnim)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expands this region if it was previously collapsed.",
        "sig" : "(e, skipAnim)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getActivePanel",
        "type" : "function",
        "desc" : "Get the active panel for this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the container element for this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getPanel",
        "type" : "function",
        "desc" : "Returns the panel specified or null if it's not in this region.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Returns this regions position (north/south/east/west/center).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "getTabs",
        "type" : "function",
        "desc" : "Returns the TabPanel component used by this region",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hasPanel",
        "type" : "function",
        "desc" : "Returns true if the panel is in this region.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hidePanel",
        "type" : "function",
        "desc" : "Hides the tab for the specified panel.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this region is currently visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Removes the specified panel. If preservePanel is not true (either here or in the config), the panel is destroyed.",
        "sig" : "(panel, preservePanel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resizeTo",
        "type" : "function",
        "desc" : "Resizes the region to the specified size. For vertical regions (west, east) this adjusts \nthe width, for horizontal (north, south) the height.",
        "sig" : "(newSize)",
        "static" : false,
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "setCollapsedTitle",
        "type" : "function",
        "desc" : "Updates the title for collapsed north/south regions (used with {@link #collapsedTitle} config option)",
        "sig" : "(title)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Shows this region if it was previously hidden.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "showPanel",
        "type" : "function",
        "desc" : "Shows the specified panel.",
        "sig" : "(panelId)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unhidePanel",
        "type" : "function",
        "desc" : "Unhides the tab for a previously hidden panel.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.LoadMask" : {
    "props" : [
      {
        "name" : "msg",
        "type" : "String",
        "desc" : "The text to display in a centered loading message box (defaults to 'Loading...')",
        "memberOf" : ""
      },
      {
        "name" : "msgCls",
        "type" : "String",
        "desc" : "The CSS class to apply to the loading message element (defaults to \"x-mask-loading\")",
        "memberOf" : ""
      },
      {
        "name" : "removeMask",
        "type" : "Boolean",
        "desc" : "True to create a single-use mask that is automatically destroyed after loading (useful for page loads),\nFalse to persist the mask element reference for multiple uses (e.g., for paged data widgets).  Defaults to false.",
        "memberOf" : "Roo"
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disables the mask to prevent it from being displayed",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enables the mask so that it can be displayed",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.MasterTemplate" : {
    "props" : [
      {
        "name" : "html",
        "type" : "String",
        "desc" : "The HTML fragment or an array of fragments to join(\"\") or multiple arguments to join(\"\")",
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "onLoad",
        "type" : "Function",
        "desc" : "Called after the template has been loaded and complied (usually from a remove source)",
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "The Url to load the template from. beware if you are loading from a url, the data may not be ready if you use it instantly..\n                   it should be fixed so that template is observable...",
        "memberOf" : "Roo.Template"
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Applies the passed values to a child template.",
        "sig" : "(name, values)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addAll",
        "type" : "function",
        "desc" : "Alias for fill().",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "append",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and appends the new node(s) to el.",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "apply",
        "type" : "function",
        "desc" : "Alias for {@link #applyTemplate}",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "applyTemplate",
        "type" : "function",
        "desc" : "Returns an HTML fragment of this template with the specified values applied.",
        "sig" : "(values)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "compile",
        "type" : "function",
        "desc" : "Compiles the template into an internal function, eliminating the RegEx overhead.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "fill",
        "type" : "function",
        "desc" : "Applies all the passed values to a child template.",
        "sig" : "(name, values, reset)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "from",
        "type" : "function",
        "desc" : "Creates a template from the passed element's value (display:none textarea, preferred) or innerHTML. e.g.\nvar tpl = Roo.MasterTemplate.from('element-id');",
        "sig" : "(el, config)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "insertAfter",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and inserts the new node(s) after el.",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "insertBefore",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and inserts the new node(s) before el.",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "insertFirst",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and inserts the new node(s) as the first child of el.",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "overwrite",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and overwrites the content of el with the new node(s).",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the template for reuse",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "set",
        "type" : "function",
        "desc" : "Sets the HTML used as the template and optionally compiles it.",
        "sig" : "(html, compile)",
        "static" : false,
        "memberOf" : "Roo.Template"
      }
    ]
  },
  "Roo.NestedLayoutPanel" : {
    "props" : [
      {
        "name" : "adjustments",
        "type" : "Array",
        "desc" : "Values to <b>add</b> to the width/height when doing a {@link #fitToFrame} (default is [0, 0])",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "autoCreate",
        "type" : "Boolean/Object",
        "desc" : "True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "autoScroll",
        "type" : "Boolean",
        "desc" : "True to scroll overflow in this panel (use with {@link #fitToFrame})",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "background",
        "type" : "Boolean",
        "desc" : "True if the panel should not be activated when it is added (defaults to false)",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "closable",
        "type" : "Boolean",
        "desc" : "True if the panel can be closed/removed",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "content",
        "type" : "String",
        "desc" : "Raw content to fill content panel with (uses setContent on construction.)",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "fitContainer",
        "type" : "Boolean",
        "desc" : "When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "fitToFrame",
        "type" : "Boolean",
        "desc" : "True for this panel to adjust its size to fit when the region resizes  (defaults to false)",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadOnce",
        "type" : "Boolean",
        "desc" : "When used with {@link #url}, calls {@link #setUrl} with this value",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "params",
        "type" : "String/Object",
        "desc" : "When used with {@link #url}, calls {@link #setUrl} with this value",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "region",
        "type" : "String",
        "desc" : [
          "(center",
          "north",
          "south",
          "east",
          "west)"
        ],
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "resizeEl",
        "type" : "String/HTMLElement/Element",
        "desc" : "An element to resize if {@link #fitToFrame} is true (instead of this panel's element)",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "Extra style to add to the content panel",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "The title for this panel",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "toolbar",
        "type" : "Toolbar",
        "desc" : "A toolbar for this panel",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "Calls {@link #setUrl} with this value",
        "memberOf" : "Roo.ContentPanel"
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this panel is activated.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this panel is activated.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when this tab is created",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires when this panel is resized if fitToFrame is true.",
        "sig" : "function (_self, width, height)\n{\n\n}",
        "memberOf" : "Roo.ContentPanel"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addxtype",
        "type" : "function",
        "desc" : "Adds a xtype elements to the layout of the nested panel\n<pre><code>\n\npanel.addxtype({\n       xtype : 'ContentPanel',\n       region: 'west',\n       items: [ .... ]\n   }\n);\n\npanel.addxtype({\n        xtype : 'NestedLayoutPanel',\n        region: 'west',\n        layout: {\n           center: { },\n           west: { }   \n        },\n        items : [ ... list of content panels or nested layout panels.. ]\n   }\n);\n</code></pre>",
        "sig" : "(cfg)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this panel",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns this panel's element - used by regiosn to add.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns this panel's id",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "getLayout",
        "type" : "function",
        "desc" : "Returns the nested BorderLayout for this panel",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTitle",
        "type" : "function",
        "desc" : "Returns this panel's title",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "getToolbar",
        "type" : "function",
        "desc" : "Returns the toolbar for this Panel if one was configured.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "getUpdateManager",
        "type" : "function",
        "desc" : "Get the {@link Roo.UpdateManager} for this panel. Enables you to perform Ajax updates.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isClosable",
        "type" : "function",
        "desc" : "Returns true is this panel was configured to be closable",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Loads this content panel immediately with content from XHR. Note: to delay loading until the panel is activated, use {@link #setUrl}.",
        "sig" : "(url, params, callback, discardUrl)",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "refresh",
        "type" : "function",
        "desc" : "Force a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the {@link #setUrl} method has not been called.\n  This does not activate the panel, just updates its content.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setContent",
        "type" : "function",
        "desc" : "Updates this panel's element",
        "sig" : "(content, loadScripts)",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "setTitle",
        "type" : "function",
        "desc" : "Set this panel's title",
        "sig" : "(title)",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "setUrl",
        "type" : "function",
        "desc" : "Set a URL to be used to load the content for this panel. When this panel is activated, the content will be loaded from that URL.",
        "sig" : "(url, params, loadOnce)",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.PagingToolbar" : {
    "props" : [
      {
        "name" : "container",
        "type" : "String/HTMLElement/Element",
        "desc" : "container The id or element that will contain the toolbar",
        "memberOf" : ""
      },
      {
        "name" : "dataSource",
        "type" : "Roo.data.Store",
        "desc" : "The underlying data store providing the paged data",
        "memberOf" : ""
      },
      {
        "name" : "displayInfo",
        "type" : "Boolean",
        "desc" : "True to display the displayMsg (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "displayMsg",
        "type" : "String",
        "desc" : "The paging status message to display (defaults to \"Displaying {start} - {end} of {total}\")",
        "memberOf" : ""
      },
      {
        "name" : "emptyMsg",
        "type" : "String",
        "desc" : "The message to display when no records are found (defaults to \"No data to display\")",
        "memberOf" : ""
      },
      {
        "name" : "items",
        "type" : "Array",
        "desc" : "array of button configs or elements to add (will be converted to a MixedCollection)",
        "memberOf" : "Roo"
      },
      {
        "name" : "pageSize",
        "type" : "Number",
        "desc" : "The number of records to display per page (defaults to 20)",
        "memberOf" : ""
      },
      {
        "name" : "text",
        "type" : "string",
        "desc" : "",
        "memberOf" : "Roo.Toolbar"
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Adds element(s) to the toolbar -- this function takes a variable number of \narguments of mixed type and adds them to the toolbar.",
        "sig" : "(arg1, arg2)",
        "static" : false,
        "memberOf" : "Roo.Toolbar"
      },
      {
        "name" : "addButton",
        "type" : "function",
        "desc" : "Adds a button (or buttons). See {@link Roo.Toolbar.Button} for more info on the config.",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : "Roo.Toolbar"
      },
      {
        "name" : "addDom",
        "type" : "function",
        "desc" : "Adds a new element to the toolbar from the passed {@link Roo.DomHelper} config.",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : "Roo.Toolbar"
      },
      {
        "name" : "addElement",
        "type" : "function",
        "desc" : "Adds any standard HTML element to the toolbar",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.Toolbar"
      },
      {
        "name" : "addField",
        "type" : "function",
        "desc" : "Adds a dynamically rendered Roo.form field (TextField, ComboBox, etc).\nNote: the field should not have been rendered yet. For a field that has already been\nrendered, use {@link #addElement}.",
        "sig" : "(field)",
        "static" : false,
        "memberOf" : "Roo.Toolbar"
      },
      {
        "name" : "addFill",
        "type" : "function",
        "desc" : "Adds a fill element that forces subsequent additions to the right side of the toolbar",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar"
      },
      {
        "name" : "addItem",
        "type" : "function",
        "desc" : "Adds any Toolbar.Item or subclass",
        "sig" : "(item)",
        "static" : false,
        "memberOf" : "Roo.Toolbar"
      },
      {
        "name" : "addSeparator",
        "type" : "function",
        "desc" : "Adds a separator",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar"
      },
      {
        "name" : "addSpacer",
        "type" : "function",
        "desc" : "Adds a spacer element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar"
      },
      {
        "name" : "addText",
        "type" : "function",
        "desc" : "Adds text to the toolbar",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : "Roo.Toolbar"
      },
      {
        "name" : "addxtype",
        "type" : "function",
        "desc" : "Add an Xtype element",
        "sig" : "(xtype)",
        "static" : false,
        "memberOf" : "Roo.Toolbar"
      },
      {
        "name" : "bind",
        "type" : "function",
        "desc" : "Binds the paging toolbar to the specified {@link Roo.data.Store}",
        "sig" : "(store)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the Element for this toolbar.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide the toolbar",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar"
      },
      {
        "name" : "insertButton",
        "type" : "function",
        "desc" : "Inserts any {@link Roo.Toolbar.Item}/{@link Roo.Toolbar.Button} at the specified index.",
        "sig" : "(index, item)",
        "static" : false,
        "memberOf" : "Roo.Toolbar"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show the toolbar",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar"
      },
      {
        "name" : "unbind",
        "type" : "function",
        "desc" : "Unbinds the paging toolbar from the specified {@link Roo.data.Store}",
        "sig" : "(store)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.QuickTips" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this quick tip.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this quick tip.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "init",
        "type" : "function",
        "desc" : "Initialize and enable QuickTips for first use.  This should be called once before the first attempt to access\nor display QuickTips in a page.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isEnabled",
        "type" : "function",
        "desc" : "Returns true if the quick tip is enabled, else false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "register",
        "type" : "function",
        "desc" : "Configures a new quick tip instance and assigns it to a target element.  The following config options\nare supported:\n<pre>\nProperty    Type                   Description\n----------  ---------------------  ------------------------------------------------------------------------\ntarget      Element/String/Array   An Element, id or array of ids that this quick tip should be tied to\n</ul>",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "unregister",
        "type" : "function",
        "desc" : "Removes this quick tip from its element and destroys it.",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.ReaderLayout" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "layout",
        "type" : "function",
        "desc" : "Fires when a layout is performed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "regioncollapsed",
        "type" : "function",
        "desc" : "Fires when a region is collapsed.",
        "sig" : "function (region)\n{\n\n}",
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "regionexpanded",
        "type" : "function",
        "desc" : "Fires when a region is expanded.",
        "sig" : "function (region)\n{\n\n}",
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "regionresized",
        "type" : "function",
        "desc" : "Fires when the user resizes a region.",
        "sig" : "function (region, newSize)\n{\n\n}",
        "memberOf" : "Roo.LayoutManager"
      }
    ],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Adds a ContentPanel (or subclass) to this layout.",
        "sig" : "(target, panel)",
        "static" : false,
        "memberOf" : "Roo.BorderLayout"
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addRegion",
        "type" : "function",
        "desc" : "Creates and adds a new region if it doesn't already exist.",
        "sig" : "(target, config)",
        "static" : false,
        "memberOf" : "Roo.BorderLayout"
      },
      {
        "name" : "addxtype",
        "type" : "function",
        "desc" : "Adds a xtype elements to the layout.\n<pre><code>\n\nlayout.addxtype({\n       xtype : 'ContentPanel',\n       region: 'west',\n       items: [ .... ]\n   }\n);\n\nlayout.addxtype({\n        xtype : 'NestedLayoutPanel',\n        region: 'west',\n        layout: {\n           center: { },\n           west: { }   \n        },\n        items : [ ... list of content panels or nested layout panels.. ]\n   }\n);\n</code></pre>",
        "sig" : "(cfg)",
        "static" : false,
        "memberOf" : "Roo.BorderLayout"
      },
      {
        "name" : "batchAdd",
        "type" : "function",
        "desc" : "Adds a batch of multiple ContentPanels dynamically by passing a special regions config object.  This config\nobject should contain properties for each region to add ContentPanels to, and each property's value should be\na valid ContentPanel config object.  Example:\n<pre><code>\n// Create the main layout\nvar layout = new Roo.BorderLayout('main-ct', {\n    west: {\n        split:true,\n        minSize: 175,\n        titlebar: true\n    },\n    center: {\n        title:'Components'\n    }\n}, 'main-ct');\n\n// Create and add multiple ContentPanels at once via configs\nlayout.batchAdd({\n   west: {\n       id: 'source-files',\n       autoCreate:true,\n       title:'Ext Source Files',\n       autoScroll:true,\n       fitToFrame:true\n   },\n   center : {\n       el: cview,\n       autoScroll:true,\n       fitToFrame:true,\n       toolbar: tb,\n       resizeEl:'cbody'\n   }\n});\n</code></pre>",
        "sig" : "(regions)",
        "static" : false,
        "memberOf" : "Roo.BorderLayout"
      },
      {
        "name" : "beginUpdate",
        "type" : "function",
        "desc" : "Suspend the LayoutManager from doing auto-layouts while\nmaking multiple add or remove calls",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "create",
        "type" : "function",
        "desc" : "Shortcut for creating a new BorderLayout object and adding one or more ContentPanels to it in a single step, handling\nthe beginUpdate and endUpdate calls internally.  The key to this method is the <b>panels</b> property that can be\nprovided with each region config, which allows you to add ContentPanel configs in addition to the region configs\nduring creation.  The following code is equivalent to the constructor-based example at the beginning of this class:\n<pre><code>\n// shorthand\nvar CP = Roo.ContentPanel;\n\nvar layout = Roo.BorderLayout.create({\n    north: {\n        initialSize: 25,\n        titlebar: false,\n        panels: [new CP(\"north\", \"North\")]\n    },\n    west: {\n        split:true,\n        initialSize: 200,\n        minSize: 175,\n        maxSize: 400,\n        titlebar: true,\n        collapsible: true,\n        panels: [new CP(\"west\", {title: \"West\"})]\n    },\n    east: {\n        split:true,\n        initialSize: 202,\n        minSize: 175,\n        maxSize: 400,\n        titlebar: true,\n        collapsible: true,\n        panels: [new CP(\"autoTabs\", {title: \"Auto Tabs\", closable: true})]\n    },\n    south: {\n        split:true,\n        initialSize: 100,\n        minSize: 100,\n        maxSize: 200,\n        titlebar: true,\n        collapsible: true,\n        panels: [new CP(\"south\", {title: \"South\", closable: true})]\n    },\n    center: {\n        titlebar: true,\n        autoScroll:true,\n        resizeTabs: true,\n        minTabWidth: 50,\n        preferredTabWidth: 150,\n        panels: [\n            new CP(\"center1\", {title: \"Close Me\", closable: true}),\n            new CP(\"center2\", {title: \"Center Panel\", closable: false})\n        ]\n    }\n}, document.body);\n\nlayout.getRegion(\"center\").showPanel(\"center1\");\n</code></pre>",
        "sig" : "(config, targetEl)",
        "static" : true,
        "memberOf" : "Roo.BorderLayout"
      },
      {
        "name" : "endUpdate",
        "type" : "function",
        "desc" : "Restore auto-layouts and optionally disable the manager from performing a layout",
        "sig" : "(noLayout)",
        "static" : false,
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "findPanel",
        "type" : "function",
        "desc" : "Searches all regions for a panel with the specified id",
        "sig" : "(panelId)",
        "static" : false,
        "memberOf" : "Roo.BorderLayout"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the Element this layout is bound to.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "getRegion",
        "type" : "function",
        "desc" : "Returns the specified region.",
        "sig" : "(target)",
        "static" : false,
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "getViewSize",
        "type" : "function",
        "desc" : "Returns the size of the current view. This method normalizes document.body and element embedded layouts and\nperforms box-model adjustments.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isUpdating",
        "type" : "function",
        "desc" : "Returns true if this layout is currently being updated",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutManager"
      },
      {
        "name" : "layout",
        "type" : "function",
        "desc" : "Performs a layout update.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BorderLayout"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Remove a ContentPanel (or subclass) to this layout.",
        "sig" : "(target, panel)",
        "static" : false,
        "memberOf" : "Roo.BorderLayout"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "restoreState",
        "type" : "function",
        "desc" : "Restores this layout's state using Roo.state.Manager or the state provided by the passed provider.",
        "sig" : "(provider)",
        "static" : false,
        "memberOf" : "Roo.BorderLayout"
      },
      {
        "name" : "showPanel",
        "type" : "function",
        "desc" : "Searches all regions for a panel with the specified id and activates (shows) it.",
        "sig" : "(panelId)",
        "static" : false,
        "memberOf" : "Roo.BorderLayout"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.Resizable" : {
    "props" : [
      {
        "name" : "adjustments",
        "type" : "Array/String",
        "desc" : "String \"auto\" or an array [width, height] with values to be <b>added</b> to the\nresize operation's new size (defaults to [0, 0])",
        "memberOf" : ""
      },
      {
        "name" : "animate",
        "type" : "Boolean",
        "desc" : "True to animate the resize (not compatible with dynamic sizing, defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "constrainTo",
        "type" : "String/HTMLElement/Element",
        "desc" : "Constrain the resize to a particular element",
        "memberOf" : ""
      },
      {
        "name" : "disableTrackOver",
        "type" : "Boolean",
        "desc" : "True to disable mouse tracking. This is only applied at config time. (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "draggable",
        "type" : "Boolean",
        "desc" : "Convenience to initialize drag drop (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "duration",
        "type" : "Number",
        "desc" : "Animation duration if animate = true (defaults to .35)",
        "memberOf" : ""
      },
      {
        "name" : "dynamic",
        "type" : "Boolean",
        "desc" : "True to resize the element while dragging instead of using a proxy (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "easing",
        "type" : "String",
        "desc" : "Animation easing if animate = true (defaults to 'easingOutStrong')",
        "memberOf" : ""
      },
      {
        "name" : "enabled",
        "type" : "Boolean",
        "desc" : "False to disable resizing (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "handles",
        "type" : "String",
        "desc" : "String consisting of the resize handles to display (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "The height of the element in pixels (defaults to null)",
        "memberOf" : ""
      },
      {
        "name" : "heightIncrement",
        "type" : "Number",
        "desc" : "The increment to snap the height resize in pixels (dynamic must be true, defaults to 0)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maxHeight",
        "type" : "Number",
        "desc" : "The maximum height for the element (defaults to 10000)",
        "memberOf" : ""
      },
      {
        "name" : "maxWidth",
        "type" : "Number",
        "desc" : "The maximum width for the element (defaults to 10000)",
        "memberOf" : ""
      },
      {
        "name" : "minHeight",
        "type" : "Number",
        "desc" : "The minimum height for the element (defaults to 5)",
        "memberOf" : ""
      },
      {
        "name" : "minWidth",
        "type" : "Number",
        "desc" : "The minimum width for the element (defaults to 5)",
        "memberOf" : ""
      },
      {
        "name" : "minX",
        "type" : "Number",
        "desc" : "The minimum allowed page X for the element (only used for west resizing, defaults to 0)",
        "memberOf" : ""
      },
      {
        "name" : "minY",
        "type" : "Number",
        "desc" : "The minimum allowed page Y for the element (only used for north resizing, defaults to 0)",
        "memberOf" : ""
      },
      {
        "name" : "multiDirectional",
        "type" : "Boolean",
        "desc" : "<b>Deprecated</b>.  The old style of adding multi-direction resize handles, deprecated\nin favor of the handles config option (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "pinned",
        "type" : "Boolean",
        "desc" : "True to ensure that the resize handles are always visible, false to display them only when the\nuser mouses over the resizable borders. This is only applied at config time. (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "preserveRatio",
        "type" : "Boolean",
        "desc" : "True to preserve the original ratio between height and width during resize (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "resizeChild",
        "type" : "Boolean/String/Element",
        "desc" : "True to resize the first child, or id/element to resize (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "resizeRegion",
        "type" : "Roo.lib.Region",
        "desc" : "Constrain the resize to a particular region",
        "memberOf" : ""
      },
      {
        "name" : "transparent",
        "type" : "Boolean",
        "desc" : "True for transparent handles. This is only applied at config time. (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "The width of the element in pixels (defaults to null)",
        "memberOf" : ""
      },
      {
        "name" : "widthIncrement",
        "type" : "Number",
        "desc" : "The increment to snap the width resize in pixels (dynamic must be true, defaults to 0)",
        "memberOf" : ""
      },
      {
        "name" : "wrap",
        "type" : "Boolean",
        "desc" : "True to wrap an element with a div if needed (required for textareas and images, defaults to false)",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforeresize",
        "type" : "function",
        "desc" : "Fired before resize is allowed. Set enabled to false to cancel resize.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fired after a resize.",
        "sig" : "function (_self, width, height, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "resizing",
        "type" : "function",
        "desc" : "Fired a resizing.",
        "sig" : "function (_self, x, y, w, h, e)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this resizable. If the element was wrapped and\nremoveEl is not true then the element remains.",
        "sig" : "(removeEl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the element this component is bound to.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getResizeChild",
        "type" : "function",
        "desc" : "Returns the resizeChild element (or null).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resizeTo",
        "type" : "function",
        "desc" : "Perform a manual resize",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.Shadow" : {
    "props" : [
      {
        "name" : "mode",
        "type" : "String",
        "desc" : "The shadow display mode.  Supports the following options:<br />\nsides: Shadow displays on both sides and bottom only<br />\nframe: Shadow displays equally on all four sides<br />\ndrop: Traditional bottom-right drop shadow (default)",
        "memberOf" : "Roo"
      },
      {
        "name" : "offset",
        "type" : "String",
        "desc" : "The number of pixels to offset the shadow from the element (defaults to 4)",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this shadow",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if the shadow is visible, else false",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "realign",
        "type" : "function",
        "desc" : "Direct alignment when values are already available. Show must be called at least once before\ncalling this method to ensure it is initialized.",
        "sig" : "(left, top, width, height)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setZIndex",
        "type" : "function",
        "desc" : "Adjust the z-index of this shadow",
        "sig" : "(zindex)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Displays the shadow under the target element",
        "sig" : "(targetEl)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.SplitBar" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "beforeresize",
        "type" : "function",
        "desc" : "Fires before the splitter is dragged",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "moved",
        "type" : "function",
        "desc" : "Fires when the splitter is moved",
        "sig" : "function (_self, newSize)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires when the splitter is moved (alias for {@link #event-moved})",
        "sig" : "function (_self, newSize)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroy this splitbar.",
        "sig" : "(removeEl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getAdapter",
        "type" : "function",
        "desc" : "Get the adapter this SplitBar uses",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getMaximumSize",
        "type" : "function",
        "desc" : "Gets the maximum size for the resizing element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getMinimumSize",
        "type" : "function",
        "desc" : "Gets the minimum size for the resizing element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setAdapter",
        "type" : "function",
        "desc" : "Set the adapter this SplitBar uses",
        "sig" : "(adapter)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setCurrentSize",
        "type" : "function",
        "desc" : "Sets the initialize size for the resizing element",
        "sig" : "(size)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setMaximumSize",
        "type" : "function",
        "desc" : "Sets the maximum size for the resizing element",
        "sig" : "(maxSize)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setMinimumSize",
        "type" : "function",
        "desc" : "Sets the minimum size for the resizing element",
        "sig" : "(minSize)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.SplitBar.AbsoluteLayoutAdapter" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "getElementSize",
        "type" : "function",
        "desc" : "Called before drag operations to get the current size of the resizing element.",
        "sig" : "(s)",
        "static" : false,
        "memberOf" : "Roo.SplitBar.BasicLayoutAdapter"
      },
      {
        "name" : "setElementSize",
        "type" : "function",
        "desc" : "Called after drag operations to set the size of the resizing element.",
        "sig" : "(s, newSize, onComplete)",
        "static" : false,
        "memberOf" : "Roo.SplitBar.BasicLayoutAdapter"
      }
    ]
  },
  "Roo.SplitBar.BasicLayoutAdapter" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "getElementSize",
        "type" : "function",
        "desc" : "Called before drag operations to get the current size of the resizing element.",
        "sig" : "(s)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setElementSize",
        "type" : "function",
        "desc" : "Called after drag operations to set the size of the resizing element.",
        "sig" : "(s, newSize, onComplete)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.SplitButton" : {
    "props" : [
      {
        "name" : "arrowHandler",
        "type" : "Function",
        "desc" : "A function called when the arrow button is clicked (can be used instead of click event)",
        "memberOf" : ""
      },
      {
        "name" : "arrowTooltip",
        "type" : "String",
        "desc" : "The title attribute of the arrow",
        "memberOf" : ""
      },
      {
        "name" : "clickEvent",
        "type" : "String",
        "desc" : "The type of event to map to the button's event handler (defaults to 'click')",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the button's main element.",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to start disabled (defaults to false)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "enableToggle",
        "type" : "Boolean",
        "desc" : "True to enable pressed/not pressed toggling (defaults to false)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "handleMouseEvents",
        "type" : "Boolean",
        "desc" : "False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "handler",
        "type" : "Function",
        "desc" : "A function called when the button is clicked (can be used instead of click event)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "True to start hidden (defaults to false)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : "The path to an image to display in the button (the image will be set as the background-image\nCSS property of the button by default, so if you want a mixed icon/text button, set cls:\"x-btn-text-icon\")",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "iconCls",
        "type" : "String",
        "desc" : "A css class which sets a background image to be used as the icon for this button (defaults to undefined).",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "menu",
        "type" : "Mixed",
        "desc" : "Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "menuAlign",
        "type" : "String",
        "desc" : "The position to align the menu to (see {@link Roo.Element#alignTo} for more details, defaults to 'tl-bl?').",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "minWidth",
        "type" : "Number",
        "desc" : "The minimum width for this button (used to give a set of buttons a common width)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "pressed",
        "type" : "Boolean",
        "desc" : "True to start pressed (only if enableToggle = true)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "renderTo",
        "type" : "String/HTMLElement/Element",
        "desc" : "The element to append the button to",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "repeat",
        "type" : "Boolean/Object",
        "desc" : "True to repeat fire the click event while the mouse is down. This can also be\n  an {@link Roo.util.ClickRepeater} config object (defaults to false).",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "scope",
        "type" : "Object",
        "desc" : "The scope of the handler",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The DOM tabIndex for this button (defaults to undefined)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "template",
        "type" : "Roo.Template",
        "desc" : "(Optional)\nAn {@link Roo.Template} with which to create the Button's main element. This Template must\ncontain numeric substitution parameter 0 if it is to display the tRoo property. Changing the template could\nrequire code modifications if required elements (e.g. a button) aren't present.",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "text",
        "type" : "String",
        "desc" : "The button text",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "toggleGroup",
        "type" : "String",
        "desc" : "The group this toggle button is a member of (only 1 per group can be pressed, only\n   applies if enableToggle = true)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "tooltip",
        "type" : "String/Object",
        "desc" : "The tooltip for the button - can be a string or QuickTips config object",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "tooltipType",
        "type" : "String",
        "desc" : "The type of tooltip to use. Either \"qtip\" (default) for QuickTips or \"title\" for title attribute.",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "type",
        "type" : "String",
        "desc" : "The button's type, corresponding to the DOM input element type attribute.  Either \"submit,\" \"reset\" or \"button\" (default).",
        "memberOf" : "Roo.Button"
      }
    ],
    "events" : [
      {
        "name" : "arrowclick",
        "type" : "function",
        "desc" : "Fires when this button's arrow is clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this button is clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "mouseout",
        "type" : "function",
        "desc" : "Fires when the mouse exits the button",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "mouseover",
        "type" : "function",
        "desc" : "Fires when the mouse hovers over the button",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when the button is rendered",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "toggle",
        "type" : "function",
        "desc" : "Fires when the \"pressed\" state of this button changes (only if enableToggle = true)",
        "sig" : "function (_self, pressed)\n{\n\n}",
        "memberOf" : "Roo.Button"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this Button and removes any listeners.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Focus the button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the button's underlying element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "getText",
        "type" : "function",
        "desc" : "Gets the text for this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setArrowHandler",
        "type" : "function",
        "desc" : "Sets this button's arrow click handler",
        "sig" : "(handler, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for boolean enable/disable",
        "sig" : "(enabled)",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "setHandler",
        "type" : "function",
        "desc" : "Sets this button's click handler",
        "sig" : "(handler, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setText",
        "type" : "function",
        "desc" : "Sets this button's text",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function for boolean show/hide",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "toggle",
        "type" : "function",
        "desc" : "If a state it passed, it becomes the pressed state otherwise the current state is toggled.",
        "sig" : "(state)",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.SplitLayoutRegion" : {
    "props" : [
      {
        "name" : "alwaysShowTabs",
        "type" : "Boolean",
        "desc" : "True to always display tabs even when there is only 1 panel (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "animate",
        "type" : "Boolean",
        "desc" : "True to animate expand/collapse (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "autoHide",
        "type" : "Boolean",
        "desc" : "False to disable auto hiding when the mouse leaves the \"floated\" region (defaults to true)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "autoScroll",
        "type" : "Boolean",
        "desc" : "True to enable overflow scrolling (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "closeOnTab",
        "type" : "Boolean",
        "desc" : "True to place the close icon on the tabs instead of the region titlebar (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "cmargins",
        "type" : "Object",
        "desc" : "Margins for the element when collapsed (defaults to: north/south {top: 2, left: 0, right:0, bottom: 2} or east/west {top: 0, left: 2, right:2, bottom: 0})",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "collapsed",
        "type" : "Boolean",
        "desc" : "True to set the initial display to collapsed (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "collapsedTitle",
        "type" : "String",
        "desc" : "Optional string message to display in the collapsed block of a north or south region",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "collapsible",
        "type" : "Boolean",
        "desc" : "False to disable collapsing (defaults to true)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "disableTabTips",
        "type" : "Boolean",
        "desc" : "True to disable tab tooltips",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "floatable",
        "type" : "Boolean",
        "desc" : "False to disable floating (defaults to true)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "For North/South panels",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "True to start the region hidden (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "hideTabs",
        "type" : "Boolean",
        "desc" : "True to hide the tab strip (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "hideWhenEmpty",
        "type" : "Boolean",
        "desc" : "True to hide the region when it has no panels",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "margins",
        "type" : "Object",
        "desc" : "Margins for the element (defaults to {top: 0, left: 0, right:0, bottom: 0})",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "minTabWidth",
        "type" : "Number",
        "desc" : "The minimum tab width (defaults to 40)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "preferredTabWidth",
        "type" : "Number",
        "desc" : "The preferred tab width (defaults to 150)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "preservePanels",
        "type" : "Boolean",
        "desc" : "True to preserve removed panels so they can be readded later (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "resizeTabs",
        "type" : "Boolean",
        "desc" : "True to enable automatic tab resizing. This will resize the tabs so they are all the same size and fit within\n                     the space available, similar to FireFox 1.5 tabs (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "showPin",
        "type" : "Boolean",
        "desc" : "True to show a pin button",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "split",
        "type" : "Boolean",
        "desc" : "To show the splitter",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "tabPosition",
        "type" : "String",
        "desc" : [
          "(top",
          "bottom)"
        ],
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "The title for the region (overrides panel titles)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "titlebar",
        "type" : "Boolean",
        "desc" : "True to display a title bar (defaults to true)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "toolbar",
        "type" : "Boolean",
        "desc" : "xtype configuration for a toolbar - shows on right of tabbar",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "For East/West panels",
        "memberOf" : "Roo.LayoutRegion"
      }
    ],
    "events" : [
      {
        "name" : "beforecollapse",
        "type" : "function",
        "desc" : "Fires when this region before collapse.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "beforeremove",
        "type" : "function",
        "desc" : "Fires before a panel is removed (or closed). To cancel the removal set \"e.cancel = true\" on the event argument.",
        "sig" : "function (_self, panel, e)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "collapsed",
        "type" : "function",
        "desc" : "Fires when this region is collapsed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "expanded",
        "type" : "function",
        "desc" : "Fires when this region is expanded.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "invalidated",
        "type" : "function",
        "desc" : "Fires when the layout for this region is changed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "panelactivated",
        "type" : "function",
        "desc" : "Fires when a panel is activated.",
        "sig" : "function (_self, panel)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "paneladded",
        "type" : "function",
        "desc" : "Fires when a panel is added.",
        "sig" : "function (_self, panel)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "panelremoved",
        "type" : "function",
        "desc" : "Fires when a panel is removed.",
        "sig" : "function (_self, panel)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "resized",
        "type" : "function",
        "desc" : "Fires when the user resizes this region.",
        "sig" : "function (_self, newSize)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "slidehide",
        "type" : "function",
        "desc" : "Fires when this region slides out of view.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "slideshow",
        "type" : "function",
        "desc" : "Fires when this region is slid into view.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "visibilitychange",
        "type" : "function",
        "desc" : "Fires when this region is shown or hidden",
        "sig" : "function (_self, visibility)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      }
    ],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Adds the passed ContentPanel(s) to this region.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Collapses this region.",
        "sig" : "(skipAnim)",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expands this region if it was previously collapsed.",
        "sig" : "(e, skipAnim)",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getActivePanel",
        "type" : "function",
        "desc" : "Get the active panel for this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the container element for this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "getPanel",
        "type" : "function",
        "desc" : "Returns the panel specified or null if it's not in this region.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Returns this regions position (north/south/east/west/center).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "getSplitBar",
        "type" : "function",
        "desc" : "Returns the {@link Roo.SplitBar} for this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTabs",
        "type" : "function",
        "desc" : "Returns the TabPanel component used by this region",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hasPanel",
        "type" : "function",
        "desc" : "Returns true if the panel is in this region.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "hidePanel",
        "type" : "function",
        "desc" : "Hides the tab for the specified panel.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this region is currently visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Removes the specified panel. If preservePanel is not true (either here or in the config), the panel is destroyed.",
        "sig" : "(panel, preservePanel)",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resizeTo",
        "type" : "function",
        "desc" : "Resizes the region to the specified size. For vertical regions (west, east) this adjusts \nthe width, for horizontal (north, south) the height.",
        "sig" : "(newSize)",
        "static" : false,
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "setCollapsedTitle",
        "type" : "function",
        "desc" : "Updates the title for collapsed north/south regions (used with {@link #collapsedTitle} config option)",
        "sig" : "(title)",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Shows this region if it was previously hidden.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "showPanel",
        "type" : "function",
        "desc" : "Shows the specified panel.",
        "sig" : "(panelId)",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unhidePanel",
        "type" : "function",
        "desc" : "Unhides the tab for a previously hidden panel.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      }
    ]
  },
  "Roo.TabPanel" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "beforetabchange",
        "type" : "function",
        "desc" : "Fires before the active tab changes, set cancel to true on the \"e\" parameter to cancel the change",
        "sig" : "function (_self, e, tab)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "tabchange",
        "type" : "function",
        "desc" : "Fires when the active tab changes",
        "sig" : "function (_self, activePanel)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Activates a {@link Roo.TabPanelItem}. The currently active one will be deactivated.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addTab",
        "type" : "function",
        "desc" : "Creates a new {@link Roo.TabPanelItem} by looking for an existing element with the provided id -- if it's not found it creates one.",
        "sig" : "(id, text, content, closable)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addTabItem",
        "type" : "function",
        "desc" : "Adds an existing {@link Roo.TabPanelItem}.",
        "sig" : "(item)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "autoSizeTabs",
        "type" : "function",
        "desc" : "Manual call to resize the tabs (if {@link #resizeTabs} is false this does nothing)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "beginUpdate",
        "type" : "function",
        "desc" : "Disables tab resizing while tabs are being added (if {@link #resizeTabs} is false this does nothing)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this TabPanel",
        "sig" : "(removeEl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "disableTab",
        "type" : "function",
        "desc" : "Disables a {@link Roo.TabPanelItem}. It cannot be the active tab, if it is this call is ignored.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enableTab",
        "type" : "function",
        "desc" : "Enables a {@link Roo.TabPanelItem} that is disabled.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "endUpdate",
        "type" : "function",
        "desc" : "Stops an update and resizes the tabs (if {@link #resizeTabs} is false this does nothing)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getActiveTab",
        "type" : "function",
        "desc" : "Gets the active {@link Roo.TabPanelItem}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getCount",
        "type" : "function",
        "desc" : "Returns the number of tabs in this TabPanel.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTab",
        "type" : "function",
        "desc" : "Returns the {@link Roo.TabPanelItem} with the specified id/index",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hideTab",
        "type" : "function",
        "desc" : "Hides the {@link Roo.TabPanelItem} with the specified id/index",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeTab",
        "type" : "function",
        "desc" : "Removes a {@link Roo.TabPanelItem}.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setTabWidth",
        "type" : "function",
        "desc" : "Resizes all the tabs to the passed width",
        "sig" : "(The)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "syncHeight",
        "type" : "function",
        "desc" : "Updates the tab body element to fit the height of the container element\nfor overflow scrolling",
        "sig" : "(targetHeight)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unhideTab",
        "type" : "function",
        "desc" : "\"Unhides\" the {@link Roo.TabPanelItem} with the specified id/index.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.TabPanelItem" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this tab becomes the active tab.",
        "sig" : "function (tabPanel, _self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeclose",
        "type" : "function",
        "desc" : "Fires before this tab is closed. To cancel the close, set cancel to true on e (e.cancel = true).",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "close",
        "type" : "function",
        "desc" : "Fires when this tab is closed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this tab is no longer the active tab.",
        "sig" : "function (tabPanel, _self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Activates this TabPanelItem -- this <b>does</b> deactivate the currently active TabPanelItem.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disables this TabPanelItem -- this does nothing if this is the active TabPanelItem.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enables this TabPanelItem if it was previously disabled.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getText",
        "type" : "function",
        "desc" : "Returns the text for this tab",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getUpdateManager",
        "type" : "function",
        "desc" : "Gets the {@link Roo.UpdateManager} for the body of this TabPanelItem. Enables you to perform Ajax updates.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this TabPanelItem -- if you don't activate another TabPanelItem this could look odd.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isActive",
        "type" : "function",
        "desc" : "Returns true if this tab is the active tab.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isHidden",
        "type" : "function",
        "desc" : "Returns true if this tab is \"hidden\"",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "refresh",
        "type" : "function",
        "desc" : "Forces a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the setUrl method has not been called.\n  This does not activate the panel, just updates its content.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setContent",
        "type" : "function",
        "desc" : "Sets the content for this TabPanelItem.",
        "sig" : "(content, loadScripts)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setHidden",
        "type" : "function",
        "desc" : "Show or hide the tab",
        "sig" : "(hidden)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setText",
        "type" : "function",
        "desc" : "Sets the text for the tab (Note: this also sets the tooltip text)",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setTooltip",
        "type" : "function",
        "desc" : "Set the tooltip for the tab.",
        "sig" : "(tooltip)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setUrl",
        "type" : "function",
        "desc" : "Set a URL to be used to load the content for this TabPanelItem.",
        "sig" : "(url, params, loadOnce)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Shows this TabPanelItem -- this <b>does not</b> deactivate the currently active TabPanelItem.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.Template" : {
    "props" : [
      {
        "name" : "html",
        "type" : "String",
        "desc" : "The HTML fragment or an array of fragments to join(\"\") or multiple arguments to join(\"\")",
        "memberOf" : ""
      },
      {
        "name" : "onLoad",
        "type" : "Function",
        "desc" : "Called after the template has been loaded and complied (usually from a remove source)",
        "memberOf" : ""
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "The Url to load the template from. beware if you are loading from a url, the data may not be ready if you use it instantly..\n                   it should be fixed so that template is observable...",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "append",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and appends the new node(s) to el.",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "apply",
        "type" : "function",
        "desc" : "Alias for {@link #applyTemplate}",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "applyTemplate",
        "type" : "function",
        "desc" : "Returns an HTML fragment of this template with the specified values applied.",
        "sig" : "(values)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "compile",
        "type" : "function",
        "desc" : "Compiles the template into an internal function, eliminating the RegEx overhead.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "from",
        "type" : "function",
        "desc" : "Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.",
        "sig" : "(el)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "insertAfter",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and inserts the new node(s) after el.",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "insertBefore",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and inserts the new node(s) before el.",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "insertFirst",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and inserts the new node(s) as the first child of el.",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "overwrite",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and overwrites the content of el with the new node(s).",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "set",
        "type" : "function",
        "desc" : "Sets the HTML used as the template and optionally compiles it.",
        "sig" : "(html, compile)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.Toolbar" : {
    "props" : [
      {
        "name" : "container",
        "type" : "String/HTMLElement/Element",
        "desc" : "The id or element that will contain the toolbar",
        "memberOf" : ""
      },
      {
        "name" : "items",
        "type" : "Array",
        "desc" : "array of button configs or elements to add (will be converted to a MixedCollection)",
        "memberOf" : "Roo"
      },
      {
        "name" : "text",
        "type" : "string",
        "desc" : "",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Adds element(s) to the toolbar -- this function takes a variable number of \narguments of mixed type and adds them to the toolbar.",
        "sig" : "(arg1, arg2)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addButton",
        "type" : "function",
        "desc" : "Adds a button (or buttons). See {@link Roo.Toolbar.Button} for more info on the config.",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addDom",
        "type" : "function",
        "desc" : "Adds a new element to the toolbar from the passed {@link Roo.DomHelper} config.",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addElement",
        "type" : "function",
        "desc" : "Adds any standard HTML element to the toolbar",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addField",
        "type" : "function",
        "desc" : "Adds a dynamically rendered Roo.form field (TextField, ComboBox, etc).\nNote: the field should not have been rendered yet. For a field that has already been\nrendered, use {@link #addElement}.",
        "sig" : "(field)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addFill",
        "type" : "function",
        "desc" : "Adds a fill element that forces subsequent additions to the right side of the toolbar",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addItem",
        "type" : "function",
        "desc" : "Adds any Toolbar.Item or subclass",
        "sig" : "(item)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addSeparator",
        "type" : "function",
        "desc" : "Adds a separator",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addSpacer",
        "type" : "function",
        "desc" : "Adds a spacer element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addText",
        "type" : "function",
        "desc" : "Adds text to the toolbar",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addxtype",
        "type" : "function",
        "desc" : "Add an Xtype element",
        "sig" : "(xtype)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the Element for this toolbar.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide the toolbar",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "insertButton",
        "type" : "function",
        "desc" : "Inserts any {@link Roo.Toolbar.Item}/{@link Roo.Toolbar.Button} at the specified index.",
        "sig" : "(index, item)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show the toolbar",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.Toolbar.Button" : {
    "props" : [
      {
        "name" : "clickEvent",
        "type" : "String",
        "desc" : "The type of event to map to the button's event handler (defaults to 'click')",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the button's main element.",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to start disabled (defaults to false)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "enableToggle",
        "type" : "Boolean",
        "desc" : "True to enable pressed/not pressed toggling (defaults to false)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "handleMouseEvents",
        "type" : "Boolean",
        "desc" : "False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "handler",
        "type" : "Function",
        "desc" : "A function called when the button is clicked (can be used instead of click event)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "True to start hidden (defaults to false)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : "The path to an image to display in the button (the image will be set as the background-image\nCSS property of the button by default, so if you want a mixed icon/text button, set cls:\"x-btn-text-icon\")",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "iconCls",
        "type" : "String",
        "desc" : "A css class which sets a background image to be used as the icon for this button (defaults to undefined).",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "menu",
        "type" : "Mixed",
        "desc" : "Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "menuAlign",
        "type" : "String",
        "desc" : "The position to align the menu to (see {@link Roo.Element#alignTo} for more details, defaults to 'tl-bl?').",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "minWidth",
        "type" : "Number",
        "desc" : "The minimum width for this button (used to give a set of buttons a common width)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "pressed",
        "type" : "Boolean",
        "desc" : "True to start pressed (only if enableToggle = true)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "renderTo",
        "type" : "String/HTMLElement/Element",
        "desc" : "The element to append the button to",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "repeat",
        "type" : "Boolean/Object",
        "desc" : "True to repeat fire the click event while the mouse is down. This can also be\n  an {@link Roo.util.ClickRepeater} config object (defaults to false).",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "scope",
        "type" : "Object",
        "desc" : "The scope of the handler",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The DOM tabIndex for this button (defaults to undefined)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "template",
        "type" : "Roo.Template",
        "desc" : "(Optional)\nAn {@link Roo.Template} with which to create the Button's main element. This Template must\ncontain numeric substitution parameter 0 if it is to display the tRoo property. Changing the template could\nrequire code modifications if required elements (e.g. a button) aren't present.",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "text",
        "type" : "String",
        "desc" : "The button text",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "toggleGroup",
        "type" : "String",
        "desc" : "The group this toggle button is a member of (only 1 per group can be pressed, only\n   applies if enableToggle = true)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "tooltip",
        "type" : "String/Object",
        "desc" : "The tooltip for the button - can be a string or QuickTips config object",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "tooltipType",
        "type" : "String",
        "desc" : "The type of tooltip to use. Either \"qtip\" (default) for QuickTips or \"title\" for title attribute.",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "type",
        "type" : "String",
        "desc" : "The button's type, corresponding to the DOM input element type attribute.  Either \"submit,\" \"reset\" or \"button\" (default).",
        "memberOf" : "Roo.Button"
      }
    ],
    "events" : [
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this button is clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "mouseout",
        "type" : "function",
        "desc" : "Fires when the mouse exits the button",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "mouseover",
        "type" : "function",
        "desc" : "Fires when the mouse hovers over the button",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when the button is rendered",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "toggle",
        "type" : "function",
        "desc" : "Fires when the \"pressed\" state of this button changes (only if enableToggle = true)",
        "sig" : "function (_self, pressed)\n{\n\n}",
        "memberOf" : "Roo.Button"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Removes and destroys this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disables this item",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enables this item",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Focus the button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the button's underlying element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "getText",
        "type" : "function",
        "desc" : "Gets the text for this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for boolean enable/disable",
        "sig" : "(enabled)",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "setHandler",
        "type" : "function",
        "desc" : "Assigns this button's click handler",
        "sig" : "(handler, scope)",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "setText",
        "type" : "function",
        "desc" : "Sets this button's text",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function for boolean show/hide",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Shows this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "toggle",
        "type" : "function",
        "desc" : "If a state it passed, it becomes the pressed state otherwise the current state is toggled.",
        "sig" : "(state)",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.Toolbar.Fill" : {
    "props" : [],
    "events" : [
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when the button is rendered",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Toolbar.Item"
      }
    ],
    "methods" : [
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Removes and destroys this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disables this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enables this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Get this item's HTML Element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function for boolean show/hide.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Shows this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      }
    ]
  },
  "Roo.Toolbar.Item" : {
    "props" : [],
    "events" : [
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when the button is rendered",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Removes and destroys this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disables this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enables this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Get this item's HTML Element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function for boolean show/hide.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Shows this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.Toolbar.Separator" : {
    "props" : [],
    "events" : [
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when the button is rendered",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Toolbar.Item"
      }
    ],
    "methods" : [
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Removes and destroys this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disables this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enables this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Get this item's HTML Element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function for boolean show/hide.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Shows this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      }
    ]
  },
  "Roo.Toolbar.Spacer" : {
    "props" : [],
    "events" : [
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when the button is rendered",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Toolbar.Item"
      }
    ],
    "methods" : [
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Removes and destroys this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disables this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enables this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Get this item's HTML Element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function for boolean show/hide.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Shows this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      }
    ]
  },
  "Roo.Toolbar.SplitButton" : {
    "props" : [
      {
        "name" : "arrowHandler",
        "type" : "Function",
        "desc" : "A function called when the arrow button is clicked (can be used instead of click event)",
        "memberOf" : "Roo.SplitButton"
      },
      {
        "name" : "arrowTooltip",
        "type" : "String",
        "desc" : "The title attribute of the arrow",
        "memberOf" : "Roo.SplitButton"
      },
      {
        "name" : "clickEvent",
        "type" : "String",
        "desc" : "The type of event to map to the button's event handler (defaults to 'click')",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the button's main element.",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to start disabled (defaults to false)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "enableToggle",
        "type" : "Boolean",
        "desc" : "True to enable pressed/not pressed toggling (defaults to false)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "handleMouseEvents",
        "type" : "Boolean",
        "desc" : "False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "handler",
        "type" : "Function",
        "desc" : "A function called when the button is clicked (can be used instead of click event)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "True to start hidden (defaults to false)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : "The path to an image to display in the button (the image will be set as the background-image\nCSS property of the button by default, so if you want a mixed icon/text button, set cls:\"x-btn-text-icon\")",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "iconCls",
        "type" : "String",
        "desc" : "A css class which sets a background image to be used as the icon for this button (defaults to undefined).",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "menu",
        "type" : "Mixed",
        "desc" : "Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "menuAlign",
        "type" : "String",
        "desc" : "The position to align the menu to (see {@link Roo.Element#alignTo} for more details, defaults to 'tl-bl?').",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "minWidth",
        "type" : "Number",
        "desc" : "The minimum width for this button (used to give a set of buttons a common width)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "pressed",
        "type" : "Boolean",
        "desc" : "True to start pressed (only if enableToggle = true)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "renderTo",
        "type" : "String/HTMLElement/Element",
        "desc" : "The element to append the button to",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "repeat",
        "type" : "Boolean/Object",
        "desc" : "True to repeat fire the click event while the mouse is down. This can also be\n  an {@link Roo.util.ClickRepeater} config object (defaults to false).",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "scope",
        "type" : "Object",
        "desc" : "The scope of the handler",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The DOM tabIndex for this button (defaults to undefined)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "template",
        "type" : "Roo.Template",
        "desc" : "(Optional)\nAn {@link Roo.Template} with which to create the Button's main element. This Template must\ncontain numeric substitution parameter 0 if it is to display the tRoo property. Changing the template could\nrequire code modifications if required elements (e.g. a button) aren't present.",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "text",
        "type" : "String",
        "desc" : "The button text",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "toggleGroup",
        "type" : "String",
        "desc" : "The group this toggle button is a member of (only 1 per group can be pressed, only\n   applies if enableToggle = true)",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "tooltip",
        "type" : "String/Object",
        "desc" : "The tooltip for the button - can be a string or QuickTips config object",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "tooltipType",
        "type" : "String",
        "desc" : "The type of tooltip to use. Either \"qtip\" (default) for QuickTips or \"title\" for title attribute.",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "type",
        "type" : "String",
        "desc" : "The button's type, corresponding to the DOM input element type attribute.  Either \"submit,\" \"reset\" or \"button\" (default).",
        "memberOf" : "Roo.Button"
      }
    ],
    "events" : [
      {
        "name" : "arrowclick",
        "type" : "function",
        "desc" : "Fires when this button's arrow is clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.SplitButton"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this button is clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "mouseout",
        "type" : "function",
        "desc" : "Fires when the mouse exits the button",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "mouseover",
        "type" : "function",
        "desc" : "Fires when the mouse hovers over the button",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when the button is rendered",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "toggle",
        "type" : "function",
        "desc" : "Fires when the \"pressed\" state of this button changes (only if enableToggle = true)",
        "sig" : "function (_self, pressed)\n{\n\n}",
        "memberOf" : "Roo.Button"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Removes and destroys this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Focus the button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.SplitButton"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the button's underlying element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "getText",
        "type" : "function",
        "desc" : "Gets the text for this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setArrowHandler",
        "type" : "function",
        "desc" : "Sets this button's arrow click handler",
        "sig" : "(handler, scope)",
        "static" : false,
        "memberOf" : "Roo.SplitButton"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for boolean enable/disable",
        "sig" : "(enabled)",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "setHandler",
        "type" : "function",
        "desc" : "Sets this button's click handler",
        "sig" : "(handler, scope)",
        "static" : false,
        "memberOf" : "Roo.SplitButton"
      },
      {
        "name" : "setText",
        "type" : "function",
        "desc" : "Sets this button's text",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function for boolean show/hide",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Shows this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "toggle",
        "type" : "function",
        "desc" : "If a state it passed, it becomes the pressed state otherwise the current state is toggled.",
        "sig" : "(state)",
        "static" : false,
        "memberOf" : "Roo.Button"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.Toolbar.TextItem" : {
    "props" : [
      {
        "name" : "text",
        "type" : "string",
        "desc" : "",
        "memberOf" : "Roo.Toolbar"
      }
    ],
    "events" : [
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when the button is rendered",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Toolbar.Item"
      }
    ],
    "methods" : [
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Removes and destroys this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disables this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enables this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Get this item's HTML Element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function for boolean show/hide.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Shows this item.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Toolbar.Item"
      }
    ]
  },
  "Roo.TreePanel" : {
    "props" : [
      {
        "name" : "adjustments",
        "type" : "Array",
        "desc" : "Values to <b>add</b> to the width/height when doing a {@link #fitToFrame} (default is [0, 0])",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "autoCreate",
        "type" : "Boolean/Object",
        "desc" : "True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "autoScroll",
        "type" : "Boolean",
        "desc" : "True to scroll overflow in this panel (use with {@link #fitToFrame})",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "background",
        "type" : "Boolean",
        "desc" : "True if the panel should not be activated when it is added (defaults to false)",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "closable",
        "type" : "Boolean",
        "desc" : "True if the panel can be closed/removed",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "content",
        "type" : "String",
        "desc" : "Raw content to fill content panel with (uses setContent on construction.)",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "fitContainer",
        "type" : "Boolean",
        "desc" : "When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "fitToFrame",
        "type" : "Boolean",
        "desc" : "True for this panel to adjust its size to fit when the region resizes  (defaults to false)",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadOnce",
        "type" : "Boolean",
        "desc" : "When used with {@link #url}, calls {@link #setUrl} with this value",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "params",
        "type" : "String/Object",
        "desc" : "When used with {@link #url}, calls {@link #setUrl} with this value",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "region",
        "type" : "String",
        "desc" : [
          "(center",
          "north",
          "south",
          "east",
          "west)"
        ],
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "resizeEl",
        "type" : "String/HTMLElement/Element",
        "desc" : "An element to resize if {@link #fitToFrame} is true (instead of this panel's element)",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "Extra style to add to the content panel",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "The title for this panel",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "toolbar",
        "type" : "Toolbar",
        "desc" : "A toolbar for this panel",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "tree",
        "type" : "Roo.tree.TreePanel",
        "desc" : "The tree TreePanel, with config etc.",
        "memberOf" : "Roo"
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "Calls {@link #setUrl} with this value",
        "memberOf" : "Roo.ContentPanel"
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this panel is activated.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this panel is activated.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when this tab is created",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires when this panel is resized if fitToFrame is true.",
        "sig" : "function (_self, width, height)\n{\n\n}",
        "memberOf" : "Roo.ContentPanel"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addxtype",
        "type" : "function",
        "desc" : "Adds a xtype elements to the panel - currently only supports Forms, View, JsonView.\n<pre><code>\n\nlayout.addxtype({\n       xtype : 'Form',\n       items: [ .... ]\n   }\n);\n\n</code></pre>",
        "sig" : "(cfg)",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this panel",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns this panel's element - used by regiosn to add.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns this panel's id",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "getTitle",
        "type" : "function",
        "desc" : "Returns this panel's title",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "getToolbar",
        "type" : "function",
        "desc" : "Returns the toolbar for this Panel if one was configured.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "getUpdateManager",
        "type" : "function",
        "desc" : "Get the {@link Roo.UpdateManager} for this panel. Enables you to perform Ajax updates.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isClosable",
        "type" : "function",
        "desc" : "Returns true is this panel was configured to be closable",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Loads this content panel immediately with content from XHR. Note: to delay loading until the panel is activated, use {@link #setUrl}.",
        "sig" : "(url, params, callback, discardUrl)",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "refresh",
        "type" : "function",
        "desc" : "Force a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the {@link #setUrl} method has not been called.\n  This does not activate the panel, just updates its content.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setContent",
        "type" : "function",
        "desc" : "Updates this panel's element",
        "sig" : "(content, loadScripts)",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "setTitle",
        "type" : "function",
        "desc" : "Set this panel's title",
        "sig" : "(title)",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "setUrl",
        "type" : "function",
        "desc" : "Set a URL to be used to load the content for this panel. When this panel is activated, the content will be loaded from that URL.",
        "sig" : "(url, params, loadOnce)",
        "static" : false,
        "memberOf" : "Roo.ContentPanel"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.UpdateManager" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "beforeupdate",
        "type" : "function",
        "desc" : "Fired before an update is made, return false from your handler and the update is cancelled.",
        "sig" : "function (el, url, params)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "failure",
        "type" : "function",
        "desc" : "Fired on update failure.",
        "sig" : "function (el, oResponseObject)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "update",
        "type" : "function",
        "desc" : "Fired after successful update is made.",
        "sig" : "function (el, oResponseObject)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "abort",
        "type" : "function",
        "desc" : "Aborts the executing transaction",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "formUpdate",
        "type" : "function",
        "desc" : "Performs an async form post, updating this element with the response. If the form has the attribute enctype=\"multipart/form-data\", it assumes it's a file upload.\nUses this.sslBlankUrl for SSL file uploads to prevent IE security warning.",
        "sig" : "(form, url, reset, callback)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Get the Element this UpdateManager is bound to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isUpdating",
        "type" : "function",
        "desc" : "Returns true if an update is in progress",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "refresh",
        "type" : "function",
        "desc" : "Refresh the element with the last used url or defaultUrl. If there is no url, it returns immediately",
        "sig" : "(callback)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setDefaultUrl",
        "type" : "function",
        "desc" : "Set the defaultUrl used for updates",
        "sig" : "(defaultUrl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setRenderer",
        "type" : "function",
        "desc" : "Set the content renderer for this UpdateManager. See {@link Roo.UpdateManager.BasicRenderer#render} for more details.",
        "sig" : "(renderer)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "showLoading",
        "type" : "function",
        "desc" : "Called to update the element to \"Loading\" state. Override to perform custom action.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "startAutoRefresh",
        "type" : "function",
        "desc" : "Set this element to auto refresh.",
        "sig" : "(interval, url, params, callback, refreshNow)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "stopAutoRefresh",
        "type" : "function",
        "desc" : "Stop auto refresh on this element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "update",
        "type" : "function",
        "desc" : "Performs an async request, updating this element with the response. If params are specified it uses POST, otherwise it uses GET.",
        "sig" : "(url, params, callback, discardUrl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "updateElement",
        "type" : "function",
        "desc" : "Static convenience method. This method is deprecated in favor of el.load({url:'foo.php', ...}).\nUsage:\n<pre><code>Roo.UpdateManager.updateElement(\"my-div\", \"stuff.php\");</code></pre>",
        "sig" : "(el, url, params, options)",
        "static" : true,
        "memberOf" : ""
      }
    ]
  },
  "Roo.UpdateManager.BasicRenderer" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "render",
        "type" : "function",
        "desc" : "This is called when the transaction is completed and it's time to update the element - The BasicRenderer\nupdates the elements innerHTML with the responseText - To perform a custom render (i.e. XML or JSON processing),\ncreate an object with a \"render(el, response)\" method and pass it to setRenderer on the UpdateManager.",
        "sig" : "(el, response, updateManager, callback)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.UpdateManager.defaults" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.View" : {
    "props" : [
      {
        "name" : "dataName",
        "type" : "String",
        "desc" : "the named area of the template to use as the data area\n                         Works with domtemplates roo-name=\"name\"",
        "memberOf" : ""
      },
      {
        "name" : "el",
        "type" : "String|Roo.Element",
        "desc" : "The container element.",
        "memberOf" : ""
      },
      {
        "name" : "emptyText",
        "type" : "String",
        "desc" : "The empty text to show when nothing is loaded.",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "multiSelect",
        "type" : "Boolean",
        "desc" : "Allow multiple selection",
        "memberOf" : ""
      },
      {
        "name" : "selectedClass",
        "type" : "String",
        "desc" : "The css class to add to selected nodes",
        "memberOf" : ""
      },
      {
        "name" : "singleSelect",
        "type" : "Boolean",
        "desc" : "Allow single selection",
        "memberOf" : ""
      },
      {
        "name" : "store",
        "type" : "Roo.data.Store",
        "desc" : "Data store to load data from.",
        "memberOf" : ""
      },
      {
        "name" : "text",
        "type" : "String",
        "desc" : "to display on mask (default Loading)",
        "memberOf" : ""
      },
      {
        "name" : "tickable",
        "type" : "Boolean",
        "desc" : "- selecting",
        "memberOf" : ""
      },
      {
        "name" : "toggleSelect",
        "type" : "Boolean",
        "desc" : "- selecting",
        "memberOf" : ""
      },
      {
        "name" : "tpl",
        "type" : "String|Roo.Template",
        "desc" : "The template used by this View",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforeclick",
        "type" : "function",
        "desc" : "Fires before a click is processed. Returns false to cancel the default action.",
        "sig" : "function (_self, index, node, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeselect",
        "type" : "function",
        "desc" : "Fires before a selection is made. If any handlers return false, the selection is cancelled.",
        "sig" : "function (_self, node, selections)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when a template node is clicked.",
        "sig" : "function (_self, index, node, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "contextmenu",
        "type" : "function",
        "desc" : "Fires when a template node is right clicked.",
        "sig" : "function (_self, index, node, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "dblclick",
        "type" : "function",
        "desc" : "Fires when a template node is double clicked.",
        "sig" : "function (_self, index, node, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "preparedata",
        "type" : "function",
        "desc" : "Fires on every row to render, to allow you to change the data.",
        "sig" : "function (_self, data)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "selectionchange",
        "type" : "function",
        "desc" : "Fires when the selected nodes change.",
        "sig" : "function (_self, selections)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearSelections",
        "type" : "function",
        "desc" : "Clear all selections",
        "sig" : "(suppressEvent)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "findItemFromChild",
        "type" : "function",
        "desc" : "Returns the template node the passed child belongs to or null if it doesn't belong to one.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the element this view is bound to.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getNode",
        "type" : "function",
        "desc" : "Gets a template node.",
        "sig" : "(nodeInfo)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getNodes",
        "type" : "function",
        "desc" : "Gets a range template nodes.",
        "sig" : "(startIndex, endIndex)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getSelectedIndexes",
        "type" : "function",
        "desc" : "Get the indexes of the selected nodes.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getSelectedNodes",
        "type" : "function",
        "desc" : "Get the currently selected nodes.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getSelectionCount",
        "type" : "function",
        "desc" : "Get the number of selected nodes.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "indexOf",
        "type" : "function",
        "desc" : "Finds the index of the passed node",
        "sig" : "(nodeInfo)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isSelected",
        "type" : "function",
        "desc" : "Returns true if the passed node is selected",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onBeforeLoad",
        "type" : "function",
        "desc" : "onbeforeLoad - masks the loading area.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "prepareData",
        "type" : "function",
        "desc" : "Function to override to reformat the data that is sent to\nthe template for each node.\nDEPRICATED - use the preparedata event handler.",
        "sig" : "(data)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "refresh",
        "type" : "function",
        "desc" : "Refreshes the view. - called by datachanged on the store. - do not call directly.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "refreshNode",
        "type" : "function",
        "desc" : "Refresh an individual node.",
        "sig" : "(index)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Selects nodes.",
        "sig" : "(nodeInfo, keepExisting, suppressEvent)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setStore",
        "type" : "function",
        "desc" : "Changes the data store this view uses and refresh the view.",
        "sig" : "(store)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unselect",
        "type" : "function",
        "desc" : "Unselects nodes.",
        "sig" : "(nodeInfo, keepExisting, suppressEvent)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.XComponent" : {
    "props" : [
      {
        "name" : "disabled",
        "type" : "Function|boolean",
        "desc" : "If this module is disabled by some rule, return true from the funtion",
        "memberOf" : ""
      },
      {
        "name" : "items",
        "type" : "Array",
        "desc" : "A single item array - the first element is the root of the tree..\nIt's done this way to stay compatible with the Xtype system...",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "String to display while loading.",
        "memberOf" : ""
      },
      {
        "name" : "order",
        "type" : "String",
        "desc" : "Used to set the order in which elements are created (usefull for multiple tabs)",
        "memberOf" : ""
      },
      {
        "name" : "parent",
        "type" : "String",
        "desc" : "Name of parent element which it get xtype added to..",
        "memberOf" : ""
      },
      {
        "name" : "region",
        "type" : "String",
        "desc" : "Region to render component to (defaults to center)",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "built",
        "type" : "function",
        "desc" : "Fires when this the componnt is built",
        "sig" : "function (c)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "build",
        "type" : "function",
        "desc" : "Build the registered modules.",
        "sig" : "(parent, optional)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "buildOrder",
        "type" : "function",
        "desc" : "make a list of modules to build.",
        "sig" : "()\n{\n\n}",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "overlayStrings",
        "type" : "function",
        "desc" : "Overlay a set of modified strings onto a component\nThis is dependant on our builder exporting the strings and 'named strings' elements.",
        "sig" : "(element, associative)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "preBuild",
        "type" : "function",
        "desc" : "move modules into their correct place in the tree..",
        "sig" : "()\n{\n\n}",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "register",
        "type" : "function",
        "desc" : "Register components to be built later.\n\nThis solves the following issues\n- Building is not done on page load, but after an authentication process has occured.\n- Interface elements are registered on page load\n- Parent Interface elements may not be loaded before child, so this handles that..\n\n\nexample:\n\nMyApp.register({\n          order : '000001',\n          module : 'Pman.Tab.projectMgr',\n          region : 'center',\n          parent : 'Pman.layout',\n          disabled : false,  // or use a function..\n        })\n* @param {Object} details about module",
        "sig" : "()\n{\n\n}",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "render\nrender element to dom or tree",
        "sig" : "(optional)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "toObject",
        "type" : "function",
        "desc" : "convert a string to an object..\neg. 'AAA.BBB' -> finds AAA.BBB",
        "sig" : "()\n{\n\n}",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.XComponent.event.events" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.XTemplate" : {
    "props" : [
      {
        "name" : "html",
        "type" : "String",
        "desc" : "The HTML fragment or an array of fragments to join(\"\") or multiple arguments to join(\"\")",
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "onLoad",
        "type" : "Function",
        "desc" : "Called after the template has been loaded and complied (usually from a remove source)",
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "The Url to load the template from. beware if you are loading from a url, the data may not be ready if you use it instantly..\n                   it should be fixed so that template is observable...",
        "memberOf" : "Roo.Template"
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "append",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and appends the new node(s) to el.",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "apply",
        "type" : "function",
        "desc" : "Alias for {@link #applyTemplate}",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "applySubTemplate",
        "type" : "function",
        "desc" : "same as applyTemplate, except it's done to one of the subTemplates\nwhen using named templates, you can do:\n\nvar str = pl.applySubTemplate('your-name', values);",
        "sig" : "(id, values, parent)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "applyTemplate",
        "type" : "function",
        "desc" : "Returns an HTML fragment of this template with the specified values applied.",
        "sig" : "(values)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "compile",
        "type" : "function",
        "desc" : "compile the template\n\nThis is not recursive, so I'm not sure how nested templates are really going to be handled..",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "from",
        "type" : "function",
        "desc" : "Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.",
        "sig" : "(el)",
        "static" : true,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "insertAfter",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and inserts the new node(s) after el.",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "insertBefore",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and inserts the new node(s) before el.",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "insertFirst",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and inserts the new node(s) as the first child of el.",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "overwrite",
        "type" : "function",
        "desc" : "Applies the supplied values to the template and overwrites the content of el with the new node(s).",
        "sig" : "(el, values, returnElement)",
        "static" : false,
        "memberOf" : "Roo.Template"
      },
      {
        "name" : "set",
        "type" : "function",
        "desc" : "Sets the HTML used as the template and optionally compiles it.",
        "sig" : "(html, compile)",
        "static" : false,
        "memberOf" : "Roo.Template"
      }
    ]
  },
  "Roo.bootstrap" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.bootstrap.Alert" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "close",
        "type" : "Boolean",
        "desc" : "true to show a x closer",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fa",
        "type" : "String",
        "desc" : "font-awesomeicon",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "The content of alert",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "seconds",
        "type" : "Number",
        "desc" : "default:-1 Number of seconds until it disapears (-1 means never.)",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "The title of alert",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "weight",
        "type" : "String",
        "desc" : [
          "(success",
          "info",
          "warning",
          "danger)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide the Alert",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setHtml",
        "type" : "function",
        "desc" : "Set the Body Message HTML",
        "sig" : "(html)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setIcon",
        "type" : "function",
        "desc" : "Set the Icon of the alert",
        "sig" : "(see)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setTitle",
        "type" : "function",
        "desc" : "Set the Title Message HTML",
        "sig" : "(html)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setWeight",
        "type" : "function",
        "desc" : "Set the Weight of the alert",
        "sig" : "((success|info|warning|danger))",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show the Alert",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.BezierSignature" : {
    "props" : [
      {
        "name" : "Add",
        "type" : "integer",
        "desc" : "the next point only if the previous one is farther than x pixels. Defaults to 5.",
        "memberOf" : ""
      },
      {
        "name" : "Callback",
        "type" : "function",
        "desc" : "when stroke begin.",
        "memberOf" : ""
      },
      {
        "name" : "Color",
        "type" : "string",
        "desc" : "used to draw the lines. Can be any color format accepted by context.fillStyle. Defaults to \"black\".",
        "memberOf" : ""
      },
      {
        "name" : "Draw",
        "type" : "integer",
        "desc" : "the next point at most once per every x milliseconds. Set it to 0 to turn off throttling. Defaults to 16.",
        "memberOf" : ""
      },
      {
        "name" : "Maximum",
        "type" : "float",
        "desc" : "width of a line. Defaults to 2.5.",
        "memberOf" : ""
      },
      {
        "name" : "Minimum",
        "type" : "float",
        "desc" : "width of a line. Defaults to 0.5.",
        "memberOf" : ""
      },
      {
        "name" : "Radius",
        "type" : "float|function",
        "desc" : "of a single dot.",
        "memberOf" : ""
      },
      {
        "name" : "Weight",
        "type" : "float",
        "desc" : "used to modify new velocity based on the previous velocity. Defaults to 0.7.",
        "memberOf" : ""
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "canvas",
        "type" : "int",
        "desc" : "height",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Body" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Brick" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "bgimage",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "href",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "square",
        "type" : "Boolean",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "video",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "When a Brick is click",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Button" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "badge",
        "type" : "String",
        "desc" : "text for badge",
        "memberOf" : ""
      },
      {
        "name" : "badge_weight",
        "type" : "String",
        "desc" : [
          "(default",
          "primary",
          "secondary",
          "success",
          "info",
          "warning",
          "danger",
          "link",
          "light",
          "dark)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "default false;",
        "memberOf" : ""
      },
      {
        "name" : "fa",
        "type" : "String",
        "desc" : "fontawesome icon - eg. 'comment' - without the fa/fas etc..",
        "memberOf" : ""
      },
      {
        "name" : "glyphicon",
        "type" : "String",
        "desc" : "depricated - use fa",
        "memberOf" : ""
      },
      {
        "name" : "grpup",
        "type" : "Boolean",
        "desc" : "if parent is a btn group - then it turns it into a toogleGroup.",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "href",
        "type" : "String",
        "desc" : "empty or href",
        "memberOf" : ""
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "The button content",
        "memberOf" : ""
      },
      {
        "name" : "inverse",
        "type" : "Boolean",
        "desc" : "dark themed version",
        "memberOf" : ""
      },
      {
        "name" : "isClose",
        "type" : "Boolean",
        "desc" : "default false;",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "offtext",
        "type" : "String",
        "desc" : "text for off slidy toggle state",
        "memberOf" : ""
      },
      {
        "name" : "ontext",
        "type" : "String",
        "desc" : "text for on slidy toggle state",
        "memberOf" : ""
      },
      {
        "name" : "outline",
        "type" : "Boolean",
        "desc" : "default false (except for weight=default which emulates old behaveiour with an outline)",
        "memberOf" : ""
      },
      {
        "name" : "pressed",
        "type" : "Boolean",
        "desc" : "default null - if the button ahs active state",
        "memberOf" : ""
      },
      {
        "name" : "preventDefault",
        "type" : "Boolean",
        "desc" : "default true (stop click event triggering the URL if it's a link.)",
        "memberOf" : ""
      },
      {
        "name" : "removeClass",
        "type" : "Boolean",
        "desc" : "remove the standard class..",
        "memberOf" : ""
      },
      {
        "name" : "size",
        "type" : "String",
        "desc" : [
          "(lg",
          "sm",
          "xs)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tag",
        "type" : "String",
        "desc" : [
          "(a",
          "input",
          "submit)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "target",
        "type" : "String",
        "desc" : [
          "(_self",
          "_blank",
          "_parent",
          "_top",
          "other)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "theme",
        "type" : "String",
        "desc" : [
          "(default",
          "glow)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "toggle",
        "type" : "Boolean",
        "desc" : "is it a slidy toggle button",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "weight",
        "type" : "String",
        "desc" : [
          "(default",
          "primary",
          "secondary",
          "success",
          "info",
          "warning",
          "danger",
          "link",
          "light",
          "dark)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "When a button is pressed",
        "sig" : "function (btn, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "dblclick",
        "type" : "function",
        "desc" : "When a button is double clicked",
        "sig" : "function (btn, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "toggle",
        "type" : "function",
        "desc" : "After the button has been toggles",
        "sig" : "function (btn, e, pressed)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enables this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getText",
        "type" : "function",
        "desc" : "get the text of the first selected button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isActive",
        "type" : "function",
        "desc" : "get the current active state",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setActive",
        "type" : "function",
        "desc" : "sets the active state on/off,",
        "sig" : "(state)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setText",
        "type" : "function",
        "desc" : "set the text of the first selected button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "toggleActive",
        "type" : "function",
        "desc" : "toggles the current active state",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.ButtonGroup" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : "vertical | justified  (default none)",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "btn",
        "type" : "Boolean",
        "desc" : "true | false",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "direction",
        "type" : "String",
        "desc" : "up | down (default down)",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "size",
        "type" : "String",
        "desc" : "lg | sm | xs (default empty normal)",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "toolbar",
        "type" : "Boolean",
        "desc" : "false | true",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addItem",
        "type" : "function",
        "desc" : "Add a button to the group (similar to NavItem API.)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.ButtonUploader" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "badge",
        "type" : "String",
        "desc" : "text for badge",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "badge_weight",
        "type" : "String",
        "desc" : [
          "(default",
          "primary",
          "secondary",
          "success",
          "info",
          "warning",
          "danger",
          "link",
          "light",
          "dark)"
        ],
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "default false;",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "errorTimeout",
        "type" : "Number",
        "desc" : "default 3000",
        "memberOf" : ""
      },
      {
        "name" : "fa",
        "type" : "String",
        "desc" : "fontawesome icon - eg. 'comment' - without the fa/fas etc..",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "glyphicon",
        "type" : "String",
        "desc" : "depricated - use fa",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "grpup",
        "type" : "Boolean",
        "desc" : "if parent is a btn group - then it turns it into a toogleGroup.",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "href",
        "type" : "String",
        "desc" : "empty or href",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "html",
        "type" : "Array",
        "desc" : "The button text.",
        "memberOf" : ""
      },
      {
        "name" : "images",
        "type" : "Array",
        "desc" : "an array of ?? Img objects ??? when loading existing files..",
        "memberOf" : ""
      },
      {
        "name" : "inverse",
        "type" : "Boolean",
        "desc" : "dark themed version",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "isClose",
        "type" : "Boolean",
        "desc" : "default false;",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "multiple",
        "type" : "Boolean",
        "desc" : "(default true) Should the upload allow multiple files to be uploaded.",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "offtext",
        "type" : "String",
        "desc" : "text for off slidy toggle state",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "ontext",
        "type" : "String",
        "desc" : "text for on slidy toggle state",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "outline",
        "type" : "Boolean",
        "desc" : "default false (except for weight=default which emulates old behaveiour with an outline)",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "pressed",
        "type" : "Boolean",
        "desc" : "default null - if the button ahs active state",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "preventDefault",
        "type" : "Boolean",
        "desc" : "default true (stop click event triggering the URL if it's a link.)",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "removeClass",
        "type" : "Boolean",
        "desc" : "remove the standard class..",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "size",
        "type" : "String",
        "desc" : [
          "(lg",
          "sm",
          "xs)"
        ],
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tag",
        "type" : "String",
        "desc" : [
          "(a",
          "input",
          "submit)"
        ],
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "target",
        "type" : "String",
        "desc" : [
          "(_self",
          "_blank",
          "_parent",
          "_top",
          "other)"
        ],
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "theme",
        "type" : "String",
        "desc" : [
          "(default",
          "glow)"
        ],
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "toggle",
        "type" : "Boolean",
        "desc" : "is it a slidy toggle button",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "weight",
        "type" : "String",
        "desc" : [
          "(default",
          "primary",
          "secondary",
          "success",
          "info",
          "warning",
          "danger",
          "link",
          "light",
          "dark)"
        ],
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeselect",
        "type" : "function",
        "desc" : "When button is pressed, before show upload files dialog is shown",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "When a button is pressed",
        "sig" : "function (btn, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "dblclick",
        "type" : "function",
        "desc" : "When a button is double clicked",
        "sig" : "function (btn, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fired when files have been selected,",
        "type" : "function",
        "desc" : "When a the download link is clicked",
        "sig" : "function (_self, Array)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "toggle",
        "type" : "function",
        "desc" : "After the button has been toggles",
        "sig" : "function (btn, e, pressed)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Button"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enables this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getText",
        "type" : "function",
        "desc" : "get the text of the first selected button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isActive",
        "type" : "function",
        "desc" : "get the current active state",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "addCard - add an Attachment to the uploader",
        "sig" : "(data)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setActive",
        "type" : "function",
        "desc" : "sets the active state on/off,",
        "sig" : "(state)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setText",
        "type" : "function",
        "desc" : "set the text of the first selected button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "toggleActive",
        "type" : "function",
        "desc" : "toggles the current active state",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Calendar" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "header",
        "type" : "Object",
        "desc" : "generate the user specific header of the calendar, default false",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadMask",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "startDay",
        "type" : "Number",
        "desc" : "Day index at which the week should begin, 0-based (defaults to 0, which is Sunday)",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "eventclick",
        "type" : "function",
        "desc" : "Fires when the mouse click an",
        "sig" : "function (_self, )\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "evententer",
        "type" : "function",
        "desc" : "Fires when mouse over an event",
        "sig" : "function (_self, Event)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "eventleave",
        "type" : "function",
        "desc" : "Fires when the mouse leaves an",
        "sig" : "function (_self, )\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "monthchange",
        "type" : "function",
        "desc" : "Fires when the displayed month changes",
        "sig" : "function (_self, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Fires when a date is selected",
        "sig" : "function (_self, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Card" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "display",
        "type" : "String",
        "desc" : [
          "(none",
          "inline",
          "inline-block",
          "block",
          "table",
          "table-cell",
          "table-row",
          "flex",
          "inline-flex)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "display_lg",
        "type" : "String",
        "desc" : [
          "(none",
          "inline",
          "inline-block",
          "block",
          "table",
          "table-cell",
          "table-row",
          "flex",
          "inline-flex)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "display_sm",
        "type" : "String",
        "desc" : [
          "(none",
          "inline",
          "inline-block",
          "block",
          "table",
          "table-cell",
          "table-row",
          "flex",
          "inline-flex)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "display_xl",
        "type" : "String",
        "desc" : [
          "(none",
          "inline",
          "inline-block",
          "block",
          "table",
          "table-cell",
          "table-row",
          "flex",
          "inline-flex)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "display_xs",
        "type" : "String",
        "desc" : [
          "(none",
          "inline",
          "inline-block",
          "block",
          "table",
          "table-cell",
          "table-row",
          "flex",
          "inline-flex)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "footer",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "header",
        "type" : "String|Object",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "header_image",
        "type" : "String",
        "desc" : "src url of image.",
        "memberOf" : ""
      },
      {
        "name" : "header_size",
        "type" : "Number",
        "desc" : [
          "(0",
          "1",
          "2",
          "3",
          "4",
          "5)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "header_weight",
        "type" : "Number",
        "desc" : [
          "(primary",
          "secondary",
          "success",
          "info",
          "warning",
          "danger",
          "light",
          "dark)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String|Boolean",
        "desc" : "-- html contents - or just use children.. use false to hide it..",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "margin",
        "type" : "String",
        "desc" : [
          "(0",
          "1",
          "2",
          "3",
          "4",
          "5",
          "auto)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "margin_bottom",
        "type" : "String",
        "desc" : [
          "(0",
          "1",
          "2",
          "3",
          "4",
          "5",
          "auto)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "margin_left",
        "type" : "String",
        "desc" : [
          "(0",
          "1",
          "2",
          "3",
          "4",
          "5",
          "auto)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "margin_right",
        "type" : "String",
        "desc" : [
          "(0",
          "1",
          "2",
          "3",
          "4",
          "5",
          "auto)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "margin_top",
        "type" : "String",
        "desc" : [
          "(0",
          "1",
          "2",
          "3",
          "4",
          "5",
          "auto)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "margin_x",
        "type" : "String",
        "desc" : [
          "(0",
          "1",
          "2",
          "3",
          "4",
          "5",
          "auto)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "margin_y",
        "type" : "String",
        "desc" : [
          "(0",
          "1",
          "2",
          "3",
          "4",
          "5",
          "auto)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "padding",
        "type" : "String",
        "desc" : [
          "(0",
          "1",
          "2",
          "3",
          "4",
          "5)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "padding_bottom",
        "type" : "String",
        "desc" : [
          "(0",
          "1",
          "2",
          "3",
          "4",
          "5)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "padding_left",
        "type" : "String",
        "desc" : [
          "(0",
          "1",
          "2",
          "3",
          "4",
          "5)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "padding_right",
        "type" : "String",
        "desc" : [
          "(0",
          "1",
          "2",
          "3",
          "4",
          "5)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "padding_top",
        "type" : "String",
        "desc" : [
          "(0",
          "1",
          "2",
          "3",
          "4",
          "5)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "padding_x",
        "type" : "String",
        "desc" : [
          "(0",
          "1",
          "2",
          "3",
          "4",
          "5)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "padding_y",
        "type" : "String",
        "desc" : [
          "(0",
          "1",
          "2",
          "3",
          "4",
          "5)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "subtitle",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "weight",
        "type" : "String",
        "desc" : [
          "(primary",
          "warning",
          "info",
          "danger",
          "secondary",
          "success",
          "light",
          "dark)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "cardover",
        "type" : "function",
        "desc" : "When a card element is dragged over ready to drop (return false to block dropable)",
        "sig" : "function (_self, data)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "drop",
        "type" : "function",
        "desc" : "When a element a card is dropped",
        "sig" : "function (_self, move_card, position, next_to_card)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "rotate",
        "type" : "function",
        "desc" : "When a element a card is rotate",
        "sig" : "function (_self, n, rotate)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "acceptCard",
        "type" : "function",
        "desc" : "accept card\n\n-        card.acceptCard(move_card, info.position, info.card, info.items_n);",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getDropPoint",
        "type" : "function",
        "desc" : "Decide whether to drop above or below a View node.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getTargetFromEvent",
        "type" : "function",
        "desc" : "Part of the Roo.dd.DropZone interface. If no target node is found, the\n   whole Element becomes the target, and this causes the drop gesture to append.\n\n   Returns an object:\n    {\n           \n           position : 'below' or 'above'\n           card  : relateive to card OBJECT (or true for no cards listed)\n           items_n : relative to nth item in list\n           card_n : relative to  nth card in list\n    }",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.CardFooter" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "clickable",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "class of the element",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "contents of the element",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "preventDefault",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "role",
        "type" : "String",
        "desc" : "default blank - set to button to force cursor pointer",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tag",
        "type" : "String",
        "desc" : "tag of the element",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "When a element is chick",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.CardHeader" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "clickable",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "class of the element",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "contents of the element",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "preventDefault",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "role",
        "type" : "String",
        "desc" : "default blank - set to button to force cursor pointer",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tag",
        "type" : "String",
        "desc" : "tag of the element",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "When a element is chick",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.CardImageTop" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "clickable",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "class of the element",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "contents of the element",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "preventDefault",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "role",
        "type" : "String",
        "desc" : "default blank - set to button to force cursor pointer",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tag",
        "type" : "String",
        "desc" : "tag of the element",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "When a element is chick",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.CardUploader" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "badge",
        "type" : "String",
        "desc" : "text for badge",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "badge_weight",
        "type" : "String",
        "desc" : [
          "(default",
          "primary",
          "secondary",
          "success",
          "info",
          "warning",
          "danger",
          "link",
          "light",
          "dark)"
        ],
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "default false;",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "errorTimeout",
        "type" : "Number",
        "desc" : "default 3000",
        "memberOf" : ""
      },
      {
        "name" : "fa",
        "type" : "String",
        "desc" : "fontawesome icon - eg. 'comment' - without the fa/fas etc..",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "glyphicon",
        "type" : "String",
        "desc" : "depricated - use fa",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "grpup",
        "type" : "Boolean",
        "desc" : "if parent is a btn group - then it turns it into a toogleGroup.",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "href",
        "type" : "String",
        "desc" : "empty or href",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "html",
        "type" : "Array",
        "desc" : "The button text.",
        "memberOf" : ""
      },
      {
        "name" : "images",
        "type" : "Array",
        "desc" : "an array of ?? Img objects ??? when loading existing files..",
        "memberOf" : ""
      },
      {
        "name" : "inverse",
        "type" : "Boolean",
        "desc" : "dark themed version",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "isClose",
        "type" : "Boolean",
        "desc" : "default false;",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "offtext",
        "type" : "String",
        "desc" : "text for off slidy toggle state",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "ontext",
        "type" : "String",
        "desc" : "text for on slidy toggle state",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "outline",
        "type" : "Boolean",
        "desc" : "default false (except for weight=default which emulates old behaveiour with an outline)",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "pressed",
        "type" : "Boolean",
        "desc" : "default null - if the button ahs active state",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "preventDefault",
        "type" : "Boolean",
        "desc" : "default true (stop click event triggering the URL if it's a link.)",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "removeClass",
        "type" : "Boolean",
        "desc" : "remove the standard class..",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "size",
        "type" : "String",
        "desc" : [
          "(lg",
          "sm",
          "xs)"
        ],
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tag",
        "type" : "String",
        "desc" : [
          "(a",
          "input",
          "submit)"
        ],
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "target",
        "type" : "String",
        "desc" : [
          "(_self",
          "_blank",
          "_parent",
          "_top",
          "other)"
        ],
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "theme",
        "type" : "String",
        "desc" : [
          "(default",
          "glow)"
        ],
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "toggle",
        "type" : "Boolean",
        "desc" : "is it a slidy toggle button",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "weight",
        "type" : "String",
        "desc" : [
          "(default",
          "primary",
          "secondary",
          "success",
          "info",
          "warning",
          "danger",
          "link",
          "light",
          "dark)"
        ],
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "When a button is pressed",
        "sig" : "function (btn, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "dblclick",
        "type" : "function",
        "desc" : "When a button is double clicked",
        "sig" : "function (btn, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "download",
        "type" : "function",
        "desc" : "When a the download link is clicked",
        "sig" : "function (_self, The)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "preview",
        "type" : "function",
        "desc" : "When a image is clicked on - and needs to display a slideshow or similar..",
        "sig" : "function (_self, The)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "toggle",
        "type" : "function",
        "desc" : "After the button has been toggles",
        "sig" : "function (btn, e, pressed)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Button"
      }
    ],
    "methods" : [
      {
        "name" : "addCard",
        "type" : "function",
        "desc" : "addCard - add an Attachment to the uploader",
        "sig" : "(data)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enables this button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getText",
        "type" : "function",
        "desc" : "get the text of the first selected button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isActive",
        "type" : "function",
        "desc" : "get the current active state",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setActive",
        "type" : "function",
        "desc" : "sets the active state on/off,",
        "sig" : "(state)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setText",
        "type" : "function",
        "desc" : "set the text of the first selected button",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "toggleActive",
        "type" : "function",
        "desc" : "toggles the current active state",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Button"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.CheckBox" : {
    "props" : [
      {
        "name" : "(button|checkbox|email|file|hidden|image|number|password|radio|range|reset|search|submit|text)",
        "type" : "String",
        "desc" : "inputType",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "accept",
        "type" : "String",
        "desc" : [
          "(image",
          "video",
          "audio)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "after",
        "type" : "string",
        "desc" : "- input group add on after",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "center",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autocomplete",
        "type" : "String",
        "desc" : "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "before",
        "type" : "string",
        "desc" : "- input group add on before",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "boxLabel",
        "type" : "String",
        "desc" : "The text that appears beside the checkbox",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "capture",
        "type" : "String",
        "desc" : [
          "(user",
          "camera)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "checked",
        "type" : "Boolean",
        "desc" : "initnal the element",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "is it disabled",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "fieldLabel",
        "type" : "string",
        "desc" : "- the label associated",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "forceFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "groupId",
        "type" : "String",
        "desc" : "the checkbox group id // normal just use for checkbox",
        "memberOf" : ""
      },
      {
        "name" : "hasFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "indicatorpos",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "inline",
        "type" : "Boolean",
        "desc" : "inline the element (default false)",
        "memberOf" : ""
      },
      {
        "name" : "inputValue",
        "type" : "String",
        "desc" : "The value that should go into the generated input element's value when checked.",
        "memberOf" : ""
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to display if {@link #validator} test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(top",
          "left)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "set the width of label",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "name of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "placeholder",
        "type" : "string",
        "desc" : "- placeholder to put in text.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "preventMark",
        "type" : "Boolean",
        "desc" : "Do not show tick or cross if error/success",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "Specifies that the field should be read-only",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "-- Depricated - use Invalid Text",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "size",
        "type" : "string",
        "desc" : "- (lg|sm) or leave empty..",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "String",
        "desc" : "label tooltip",
        "memberOf" : ""
      },
      {
        "name" : "validClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "value",
        "type" : "string",
        "desc" : "default value of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "valueOff",
        "type" : "String",
        "desc" : "The value that should go into the generated input element's value when unchecked.",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "weight",
        "type" : "String",
        "desc" : [
          "(primary",
          "warning",
          "info",
          "danger",
          "success)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "check",
        "type" : "function",
        "desc" : "Fires when the element is checked or unchecked.",
        "sig" : "function (_self, checked)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when the element is click.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "paste",
        "type" : "function",
        "desc" : "Fires after the user pastes into input",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "get",
        "type" : "function",
        "desc" : "fetch a CheckBox Group based on the group ID",
        "sig" : "(the)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name of the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "inputEl",
        "type" : "function",
        "desc" : "return the real input element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "markValid",
        "type" : "function",
        "desc" : "Mark this field as valid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "register",
        "type" : "function",
        "desc" : "register a CheckBox Group",
        "sig" : "(the)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      }
    ]
  },
  "Roo.bootstrap.Column" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "alert",
        "type" : "String",
        "desc" : [
          "(success",
          "info",
          "warning",
          "danger)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fa",
        "type" : "String",
        "desc" : [
          "(ban",
          "check",
          "...)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "fasize",
        "type" : "Number",
        "desc" : [
          "(1",
          "2",
          "....)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "content of column.",
        "memberOf" : ""
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : [
          "(info-sign",
          "check",
          "...)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens or 0 for hidden",
        "memberOf" : ""
      },
      {
        "name" : "lgoff",
        "type" : "Number",
        "desc" : "colspan offset out of 12 for large computer-sized screens or 0 for hidden",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens or 0 for hidden",
        "memberOf" : ""
      },
      {
        "name" : "mdoff",
        "type" : "Number",
        "desc" : "colspan offset out of 12 for computer-sized screens or 0 for hidden",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens or 0 for hidden",
        "memberOf" : ""
      },
      {
        "name" : "smoff",
        "type" : "Number",
        "desc" : "colspan offset out of 12 for tablet-sized screens or 0 for hidden",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens or 0 for hidden",
        "memberOf" : ""
      },
      {
        "name" : "xsoff",
        "type" : "Number",
        "desc" : "colspan offset out of 12 for mobile-sized screens or 0 for hidden",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.ComboBox" : {
    "props" : [
      {
        "name" : "(button|checkbox|email|file|hidden|image|number|password|radio|range|reset|search|submit|text)",
        "type" : "String",
        "desc" : "inputType",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "accept",
        "type" : "String",
        "desc" : [
          "(image",
          "video",
          "audio)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "after",
        "type" : "string",
        "desc" : "- input group add on after",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "center",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allQuery",
        "type" : "String",
        "desc" : "The text query to send to the server to return all records for the list with no filtering (defaults to '')",
        "memberOf" : ""
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "alwaysQuery",
        "type" : "Boolean",
        "desc" : "Disable caching of results, and always send query",
        "memberOf" : ""
      },
      {
        "name" : "animate",
        "type" : "Boolean",
        "desc" : "default true",
        "memberOf" : ""
      },
      {
        "name" : "append",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "autoCreate",
        "type" : "Boolean/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to:\n{tag: \"input\", type: \"text\", size: \"24\", autocomplete: \"off\"})",
        "memberOf" : ""
      },
      {
        "name" : "autoFocus",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "autocomplete",
        "type" : "String",
        "desc" : "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "before",
        "type" : "string",
        "desc" : "- input group add on before",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "blockFocus",
        "type" : "Boolean",
        "desc" : "Prevents all focus calls, so it can work with things like HTML edtor bar",
        "memberOf" : ""
      },
      {
        "name" : "btnPosition",
        "type" : "String",
        "desc" : "set the position of the trigger button (left | right) default right",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "capture",
        "type" : "String",
        "desc" : [
          "(user",
          "camera)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "caret",
        "type" : "String",
        "desc" : [
          "(search",
          "calendar)"
        ],
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableClear",
        "type" : "Boolean",
        "desc" : "Disable showing of clear button.",
        "memberOf" : ""
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "is it disabled",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "displayField",
        "type" : "String",
        "desc" : "The underlying data field name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'text' if mode = 'local')",
        "memberOf" : ""
      },
      {
        "name" : "editable",
        "type" : "Boolean",
        "desc" : "False to prevent the user from typing text directly into the field, just like a\ntraditional select (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "emptyResultText",
        "type" : "Boolean",
        "desc" : "only for touch device",
        "memberOf" : ""
      },
      {
        "name" : "emptyTitle",
        "type" : "String",
        "desc" : "default ''",
        "memberOf" : ""
      },
      {
        "name" : "fieldLabel",
        "type" : "string",
        "desc" : "- the label associated",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "forceFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "forceSelection",
        "type" : "Boolean",
        "desc" : "True to restrict the selected value to one of the values in the list, false to\nallow the user to set arbitrary text into the field (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "grow",
        "type" : "Boolean",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "growMax",
        "type" : "Number",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "growMin",
        "type" : "Number",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "handleHeight",
        "type" : "Number",
        "desc" : "The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8)",
        "memberOf" : ""
      },
      {
        "name" : "hasFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hiddenName",
        "type" : "String",
        "desc" : "If specified, a hidden form field with this name is dynamically generated to store the\nfield's data value (defaults to the underlying DOM element's name)",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideTrigger",
        "type" : "Boolean",
        "desc" : "True to hide the trigger element and display only the base text field (defaults to false)",
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "indicatorpos",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "DEPRICATED - uses BS4 is-valid now",
        "memberOf" : ""
      },
      {
        "name" : "invalidFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to display if {@link #validator} test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(top",
          "left)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "set the width of label",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "lazyRender",
        "type" : "Boolean",
        "desc" : "True to prevent the ComboBox from rendering until requested (should always be used when\nrendering into an Roo.Editor, defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "listAlign",
        "type" : "String",
        "desc" : "A valid anchor position value. See {@link Roo.Element#alignTo} for details on supported\nanchor positions (defaults to 'tl-bl')",
        "memberOf" : ""
      },
      {
        "name" : "listClass",
        "type" : "String",
        "desc" : "CSS class to apply to the dropdown list element (defaults to '')",
        "memberOf" : ""
      },
      {
        "name" : "listWidth",
        "type" : "Number",
        "desc" : "The width in pixels of the dropdown list (defaults to the width of the ComboBox field)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadingText",
        "type" : "String",
        "desc" : "The text to display in the dropdown list while data is loading.  Only applies\nwhen mode = 'remote' (defaults to 'Loading...')",
        "memberOf" : ""
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxHeight",
        "type" : "Number",
        "desc" : "The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)",
        "memberOf" : ""
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minChars",
        "type" : "Number",
        "desc" : "The minimum number of characters the user must type before autocomplete and typeahead activate\n(defaults to 4, does not apply if editable = false)",
        "memberOf" : ""
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minListWidth",
        "type" : "Number",
        "desc" : "The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if\nlistWidth has a higher value)",
        "memberOf" : ""
      },
      {
        "name" : "mobileTouchView",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "mobile_restrict_height",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "modalTitle",
        "type" : "String",
        "desc" : "The title of the dialog that pops up on mobile views.",
        "memberOf" : ""
      },
      {
        "name" : "mode",
        "type" : "String",
        "desc" : "Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)",
        "memberOf" : ""
      },
      {
        "name" : "multiple",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "name of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "pageSize",
        "type" : "Number",
        "desc" : "If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the\nfilter queries will execute with page start and limit parameters.  Only applies when mode = 'remote' (defaults to 0)",
        "memberOf" : ""
      },
      {
        "name" : "placeholder",
        "type" : "string",
        "desc" : "- placeholder to put in text.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "preventMark",
        "type" : "Boolean",
        "desc" : "Do not show tick or cross if error/success",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "queryDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds to delay between the start of typing and sending the\nquery to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local')",
        "memberOf" : ""
      },
      {
        "name" : "queryParam",
        "type" : "String",
        "desc" : "Name of the query as it will be passed on the querystring (defaults to 'query')",
        "memberOf" : ""
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "Specifies that the field should be read-only",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "-- Depricated - use Invalid Text",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "removable",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "resizable",
        "type" : "Boolean",
        "desc" : "True to add a resize handle to the bottom of the dropdown list (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to select any existing text in the field immediately on focus.  Only applies\nwhen editable = true (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "selectedClass",
        "type" : "String",
        "desc" : "CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')",
        "memberOf" : ""
      },
      {
        "name" : "shadow",
        "type" : "Boolean/String",
        "desc" : "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right",
        "memberOf" : ""
      },
      {
        "name" : "showToggleBtn",
        "type" : "Boolean",
        "desc" : "show toggle button or not (true|false) default true",
        "memberOf" : ""
      },
      {
        "name" : "size",
        "type" : "string",
        "desc" : "- (lg|sm) or leave empty..",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "specialFilter",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "store",
        "type" : "Roo.data.Store",
        "desc" : "The data store to which this combo is bound (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tickable",
        "type" : "Boolean",
        "desc" : "ComboBox with tickable selections (true|false), default false",
        "memberOf" : ""
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "If supplied, a header element is created containing this text and added into the top of\nthe dropdown list (defaults to undefined, with no header element)",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tpl",
        "type" : "String/Roo.Template",
        "desc" : "The template to use to render the output default is  '<a class=\"dropdown-item\" href=\"#\">{' + this.displayField + '}</a>'",
        "memberOf" : ""
      },
      {
        "name" : "triggerAction",
        "type" : "String",
        "desc" : "The action to execute when the trigger field is activated.  Use 'all' to run the\nquery specified by the allQuery config option (defaults to 'query')",
        "memberOf" : ""
      },
      {
        "name" : "triggerClass",
        "type" : "String",
        "desc" : "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' by default and triggerClass will be <b>appended</b> if specified.",
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "triggerList",
        "type" : "Boolean",
        "desc" : "trigger show the list or not (true|false) default true",
        "memberOf" : ""
      },
      {
        "name" : "triggerText",
        "type" : "String",
        "desc" : "multiple combobox trigger button text default 'Select'",
        "memberOf" : ""
      },
      {
        "name" : "typeAhead",
        "type" : "Boolean",
        "desc" : "True to populate and autoselect the remainder of the text being typed after a configurable\ndelay (typeAheadDelay) if it matches a known value (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "typeAheadDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds to wait until the typeahead text is displayed\nif typeAhead = true (defaults to 250)",
        "memberOf" : ""
      },
      {
        "name" : "useNativeIOS",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "validClass",
        "type" : "String",
        "desc" : "DEPRICATED - uses BS4 is-valid now",
        "memberOf" : ""
      },
      {
        "name" : "validFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "value",
        "type" : "string",
        "desc" : "default value of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "valueField",
        "type" : "String",
        "desc" : "The underlying data value name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'value' if mode = 'local'). \nNote: use of a valueField requires the user make a selection\nin order for a value to be mapped.",
        "memberOf" : ""
      },
      {
        "name" : "valueNotFoundText",
        "type" : "String",
        "desc" : "When using a name/value combo, if the value passed to setValue is not found in\nthe store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "fixed with? experimental",
        "memberOf" : ""
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "events" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Fires when the 'add' icon is pressed (add a listener to enable add button)",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "afterremove",
        "type" : "function",
        "desc" : "Fires when the remove value from the combobox array",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforequery",
        "type" : "function",
        "desc" : "Fires before all queries are processed. Return false to cancel the query or set cancel to true.\nThe event object passed has these properties:",
        "sig" : "function (combo, query, forceAll, cancel, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeselect",
        "type" : "function",
        "desc" : "Fires before a list item is selected. Return false to cancel the selection.",
        "sig" : "function (combo, record, index)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Fires when the dropdown list is collapsed",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "edit",
        "type" : "function",
        "desc" : "Fires when the 'edit' icon is pressed (add a listener to enable add button)",
        "sig" : "function (combo, record)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Fires when the dropdown list is expanded",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "paste",
        "type" : "function",
        "desc" : "Fires after the user pastes into input",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Fires when the remove value from the combobox array",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Fires when a list item is selected",
        "sig" : "function (combo, record, index)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialfilter",
        "type" : "function",
        "desc" : "Fires when specialfilter",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "tick",
        "type" : "function",
        "desc" : "Fires when tick the element",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "touchviewdisplay",
        "type" : "function",
        "desc" : "Fires when touch view require special display (default is using displayField)",
        "sig" : "function (combo, cfg)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "clearValue",
        "type" : "function",
        "desc" : "Clears any text/value currently set in the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Hides the dropdown list if it is currently expanded. Fires the 'collapse' event on completion.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "doQuery",
        "type" : "function",
        "desc" : "Execute a query to filter the dropdown list.  Fires the beforequery event prior to performing the\nquery allowing the query action to be canceled if needed.",
        "sig" : "(query, forceAll)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expands the dropdown list if it is currently hidden. Fires the 'expand' event on completion.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name of the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the currently selected field value or empty string if no value is set.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "inputEl",
        "type" : "function",
        "desc" : "return the real input element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "isExpanded",
        "type" : "function",
        "desc" : "Returns true if the dropdown list is expanded, else false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "markValid",
        "type" : "function",
        "desc" : "Mark this field as valid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onTriggerClick",
        "type" : "function",
        "desc" : "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue.",
        "sig" : "(index, scrollIntoView)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectByValue",
        "type" : "function",
        "desc" : "Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue.",
        "sig" : "(value, scrollIntoView)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setEditable",
        "type" : "function",
        "desc" : "Allow or prevent the user from directly editing the field text.  If false is passed,\nthe user will only be able to select from the items defined in the dropdown list.  This method\nis the runtime equivalent of setting the 'editable' config option at config time.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setFromData",
        "type" : "function",
        "desc" : "Sets the value of the field based on a object which is related to the record format for the store.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the specified value into the field.  If the value finds a match, the corresponding record text\nwill be displayed in the field.  If the value does not match the data value of an existing item,\nand the valueNotFoundText config option is defined, it will be displayed as the default field text.\nOtherwise the field will be blank (although the value will still be set).",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      }
    ]
  },
  "Roo.bootstrap.Component" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : ""
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : ""
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Container" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "alert",
        "type" : "String",
        "desc" : [
          "(success",
          "info",
          "warning",
          "danger)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "clickable",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expandable",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "expanded",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "fa",
        "type" : "String",
        "desc" : "font awesome icon",
        "memberOf" : ""
      },
      {
        "name" : "footer",
        "type" : "String",
        "desc" : "content of footer (for panel)",
        "memberOf" : ""
      },
      {
        "name" : "header",
        "type" : "String",
        "desc" : "content of header (for panel)",
        "memberOf" : ""
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "content of element",
        "memberOf" : ""
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : [
          "(info-sign",
          "check",
          "...)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "jumbotron",
        "type" : "Boolean",
        "desc" : "is it a jumbotron element",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "panel",
        "type" : "String",
        "desc" : [
          "(default",
          "primary",
          "success",
          "info",
          "warning",
          "danger)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "rheader",
        "type" : "String",
        "desc" : "contet on the right of header",
        "memberOf" : ""
      },
      {
        "name" : "sticky",
        "type" : "String",
        "desc" : [
          "(footer",
          "wrap",
          "push)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tag",
        "type" : "String",
        "desc" : [
          "(header",
          "aside",
          "section)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "well",
        "type" : "String",
        "desc" : [
          "(lg",
          "sm",
          "md)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "When a element is chick",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "After the panel has been collapsed",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "After the panel has been expand",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.DateField" : {
    "props" : [
      {
        "name" : "(button|checkbox|email|file|hidden|image|number|password|radio|range|reset|search|submit|text)",
        "type" : "String",
        "desc" : "inputType",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "accept",
        "type" : "String",
        "desc" : [
          "(image",
          "video",
          "audio)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "after",
        "type" : "string",
        "desc" : "- input group add on after",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "center",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "altFormats",
        "type" : "String",
        "desc" : "Multiple date formats separated by \"|\" to try when parsing a user input value and it doesn't match the defined\nformat (defaults to 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d').",
        "memberOf" : ""
      },
      {
        "name" : "autocomplete",
        "type" : "String",
        "desc" : "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "before",
        "type" : "string",
        "desc" : "- input group add on before",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "calendarWeeks",
        "type" : "Boolean",
        "desc" : "default false",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "capture",
        "type" : "String",
        "desc" : [
          "(user",
          "camera)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "daysOfWeekDisabled",
        "type" : "Object",
        "desc" : "default empty",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "is it disabled",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "endDate",
        "type" : "Number",
        "desc" : "default Infinity",
        "memberOf" : ""
      },
      {
        "name" : "fieldLabel",
        "type" : "string",
        "desc" : "- the label associated",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "forceFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "format",
        "type" : "String",
        "desc" : "The default date format string which can be overriden for localization support.  The format must be\nvalid according to {@link Date#parseDate} (defaults to 'm/d/y').",
        "memberOf" : ""
      },
      {
        "name" : "hasFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "indicatorpos",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to display if {@link #validator} test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "keyboardNavigation",
        "type" : "Boolean",
        "desc" : "default true",
        "memberOf" : ""
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(top",
          "left)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "set the width of label",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "language",
        "type" : "String",
        "desc" : "default en",
        "memberOf" : ""
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minViewMode",
        "type" : "String",
        "desc" : "default empty, (months|years)",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "name of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "placeholder",
        "type" : "string",
        "desc" : "- placeholder to put in text.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "preventMark",
        "type" : "Boolean",
        "desc" : "Do not show tick or cross if error/success",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "Specifies that the field should be read-only",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "-- Depricated - use Invalid Text",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "singleMode",
        "type" : "Boolean",
        "desc" : "default false (true | false)",
        "memberOf" : ""
      },
      {
        "name" : "size",
        "type" : "string",
        "desc" : "- (lg|sm) or leave empty..",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "startDate",
        "type" : "Number",
        "desc" : "default -Infinity",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "todayBtn",
        "type" : "Boolean",
        "desc" : "default false",
        "memberOf" : ""
      },
      {
        "name" : "todayHighlight",
        "type" : "Boolean",
        "desc" : "default false",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "validClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "value",
        "type" : "string",
        "desc" : "default value of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "viewMode",
        "type" : "String",
        "desc" : "default empty, (months|years)",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "weekStart",
        "type" : "Number",
        "desc" : "default 0",
        "memberOf" : ""
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeselect",
        "type" : "function",
        "desc" : "Fires when before select a date.",
        "sig" : "function (_self, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "paste",
        "type" : "function",
        "desc" : "Fires after the user pastes into input",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Fires when select a date.",
        "sig" : "function (_self, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires when this field show.",
        "sig" : "function (_self, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name of the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "inputEl",
        "type" : "function",
        "desc" : "return the real input element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "markValid",
        "type" : "function",
        "desc" : "Mark this field as valid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      }
    ]
  },
  "Roo.bootstrap.DateSplitField" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dayAllowBlank",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "dayFormat",
        "type" : "string",
        "desc" : "default 'd'",
        "memberOf" : ""
      },
      {
        "name" : "dayPlaceholder",
        "type" : "string",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fieldLabel",
        "type" : "string",
        "desc" : "- the label associated",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(top",
          "left)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "set the width of label (0-12)",
        "memberOf" : ""
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : ""
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : ""
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : ""
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "monthAllowBlank",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "monthFormat",
        "type" : "string",
        "desc" : "default 'm'",
        "memberOf" : ""
      },
      {
        "name" : "monthPlaceholder",
        "type" : "string",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "yearAllowBlank",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "yearFormat",
        "type" : "string",
        "desc" : "default 'Y'",
        "memberOf" : ""
      },
      {
        "name" : "yearPlaceholder",
        "type" : "string",
        "desc" : "",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "days",
        "type" : "function",
        "desc" : "getting the data of days",
        "sig" : "function (_self, days)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "years",
        "type" : "function",
        "desc" : "getting the data of years",
        "sig" : "function (_self, years)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.DocumentManager" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "boxes",
        "type" : "Number",
        "desc" : "number of boxes, 0 is no limit.. default 0",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "editable",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(left",
          "top)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "default 4",
        "memberOf" : ""
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : ""
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : ""
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : ""
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "method",
        "type" : "String",
        "desc" : "default POST",
        "memberOf" : ""
      },
      {
        "name" : "multiple",
        "type" : "Boolean",
        "desc" : "multiple upload default true",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "paramName",
        "type" : "String",
        "desc" : "default 'imageUpload'",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "thumbSize",
        "type" : "Number",
        "desc" : "default 300",
        "memberOf" : ""
      },
      {
        "name" : "toolTipName",
        "type" : "String",
        "desc" : "default 'filename'",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "action url",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "afterupload",
        "type" : "function",
        "desc" : "Fire when xhr load exception",
        "sig" : "function (_self, xhr)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeselectfile",
        "type" : "function",
        "desc" : "Fire before select file",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fire after click the image",
        "sig" : "function (_self, file)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "edit",
        "type" : "function",
        "desc" : "Fire when upload a image and editable set to true",
        "sig" : "function (_self, file)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "exception",
        "type" : "function",
        "desc" : "Fire when xhr load exception",
        "sig" : "function (_self, xhr)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "initial",
        "type" : "function",
        "desc" : "Fire when initial the DocumentManager",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "inspect",
        "type" : "function",
        "desc" : "inspect selected file",
        "sig" : "function (_self, file)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "prepare",
        "type" : "function",
        "desc" : "prepare the form data",
        "sig" : "function (_self, formData)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "previewrendered",
        "type" : "function",
        "desc" : "Fire when preview rendered",
        "sig" : "function (_self, file)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "process",
        "type" : "function",
        "desc" : "Fire before process file",
        "sig" : "function (_self, file)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "refresh",
        "type" : "function",
        "desc" : "Fire after refresh the file",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Fire when remove the file",
        "sig" : "function (_self, file)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.DocumentSlider" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fire after click",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "initial",
        "type" : "function",
        "desc" : "Fire after initEvent",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "update",
        "type" : "function",
        "desc" : "Fire after update",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.DocumentViewer" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "showDownload",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "showTrash",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fire after click",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "download",
        "type" : "function",
        "desc" : "Fire after download button",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "initial",
        "type" : "function",
        "desc" : "Fire after initEvent",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "trash",
        "type" : "function",
        "desc" : "Fire after trash button",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.DropTarget" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "clickable",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "class of the element",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "contents of the element",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "dropable name",
        "memberOf" : ""
      },
      {
        "name" : "preventDefault",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "role",
        "type" : "String",
        "desc" : "default blank - set to button to force cursor pointer",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tag",
        "type" : "String",
        "desc" : "tag of the element",
        "memberOf" : "Roo.bootstrap.Element"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "When a element is chick",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Element" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "clickable",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "class of the element",
        "memberOf" : ""
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "contents of the element",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "preventDefault",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "role",
        "type" : "String",
        "desc" : "default blank - set to button to force cursor pointer",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tag",
        "type" : "String",
        "desc" : "tag of the element",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "When a element is chick",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.FieldLabel" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "class of the element",
        "memberOf" : ""
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "contents of the element",
        "memberOf" : ""
      },
      {
        "name" : "iconTooltip",
        "type" : "String",
        "desc" : "default \"This field is required\"",
        "memberOf" : ""
      },
      {
        "name" : "indicatorpos",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "DEPRICATED - BS4 uses is-invalid",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tag",
        "type" : "String",
        "desc" : "tag of the element default label",
        "memberOf" : ""
      },
      {
        "name" : "target",
        "type" : "String",
        "desc" : "label target",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "validClass",
        "type" : "String",
        "desc" : "DEPRICATED - BS4 uses is-valid",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "get",
        "type" : "function",
        "desc" : "fetch a FieldLabel Group based on the target",
        "sig" : "(target)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "markValid",
        "type" : "function",
        "desc" : "Mark this field as valid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "register",
        "type" : "function",
        "desc" : "register a FieldLabel Group",
        "sig" : "(the)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Form" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : "left  | right - for navbars",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "baseParams",
        "type" : "Object",
        "desc" : "Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "errorMask",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "fileUpload",
        "type" : "Boolean",
        "desc" : "Set to true if this form is a file upload.",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : "top | left (default top)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadMask",
        "type" : "Boolean",
        "desc" : "load mask when submit (default true)",
        "memberOf" : ""
      },
      {
        "name" : "maskBody",
        "type" : "Boolean",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "maskOffset",
        "type" : "Number",
        "desc" : "Default 100",
        "memberOf" : ""
      },
      {
        "name" : "method",
        "type" : "String",
        "desc" : "GET | POST (default POST)",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "timeout",
        "type" : "Number",
        "desc" : "Timeout for form actions in seconds (default is 30 seconds).",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "The URL to use for form actions if one isn't supplied in the action options.",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "actioncomplete",
        "type" : "function",
        "desc" : "Fires when an action is completed.",
        "sig" : "function (_self, action)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "actionfailed",
        "type" : "function",
        "desc" : "Fires when an action fails.",
        "sig" : "function (_self, action)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeaction",
        "type" : "function",
        "desc" : "Fires before any action is performed. Return false to cancel the action.",
        "sig" : "function (_self, action)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "clientvalidation",
        "type" : "function",
        "desc" : "If the monitorValid config option is true, this event fires repetitively to notify of valid state",
        "sig" : "function (_self, valid)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clears all invalid messages in this form.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "doAction",
        "type" : "function",
        "desc" : "Performs a predefined action (submit or load) or custom actions you define on this form.",
        "sig" : "(actionName, options)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "findField",
        "type" : "function",
        "desc" : "Find a Roo.form.Field in this form by id, dataIndex, name or hiddenName",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getFieldValues",
        "type" : "function",
        "desc" : "Returns the fields in this form as an object with key/value pairs.\nThis differs from getValues as it calls getValue on each child item, rather than using dom data.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getValues",
        "type" : "function",
        "desc" : "Returns the fields in this form as an object with key/value pairs. If multiple fields exist with the same name\nthey are returned as an array.",
        "sig" : "(asString)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if any fields in this form have changed since their original load.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns true if client-side validation on the form is successful.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark fields in this form invalid in bulk.",
        "sig" : "(errors)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets this form.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setValues",
        "type" : "function",
        "desc" : "Set values for fields in this form in bulk.",
        "sig" : "(values)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Graph" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "g_height",
        "type" : "number",
        "desc" : "height of the chart (respected by all elements in the set)",
        "memberOf" : ""
      },
      {
        "name" : "g_r",
        "type" : "number",
        "desc" : "radius (pie)",
        "memberOf" : ""
      },
      {
        "name" : "g_width",
        "type" : "number",
        "desc" : "width of the chart (respected by all elements in the set)",
        "memberOf" : ""
      },
      {
        "name" : "g_x",
        "type" : "number",
        "desc" : "coodinator | centre x (pie)",
        "memberOf" : ""
      },
      {
        "name" : "g_y",
        "type" : "number",
        "desc" : "coodinator | centre y (pie)",
        "memberOf" : ""
      },
      {
        "name" : "graphtype",
        "type" : "String",
        "desc" : "bar | vbar | pie",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "title",
        "type" : "Object",
        "desc" : "The title of the chart\n    \n -{Array}  values\n -opts (object) options for the chart \n     o {\n     o type (string) type of endings of the bar. Default: 'square'. Other options are: 'round', 'sharp', 'soft'.\n     o gutter (number)(string) default '20%' (WHAT DOES IT DO?)\n     o vgutter (number)\n     o colors (array) colors be used repeatedly to plot the bars. If multicolumn bar is used each sequence of bars with use a different color.\n     o stacked (boolean) whether or not to tread values as in a stacked bar chart\n     o to\n     o stretch (boolean)\n     o }\n -opts (object) options for the pie\n     o{\n     o cut\n     o startAngle (number)\n     o endAngle (number)\n     }",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "The img click event for the img.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Header" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "content of header",
        "memberOf" : ""
      },
      {
        "name" : "level",
        "type" : "Number",
        "desc" : [
          "(1",
          "2",
          "3",
          "4",
          "5",
          "6)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.HtmlEditor" : {
    "props" : [
      {
        "name" : "(button|checkbox|email|file|hidden|image|number|password|radio|range|reset|search|submit|text)",
        "type" : "String",
        "desc" : "inputType",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "accept",
        "type" : "String",
        "desc" : [
          "(image",
          "video",
          "audio)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "after",
        "type" : "string",
        "desc" : "- input group add on after",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "center",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autocomplete",
        "type" : "String",
        "desc" : "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "before",
        "type" : "string",
        "desc" : "- input group add on before",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "buttons",
        "type" : "Array",
        "desc" : "Array of toolbar's buttons. - defaults to empty",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "capture",
        "type" : "String",
        "desc" : [
          "(user",
          "camera)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cols",
        "type" : "Number",
        "desc" : "Specifies the visible width of a text area",
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "is it disabled",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "fieldLabel",
        "type" : "string",
        "desc" : "- the label associated",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "forceFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hasFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "(in pixels)",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "string",
        "desc" : "text",
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "indicatorpos",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(top",
          "left)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "set the width of label",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "name of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "placeholder",
        "type" : "string",
        "desc" : "- placeholder to put in text.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "preventMark",
        "type" : "Boolean",
        "desc" : "Do not show tick or cross if error/success",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "Specifies that the field should be read-only",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "-- Depricated - use Invalid Text",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "resizable",
        "type" : "String",
        "desc" : "'s' or 'se' or 'e' - wrapps the element in a\n                       Roo.resizable.",
        "memberOf" : ""
      },
      {
        "name" : "resize",
        "type" : "string",
        "desc" : [
          "(none",
          "both",
          "horizontal",
          "vertical",
          "inherit",
          "initial)"
        ],
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "rows",
        "type" : "Number",
        "desc" : "Specifies the visible number of lines in a text area",
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "size",
        "type" : "string",
        "desc" : "- (lg|sm) or leave empty..",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "stylesheets",
        "type" : "Array",
        "desc" : "url of stylesheets. set to [] to disable stylesheets.",
        "memberOf" : ""
      },
      {
        "name" : "toolbars",
        "type" : "Array",
        "desc" : "Array of toolbars. - defaults to just the Standard one",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "validClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "value",
        "type" : "string",
        "desc" : "default value of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "(in pixels)",
        "memberOf" : ""
      },
      {
        "name" : "wrap",
        "type" : "string",
        "desc" : [
          "(soft",
          "hard)"
        ],
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when the editor is first receives the focus. Any insertion must wait\nuntil after this event.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "autosave",
        "type" : "function",
        "desc" : "Auto save the htmlEditor value as a file into Events",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforepush",
        "type" : "function",
        "desc" : "Fires before the iframe editor is updated with content from the textarea. Return false\nto cancel the push.",
        "sig" : "function (_self, html)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforesync",
        "type" : "function",
        "desc" : "Fires before the textarea is updated with content from the editor iframe. Return false\nto cancel the sync.",
        "sig" : "function (_self, html)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "",
        "sig" : "function ()\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "",
        "sig" : "function ()\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "editmodechange",
        "type" : "function",
        "desc" : "Fires when the editor switches edit modes",
        "sig" : "function (_self, sourceEdit)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "editorevent",
        "type" : "function",
        "desc" : "Fires when on any editor (mouse up/down cursor movement etc.) - used for toolbar hooks.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "firstfocus",
        "type" : "function",
        "desc" : "Fires when on first focus - needed by toolbars..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "",
        "sig" : "function ()\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "initialize",
        "type" : "function",
        "desc" : "Fires when the editor is fully initialized (including the iframe)",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "paste",
        "type" : "function",
        "desc" : "Fires after the user pastes into input",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "push",
        "type" : "function",
        "desc" : "Fires when the iframe editor is updated with content from the textarea.",
        "sig" : "function (_self, html)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "savedpreview",
        "type" : "function",
        "desc" : "preview the saved version of htmlEditor",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "",
        "sig" : "function ()\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "sync",
        "type" : "function",
        "desc" : "Fires when the textarea is updated with content from the editor iframe.",
        "sig" : "function (_self, html)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "createToolbar",
        "type" : "function",
        "desc" : "Protected method that will not generally be called directly. It\nis called when the editor creates its toolbar. Override this method if you need to\nadd custom toolbar buttons.",
        "sig" : "(editor)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name of the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "inputEl",
        "type" : "function",
        "desc" : "return the real textarea element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "markValid",
        "type" : "function",
        "desc" : "Mark this field as valid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "toggleSourceEdit",
        "type" : "function",
        "desc" : "Toggles the editor between standard and source edit mode.",
        "sig" : "(sourceEdit)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      }
    ]
  },
  "Roo.bootstrap.Img" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "alt",
        "type" : "String",
        "desc" : "image alternative text",
        "memberOf" : ""
      },
      {
        "name" : "backgroundContain",
        "type" : "Boolean",
        "desc" : "(use style background and contain image in content)",
        "memberOf" : ""
      },
      {
        "name" : "border",
        "type" : "String",
        "desc" : "rounded | circle | thumbnail",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "href",
        "type" : "String",
        "desc" : "a tag href",
        "memberOf" : ""
      },
      {
        "name" : "imgResponsive",
        "type" : "Boolean",
        "desc" : "false | true",
        "memberOf" : ""
      },
      {
        "name" : "lgUrl",
        "type" : "String",
        "desc" : "lg image source",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "mdUrl",
        "type" : "String",
        "desc" : "md image source",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "smUrl",
        "type" : "String",
        "desc" : "sm image source",
        "memberOf" : ""
      },
      {
        "name" : "src",
        "type" : "String",
        "desc" : "image source",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "target",
        "type" : "String",
        "desc" : [
          "(_self",
          "_blank",
          "_parent",
          "_top)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xsUrl",
        "type" : "String",
        "desc" : "xs image source",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "The img click event for the img.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "The when any image loads",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setSrc",
        "type" : "function",
        "desc" : "Sets the url of the image - used to update it",
        "sig" : "(url)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Input" : {
    "props" : [
      {
        "name" : "(button|checkbox|email|file|hidden|image|number|password|radio|range|reset|search|submit|text)",
        "type" : "String",
        "desc" : "inputType",
        "memberOf" : ""
      },
      {
        "name" : "accept",
        "type" : "String",
        "desc" : [
          "(image",
          "video",
          "audio)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "after",
        "type" : "string",
        "desc" : "- input group add on after",
        "memberOf" : ""
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "center",
          "right)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autocomplete",
        "type" : "String",
        "desc" : "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
        "memberOf" : ""
      },
      {
        "name" : "before",
        "type" : "string",
        "desc" : "- input group add on before",
        "memberOf" : ""
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "capture",
        "type" : "String",
        "desc" : [
          "(user",
          "camera)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "is it disabled",
        "memberOf" : ""
      },
      {
        "name" : "fieldLabel",
        "type" : "string",
        "desc" : "- the label associated",
        "memberOf" : ""
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : ""
      },
      {
        "name" : "forceFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "hasFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "indicatorpos",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : ""
      },
      {
        "name" : "invalidFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : ""
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to display if {@link #validator} test fails during validation (defaults to \"\")",
        "memberOf" : ""
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(top",
          "left)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "set the width of label",
        "memberOf" : ""
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : ""
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : ""
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : ""
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : ""
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : ""
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : ""
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : ""
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens",
        "memberOf" : ""
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : ""
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "name of the input",
        "memberOf" : ""
      },
      {
        "name" : "placeholder",
        "type" : "string",
        "desc" : "- placeholder to put in text.",
        "memberOf" : ""
      },
      {
        "name" : "preventMark",
        "type" : "Boolean",
        "desc" : "Do not show tick or cross if error/success",
        "memberOf" : ""
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "Specifies that the field should be read-only",
        "memberOf" : ""
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : ""
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "-- Depricated - use Invalid Text",
        "memberOf" : ""
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "size",
        "type" : "string",
        "desc" : "- (lg|sm) or leave empty..",
        "memberOf" : ""
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "validClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : ""
      },
      {
        "name" : "validFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : ""
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : ""
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : ""
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : ""
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : ""
      },
      {
        "name" : "value",
        "type" : "string",
        "desc" : "default value of the input",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : ""
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "paste",
        "type" : "function",
        "desc" : "Fires after the user pastes into input",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name of the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "inputEl",
        "type" : "function",
        "desc" : "return the real input element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "markValid",
        "type" : "function",
        "desc" : "Mark this field as valid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.bootstrap.LayoutMasonry" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "alternativePadWidth",
        "type" : "Number",
        "desc" : "padding below box..",
        "memberOf" : ""
      },
      {
        "name" : "boxHeight",
        "type" : "Number",
        "desc" : "- 0 for square, or fix it at a certian height",
        "memberOf" : ""
      },
      {
        "name" : "boxWidth",
        "type" : "Number",
        "desc" : "width of the columns",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "gutter",
        "type" : "Number",
        "desc" : "gutter width..",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isAutoInitial",
        "type" : "Boolean",
        "desc" : "defalut true",
        "memberOf" : ""
      },
      {
        "name" : "isHorizontal",
        "type" : "Boolean",
        "desc" : "defalut false",
        "memberOf" : ""
      },
      {
        "name" : "isLayoutInstant",
        "type" : "Boolean",
        "desc" : "= no animation?",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maxCols",
        "type" : "Number",
        "desc" : "maximum number of columns",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "padWidth",
        "type" : "Number",
        "desc" : "padding below box..",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "layout",
        "type" : "function",
        "desc" : "Fire after layout the items",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "_processVerticalLayoutQueue",
        "type" : "function",
        "desc" : "Sets position of item in DOM",
        "sig" : "(item, x, y, isInstant)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addBrick",
        "type" : "function",
        "desc" : "adds a Masonry Brick",
        "sig" : "(the)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearAll",
        "type" : "function",
        "desc" : "clear all the Masonry Brick",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "get",
        "type" : "function",
        "desc" : "fetch a  Masonry Layout based on the masonry layout ID",
        "sig" : "(the)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "register",
        "type" : "function",
        "desc" : "register a Masonry Brick",
        "sig" : "(the)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "register",
        "type" : "function",
        "desc" : "register a Masonry Layout",
        "sig" : "(the)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeBrick",
        "type" : "function",
        "desc" : "remove a Masonry Brick",
        "sig" : "(the)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.LayoutMasonryAuto" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "columnWidth",
        "type" : "Number",
        "desc" : "width of the columns",
        "memberOf" : ""
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isAutoInitial",
        "type" : "Boolean",
        "desc" : "defalut true",
        "memberOf" : ""
      },
      {
        "name" : "isFitWidth",
        "type" : "Boolean",
        "desc" : "- resize the width..",
        "memberOf" : ""
      },
      {
        "name" : "isLayoutInstant",
        "type" : "Boolean",
        "desc" : "= no animation?",
        "memberOf" : ""
      },
      {
        "name" : "isOriginLeft",
        "type" : "Boolean",
        "desc" : "= left align?",
        "memberOf" : ""
      },
      {
        "name" : "isOriginTop",
        "type" : "Boolean",
        "desc" : "= top align?",
        "memberOf" : ""
      },
      {
        "name" : "isResizingContainer",
        "type" : "Boolean",
        "desc" : "= not sure if this is used..",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maxCols",
        "type" : "Number",
        "desc" : "maximum number of columns",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "padHeight",
        "type" : "Number",
        "desc" : "padding below box..",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "_getColGroup",
        "type" : "function",
        "desc" : "",
        "sig" : "(colSpan)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "_postLayout",
        "type" : "function",
        "desc" : "Any logic you want to do after each layout,\ni.e. size the container",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "_processLayoutQueue",
        "type" : "function",
        "desc" : "Sets position of item in DOM",
        "sig" : "(item, x, y, isInstant)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Link" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "alt",
        "type" : "String",
        "desc" : "image alternative text",
        "memberOf" : ""
      },
      {
        "name" : "anchor",
        "type" : "String",
        "desc" : "name for the anchor link",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fa",
        "type" : "String",
        "desc" : "- favicon",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "href",
        "type" : "String",
        "desc" : "a tag href",
        "memberOf" : ""
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "the content of the link.",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "preventDefault",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "target",
        "type" : "String",
        "desc" : [
          "(_self",
          "_blank",
          "_parent",
          "_top)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "The img click event for the img.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.LocationPicker" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableDoubleClickZoom",
        "type" : "Boolean",
        "desc" : "default false",
        "memberOf" : ""
      },
      {
        "name" : "draggable",
        "type" : "Boolean",
        "desc" : "default true",
        "memberOf" : ""
      },
      {
        "name" : "enableAutocomplete",
        "type" : "Boolean",
        "desc" : "default false",
        "memberOf" : ""
      },
      {
        "name" : "enableReverseGeocode",
        "type" : "Boolean",
        "desc" : "default true",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "latitude",
        "type" : "Number",
        "desc" : "Position when init default 0",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "locationName",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "longitude",
        "type" : "Number",
        "desc" : "Position when init default 0",
        "memberOf" : ""
      },
      {
        "name" : "mapTypeControl",
        "type" : "Boolean",
        "desc" : "default false",
        "memberOf" : ""
      },
      {
        "name" : "mapTypeId",
        "type" : "String",
        "desc" : "default google.maps.MapTypeId.ROADMAP",
        "memberOf" : ""
      },
      {
        "name" : "markerTitle",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "radius",
        "type" : "Number",
        "desc" : "default 0",
        "memberOf" : ""
      },
      {
        "name" : "scrollwheel",
        "type" : "Boolean",
        "desc" : "default true",
        "memberOf" : ""
      },
      {
        "name" : "streetViewControl",
        "type" : "Boolean",
        "desc" : "default false",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "zoom",
        "type" : "Number",
        "desc" : "default 15",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "OverlayViewDraw",
        "type" : "function",
        "desc" : "Fires when OverlayView Draw",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "OverlayViewHide",
        "type" : "function",
        "desc" : "Fires when OverlayView Draw",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "OverlayViewOnAdd",
        "type" : "function",
        "desc" : "Fires when OverlayView Draw",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "OverlayViewOnRemove",
        "type" : "function",
        "desc" : "Fires when OverlayView Draw",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "OverlayViewShow",
        "type" : "function",
        "desc" : "Fires when OverlayView Draw",
        "sig" : "function (_self, cpx)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires when the map hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "initial",
        "type" : "function",
        "desc" : "Fires when the picker initialized.",
        "sig" : "function (_self, location)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "loadexception",
        "type" : "function",
        "desc" : "Fires when load google lib failed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mapClick",
        "type" : "function",
        "desc" : "Fires when click the map.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mapRightClick",
        "type" : "function",
        "desc" : "Fires when right click the map.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "markerClick",
        "type" : "function",
        "desc" : "Fires when click the marker.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "markerRightClick",
        "type" : "function",
        "desc" : "Fires when right click the marker.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "positionchanged",
        "type" : "function",
        "desc" : "Fires when the picker position changed.",
        "sig" : "function (_self, location)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires when the map resize.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires when the map show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Markdown" : {
    "props" : [
      {
        "name" : "(button|checkbox|email|file|hidden|image|number|password|radio|range|reset|search|submit|text)",
        "type" : "String",
        "desc" : "inputType",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "accept",
        "type" : "String",
        "desc" : [
          "(image",
          "video",
          "audio)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "after",
        "type" : "string",
        "desc" : "- input group add on after",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "center",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autocomplete",
        "type" : "String",
        "desc" : "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "before",
        "type" : "string",
        "desc" : "- input group add on before",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "capture",
        "type" : "String",
        "desc" : [
          "(user",
          "camera)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cols",
        "type" : "Number",
        "desc" : "Specifies the visible width of a text area",
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "content",
        "type" : "string",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "is it disabled",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "fieldLabel",
        "type" : "string",
        "desc" : "- the label associated",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "forceFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hasFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "string",
        "desc" : "text",
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "indicatorpos",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to display if {@link #validator} test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(top",
          "left)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "set the width of label",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "name of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "placeholder",
        "type" : "string",
        "desc" : "- placeholder to put in text.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "preventMark",
        "type" : "Boolean",
        "desc" : "Do not show tick or cross if error/success",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "Specifies that the field should be read-only",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "-- Depricated - use Invalid Text",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "resize",
        "type" : "string",
        "desc" : [
          "(none",
          "both",
          "horizontal",
          "vertical",
          "inherit",
          "initial)"
        ],
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "rows",
        "type" : "Number",
        "desc" : "Specifies the visible number of lines in a text area",
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "size",
        "type" : "string",
        "desc" : "- (lg|sm) or leave empty..",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "validClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "value",
        "type" : "string",
        "desc" : "default value of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "wrap",
        "type" : "string",
        "desc" : [
          "(soft",
          "hard)"
        ],
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "paste",
        "type" : "function",
        "desc" : "Fires after the user pastes into input",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name of the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "inputEl",
        "type" : "function",
        "desc" : "return the real textarea element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "markValid",
        "type" : "function",
        "desc" : "Mark this field as valid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.TextArea"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      }
    ]
  },
  "Roo.bootstrap.MasonryBrick" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "bgimage",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "href",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "inverse",
        "type" : "Boolean",
        "desc" : "defalut false",
        "memberOf" : ""
      },
      {
        "name" : "isFitContainer",
        "type" : "Boolean",
        "desc" : "defalut true",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "placetitle",
        "type" : "String",
        "desc" : [
          "(center",
          "bottom)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "preventDefault",
        "type" : "Boolean",
        "desc" : "defalut false",
        "memberOf" : ""
      },
      {
        "name" : "size",
        "type" : "String",
        "desc" : [
          "(xs",
          "sm",
          "md",
          "md-left",
          "md-right",
          "tall",
          "wide)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "videourl",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "When a MasonryBrick is clcik",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "get",
        "type" : "function",
        "desc" : "fetch a  masonry brick based on the masonry brick ID",
        "sig" : "(the)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "register",
        "type" : "function",
        "desc" : "register a Masonry Brick",
        "sig" : "(the)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Menu" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : "default tl-bl? == below  - how the menu should be aligned.",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hidden",
        "type" : "bool",
        "desc" : "if the menu should be hidden when rendered.",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideTrigger",
        "type" : "bool",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "isLink",
        "type" : "bool",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "registerMenu",
        "type" : "Boolean",
        "desc" : "True (default) - means that clicking on screen etc. hides it.",
        "memberOf" : ""
      },
      {
        "name" : "stopEvent",
        "type" : "bool",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "type",
        "type" : "String",
        "desc" : [
          "(dropdown",
          "treeview",
          "submenu)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before this menu is hidden (return false to block)",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before this menu is displayed (return false to block)",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this menu is clicked (or when the enter key is pressed while it is active)",
        "sig" : "function (_self, menuItem, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after this menu is hidden",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "itemclick",
        "type" : "function",
        "desc" : "Fires when a menu item contained in this menu is clicked",
        "sig" : "function (baseItem, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mouseout",
        "type" : "function",
        "desc" : "Fires when the mouse exits this menu",
        "sig" : "function (_self, e, menuItem)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mouseover",
        "type" : "function",
        "desc" : "Fires when the mouse is hovering over this menu",
        "sig" : "function (_self, e, menuItem)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after this menu is displayed",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this menu and optionally all parent menus",
        "sig" : "(deep)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Displays this menu relative to another element",
        "sig" : "(element, position, parentMenu)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "showAt",
        "type" : "function",
        "desc" : "Displays this menu at a specific xy position",
        "sig" : "(xyPosition, parentMenu)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.MenuItem" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "active",
        "type" : "Boolean",
        "desc" : "used on sidebars to highlight active itesm",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fa",
        "type" : "String",
        "desc" : "favicon to show on left of menu item.",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "href",
        "type" : "String",
        "desc" : "the link",
        "memberOf" : ""
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "the menu label",
        "memberOf" : ""
      },
      {
        "name" : "isContainer",
        "type" : "Boolean",
        "desc" : "is it a container - just returns a drop down item..",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "menu",
        "type" : "Roo.bootsrap.Menu",
        "desc" : "the child menu.",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "preventDefault",
        "type" : "Boolean",
        "desc" : "do not trigger A href on clicks (default false).",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "The raw click event for the entire grid.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.MenuMgr" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "get",
        "type" : "function",
        "desc" : "Returns a {@link Roo.menu.Menu} object",
        "sig" : "(menu)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hideAll",
        "type" : "function",
        "desc" : "Hides all menus that are currently visible",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.bootstrap.MenuSeparator" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.MessageBar" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeClass",
        "type" : "String",
        "desc" : "insert the bar before the given class",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "closable",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fixed",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "contents of the MessageBar",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "weight",
        "type" : "String",
        "desc" : [
          "(info",
          "success",
          "warning",
          "danger)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.MessageBox" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "alert",
        "type" : "function",
        "desc" : "Displays a standard read-only message box with an OK button (comparable to the basic JavaScript Window.alert).\nIf a callback function is passed it will be called after the user clicks the button, and the\nid of the button that was clicked will be passed as the only parameter to the callback\n(could also be the top-right close button).",
        "sig" : "(title, msg, fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "confirm",
        "type" : "function",
        "desc" : "Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's Window.confirm).\nIf a callback function is passed it will be called after the user clicks either button, and the id of the\nbutton that was clicked will be passed as the only parameter to the callback (could also be the top-right close button).",
        "sig" : "(title, msg, fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getDialog",
        "type" : "function",
        "desc" : "Returns a reference to the underlying {@link Roo.BasicDialog} element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides the message box if it is displayed",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if the message box is currently displayed",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "progress",
        "type" : "function",
        "desc" : "Displays a message box with a progress bar.  This message box has no buttons and is not closeable by\nthe user.  You are responsible for updating the progress bar as needed via {@link Roo.MessageBox#updateProgress}\nand closing the message box when the process is complete.",
        "sig" : "(title, msg)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "prompt",
        "type" : "function",
        "desc" : "Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to\nJavaScript's Window.prompt).  The prompt can be a single-line or multi-line textbox.  If a callback function\nis passed it will be called after the user clicks either button, and the id of the button that was clicked\n(could also be the top-right close button) and the text that was entered will be passed as the two\nparameters to the callback.",
        "sig" : "(title, msg, fn, scope, multiline)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Displays a new message box, or reinitializes an existing message box, based on the config options\npassed in. All functions (e.g. prompt, alert, etc) on MessageBox call this function internally.\nThe following config object properties are supported:\n<pre>\nProperty    Type             Description\n----------  ---------------  ------------------------------------------------------------------------------------\nanimEl            String/Element   An id or Element from which the message box should animate as it opens and\n                                   closes (defaults to undefined)\nbuttons           Object/Boolean   A button config object (e.g., Roo.MessageBox.OKCANCEL or {ok:'Foo',\n                                   cancel:'Bar'}), or false to not show any buttons (defaults to false)\nclosable          Boolean          False to hide the top-right close button (defaults to true).  Note that\n                                   progress and wait dialogs will ignore this property and always hide the\n                                   close button as they can only be closed programmatically.\ncls               String           A custom CSS class to apply to the message box element\ndefaultTextHeight Number           The default height in pixels of the message box's multiline textarea if\n                                   displayed (defaults to 75)\nfn                Function         A callback function to execute after closing the dialog.  The arguments to the\n                                   function will be btn (the name of the button that was clicked, if applicable,\n                                   e.g. \"ok\"), and text (the value of the active text field, if applicable).\n                                   Progress and wait dialogs will ignore this option since they do not respond to\n                                   user actions and can only be closed programmatically, so any required function\n                                   should be called by the same code after it closes the dialog.\nicon              String           A CSS class that provides a background image to be used as an icon for\n                                   the dialog (e.g., Roo.MessageBox.WARNING or 'custom-class', defaults to '')\nmaxWidth          Number           The maximum width in pixels of the message box (defaults to 600)\nminWidth          Number           The minimum width in pixels of the message box (defaults to 100)\nmodal             Boolean          False to allow user interaction with the page while the message box is\n                                   displayed (defaults to true)\nmsg               String           A string that will replace the existing message box body text (defaults\n                                   to the XHTML-compliant non-breaking space character '&#160;')\nmultiline         Boolean          True to prompt the user to enter multi-line text (defaults to false)\nprogress          Boolean          True to display a progress bar (defaults to false)\nprogressText      String           The text to display inside the progress bar if progress = true (defaults to '')\nprompt            Boolean          True to prompt the user to enter single-line text (defaults to false)\nproxyDrag         Boolean          True to display a lightweight proxy while dragging (defaults to false)\ntitle             String           The title text\nvalue             String           The string value to set into the active textbox element if displayed\nwait              Boolean          True to display a progress bar (defaults to false)\nwidth             Number           The width of the dialog in pixels\n</pre>\n\nExample usage:\n<pre><code>\nRoo.Msg.show({\n   title: 'Address',\n   msg: 'Please enter your address:',\n   width: 300,\n   buttons: Roo.MessageBox.OKCANCEL,\n   multiline: true,\n   fn: saveAddress,\n   animEl: 'addAddressBtn'\n});\n</code></pre>",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "updateProgress",
        "type" : "function",
        "desc" : "Updates a progress-style message box's text and progress bar.  Only relevant on message boxes\ninitiated via {@link Roo.MessageBox#progress} or by calling {@link Roo.MessageBox#show} with progress: true.",
        "sig" : "(value, text)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "updateText",
        "type" : "function",
        "desc" : "Updates the message box body text",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "wait",
        "type" : "function",
        "desc" : "Displays a message box with an infinitely auto-updating progress bar.  This can be used to block user\ninteraction while waiting for a long-running process to complete that does not have defined intervals.\nYou are responsible for closing the message box when the process is complete.",
        "sig" : "(msg, title)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.bootstrap.Modal" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allow_close",
        "type" : "Boolean",
        "desc" : "default true",
        "memberOf" : ""
      },
      {
        "name" : "animate",
        "type" : "Boolean",
        "desc" : "default true",
        "memberOf" : ""
      },
      {
        "name" : "bodyOverflow",
        "type" : "Boolean",
        "desc" : "should the body element have overflow auto added default false",
        "memberOf" : ""
      },
      {
        "name" : "buttonPosition",
        "type" : "String",
        "desc" : [
          "(left",
          "right",
          "center)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "buttons",
        "type" : "Array",
        "desc" : "Array of buttons or standard button set..",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "editableTitle",
        "type" : "Boolean",
        "desc" : "can the title be edited",
        "memberOf" : ""
      },
      {
        "name" : "fitwindow",
        "type" : "Boolean",
        "desc" : "default false",
        "memberOf" : ""
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "fixed height - usefull for chrome extension only really.",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "- the body of the dialog (for simple ones) - you can also use template..",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "max_width",
        "type" : "Number",
        "desc" : "set the max width of modal",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "size",
        "type" : "String",
        "desc" : [
          "(sm",
          "lg",
          "xl)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "specificTitle",
        "type" : "Boolean",
        "desc" : "default false",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "Title of dialog",
        "memberOf" : ""
      },
      {
        "name" : "tmpl",
        "type" : "Roo.Template",
        "desc" : "- a template with variables. to use it, add a handler in show:method  adn",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "fixed width - usefull for chrome extension only really.",
        "memberOf" : ""
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "btnclick",
        "type" : "function",
        "desc" : "The raw btnclick event for the button",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fire when dialog resize",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "titlechanged",
        "type" : "function",
        "desc" : "Fire when the editable title has been changed",
        "sig" : "function (_self, value)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyBody",
        "type" : "function",
        "desc" : "Set the body of the Dialog using the template",
        "sig" : "(data)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setBody",
        "type" : "function",
        "desc" : "Set the body of the Dialog",
        "sig" : "(str)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setTitle",
        "type" : "function",
        "desc" : "Set the title of the Dialog",
        "sig" : "(str)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.MoneyField" : {
    "props" : [
      {
        "name" : "(button|checkbox|email|file|hidden|image|number|password|radio|range|reset|search|submit|text)",
        "type" : "String",
        "desc" : "inputType",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "accept",
        "type" : "String",
        "desc" : [
          "(image",
          "video",
          "audio)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "after",
        "type" : "string",
        "desc" : "- input group add on after",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "center",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allQuery",
        "type" : "String",
        "desc" : "The text query to send to the server to return all records for the list with no filtering (defaults to '')",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowDecimals",
        "type" : "Boolean",
        "desc" : "False to disallow decimal values (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowNegative",
        "type" : "Boolean",
        "desc" : "False to prevent entering a negative sign (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "allowZero",
        "type" : "Boolean",
        "desc" : "False to blank out if the user enters '0' (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "alwaysQuery",
        "type" : "Boolean",
        "desc" : "Disable caching of results, and always send query",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "animate",
        "type" : "Boolean",
        "desc" : "default true",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "append",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "autoCreate",
        "type" : "Boolean/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to:\n{tag: \"input\", type: \"text\", size: \"24\", autocomplete: \"off\"})",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "autoFocus",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "autocomplete",
        "type" : "String",
        "desc" : "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "before",
        "type" : "string",
        "desc" : "- input group add on before",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "blockFocus",
        "type" : "Boolean",
        "desc" : "Prevents all focus calls, so it can work with things like HTML edtor bar",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "btnPosition",
        "type" : "String",
        "desc" : "set the position of the trigger button (left | right) default right",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "capture",
        "type" : "String",
        "desc" : [
          "(user",
          "camera)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "caret",
        "type" : "String",
        "desc" : [
          "(search",
          "calendar)"
        ],
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "castInt",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "decimalPrecision",
        "type" : "Number",
        "desc" : "The maximum precision to display after the decimal separator (defaults to 2)",
        "memberOf" : ""
      },
      {
        "name" : "decimalSeparator",
        "type" : "String",
        "desc" : "Character(s) to allow as the decimal separator (defaults to '.')",
        "memberOf" : ""
      },
      {
        "name" : "defaults",
        "type" : "String",
        "desc" : "currency of the MoneyField\nvalue should be in lkey",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableClear",
        "type" : "Boolean",
        "desc" : "Disable showing of clear button.",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "is it disabled",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "displayField",
        "type" : "String",
        "desc" : "The underlying data field name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'text' if mode = 'local')",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "editable",
        "type" : "Boolean",
        "desc" : "False to prevent the user from typing text directly into the field, just like a\ntraditional select (defaults to true)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "emptyResultText",
        "type" : "Boolean",
        "desc" : "only for touch device",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "emptyTitle",
        "type" : "String",
        "desc" : "default ''",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "fieldLabel",
        "type" : "string",
        "desc" : "- the label associated",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "forceFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "forceSelection",
        "type" : "Boolean",
        "desc" : "True to restrict the selected value to one of the values in the list, false to\nallow the user to set arbitrary text into the field (defaults to false)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "grow",
        "type" : "Boolean",
        "desc" : "",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "growMax",
        "type" : "Number",
        "desc" : "",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "growMin",
        "type" : "Number",
        "desc" : "",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "handleHeight",
        "type" : "Number",
        "desc" : "The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "hasFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hiddenName",
        "type" : "String",
        "desc" : "If specified, a hidden form field with this name is dynamically generated to store the\nfield's data value (defaults to the underlying DOM element's name)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideTrigger",
        "type" : "Boolean",
        "desc" : "True to hide the trigger element and display only the base text field (defaults to false)",
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "indicatorpos",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "DEPRICATED - uses BS4 is-valid now",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "invalidFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to display if {@link #validator} test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(top",
          "left)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "set the width of label",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "lazyRender",
        "type" : "Boolean",
        "desc" : "True to prevent the ComboBox from rendering until requested (should always be used when\nrendering into an Roo.Editor, defaults to false)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "listAlign",
        "type" : "String",
        "desc" : "A valid anchor position value. See {@link Roo.Element#alignTo} for details on supported\nanchor positions (defaults to 'tl-bl')",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "listClass",
        "type" : "String",
        "desc" : "CSS class to apply to the dropdown list element (defaults to '')",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "listWidth",
        "type" : "Number",
        "desc" : "The width in pixels of the dropdown list (defaults to the width of the ComboBox field)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadingText",
        "type" : "String",
        "desc" : "The text to display in the dropdown list while data is loading.  Only applies\nwhen mode = 'remote' (defaults to 'Loading...')",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxHeight",
        "type" : "Number",
        "desc" : "The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxText",
        "type" : "String",
        "desc" : "Error text to display if the maximum value validation fails (defaults to \"The maximum value for this field is {maxValue}\")",
        "memberOf" : ""
      },
      {
        "name" : "maxValue",
        "type" : "Number",
        "desc" : "The maximum allowed value (defaults to Number.MAX_VALUE)",
        "memberOf" : ""
      },
      {
        "name" : "max_length",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : ""
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minChars",
        "type" : "Number",
        "desc" : "The minimum number of characters the user must type before autocomplete and typeahead activate\n(defaults to 4, does not apply if editable = false)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minListWidth",
        "type" : "Number",
        "desc" : "The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if\nlistWidth has a higher value)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "minText",
        "type" : "String",
        "desc" : "Error text to display if the minimum value validation fails (defaults to \"The minimum value for this field is {minValue}\")",
        "memberOf" : ""
      },
      {
        "name" : "minValue",
        "type" : "Number",
        "desc" : "The minimum allowed value (defaults to Number.NEGATIVE_INFINITY)",
        "memberOf" : ""
      },
      {
        "name" : "mobileTouchView",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "mobile_restrict_height",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "modalTitle",
        "type" : "String",
        "desc" : "The title of the dialog that pops up on mobile views.",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "mode",
        "type" : "String",
        "desc" : "Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "multiple",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "name of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "nanText",
        "type" : "String",
        "desc" : "Error text to display if the value is not a valid number.  For example, this can happen\nif a valid character like '.' or '-' is left in the field with no number (defaults to \"{value} is not a valid number\")",
        "memberOf" : ""
      },
      {
        "name" : "pageSize",
        "type" : "Number",
        "desc" : "If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the\nfilter queries will execute with page start and limit parameters.  Only applies when mode = 'remote' (defaults to 0)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "placeholder",
        "type" : "string",
        "desc" : "- placeholder to put in text.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "preventMark",
        "type" : "Boolean",
        "desc" : "Do not show tick or cross if error/success",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "queryDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds to delay between the start of typing and sending the\nquery to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local')",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "queryParam",
        "type" : "String",
        "desc" : "Name of the query as it will be passed on the querystring (defaults to 'query')",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "Specifies that the field should be read-only",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "-- Depricated - use Invalid Text",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "removable",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "resizable",
        "type" : "Boolean",
        "desc" : "True to add a resize handle to the bottom of the dropdown list (defaults to false)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to select any existing text in the field immediately on focus.  Only applies\nwhen editable = true (defaults to false)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "selectedClass",
        "type" : "String",
        "desc" : "CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "shadow",
        "type" : "Boolean/String",
        "desc" : "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "showToggleBtn",
        "type" : "Boolean",
        "desc" : "show toggle button or not (true|false) default true",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "size",
        "type" : "string",
        "desc" : "- (lg|sm) or leave empty..",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "specialFilter",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "store",
        "type" : "Roo.data.Store",
        "desc" : "The data store to which this combo is bound (defaults to undefined)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "thousandsDelimiter",
        "type" : "String",
        "desc" : "Symbol of thousandsDelimiter",
        "memberOf" : ""
      },
      {
        "name" : "tickable",
        "type" : "Boolean",
        "desc" : "ComboBox with tickable selections (true|false), default false",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "If supplied, a header element is created containing this text and added into the top of\nthe dropdown list (defaults to undefined, with no header element)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tpl",
        "type" : "String/Roo.Template",
        "desc" : "The template to use to render the output default is  '<a class=\"dropdown-item\" href=\"#\">{' + this.displayField + '}</a>'",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "triggerAction",
        "type" : "String",
        "desc" : "The action to execute when the trigger field is activated.  Use 'all' to run the\nquery specified by the allQuery config option (defaults to 'query')",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "triggerClass",
        "type" : "String",
        "desc" : "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' by default and triggerClass will be <b>appended</b> if specified.",
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "triggerList",
        "type" : "Boolean",
        "desc" : "trigger show the list or not (true|false) default true",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "triggerText",
        "type" : "String",
        "desc" : "multiple combobox trigger button text default 'Select'",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "typeAhead",
        "type" : "Boolean",
        "desc" : "True to populate and autoselect the remainder of the text being typed after a configurable\ndelay (typeAheadDelay) if it matches a known value (defaults to false)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "typeAheadDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds to wait until the typeahead text is displayed\nif typeAhead = true (defaults to 250)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "useNativeIOS",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "validClass",
        "type" : "String",
        "desc" : "DEPRICATED - uses BS4 is-valid now",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "validFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "value",
        "type" : "string",
        "desc" : "default value of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "valueField",
        "type" : "String",
        "desc" : "The underlying data value name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'value' if mode = 'local'). \nNote: use of a valueField requires the user make a selection\nin order for a value to be mapped.",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "valueNotFoundText",
        "type" : "String",
        "desc" : "When using a name/value combo, if the value passed to setValue is not found in\nthe store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "fixed with? experimental",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "events" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Fires when the 'add' icon is pressed (add a listener to enable add button)",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "afterremove",
        "type" : "function",
        "desc" : "Fires when the remove value from the combobox array",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforequery",
        "type" : "function",
        "desc" : "Fires before all queries are processed. Return false to cancel the query or set cancel to true.\nThe event object passed has these properties:",
        "sig" : "function (combo, query, forceAll, cancel, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeselect",
        "type" : "function",
        "desc" : "Fires before a list item is selected. Return false to cancel the selection.",
        "sig" : "function (combo, record, index)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Fires when the dropdown list is collapsed",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "edit",
        "type" : "function",
        "desc" : "Fires when the 'edit' icon is pressed (add a listener to enable add button)",
        "sig" : "function (combo, record)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Fires when the dropdown list is expanded",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "paste",
        "type" : "function",
        "desc" : "Fires after the user pastes into input",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Fires when the remove value from the combobox array",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Fires when a list item is selected",
        "sig" : "function (combo, record, index)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialfilter",
        "type" : "function",
        "desc" : "Fires when specialfilter",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "tick",
        "type" : "function",
        "desc" : "Fires when tick the element",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "touchviewdisplay",
        "type" : "function",
        "desc" : "Fires when touch view require special display (default is using displayField)",
        "sig" : "function (combo, cfg)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "clearValue",
        "type" : "function",
        "desc" : "Clears any text/value currently set in the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Hides the dropdown list if it is currently expanded. Fires the 'collapse' event on completion.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "doQuery",
        "type" : "function",
        "desc" : "Execute a query to filter the dropdown list.  Fires the beforequery event prior to performing the\nquery allowing the query action to be canceled if needed.",
        "sig" : "(query, forceAll)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expands the dropdown list if it is currently hidden. Fires the 'expand' event on completion.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name of the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the currently selected field value or empty string if no value is set.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "inputEl",
        "type" : "function",
        "desc" : "return the real input element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "isExpanded",
        "type" : "function",
        "desc" : "Returns true if the dropdown list is expanded, else false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "markValid",
        "type" : "function",
        "desc" : "Mark this field as valid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onTriggerClick",
        "type" : "function",
        "desc" : "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue.",
        "sig" : "(index, scrollIntoView)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "selectByValue",
        "type" : "function",
        "desc" : "Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue.",
        "sig" : "(value, scrollIntoView)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setEditable",
        "type" : "function",
        "desc" : "Allow or prevent the user from directly editing the field text.  If false is passed,\nthe user will only be able to select from the items defined in the dropdown list.  This method\nis the runtime equivalent of setting the 'editable' config option at config time.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "setFromData",
        "type" : "function",
        "desc" : "Sets the value of the field based on a object which is related to the record format for the store.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the specified value into the field.  If the value finds a match, the corresponding record text\nwill be displayed in the field.  If the value does not match the data value of an existing item,\nand the valueNotFoundText config option is defined, it will be displayed as the default field text.\nOtherwise the field will be blank (although the value will still be set).",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.ComboBox"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      }
    ]
  },
  "Roo.bootstrap.MonthField" : {
    "props" : [
      {
        "name" : "(button|checkbox|email|file|hidden|image|number|password|radio|range|reset|search|submit|text)",
        "type" : "String",
        "desc" : "inputType",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "accept",
        "type" : "String",
        "desc" : [
          "(image",
          "video",
          "audio)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "after",
        "type" : "string",
        "desc" : "- input group add on after",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "center",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autocomplete",
        "type" : "String",
        "desc" : "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "before",
        "type" : "string",
        "desc" : "- input group add on before",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "capture",
        "type" : "String",
        "desc" : [
          "(user",
          "camera)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "is it disabled",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "fieldLabel",
        "type" : "string",
        "desc" : "- the label associated",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "forceFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hasFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "indicatorpos",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to display if {@link #validator} test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(top",
          "left)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "set the width of label",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "language",
        "type" : "String",
        "desc" : "default en",
        "memberOf" : ""
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "name of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "placeholder",
        "type" : "string",
        "desc" : "- placeholder to put in text.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "preventMark",
        "type" : "Boolean",
        "desc" : "Do not show tick or cross if error/success",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "Specifies that the field should be read-only",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "-- Depricated - use Invalid Text",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "size",
        "type" : "string",
        "desc" : "- (lg|sm) or leave empty..",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "validClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "value",
        "type" : "string",
        "desc" : "default value of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "paste",
        "type" : "function",
        "desc" : "Fires after the user pastes into input",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Fires when select a date.",
        "sig" : "function (_self, oldvalue, newvalue)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires when this field show.",
        "sig" : "function (_self, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name of the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "inputEl",
        "type" : "function",
        "desc" : "return the real input element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "markValid",
        "type" : "function",
        "desc" : "Mark this field as valid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      }
    ]
  },
  "Roo.bootstrap.NavGroup" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inverse",
        "type" : "Boolean",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "navId",
        "type" : "String",
        "desc" : "- reference Id for navbar.",
        "memberOf" : ""
      },
      {
        "name" : "pilltype",
        "type" : "Boolean",
        "desc" : "default true (turn to off to disable active toggle)",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "type",
        "type" : "String",
        "desc" : [
          "(nav",
          "pills",
          "tab)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "changed",
        "type" : "function",
        "desc" : "Fires when the active item changes",
        "sig" : "function (_self, selected, prev)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addItem",
        "type" : "function",
        "desc" : "adds a Navigation item",
        "sig" : "(the)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearAll",
        "type" : "function",
        "desc" : "clear all the Navigation item",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "get",
        "type" : "function",
        "desc" : "fetch a Navigation Group based on the navigation ID",
        "sig" : "(the)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "getActive",
        "type" : "function",
        "desc" : "gets the active Navigation item",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "register",
        "type" : "function",
        "desc" : "register a Navigation item",
        "sig" : "(the)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "register",
        "type" : "function",
        "desc" : "register a Navigation Group",
        "sig" : "(the)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setActiveItem",
        "type" : "function",
        "desc" : "sets the active Navigation item",
        "sig" : "(the)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.NavHeaderbar" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.NavSimplebar"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "arrangement",
        "type" : "Boolean",
        "desc" : "stacked | justified",
        "memberOf" : "Roo.bootstrap.NavSimplebar"
      },
      {
        "name" : "autohide",
        "type" : "Boolean",
        "desc" : "a top nav bar header that hides on scroll.",
        "memberOf" : ""
      },
      {
        "name" : "brand",
        "type" : "String",
        "desc" : "what is brand",
        "memberOf" : ""
      },
      {
        "name" : "brand_href",
        "type" : "String",
        "desc" : "href of the brand",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "desktopCenter",
        "type" : "Boolean",
        "desc" : "should the header be centered on desktop using a container class",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inverse",
        "type" : "Boolean",
        "desc" : "is inverted color",
        "memberOf" : "Roo.bootstrap.NavSimplebar"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadMask",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.NavSimplebar"
      },
      {
        "name" : "main",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.NavSimplebar"
      },
      {
        "name" : "mobilerow",
        "type" : "Roo.bootstrap.Row",
        "desc" : "- a row to display on mobile only..",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "position",
        "type" : "String",
        "desc" : [
          "(fixed-top",
          "fixed-bottom",
          "static-top)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "srButton",
        "type" : "Boolean",
        "desc" : "generate the (screen reader / mobile) sr-only button   default true",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tag",
        "type" : "String",
        "desc" : [
          "(header",
          "footer",
          "nav",
          "div)"
        ],
        "memberOf" : "Roo.bootstrap.NavSimplebar"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "type",
        "type" : "String",
        "desc" : [
          "(nav",
          "pills",
          "tabs)"
        ],
        "memberOf" : "Roo.bootstrap.NavSimplebar"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "weight",
        "type" : "String",
        "desc" : [
          "(light",
          "primary",
          "secondary",
          "success",
          "danger",
          "warning",
          "info",
          "dark",
          "white)"
        ],
        "memberOf" : "Roo.bootstrap.NavSimplebar"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforetoggle",
        "type" : "function",
        "desc" : "Fire before toggle the menu",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Navbar"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Collapse the navbar pulldown",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Navbar"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expand the navbar pulldown",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Navbar"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.NavItem" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "active",
        "type" : "Boolean",
        "desc" : "Is item active",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "animateRef",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "badge",
        "type" : "String",
        "desc" : "text inside badge",
        "memberOf" : ""
      },
      {
        "name" : "badgecls",
        "type" : "String",
        "desc" : [
          "(bg-green",
          "bg-red",
          "bg-yellow)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "button_outline",
        "type" : "Boolean",
        "desc" : "show and outlined button",
        "memberOf" : ""
      },
      {
        "name" : "button_weight",
        "type" : "String",
        "desc" : [
          "(default",
          "primary",
          "secondary",
          "success",
          "info",
          "warning",
          "danger",
          "link",
          "light",
          "dark)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "Is item disabled",
        "memberOf" : ""
      },
      {
        "name" : "fa",
        "type" : "String",
        "desc" : "- Fontawsome icon name (can add stuff to it like fa-2x)",
        "memberOf" : ""
      },
      {
        "name" : "glyphicon",
        "type" : "String",
        "desc" : "DEPRICATED - use fa",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "href",
        "type" : "String",
        "desc" : "link to",
        "memberOf" : ""
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "content of button",
        "memberOf" : ""
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : "DEPRICATED - use fa",
        "memberOf" : ""
      },
      {
        "name" : "linkcls",
        "type" : "String",
        "desc" : "Link Class",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "preventDefault",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tabId",
        "type" : "String",
        "desc" : "the tab that this item activates.",
        "memberOf" : ""
      },
      {
        "name" : "tagtype",
        "type" : "String",
        "desc" : [
          "(a",
          "span)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "changed",
        "type" : "function",
        "desc" : "Fires when the active item active state changes",
        "sig" : "function (_self, state)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "The raw click event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "scrollto",
        "type" : "function",
        "desc" : "Fires when scroll to element",
        "sig" : "function (_self, options, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setHtml",
        "type" : "function",
        "desc" : "Set the HTML (text content) of the item",
        "sig" : "(html)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.NavProgressBar" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "changed",
        "type" : "function",
        "desc" : "Fires when the active item changes",
        "sig" : "function (_self, selected, prev)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.NavProgressItem" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "active",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : "show icon instead of number",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "position",
        "type" : "String",
        "desc" : [
          "(top",
          "bottom)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "rid",
        "type" : "String",
        "desc" : "the reference id",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "The raw click event for the entire grid.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.NavSidebar" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforetoggle",
        "type" : "function",
        "desc" : "Fire before toggle the menu",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Navbar"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Collapse the navbar pulldown",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Navbar"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expand the navbar pulldown",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Navbar"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.NavSidebarItem" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "active",
        "type" : "Boolean",
        "desc" : "Is item active",
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "animateRef",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "badge",
        "type" : "String",
        "desc" : "text inside badge",
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "badgecls",
        "type" : "String",
        "desc" : [
          "(bg-green",
          "bg-red",
          "bg-yellow)"
        ],
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "button_outline",
        "type" : "Boolean",
        "desc" : "show and outlined button",
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "button_weight",
        "type" : "String",
        "desc" : [
          "(default",
          "primary",
          "secondary",
          "success",
          "info",
          "warning",
          "danger",
          "link",
          "light",
          "dark)"
        ],
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "Is item disabled",
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "fa",
        "type" : "String",
        "desc" : "- Fontawsome icon name (can add stuff to it like fa-2x)",
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "glyphicon",
        "type" : "String",
        "desc" : "DEPRICATED - use fa",
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "href",
        "type" : "String",
        "desc" : "link to",
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "content of button",
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : "DEPRICATED - use fa",
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "linkcls",
        "type" : "String",
        "desc" : "Link Class",
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "preventDefault",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tabId",
        "type" : "String",
        "desc" : "the tab that this item activates.",
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "tagtype",
        "type" : "String",
        "desc" : [
          "(a",
          "span)"
        ],
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "changed",
        "type" : "function",
        "desc" : "Fires when the active item active state changes",
        "sig" : "function (_self, state)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "The raw click event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "scrollto",
        "type" : "function",
        "desc" : "Fires when scroll to element",
        "sig" : "function (_self, options, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setHtml",
        "type" : "function",
        "desc" : "Set the HTML (text content) of the item",
        "sig" : "(html)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.NavItem"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.NavSimplebar" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "arrangement",
        "type" : "Boolean",
        "desc" : "stacked | justified",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inverse",
        "type" : "Boolean",
        "desc" : "is inverted color",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadMask",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "main",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tag",
        "type" : "String",
        "desc" : [
          "(header",
          "footer",
          "nav",
          "div)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "type",
        "type" : "String",
        "desc" : [
          "(nav",
          "pills",
          "tabs)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "weight",
        "type" : "String",
        "desc" : [
          "(light",
          "primary",
          "secondary",
          "success",
          "danger",
          "warning",
          "info",
          "dark",
          "white)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforetoggle",
        "type" : "function",
        "desc" : "Fire before toggle the menu",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Navbar"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Collapse the navbar pulldown",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Navbar"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expand the navbar pulldown",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Navbar"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Navbar" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforetoggle",
        "type" : "function",
        "desc" : "Fire before toggle the menu",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Collapse the navbar pulldown",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expand the navbar pulldown",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.NumberField" : {
    "props" : [
      {
        "name" : "(button|checkbox|email|file|hidden|image|number|password|radio|range|reset|search|submit|text)",
        "type" : "String",
        "desc" : "inputType",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "accept",
        "type" : "String",
        "desc" : [
          "(image",
          "video",
          "audio)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "after",
        "type" : "string",
        "desc" : "- input group add on after",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "center",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowDecimals",
        "type" : "Boolean",
        "desc" : "False to disallow decimal values (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowNegative",
        "type" : "Boolean",
        "desc" : "False to prevent entering a negative sign (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "allowZero",
        "type" : "Boolean",
        "desc" : "False to blank out if the user enters '0' (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "autocomplete",
        "type" : "String",
        "desc" : "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "before",
        "type" : "string",
        "desc" : "- input group add on before",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "capture",
        "type" : "String",
        "desc" : [
          "(user",
          "camera)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "decimalPrecision",
        "type" : "Number",
        "desc" : "The maximum precision to display after the decimal separator (defaults to 2)",
        "memberOf" : ""
      },
      {
        "name" : "decimalSeparator",
        "type" : "String",
        "desc" : "Character(s) to allow as the decimal separator (defaults to '.')",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "is it disabled",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "fieldLabel",
        "type" : "string",
        "desc" : "- the label associated",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "forceFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hasFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "indicatorpos",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to display if {@link #validator} test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(top",
          "left)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "set the width of label",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxText",
        "type" : "String",
        "desc" : "Error text to display if the maximum value validation fails (defaults to \"The maximum value for this field is {maxValue}\")",
        "memberOf" : ""
      },
      {
        "name" : "maxValue",
        "type" : "Number",
        "desc" : "The maximum allowed value (defaults to Number.MAX_VALUE)",
        "memberOf" : ""
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minText",
        "type" : "String",
        "desc" : "Error text to display if the minimum value validation fails (defaults to \"The minimum value for this field is {minValue}\")",
        "memberOf" : ""
      },
      {
        "name" : "minValue",
        "type" : "Number",
        "desc" : "The minimum allowed value (defaults to Number.NEGATIVE_INFINITY)",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "name of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "nanText",
        "type" : "String",
        "desc" : "Error text to display if the value is not a valid number.  For example, this can happen\nif a valid character like '.' or '-' is left in the field with no number (defaults to \"{value} is not a valid number\")",
        "memberOf" : ""
      },
      {
        "name" : "placeholder",
        "type" : "string",
        "desc" : "- placeholder to put in text.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "preventMark",
        "type" : "Boolean",
        "desc" : "Do not show tick or cross if error/success",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "Specifies that the field should be read-only",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "-- Depricated - use Invalid Text",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "size",
        "type" : "string",
        "desc" : "- (lg|sm) or leave empty..",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "thousandsDelimiter",
        "type" : "String",
        "desc" : "Symbol of thousandsDelimiter",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "validClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "value",
        "type" : "string",
        "desc" : "default value of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "valueAlign",
        "type" : "String",
        "desc" : "alignment of value",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "paste",
        "type" : "function",
        "desc" : "Fires after the user pastes into input",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name of the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "inputEl",
        "type" : "function",
        "desc" : "return the real input element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "markValid",
        "type" : "function",
        "desc" : "Mark this field as valid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      }
    ]
  },
  "Roo.bootstrap.Pagination" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inverse",
        "type" : "Boolean",
        "desc" : "false | true",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "size",
        "type" : "String",
        "desc" : "xs | sm | md | lg",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.PaginationItem" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "active",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "default false",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "href",
        "type" : "String",
        "desc" : "the link",
        "memberOf" : ""
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "text",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "preventDefault",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "The raw click event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.PagingToolbar" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.NavSimplebar"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "arrangement",
        "type" : "Boolean",
        "desc" : "stacked | justified",
        "memberOf" : "Roo.bootstrap.NavSimplebar"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container",
        "type" : "String/HTMLElement/Element",
        "desc" : "container The id or element that will contain the toolbar",
        "memberOf" : ""
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataSource",
        "type" : "Roo.data.Store",
        "desc" : "The underlying data store providing the paged data",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "displayInfo",
        "type" : "Boolean",
        "desc" : "True to display the displayMsg (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "displayMsg",
        "type" : "String",
        "desc" : "The paging status message to display (defaults to \"Displaying {start} - {end} of {total}\")",
        "memberOf" : ""
      },
      {
        "name" : "emptyMsg",
        "type" : "String",
        "desc" : "The message to display when no records are found (defaults to \"No data to display\")",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inverse",
        "type" : "Boolean",
        "desc" : "is inverted color",
        "memberOf" : "Roo.bootstrap.NavSimplebar"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadMask",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.NavSimplebar"
      },
      {
        "name" : "main",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.NavSimplebar"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "pageSize",
        "type" : "Number",
        "desc" : "The number of records to display per page (defaults to 20)",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tag",
        "type" : "String",
        "desc" : [
          "(header",
          "footer",
          "nav",
          "div)"
        ],
        "memberOf" : "Roo.bootstrap.NavSimplebar"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "type",
        "type" : "String",
        "desc" : [
          "(nav",
          "pills",
          "tabs)"
        ],
        "memberOf" : "Roo.bootstrap.NavSimplebar"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "weight",
        "type" : "String",
        "desc" : [
          "(light",
          "primary",
          "secondary",
          "success",
          "danger",
          "warning",
          "info",
          "dark",
          "white)"
        ],
        "memberOf" : "Roo.bootstrap.NavSimplebar"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforetoggle",
        "type" : "function",
        "desc" : "Fire before toggle the menu",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Navbar"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "bind",
        "type" : "function",
        "desc" : "Binds the paging toolbar to the specified {@link Roo.data.Store}",
        "sig" : "(store)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Collapse the navbar pulldown",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Navbar"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expand the navbar pulldown",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Navbar"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unbind",
        "type" : "function",
        "desc" : "Unbinds the paging toolbar from the specified {@link Roo.data.Store}",
        "sig" : "(store)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.bootstrap.PhoneInput" : {
    "props" : [
      {
        "name" : "(button|checkbox|email|file|hidden|image|number|password|radio|range|reset|search|submit|text)",
        "type" : "String",
        "desc" : "inputType",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "accept",
        "type" : "String",
        "desc" : [
          "(image",
          "video",
          "audio)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "after",
        "type" : "string",
        "desc" : "- input group add on after",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "center",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autocomplete",
        "type" : "String",
        "desc" : "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "before",
        "type" : "string",
        "desc" : "- input group add on before",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "capture",
        "type" : "String",
        "desc" : [
          "(user",
          "camera)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "caret",
        "type" : "String",
        "desc" : [
          "(search",
          "calendar)"
        ],
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "defaultDialCode",
        "type" : "String",
        "desc" : "default '+852'",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "is it disabled",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "fieldLabel",
        "type" : "string",
        "desc" : "- the label associated",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "forceFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hasFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideTrigger",
        "type" : "Boolean",
        "desc" : "True to hide the trigger element and display only the base text field (defaults to false)",
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "indicatorpos",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to display if {@link #validator} test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(top",
          "left)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "set the width of label",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "name of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "placeholder",
        "type" : "string",
        "desc" : "- placeholder to put in text.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "preferedCountries",
        "type" : "Array",
        "desc" : "default []",
        "memberOf" : ""
      },
      {
        "name" : "preventMark",
        "type" : "Boolean",
        "desc" : "Do not show tick or cross if error/success",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "Specifies that the field should be read-only",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "-- Depricated - use Invalid Text",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "removable",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "size",
        "type" : "string",
        "desc" : "- (lg|sm) or leave empty..",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "triggerClass",
        "type" : "String",
        "desc" : "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' by default and triggerClass will be <b>appended</b> if specified.",
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "validClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "value",
        "type" : "string",
        "desc" : "default value of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "paste",
        "type" : "function",
        "desc" : "Fires after the user pastes into input",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name of the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "inputEl",
        "type" : "function",
        "desc" : "return the real input element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "markValid",
        "type" : "function",
        "desc" : "Mark this field as valid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onTriggerClick",
        "type" : "function",
        "desc" : "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.TriggerField"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      }
    ]
  },
  "Roo.bootstrap.Popover" : {
    "props" : [
      {
        "name" : "(right|top|bottom|left|auto)",
        "type" : "String|function",
        "desc" : "placement how it is placed",
        "memberOf" : ""
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "add",
        "type" : "String|Boolean|Roo.Element",
        "desc" : "click hander to trigger show over what element\n     - if false and it has a 'parent' then it will be automatically added to that element\n     - if string - Roo.get  will be called",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "delay",
        "type" : "Number",
        "desc" : "- delay before showing",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "contents of the popover   (or false to use children..)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "modal",
        "type" : "Boolean",
        "desc" : "- popovers that are modal will mask the screen, and must be closed with another event.",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "of popover (or false to hide)",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "trigger",
        "type" : "String",
        "desc" : "click || hover (or false to trigger manually)",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "After the popover hide",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "After the popover show",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setContent",
        "type" : "function",
        "desc" : "",
        "sig" : "(the)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setTitle",
        "type" : "function",
        "desc" : "",
        "sig" : "(the)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show the popover",
        "sig" : "(-, (left|right|top|bottom))",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updatePosition",
        "type" : "function",
        "desc" : "fire this manually after loading a grid in the table for example",
        "sig" : "((left|right|top|bottom), try)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.bootstrap.PopoverNav" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.NavGroup"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inverse",
        "type" : "Boolean",
        "desc" : "",
        "memberOf" : "Roo.bootstrap.NavGroup"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "navId",
        "type" : "String",
        "desc" : "- reference Id for navbar.",
        "memberOf" : "Roo.bootstrap.NavGroup"
      },
      {
        "name" : "pilltype",
        "type" : "Boolean",
        "desc" : "default true (turn to off to disable active toggle)",
        "memberOf" : "Roo.bootstrap.NavGroup"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "type",
        "type" : "String",
        "desc" : [
          "(nav",
          "pills",
          "tab)"
        ],
        "memberOf" : "Roo.bootstrap.NavGroup"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "changed",
        "type" : "function",
        "desc" : "Fires when the active item changes",
        "sig" : "function (_self, selected, prev)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.NavGroup"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addItem",
        "type" : "function",
        "desc" : "adds a Navigation item",
        "sig" : "(the)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.NavGroup"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearAll",
        "type" : "function",
        "desc" : "clear all the Navigation item",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.NavGroup"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "get",
        "type" : "function",
        "desc" : "fetch a Navigation Group based on the navigation ID",
        "sig" : "(the)",
        "static" : true,
        "memberOf" : "Roo.bootstrap.NavGroup"
      },
      {
        "name" : "getActive",
        "type" : "function",
        "desc" : "gets the active Navigation item",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.NavGroup"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "register",
        "type" : "function",
        "desc" : "register a Navigation item",
        "sig" : "(the)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.NavGroup"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setActiveItem",
        "type" : "function",
        "desc" : "sets the active Navigation item",
        "sig" : "(the)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.NavGroup"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Progress" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "active",
        "type" : "Boolean",
        "desc" : "animated of the progress bar",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "striped",
        "type" : "Boolean",
        "desc" : "striped of the progress bar",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.ProgressBar" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "aria_valuemax",
        "type" : "Number",
        "desc" : "aria-value max",
        "memberOf" : ""
      },
      {
        "name" : "aria_valuemin",
        "type" : "Number",
        "desc" : "aria-value min",
        "memberOf" : ""
      },
      {
        "name" : "aria_valuenow",
        "type" : "Number",
        "desc" : "aria-value now",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "label",
        "type" : "String",
        "desc" : "label for the progress bar",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "panel",
        "type" : "String",
        "desc" : [
          "(success",
          "info",
          "warning",
          "danger )"
        ],
        "memberOf" : ""
      },
      {
        "name" : "role",
        "type" : "String",
        "desc" : "role of the progress bar",
        "memberOf" : ""
      },
      {
        "name" : "sr_only",
        "type" : "String",
        "desc" : "text",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Radio" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "boxLabel",
        "type" : "String",
        "desc" : "- the label associated",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "value",
        "type" : "String",
        "desc" : "- the value of radio",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.RadioSet" : {
    "props" : [
      {
        "name" : "(button|checkbox|email|file|hidden|image|number|password|radio|range|reset|search|submit|text)",
        "type" : "String",
        "desc" : "inputType",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "accept",
        "type" : "String",
        "desc" : [
          "(image",
          "video",
          "audio)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "after",
        "type" : "string",
        "desc" : "- input group add on after",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "center",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autocomplete",
        "type" : "String",
        "desc" : "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "before",
        "type" : "string",
        "desc" : "- input group add on before",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "capture",
        "type" : "String",
        "desc" : [
          "(user",
          "camera)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "is it disabled",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "fieldLabel",
        "type" : "string",
        "desc" : "- the label associated",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "forceFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hasFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "indicatorpos",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "inline",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to display if {@link #validator} test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(top",
          "left)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "set the width of label",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "name of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "placeholder",
        "type" : "string",
        "desc" : "- placeholder to put in text.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "preventMark",
        "type" : "Boolean",
        "desc" : "Do not show tick or cross if error/success",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "Specifies that the field should be read-only",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "-- Depricated - use Invalid Text",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "size",
        "type" : "string",
        "desc" : "- (lg|sm) or leave empty..",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "validClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "value",
        "type" : "string",
        "desc" : "default value of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "weight",
        "type" : "String",
        "desc" : [
          "(primary",
          "warning",
          "info",
          "danger",
          "success)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "check",
        "type" : "function",
        "desc" : "Fires when the element is checked or unchecked.",
        "sig" : "function (_self, item)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when the element is click.",
        "sig" : "function (_self, item, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "paste",
        "type" : "function",
        "desc" : "Fires after the user pastes into input",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name of the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "inputEl",
        "type" : "function",
        "desc" : "return the real input element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "markValid",
        "type" : "function",
        "desc" : "Mark this field as valid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      }
    ]
  },
  "Roo.bootstrap.Row" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.SecurePass" : {
    "props" : [
      {
        "name" : "(button|checkbox|email|file|hidden|image|number|password|radio|range|reset|search|submit|text)",
        "type" : "String",
        "desc" : "inputType",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "Label",
        "type" : "String/Object",
        "desc" : "for the strength meter (defaults to\n'Password strength:')",
        "memberOf" : ""
      },
      {
        "name" : "accept",
        "type" : "String",
        "desc" : [
          "(image",
          "video",
          "audio)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "after",
        "type" : "string",
        "desc" : "- input group add on after",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "center",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autocomplete",
        "type" : "String",
        "desc" : "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "before",
        "type" : "string",
        "desc" : "- input group add on before",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "capture",
        "type" : "String",
        "desc" : [
          "(user",
          "camera)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "is it disabled",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "errors",
        "type" : "String/Object",
        "desc" : "A Error spec, or true for a default spec (defaults to\n{\n PwdEmpty: \"Please type a password, and then retype it to confirm.\",\n PwdShort: \"Your password must be at least 6 characters long. Please type a different password.\",\n PwdLong: \"Your password can't contain more than 16 characters. Please type a different password.\",\n PwdBadChar: \"The password contains characters that aren't allowed. Please type a different password.\",\n IDInPwd: \"Your password can't include the part of your ID. Please type a different password.\",\n FNInPwd: \"Your password can't contain your first name. Please type a different password.\",\n LNInPwd: \"Your password can't contain your last name. Please type a different password.\"\n})",
        "memberOf" : ""
      },
      {
        "name" : "fieldLabel",
        "type" : "string",
        "desc" : "- the label associated",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "forceFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hasFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "indicatorpos",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to display if {@link #validator} test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(top",
          "left)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "set the width of label",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "name of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "placeholder",
        "type" : "string",
        "desc" : "- placeholder to put in text.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "preventMark",
        "type" : "Boolean",
        "desc" : "Do not show tick or cross if error/success",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "pwdStrengths",
        "type" : "String/Object",
        "desc" : "A pwdStrengths spec, or true for a default spec (defaults to\n['Weak', 'Medium', 'Strong'])",
        "memberOf" : ""
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "Specifies that the field should be read-only",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "-- Depricated - use Invalid Text",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "size",
        "type" : "string",
        "desc" : "- (lg|sm) or leave empty..",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "validClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "value",
        "type" : "string",
        "desc" : "default value of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "paste",
        "type" : "function",
        "desc" : "Fires after the user pastes into input",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name of the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "inputEl",
        "type" : "function",
        "desc" : "return the real input element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "markValid",
        "type" : "function",
        "desc" : "Mark this field as valid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      }
    ]
  },
  "Roo.bootstrap.Slider" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.SplitBar" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "beforeresize",
        "type" : "function",
        "desc" : "Fires before the splitter is dragged",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "moved",
        "type" : "function",
        "desc" : "Fires when the splitter is moved",
        "sig" : "function (_self, newSize)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires when the splitter is moved (alias for {@link #event-moved})",
        "sig" : "function (_self, newSize)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroy this splitbar.",
        "sig" : "(removeEl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getAdapter",
        "type" : "function",
        "desc" : "Get the adapter this SplitBar uses",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getMaximumSize",
        "type" : "function",
        "desc" : "Gets the maximum size for the resizing element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getMinimumSize",
        "type" : "function",
        "desc" : "Gets the minimum size for the resizing element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setAdapter",
        "type" : "function",
        "desc" : "Set the adapter this SplitBar uses",
        "sig" : "(adapter)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setCurrentSize",
        "type" : "function",
        "desc" : "Sets the initialize size for the resizing element",
        "sig" : "(size)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setMaximumSize",
        "type" : "function",
        "desc" : "Sets the maximum size for the resizing element",
        "sig" : "(maxSize)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setMinimumSize",
        "type" : "function",
        "desc" : "Sets the minimum size for the resizing element",
        "sig" : "(minSize)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.SplitBar.AbsoluteLayoutAdapter" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "getElementSize",
        "type" : "function",
        "desc" : "Called before drag operations to get the current size of the resizing element.",
        "sig" : "(s)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.SplitBar.BasicLayoutAdapter"
      },
      {
        "name" : "setElementSize",
        "type" : "function",
        "desc" : "Called after drag operations to set the size of the resizing element.",
        "sig" : "(s, newSize, onComplete)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.SplitBar.BasicLayoutAdapter"
      }
    ]
  },
  "Roo.bootstrap.SplitBar.BasicLayoutAdapter" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "getElementSize",
        "type" : "function",
        "desc" : "Called before drag operations to get the current size of the resizing element.",
        "sig" : "(s)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setElementSize",
        "type" : "function",
        "desc" : "Called after drag operations to set the size of the resizing element.",
        "sig" : "(s, newSize, onComplete)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.bootstrap.TabGroup" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "alert",
        "type" : "String",
        "desc" : [
          "(success",
          "info",
          "warning",
          "danger)"
        ],
        "memberOf" : "Roo.bootstrap.Column"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autoslide",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "bullets",
        "type" : "Boolean",
        "desc" : "show bullets for the panels",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "carousel",
        "type" : "Boolean",
        "desc" : "true to make the group behave like a carousel",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fa",
        "type" : "String",
        "desc" : [
          "(ban",
          "check",
          "...)"
        ],
        "memberOf" : "Roo.bootstrap.Column"
      },
      {
        "name" : "fasize",
        "type" : "Number",
        "desc" : [
          "(1",
          "2",
          "....)"
        ],
        "memberOf" : "Roo.bootstrap.Column"
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Column"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "content of column.",
        "memberOf" : "Roo.bootstrap.Column"
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : [
          "(info-sign",
          "check",
          "...)"
        ],
        "memberOf" : "Roo.bootstrap.Column"
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens or 0 for hidden",
        "memberOf" : "Roo.bootstrap.Column"
      },
      {
        "name" : "lgoff",
        "type" : "Number",
        "desc" : "colspan offset out of 12 for large computer-sized screens or 0 for hidden",
        "memberOf" : "Roo.bootstrap.Column"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens or 0 for hidden",
        "memberOf" : "Roo.bootstrap.Column"
      },
      {
        "name" : "mdoff",
        "type" : "Number",
        "desc" : "colspan offset out of 12 for computer-sized screens or 0 for hidden",
        "memberOf" : "Roo.bootstrap.Column"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "navId",
        "type" : "String",
        "desc" : "the navigation id (for use with navbars) - will be auto generated if it does not exist..",
        "memberOf" : ""
      },
      {
        "name" : "showarrow",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens or 0 for hidden",
        "memberOf" : "Roo.bootstrap.Column"
      },
      {
        "name" : "smoff",
        "type" : "Number",
        "desc" : "colspan offset out of 12 for tablet-sized screens or 0 for hidden",
        "memberOf" : "Roo.bootstrap.Column"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "timer",
        "type" : "Number",
        "desc" : "auto slide timer .. default 0 millisecond",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens or 0 for hidden",
        "memberOf" : "Roo.bootstrap.Column"
      },
      {
        "name" : "xsoff",
        "type" : "Number",
        "desc" : "colspan offset out of 12 for mobile-sized screens or 0 for hidden",
        "memberOf" : "Roo.bootstrap.Column"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "get",
        "type" : "function",
        "desc" : "fetch a Navigation Group based on the navigation ID\nif one does not exist , it will get created.",
        "sig" : "(the)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "register",
        "type" : "function",
        "desc" : "register a Navigation item",
        "sig" : "(the)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "register",
        "type" : "function",
        "desc" : "register a Navigation Group",
        "sig" : "(the)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "showPanel",
        "type" : "function",
        "desc" : "show a specific panel",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.TabPanel" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "active",
        "type" : "Boolean",
        "desc" : "panel active",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "href",
        "type" : "String",
        "desc" : "click to link..",
        "memberOf" : ""
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "panel content",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "navId",
        "type" : "String",
        "desc" : "The Roo.bootstrap.NavGroup which triggers show hide ()",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tabId",
        "type" : "String",
        "desc" : "unique tab ID (will be autogenerated if not set. - used to match TabItem to Panel)",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "touchSlide",
        "type" : "Boolean",
        "desc" : "if swiping slides tab to next panel (default off)",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedeactivate",
        "type" : "function",
        "desc" : "Fires before a tab is de-activated - can be used to do validation on a form.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "changed",
        "type" : "function",
        "desc" : "Fires when the active status changes",
        "sig" : "function (_self, state)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.Table" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "auto_hide_footer",
        "type" : "Boolean",
        "desc" : "auto hide footer if only one page (default false)",
        "memberOf" : ""
      },
      {
        "name" : "bordered",
        "type" : "boolean",
        "desc" : "Add borders to the table",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cellSelection",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "table class",
        "memberOf" : ""
      },
      {
        "name" : "cm[]",
        "type" : "Roo.grid.ColumnModel",
        "desc" : "A column for th grid.",
        "memberOf" : ""
      },
      {
        "name" : "condensed",
        "type" : "boolean",
        "desc" : "Format condensed",
        "memberOf" : ""
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "footer",
        "type" : "Roo.bootstrap.PagingToolbar",
        "desc" : "a paging toolbar",
        "memberOf" : ""
      },
      {
        "name" : "footerShow",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "headerShow",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hover",
        "type" : "boolean",
        "desc" : "Add hover highlighting",
        "memberOf" : ""
      },
      {
        "name" : "lazyLoad",
        "type" : "Boolean",
        "desc" : "auto load data while scrolling to the end (default false)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadMask",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "responsive",
        "type" : "boolean",
        "desc" : "Format condensed",
        "memberOf" : ""
      },
      {
        "name" : "rowSelection",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "scrollBody",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "sm",
        "type" : "Roo.grid.RowSelectionModel|Roo.grid.CellSelectionModel",
        "desc" : "The selection model to use (cell selection is not supported yet)",
        "memberOf" : ""
      },
      {
        "name" : "store",
        "type" : "Roo.data.Store|Roo.data.SimpleStore",
        "desc" : "The data store to use",
        "memberOf" : ""
      },
      {
        "name" : "striped",
        "type" : "boolean",
        "desc" : "Should the rows be alternative striped",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "cellclick",
        "type" : "function",
        "desc" : "Fires when a cell is clicked",
        "sig" : "function (_self, el, rowIndex, columnIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "cellcontextmenu",
        "type" : "function",
        "desc" : "Fires when a cell is right clicked",
        "sig" : "function (_self, rowIndex, cellIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "celldblclick",
        "type" : "function",
        "desc" : "Fires when a cell is double clicked",
        "sig" : "function (_self, el, rowIndex, columnIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "contextmenu",
        "type" : "function",
        "desc" : "The raw contextmenu event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "headercontextmenu",
        "type" : "function",
        "desc" : "Fires when a header is right clicked",
        "sig" : "function (_self, columnIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "mousedown",
        "type" : "function",
        "desc" : "The raw mousedown event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mouseout",
        "type" : "function",
        "desc" : "Fires when a mouseout occur",
        "sig" : "function (_self, el, rowIndex, columnIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mouseover",
        "type" : "function",
        "desc" : "Fires when a mouseover occur",
        "sig" : "function (_self, el, rowIndex, columnIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "rowclass",
        "type" : "function",
        "desc" : "Fires when a row is rendered, so you can change add a style to it.",
        "sig" : "function (_self, rowcfg)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "rowclick",
        "type" : "function",
        "desc" : "Fires when a row is clicked",
        "sig" : "function (_self, el, rowIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "rowcontextmenu",
        "type" : "function",
        "desc" : "Fires when a row is right clicked",
        "sig" : "function (_self, rowIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "rowdblclick",
        "type" : "function",
        "desc" : "Fires when a row is double clicked",
        "sig" : "function (_self, el, rowIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "rowsrendered",
        "type" : "function",
        "desc" : "Fires when all the  rows have been rendered",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "Forces a resize - used by panel.Grid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clear",
        "type" : "function",
        "desc" : "Remove all rows",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "ensureVisible",
        "type" : "function",
        "desc" : "Scrolls the specified cell into view",
        "sig" : "(row, col, hscroll)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focusCell",
        "type" : "function",
        "desc" : "Focuses the specified cell.",
        "sig" : "(row, col, hscroll)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "focusRow",
        "type" : "function",
        "desc" : "Focuses the specified row.",
        "sig" : "(row)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getGridEl",
        "type" : "function",
        "desc" : "Returns the grid's underlying element = used by panel.Grid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setRowVisibility",
        "type" : "function",
        "desc" : "Show or hide a row.",
        "sig" : "(rowIndex, state)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.TableBody" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : "Aligns the content inside the element",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "charoff",
        "type" : "Number",
        "desc" : "Sets the number of characters the content inside the element will be aligned from the character specified by the char attribute",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "element class",
        "memberOf" : ""
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tag",
        "type" : "String",
        "desc" : "element tag (thead|tbody|tfoot) default tbody",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "valign",
        "type" : "String",
        "desc" : "Vertical aligns the content inside the <tbody> element",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.TableCell" : {
    "props" : [
      {
        "name" : "abbr",
        "type" : "String",
        "desc" : "Specifies an abbreviated version of the content in a cell",
        "memberOf" : ""
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : "Aligns the content in a cell",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "axis",
        "type" : "String",
        "desc" : "Categorizes cells",
        "memberOf" : ""
      },
      {
        "name" : "bgcolor",
        "type" : "String",
        "desc" : "Specifies the background color of a cell",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "charoff",
        "type" : "Number",
        "desc" : "Sets the number of characters the content will be aligned from the character specified by the char attribute",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "cell class",
        "memberOf" : ""
      },
      {
        "name" : "colspan",
        "type" : "Number",
        "desc" : "Specifies the number of columns a cell should span",
        "memberOf" : ""
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "headers",
        "type" : "String",
        "desc" : "Specifies one or more header cells a cell is related to",
        "memberOf" : ""
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "Sets the height of a cell",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "cell contain text",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "nowrap",
        "type" : "String",
        "desc" : "Specifies that the content inside a cell should not wrap",
        "memberOf" : ""
      },
      {
        "name" : "rowspan",
        "type" : "Number",
        "desc" : "Sets the number of rows a cell should span",
        "memberOf" : ""
      },
      {
        "name" : "scope",
        "type" : "String",
        "desc" : "Defines a way to associate header cells and data cells in a table",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tag",
        "type" : "String",
        "desc" : "cell tag (td|th) default td",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "valign",
        "type" : "String",
        "desc" : "Vertical aligns the content in a cell",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "Specifies the width of a cell",
        "memberOf" : ""
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.TableRow" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : "Aligns the content in a table row",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "bgcolor",
        "type" : "String",
        "desc" : "Specifies a background color for a table row",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "charoff",
        "type" : "Number",
        "desc" : "Sets the number of characters the content will be aligned from the character specified by the char attribute",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "row class",
        "memberOf" : ""
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "valign",
        "type" : "String",
        "desc" : "Vertical aligns the content in a table row",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.TextArea" : {
    "props" : [
      {
        "name" : "(button|checkbox|email|file|hidden|image|number|password|radio|range|reset|search|submit|text)",
        "type" : "String",
        "desc" : "inputType",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "accept",
        "type" : "String",
        "desc" : [
          "(image",
          "video",
          "audio)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "after",
        "type" : "string",
        "desc" : "- input group add on after",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "center",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autocomplete",
        "type" : "String",
        "desc" : "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "before",
        "type" : "string",
        "desc" : "- input group add on before",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "capture",
        "type" : "String",
        "desc" : [
          "(user",
          "camera)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cols",
        "type" : "Number",
        "desc" : "Specifies the visible width of a text area",
        "memberOf" : ""
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "is it disabled",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "fieldLabel",
        "type" : "string",
        "desc" : "- the label associated",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "forceFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hasFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "string",
        "desc" : "text",
        "memberOf" : ""
      },
      {
        "name" : "indicatorpos",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to display if {@link #validator} test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(top",
          "left)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "set the width of label",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "name of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "placeholder",
        "type" : "string",
        "desc" : "- placeholder to put in text.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "preventMark",
        "type" : "Boolean",
        "desc" : "Do not show tick or cross if error/success",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "Specifies that the field should be read-only",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "-- Depricated - use Invalid Text",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "resize",
        "type" : "string",
        "desc" : [
          "(none",
          "both",
          "horizontal",
          "vertical",
          "inherit",
          "initial)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "rows",
        "type" : "Number",
        "desc" : "Specifies the visible number of lines in a text area",
        "memberOf" : ""
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "size",
        "type" : "string",
        "desc" : "- (lg|sm) or leave empty..",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "validClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "value",
        "type" : "string",
        "desc" : "default value of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "wrap",
        "type" : "string",
        "desc" : [
          "(soft",
          "hard)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "paste",
        "type" : "function",
        "desc" : "Fires after the user pastes into input",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name of the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "inputEl",
        "type" : "function",
        "desc" : "return the real textarea element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "markValid",
        "type" : "function",
        "desc" : "Mark this field as valid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      }
    ]
  },
  "Roo.bootstrap.TimeField" : {
    "props" : [
      {
        "name" : "(button|checkbox|email|file|hidden|image|number|password|radio|range|reset|search|submit|text)",
        "type" : "String",
        "desc" : "inputType",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "accept",
        "type" : "String",
        "desc" : [
          "(image",
          "video",
          "audio)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "after",
        "type" : "string",
        "desc" : "- input group add on after",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "center",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autocomplete",
        "type" : "String",
        "desc" : "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "before",
        "type" : "string",
        "desc" : "- input group add on before",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "capture",
        "type" : "String",
        "desc" : [
          "(user",
          "camera)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "is it disabled",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "fieldLabel",
        "type" : "string",
        "desc" : "- the label associated",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "forceFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "format",
        "type" : "String",
        "desc" : "The default time format string which can be overriden for localization support.  The format must be\nvalid according to {@link Date#parseDate} (defaults to 'H:i').",
        "memberOf" : ""
      },
      {
        "name" : "hasFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "indicatorpos",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to display if {@link #validator} test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(top",
          "left)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "set the width of label",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "name of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "placeholder",
        "type" : "string",
        "desc" : "- placeholder to put in text.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "preventMark",
        "type" : "Boolean",
        "desc" : "Do not show tick or cross if error/success",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "Specifies that the field should be read-only",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "-- Depricated - use Invalid Text",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "size",
        "type" : "string",
        "desc" : "- (lg|sm) or leave empty..",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "validClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "value",
        "type" : "string",
        "desc" : "default value of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "paste",
        "type" : "function",
        "desc" : "Fires after the user pastes into input",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Fires when select a date.",
        "sig" : "function (_self, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires when this field show.",
        "sig" : "function (thisthis, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name of the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "inputEl",
        "type" : "function",
        "desc" : "return the real input element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "markValid",
        "type" : "function",
        "desc" : "Mark this field as valid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      }
    ]
  },
  "Roo.bootstrap.Tooltip" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "currentEl",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : true,
        "memberOf" : ""
      }
    ]
  },
  "Roo.bootstrap.TriggerField" : {
    "props" : [
      {
        "name" : "(button|checkbox|email|file|hidden|image|number|password|radio|range|reset|search|submit|text)",
        "type" : "String",
        "desc" : "inputType",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "accept",
        "type" : "String",
        "desc" : [
          "(image",
          "video",
          "audio)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "after",
        "type" : "string",
        "desc" : "- input group add on after",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "align",
        "type" : "String",
        "desc" : [
          "(left",
          "center",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autocomplete",
        "type" : "String",
        "desc" : "- default is new-password see: https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "before",
        "type" : "string",
        "desc" : "- input group add on before",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "capture",
        "type" : "String",
        "desc" : [
          "(user",
          "camera)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "caret",
        "type" : "String",
        "desc" : [
          "(search",
          "calendar)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "is it disabled",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "fieldLabel",
        "type" : "string",
        "desc" : "- the label associated",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "forceFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hasFeedback",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideTrigger",
        "type" : "Boolean",
        "desc" : "True to hide the trigger element and display only the base text field (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "indicatorpos",
        "type" : "String",
        "desc" : [
          "(left",
          "right)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to display if {@link #validator} test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : [
          "(top",
          "left)"
        ],
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "set the width of label",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labellg",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelmd",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelsm",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "labelxs",
        "type" : "Number",
        "desc" : "set the width of label (1-12)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "colspan out of 12 for large computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "colspan out of 12 for computer-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "name of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "placeholder",
        "type" : "string",
        "desc" : "- placeholder to put in text.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "preventMark",
        "type" : "Boolean",
        "desc" : "Do not show tick or cross if error/success",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "Specifies that the field should be read-only",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "-- Depricated - use Invalid Text",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "removable",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "size",
        "type" : "string",
        "desc" : "- (lg|sm) or leave empty..",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "colspan out of 12 for tablet-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "triggerClass",
        "type" : "String",
        "desc" : "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' by default and triggerClass will be <b>appended</b> if specified.",
        "memberOf" : ""
      },
      {
        "name" : "validClass",
        "type" : "String",
        "desc" : "DEPRICATED - code uses BS4 - is-valid / is-invalid",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validFeedbackIcon",
        "type" : "String",
        "desc" : "The CSS class to use when create feedback icon (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "value",
        "type" : "string",
        "desc" : "default value of the input",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "colspan out of 12 for mobile-sized screens",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "paste",
        "type" : "function",
        "desc" : "Fires after the user pastes into input",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Input"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name of the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "inputEl",
        "type" : "function",
        "desc" : "return the real input element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "markValid",
        "type" : "function",
        "desc" : "Mark this field as valid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onTriggerClick",
        "type" : "function",
        "desc" : "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Input"
      }
    ]
  },
  "Roo.bootstrap.UploadCropbox" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "buttons",
        "type" : "Array",
        "desc" : "default ['rotateLeft', 'pictureBtn', 'rotateRight']",
        "memberOf" : ""
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "emptyText",
        "type" : "String",
        "desc" : "show when image has been loaded",
        "memberOf" : ""
      },
      {
        "name" : "errorTimeout",
        "type" : "Number",
        "desc" : "default 3000",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDocument",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadMask",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "loadingText",
        "type" : "Boolean",
        "desc" : "default 'Loading...'",
        "memberOf" : ""
      },
      {
        "name" : "method",
        "type" : "String",
        "desc" : "default POST",
        "memberOf" : ""
      },
      {
        "name" : "minHeight",
        "type" : "Number",
        "desc" : "default 300",
        "memberOf" : ""
      },
      {
        "name" : "minWidth",
        "type" : "Number",
        "desc" : "default 300",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "paramName",
        "type" : "String",
        "desc" : "default 'imageUpload'",
        "memberOf" : ""
      },
      {
        "name" : "rotateNotify",
        "type" : "String",
        "desc" : "show when image too small to rotate",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "action url",
        "memberOf" : ""
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "arrange",
        "type" : "function",
        "desc" : "Fire when arrange the file data",
        "sig" : "function (_self, formData)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeloadcanvas",
        "type" : "function",
        "desc" : "Fire before load the canvas",
        "sig" : "function (_self, src)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeselectfile",
        "type" : "function",
        "desc" : "Fire before select file",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "crop",
        "type" : "function",
        "desc" : "Fire after initEvent",
        "sig" : "function (_self, data)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "download",
        "type" : "function",
        "desc" : "Fire when download the image",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "exception",
        "type" : "function",
        "desc" : "Fire when get exception",
        "sig" : "function (_self, xhr)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "footerbuttonclick",
        "type" : "function",
        "desc" : "Fire when footerbuttonclick",
        "sig" : "function (_self, type)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "initial",
        "type" : "function",
        "desc" : "Fire after initEvent",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "inspect",
        "type" : "function",
        "desc" : "Fire when inspect the file",
        "sig" : "function (_self, file)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "prepare",
        "type" : "function",
        "desc" : "Fire when preparing the file data",
        "sig" : "function (_self, file)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fire when resize",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "rotate",
        "type" : "function",
        "desc" : "Fire when rotate the image",
        "sig" : "function (_self, pos)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "trash",
        "type" : "function",
        "desc" : "Fire when trash image",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "upload",
        "type" : "function",
        "desc" : "Fire when xhr upload the file",
        "sig" : "function (_self, data)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.breadcrumb" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.bootstrap.breadcrumb.Item" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "active",
        "type" : "Boolean",
        "desc" : "is it active",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "href",
        "type" : "String",
        "desc" : "where it links to if '#' is used the link will be handled by onClick.",
        "memberOf" : ""
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "the content of the link.",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "The img click event for the img.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.breadcrumb.Nav" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.dash" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.bootstrap.dash.NumberBox" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "content",
        "type" : "String",
        "desc" : "Box content",
        "memberOf" : ""
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fhref",
        "type" : "String",
        "desc" : "Footer href",
        "memberOf" : ""
      },
      {
        "name" : "footer",
        "type" : "String",
        "desc" : "Footer text",
        "memberOf" : ""
      },
      {
        "name" : "headline",
        "type" : "String",
        "desc" : "Box headline",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : "Box icon",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.dash.TabBox" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : "Icon of the TabBox",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "showtabs",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tabScrollable",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "Title of the TabBox",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "activatepane",
        "type" : "function",
        "desc" : "When a pane is activated",
        "sig" : "function (pane)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "addpane",
        "type" : "function",
        "desc" : "When a pane is added",
        "sig" : "function (pane)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setTitle",
        "type" : "function",
        "desc" : "Updates the box title",
        "sig" : "(html)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.dash.TabPane" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "active",
        "type" : "Boolean",
        "desc" : [
          "(false",
          "true)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "title of panel",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "When a pane is activated",
        "sig" : "function (pane)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setTitle",
        "type" : "function",
        "desc" : "Updates the tab title",
        "sig" : "(html)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.htmleditor" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.bootstrap.htmleditor.ToolbarStandard" : {
    "props" : [
      {
        "name" : "btns",
        "type" : "Array",
        "desc" : "List of additional buttons.\n\n\nNEEDS Extra CSS? \n.x-html-editor-tb .x-edit-none .x-btn-text { background: none; }",
        "memberOf" : ""
      },
      {
        "name" : "disable",
        "type" : "Object",
        "desc" : "List of elements to disable..",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "updateToolbar",
        "type" : "function",
        "desc" : "Protected method that will not generally be called directly. It triggers\na toolbar update by reading the markup state of the current selection in the editor.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.bootstrap.layout" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.bootstrap.layout.Basic" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "mgr",
        "type" : "Roo.bootstrap.layout.Manager",
        "desc" : "The manager",
        "memberOf" : ""
      },
      {
        "name" : "region",
        "type" : "string",
        "desc" : "the region that it inhabits..",
        "memberOf" : ""
      },
      {
        "name" : "skipConfig",
        "type" : "bool",
        "desc" : "skip config?",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Add the passed ContentPanel(s)",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getActivePanel",
        "type" : "function",
        "desc" : "Get the active panel for this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the container element for this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getPanel",
        "type" : "function",
        "desc" : "Returns the panel specified or null if it's not in this region.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Returns this regions position (north/south/east/west/center).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hasPanel",
        "type" : "function",
        "desc" : "Returns true if the panel is in this region.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this region is currently visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Removes the specified panel. If preservePanel is not true (either here or in the config), the panel is destroyed.",
        "sig" : "(panel, preservePanel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resizeTo",
        "type" : "function",
        "desc" : "Resizes the region to the specified size. For vertical regions (west, east) this adjusts \nthe width, for horizontal (north, south) the height.",
        "sig" : "(newSize)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "showPanel",
        "type" : "function",
        "desc" : "Show the specified panel.",
        "sig" : "(panelId)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.layout.Border" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "layout",
        "type" : "function",
        "desc" : "Fires when a layout is performed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.layout.Manager"
      },
      {
        "name" : "regioncollapsed",
        "type" : "function",
        "desc" : "Fires when a region is collapsed.",
        "sig" : "function (region)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.layout.Manager"
      },
      {
        "name" : "regionexpanded",
        "type" : "function",
        "desc" : "Fires when a region is expanded.",
        "sig" : "function (region)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.layout.Manager"
      },
      {
        "name" : "regionresized",
        "type" : "function",
        "desc" : "Fires when the user resizes a region.",
        "sig" : "function (region, newSize)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.layout.Manager"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Adds a ContentPanel (or subclass) to this layout.",
        "sig" : "(target, panel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addRegion",
        "type" : "function",
        "desc" : "Creates and adds a new region if it doesn't already exist.",
        "sig" : "(target, config)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addxtype",
        "type" : "function",
        "desc" : "Adds a xtype elements to the layout.\n<pre><code>\n\nlayout.addxtype({\n       xtype : 'ContentPanel',\n       region: 'west',\n       items: [ .... ]\n   }\n);\n\nlayout.addxtype({\n        xtype : 'NestedLayoutPanel',\n        region: 'west',\n        layout: {\n           center: { },\n           west: { }   \n        },\n        items : [ ... list of content panels or nested layout panels.. ]\n   }\n);\n</code></pre>",
        "sig" : "(cfg)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "beginUpdate",
        "type" : "function",
        "desc" : "Suspend the LayoutManager from doing auto-layouts while\nmaking multiple add or remove calls",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.layout.Manager"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "endUpdate",
        "type" : "function",
        "desc" : "Restore auto-layouts and optionally disable the manager from performing a layout",
        "sig" : "(noLayout)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.layout.Manager"
      },
      {
        "name" : "findPanel",
        "type" : "function",
        "desc" : "Searches all regions for a panel with the specified id",
        "sig" : "(panelId)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the Element this layout is bound to.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.layout.Manager"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getRegion",
        "type" : "function",
        "desc" : "Returns the specified region.",
        "sig" : "(target)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.layout.Manager"
      },
      {
        "name" : "getViewSize",
        "type" : "function",
        "desc" : "Returns the size of the current view. This method normalizes document.body and element embedded layouts and\nperforms box-model adjustments.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.layout.Manager"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isUpdating",
        "type" : "function",
        "desc" : "Returns true if this layout is currently being updated",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.layout.Manager"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "layout",
        "type" : "function",
        "desc" : "Performs a layout update.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Remove a ContentPanel (or subclass) to this layout.",
        "sig" : "(target, panel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "showPanel",
        "type" : "function",
        "desc" : "Searches all regions for a panel with the specified id and activates (shows) it.",
        "sig" : "(panelId)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.layout.Manager" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "layout",
        "type" : "function",
        "desc" : "Fires when a layout is performed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "regioncollapsed",
        "type" : "function",
        "desc" : "Fires when a region is collapsed.",
        "sig" : "function (region)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "regionexpanded",
        "type" : "function",
        "desc" : "Fires when a region is expanded.",
        "sig" : "function (region)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "regionresized",
        "type" : "function",
        "desc" : "Fires when the user resizes a region.",
        "sig" : "function (region, newSize)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "beginUpdate",
        "type" : "function",
        "desc" : "Suspend the LayoutManager from doing auto-layouts while\nmaking multiple add or remove calls",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "endUpdate",
        "type" : "function",
        "desc" : "Restore auto-layouts and optionally disable the manager from performing a layout",
        "sig" : "(noLayout)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the Element this layout is bound to.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getRegion",
        "type" : "function",
        "desc" : "Returns the specified region.",
        "sig" : "(target)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getViewSize",
        "type" : "function",
        "desc" : "Returns the size of the current view. This method normalizes document.body and element embedded layouts and\nperforms box-model adjustments.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isUpdating",
        "type" : "function",
        "desc" : "Returns true if this layout is currently being updated",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.layout.Region" : {
    "props" : [
      {
        "name" : "alwaysShowTabs",
        "type" : "Boolean",
        "desc" : "True to always display tabs even when there is only 1 panel (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "animate",
        "type" : "Boolean",
        "desc" : "True to animate expand/collapse (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "autoHide",
        "type" : "Boolean",
        "desc" : "False to disable auto hiding when the mouse leaves the \"floated\" region (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "autoScroll",
        "type" : "Boolean",
        "desc" : "True to enable overflow scrolling (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "closeOnTab",
        "type" : "Boolean",
        "desc" : "True to place the close icon on the tabs instead of the region titlebar (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "string",
        "desc" : "Extra CSS classes to add to region",
        "memberOf" : ""
      },
      {
        "name" : "cmargins",
        "type" : "Object",
        "desc" : "Margins for the element when collapsed (defaults to: north/south {top: 2, left: 0, right:0, bottom: 2} or east/west {top: 0, left: 2, right:2, bottom: 0})",
        "memberOf" : ""
      },
      {
        "name" : "disableTabTips",
        "type" : "Boolean",
        "desc" : "True to disable tab tooltips",
        "memberOf" : ""
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "For North/South panels",
        "memberOf" : ""
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "True to start the region hidden (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "hideTabs",
        "type" : "Boolean",
        "desc" : "True to hide the tab strip (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "hideWhenEmpty",
        "type" : "Boolean",
        "desc" : "True to hide the region when it has no panels",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "margins",
        "type" : "Object",
        "desc" : "Margins for the element (defaults to {top: 0, left: 0, right:0, bottom: 0})",
        "memberOf" : ""
      },
      {
        "name" : "mgr",
        "type" : "Roo.bootstrap.layout.Manager",
        "desc" : "The manager",
        "memberOf" : ""
      },
      {
        "name" : "minTabWidth",
        "type" : "Number",
        "desc" : "The minimum tab width (defaults to 40)",
        "memberOf" : ""
      },
      {
        "name" : "overflow",
        "type" : "String",
        "desc" : [
          "(hidden",
          "visible)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "preferredTabWidth",
        "type" : "Number",
        "desc" : "The preferred tab width (defaults to 150)",
        "memberOf" : ""
      },
      {
        "name" : "preservePanels",
        "type" : "Boolean",
        "desc" : "True to preserve removed panels so they can be readded later (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "region",
        "type" : "string",
        "desc" : "the region that it inhabits..",
        "memberOf" : ""
      },
      {
        "name" : "resizeTabs",
        "type" : "Boolean",
        "desc" : "True to enable automatic tab resizing. This will resize the tabs so they are all the same size and fit within\n                     the space available, similar to FireFox 1.5 tabs (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "skipConfig",
        "type" : "bool",
        "desc" : "skip config?",
        "memberOf" : "Roo.bootstrap.layout.Basic"
      },
      {
        "name" : "split",
        "type" : "Boolean",
        "desc" : "To show the splitter",
        "memberOf" : ""
      },
      {
        "name" : "tabPosition",
        "type" : "String",
        "desc" : [
          "(top",
          "bottom)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "The title for the region (overrides panel titles)",
        "memberOf" : ""
      },
      {
        "name" : "titlebar",
        "type" : "Boolean",
        "desc" : "True to display a title bar (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "toolbar",
        "type" : "Boolean",
        "desc" : "xtype configuration for a toolbar - shows on right of tabbar",
        "memberOf" : ""
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "For East/West panels",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Adds the passed ContentPanel(s) to this region.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "animateCollapse",
        "type" : "function",
        "desc" : "Collapses this region.",
        "sig" : "(skipAnim)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "animateExpand",
        "type" : "function",
        "desc" : "Expands this region if it was previously collapsed.",
        "sig" : "(e, skipAnim)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getActivePanel",
        "type" : "function",
        "desc" : "Get the active panel for this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Updates the title for collapsed north/south regions (used with {@link #collapsedTitle} config option)",
        "sig" : "(title)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the container element for this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getPanel",
        "type" : "function",
        "desc" : "Returns the panel specified or null if it's not in this region.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.layout.Basic"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Returns this regions position (north/south/east/west/center).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.layout.Basic"
      },
      {
        "name" : "getTabs",
        "type" : "function",
        "desc" : "Returns the TabPanel component used by this region",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hasPanel",
        "type" : "function",
        "desc" : "Returns true if the panel is in this region.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.layout.Basic"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hidePanel",
        "type" : "function",
        "desc" : "Hides the tab for the specified panel.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this region is currently visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Removes the specified panel. If preservePanel is not true (either here or in the config), the panel is destroyed.",
        "sig" : "(panel, preservePanel)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resizeTo",
        "type" : "function",
        "desc" : "Resizes the region to the specified size. For vertical regions (west, east) this adjusts \nthe width, for horizontal (north, south) the height.",
        "sig" : "(newSize)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.layout.Basic"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Shows this region if it was previously hidden.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "showPanel",
        "type" : "function",
        "desc" : "Shows the specified panel.",
        "sig" : "(panelId)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unhidePanel",
        "type" : "function",
        "desc" : "Unhides the tab for a previously hidden panel.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.bootstrap.layout.Split" : {
    "props" : [
      {
        "name" : "alwaysShowTabs",
        "type" : "Boolean",
        "desc" : "True to always display tabs even when there is only 1 panel (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "animate",
        "type" : "Boolean",
        "desc" : "True to animate expand/collapse (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "autoHide",
        "type" : "Boolean",
        "desc" : "False to disable auto hiding when the mouse leaves the \"floated\" region (defaults to true)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "autoScroll",
        "type" : "Boolean",
        "desc" : "True to enable overflow scrolling (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "closeOnTab",
        "type" : "Boolean",
        "desc" : "True to place the close icon on the tabs instead of the region titlebar (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "cmargins",
        "type" : "Object",
        "desc" : "Margins for the element when collapsed (defaults to: north/south {top: 2, left: 0, right:0, bottom: 2} or east/west {top: 0, left: 2, right:2, bottom: 0})",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "collapsed",
        "type" : "Boolean",
        "desc" : "True to set the initial display to collapsed (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "collapsedTitle",
        "type" : "String",
        "desc" : "Optional string message to display in the collapsed block of a north or south region",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "collapsible",
        "type" : "Boolean",
        "desc" : "False to disable collapsing (defaults to true)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "disableTabTips",
        "type" : "Boolean",
        "desc" : "True to disable tab tooltips",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "floatable",
        "type" : "Boolean",
        "desc" : "False to disable floating (defaults to true)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "For North/South panels",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "True to start the region hidden (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "hideTabs",
        "type" : "Boolean",
        "desc" : "True to hide the tab strip (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "hideWhenEmpty",
        "type" : "Boolean",
        "desc" : "True to hide the region when it has no panels",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "margins",
        "type" : "Object",
        "desc" : "Margins for the element (defaults to {top: 0, left: 0, right:0, bottom: 0})",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "minTabWidth",
        "type" : "Number",
        "desc" : "The minimum tab width (defaults to 40)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "preferredTabWidth",
        "type" : "Number",
        "desc" : "The preferred tab width (defaults to 150)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "preservePanels",
        "type" : "Boolean",
        "desc" : "True to preserve removed panels so they can be readded later (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "resizeTabs",
        "type" : "Boolean",
        "desc" : "True to enable automatic tab resizing. This will resize the tabs so they are all the same size and fit within\n                     the space available, similar to FireFox 1.5 tabs (defaults to false)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "showPin",
        "type" : "Boolean",
        "desc" : "True to show a pin button",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "split",
        "type" : "Boolean",
        "desc" : "To show the splitter",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "tabPosition",
        "type" : "String",
        "desc" : [
          "(top",
          "bottom)"
        ],
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "The title for the region (overrides panel titles)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "titlebar",
        "type" : "Boolean",
        "desc" : "True to display a title bar (defaults to true)",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "toolbar",
        "type" : "Boolean",
        "desc" : "xtype configuration for a toolbar - shows on right of tabbar",
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "For East/West panels",
        "memberOf" : "Roo.LayoutRegion"
      }
    ],
    "events" : [
      {
        "name" : "beforecollapse",
        "type" : "function",
        "desc" : "Fires when this region before collapse.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "beforeremove",
        "type" : "function",
        "desc" : "Fires before a panel is removed (or closed). To cancel the removal set \"e.cancel = true\" on the event argument.",
        "sig" : "function (_self, panel, e)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "collapsed",
        "type" : "function",
        "desc" : "Fires when this region is collapsed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "expanded",
        "type" : "function",
        "desc" : "Fires when this region is expanded.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "invalidated",
        "type" : "function",
        "desc" : "Fires when the layout for this region is changed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "panelactivated",
        "type" : "function",
        "desc" : "Fires when a panel is activated.",
        "sig" : "function (_self, panel)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "paneladded",
        "type" : "function",
        "desc" : "Fires when a panel is added.",
        "sig" : "function (_self, panel)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "panelremoved",
        "type" : "function",
        "desc" : "Fires when a panel is removed.",
        "sig" : "function (_self, panel)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "resized",
        "type" : "function",
        "desc" : "Fires when the user resizes this region.",
        "sig" : "function (_self, newSize)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "slidehide",
        "type" : "function",
        "desc" : "Fires when this region slides out of view.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "slideshow",
        "type" : "function",
        "desc" : "Fires when this region is slid into view.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "visibilitychange",
        "type" : "function",
        "desc" : "Fires when this region is shown or hidden",
        "sig" : "function (_self, visibility)\n{\n\n}",
        "memberOf" : "Roo.BasicLayoutRegion"
      }
    ],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Adds the passed ContentPanel(s) to this region.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Collapses this region.",
        "sig" : "(skipAnim)",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expands this region if it was previously collapsed.",
        "sig" : "(e, skipAnim)",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getActivePanel",
        "type" : "function",
        "desc" : "Get the active panel for this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the container element for this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "getPanel",
        "type" : "function",
        "desc" : "Returns the panel specified or null if it's not in this region.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Returns this regions position (north/south/east/west/center).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "getSplitBar",
        "type" : "function",
        "desc" : "Returns the {@link Roo.SplitBar} for this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTabs",
        "type" : "function",
        "desc" : "Returns the TabPanel component used by this region",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hasPanel",
        "type" : "function",
        "desc" : "Returns true if the panel is in this region.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this region.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "hidePanel",
        "type" : "function",
        "desc" : "Hides the tab for the specified panel.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this region is currently visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Removes the specified panel. If preservePanel is not true (either here or in the config), the panel is destroyed.",
        "sig" : "(panel, preservePanel)",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resizeTo",
        "type" : "function",
        "desc" : "Resizes the region to the specified size. For vertical regions (west, east) this adjusts \nthe width, for horizontal (north, south) the height.",
        "sig" : "(newSize)",
        "static" : false,
        "memberOf" : "Roo.BasicLayoutRegion"
      },
      {
        "name" : "setCollapsedTitle",
        "type" : "function",
        "desc" : "Updates the title for collapsed north/south regions (used with {@link #collapsedTitle} config option)",
        "sig" : "(title)",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Shows this region if it was previously hidden.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "showPanel",
        "type" : "function",
        "desc" : "Shows the specified panel.",
        "sig" : "(panelId)",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unhidePanel",
        "type" : "function",
        "desc" : "Unhides the tab for a previously hidden panel.",
        "sig" : "(panel)",
        "static" : false,
        "memberOf" : "Roo.LayoutRegion"
      }
    ]
  },
  "Roo.bootstrap.menu" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.bootstrap.menu.Item" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disable",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "href",
        "type" : "String",
        "desc" : "the link",
        "memberOf" : ""
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "text of the item",
        "memberOf" : ""
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : "Font awesome icon",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "pos",
        "type" : "String",
        "desc" : "Submenu align to (left | right) default right",
        "memberOf" : ""
      },
      {
        "name" : "preventDefault",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "submenu",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "The raw click event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "mouseout",
        "type" : "function",
        "desc" : "Fires when the mouse exits this menu",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mouseover",
        "type" : "function",
        "desc" : "Fires when the mouse is hovering over this menu",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.menu.Menu" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "Text of the menu",
        "memberOf" : ""
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : "Font awesome icon",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "pos",
        "type" : "String",
        "desc" : "Menu align to (top | bottom) default bottom",
        "memberOf" : ""
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "weight",
        "type" : "String",
        "desc" : [
          "(default",
          "primary",
          "success",
          "info",
          "warning",
          "danger",
          "inverse)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before this menu is hidden",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before this menu is displayed",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this menu is clicked (or when the enter key is pressed while it is active)",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after this menu is hidden",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after this menu is displayed",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.menu.Separator" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "can_build_overlaid",
        "type" : "Boolean",
        "desc" : "True if element can be rebuild from a HTML page",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "css class",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "container_method",
        "type" : "string",
        "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "dataId",
        "type" : "string",
        "desc" : "cutomer id",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "name",
        "type" : "string",
        "desc" : "Specifies name attribute",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "style",
        "type" : "String",
        "desc" : "any extra css",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltip",
        "type" : "string",
        "desc" : "Text for the tooltip",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "visibilityEl",
        "type" : "string|object",
        "desc" : [
          "(el",
          "parent)"
        ],
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "xattr",
        "type" : "Object",
        "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
        "memberOf" : "Roo.bootstrap.Component"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "childrenrendered",
        "type" : "function",
        "desc" : "Fires when the children have been rendered..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Fetch the element to add children to",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getVisibilityEl",
        "type" : "function",
        "desc" : "Get the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide a component - adds 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "initEvents",
        "type" : "function",
        "desc" : "Initialize Events for the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisibilityEl",
        "type" : "function",
        "desc" : "Set the element that will be used to show or hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show a component - removes 'hidden' class",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "tooltipEl",
        "type" : "function",
        "desc" : "Fetch the element to display the tooltip on.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.panel" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.bootstrap.panel.Content" : {
    "props" : [
      {
        "name" : "adjustments",
        "type" : "Array",
        "desc" : "Values to <b>add</b> to the width/height when doing a {@link #fitToFrame} (default is [0, 0])",
        "memberOf" : ""
      },
      {
        "name" : "autoCreate",
        "type" : "Boolean/Object",
        "desc" : "True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create",
        "memberOf" : ""
      },
      {
        "name" : "autoScroll",
        "type" : "Boolean",
        "desc" : "True to scroll overflow in this panel (use with {@link #fitToFrame})",
        "memberOf" : ""
      },
      {
        "name" : "background",
        "type" : "Boolean",
        "desc" : "True if the panel should not be activated when it is added (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "badges",
        "type" : "Boolean",
        "desc" : "render the badges",
        "memberOf" : ""
      },
      {
        "name" : "closable",
        "type" : "Boolean",
        "desc" : "True if the panel can be closed/removed",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "extra classes to use",
        "memberOf" : ""
      },
      {
        "name" : "content",
        "type" : "String",
        "desc" : "Raw content to fill content panel with (uses setContent on construction.)",
        "memberOf" : ""
      },
      {
        "name" : "fitContainer",
        "type" : "Boolean",
        "desc" : "When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "fitToFrame",
        "type" : "Boolean",
        "desc" : "True for this panel to adjust its size to fit when the region resizes  (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "iframe",
        "type" : "Boolean",
        "desc" : "contents are an iframe - makes showing remote sources/CSS feasible..",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadOnce",
        "type" : "Boolean",
        "desc" : "When used with {@link #url}, calls {@link #setUrl} with this value",
        "memberOf" : ""
      },
      {
        "name" : "params",
        "type" : "String/Object",
        "desc" : "When used with {@link #url}, calls {@link #setUrl} with this value",
        "memberOf" : ""
      },
      {
        "name" : "region",
        "type" : "String",
        "desc" : [
          "(center",
          "north",
          "south",
          "east",
          "west)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "resizeEl",
        "type" : "String/HTMLElement/Element",
        "desc" : "An element to resize if {@link #fitToFrame} is true (instead of this panel's element)",
        "memberOf" : ""
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "The title for this panel",
        "memberOf" : ""
      },
      {
        "name" : "toolbar",
        "type" : "Toolbar",
        "desc" : "A toolbar for this panel",
        "memberOf" : ""
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "Calls {@link #setUrl} with this value",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this panel is activated.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this panel is activated.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when this tab is created",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires when this panel is resized if fitToFrame is true.",
        "sig" : "function (_self, width, height)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "scroll",
        "type" : "function",
        "desc" : "Fires when this content is scrolled",
        "sig" : "function (_self, scrollEvent)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this panel",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Adds a xtype elements to the panel - currently only supports Forms, View, JsonView.\n<pre><code>\n\nlayout.addxtype({\n       xtype : 'Form',\n       items: [ .... ]\n   }\n);\n\n</code></pre>",
        "sig" : "(cfg)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns this panel's element - used by regiosn to add.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns this panel's id",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTitle",
        "type" : "function",
        "desc" : "Returns this panel's title",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getToolbar",
        "type" : "function",
        "desc" : "Returns the toolbar for this Panel if one was configured.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getUpdateManager",
        "type" : "function",
        "desc" : "Get the {@link Roo.UpdateManager} for this panel. Enables you to perform Ajax updates.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isClosable",
        "type" : "function",
        "desc" : "Returns true is this panel was configured to be closable",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Loads this content panel immediately with content from XHR. Note: to delay loading until the panel is activated, use {@link #setUrl}.\nDoes not work with IFRAME contents",
        "sig" : "(url, params, callback, discardUrl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "refresh",
        "type" : "function",
        "desc" : "Force a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the {@link #setUrl} method has not been called.\n  This does not activate the panel, just updates its content.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setContent",
        "type" : "function",
        "desc" : "Updates this panel's element (not for iframe)",
        "sig" : "(content, loadScripts)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setTitle",
        "type" : "function",
        "desc" : "Set this panel's title",
        "sig" : "(title)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setUrl",
        "type" : "function",
        "desc" : "Set a URL to be used to load the content for this panel. When this panel is activated, the content will be loaded from that URL.",
        "sig" : "(url, params, loadOnce)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.panel.Grid" : {
    "props" : [
      {
        "name" : "adjustments",
        "type" : "Array",
        "desc" : "Values to <b>add</b> to the width/height when doing a {@link #fitToFrame} (default is [0, 0])",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "autoCreate",
        "type" : "Boolean/Object",
        "desc" : "True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "autoScroll",
        "type" : "Boolean",
        "desc" : "True to scroll overflow in this panel (use with {@link #fitToFrame})",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "background",
        "type" : "Boolean",
        "desc" : "True if the panel should not be activated when it is added (defaults to false)",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "badges",
        "type" : "Boolean",
        "desc" : "render the badges",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "closable",
        "type" : "Boolean",
        "desc" : "True if the panel can be closed/removed",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "extra classes to use",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "content",
        "type" : "String",
        "desc" : "Raw content to fill content panel with (uses setContent on construction.)",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "fitContainer",
        "type" : "Boolean",
        "desc" : "When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "fitToFrame",
        "type" : "Boolean",
        "desc" : "True for this panel to adjust its size to fit when the region resizes  (defaults to false)",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "grid",
        "type" : "Roo.bootstrap.Table",
        "desc" : "The grid for this panel",
        "memberOf" : ""
      },
      {
        "name" : "iframe",
        "type" : "Boolean",
        "desc" : "contents are an iframe - makes showing remote sources/CSS feasible..",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadOnce",
        "type" : "Boolean",
        "desc" : "When used with {@link #url}, calls {@link #setUrl} with this value",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "params",
        "type" : "String/Object",
        "desc" : "When used with {@link #url}, calls {@link #setUrl} with this value",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "region",
        "type" : "String",
        "desc" : [
          "(center",
          "north",
          "south",
          "east",
          "west)"
        ],
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "resizeEl",
        "type" : "String/HTMLElement/Element",
        "desc" : "An element to resize if {@link #fitToFrame} is true (instead of this panel's element)",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "The title for this panel",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "toolbar",
        "type" : "Toolbar",
        "desc" : "A toolbar for this panel",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "Calls {@link #setUrl} with this value",
        "memberOf" : "Roo.bootstrap.panel.Content"
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this panel is activated.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this panel is activated.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when this tab is created",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires when this panel is resized if fitToFrame is true.",
        "sig" : "function (_self, width, height)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "scroll",
        "type" : "function",
        "desc" : "Fires when this content is scrolled",
        "sig" : "function (_self, scrollEvent)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.panel.Content"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this panel",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Adds a xtype elements to the panel - currently only supports Forms, View, JsonView.\n<pre><code>\n\nlayout.addxtype({\n       xtype : 'Form',\n       items: [ .... ]\n   }\n);\n\n</code></pre>",
        "sig" : "(cfg)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns this panel's element - used by regiosn to add.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "getGrid",
        "type" : "function",
        "desc" : "Returns the grid for this panel",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns this panel's id",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "getTitle",
        "type" : "function",
        "desc" : "Returns this panel's title",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "getToolbar",
        "type" : "function",
        "desc" : "Returns the toolbar for this Panel if one was configured.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "getUpdateManager",
        "type" : "function",
        "desc" : "Get the {@link Roo.UpdateManager} for this panel. Enables you to perform Ajax updates.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isClosable",
        "type" : "function",
        "desc" : "Returns true is this panel was configured to be closable",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Loads this content panel immediately with content from XHR. Note: to delay loading until the panel is activated, use {@link #setUrl}.\nDoes not work with IFRAME contents",
        "sig" : "(url, params, callback, discardUrl)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "refresh",
        "type" : "function",
        "desc" : "Force a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the {@link #setUrl} method has not been called.\n  This does not activate the panel, just updates its content.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setContent",
        "type" : "function",
        "desc" : "Updates this panel's element (not for iframe)",
        "sig" : "(content, loadScripts)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "setTitle",
        "type" : "function",
        "desc" : "Set this panel's title",
        "sig" : "(title)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "setUrl",
        "type" : "function",
        "desc" : "Set a URL to be used to load the content for this panel. When this panel is activated, the content will be loaded from that URL.",
        "sig" : "(url, params, loadOnce)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.panel.Nest" : {
    "props" : [
      {
        "name" : "adjustments",
        "type" : "Array",
        "desc" : "Values to <b>add</b> to the width/height when doing a {@link #fitToFrame} (default is [0, 0])",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "autoCreate",
        "type" : "Boolean/Object",
        "desc" : "True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "autoScroll",
        "type" : "Boolean",
        "desc" : "True to scroll overflow in this panel (use with {@link #fitToFrame})",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "background",
        "type" : "Boolean",
        "desc" : "True if the panel should not be activated when it is added (defaults to false)",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "badges",
        "type" : "Boolean",
        "desc" : "render the badges",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "closable",
        "type" : "Boolean",
        "desc" : "True if the panel can be closed/removed",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "extra classes to use",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "content",
        "type" : "String",
        "desc" : "Raw content to fill content panel with (uses setContent on construction.)",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "fitContainer",
        "type" : "Boolean",
        "desc" : "When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "fitToFrame",
        "type" : "Boolean",
        "desc" : "True for this panel to adjust its size to fit when the region resizes  (defaults to false)",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "iframe",
        "type" : "Boolean",
        "desc" : "contents are an iframe - makes showing remote sources/CSS feasible..",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadOnce",
        "type" : "Boolean",
        "desc" : "When used with {@link #url}, calls {@link #setUrl} with this value",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "params",
        "type" : "String/Object",
        "desc" : "When used with {@link #url}, calls {@link #setUrl} with this value",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "region",
        "type" : "String",
        "desc" : [
          "(center",
          "north",
          "south",
          "east",
          "west)"
        ],
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "resizeEl",
        "type" : "String/HTMLElement/Element",
        "desc" : "An element to resize if {@link #fitToFrame} is true (instead of this panel's element)",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "The title for this panel",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "toolbar",
        "type" : "Toolbar",
        "desc" : "A toolbar for this panel",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "Calls {@link #setUrl} with this value",
        "memberOf" : "Roo.bootstrap.panel.Content"
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this panel is activated.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this panel is activated.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when this tab is created",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires when this panel is resized if fitToFrame is true.",
        "sig" : "function (_self, width, height)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "scroll",
        "type" : "function",
        "desc" : "Fires when this content is scrolled",
        "sig" : "function (_self, scrollEvent)\n{\n\n}",
        "memberOf" : "Roo.bootstrap.panel.Content"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addxtype",
        "type" : "function",
        "desc" : "Adds a xtype elements to the layout of the nested panel\n<pre><code>\n\npanel.addxtype({\n       xtype : 'ContentPanel',\n       region: 'west',\n       items: [ .... ]\n   }\n);\n\npanel.addxtype({\n        xtype : 'NestedLayoutPanel',\n        region: 'west',\n        layout: {\n           center: { },\n           west: { }   \n        },\n        items : [ ... list of content panels or nested layout panels.. ]\n   }\n);\n</code></pre>",
        "sig" : "(cfg)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this panel",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getChildContainer",
        "type" : "function",
        "desc" : "Adds a xtype elements to the panel - currently only supports Forms, View, JsonView.\n<pre><code>\n\nlayout.addxtype({\n       xtype : 'Form',\n       items: [ .... ]\n   }\n);\n\n</code></pre>",
        "sig" : "(cfg)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns this panel's element - used by regiosn to add.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns this panel's id",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "getLayout",
        "type" : "function",
        "desc" : "Returns the nested BorderLayout for this panel",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTitle",
        "type" : "function",
        "desc" : "Returns this panel's title",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "getToolbar",
        "type" : "function",
        "desc" : "Returns the toolbar for this Panel if one was configured.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "getUpdateManager",
        "type" : "function",
        "desc" : "Get the {@link Roo.UpdateManager} for this panel. Enables you to perform Ajax updates.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isClosable",
        "type" : "function",
        "desc" : "Returns true is this panel was configured to be closable",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Loads this content panel immediately with content from XHR. Note: to delay loading until the panel is activated, use {@link #setUrl}.\nDoes not work with IFRAME contents",
        "sig" : "(url, params, callback, discardUrl)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "refresh",
        "type" : "function",
        "desc" : "Force a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the {@link #setUrl} method has not been called.\n  This does not activate the panel, just updates its content.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setContent",
        "type" : "function",
        "desc" : "Updates this panel's element (not for iframe)",
        "sig" : "(content, loadScripts)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "setTitle",
        "type" : "function",
        "desc" : "Set this panel's title",
        "sig" : "(title)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "setUrl",
        "type" : "function",
        "desc" : "Set a URL to be used to load the content for this panel. When this panel is activated, the content will be loaded from that URL.",
        "sig" : "(url, params, loadOnce)",
        "static" : false,
        "memberOf" : "Roo.bootstrap.panel.Content"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.panel.TabItem" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this tab becomes the active tab.",
        "sig" : "function (tabPanel, _self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeclose",
        "type" : "function",
        "desc" : "Fires before this tab is closed. To cancel the close, set cancel to true on e (e.cancel = true).",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "close",
        "type" : "function",
        "desc" : "Fires when this tab is closed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this tab is no longer the active tab.",
        "sig" : "function (tabPanel, _self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Activates this TabPanelItem -- this <b>does</b> deactivate the currently active TabPanelItem.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disables this TabPanelItem -- this does nothing if this is the active TabPanelItem.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enables this TabPanelItem if it was previously disabled.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getText",
        "type" : "function",
        "desc" : "Returns the text for this tab",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getUpdateManager",
        "type" : "function",
        "desc" : "Gets the {@link Roo.UpdateManager} for the body of this TabPanelItem. Enables you to perform Ajax updates.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this TabPanelItem -- if you don't activate another TabPanelItem this could look odd.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isActive",
        "type" : "function",
        "desc" : "Returns true if this tab is the active tab.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isHidden",
        "type" : "function",
        "desc" : "Returns true if this tab is \"hidden\"",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "refresh",
        "type" : "function",
        "desc" : "Forces a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the setUrl method has not been called.\n  This does not activate the panel, just updates its content.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setContent",
        "type" : "function",
        "desc" : "Sets the content for this TabPanelItem.",
        "sig" : "(content, loadScripts)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setHidden",
        "type" : "function",
        "desc" : "Show or hide the tab",
        "sig" : "(hidden)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setText",
        "type" : "function",
        "desc" : "Sets the text for the tab (Note: this also sets the tooltip text)",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setTooltip",
        "type" : "function",
        "desc" : "Set the tooltip for the tab.",
        "sig" : "(tooltip)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setUrl",
        "type" : "function",
        "desc" : "Set a URL to be used to load the content for this TabPanelItem.",
        "sig" : "(url, params, loadOnce)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Shows this TabPanelItem -- this <b>does not</b> deactivate the currently active TabPanelItem.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.bootstrap.panel.Tabs" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "beforetabchange",
        "type" : "function",
        "desc" : "Fires before the active tab changes, set cancel to true on the \"e\" parameter to cancel the change",
        "sig" : "function (_self, e, tab)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "tabchange",
        "type" : "function",
        "desc" : "Fires when the active tab changes",
        "sig" : "function (_self, activePanel)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Activates a {@link Roo.TabPanelItem}. The currently active one will be deactivated.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addTab",
        "type" : "function",
        "desc" : "Creates a new {@link Roo.TabPanelItem} by looking for an existing element with the provided id -- if it's not found it creates one.",
        "sig" : "(id, text, content, closable)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addTabItem",
        "type" : "function",
        "desc" : "Adds an existing {@link Roo.TabPanelItem}.",
        "sig" : "(item)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "autoSizeTabs",
        "type" : "function",
        "desc" : "Manual call to resize the tabs (if {@link #resizeTabs} is false this does nothing)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "beginUpdate",
        "type" : "function",
        "desc" : "Disables tab resizing while tabs are being added (if {@link #resizeTabs} is false this does nothing)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this TabPanel",
        "sig" : "(removeEl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "disableTab",
        "type" : "function",
        "desc" : "Disables a {@link Roo.TabPanelItem}. It cannot be the active tab, if it is this call is ignored.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enableTab",
        "type" : "function",
        "desc" : "Enables a {@link Roo.TabPanelItem} that is disabled.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "endUpdate",
        "type" : "function",
        "desc" : "Stops an update and resizes the tabs (if {@link #resizeTabs} is false this does nothing)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getActiveTab",
        "type" : "function",
        "desc" : "Gets the active {@link Roo.TabPanelItem}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getCount",
        "type" : "function",
        "desc" : "Returns the number of tabs in this TabPanel.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTab",
        "type" : "function",
        "desc" : "Returns the {@link Roo.TabPanelItem} with the specified id/index",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hideTab",
        "type" : "function",
        "desc" : "Hides the {@link Roo.TabPanelItem} with the specified id/index",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeTab",
        "type" : "function",
        "desc" : "Removes a {@link Roo.TabPanelItem}.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setTabWidth",
        "type" : "function",
        "desc" : "Resizes all the tabs to the passed width",
        "sig" : "(The)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "syncHeight",
        "type" : "function",
        "desc" : "Updates the tab body element to fit the height of the container element\nfor overflow scrolling",
        "sig" : "(targetHeight)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unhideTab",
        "type" : "function",
        "desc" : "\"Unhides\" the {@link Roo.TabPanelItem} with the specified id/index.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.data" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.data.ArrayReader" : {
    "props" : [
      {
        "name" : "fields",
        "type" : "Array",
        "desc" : "Array of field definition objects",
        "memberOf" : ""
      },
      {
        "name" : "id",
        "type" : "String",
        "desc" : "Name of the property within a row object that contains a record identifier value.\nas specified to {@link Roo.data.Record#create},\nor an {@link Roo.data.Record} object\n\n\ncreated using {@link Roo.data.Record#create}.",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "newRow",
        "type" : "function",
        "desc" : "Create an empty record",
        "sig" : "(data)",
        "static" : false,
        "memberOf" : "Roo.data.DataReader"
      },
      {
        "name" : "readRecords",
        "type" : "function",
        "desc" : "Create a data block containing Roo.data.Records from an XML document.",
        "sig" : "(o)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.data.Connection" : {
    "props" : [
      {
        "name" : "autoAbort",
        "type" : "Boolean",
        "desc" : "(Optional) Whether this request should abort any pending requests. (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "defaultHeaders",
        "type" : "Object",
        "desc" : "(Optional) An object containing request headers which are added\n to each request made by this object. (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "disableCaching",
        "type" : "Boolean",
        "desc" : "(Optional) True to add a unique cache-buster param to GET requests. (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "extraParams",
        "type" : "Object",
        "desc" : "(Optional) An object containing properties which are used as\nextra parameters to each request made by this object. (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "method",
        "type" : "String",
        "desc" : "(Optional) The default HTTP method to be used for requests. (defaults to undefined; if not set but parms are present will use POST, otherwise GET)",
        "memberOf" : ""
      },
      {
        "name" : "timeout",
        "type" : "Number",
        "desc" : "(Optional) The timeout in milliseconds to be used for requests. (defaults to 30000)",
        "memberOf" : ""
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "(Optional) The default URL to be used for requests to the server. (defaults to undefined)",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforerequest",
        "type" : "function",
        "desc" : "Fires before a network request is made to retrieve a data object.",
        "sig" : "function (conn, options)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "requestcomplete",
        "type" : "function",
        "desc" : "Fires if the request was successfully completed.",
        "sig" : "function (conn, response, options)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "requestexception",
        "type" : "function",
        "desc" : "Fires if an error HTTP status was returned from the server.\nSee {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html} for details of HTTP status codes.",
        "sig" : "function (conn, response, options)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "abort",
        "type" : "function",
        "desc" : "Aborts any outstanding request.",
        "sig" : "(transactionId)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isLoading",
        "type" : "function",
        "desc" : "Determine whether this object has a request outstanding.",
        "sig" : "(transactionId)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "request",
        "type" : "function",
        "desc" : "Sends an HTTP request to a remote server.",
        "sig" : "(options)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.data.DataProxy" : {
    "props" : [],
    "events" : [
      {
        "name" : "beforeload",
        "type" : "function",
        "desc" : "Fires before a network request is made to retrieve a data object.",
        "sig" : "function (This, params)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Fires before the load method's callback is called.",
        "sig" : "function (This, o, arg)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "loadexception",
        "type" : "function",
        "desc" : "Fires if an Exception occurs during data retrieval.",
        "sig" : "function (This, o, arg, e)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : []
  },
  "Roo.data.DataReader" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "newRow",
        "type" : "function",
        "desc" : "Create an empty record",
        "sig" : "(data)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.data.HttpProxy" : {
    "props" : [
      {
        "name" : "autoAbort",
        "type" : "Boolean",
        "desc" : "(Optional) Whether this request should abort any pending requests. (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "defaultHeaders",
        "type" : "Object",
        "desc" : "(Optional) An object containing request headers which are added\n to each request made by this object. (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "disableCaching",
        "type" : "Boolean",
        "desc" : "(Optional) True to add a unique cache-buster param to GET requests. (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "extraParams",
        "type" : "Object",
        "desc" : "(Optional) An object containing properties which are used as\nextra parameters to each request made by this object. (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "method",
        "type" : "String",
        "desc" : "(Optional) The default HTTP method to be used for requests. (defaults to undefined; if not set but parms are present will use POST, otherwise GET)",
        "memberOf" : ""
      },
      {
        "name" : "timeout",
        "type" : "Number",
        "desc" : "(Optional) The timeout in milliseconds to be used for requests. (defaults to 30000)",
        "memberOf" : ""
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "(Optional) The default URL to be used for requests to the server. (defaults to undefined)",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforeload",
        "type" : "function",
        "desc" : "Fires before a network request is made to retrieve a data object.",
        "sig" : "function (This, params)\n{\n\n}",
        "memberOf" : "Roo.data.DataProxy"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Fires before the load method's callback is called.",
        "sig" : "function (This, o, arg)\n{\n\n}",
        "memberOf" : "Roo.data.DataProxy"
      },
      {
        "name" : "loadexception",
        "type" : "function",
        "desc" : "Fires if an Exception occurs during data retrieval.",
        "sig" : "function (This, o, arg, e)\n{\n\n}",
        "memberOf" : "Roo.data.DataProxy"
      }
    ],
    "methods" : [
      {
        "name" : "getConnection",
        "type" : "function",
        "desc" : "Return the {@link Roo.data.Connection} object being used by this Proxy.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Load data from the configured {@link Roo.data.Connection}, read the data object into\na block of Roo.data.Records using the passed {@link Roo.data.DataReader} implementation, and\nprocess that block using the passed callback.",
        "sig" : "(params, reader, callback, scope, arg)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.data.JsonReader" : {
    "props" : [
      {
        "name" : "fields",
        "type" : "Array",
        "desc" : "Array of field definition objects",
        "memberOf" : ""
      },
      {
        "name" : "id",
        "type" : "String",
        "desc" : "Name of the property within a row object that contains a record identifier value.",
        "memberOf" : ""
      },
      {
        "name" : "root",
        "type" : "String",
        "desc" : "name of the property which contains the Array of row objects.",
        "memberOf" : ""
      },
      {
        "name" : "successProperty",
        "type" : "String",
        "desc" : "Name of the property from which to retrieve the success attribute used by forms.",
        "memberOf" : ""
      },
      {
        "name" : "totalProperty",
        "type" : "String",
        "desc" : "Name of the property from which to retrieve the total number of records\nin the dataset. This is only needed if the whole dataset is not passed in one go, but is being\npaged from the remote server.",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "newRow",
        "type" : "function",
        "desc" : "Create an empty record",
        "sig" : "(data)",
        "static" : false,
        "memberOf" : "Roo.data.DataReader"
      },
      {
        "name" : "read",
        "type" : "function",
        "desc" : "This method is only used by a DataProxy which has retrieved data from a remote server.",
        "sig" : "(response)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "readRecords",
        "type" : "function",
        "desc" : "Create a data block containing Roo.data.Records from an XML document.",
        "sig" : "(o)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.data.JsonStore" : {
    "props" : [
      {
        "name" : "baseParams",
        "type" : "Object",
        "desc" : "An object containing properties which are to be sent as parameters\non any HTTP request",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "data",
        "type" : "Array",
        "desc" : "Inline data to be loaded when the store is initialized.",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "fields",
        "type" : "Array",
        "desc" : "An array of field definition objects, or field name strings.",
        "memberOf" : ""
      },
      {
        "name" : "isLocal",
        "type" : "boolean",
        "desc" : "flag if data is locally available (and can be always looked up\nwithout a remote query - used by combo/forms at present.",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "multiSort",
        "type" : "Boolean",
        "desc" : "enable multi column sorting (sort is based on the order of columns, remote only at present)",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "proxy",
        "type" : "Roo.data.DataProxy",
        "desc" : "The Proxy object which provides access to a data object.",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "pruneModifiedRecords",
        "type" : "boolean",
        "desc" : "True to clear all modified record information each time the store is\nloaded or when a record is removed. (defaults to false).",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "reader",
        "type" : "Roo.data.Reader",
        "desc" : "The Reader object which processes the data object and returns\nan Array of Roo.data.record objects which are cached keyed by their <em>id</em> property.",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "remoteSort",
        "type" : "boolean",
        "desc" : "True if sorting is to be handled by requesting the Proxy to provide a refreshed\nversion of the data object in sorted order, as opposed to sorting the Record cache in place (defaults to false).",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "sortInfo",
        "type" : "Object",
        "desc" : "A config object in the format: {field: \"fieldName\", direction: \"ASC|DESC\"}",
        "memberOf" : "Roo.data.Store"
      }
    ],
    "events" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Fires when Records have been added to the Store",
        "sig" : "function (_self, records, index)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "beforeload",
        "type" : "function",
        "desc" : "Fires before a request is made for a new data object.  If the beforeload handler returns false\nthe load action will be canceled.",
        "sig" : "function (_self, options)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "beforeloadadd",
        "type" : "function",
        "desc" : "Fires after a new set of Records has been loaded.",
        "sig" : "function (_self, records, options)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "clear",
        "type" : "function",
        "desc" : "Fires when the data cache has been cleared.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "datachanged",
        "type" : "function",
        "desc" : "Fires when the data cache has changed, and a widget which is using this Store\nas a Record cache should refresh its view.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Fires after a new set of Records has been loaded, before they are added to the store.",
        "sig" : "function (_self, records, options)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "loadexception",
        "type" : "function",
        "desc" : "Fires if an exception occurs in the Proxy during loading.\nCalled with the signature of the Proxy's \"loadexception\" event.\nIf you return Json { data: [] , success: false, .... } then this will be thrown with the following args",
        "sig" : "function (, return, load, jsonData)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "metachange",
        "type" : "function",
        "desc" : "Fires when this store's reader provides new metadata (fields). This is currently only support for JsonReaders.",
        "sig" : "function (_self, meta)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Fires when a Record has been removed from the Store",
        "sig" : "function (_self, record, index)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "update",
        "type" : "function",
        "desc" : "Fires when a Record has been updated",
        "sig" : "function (_self, record, operation)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      }
    ],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Add Records to the Store and fires the add event.",
        "sig" : "(records)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearFilter",
        "type" : "function",
        "desc" : "Revert to a view of the Record cache with no filtering applied.",
        "sig" : "(suppressEvent)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "collect",
        "type" : "function",
        "desc" : "Collects unique values for a particular dataIndex from this store.",
        "sig" : "(dataIndex, allowNull, bypassFilter)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "commitChanges",
        "type" : "function",
        "desc" : "Commit all Records with outstanding changes. To handle updates for changes, subscribe to the\nStore's \"update\" event, and perform updating when the third parameter is Roo.data.Record.COMMIT.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "each",
        "type" : "function",
        "desc" : "Calls the specified function for each of the Records in the cache.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "filter",
        "type" : "function",
        "desc" : "Filter the records by a specified property.",
        "sig" : "(field, value, anyMatch)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "filterBy",
        "type" : "function",
        "desc" : "Filter by a function. The specified function will be called with each\nrecord in this data source. If the function returns true the record is included,\notherwise it is filtered.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getAt",
        "type" : "function",
        "desc" : "Get the Record at the specified index.",
        "sig" : "(index)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "getById",
        "type" : "function",
        "desc" : "Get the Record with the specified id.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "getCount",
        "type" : "function",
        "desc" : "Gets the number of cached records.\n<p>\n<em>If using paging, this may not be the total size of the dataset. If the data object\nused by the Reader contains the dataset size, then the getTotalCount() function returns\nthe data set size</em>",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "getModifiedRecords",
        "type" : "function",
        "desc" : "Gets all records modified since the last commit.  Modified records are persisted across load operations\n(e.g., during paging).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "getRange",
        "type" : "function",
        "desc" : "Returns a range of Records between specified indices.",
        "sig" : "(startIndex, endIndex)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "getSortState",
        "type" : "function",
        "desc" : "Returns the sort state of the Store as an object with two properties:\n<pre><code>\n field {String} The name of the field by which the Records are sorted\n direction {String} The sort order, \"ASC\" or \"DESC\"\n</code></pre>",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "getTotalCount",
        "type" : "function",
        "desc" : "Gets the total number of records in the dataset as returned by the server.\n<p>\n<em>If using paging, for this to be accurate, the data object used by the Reader must contain\nthe dataset size</em>",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "indexOf",
        "type" : "function",
        "desc" : "Get the index within the cache of the passed Record.",
        "sig" : "(record)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "indexOfId",
        "type" : "function",
        "desc" : "Get the index within the cache of the Record with the passed id.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "insert",
        "type" : "function",
        "desc" : "Inserts Records to the Store at the given index and fires the add event.",
        "sig" : "(index, records)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Loads the Record cache from the configured Proxy using the configured Reader.\n<p>\nIf using remote paging, then the first load call must specify the <em>start</em>\nand <em>limit</em> properties in the options.params property to establish the initial\nposition within the dataset, and the number of Records to cache on each read from the Proxy.\n<p>\n<strong>It is important to note that for remote data sources, loading is asynchronous,\nand this call will return before the new data has been loaded. Perform any post-processing\nin a callback function, or in a \"load\" event handler.</strong>\n<p>",
        "sig" : "(options)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "loadData",
        "type" : "function",
        "desc" : "Loads data from a passed data block. A Reader which understands the format of the data\nmust have been configured in the constructor.",
        "sig" : "(data, append)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "loadDataFromChildren",
        "type" : "function",
        "desc" : "using 'cn' the nested child reader read the child array into it's child stores.",
        "sig" : "(rec)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "query",
        "type" : "function",
        "desc" : "Query the records by a specified property.",
        "sig" : "(field, value, anyMatch)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "queryBy",
        "type" : "function",
        "desc" : "Query by a function. The specified function will be called with each\nrecord in this data source. If the function returns true the record is included\nin the results.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "rejectChanges",
        "type" : "function",
        "desc" : "Cancel outstanding changes on all changed records.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "reload",
        "type" : "function",
        "desc" : "Reloads the Record cache from the configured Proxy using the configured Reader and\nthe options from the last load operation performed.",
        "sig" : "(options)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Remove a Record from the Store and fires the remove event.",
        "sig" : "(record)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "removeAll",
        "type" : "function",
        "desc" : "Remove all Records from the Store and fires the clear event.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setDefaultSort",
        "type" : "function",
        "desc" : "Sets the default sort column and order to be used by the next load operation.",
        "sig" : "(fieldName, dir)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "sort",
        "type" : "function",
        "desc" : "Sort the Records.\nIf remote sorting is used, the sort is performed on the server, and the cache is\nreloaded. If local sorting is used, the cache is sorted internally.",
        "sig" : "(fieldName, dir)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "sum",
        "type" : "function",
        "desc" : "Sums the value of <i>property</i> for each record between start and end and returns the result.",
        "sig" : "(property, start, end)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.data.MemoryProxy" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Load data from the requested source (in this case an in-memory\ndata object passed to the constructor), read the data object into\na block of Roo.data.Records using the passed Roo.data.DataReader implementation, and\nprocess that block using the passed callback.",
        "sig" : "(params, reader, callback, scope, arg)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.data.Node" : {
    "props" : [
      {
        "name" : "id",
        "type" : "String",
        "desc" : "The id for this node. If one is not specified, one is generated.",
        "memberOf" : ""
      },
      {
        "name" : "leaf",
        "type" : "Boolean",
        "desc" : "true if this node is a leaf and does not have children",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "append",
        "type" : "function",
        "desc" : "Fires when a new child node is appended",
        "sig" : "function (tree, _self, node, index)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeappend",
        "type" : "function",
        "desc" : "Fires before a new child is appended, return false to cancel the append.",
        "sig" : "function (tree, _self, node)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeinsert",
        "type" : "function",
        "desc" : "Fires before a new child is inserted, return false to cancel the insert.",
        "sig" : "function (tree, _self, node, refNode)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforemove",
        "type" : "function",
        "desc" : "Fires before this node is moved to a new location in the tree. Return false to cancel the move.",
        "sig" : "function (tree, _self, oldParent, newParent, index)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeremove",
        "type" : "function",
        "desc" : "Fires before a child is removed, return false to cancel the remove.",
        "sig" : "function (tree, _self, node)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "insert",
        "type" : "function",
        "desc" : "Fires when a new child node is inserted.",
        "sig" : "function (tree, _self, node, refNode)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires when this node is moved to a new location in the tree",
        "sig" : "function (tree, _self, oldParent, newParent, index)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Fires when a child node is removed",
        "sig" : "function (tree, _self, node)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "appendChild",
        "type" : "function",
        "desc" : "Insert node(s) as the last child node of this node.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "bubble",
        "type" : "function",
        "desc" : "Bubbles up the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe bubble is stopped.",
        "sig" : "(fn, scope, args)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "cascade",
        "type" : "function",
        "desc" : "Cascades down the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe cascade is stopped on that branch.",
        "sig" : "(fn, scope, args)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "contains",
        "type" : "function",
        "desc" : "Returns true if this node is an ancestor (at any point) of the passed node.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "eachChild",
        "type" : "function",
        "desc" : "Interates the child nodes of this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe iteration stops.",
        "sig" : "(fn, scope, args)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "findChild",
        "type" : "function",
        "desc" : "Finds the first child that has the attribute with the specified value.",
        "sig" : "(attribute, value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "findChildBy",
        "type" : "function",
        "desc" : "Finds the first child by a custom function. The child matches if the function passed\nreturns true.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getDepth",
        "type" : "function",
        "desc" : "Returns depth of this node (the root node has a depth of 0)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getOwnerTree",
        "type" : "function",
        "desc" : "Returns the tree this node is in.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getPath",
        "type" : "function",
        "desc" : "Returns the path for this node. The path can be used to expand or select this node programmatically.",
        "sig" : "(attr)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "indexOf",
        "type" : "function",
        "desc" : "Returns the index of a child node",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "insertBefore",
        "type" : "function",
        "desc" : "Inserts the first node before the second node in this nodes childNodes collection.",
        "sig" : "(node, refNode)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isAncestor",
        "type" : "function",
        "desc" : "Returns true if the passed node is an ancestor (at any point) of this node.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isFirst",
        "type" : "function",
        "desc" : "Returns true if this node is the first child of its parent",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isLast",
        "type" : "function",
        "desc" : "Returns true if this node is the last child of its parent",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isLeaf",
        "type" : "function",
        "desc" : "Returns true if this node is a leaf",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "item",
        "type" : "function",
        "desc" : "Returns the child node at the specified index.",
        "sig" : "(index)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeChild",
        "type" : "function",
        "desc" : "Removes a child node from this node.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "replaceChild",
        "type" : "function",
        "desc" : "Replaces one child node in this node with another.",
        "sig" : "(newChild, oldChild)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "sort",
        "type" : "function",
        "desc" : "Sorts this nodes children using the supplied sort function",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.data.Record" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "commit",
        "type" : "function",
        "desc" : "Usually called by the {@link Roo.data.Store} which owns the Record.\nCommits all changes made to the Record since either creation, or the last commit operation.\n<p>\nDevelopers should subscribe to the {@link Roo.data.Store#update} event to have their code notified\nof commit operations.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "copy",
        "type" : "function",
        "desc" : "Creates a copy of this record.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "create",
        "type" : "function",
        "desc" : "Generate a constructor for a specific record layout.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "get",
        "type" : "function",
        "desc" : "Get the value of the named field.",
        "sig" : "(name)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "reject",
        "type" : "function",
        "desc" : "Usually called by the {@link Roo.data.Store} which owns the Record.\nRejects all changes made to the Record since either creation, or the last commit operation.\nModified fields are reverted to their original values.\n<p>\nDevelopers should subscribe to the {@link Roo.data.Store#update} event to have their code notified\nof reject operations.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "set",
        "type" : "function",
        "desc" : "Set the named field to the specified value.",
        "sig" : "(name, value)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.data.ScriptTagProxy" : {
    "props" : [
      {
        "name" : "callbackParam",
        "type" : "String",
        "desc" : "(Optional) The name of the parameter to pass to the server which tells\nthe server the name of the callback function set up by the load call to process the returned data object.\nDefaults to \"callback\".<p>The server-side processing must read this parameter value, and generate\njavascript output which calls this named function passing the data object as its only parameter.",
        "memberOf" : ""
      },
      {
        "name" : "nocache",
        "type" : "Boolean",
        "desc" : "(Optional) Defaults to true. Disable cacheing by adding a unique parameter\nname to the request.",
        "memberOf" : ""
      },
      {
        "name" : "timeout",
        "type" : "Number",
        "desc" : "(Optional) The number of milliseconds to wait for a response. Defaults to 30 seconds.",
        "memberOf" : ""
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "The URL from which to request the data object.",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "abort",
        "type" : "function",
        "desc" : "Abort the current server request.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Load data from the configured URL, read the data object into\na block of Roo.data.Records using the passed Roo.data.DataReader implementation, and\nprocess that block using the passed callback.",
        "sig" : "(params, reader, callback, scope, arg)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.data.SimpleStore" : {
    "props" : [
      {
        "name" : "an",
        "type" : "Object",
        "desc" : "existing reader (eg. copied from another store)",
        "memberOf" : ""
      },
      {
        "name" : "baseParams",
        "type" : "Object",
        "desc" : "An object containing properties which are to be sent as parameters\non any HTTP request",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "data",
        "type" : "Array",
        "desc" : "The multi-dimensional array of data",
        "memberOf" : ""
      },
      {
        "name" : "fields",
        "type" : "Array",
        "desc" : "An array of field definition objects, or field name strings.",
        "memberOf" : ""
      },
      {
        "name" : "id",
        "type" : "Number",
        "desc" : "The array index of the record id. Leave blank to auto generate ids.",
        "memberOf" : ""
      },
      {
        "name" : "isLocal",
        "type" : "boolean",
        "desc" : "flag if data is locally available (and can be always looked up\nwithout a remote query - used by combo/forms at present.",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "multiSort",
        "type" : "Boolean",
        "desc" : "enable multi column sorting (sort is based on the order of columns, remote only at present)",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "proxy",
        "type" : "Roo.data.DataProxy",
        "desc" : "The Proxy object which provides access to a data object.",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "pruneModifiedRecords",
        "type" : "boolean",
        "desc" : "True to clear all modified record information each time the store is\nloaded or when a record is removed. (defaults to false).",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "reader",
        "type" : "Roo.data.Reader",
        "desc" : "The Reader object which processes the data object and returns\nan Array of Roo.data.record objects which are cached keyed by their <em>id</em> property.",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "remoteSort",
        "type" : "boolean",
        "desc" : "True if sorting is to be handled by requesting the Proxy to provide a refreshed\nversion of the data object in sorted order, as opposed to sorting the Record cache in place (defaults to false).",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "sortInfo",
        "type" : "Object",
        "desc" : "A config object in the format: {field: \"fieldName\", direction: \"ASC|DESC\"}",
        "memberOf" : "Roo.data.Store"
      }
    ],
    "events" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Fires when Records have been added to the Store",
        "sig" : "function (_self, records, index)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "beforeload",
        "type" : "function",
        "desc" : "Fires before a request is made for a new data object.  If the beforeload handler returns false\nthe load action will be canceled.",
        "sig" : "function (_self, options)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "beforeloadadd",
        "type" : "function",
        "desc" : "Fires after a new set of Records has been loaded.",
        "sig" : "function (_self, records, options)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "clear",
        "type" : "function",
        "desc" : "Fires when the data cache has been cleared.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "datachanged",
        "type" : "function",
        "desc" : "Fires when the data cache has changed, and a widget which is using this Store\nas a Record cache should refresh its view.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Fires after a new set of Records has been loaded, before they are added to the store.",
        "sig" : "function (_self, records, options)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "loadexception",
        "type" : "function",
        "desc" : "Fires if an exception occurs in the Proxy during loading.\nCalled with the signature of the Proxy's \"loadexception\" event.\nIf you return Json { data: [] , success: false, .... } then this will be thrown with the following args",
        "sig" : "function (, return, load, jsonData)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "metachange",
        "type" : "function",
        "desc" : "Fires when this store's reader provides new metadata (fields). This is currently only support for JsonReaders.",
        "sig" : "function (_self, meta)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Fires when a Record has been removed from the Store",
        "sig" : "function (_self, record, index)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "update",
        "type" : "function",
        "desc" : "Fires when a Record has been updated",
        "sig" : "function (_self, record, operation)\n{\n\n}",
        "memberOf" : "Roo.data.Store"
      }
    ],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Add Records to the Store and fires the add event.",
        "sig" : "(records)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearFilter",
        "type" : "function",
        "desc" : "Revert to a view of the Record cache with no filtering applied.",
        "sig" : "(suppressEvent)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "collect",
        "type" : "function",
        "desc" : "Collects unique values for a particular dataIndex from this store.",
        "sig" : "(dataIndex, allowNull, bypassFilter)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "commitChanges",
        "type" : "function",
        "desc" : "Commit all Records with outstanding changes. To handle updates for changes, subscribe to the\nStore's \"update\" event, and perform updating when the third parameter is Roo.data.Record.COMMIT.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "each",
        "type" : "function",
        "desc" : "Calls the specified function for each of the Records in the cache.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "filter",
        "type" : "function",
        "desc" : "Filter the records by a specified property.",
        "sig" : "(field, value, anyMatch)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "filterBy",
        "type" : "function",
        "desc" : "Filter by a function. The specified function will be called with each\nrecord in this data source. If the function returns true the record is included,\notherwise it is filtered.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getAt",
        "type" : "function",
        "desc" : "Get the Record at the specified index.",
        "sig" : "(index)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "getById",
        "type" : "function",
        "desc" : "Get the Record with the specified id.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "getCount",
        "type" : "function",
        "desc" : "Gets the number of cached records.\n<p>\n<em>If using paging, this may not be the total size of the dataset. If the data object\nused by the Reader contains the dataset size, then the getTotalCount() function returns\nthe data set size</em>",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "getModifiedRecords",
        "type" : "function",
        "desc" : "Gets all records modified since the last commit.  Modified records are persisted across load operations\n(e.g., during paging).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "getRange",
        "type" : "function",
        "desc" : "Returns a range of Records between specified indices.",
        "sig" : "(startIndex, endIndex)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "getSortState",
        "type" : "function",
        "desc" : "Returns the sort state of the Store as an object with two properties:\n<pre><code>\n field {String} The name of the field by which the Records are sorted\n direction {String} The sort order, \"ASC\" or \"DESC\"\n</code></pre>",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "getTotalCount",
        "type" : "function",
        "desc" : "Gets the total number of records in the dataset as returned by the server.\n<p>\n<em>If using paging, for this to be accurate, the data object used by the Reader must contain\nthe dataset size</em>",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "indexOf",
        "type" : "function",
        "desc" : "Get the index within the cache of the passed Record.",
        "sig" : "(record)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "indexOfId",
        "type" : "function",
        "desc" : "Get the index within the cache of the Record with the passed id.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "insert",
        "type" : "function",
        "desc" : "Inserts Records to the Store at the given index and fires the add event.",
        "sig" : "(index, records)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Loads the Record cache from the configured Proxy using the configured Reader.\n<p>\nIf using remote paging, then the first load call must specify the <em>start</em>\nand <em>limit</em> properties in the options.params property to establish the initial\nposition within the dataset, and the number of Records to cache on each read from the Proxy.\n<p>\n<strong>It is important to note that for remote data sources, loading is asynchronous,\nand this call will return before the new data has been loaded. Perform any post-processing\nin a callback function, or in a \"load\" event handler.</strong>\n<p>",
        "sig" : "(options)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "loadData",
        "type" : "function",
        "desc" : "Loads data from a passed data block. A Reader which understands the format of the data\nmust have been configured in the constructor.",
        "sig" : "(data, append)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "loadDataFromChildren",
        "type" : "function",
        "desc" : "using 'cn' the nested child reader read the child array into it's child stores.",
        "sig" : "(rec)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "query",
        "type" : "function",
        "desc" : "Query the records by a specified property.",
        "sig" : "(field, value, anyMatch)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "queryBy",
        "type" : "function",
        "desc" : "Query by a function. The specified function will be called with each\nrecord in this data source. If the function returns true the record is included\nin the results.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "rejectChanges",
        "type" : "function",
        "desc" : "Cancel outstanding changes on all changed records.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "reload",
        "type" : "function",
        "desc" : "Reloads the Record cache from the configured Proxy using the configured Reader and\nthe options from the last load operation performed.",
        "sig" : "(options)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Remove a Record from the Store and fires the remove event.",
        "sig" : "(record)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "removeAll",
        "type" : "function",
        "desc" : "Remove all Records from the Store and fires the clear event.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setDefaultSort",
        "type" : "function",
        "desc" : "Sets the default sort column and order to be used by the next load operation.",
        "sig" : "(fieldName, dir)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "sort",
        "type" : "function",
        "desc" : "Sort the Records.\nIf remote sorting is used, the sort is performed on the server, and the cache is\nreloaded. If local sorting is used, the cache is sorted internally.",
        "sig" : "(fieldName, dir)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "sum",
        "type" : "function",
        "desc" : "Sums the value of <i>property</i> for each record between start and end and returns the result.",
        "sig" : "(property, start, end)",
        "static" : false,
        "memberOf" : "Roo.data.Store"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.data.SortTypes" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "asDate",
        "type" : "function",
        "desc" : "Date sorting",
        "sig" : "(s)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "asFloat",
        "type" : "function",
        "desc" : "Float sorting",
        "sig" : "(s)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "asInt",
        "type" : "function",
        "desc" : "Integer sorting",
        "sig" : "(s)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "asText",
        "type" : "function",
        "desc" : "Strips all HTML tags to sort on text only",
        "sig" : "(s)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "asUCString",
        "type" : "function",
        "desc" : "Case insensitive string",
        "sig" : "(s)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "asUCText",
        "type" : "function",
        "desc" : "Strips all HTML tags to sort on text only - Case insensitive",
        "sig" : "(s)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "none",
        "type" : "function",
        "desc" : "Default sort that does nothing",
        "sig" : "(s)",
        "static" : true,
        "memberOf" : ""
      }
    ]
  },
  "Roo.data.Store" : {
    "props" : [
      {
        "name" : "baseParams",
        "type" : "Object",
        "desc" : "An object containing properties which are to be sent as parameters\non any HTTP request",
        "memberOf" : ""
      },
      {
        "name" : "data",
        "type" : "Array",
        "desc" : "Inline data to be loaded when the store is initialized.",
        "memberOf" : ""
      },
      {
        "name" : "isLocal",
        "type" : "boolean",
        "desc" : "flag if data is locally available (and can be always looked up\nwithout a remote query - used by combo/forms at present.",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "multiSort",
        "type" : "Boolean",
        "desc" : "enable multi column sorting (sort is based on the order of columns, remote only at present)",
        "memberOf" : ""
      },
      {
        "name" : "proxy",
        "type" : "Roo.data.DataProxy",
        "desc" : "The Proxy object which provides access to a data object.",
        "memberOf" : ""
      },
      {
        "name" : "pruneModifiedRecords",
        "type" : "boolean",
        "desc" : "True to clear all modified record information each time the store is\nloaded or when a record is removed. (defaults to false).",
        "memberOf" : ""
      },
      {
        "name" : "reader",
        "type" : "Roo.data.Reader",
        "desc" : "The Reader object which processes the data object and returns\nan Array of Roo.data.record objects which are cached keyed by their <em>id</em> property.",
        "memberOf" : ""
      },
      {
        "name" : "remoteSort",
        "type" : "boolean",
        "desc" : "True if sorting is to be handled by requesting the Proxy to provide a refreshed\nversion of the data object in sorted order, as opposed to sorting the Record cache in place (defaults to false).",
        "memberOf" : ""
      },
      {
        "name" : "sortInfo",
        "type" : "Object",
        "desc" : "A config object in the format: {field: \"fieldName\", direction: \"ASC|DESC\"}",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Fires when Records have been added to the Store",
        "sig" : "function (_self, records, index)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeload",
        "type" : "function",
        "desc" : "Fires before a request is made for a new data object.  If the beforeload handler returns false\nthe load action will be canceled.",
        "sig" : "function (_self, options)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeloadadd",
        "type" : "function",
        "desc" : "Fires after a new set of Records has been loaded.",
        "sig" : "function (_self, records, options)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "clear",
        "type" : "function",
        "desc" : "Fires when the data cache has been cleared.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "datachanged",
        "type" : "function",
        "desc" : "Fires when the data cache has changed, and a widget which is using this Store\nas a Record cache should refresh its view.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Fires after a new set of Records has been loaded, before they are added to the store.",
        "sig" : "function (_self, records, options)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "loadexception",
        "type" : "function",
        "desc" : "Fires if an exception occurs in the Proxy during loading.\nCalled with the signature of the Proxy's \"loadexception\" event.\nIf you return Json { data: [] , success: false, .... } then this will be thrown with the following args",
        "sig" : "function (, return, load, jsonData)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "metachange",
        "type" : "function",
        "desc" : "Fires when this store's reader provides new metadata (fields). This is currently only support for JsonReaders.",
        "sig" : "function (_self, meta)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Fires when a Record has been removed from the Store",
        "sig" : "function (_self, record, index)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "update",
        "type" : "function",
        "desc" : "Fires when a Record has been updated",
        "sig" : "function (_self, record, operation)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Add Records to the Store and fires the add event.",
        "sig" : "(records)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearFilter",
        "type" : "function",
        "desc" : "Revert to a view of the Record cache with no filtering applied.",
        "sig" : "(suppressEvent)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "collect",
        "type" : "function",
        "desc" : "Collects unique values for a particular dataIndex from this store.",
        "sig" : "(dataIndex, allowNull, bypassFilter)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "commitChanges",
        "type" : "function",
        "desc" : "Commit all Records with outstanding changes. To handle updates for changes, subscribe to the\nStore's \"update\" event, and perform updating when the third parameter is Roo.data.Record.COMMIT.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "each",
        "type" : "function",
        "desc" : "Calls the specified function for each of the Records in the cache.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "filter",
        "type" : "function",
        "desc" : "Filter the records by a specified property.",
        "sig" : "(field, value, anyMatch)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "filterBy",
        "type" : "function",
        "desc" : "Filter by a function. The specified function will be called with each\nrecord in this data source. If the function returns true the record is included,\notherwise it is filtered.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getAt",
        "type" : "function",
        "desc" : "Get the Record at the specified index.",
        "sig" : "(index)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getById",
        "type" : "function",
        "desc" : "Get the Record with the specified id.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getCount",
        "type" : "function",
        "desc" : "Gets the number of cached records.\n<p>\n<em>If using paging, this may not be the total size of the dataset. If the data object\nused by the Reader contains the dataset size, then the getTotalCount() function returns\nthe data set size</em>",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getModifiedRecords",
        "type" : "function",
        "desc" : "Gets all records modified since the last commit.  Modified records are persisted across load operations\n(e.g., during paging).",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getRange",
        "type" : "function",
        "desc" : "Returns a range of Records between specified indices.",
        "sig" : "(startIndex, endIndex)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getSortState",
        "type" : "function",
        "desc" : "Returns the sort state of the Store as an object with two properties:\n<pre><code>\n field {String} The name of the field by which the Records are sorted\n direction {String} The sort order, \"ASC\" or \"DESC\"\n</code></pre>",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTotalCount",
        "type" : "function",
        "desc" : "Gets the total number of records in the dataset as returned by the server.\n<p>\n<em>If using paging, for this to be accurate, the data object used by the Reader must contain\nthe dataset size</em>",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "indexOf",
        "type" : "function",
        "desc" : "Get the index within the cache of the passed Record.",
        "sig" : "(record)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "indexOfId",
        "type" : "function",
        "desc" : "Get the index within the cache of the Record with the passed id.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "insert",
        "type" : "function",
        "desc" : "Inserts Records to the Store at the given index and fires the add event.",
        "sig" : "(index, records)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Loads the Record cache from the configured Proxy using the configured Reader.\n<p>\nIf using remote paging, then the first load call must specify the <em>start</em>\nand <em>limit</em> properties in the options.params property to establish the initial\nposition within the dataset, and the number of Records to cache on each read from the Proxy.\n<p>\n<strong>It is important to note that for remote data sources, loading is asynchronous,\nand this call will return before the new data has been loaded. Perform any post-processing\nin a callback function, or in a \"load\" event handler.</strong>\n<p>",
        "sig" : "(options)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "loadData",
        "type" : "function",
        "desc" : "Loads data from a passed data block. A Reader which understands the format of the data\nmust have been configured in the constructor.",
        "sig" : "(data, append)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "loadDataFromChildren",
        "type" : "function",
        "desc" : "using 'cn' the nested child reader read the child array into it's child stores.",
        "sig" : "(rec)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "query",
        "type" : "function",
        "desc" : "Query the records by a specified property.",
        "sig" : "(field, value, anyMatch)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "queryBy",
        "type" : "function",
        "desc" : "Query by a function. The specified function will be called with each\nrecord in this data source. If the function returns true the record is included\nin the results.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "rejectChanges",
        "type" : "function",
        "desc" : "Cancel outstanding changes on all changed records.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "reload",
        "type" : "function",
        "desc" : "Reloads the Record cache from the configured Proxy using the configured Reader and\nthe options from the last load operation performed.",
        "sig" : "(options)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Remove a Record from the Store and fires the remove event.",
        "sig" : "(record)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeAll",
        "type" : "function",
        "desc" : "Remove all Records from the Store and fires the clear event.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setDefaultSort",
        "type" : "function",
        "desc" : "Sets the default sort column and order to be used by the next load operation.",
        "sig" : "(fieldName, dir)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "sort",
        "type" : "function",
        "desc" : "Sort the Records.\nIf remote sorting is used, the sort is performed on the server, and the cache is\nreloaded. If local sorting is used, the cache is sorted internally.",
        "sig" : "(fieldName, dir)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "sum",
        "type" : "function",
        "desc" : "Sums the value of <i>property</i> for each record between start and end and returns the result.",
        "sig" : "(property, start, end)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.data.Tree" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "append",
        "type" : "function",
        "desc" : "Fires when a new child node is appended to a node in this tree.",
        "sig" : "function (tree, parent, node, index)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeappend",
        "type" : "function",
        "desc" : "Fires before a new child is appended to a node in this tree, return false to cancel the append.",
        "sig" : "function (tree, parent, node)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeinsert",
        "type" : "function",
        "desc" : "Fires before a new child is inserted in a node in this tree, return false to cancel the insert.",
        "sig" : "function (tree, parent, node, refNode)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforemove",
        "type" : "function",
        "desc" : "Fires before a node is moved to a new location in the tree. Return false to cancel the move.",
        "sig" : "function (tree, node, oldParent, newParent, index)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeremove",
        "type" : "function",
        "desc" : "Fires before a child is removed from a node in this tree, return false to cancel the remove.",
        "sig" : "function (tree, parent, node)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "insert",
        "type" : "function",
        "desc" : "Fires when a new child node is inserted in a node in this tree.",
        "sig" : "function (tree, parent, node, refNode)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires when a node is moved to a new location in the tree",
        "sig" : "function (tree, node, oldParent, newParent, index)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Fires when a child node is removed from a node in this tree.",
        "sig" : "function (tree, parent, node)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getNodeById",
        "type" : "function",
        "desc" : "Gets a node in this tree by its id.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getRootNode",
        "type" : "function",
        "desc" : "Returns the root node for this tree.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setRootNode",
        "type" : "function",
        "desc" : "Sets the root node for this tree.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.data.XmlReader" : {
    "props" : [
      {
        "name" : "id",
        "type" : "String",
        "desc" : "The DomQuery path relative from the record element to the element that contains\na record identifier value.",
        "memberOf" : ""
      },
      {
        "name" : "record",
        "type" : "String",
        "desc" : "The DomQuery path to the repeated element which contains record information.",
        "memberOf" : ""
      },
      {
        "name" : "success",
        "type" : "String",
        "desc" : "The DomQuery path to the success attribute used by forms.",
        "memberOf" : ""
      },
      {
        "name" : "totalRecords",
        "type" : "String",
        "desc" : "The DomQuery path from which to retrieve the total number of records\nin the dataset. This is only needed if the whole dataset is not passed in one go, but is being\npaged from the remote server.",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "newRow",
        "type" : "function",
        "desc" : "Create an empty record",
        "sig" : "(data)",
        "static" : false,
        "memberOf" : "Roo.data.DataReader"
      },
      {
        "name" : "read",
        "type" : "function",
        "desc" : "This method is only used by a DataProxy which has retrieved data from a remote server.",
        "sig" : "(response)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "readRecords",
        "type" : "function",
        "desc" : "Create a data block containing Roo.data.Records from an XML document.",
        "sig" : "(doc)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.dd" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.dd.DD" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addInvalidHandleClass",
        "type" : "function",
        "desc" : "Lets you specify a css class of elements that will not initiate a drag",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addInvalidHandleId",
        "type" : "function",
        "desc" : "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addInvalidHandleType",
        "type" : "function",
        "desc" : "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag.",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addToGroup",
        "type" : "function",
        "desc" : "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed.",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "alignElWithMouse",
        "type" : "function",
        "desc" : "Sets the element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is.",
        "sig" : "(el, iPageX, iPageY)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "applyConfig",
        "type" : "function",
        "desc" : "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "autoOffset",
        "type" : "function",
        "desc" : "Sets the pointer offset to the distance between the linked element's top\nleft corner and the location the element was clicked",
        "sig" : "(iPageX, iPageY)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "cachePosition",
        "type" : "function",
        "desc" : "Saves the most recent position so that we can reset the constraints and\ntick marks on-demand.  We need to know this so that we can calculate the\nnumber of pixels the element is offset from its original position.",
        "sig" : "(iPageX, iPageY)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearConstraints",
        "type" : "function",
        "desc" : "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "clearTicks",
        "type" : "function",
        "desc" : "Clears any tick interval defined for this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "endDrag",
        "type" : "function",
        "desc" : "Fired when we are done dragging the object",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getDragEl",
        "type" : "function",
        "desc" : "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns a reference to the linked element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "init",
        "type" : "function",
        "desc" : "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "initTarget",
        "type" : "function",
        "desc" : "Initializes Targeting functionality only... the object does not\nget a mousedown handler.",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isLocked",
        "type" : "function",
        "desc" : "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isTarget",
        "type" : "function",
        "desc" : "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isValidHandleChild",
        "type" : "function",
        "desc" : "Checks the tag exclusion list to see if this click should be ignored",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "lock",
        "type" : "function",
        "desc" : "Lock this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onAvailable",
        "type" : "function",
        "desc" : "Override the onAvailable method to do what is needed after the initial\nposition was determined.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDrag",
        "type" : "function",
        "desc" : "Abstract method called during the onMouseMove event while dragging an\nobject.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on another DragDrop\nobj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragEnter",
        "type" : "function",
        "desc" : "Abstract method called when this element fist begins hovering over\nanother DragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragOut",
        "type" : "function",
        "desc" : "Abstract method called when we are no longer hovering over an element",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragOver",
        "type" : "function",
        "desc" : "Abstract method called when this element is hovering over another\nDragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onInvalidDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on an area with no\ndrop target",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onMouseDown",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mousedown",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onMouseUp",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mouseup",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "padding",
        "type" : "function",
        "desc" : "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeFromGroup",
        "type" : "function",
        "desc" : "Remove's this instance from the supplied interaction group",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleClass",
        "type" : "function",
        "desc" : "Unsets an invalid css class",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleId",
        "type" : "function",
        "desc" : "Unsets an invalid handle id",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleType",
        "type" : "function",
        "desc" : "Unsets an excluded tag name set by addInvalidHandleType",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resetConstraints",
        "type" : "function",
        "desc" : "resetConstraints must be called if you manually reposition a dd element.",
        "sig" : "(maintainOffset)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setDelta",
        "type" : "function",
        "desc" : "Sets the pointer offset.  You can call this directly to force the\noffset to be in a particular location (e.g., pass in 0,0 to set it\nto the center of the object)",
        "sig" : "(iDeltaX, iDeltaY)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDragElId",
        "type" : "function",
        "desc" : "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setDragElPos",
        "type" : "function",
        "desc" : "Sets the drag element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is.",
        "sig" : "(iPageX, iPageY)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setHandleElId",
        "type" : "function",
        "desc" : "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setInitPosition",
        "type" : "function",
        "desc" : "Stores the initial placement of the linked element.",
        "sig" : "(diffX, diffY)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setOuterHandleElId",
        "type" : "function",
        "desc" : "Allows you to set an element outside of the linked element as a drag\nhandle",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setPadding",
        "type" : "function",
        "desc" : "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.",
        "sig" : "(iTop, iRight, iBot, iLeft)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setXConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis.",
        "sig" : "(iLeft, iRight, iTickSize)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setYConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis.",
        "sig" : "(iUp, iDown, iTickSize)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "startDrag",
        "type" : "function",
        "desc" : "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met.",
        "sig" : "(X, Y)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "toString",
        "type" : "function",
        "desc" : "toString method",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unlock",
        "type" : "function",
        "desc" : "Unlock this instace",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "unreg",
        "type" : "function",
        "desc" : "Remove all drag and drop hooks for this element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      }
    ]
  },
  "Roo.dd.DDProxy" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addInvalidHandleClass",
        "type" : "function",
        "desc" : "Lets you specify a css class of elements that will not initiate a drag",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addInvalidHandleId",
        "type" : "function",
        "desc" : "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addInvalidHandleType",
        "type" : "function",
        "desc" : "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag.",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addToGroup",
        "type" : "function",
        "desc" : "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed.",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "alignElWithMouse",
        "type" : "function",
        "desc" : "Sets the element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is.",
        "sig" : "(el, iPageX, iPageY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "applyConfig",
        "type" : "function",
        "desc" : "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "autoOffset",
        "type" : "function",
        "desc" : "Sets the pointer offset to the distance between the linked element's top\nleft corner and the location the element was clicked",
        "sig" : "(iPageX, iPageY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "cachePosition",
        "type" : "function",
        "desc" : "Saves the most recent position so that we can reset the constraints and\ntick marks on-demand.  We need to know this so that we can calculate the\nnumber of pixels the element is offset from its original position.",
        "sig" : "(iPageX, iPageY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearConstraints",
        "type" : "function",
        "desc" : "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "clearTicks",
        "type" : "function",
        "desc" : "Clears any tick interval defined for this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "createFrame",
        "type" : "function",
        "desc" : "Creates the proxy element if it does not yet exist",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "endDrag",
        "type" : "function",
        "desc" : "Fired when we are done dragging the object",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getDragEl",
        "type" : "function",
        "desc" : "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns a reference to the linked element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "init",
        "type" : "function",
        "desc" : "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "initFrame",
        "type" : "function",
        "desc" : "Initialization for the drag frame element.  Must be called in the\nconstructor of all subclasses",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "initTarget",
        "type" : "function",
        "desc" : "Initializes Targeting functionality only... the object does not\nget a mousedown handler.",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isLocked",
        "type" : "function",
        "desc" : "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isTarget",
        "type" : "function",
        "desc" : "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isValidHandleChild",
        "type" : "function",
        "desc" : "Checks the tag exclusion list to see if this click should be ignored",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "lock",
        "type" : "function",
        "desc" : "Lock this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onAvailable",
        "type" : "function",
        "desc" : "Override the onAvailable method to do what is needed after the initial\nposition was determined.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDrag",
        "type" : "function",
        "desc" : "Abstract method called during the onMouseMove event while dragging an\nobject.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on another DragDrop\nobj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragEnter",
        "type" : "function",
        "desc" : "Abstract method called when this element fist begins hovering over\nanother DragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragOut",
        "type" : "function",
        "desc" : "Abstract method called when we are no longer hovering over an element",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragOver",
        "type" : "function",
        "desc" : "Abstract method called when this element is hovering over another\nDragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onInvalidDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on an area with no\ndrop target",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onMouseDown",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mousedown",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onMouseUp",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mouseup",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "padding",
        "type" : "function",
        "desc" : "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeFromGroup",
        "type" : "function",
        "desc" : "Remove's this instance from the supplied interaction group",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleClass",
        "type" : "function",
        "desc" : "Unsets an invalid css class",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleId",
        "type" : "function",
        "desc" : "Unsets an invalid handle id",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleType",
        "type" : "function",
        "desc" : "Unsets an excluded tag name set by addInvalidHandleType",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resetConstraints",
        "type" : "function",
        "desc" : "resetConstraints must be called if you manually reposition a dd element.",
        "sig" : "(maintainOffset)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setDelta",
        "type" : "function",
        "desc" : "Sets the pointer offset.  You can call this directly to force the\noffset to be in a particular location (e.g., pass in 0,0 to set it\nto the center of the object)",
        "sig" : "(iDeltaX, iDeltaY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "setDragElId",
        "type" : "function",
        "desc" : "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setDragElPos",
        "type" : "function",
        "desc" : "Sets the drag element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is.",
        "sig" : "(iPageX, iPageY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "setHandleElId",
        "type" : "function",
        "desc" : "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setInitPosition",
        "type" : "function",
        "desc" : "Stores the initial placement of the linked element.",
        "sig" : "(diffX, diffY)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setOuterHandleElId",
        "type" : "function",
        "desc" : "Allows you to set an element outside of the linked element as a drag\nhandle",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setPadding",
        "type" : "function",
        "desc" : "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.",
        "sig" : "(iTop, iRight, iBot, iLeft)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setXConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis.",
        "sig" : "(iLeft, iRight, iTickSize)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setYConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis.",
        "sig" : "(iUp, iDown, iTickSize)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "startDrag",
        "type" : "function",
        "desc" : "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met.",
        "sig" : "(X, Y)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "toString",
        "type" : "function",
        "desc" : "toString method",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unlock",
        "type" : "function",
        "desc" : "Unlock this instace",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "unreg",
        "type" : "function",
        "desc" : "Remove all drag and drop hooks for this element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      }
    ]
  },
  "Roo.dd.DDTarget" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addInvalidHandleClass",
        "type" : "function",
        "desc" : "Lets you specify a css class of elements that will not initiate a drag",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addInvalidHandleId",
        "type" : "function",
        "desc" : "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addInvalidHandleType",
        "type" : "function",
        "desc" : "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag.",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addToGroup",
        "type" : "function",
        "desc" : "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed.",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "applyConfig",
        "type" : "function",
        "desc" : "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearConstraints",
        "type" : "function",
        "desc" : "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "clearTicks",
        "type" : "function",
        "desc" : "Clears any tick interval defined for this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "endDrag",
        "type" : "function",
        "desc" : "Fired when we are done dragging the object",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getDragEl",
        "type" : "function",
        "desc" : "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns a reference to the linked element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "init",
        "type" : "function",
        "desc" : "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "initTarget",
        "type" : "function",
        "desc" : "Initializes Targeting functionality only... the object does not\nget a mousedown handler.",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isLocked",
        "type" : "function",
        "desc" : "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isTarget",
        "type" : "function",
        "desc" : "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isValidHandleChild",
        "type" : "function",
        "desc" : "Checks the tag exclusion list to see if this click should be ignored",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "lock",
        "type" : "function",
        "desc" : "Lock this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onAvailable",
        "type" : "function",
        "desc" : "Override the onAvailable method to do what is needed after the initial\nposition was determined.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDrag",
        "type" : "function",
        "desc" : "Abstract method called during the onMouseMove event while dragging an\nobject.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on another DragDrop\nobj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragEnter",
        "type" : "function",
        "desc" : "Abstract method called when this element fist begins hovering over\nanother DragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragOut",
        "type" : "function",
        "desc" : "Abstract method called when we are no longer hovering over an element",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragOver",
        "type" : "function",
        "desc" : "Abstract method called when this element is hovering over another\nDragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onInvalidDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on an area with no\ndrop target",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onMouseDown",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mousedown",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onMouseUp",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mouseup",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "padding",
        "type" : "function",
        "desc" : "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeFromGroup",
        "type" : "function",
        "desc" : "Remove's this instance from the supplied interaction group",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleClass",
        "type" : "function",
        "desc" : "Unsets an invalid css class",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleId",
        "type" : "function",
        "desc" : "Unsets an invalid handle id",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleType",
        "type" : "function",
        "desc" : "Unsets an excluded tag name set by addInvalidHandleType",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resetConstraints",
        "type" : "function",
        "desc" : "resetConstraints must be called if you manually reposition a dd element.",
        "sig" : "(maintainOffset)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setDragElId",
        "type" : "function",
        "desc" : "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setHandleElId",
        "type" : "function",
        "desc" : "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setInitPosition",
        "type" : "function",
        "desc" : "Stores the initial placement of the linked element.",
        "sig" : "(diffX, diffY)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setOuterHandleElId",
        "type" : "function",
        "desc" : "Allows you to set an element outside of the linked element as a drag\nhandle",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setPadding",
        "type" : "function",
        "desc" : "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.",
        "sig" : "(iTop, iRight, iBot, iLeft)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setXConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis.",
        "sig" : "(iLeft, iRight, iTickSize)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setYConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis.",
        "sig" : "(iUp, iDown, iTickSize)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "startDrag",
        "type" : "function",
        "desc" : "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met.",
        "sig" : "(X, Y)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "toString",
        "type" : "function",
        "desc" : "toString method",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unlock",
        "type" : "function",
        "desc" : "Unlock this instace",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "unreg",
        "type" : "function",
        "desc" : "Remove all drag and drop hooks for this element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      }
    ]
  },
  "Roo.dd.DragDrop" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addInvalidHandleClass",
        "type" : "function",
        "desc" : "Lets you specify a css class of elements that will not initiate a drag",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addInvalidHandleId",
        "type" : "function",
        "desc" : "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addInvalidHandleType",
        "type" : "function",
        "desc" : "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag.",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addToGroup",
        "type" : "function",
        "desc" : "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed.",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "applyConfig",
        "type" : "function",
        "desc" : "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearConstraints",
        "type" : "function",
        "desc" : "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "clearTicks",
        "type" : "function",
        "desc" : "Clears any tick interval defined for this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "endDrag",
        "type" : "function",
        "desc" : "Fired when we are done dragging the object",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getDragEl",
        "type" : "function",
        "desc" : "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns a reference to the linked element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "init",
        "type" : "function",
        "desc" : "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "initTarget",
        "type" : "function",
        "desc" : "Initializes Targeting functionality only... the object does not\nget a mousedown handler.",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isLocked",
        "type" : "function",
        "desc" : "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isTarget",
        "type" : "function",
        "desc" : "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isValidHandleChild",
        "type" : "function",
        "desc" : "Checks the tag exclusion list to see if this click should be ignored",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "lock",
        "type" : "function",
        "desc" : "Lock this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onAvailable",
        "type" : "function",
        "desc" : "Override the onAvailable method to do what is needed after the initial\nposition was determined.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onDrag",
        "type" : "function",
        "desc" : "Abstract method called during the onMouseMove event while dragging an\nobject.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onDragDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on another DragDrop\nobj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onDragEnter",
        "type" : "function",
        "desc" : "Abstract method called when this element fist begins hovering over\nanother DragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onDragOut",
        "type" : "function",
        "desc" : "Abstract method called when we are no longer hovering over an element",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onDragOver",
        "type" : "function",
        "desc" : "Abstract method called when this element is hovering over another\nDragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onInvalidDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on an area with no\ndrop target",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onMouseDown",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mousedown",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onMouseUp",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mouseup",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "padding",
        "type" : "function",
        "desc" : "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeFromGroup",
        "type" : "function",
        "desc" : "Remove's this instance from the supplied interaction group",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeInvalidHandleClass",
        "type" : "function",
        "desc" : "Unsets an invalid css class",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeInvalidHandleId",
        "type" : "function",
        "desc" : "Unsets an invalid handle id",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeInvalidHandleType",
        "type" : "function",
        "desc" : "Unsets an excluded tag name set by addInvalidHandleType",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resetConstraints",
        "type" : "function",
        "desc" : "resetConstraints must be called if you manually reposition a dd element.",
        "sig" : "(maintainOffset)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDragElId",
        "type" : "function",
        "desc" : "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setHandleElId",
        "type" : "function",
        "desc" : "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setInitPosition",
        "type" : "function",
        "desc" : "Stores the initial placement of the linked element.",
        "sig" : "(diffX, diffY)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setOuterHandleElId",
        "type" : "function",
        "desc" : "Allows you to set an element outside of the linked element as a drag\nhandle",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setPadding",
        "type" : "function",
        "desc" : "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.",
        "sig" : "(iTop, iRight, iBot, iLeft)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setXConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis.",
        "sig" : "(iLeft, iRight, iTickSize)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setYConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis.",
        "sig" : "(iUp, iDown, iTickSize)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "startDrag",
        "type" : "function",
        "desc" : "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met.",
        "sig" : "(X, Y)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "toString",
        "type" : "function",
        "desc" : "toString method",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unlock",
        "type" : "function",
        "desc" : "Unlock this instace",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "unreg",
        "type" : "function",
        "desc" : "Remove all drag and drop hooks for this element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.dd.DragDropMgr" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "getBestMatch",
        "type" : "function",
        "desc" : "Helper function for getting the best match from the list of drag\nand drop objects returned by the drag and drop events when we are\nin INTERSECT mode.  It returns either the first object that the\ncursor is over, or the object that has the greatest overlap with\nthe dragged element.",
        "sig" : "(dds)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getCss",
        "type" : "function",
        "desc" : "Returns the style property for the DOM element (i.e.,\ndocument.getElById(id).style)",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getDDById",
        "type" : "function",
        "desc" : "Returns the DragDrop instance for a given id",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getElement",
        "type" : "function",
        "desc" : "Returns the actual DOM element",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getLocation",
        "type" : "function",
        "desc" : "Returns a Region object containing the drag and drop element's position\nand size, including the padding configured for it",
        "sig" : "(oDD)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getPosX",
        "type" : "function",
        "desc" : "Returns the X position of an html element",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getPosY",
        "type" : "function",
        "desc" : "Returns the Y position of an html element",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getRelated",
        "type" : "function",
        "desc" : "Returns the drag and drop instances that are in all groups the\npassed in instance belongs to.",
        "sig" : "(p_oDD, bTargetsOnly)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getScrollLeft",
        "type" : "function",
        "desc" : "Gets the scrollLeft",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getScrollTop",
        "type" : "function",
        "desc" : "Gets the scrollTop",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getStyle",
        "type" : "function",
        "desc" : "Returns the specified element style property",
        "sig" : "(el, styleProp)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "handleWasClicked",
        "type" : "function",
        "desc" : "Recursively searches the immediate parent and all child nodes for\nthe handle element in order to determine wheter or not it was\nclicked.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isDragDrop",
        "type" : "function",
        "desc" : "Utility function to determine if a given element has been\nregistered as a drag drop item.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isHandle",
        "type" : "function",
        "desc" : "Utility function to determine if a given element has been\nregistered as a drag drop handle for the given Drag Drop object.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isLegalTarget",
        "type" : "function",
        "desc" : "Returns true if the specified dd target is a legal target for\nthe specifice drag obj",
        "sig" : "(the, the)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isLocked",
        "type" : "function",
        "desc" : "Is drag and drop locked?",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isTypeOfDD",
        "type" : "function",
        "desc" : "My goal is to be able to transparently determine if an object is\ntypeof DragDrop, and the exact subclass of DragDrop.  typeof\nreturns \"object\", oDD.constructor.toString() always returns\n\"DragDrop\" and not the name of the subclass.  So for now it just\nevaluates a well-known variable in DragDrop.",
        "sig" : "(the)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "lock",
        "type" : "function",
        "desc" : "Lock all drag and drop functionality",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "moveToEl",
        "type" : "function",
        "desc" : "Sets the x/y position of an element to the location of the\ntarget element.",
        "sig" : "(moveEl, targetEl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "numericSort",
        "type" : "function",
        "desc" : "Numeric array sort function",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "refreshCache",
        "type" : "function",
        "desc" : "Refreshes the cache of the top-left and bottom-right points of the\ndrag and drop objects in the specified group(s).  This is in the\nformat that is stored in the drag and drop instance, so typical\nusage is:\n<code>\nRoo.dd.DragDropMgr.refreshCache(ddinstance.groups);\n</code>\nAlternatively:\n<code>\nRoo.dd.DragDropMgr.refreshCache({group1:true, group2:true});\n</code>",
        "sig" : "(groups)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "regDragDrop",
        "type" : "function",
        "desc" : "Each DragDrop instance must be registered with the DragDropMgr.\nThis is executed in DragDrop.init()",
        "sig" : "(oDD, sGroup)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "regHandle",
        "type" : "function",
        "desc" : "Each DragDrop handle element must be registered.  This is done\nautomatically when executing DragDrop.setHandleElId()",
        "sig" : "(sDDId, sHandleId)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "startDrag",
        "type" : "function",
        "desc" : "Fired when either the drag pixel threshol or the mousedown hold\ntime threshold has been met.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "stopEvent",
        "type" : "function",
        "desc" : "Utility to stop event propagation and event default, if these\nfeatures are turned on.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "swapNode",
        "type" : "function",
        "desc" : "Swap two nodes.  In IE, we use the native method, for others we\nemulate the IE behavior",
        "sig" : "(n1, n2)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "unlock",
        "type" : "function",
        "desc" : "Unlock all drag and drop functionality",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "verifyEl",
        "type" : "function",
        "desc" : "This checks to make sure an element exists and is in the DOM.  The\nmain purpose is to handle cases where innerHTML is used to remove\ndrag and drop objects from the DOM.  IE provides an 'unspecified\nerror' when trying to access the offsetParent of such an element",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.dd.DragSource" : {
    "props" : [
      {
        "name" : "dropAllowed",
        "type" : "String",
        "desc" : "The CSS class returned to the drag source when drop is allowed (defaults to \"x-dd-drop-ok\").",
        "memberOf" : ""
      },
      {
        "name" : "dropNotAllowed",
        "type" : "String",
        "desc" : "The CSS class returned to the drag source when drop is not allowed (defaults to \"x-dd-drop-nodrop\").",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addInvalidHandleClass",
        "type" : "function",
        "desc" : "Lets you specify a css class of elements that will not initiate a drag",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addInvalidHandleId",
        "type" : "function",
        "desc" : "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addInvalidHandleType",
        "type" : "function",
        "desc" : "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag.",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addToGroup",
        "type" : "function",
        "desc" : "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed.",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "alignElWithMouse",
        "type" : "function",
        "desc" : "Sets the element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is.",
        "sig" : "(el, iPageX, iPageY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "applyConfig",
        "type" : "function",
        "desc" : "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "autoOffset",
        "type" : "function",
        "desc" : "Sets the pointer offset to the distance between the linked element's top\nleft corner and the location the element was clicked",
        "sig" : "(iPageX, iPageY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "beforeDragDrop",
        "type" : "function",
        "desc" : "An empty function by default, but provided so that you can perform a custom action before the dragged\nitem is dropped onto the target and optionally cancel the onDragDrop.",
        "sig" : "(target, e, id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "beforeDragEnter",
        "type" : "function",
        "desc" : "An empty function by default, but provided so that you can perform a custom action\nbefore the dragged item enters the drop target and optionally cancel the onDragEnter.",
        "sig" : "(target, e, id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "beforeDragOut",
        "type" : "function",
        "desc" : "An empty function by default, but provided so that you can perform a custom action before the dragged\nitem is dragged out of the target without dropping, and optionally cancel the onDragOut.",
        "sig" : "(target, e, id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "beforeDragOver",
        "type" : "function",
        "desc" : "An empty function by default, but provided so that you can perform a custom action\nwhile the dragged item is over the drop target and optionally cancel the onDragOver.",
        "sig" : "(target, e, id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "beforeInvalidDrop",
        "type" : "function",
        "desc" : "An empty function by default, but provided so that you can perform a custom action after an invalid\ndrop has occurred.",
        "sig" : "(target, e, id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "cachePosition",
        "type" : "function",
        "desc" : "Saves the most recent position so that we can reset the constraints and\ntick marks on-demand.  We need to know this so that we can calculate the\nnumber of pixels the element is offset from its original position.",
        "sig" : "(iPageX, iPageY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearConstraints",
        "type" : "function",
        "desc" : "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "clearTicks",
        "type" : "function",
        "desc" : "Clears any tick interval defined for this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "createFrame",
        "type" : "function",
        "desc" : "Creates the proxy element if it does not yet exist",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DDProxy"
      },
      {
        "name" : "endDrag",
        "type" : "function",
        "desc" : "Fired when we are done dragging the object",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getDragData",
        "type" : "function",
        "desc" : "Returns the data object associated with this drag source",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getDragEl",
        "type" : "function",
        "desc" : "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns a reference to the linked element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "getProxy",
        "type" : "function",
        "desc" : "Returns the drag source's underlying {@link Roo.dd.StatusProxy}",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hideProxy",
        "type" : "function",
        "desc" : "Hides the drag source's {@link Roo.dd.StatusProxy}",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "init",
        "type" : "function",
        "desc" : "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "initFrame",
        "type" : "function",
        "desc" : "Initialization for the drag frame element.  Must be called in the\nconstructor of all subclasses",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DDProxy"
      },
      {
        "name" : "initTarget",
        "type" : "function",
        "desc" : "Initializes Targeting functionality only... the object does not\nget a mousedown handler.",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isLocked",
        "type" : "function",
        "desc" : "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isTarget",
        "type" : "function",
        "desc" : "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isValidHandleChild",
        "type" : "function",
        "desc" : "Checks the tag exclusion list to see if this click should be ignored",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "lock",
        "type" : "function",
        "desc" : "Lock this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onAvailable",
        "type" : "function",
        "desc" : "Override the onAvailable method to do what is needed after the initial\nposition was determined.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onBeforeDrag",
        "type" : "function",
        "desc" : "An empty function by default, but provided so that you can perform a custom action before the initial\ndrag event begins and optionally cancel it.",
        "sig" : "(data, e)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onDrag",
        "type" : "function",
        "desc" : "Abstract method called during the onMouseMove event while dragging an\nobject.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on another DragDrop\nobj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragEnter",
        "type" : "function",
        "desc" : "Abstract method called when this element fist begins hovering over\nanother DragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragOut",
        "type" : "function",
        "desc" : "Abstract method called when we are no longer hovering over an element",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragOver",
        "type" : "function",
        "desc" : "Abstract method called when this element is hovering over another\nDragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onInvalidDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on an area with no\ndrop target",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onMouseDown",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mousedown",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onMouseUp",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mouseup",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onStartDrag",
        "type" : "function",
        "desc" : "An empty function by default, but provided so that you can perform a custom action once the initial\ndrag event has begun.  The drag cannot be canceled from this function.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "padding",
        "type" : "function",
        "desc" : "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeFromGroup",
        "type" : "function",
        "desc" : "Remove's this instance from the supplied interaction group",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleClass",
        "type" : "function",
        "desc" : "Unsets an invalid css class",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleId",
        "type" : "function",
        "desc" : "Unsets an invalid handle id",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleType",
        "type" : "function",
        "desc" : "Unsets an excluded tag name set by addInvalidHandleType",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resetConstraints",
        "type" : "function",
        "desc" : "resetConstraints must be called if you manually reposition a dd element.",
        "sig" : "(maintainOffset)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setDelta",
        "type" : "function",
        "desc" : "Sets the pointer offset.  You can call this directly to force the\noffset to be in a particular location (e.g., pass in 0,0 to set it\nto the center of the object)",
        "sig" : "(iDeltaX, iDeltaY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "setDragElId",
        "type" : "function",
        "desc" : "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setDragElPos",
        "type" : "function",
        "desc" : "Sets the drag element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is.",
        "sig" : "(iPageX, iPageY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "setHandleElId",
        "type" : "function",
        "desc" : "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setInitPosition",
        "type" : "function",
        "desc" : "Stores the initial placement of the linked element.",
        "sig" : "(diffX, diffY)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setOuterHandleElId",
        "type" : "function",
        "desc" : "Allows you to set an element outside of the linked element as a drag\nhandle",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setPadding",
        "type" : "function",
        "desc" : "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.",
        "sig" : "(iTop, iRight, iBot, iLeft)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setXConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis.",
        "sig" : "(iLeft, iRight, iTickSize)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setYConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis.",
        "sig" : "(iUp, iDown, iTickSize)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "startDrag",
        "type" : "function",
        "desc" : "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met.",
        "sig" : "(X, Y)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "toString",
        "type" : "function",
        "desc" : "toString method",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unlock",
        "type" : "function",
        "desc" : "Unlock this instace",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "unreg",
        "type" : "function",
        "desc" : "Remove all drag and drop hooks for this element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      }
    ]
  },
  "Roo.dd.DragZone" : {
    "props" : [
      {
        "name" : "containerScroll",
        "type" : "Boolean",
        "desc" : "True to register this container with the Scrollmanager\nfor auto scrolling during drag operations.",
        "memberOf" : ""
      },
      {
        "name" : "dropAllowed",
        "type" : "String",
        "desc" : "The CSS class returned to the drag source when drop is allowed (defaults to \"x-dd-drop-ok\").",
        "memberOf" : "Roo.dd.DragSource"
      },
      {
        "name" : "dropNotAllowed",
        "type" : "String",
        "desc" : "The CSS class returned to the drag source when drop is not allowed (defaults to \"x-dd-drop-nodrop\").",
        "memberOf" : "Roo.dd.DragSource"
      },
      {
        "name" : "hlColor",
        "type" : "String",
        "desc" : "The color to use when visually highlighting the drag source in the afterRepair\nmethod after a failed drop (defaults to \"c3daf9\" - light blue)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addInvalidHandleClass",
        "type" : "function",
        "desc" : "Lets you specify a css class of elements that will not initiate a drag",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addInvalidHandleId",
        "type" : "function",
        "desc" : "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addInvalidHandleType",
        "type" : "function",
        "desc" : "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag.",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addToGroup",
        "type" : "function",
        "desc" : "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed.",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "afterRepair",
        "type" : "function",
        "desc" : "Called after a repair of an invalid drop. By default, highlights this.dragData.ddel",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "alignElWithMouse",
        "type" : "function",
        "desc" : "Sets the element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is.",
        "sig" : "(el, iPageX, iPageY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "applyConfig",
        "type" : "function",
        "desc" : "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "autoOffset",
        "type" : "function",
        "desc" : "Sets the pointer offset to the distance between the linked element's top\nleft corner and the location the element was clicked",
        "sig" : "(iPageX, iPageY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "beforeDragDrop",
        "type" : "function",
        "desc" : "An empty function by default, but provided so that you can perform a custom action before the dragged\nitem is dropped onto the target and optionally cancel the onDragDrop.",
        "sig" : "(target, e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragSource"
      },
      {
        "name" : "beforeDragEnter",
        "type" : "function",
        "desc" : "An empty function by default, but provided so that you can perform a custom action\nbefore the dragged item enters the drop target and optionally cancel the onDragEnter.",
        "sig" : "(target, e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragSource"
      },
      {
        "name" : "beforeDragOut",
        "type" : "function",
        "desc" : "An empty function by default, but provided so that you can perform a custom action before the dragged\nitem is dragged out of the target without dropping, and optionally cancel the onDragOut.",
        "sig" : "(target, e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragSource"
      },
      {
        "name" : "beforeDragOver",
        "type" : "function",
        "desc" : "An empty function by default, but provided so that you can perform a custom action\nwhile the dragged item is over the drop target and optionally cancel the onDragOver.",
        "sig" : "(target, e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragSource"
      },
      {
        "name" : "beforeInvalidDrop",
        "type" : "function",
        "desc" : "An empty function by default, but provided so that you can perform a custom action after an invalid\ndrop has occurred.",
        "sig" : "(target, e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragSource"
      },
      {
        "name" : "cachePosition",
        "type" : "function",
        "desc" : "Saves the most recent position so that we can reset the constraints and\ntick marks on-demand.  We need to know this so that we can calculate the\nnumber of pixels the element is offset from its original position.",
        "sig" : "(iPageX, iPageY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearConstraints",
        "type" : "function",
        "desc" : "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "clearTicks",
        "type" : "function",
        "desc" : "Clears any tick interval defined for this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "createFrame",
        "type" : "function",
        "desc" : "Creates the proxy element if it does not yet exist",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DDProxy"
      },
      {
        "name" : "endDrag",
        "type" : "function",
        "desc" : "Fired when we are done dragging the object",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getDragData",
        "type" : "function",
        "desc" : "Called when a mousedown occurs in this container. Looks in {@link Roo.dd.Registry}\nfor a valid target to drag based on the mouse down. Override this method\nto provide your own lookup logic (e.g. finding a child by class name). Make sure your returned\nobject has a \"ddel\" attribute (with an HTML Element) for other functions to work.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getDragEl",
        "type" : "function",
        "desc" : "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns a reference to the linked element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "getProxy",
        "type" : "function",
        "desc" : "Returns the drag source's underlying {@link Roo.dd.StatusProxy}",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragSource"
      },
      {
        "name" : "getRepairXY",
        "type" : "function",
        "desc" : "Called before a repair of an invalid drop to get the XY to animate to. By default returns\nthe XY of this.dragData.ddel",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hideProxy",
        "type" : "function",
        "desc" : "Hides the drag source's {@link Roo.dd.StatusProxy}",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragSource"
      },
      {
        "name" : "init",
        "type" : "function",
        "desc" : "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "initFrame",
        "type" : "function",
        "desc" : "Initialization for the drag frame element.  Must be called in the\nconstructor of all subclasses",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DDProxy"
      },
      {
        "name" : "initTarget",
        "type" : "function",
        "desc" : "Initializes Targeting functionality only... the object does not\nget a mousedown handler.",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isLocked",
        "type" : "function",
        "desc" : "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isTarget",
        "type" : "function",
        "desc" : "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isValidHandleChild",
        "type" : "function",
        "desc" : "Checks the tag exclusion list to see if this click should be ignored",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "lock",
        "type" : "function",
        "desc" : "Lock this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onAvailable",
        "type" : "function",
        "desc" : "Override the onAvailable method to do what is needed after the initial\nposition was determined.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onBeforeDrag",
        "type" : "function",
        "desc" : "An empty function by default, but provided so that you can perform a custom action before the initial\ndrag event begins and optionally cancel it.",
        "sig" : "(data, e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragSource"
      },
      {
        "name" : "onDrag",
        "type" : "function",
        "desc" : "Abstract method called during the onMouseMove event while dragging an\nobject.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on another DragDrop\nobj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragEnter",
        "type" : "function",
        "desc" : "Abstract method called when this element fist begins hovering over\nanother DragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragOut",
        "type" : "function",
        "desc" : "Abstract method called when we are no longer hovering over an element",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragOver",
        "type" : "function",
        "desc" : "Abstract method called when this element is hovering over another\nDragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onInitDrag",
        "type" : "function",
        "desc" : "Called once drag threshold has been reached to initialize the proxy element. By default, it clones the\nthis.dragData.ddel",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onInvalidDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on an area with no\ndrop target",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onMouseDown",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mousedown",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onMouseUp",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mouseup",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onStartDrag",
        "type" : "function",
        "desc" : "An empty function by default, but provided so that you can perform a custom action once the initial\ndrag event has begun.  The drag cannot be canceled from this function.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.dd.DragSource"
      },
      {
        "name" : "padding",
        "type" : "function",
        "desc" : "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeFromGroup",
        "type" : "function",
        "desc" : "Remove's this instance from the supplied interaction group",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleClass",
        "type" : "function",
        "desc" : "Unsets an invalid css class",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleId",
        "type" : "function",
        "desc" : "Unsets an invalid handle id",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleType",
        "type" : "function",
        "desc" : "Unsets an excluded tag name set by addInvalidHandleType",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resetConstraints",
        "type" : "function",
        "desc" : "resetConstraints must be called if you manually reposition a dd element.",
        "sig" : "(maintainOffset)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setDelta",
        "type" : "function",
        "desc" : "Sets the pointer offset.  You can call this directly to force the\noffset to be in a particular location (e.g., pass in 0,0 to set it\nto the center of the object)",
        "sig" : "(iDeltaX, iDeltaY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "setDragElId",
        "type" : "function",
        "desc" : "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setDragElPos",
        "type" : "function",
        "desc" : "Sets the drag element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is.",
        "sig" : "(iPageX, iPageY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "setHandleElId",
        "type" : "function",
        "desc" : "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setInitPosition",
        "type" : "function",
        "desc" : "Stores the initial placement of the linked element.",
        "sig" : "(diffX, diffY)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setOuterHandleElId",
        "type" : "function",
        "desc" : "Allows you to set an element outside of the linked element as a drag\nhandle",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setPadding",
        "type" : "function",
        "desc" : "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.",
        "sig" : "(iTop, iRight, iBot, iLeft)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setXConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis.",
        "sig" : "(iLeft, iRight, iTickSize)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setYConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis.",
        "sig" : "(iUp, iDown, iTickSize)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "startDrag",
        "type" : "function",
        "desc" : "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met.",
        "sig" : "(X, Y)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "toString",
        "type" : "function",
        "desc" : "toString method",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unlock",
        "type" : "function",
        "desc" : "Unlock this instace",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "unreg",
        "type" : "function",
        "desc" : "Remove all drag and drop hooks for this element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      }
    ]
  },
  "Roo.dd.DropTarget" : {
    "props" : [
      {
        "name" : "ddGroup",
        "type" : "String",
        "desc" : "The drag drop group to handle drop events for",
        "memberOf" : ""
      },
      {
        "name" : "dropAllowed",
        "type" : "String",
        "desc" : "The CSS class returned to the drag source when drop is allowed (defaults to \"x-dd-drop-ok\").",
        "memberOf" : ""
      },
      {
        "name" : "dropNotAllowed",
        "type" : "String",
        "desc" : "The CSS class returned to the drag source when drop is not allowed (defaults to \"x-dd-drop-nodrop\").",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "overClass",
        "type" : "String",
        "desc" : "The CSS class applied to the drop target element while the drag source is over it (defaults to \"\").",
        "memberOf" : ""
      },
      {
        "name" : "success",
        "type" : "boolean",
        "desc" : "set this after drop listener..",
        "memberOf" : ""
      },
      {
        "name" : "valid",
        "type" : "boolean|String",
        "desc" : "true/false or string (ok-add/ok-sub/ok/nodrop)\nif the drop point is valid for over/enter..",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "drop",
        "type" : "function",
        "desc" : "The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the dragged item has\nbeen dropped on it.  This method has no default implementation and returns false, so you must provide an\nimplementation that does something to process the drop event and returns true so that the drag source's\nrepair action does not run.\n\nIMPORTANT : it should set this.success",
        "sig" : "function (source, e, data)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "enter",
        "type" : "function",
        "desc" : "The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the source is now over the\ntarget.  This default implementation adds the CSS class specified by overClass (if any) to the drop element\nand returns the dropAllowed config value.  This method should be overridden if drop validation is required.\n\nIMPORTANT : it should set  this.valid to true|false",
        "sig" : "function (source, e, data)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "out",
        "type" : "function",
        "desc" : "The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the source has been dragged\nout of the target without dropping.  This default implementation simply removes the CSS class specified by\noverClass (if any) from the drop element.",
        "sig" : "function (source, e, data)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "over",
        "type" : "function",
        "desc" : "The function a {@link Roo.dd.DragSource} calls continuously while it is being dragged over the target.\nThis method will be called on every mouse movement while the drag source is over the drop target.\nThis default implementation simply returns the dropAllowed config value.\n\nIMPORTANT : it should set  this.valid to true|false",
        "sig" : "function (source, e, data)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addInvalidHandleClass",
        "type" : "function",
        "desc" : "Lets you specify a css class of elements that will not initiate a drag",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addInvalidHandleId",
        "type" : "function",
        "desc" : "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addInvalidHandleType",
        "type" : "function",
        "desc" : "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag.",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addToGroup",
        "type" : "function",
        "desc" : "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed.",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "applyConfig",
        "type" : "function",
        "desc" : "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearConstraints",
        "type" : "function",
        "desc" : "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "clearTicks",
        "type" : "function",
        "desc" : "Clears any tick interval defined for this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "endDrag",
        "type" : "function",
        "desc" : "Fired when we are done dragging the object",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getDragEl",
        "type" : "function",
        "desc" : "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns a reference to the linked element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "init",
        "type" : "function",
        "desc" : "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "initTarget",
        "type" : "function",
        "desc" : "Initializes Targeting functionality only... the object does not\nget a mousedown handler.",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isLocked",
        "type" : "function",
        "desc" : "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isTarget",
        "type" : "function",
        "desc" : "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isValidHandleChild",
        "type" : "function",
        "desc" : "Checks the tag exclusion list to see if this click should be ignored",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "lock",
        "type" : "function",
        "desc" : "Lock this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "notifyDrop",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "notifyEnter",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "notifyOut",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "notifyOver",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onAvailable",
        "type" : "function",
        "desc" : "Override the onAvailable method to do what is needed after the initial\nposition was determined.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDrag",
        "type" : "function",
        "desc" : "Abstract method called during the onMouseMove event while dragging an\nobject.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on another DragDrop\nobj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragEnter",
        "type" : "function",
        "desc" : "Abstract method called when this element fist begins hovering over\nanother DragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragOut",
        "type" : "function",
        "desc" : "Abstract method called when we are no longer hovering over an element",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragOver",
        "type" : "function",
        "desc" : "Abstract method called when this element is hovering over another\nDragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onInvalidDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on an area with no\ndrop target",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onMouseDown",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mousedown",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onMouseUp",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mouseup",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "padding",
        "type" : "function",
        "desc" : "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeFromGroup",
        "type" : "function",
        "desc" : "Remove's this instance from the supplied interaction group",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleClass",
        "type" : "function",
        "desc" : "Unsets an invalid css class",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleId",
        "type" : "function",
        "desc" : "Unsets an invalid handle id",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleType",
        "type" : "function",
        "desc" : "Unsets an excluded tag name set by addInvalidHandleType",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resetConstraints",
        "type" : "function",
        "desc" : "resetConstraints must be called if you manually reposition a dd element.",
        "sig" : "(maintainOffset)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setDragElId",
        "type" : "function",
        "desc" : "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setHandleElId",
        "type" : "function",
        "desc" : "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setInitPosition",
        "type" : "function",
        "desc" : "Stores the initial placement of the linked element.",
        "sig" : "(diffX, diffY)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setOuterHandleElId",
        "type" : "function",
        "desc" : "Allows you to set an element outside of the linked element as a drag\nhandle",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setPadding",
        "type" : "function",
        "desc" : "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.",
        "sig" : "(iTop, iRight, iBot, iLeft)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setXConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis.",
        "sig" : "(iLeft, iRight, iTickSize)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setYConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis.",
        "sig" : "(iUp, iDown, iTickSize)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "startDrag",
        "type" : "function",
        "desc" : "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met.",
        "sig" : "(X, Y)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "toString",
        "type" : "function",
        "desc" : "toString method",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unlock",
        "type" : "function",
        "desc" : "Unlock this instace",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "unreg",
        "type" : "function",
        "desc" : "Remove all drag and drop hooks for this element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      }
    ]
  },
  "Roo.dd.DropZone" : {
    "props" : [
      {
        "name" : "ddGroup",
        "type" : "String",
        "desc" : "The drag drop group to handle drop events for",
        "memberOf" : "Roo.dd.DropTarget"
      },
      {
        "name" : "dropAllowed",
        "type" : "String",
        "desc" : "The CSS class returned to the drag source when drop is allowed (defaults to \"x-dd-drop-ok\").",
        "memberOf" : "Roo.dd.DropTarget"
      },
      {
        "name" : "dropNotAllowed",
        "type" : "String",
        "desc" : "The CSS class returned to the drag source when drop is not allowed (defaults to \"x-dd-drop-nodrop\").",
        "memberOf" : "Roo.dd.DropTarget"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "overClass",
        "type" : "String",
        "desc" : "The CSS class applied to the drop target element while the drag source is over it (defaults to \"\").",
        "memberOf" : "Roo.dd.DropTarget"
      },
      {
        "name" : "success",
        "type" : "boolean",
        "desc" : "set this after drop listener..",
        "memberOf" : "Roo.dd.DropTarget"
      },
      {
        "name" : "valid",
        "type" : "boolean|String",
        "desc" : "true/false or string (ok-add/ok-sub/ok/nodrop)\nif the drop point is valid for over/enter..",
        "memberOf" : "Roo.dd.DropTarget"
      }
    ],
    "events" : [
      {
        "name" : "drop",
        "type" : "function",
        "desc" : "The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the dragged item has\nbeen dropped on it.  This method has no default implementation and returns false, so you must provide an\nimplementation that does something to process the drop event and returns true so that the drag source's\nrepair action does not run.\n\nIMPORTANT : it should set this.success",
        "sig" : "function (source, e, data)\n{\n\n}",
        "memberOf" : "Roo.dd.DropTarget"
      },
      {
        "name" : "enter",
        "type" : "function",
        "desc" : "The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the source is now over the\ntarget.  This default implementation adds the CSS class specified by overClass (if any) to the drop element\nand returns the dropAllowed config value.  This method should be overridden if drop validation is required.\n\nIMPORTANT : it should set  this.valid to true|false",
        "sig" : "function (source, e, data)\n{\n\n}",
        "memberOf" : "Roo.dd.DropTarget"
      },
      {
        "name" : "out",
        "type" : "function",
        "desc" : "The function a {@link Roo.dd.DragSource} calls once to notify this drop target that the source has been dragged\nout of the target without dropping.  This default implementation simply removes the CSS class specified by\noverClass (if any) from the drop element.",
        "sig" : "function (source, e, data)\n{\n\n}",
        "memberOf" : "Roo.dd.DropTarget"
      },
      {
        "name" : "over",
        "type" : "function",
        "desc" : "The function a {@link Roo.dd.DragSource} calls continuously while it is being dragged over the target.\nThis method will be called on every mouse movement while the drag source is over the drop target.\nThis default implementation simply returns the dropAllowed config value.\n\nIMPORTANT : it should set  this.valid to true|false",
        "sig" : "function (source, e, data)\n{\n\n}",
        "memberOf" : "Roo.dd.DropTarget"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addInvalidHandleClass",
        "type" : "function",
        "desc" : "Lets you specify a css class of elements that will not initiate a drag",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addInvalidHandleId",
        "type" : "function",
        "desc" : "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addInvalidHandleType",
        "type" : "function",
        "desc" : "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag.",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addToGroup",
        "type" : "function",
        "desc" : "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed.",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "applyConfig",
        "type" : "function",
        "desc" : "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearConstraints",
        "type" : "function",
        "desc" : "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "clearTicks",
        "type" : "function",
        "desc" : "Clears any tick interval defined for this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "endDrag",
        "type" : "function",
        "desc" : "Fired when we are done dragging the object",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getDragEl",
        "type" : "function",
        "desc" : "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns a reference to the linked element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "getTargetFromEvent",
        "type" : "function",
        "desc" : "Returns a custom data object associated with the DOM node that is the target of the event.  By default\nthis looks up the event target in the {@link Roo.dd.Registry}, although you can override this method to\nprovide your own custom lookup.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "init",
        "type" : "function",
        "desc" : "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "initTarget",
        "type" : "function",
        "desc" : "Initializes Targeting functionality only... the object does not\nget a mousedown handler.",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isLocked",
        "type" : "function",
        "desc" : "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isTarget",
        "type" : "function",
        "desc" : "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isValidHandleChild",
        "type" : "function",
        "desc" : "Checks the tag exclusion list to see if this click should be ignored",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "lock",
        "type" : "function",
        "desc" : "Lock this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "notifyDrop",
        "type" : "function",
        "desc" : "The function a {@link Roo.dd.DragSource} calls once to notify this drop zone that the dragged item has\nbeen dropped on it.  The drag zone will look up the target node based on the event passed in, and if there\nis a node registered for that event, it will delegate to {@link #onNodeDrop} for node-specific handling,\notherwise it will call {@link #onContainerDrop}.",
        "sig" : "(source, e, data)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "notifyEnter",
        "type" : "function",
        "desc" : "The function a {@link Roo.dd.DragSource} calls once to notify this drop zone that the source is now over\nthe zone.  The default implementation returns this.dropNotAllowed and expects that only registered drop\nnodes can process drag drop operations, so if you need the drop zone itself to be able to process drops\nyou should override this method and provide a custom implementation.",
        "sig" : "(source, e, data)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "notifyOut",
        "type" : "function",
        "desc" : "The function a {@link Roo.dd.DragSource} calls once to notify this drop zone that the source has been dragged\nout of the zone without dropping.  If the drag source is currently over a registered node, the notification\nwill be delegated to {@link #onNodeOut} for node-specific handling, otherwise it will be ignored.",
        "sig" : "(source, e, data)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "notifyOver",
        "type" : "function",
        "desc" : "The function a {@link Roo.dd.DragSource} calls continuously while it is being dragged over the drop zone.\nThis method will be called on every mouse movement while the drag source is over the drop zone.\nIt will call {@link #onNodeOver} while the drag source is over a registered node, and will also automatically\ndelegate to the appropriate node-specific methods as necessary when the drag source enters and exits\nregistered nodes ({@link #onNodeEnter}, {@link #onNodeOut}). If the drag source is not currently over a\nregistered node, it will call {@link #onContainerOver}.",
        "sig" : "(source, e, data)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onAvailable",
        "type" : "function",
        "desc" : "Override the onAvailable method to do what is needed after the initial\nposition was determined.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onContainerDrop",
        "type" : "function",
        "desc" : "Called internally when the DropZone determines that a {@link Roo.dd.DragSource} has been dropped on it,\nbut not on any of its registered drop nodes.  The default implementation returns false, so it should be\noverridden to provide the appropriate processing of the drop event if you need the drop zone itself to\nbe able to accept drops.  It should return true when valid so that the drag source's repair action does not run.",
        "sig" : "(source, e, data)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onContainerOver",
        "type" : "function",
        "desc" : "Called internally while the DropZone determines that a {@link Roo.dd.DragSource} is being dragged over it,\nbut not over any of its registered drop nodes.  The default implementation returns this.dropNotAllowed, so\nit should be overridden to provide the proper feedback if necessary.",
        "sig" : "(source, e, data)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onDrag",
        "type" : "function",
        "desc" : "Abstract method called during the onMouseMove event while dragging an\nobject.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on another DragDrop\nobj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragEnter",
        "type" : "function",
        "desc" : "Abstract method called when this element fist begins hovering over\nanother DragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragOut",
        "type" : "function",
        "desc" : "Abstract method called when we are no longer hovering over an element",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragOver",
        "type" : "function",
        "desc" : "Abstract method called when this element is hovering over another\nDragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onInvalidDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on an area with no\ndrop target",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onMouseDown",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mousedown",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onMouseUp",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mouseup",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onNodeDrop",
        "type" : "function",
        "desc" : "Called internally when the DropZone determines that a {@link Roo.dd.DragSource} has been dropped onto\nthe drop node.  The default implementation returns false, so it should be overridden to provide the\nappropriate processing of the drop event and return true so that the drag source's repair action does not run.",
        "sig" : "(nodeData, source, e, data)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onNodeEnter",
        "type" : "function",
        "desc" : "Called internally when the DropZone determines that a {@link Roo.dd.DragSource} has entered a drop node\nthat it has registered.  This method has no default implementation and should be overridden to provide\nnode-specific processing if necessary.",
        "sig" : "(nodeData, source, e, data)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onNodeOut",
        "type" : "function",
        "desc" : "Called internally when the DropZone determines that a {@link Roo.dd.DragSource} has been dragged out of\nthe drop node without dropping.  This method has no default implementation and should be overridden to provide\nnode-specific processing if necessary.",
        "sig" : "(nodeData, source, e, data)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "onNodeOver",
        "type" : "function",
        "desc" : "Called internally while the DropZone determines that a {@link Roo.dd.DragSource} is over a drop node\nthat it has registered.  The default implementation returns this.dropNotAllowed, so it should be\noverridden to provide the proper feedback.",
        "sig" : "(nodeData, source, e, data)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "padding",
        "type" : "function",
        "desc" : "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeFromGroup",
        "type" : "function",
        "desc" : "Remove's this instance from the supplied interaction group",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleClass",
        "type" : "function",
        "desc" : "Unsets an invalid css class",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleId",
        "type" : "function",
        "desc" : "Unsets an invalid handle id",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleType",
        "type" : "function",
        "desc" : "Unsets an excluded tag name set by addInvalidHandleType",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resetConstraints",
        "type" : "function",
        "desc" : "resetConstraints must be called if you manually reposition a dd element.",
        "sig" : "(maintainOffset)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setDragElId",
        "type" : "function",
        "desc" : "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setHandleElId",
        "type" : "function",
        "desc" : "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setInitPosition",
        "type" : "function",
        "desc" : "Stores the initial placement of the linked element.",
        "sig" : "(diffX, diffY)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setOuterHandleElId",
        "type" : "function",
        "desc" : "Allows you to set an element outside of the linked element as a drag\nhandle",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setPadding",
        "type" : "function",
        "desc" : "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.",
        "sig" : "(iTop, iRight, iBot, iLeft)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setXConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis.",
        "sig" : "(iLeft, iRight, iTickSize)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setYConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis.",
        "sig" : "(iUp, iDown, iTickSize)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "startDrag",
        "type" : "function",
        "desc" : "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met.",
        "sig" : "(X, Y)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "toString",
        "type" : "function",
        "desc" : "toString method",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unlock",
        "type" : "function",
        "desc" : "Unlock this instace",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "unreg",
        "type" : "function",
        "desc" : "Remove all drag and drop hooks for this element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      }
    ]
  },
  "Roo.dd.Registry" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "getHandle",
        "type" : "function",
        "desc" : "Returns the handle registered for a DOM Node by id",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getHandleFromEvent",
        "type" : "function",
        "desc" : "Returns the handle that is registered for the DOM node that is the target of the event",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTarget",
        "type" : "function",
        "desc" : "Returns a custom data object that is registered for a DOM node by id",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTargetFromEvent",
        "type" : "function",
        "desc" : "Returns a custom data object that is registered for the DOM node that is the target of the event",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "register",
        "type" : "function",
        "desc" : "Register a drag drop element",
        "sig" : "(element, data)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "unregister",
        "type" : "function",
        "desc" : "Unregister a drag drop element",
        "sig" : "(element)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.dd.ScrollManager" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "refreshCache",
        "type" : "function",
        "desc" : "Manually trigger a cache refresh.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "register",
        "type" : "function",
        "desc" : "Registers new overflow element(s) to auto scroll",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "unregister",
        "type" : "function",
        "desc" : "Unregisters overflow element(s) so they are no longer scrolled",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.dd.StatusProxy" : {
    "props" : [
      {
        "name" : "dropAllowed",
        "type" : "String",
        "desc" : "The CSS class to apply to the status element when drop is allowed (defaults to \"x-dd-drop-ok\").",
        "memberOf" : ""
      },
      {
        "name" : "dropNotAllowed",
        "type" : "String",
        "desc" : "The CSS class to apply to the status element when drop is not allowed (defaults to \"x-dd-drop-nodrop\").",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying proxy {@link Roo.Layer}",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getGhost",
        "type" : "function",
        "desc" : "Returns the ghost element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides the proxy",
        "sig" : "(clear)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "repair",
        "type" : "function",
        "desc" : "Causes the proxy to return to its position of origin via an animation.  Should be called after an\ninvalid drop operation by the item being dragged.",
        "sig" : "(xy, callback, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the status indicator to the default dropNotAllowed value",
        "sig" : "(clearGhost)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setStatus",
        "type" : "function",
        "desc" : "Updates the proxy's visual element to indicate the status of whether or not drop is allowed\nover the current target element.",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Displays this proxy",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "stop",
        "type" : "function",
        "desc" : "Stops the repair animation if it's currently running",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "sync",
        "type" : "function",
        "desc" : "Force the Layer to sync its shadow and shim positions to the element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "update",
        "type" : "function",
        "desc" : "Updates the contents of the ghost element",
        "sig" : "(html)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.form" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.form.Action" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.form.BasicForm" : {
    "props" : [
      {
        "name" : "baseParams",
        "type" : "Object",
        "desc" : "Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.",
        "memberOf" : ""
      },
      {
        "name" : "errorMask",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "errorReader",
        "type" : "DataReader",
        "desc" : "An Roo.data.DataReader (e.g. {@link Roo.data.XmlReader}) to be used to read data when reading validation errors on \"submit\" actions.\nThis is completely optional as there is built-in support for processing JSON.",
        "memberOf" : ""
      },
      {
        "name" : "fileUpload",
        "type" : "Boolean",
        "desc" : "Set to true if this form is a file upload.",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskOffset",
        "type" : "Number",
        "desc" : "Default 100",
        "memberOf" : ""
      },
      {
        "name" : "method",
        "type" : "String",
        "desc" : "The request method to use (GET or POST) for form actions if one isn't supplied in the action options.",
        "memberOf" : ""
      },
      {
        "name" : "reader",
        "type" : "DataReader",
        "desc" : "An Roo.data.DataReader (e.g. {@link Roo.data.XmlReader}) to be used to read data when executing \"load\" actions.\nThis is optional as there is built-in support for processing JSON.",
        "memberOf" : ""
      },
      {
        "name" : "timeout",
        "type" : "Number",
        "desc" : "Timeout for form actions in seconds (default is 30 seconds).",
        "memberOf" : ""
      },
      {
        "name" : "trackResetOnLoad",
        "type" : "Boolean",
        "desc" : "If set to true, form.reset() resets to the last loaded\nor setValues() data instead of when the form was first created.",
        "memberOf" : ""
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "The URL to use for form actions if one isn't supplied in the action options.",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "actioncomplete",
        "type" : "function",
        "desc" : "Fires when an action is completed.",
        "sig" : "function (_self, action)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "actionfailed",
        "type" : "function",
        "desc" : "Fires when an action fails.",
        "sig" : "function (_self, action)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeaction",
        "type" : "function",
        "desc" : "Fires before any action is performed. Return false to cancel the action.",
        "sig" : "function (_self, action)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Add Roo.form components to this form.",
        "sig" : "(field1, field2, etc)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addForm",
        "type" : "function",
        "desc" : "Add a secondary form to this one, \nUsed to provide tabbed forms. One form is primary, with hidden values \nwhich mirror the elements from the other forms.",
        "sig" : "(form)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyIfToFields",
        "type" : "function",
        "desc" : "Calls {@link Ext#applyIf} for all field in this form with the passed object.",
        "sig" : "(values)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "applyToFields",
        "type" : "function",
        "desc" : "Calls {@link Ext#apply} for all fields in this form with the passed object.",
        "sig" : "(values)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clears all invalid messages in this form.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "doAction",
        "type" : "function",
        "desc" : "Performs a predefined action (submit or load) or custom actions you define on this form.",
        "sig" : "(actionName, options)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "findField",
        "type" : "function",
        "desc" : "Find a Roo.form.Field in this form by id, dataIndex, name or hiddenName",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getFieldValues",
        "type" : "function",
        "desc" : "Returns the fields in this form as an object with key/value pairs. \nThis differs from getValues as it calls getValue on each child item, rather than using dom data.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getValues",
        "type" : "function",
        "desc" : "Returns the fields in this form as an object with key/value pairs. If multiple fields exist with the same name\nthey are returned as an array.",
        "sig" : "(asString)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "Returns true if any fields in this form have changed since their original load. (New version)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "invalidFields",
        "type" : "function",
        "desc" : "Returns array of invalid form fields.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "DEPRICATED Returns true if any fields in this form have changed since their original load.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns true if client-side validation on the form is successful.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Shortcut to do a load action.",
        "sig" : "(options)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "loadRecord",
        "type" : "function",
        "desc" : "Loads an Roo.data.Record into this form.",
        "sig" : "(record)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark fields in this form invalid in bulk.",
        "sig" : "(errors)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Removes a field from the items collection (does NOT remove its markup).",
        "sig" : "(field)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Looks at the fields in this form, checks them for an id attribute,\nand calls applyTo on the existing dom element with that id.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets this form.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "Resets all hasChanged to 'false' -\nThe old 'isDirty' used 'original value..' however this breaks reset() and a few other things.\nSo hasChanged storage is only to be used for this purpose",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setValues",
        "type" : "function",
        "desc" : "Set values for fields in this form in bulk.",
        "sig" : "(values)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "submit",
        "type" : "function",
        "desc" : "Shortcut to do a submit action.",
        "sig" : "(options)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateRecord",
        "type" : "function",
        "desc" : "Persists the values in this form into the passed Roo.data.Record object in a beginEdit/endEdit block.",
        "sig" : "(record)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.form.Checkbox" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"checkbox\", autocomplete: \"off\"})",
        "memberOf" : ""
      },
      {
        "name" : "boxLabel",
        "type" : "String",
        "desc" : "The text that appears beside the checkbox",
        "memberOf" : ""
      },
      {
        "name" : "checked",
        "type" : "Boolean",
        "desc" : "True if the the checkbox should render already checked (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the checkbox (defaults to \"x-form-field\")",
        "memberOf" : ""
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the checkbox receives focus (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "inputValue",
        "type" : "String",
        "desc" : "The value that should go into the generated input element's value attribute",
        "memberOf" : ""
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valueOff",
        "type" : "String",
        "desc" : "The value that should go into the generated input element's value when unchecked.",
        "memberOf" : ""
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "check",
        "type" : "function",
        "desc" : "Fires when the checkbox is checked or unchecked.",
        "sig" : "function (_self, checked)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the checked state of the checkbox.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the checked state of the checkbox.\nOn is always based on a string comparison between inputValue and the param.",
        "sig" : "(value, suppressEvent)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      }
    ]
  },
  "Roo.form.Column" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec used to autocreate the column (defaults to {tag: 'div', cls: 'x-form-ct x-form-column'})",
        "memberOf" : ""
      },
      {
        "name" : "clear",
        "type" : "Boolean",
        "desc" : "True to add a clearing element at the end of this layout, equivalent to CSS clear: both (defaults to true)",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideLabels",
        "type" : "Boolean",
        "desc" : "True to suppress the display of field labels in this layout (defaults to false)",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : "Valid values are \"left,\" \"top\" and \"right\" (defaults to \"left\")",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "labelSeparator",
        "type" : "String",
        "desc" : "The separator to use after field labels (defaults to ':')",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "Fixed width in pixels of all field labels (defaults to undefined)",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "style",
        "type" : "String/Object/Function",
        "desc" : "A style specification string, e.g. \"width:100px\", or object in the form {width:\"100px\"}, or\na function which returns such a specification.",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "width",
        "type" : "Number/String",
        "desc" : "The fixed width of the column in pixels or CSS value (defaults to \"auto\")",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addxtype",
        "type" : "function",
        "desc" : "Adds a object form elements (using the xtype property as the factory method.)\nValid xtypes are:  TextField, TextArea .... Button, Layout, FieldSet, Column",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.form.ComboBox" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allQuery",
        "type" : "String",
        "desc" : "The text query to send to the server to return all records for the list with no filtering (defaults to '')",
        "memberOf" : ""
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowLeadingSpace",
        "type" : "Boolean",
        "desc" : "True to prevent the stripping of leading white space",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "alwaysQuery",
        "type" : "Boolean",
        "desc" : "Disable caching of results, and always send query",
        "memberOf" : ""
      },
      {
        "name" : "autoCreate",
        "type" : "Boolean/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to:\n{tag: \"input\", type: \"text\", size: \"24\", autocomplete: \"off\"})",
        "memberOf" : ""
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "blockFocus",
        "type" : "Boolean",
        "desc" : "Prevents all focus calls, so it can work with things like HTML edtor bar",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableClear",
        "type" : "Boolean",
        "desc" : "Disable showing of clear button.",
        "memberOf" : ""
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "displayField",
        "type" : "String",
        "desc" : "The underlying data field name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'text' if mode = 'local')",
        "memberOf" : ""
      },
      {
        "name" : "editable",
        "type" : "Boolean",
        "desc" : "False to prevent the user from typing text directly into the field, just like a\ntraditional select (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "emptyText",
        "type" : "String",
        "desc" : "The default text to display in an empty field - placeholder... (defaults to null).",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the field (defaults to \"x-form-field\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "forceSelection",
        "type" : "Boolean",
        "desc" : "True to restrict the selected value to one of the values in the list, false to\nallow the user to set arbitrary text into the field (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "grow",
        "type" : "Boolean",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "growMax",
        "type" : "Number",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "growMin",
        "type" : "Number",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "handleHeight",
        "type" : "Number",
        "desc" : "The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8)",
        "memberOf" : ""
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hiddenName",
        "type" : "String",
        "desc" : "If specified, a hidden form field with this name is dynamically generated to store the\nfield's data value (defaults to the underlying DOM element's name)",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideTrigger",
        "type" : "Boolean",
        "desc" : "True to hide the trigger element and display only the base text field (defaults to false)",
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "lazyRender",
        "type" : "Boolean",
        "desc" : "True to prevent the ComboBox from rendering until requested (should always be used when\nrendering into an Roo.Editor, defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "listAlign",
        "type" : "String",
        "desc" : "A valid anchor position value. See {@link Roo.Element#alignTo} for details on supported\nanchor positions (defaults to 'tl-bl')",
        "memberOf" : ""
      },
      {
        "name" : "listClass",
        "type" : "String",
        "desc" : "CSS class to apply to the dropdown list element (defaults to '')",
        "memberOf" : ""
      },
      {
        "name" : "listWidth",
        "type" : "Number",
        "desc" : "The width in pixels of the dropdown list (defaults to the width of the ComboBox field)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadingText",
        "type" : "String",
        "desc" : "The text to display in the dropdown list while data is loading.  Only applies\nwhen mode = 'remote' (defaults to 'Loading...')",
        "memberOf" : ""
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxHeight",
        "type" : "Number",
        "desc" : "The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)",
        "memberOf" : ""
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minChars",
        "type" : "Number",
        "desc" : "The minimum number of characters the user must type before autocomplete and typeahead activate\n(defaults to 4, does not apply if editable = false)",
        "memberOf" : ""
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minListWidth",
        "type" : "Number",
        "desc" : "The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if\nlistWidth has a higher value)",
        "memberOf" : ""
      },
      {
        "name" : "mode",
        "type" : "String",
        "desc" : "Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)",
        "memberOf" : ""
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "pageSize",
        "type" : "Number",
        "desc" : "If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the\nfilter queries will execute with page start and limit parameters.  Only applies when mode = 'remote' (defaults to 0)",
        "memberOf" : ""
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "queryDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds to delay between the start of typing and sending the\nquery to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local')",
        "memberOf" : ""
      },
      {
        "name" : "queryParam",
        "type" : "String",
        "desc" : "Name of the query as it will be passed on the querystring (defaults to 'query')",
        "memberOf" : ""
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "resizable",
        "type" : "Boolean",
        "desc" : "True to add a resize handle to the bottom of the dropdown list (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to select any existing text in the field immediately on focus.  Only applies\nwhen editable = true (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "selectedClass",
        "type" : "String",
        "desc" : "CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')",
        "memberOf" : ""
      },
      {
        "name" : "shadow",
        "type" : "Boolean/String",
        "desc" : "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right",
        "memberOf" : ""
      },
      {
        "name" : "store",
        "type" : "Roo.data.Store",
        "desc" : "The data store to which this combo is bound (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "If supplied, a header element is created containing this text and added into the top of\nthe dropdown list (defaults to undefined, with no header element)",
        "memberOf" : ""
      },
      {
        "name" : "tpl",
        "type" : "String/Roo.Template",
        "desc" : "The template to use to render the output",
        "memberOf" : ""
      },
      {
        "name" : "transform",
        "type" : "String/HTMLElement/Element",
        "desc" : "The id, DOM node or element of an existing select to convert to a ComboBox",
        "memberOf" : ""
      },
      {
        "name" : "triggerAction",
        "type" : "String",
        "desc" : "The action to execute when the trigger field is activated.  Use 'all' to run the\nquery specified by the allQuery config option (defaults to 'query')",
        "memberOf" : ""
      },
      {
        "name" : "triggerClass",
        "type" : "String",
        "desc" : "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-arrow-trigger'\nwhich displays a downward arrow icon).",
        "memberOf" : ""
      },
      {
        "name" : "typeAhead",
        "type" : "Boolean",
        "desc" : "True to populate and autoselect the remainder of the text being typed after a configurable\ndelay (typeAheadDelay) if it matches a known value (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "typeAheadDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds to wait until the typeahead text is displayed\nif typeAhead = true (defaults to 250)",
        "memberOf" : ""
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valueField",
        "type" : "String",
        "desc" : "The underlying data value name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'value' if mode = 'local'). \nNote: use of a valueField requires the user make a selection\nin order for a value to be mapped.",
        "memberOf" : ""
      },
      {
        "name" : "valueNotFoundText",
        "type" : "String",
        "desc" : "When using a name/value combo, if the value passed to setValue is not found in\nthe store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Fires when the 'add' icon is pressed (add a listener to enable add button)",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "autosize",
        "type" : "function",
        "desc" : "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.",
        "sig" : "function (_self, width)\n{\n\n}",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforequery",
        "type" : "function",
        "desc" : "Fires before all queries are processed. Return false to cancel the query or set cancel to true.\nThe event object passed has these properties:",
        "sig" : "function (combo, query, forceAll, cancel, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeselect",
        "type" : "function",
        "desc" : "Fires before a list item is selected. Return false to cancel the selection.",
        "sig" : "function (combo, record, index)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Fires when the dropdown list is collapsed",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "edit",
        "type" : "function",
        "desc" : "Fires when the 'edit' icon is pressed (add a listener to enable add button)",
        "sig" : "function (combo, record)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Fires when the dropdown list is expanded",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Fires when a list item is selected",
        "sig" : "function (combo, record, index)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "clearValue",
        "type" : "function",
        "desc" : "Clears any text/value currently set in the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Hides the dropdown list if it is currently expanded. Fires the 'collapse' event on completion.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "doQuery",
        "type" : "function",
        "desc" : "Execute a query to filter the dropdown list.  Fires the beforequery event prior to performing the\nquery allowing the query action to be canceled if needed.",
        "sig" : "(query, forceAll)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expands the dropdown list if it is currently hidden. Fires the 'expand' event on completion.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the currently selected field value or empty string if no value is set.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isExpanded",
        "type" : "function",
        "desc" : "Returns true if the dropdown list is expanded, else false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onTriggerClick",
        "type" : "function",
        "desc" : "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally-loaded value and clears any validation messages.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue.",
        "sig" : "(index, scrollIntoView)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectByValue",
        "type" : "function",
        "desc" : "Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue.",
        "sig" : "(value, scrollIntoView)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectText",
        "type" : "function",
        "desc" : "Selects text in this field",
        "sig" : "(start, end)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setEditable",
        "type" : "function",
        "desc" : "Allow or prevent the user from directly editing the field text.  If false is passed,\nthe user will only be able to select from the items defined in the dropdown list.  This method\nis the runtime equivalent of setting the 'editable' config option at config time.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setFromData",
        "type" : "function",
        "desc" : "Sets the value of the field based on a object which is related to the record format for the store.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the specified value into the field.  If the value finds a match, the corresponding record text\nwill be displayed in the field.  If the value does not match the data value of an existing item,\nand the valueNotFoundText config option is defined, it will be displayed as the default field text.\nOtherwise the field will be blank (although the value will still be set).",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      }
    ]
  },
  "Roo.form.ComboBoxArray" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowLeadingSpace",
        "type" : "Boolean",
        "desc" : "True to prevent the stripping of leading white space",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"20\", autocomplete: \"off\"})",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "combo",
        "type" : "Roo.form.Combo",
        "desc" : "The combo box that is wrapped",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "emptyText",
        "type" : "String",
        "desc" : "The default text to display in an empty field - placeholder... (defaults to null).",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the field (defaults to \"x-form-field\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "grow",
        "type" : "Boolean",
        "desc" : "True if this field should automatically grow and shrink to its content",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "growMax",
        "type" : "Number",
        "desc" : "The maximum width to allow when grow = true (defaults to 800)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "growMin",
        "type" : "Number",
        "desc" : "The minimum width to allow when grow = true (defaults to 30)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hiddenName",
        "type" : "String",
        "desc" : "The hidden name of the field, often contains an comma seperated list of names",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The name of the visable items on this form (eg. titles not ids)",
        "memberOf" : ""
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "seperator",
        "type" : "String",
        "desc" : "The value seperator normally ','",
        "memberOf" : ""
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "The width of the box that displays the selected element",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "autosize",
        "type" : "function",
        "desc" : "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.",
        "sig" : "function (_self, width)\n{\n\n}",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeremove",
        "type" : "function",
        "desc" : "Fires before remove the value from the list",
        "sig" : "function (_self, item)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Fires when remove the value from the list",
        "sig" : "function (_self, item)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.\nThis only takes effect if grow = true, and fires the autosize event.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally-loaded value and clears any validation messages.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "selectText",
        "type" : "function",
        "desc" : "Selects text in this field",
        "sig" : "(start, end)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the combox array value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      }
    ]
  },
  "Roo.form.ComboBoxArray.Item" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      }
    ]
  },
  "Roo.form.ComboCheck" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allQuery",
        "type" : "String",
        "desc" : "The text query to send to the server to return all records for the list with no filtering (defaults to '')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowLeadingSpace",
        "type" : "Boolean",
        "desc" : "True to prevent the stripping of leading white space",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "alwaysQuery",
        "type" : "Boolean",
        "desc" : "Disable caching of results, and always send query",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "autoCreate",
        "type" : "Boolean/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to:\n{tag: \"input\", type: \"text\", size: \"24\", autocomplete: \"off\"})",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "blockFocus",
        "type" : "Boolean",
        "desc" : "Prevents all focus calls, so it can work with things like HTML edtor bar",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableClear",
        "type" : "Boolean",
        "desc" : "Disable showing of clear button.",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "displayField",
        "type" : "String",
        "desc" : "The underlying data field name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'text' if mode = 'local')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "editable",
        "type" : "Boolean",
        "desc" : "False to prevent the user from typing text directly into the field, just like a\ntraditional select (defaults to true)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "emptyText",
        "type" : "String",
        "desc" : "The default text to display in an empty field - placeholder... (defaults to null).",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the field (defaults to \"x-form-field\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "forceSelection",
        "type" : "Boolean",
        "desc" : "True to restrict the selected value to one of the values in the list, false to\nallow the user to set arbitrary text into the field (defaults to false)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "grow",
        "type" : "Boolean",
        "desc" : "",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "growMax",
        "type" : "Number",
        "desc" : "",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "growMin",
        "type" : "Number",
        "desc" : "",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "handleHeight",
        "type" : "Number",
        "desc" : "The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hiddenName",
        "type" : "String",
        "desc" : "If specified, a hidden form field with this name is dynamically generated to store the\nfield's data value (defaults to the underlying DOM element's name)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideTrigger",
        "type" : "Boolean",
        "desc" : "True to hide the trigger element and display only the base text field (defaults to false)",
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "lazyRender",
        "type" : "Boolean",
        "desc" : "True to prevent the ComboBox from rendering until requested (should always be used when\nrendering into an Roo.Editor, defaults to false)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "listAlign",
        "type" : "String",
        "desc" : "A valid anchor position value. See {@link Roo.Element#alignTo} for details on supported\nanchor positions (defaults to 'tl-bl')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "listClass",
        "type" : "String",
        "desc" : "CSS class to apply to the dropdown list element (defaults to '')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "listWidth",
        "type" : "Number",
        "desc" : "The width in pixels of the dropdown list (defaults to the width of the ComboBox field)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadingText",
        "type" : "String",
        "desc" : "The text to display in the dropdown list while data is loading.  Only applies\nwhen mode = 'remote' (defaults to 'Loading...')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxHeight",
        "type" : "Number",
        "desc" : "The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minChars",
        "type" : "Number",
        "desc" : "The minimum number of characters the user must type before autocomplete and typeahead activate\n(defaults to 4, does not apply if editable = false)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minListWidth",
        "type" : "Number",
        "desc" : "The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if\nlistWidth has a higher value)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "mode",
        "type" : "String",
        "desc" : "Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "pageSize",
        "type" : "Number",
        "desc" : "If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the\nfilter queries will execute with page start and limit parameters.  Only applies when mode = 'remote' (defaults to 0)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "queryDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds to delay between the start of typing and sending the\nquery to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "queryParam",
        "type" : "String",
        "desc" : "Name of the query as it will be passed on the querystring (defaults to 'query')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "resizable",
        "type" : "Boolean",
        "desc" : "True to add a resize handle to the bottom of the dropdown list (defaults to false)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to select any existing text in the field immediately on focus.  Only applies\nwhen editable = true (defaults to false)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "selectedClass",
        "type" : "String",
        "desc" : "CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "shadow",
        "type" : "Boolean/String",
        "desc" : "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "store",
        "type" : "Roo.data.Store",
        "desc" : "The data store to which this combo is bound (defaults to undefined)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "If supplied, a header element is created containing this text and added into the top of\nthe dropdown list (defaults to undefined, with no header element)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "tpl",
        "type" : "String/Roo.Template",
        "desc" : "The template to use to render the output",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "transform",
        "type" : "String/HTMLElement/Element",
        "desc" : "The id, DOM node or element of an existing select to convert to a ComboBox",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "triggerAction",
        "type" : "String",
        "desc" : "The action to execute when the trigger field is activated.  Use 'all' to run the\nquery specified by the allQuery config option (defaults to 'query')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "triggerClass",
        "type" : "String",
        "desc" : "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-arrow-trigger'\nwhich displays a downward arrow icon).",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "typeAhead",
        "type" : "Boolean",
        "desc" : "True to populate and autoselect the remainder of the text being typed after a configurable\ndelay (typeAheadDelay) if it matches a known value (defaults to false)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "typeAheadDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds to wait until the typeahead text is displayed\nif typeAhead = true (defaults to 250)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valueField",
        "type" : "String",
        "desc" : "The underlying data value name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'value' if mode = 'local'). \nNote: use of a valueField requires the user make a selection\nin order for a value to be mapped.",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "valueNotFoundText",
        "type" : "String",
        "desc" : "When using a name/value combo, if the value passed to setValue is not found in\nthe store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Fires when the 'add' icon is pressed (add a listener to enable add button)",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "autosize",
        "type" : "function",
        "desc" : "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.",
        "sig" : "function (_self, width)\n{\n\n}",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforequery",
        "type" : "function",
        "desc" : "Fires before all queries are processed. Return false to cancel the query or set cancel to true.\nThe event object passed has these properties:",
        "sig" : "function (combo, query, forceAll, cancel, e)\n{\n\n}",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeselect",
        "type" : "function",
        "desc" : "Fires before a list item is selected. Return false to cancel the selection.",
        "sig" : "function (combo, record, index)\n{\n\n}",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Fires when the dropdown list is collapsed",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "edit",
        "type" : "function",
        "desc" : "Fires when the 'edit' icon is pressed (add a listener to enable add button)",
        "sig" : "function (combo, record)\n{\n\n}",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Fires when the dropdown list is expanded",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Fires when a list item is selected",
        "sig" : "function (combo, record, index)\n{\n\n}",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "clearValue",
        "type" : "function",
        "desc" : "Clears any text/value currently set in the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Hides the dropdown list if it is currently expanded. Fires the 'collapse' event on completion.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "doQuery",
        "type" : "function",
        "desc" : "Execute a query to filter the dropdown list.  Fires the beforequery event prior to performing the\nquery allowing the query action to be canceled if needed.",
        "sig" : "(query, forceAll)",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expands the dropdown list if it is currently hidden. Fires the 'expand' event on completion.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the currently selected field value or empty string if no value is set.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isExpanded",
        "type" : "function",
        "desc" : "Returns true if the dropdown list is expanded, else false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onTriggerClick",
        "type" : "function",
        "desc" : "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally-loaded value and clears any validation messages.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue.",
        "sig" : "(index, scrollIntoView)",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "selectByValue",
        "type" : "function",
        "desc" : "Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue.",
        "sig" : "(value, scrollIntoView)",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "selectText",
        "type" : "function",
        "desc" : "Selects text in this field",
        "sig" : "(start, end)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setEditable",
        "type" : "function",
        "desc" : "Allow or prevent the user from directly editing the field text.  If false is passed,\nthe user will only be able to select from the items defined in the dropdown list.  This method\nis the runtime equivalent of setting the 'editable' config option at config time.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "setFromData",
        "type" : "function",
        "desc" : "Sets the value of the field based on a object which is related to the record format for the store.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the specified value into the field.  If the value finds a match, the corresponding record text\nwill be displayed in the field.  If the value does not match the data value of an existing item,\nand the valueNotFoundText config option is defined, it will be displayed as the default field text.\nOtherwise the field will be blank (although the value will still be set).",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      }
    ]
  },
  "Roo.form.ComboNested" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allQuery",
        "type" : "String",
        "desc" : "The text query to send to the server to return all records for the list with no filtering (defaults to '')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowLeadingSpace",
        "type" : "Boolean",
        "desc" : "True to prevent the stripping of leading white space",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "alwaysQuery",
        "type" : "Boolean",
        "desc" : "Disable caching of results, and always send query",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "autoCreate",
        "type" : "Boolean/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to:\n{tag: \"input\", type: \"text\", size: \"24\", autocomplete: \"off\"})",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "blockFocus",
        "type" : "Boolean",
        "desc" : "Prevents all focus calls, so it can work with things like HTML edtor bar",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableClear",
        "type" : "Boolean",
        "desc" : "Disable showing of clear button.",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "displayField",
        "type" : "String",
        "desc" : "The underlying data field name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'text' if mode = 'local')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "editable",
        "type" : "Boolean",
        "desc" : "False to prevent the user from typing text directly into the field, just like a\ntraditional select (defaults to true)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "emptyText",
        "type" : "String",
        "desc" : "The default text to display in an empty field - placeholder... (defaults to null).",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the field (defaults to \"x-form-field\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "forceSelection",
        "type" : "Boolean",
        "desc" : "True to restrict the selected value to one of the values in the list, false to\nallow the user to set arbitrary text into the field (defaults to false)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "grow",
        "type" : "Boolean",
        "desc" : "",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "growMax",
        "type" : "Number",
        "desc" : "",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "growMin",
        "type" : "Number",
        "desc" : "",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "handleHeight",
        "type" : "Number",
        "desc" : "The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hiddenName",
        "type" : "String",
        "desc" : "If specified, a hidden form field with this name is dynamically generated to store the\nfield's data value (defaults to the underlying DOM element's name)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideTrigger",
        "type" : "Boolean",
        "desc" : "True to hide the trigger element and display only the base text field (defaults to false)",
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "lazyRender",
        "type" : "Boolean",
        "desc" : "True to prevent the ComboBox from rendering until requested (should always be used when\nrendering into an Roo.Editor, defaults to false)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "listAlign",
        "type" : "String",
        "desc" : "A valid anchor position value. See {@link Roo.Element#alignTo} for details on supported\nanchor positions (defaults to 'tl-bl')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "listClass",
        "type" : "String",
        "desc" : "CSS class to apply to the dropdown list element (defaults to '')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "listWidth",
        "type" : "Number",
        "desc" : "The width in pixels of the dropdown list (defaults to the width of the ComboBox field)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadingText",
        "type" : "String",
        "desc" : "The text to display in the dropdown list while data is loading.  Only applies\nwhen mode = 'remote' (defaults to 'Loading...')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxHeight",
        "type" : "Number",
        "desc" : "The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minChars",
        "type" : "Number",
        "desc" : "The minimum number of characters the user must type before autocomplete and typeahead activate\n(defaults to 4, does not apply if editable = false)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minListWidth",
        "type" : "Number",
        "desc" : "The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if\nlistWidth has a higher value)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "mode",
        "type" : "String",
        "desc" : "Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "pageSize",
        "type" : "Number",
        "desc" : "If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the\nfilter queries will execute with page start and limit parameters.  Only applies when mode = 'remote' (defaults to 0)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "queryDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds to delay between the start of typing and sending the\nquery to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "queryParam",
        "type" : "String",
        "desc" : "Name of the query as it will be passed on the querystring (defaults to 'query')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "resizable",
        "type" : "Boolean",
        "desc" : "True to add a resize handle to the bottom of the dropdown list (defaults to false)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to select any existing text in the field immediately on focus.  Only applies\nwhen editable = true (defaults to false)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "selectedClass",
        "type" : "String",
        "desc" : "CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "shadow",
        "type" : "Boolean/String",
        "desc" : "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "store",
        "type" : "Roo.data.Store",
        "desc" : "The data store to which this combo is bound (defaults to undefined)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "If supplied, a header element is created containing this text and added into the top of\nthe dropdown list (defaults to undefined, with no header element)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "tpl",
        "type" : "String/Roo.Template",
        "desc" : "The template to use to render the output",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "transform",
        "type" : "String/HTMLElement/Element",
        "desc" : "The id, DOM node or element of an existing select to convert to a ComboBox",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "triggerAction",
        "type" : "String",
        "desc" : "The action to execute when the trigger field is activated.  Use 'all' to run the\nquery specified by the allQuery config option (defaults to 'query')",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "triggerClass",
        "type" : "String",
        "desc" : "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-arrow-trigger'\nwhich displays a downward arrow icon).",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "typeAhead",
        "type" : "Boolean",
        "desc" : "True to populate and autoselect the remainder of the text being typed after a configurable\ndelay (typeAheadDelay) if it matches a known value (defaults to false)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "typeAheadDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds to wait until the typeahead text is displayed\nif typeAhead = true (defaults to 250)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valueField",
        "type" : "String",
        "desc" : "The underlying data value name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'value' if mode = 'local'). \nNote: use of a valueField requires the user make a selection\nin order for a value to be mapped.",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "valueNotFoundText",
        "type" : "String",
        "desc" : "When using a name/value combo, if the value passed to setValue is not found in\nthe store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Fires when the 'add' icon is pressed (add a listener to enable add button)",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "autosize",
        "type" : "function",
        "desc" : "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.",
        "sig" : "function (_self, width)\n{\n\n}",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforequery",
        "type" : "function",
        "desc" : "Fires before all queries are processed. Return false to cancel the query or set cancel to true.\nThe event object passed has these properties:",
        "sig" : "function (combo, query, forceAll, cancel, e)\n{\n\n}",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeselect",
        "type" : "function",
        "desc" : "Fires before a list item is selected. Return false to cancel the selection.",
        "sig" : "function (combo, record, index)\n{\n\n}",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Fires when the dropdown list is collapsed",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "edit",
        "type" : "function",
        "desc" : "Fires when the 'edit' icon is pressed (add a listener to enable add button)",
        "sig" : "function (combo, record)\n{\n\n}",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Fires when the dropdown list is expanded",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Fires when a list item is selected",
        "sig" : "function (combo, record, index)\n{\n\n}",
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "clearValue",
        "type" : "function",
        "desc" : "Clears any text/value currently set in the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Hides the dropdown list if it is currently expanded. Fires the 'collapse' event on completion.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "doQuery",
        "type" : "function",
        "desc" : "Execute a query to filter the dropdown list.  Fires the beforequery event prior to performing the\nquery allowing the query action to be canceled if needed.",
        "sig" : "(query, forceAll)",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expands the dropdown list if it is currently hidden. Fires the 'expand' event on completion.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the currently selected field value or empty string if no value is set.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isExpanded",
        "type" : "function",
        "desc" : "Returns true if the dropdown list is expanded, else false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onTriggerClick",
        "type" : "function",
        "desc" : "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally-loaded value and clears any validation messages.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue.",
        "sig" : "(index, scrollIntoView)",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "selectByValue",
        "type" : "function",
        "desc" : "Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue.",
        "sig" : "(value, scrollIntoView)",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "selectText",
        "type" : "function",
        "desc" : "Selects text in this field",
        "sig" : "(start, end)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setEditable",
        "type" : "function",
        "desc" : "Allow or prevent the user from directly editing the field text.  If false is passed,\nthe user will only be able to select from the items defined in the dropdown list.  This method\nis the runtime equivalent of setting the 'editable' config option at config time.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "setFromData",
        "type" : "function",
        "desc" : "Sets the value of the field based on a object which is related to the record format for the store.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the specified value into the field.  If the value finds a match, the corresponding record text\nwill be displayed in the field.  If the value does not match the data value of an existing item,\nand the valueNotFoundText config option is defined, it will be displayed as the default field text.\nOtherwise the field will be blank (although the value will still be set).",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.ComboBox"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      }
    ]
  },
  "Roo.form.DateField" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowLeadingSpace",
        "type" : "Boolean",
        "desc" : "True to prevent the stripping of leading white space",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "altFormats",
        "type" : "String",
        "desc" : "Multiple date formats separated by \"|\" to try when parsing a user input value and it doesn't match the defined\nformat (defaults to 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d').",
        "memberOf" : ""
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"10\", autocomplete: \"off\"})",
        "memberOf" : ""
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disabledDates",
        "type" : "Array",
        "desc" : "An array of \"dates\" to disable, as strings. These strings will be used to build a dynamic regular\nexpression so they are very powerful. Some examples:\n<ul>\n<li>[\"03/08/2003\", \"09/16/2003\"] would disable those exact dates</li>\n<li>[\"03/08\", \"09/16\"] would disable those days for every year</li>\n<li>[\"^03/08\"] would only match the beginning (useful if you are using short years)</li>\n<li>[\"03/../2006\"] would disable every day in March 2006</li>\n<li>[\"^03\"] would disable every day in every March</li>\n</ul>\nIn order to support regular expressions, if you are using a date format that has \".\" in it, you will have to\nescape the dot when restricting dates. For example: [\"03\\\\.08\\\\.03\"].",
        "memberOf" : ""
      },
      {
        "name" : "disabledDatesText",
        "type" : "String",
        "desc" : "The tooltip text to display when the date falls on a disabled date (defaults to 'Disabled')",
        "memberOf" : ""
      },
      {
        "name" : "disabledDays",
        "type" : "Array",
        "desc" : "An array of days to disable, 0 based. For example, [0, 6] disables Sunday and Saturday (defaults to null).",
        "memberOf" : ""
      },
      {
        "name" : "disabledDaysText",
        "type" : "String",
        "desc" : "The tooltip to display when the date falls on a disabled day (defaults to 'Disabled')",
        "memberOf" : ""
      },
      {
        "name" : "emptyText",
        "type" : "String",
        "desc" : "The default text to display in an empty field - placeholder... (defaults to null).",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the field (defaults to \"x-form-field\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "format",
        "type" : "String",
        "desc" : "The default date format string which can be overriden for localization support.  The format must be\nvalid according to {@link Date#parseDate} (defaults to 'm/d/y').",
        "memberOf" : ""
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideTrigger",
        "type" : "Boolean",
        "desc" : "True to hide the trigger element and display only the base text field (defaults to false)",
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to display when the date in the field is invalid (defaults to\n'{value} is not a valid date - it must be in the format {format}').",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxText",
        "type" : "String",
        "desc" : "The error text to display when the date in the cell is after maxValue (defaults to\n'The date in this field must be before {maxValue}').",
        "memberOf" : ""
      },
      {
        "name" : "maxValue",
        "type" : "Date/String",
        "desc" : "The maximum allowed date. Can be either a Javascript date object or a string date in a\nvalid format (defaults to null).",
        "memberOf" : ""
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minText",
        "type" : "String",
        "desc" : "The error text to display when the date in the cell is before minValue (defaults to\n'The date in this field must be after {minValue}').",
        "memberOf" : ""
      },
      {
        "name" : "minValue",
        "type" : "Date/String",
        "desc" : "The minimum allowed date. Can be either a Javascript date object or a string date in a\nvalid format (defaults to null).",
        "memberOf" : ""
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "triggerClass",
        "type" : "String",
        "desc" : "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-date-trigger'\nwhich displays a calendar icon).",
        "memberOf" : ""
      },
      {
        "name" : "useIso",
        "type" : "Boolean",
        "desc" : "if enabled, then the date field will use a hidden field to store the \nreal value as iso formated date. default (false)",
        "memberOf" : ""
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "autosize",
        "type" : "function",
        "desc" : "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.",
        "sig" : "function (_self, width)\n{\n\n}",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Fires when a date is selected",
        "sig" : "function (combo, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the current date value of the date field.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onTriggerClick",
        "type" : "function",
        "desc" : "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally-loaded value and clears any validation messages.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "selectText",
        "type" : "function",
        "desc" : "Selects text in this field",
        "sig" : "(start, end)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the value of the date field.  You can pass a date object or any string that can be parsed into a valid\ndate, using DateField.format as the date format, according to the same rules as {@link Date#parseDate}\n(the default format used is \"m/d/y\").\n<br />Usage:\n<pre><code>\n//All of these calls set the same date value (May 4, 2006)\n\n//Pass a date object:\nvar dt = new Date('5/4/06');\ndateField.setValue(dt);\n\n//Pass a date string (default format):\ndateField.setValue('5/4/06');\n\n//Pass a date string (custom format):\ndateField.format = 'Y-m-d';\ndateField.setValue('2006-5-4');\n</code></pre>",
        "sig" : "(date)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      }
    ]
  },
  "Roo.form.DayPicker" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"checkbox\", autocomplete: \"off\"})",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the checkbox (defaults to \"x-form-field\")",
        "memberOf" : ""
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the checkbox receives focus (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the checked state of the checkbox.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the checked state of the checkbox.\nOn is always based on a string comparison between inputValue and the param.",
        "sig" : "(value, suppressEvent)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      }
    ]
  },
  "Roo.form.DisplayField" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"checkbox\", autocomplete: \"off\"})",
        "memberOf" : ""
      },
      {
        "name" : "closable",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the checkbox (defaults to \"x-form-field\")",
        "memberOf" : ""
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the checkbox receives focus (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valueRenderer",
        "type" : "Function",
        "desc" : "The renderer for the field (so you can reformat output). should return raw HTML",
        "memberOf" : ""
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "close",
        "type" : "function",
        "desc" : "Fires after the click the close btn",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the checked state of the checkbox.",
        "sig" : "(checked)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      }
    ]
  },
  "Roo.form.FCKeditor" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowLeadingSpace",
        "type" : "Boolean",
        "desc" : "True to prevent the stripping of leading white space",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"textarea\", style: \"width:300px;height:60px;\", autocomplete: \"off\"})",
        "memberOf" : "Roo.form.TextArea"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "emptyText",
        "type" : "String",
        "desc" : "The default text to display in an empty field - placeholder... (defaults to null).",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "fck",
        "type" : "Object",
        "desc" : "BasePath",
        "memberOf" : ""
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the field (defaults to \"x-form-field\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "grow",
        "type" : "Boolean",
        "desc" : "True if this field should automatically grow and shrink to its content",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "growMax",
        "type" : "Number",
        "desc" : "The maximum height to allow when grow = true (defaults to 1000)",
        "memberOf" : "Roo.form.TextArea"
      },
      {
        "name" : "growMin",
        "type" : "Number",
        "desc" : "The minimum height to allow when grow = true (defaults to 60)",
        "memberOf" : "Roo.form.TextArea"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "preventScrollbars",
        "type" : "Boolean",
        "desc" : "True to prevent scrollbars from appearing regardless of how much text is\nin the field (equivalent to setting overflow: hidden, defaults to false)",
        "memberOf" : "Roo.form.TextArea"
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "autosize",
        "type" : "function",
        "desc" : "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.",
        "sig" : "function (_self, width)\n{\n\n}",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "editorinit",
        "type" : "function",
        "desc" : "Fired when the editor is initialized - you can add extra handlers here..",
        "sig" : "function (_self, the)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "Automatically grows the field to accomodate the height of the text up to the maximum field height allowed.\nThis only takes effect if grow = true, and fires the autosize event if the height changes.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TextArea"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally-loaded value and clears any validation messages.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "selectText",
        "type" : "function",
        "desc" : "Selects text in this field",
        "sig" : "(start, end)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      }
    ]
  },
  "Roo.form.Field" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"20\", autocomplete: \"off\"})",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : ""
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the field (defaults to \"x-form-field\")",
        "memberOf" : ""
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : ""
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : ""
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : ""
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : ""
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : ""
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : ""
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : ""
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : ""
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : ""
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : ""
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : ""
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : ""
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : ""
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : ""
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.form.FieldSet" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec used to autocreate the fieldset (defaults to {tag: 'fieldset', cn: {tag:'legend'}})",
        "memberOf" : ""
      },
      {
        "name" : "clear",
        "type" : "Boolean",
        "desc" : "True to add a clearing element at the end of this layout, equivalent to CSS clear: both (defaults to true)",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideLabels",
        "type" : "Boolean",
        "desc" : "True to suppress the display of field labels in this layout (defaults to false)",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : "Valid values are \"left,\" \"top\" and \"right\" (defaults to \"left\")",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "labelSeparator",
        "type" : "String",
        "desc" : "The separator to use after field labels (defaults to ':')",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "Fixed width in pixels of all field labels (defaults to undefined)",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "legend",
        "type" : "String",
        "desc" : "The text to display as the legend for the FieldSet (defaults to '')",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "style",
        "type" : "String/Object/Function",
        "desc" : "A style specification string, e.g. \"width:100px\", or object in the form {width:\"100px\"}, or\na function which returns such a specification.",
        "memberOf" : "Roo.form.Layout"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addxtype",
        "type" : "function",
        "desc" : "Adds a object form elements (using the xtype property as the factory method.)\nValid xtypes are:  TextField, TextArea .... Button, Layout, FieldSet, Column",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.form.Form" : {
    "props" : [
      {
        "name" : "baseParams",
        "type" : "Object",
        "desc" : "Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.",
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "buttonAlign",
        "type" : "String",
        "desc" : "Valid values are \"left,\" \"center\" and \"right\" (defaults to \"center\")",
        "memberOf" : ""
      },
      {
        "name" : "errorMask",
        "type" : "Boolean",
        "desc" : [
          "(true",
          "false)"
        ],
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "errorReader",
        "type" : "DataReader",
        "desc" : "An Roo.data.DataReader (e.g. {@link Roo.data.XmlReader}) to be used to read data when reading validation errors on \"submit\" actions.\nThis is completely optional as there is built-in support for processing JSON.",
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "fileUpload",
        "type" : "Boolean",
        "desc" : "Set to true if this form is a file upload.",
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "formData",
        "type" : "boolean|FormData",
        "desc" : "- true to use new 'FormData' post, or set to a new FormData({dom form}) Object, if\nsending a formdata with extra parameters - eg uploaded elements.",
        "memberOf" : ""
      },
      {
        "name" : "itemCls",
        "type" : "String",
        "desc" : "A css class to apply to the x-form-item of fields. This property cascades to child containers.",
        "memberOf" : ""
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : "Valid values are \"left,\" \"top\" and \"right\" (defaults to \"left\").\nThis property cascades to child containers if not set.",
        "memberOf" : ""
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "The width of labels. This property cascades to child containers.",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskOffset",
        "type" : "Number",
        "desc" : "Default 100",
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "method",
        "type" : "String",
        "desc" : "The request method to use (GET or POST) for form actions if one isn't supplied in the action options.",
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "minButtonWidth",
        "type" : "Number",
        "desc" : "Minimum width of all buttons in pixels (defaults to 75)",
        "memberOf" : ""
      },
      {
        "name" : "monitorPoll",
        "type" : "Number",
        "desc" : "The milliseconds to poll valid state, ignored if monitorValid is not true (defaults to 200)",
        "memberOf" : ""
      },
      {
        "name" : "monitorValid",
        "type" : "Boolean",
        "desc" : "If true the form monitors its valid state <b>client-side</b> and\nfires a looping event with that state. This is required to bind buttons to the valid\nstate using the config value formBind:true on the button.",
        "memberOf" : ""
      },
      {
        "name" : "progressUrl",
        "type" : "String",
        "desc" : "- Url to return progress data",
        "memberOf" : ""
      },
      {
        "name" : "reader",
        "type" : "DataReader",
        "desc" : "An Roo.data.DataReader (e.g. {@link Roo.data.XmlReader}) to be used to read data when executing \"load\" actions.\nThis is optional as there is built-in support for processing JSON.",
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "timeout",
        "type" : "Number",
        "desc" : "Timeout for form actions in seconds (default is 30 seconds).",
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "trackResetOnLoad",
        "type" : "Boolean",
        "desc" : "If set to true, form.reset() resets to the last loaded\nor setValues() data instead of when the form was first created.",
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "url",
        "type" : "String",
        "desc" : "The URL to use for form actions if one isn't supplied in the action options.",
        "memberOf" : "Roo.form.BasicForm"
      }
    ],
    "events" : [
      {
        "name" : "actioncomplete",
        "type" : "function",
        "desc" : "Fires when an action is completed.",
        "sig" : "function (_self, action)\n{\n\n}",
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "actionfailed",
        "type" : "function",
        "desc" : "Fires when an action fails.",
        "sig" : "function (_self, action)\n{\n\n}",
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "beforeaction",
        "type" : "function",
        "desc" : "Fires before any action is performed. Return false to cancel the action.",
        "sig" : "function (_self, action)\n{\n\n}",
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "clientvalidation",
        "type" : "function",
        "desc" : "If the monitorValid config option is true, this event fires repetitively to notify of valid state",
        "sig" : "function (_self, valid)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "rendered",
        "type" : "function",
        "desc" : "Fires when the form is rendered",
        "sig" : "function (form)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Add Roo.form components to the current open container (e.g. column, fieldset, etc.).  Fields added via this method\ncan also be passed with an additional property of fieldLabel, which if supplied, will provide the text to display\nas the label of the field.",
        "sig" : "(field1, field2)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addButton",
        "type" : "function",
        "desc" : "Adds a button to the footer of the form - this <b>must</b> be called before the form is rendered.",
        "sig" : "(config, handler, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addForm",
        "type" : "function",
        "desc" : "Add a secondary form to this one, \nUsed to provide tabbed forms. One form is primary, with hidden values \nwhich mirror the elements from the other forms.",
        "sig" : "(form)",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addxtype",
        "type" : "function",
        "desc" : "Adds a series of form elements (using the xtype property as the factory method.\nValid xtypes are:  TextField, TextArea .... Button, Layout, FieldSet, Column, (and 'end' to close a block)",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "applyIfToFields",
        "type" : "function",
        "desc" : "Calls {@link Ext#applyIf} for all field in this form with the passed object.",
        "sig" : "(values)",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "applyToFields",
        "type" : "function",
        "desc" : "Calls {@link Ext#apply} for all fields in this form with the passed object.",
        "sig" : "(values)",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clears all invalid messages in this form.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "column",
        "type" : "function",
        "desc" : "Opens a new {@link Roo.form.Column} container in the layout stack. If fields are passed after the config, the\nfields are added and the column is closed. If no fields are passed the column remains open\nuntil end() is called.",
        "sig" : "(config, field1, field2, etc)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "container",
        "type" : "function",
        "desc" : "Opens a new {@link Roo.form.Layout} container in the layout stack. If fields are passed after the config, the\nfields are added and the container is closed. If no fields are passed the container remains open\nuntil end() is called.",
        "sig" : "(config, field1, field2, etc)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "doAction",
        "type" : "function",
        "desc" : "Performs a predefined action (submit or load) or custom actions you define on this form.",
        "sig" : "(actionName, options)",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "end",
        "type" : "function",
        "desc" : "Closes the current open container",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fieldset",
        "type" : "function",
        "desc" : "Opens a new {@link Roo.form.FieldSet} container in the layout stack. If fields are passed after the config, the\nfields are added and the fieldset is closed. If no fields are passed the fieldset remains open\nuntil end() is called.",
        "sig" : "(config, field1, field2, etc)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "findField",
        "type" : "function",
        "desc" : "Find a Roo.form.Field in this form by id, dataIndex, name or hiddenName",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "findbyId",
        "type" : "function",
        "desc" : "Find any element that has been added to a form, using it's ID or name\nThis can include framesets, columns etc. along with regular fields..",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getFieldValues",
        "type" : "function",
        "desc" : "Returns the fields in this form as an object with key/value pairs. \nThis differs from getValues as it calls getValue on each child item, rather than using dom data.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "getValues",
        "type" : "function",
        "desc" : "Returns the fields in this form as an object with key/value pairs. If multiple fields exist with the same name\nthey are returned as an array.",
        "sig" : "(asString)",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "Returns true if any fields in this form have changed since their original load. (New version)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "invalidFields",
        "type" : "function",
        "desc" : "Returns array of invalid form fields.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "DEPRICATED Returns true if any fields in this form have changed since their original load.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns true if client-side validation on the form is successful.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Shortcut to do a load action.",
        "sig" : "(options)",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "loadRecord",
        "type" : "function",
        "desc" : "Loads an Roo.data.Record into this form.",
        "sig" : "(record)",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark fields in this form invalid in bulk.",
        "sig" : "(errors)",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Removes a field from the items collection (does NOT remove its markup).",
        "sig" : "(field)",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Render this form into the passed container. This should only be called once!",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets this form.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "Resets all hasChanged to 'false' -\nThe old 'isDirty' used 'original value..' however this breaks reset() and a few other things.\nSo hasChanged storage is only to be used for this purpose",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "setValues",
        "type" : "function",
        "desc" : "Set values for fields in this form in bulk.",
        "sig" : "(values)",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "start",
        "type" : "function",
        "desc" : "Opens the passed container in the layout stack. The container can be any {@link Roo.form.Layout} or subclass.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "startMonitoring",
        "type" : "function",
        "desc" : "Starts monitoring of the valid state of this form. Usually this is done by passing the config\noption \"monitorValid\"",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "stopMonitoring",
        "type" : "function",
        "desc" : "Stops monitoring of the valid state of this form",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "submit",
        "type" : "function",
        "desc" : "Shortcut to do a submit action.",
        "sig" : "(options)",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateRecord",
        "type" : "function",
        "desc" : "Persists the values in this form into the passed Roo.data.Record object in a beginEdit/endEdit block.",
        "sig" : "(record)",
        "static" : false,
        "memberOf" : "Roo.form.BasicForm"
      }
    ]
  },
  "Roo.form.GridField" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "addTitle",
        "type" : "String",
        "desc" : "Text to include for adding a title.",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"checkbox\", autocomplete: \"off\"})",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the field (defaults to \"x-form-field\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "- used to restrict height of grid..",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "- used to restrict width of grid..",
        "memberOf" : ""
      },
      {
        "name" : "xgrid",
        "type" : "Object",
        "desc" : "(xtype'd description of grid) { xtype : 'Grid', dataSource: .... }\n\n}",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the value of the item.",
        "sig" : "(either)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      }
    ]
  },
  "Roo.form.Hidden" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowLeadingSpace",
        "type" : "Boolean",
        "desc" : "True to prevent the stripping of leading white space",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"20\", autocomplete: \"off\"})",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "emptyText",
        "type" : "String",
        "desc" : "The default text to display in an empty field - placeholder... (defaults to null).",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the field (defaults to \"x-form-field\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "grow",
        "type" : "Boolean",
        "desc" : "True if this field should automatically grow and shrink to its content",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "growMax",
        "type" : "Number",
        "desc" : "The maximum width to allow when grow = true (defaults to 800)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "growMin",
        "type" : "Number",
        "desc" : "The minimum width to allow when grow = true (defaults to 30)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "autosize",
        "type" : "function",
        "desc" : "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.",
        "sig" : "function (_self, width)\n{\n\n}",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.\nThis only takes effect if grow = true, and fires the autosize event.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally-loaded value and clears any validation messages.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "selectText",
        "type" : "function",
        "desc" : "Selects text in this field",
        "sig" : "(start, end)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      }
    ]
  },
  "Roo.form.HtmlEditor" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blacklist",
        "type" : "Array",
        "desc" : "of html tags - in addition to standard blacklist.",
        "memberOf" : ""
      },
      {
        "name" : "clearUp",
        "type" : "Boolean",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "(in pixels)",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "resizable",
        "type" : "String",
        "desc" : "'s' or 'se' or 'e' - wrapps the element in a\n                       Roo.resizable.",
        "memberOf" : ""
      },
      {
        "name" : "stylesheets",
        "type" : "Array",
        "desc" : "url of stylesheets. set to [] to disable stylesheets.",
        "memberOf" : ""
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "toolbars",
        "type" : "Array",
        "desc" : "Array of toolbars. - defaults to just the Standard one",
        "memberOf" : ""
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "whitelist",
        "type" : "Array",
        "desc" : "of html tags - in addition to statndard whitelist",
        "memberOf" : ""
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "(in pixels)",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when the editor is first receives the focus. Any insertion must wait\nuntil after this event.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "autosave",
        "type" : "function",
        "desc" : "Auto save the htmlEditor value as a file into Events",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforepush",
        "type" : "function",
        "desc" : "Fires before the iframe editor is updated with content from the textarea. Return false\nto cancel the push.",
        "sig" : "function (_self, html)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforesync",
        "type" : "function",
        "desc" : "Fires before the textarea is updated with content from the editor iframe. Return false\nto cancel the sync.",
        "sig" : "function (_self, html)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "",
        "sig" : "function ()\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "",
        "sig" : "function ()\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "editmodechange",
        "type" : "function",
        "desc" : "Fires when the editor switches edit modes",
        "sig" : "function (_self, sourceEdit)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "editorevent",
        "type" : "function",
        "desc" : "Fires when on any editor (mouse up/down cursor movement etc.) - used for toolbar hooks.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "firstfocus",
        "type" : "function",
        "desc" : "Fires when on first focus - needed by toolbars..",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "",
        "sig" : "function ()\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "initialize",
        "type" : "function",
        "desc" : "Fires when the editor is fully initialized (including the iframe)",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "push",
        "type" : "function",
        "desc" : "Fires when the iframe editor is updated with content from the textarea.",
        "sig" : "function (_self, html)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "savedpreview",
        "type" : "function",
        "desc" : "preview the saved version of htmlEditor",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "",
        "sig" : "function ()\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "stylesheetsclick",
        "type" : "function",
        "desc" : "Fires when press the Sytlesheets button",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "sync",
        "type" : "function",
        "desc" : "Fires when the textarea is updated with content from the editor iframe.",
        "sig" : "function (_self, html)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "createToolbar",
        "type" : "function",
        "desc" : "Protected method that will not generally be called directly. It\nis called when the editor creates its toolbar. Override this method if you need to\nadd custom toolbar buttons.",
        "sig" : "(editor)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "toggleSourceEdit",
        "type" : "function",
        "desc" : "Toggles the editor between standard and source edit mode.",
        "sig" : "(sourceEdit)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      }
    ]
  },
  "Roo.form.HtmlEditor.ToolbarContext" : {
    "props" : [
      {
        "name" : "disable",
        "type" : "Object",
        "desc" : "List of toolbar elements to disable",
        "memberOf" : ""
      },
      {
        "name" : "styles",
        "type" : "Object",
        "desc" : "List of styles \n   eg. { '*' : [ 'headline' ] , 'TD' : [ 'underline', 'double-underline' ] } \n\nThese must be defined in the page, so they get rendered correctly..\n.headline { }\nTD.underline { }",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "updateToolbar",
        "type" : "function",
        "desc" : "Protected method that will not generally be called directly. It triggers\na toolbar update by reading the markup state of the current selection in the editor.\n\nNote you can force an update by calling on('editorevent', scope, false)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.form.HtmlEditor.ToolbarStandard" : {
    "props" : [
      {
        "name" : "btns",
        "type" : "Array",
        "desc" : "List of additional buttons.\n\n\nNEEDS Extra CSS? \n.x-html-editor-tb .x-edit-none .x-btn-text { background: none; }",
        "memberOf" : ""
      },
      {
        "name" : "createLinkText",
        "type" : "String",
        "desc" : "The default text for the create link prompt",
        "memberOf" : ""
      },
      {
        "name" : "defaultFont",
        "type" : "String",
        "desc" : "default font to use.",
        "memberOf" : ""
      },
      {
        "name" : "defaultLinkValue",
        "type" : "String",
        "desc" : "The default value for the create link prompt (defaults to http:/ /)",
        "memberOf" : ""
      },
      {
        "name" : "disable",
        "type" : "Object",
        "desc" : "List of elements to disable..",
        "memberOf" : ""
      },
      {
        "name" : "fontFamilies",
        "type" : "Array",
        "desc" : "An array of available font families",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "updateToolbar",
        "type" : "function",
        "desc" : "Protected method that will not generally be called directly. It triggers\na toolbar update by reading the markup state of the current selection in the editor.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.form.Layout" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec used to autocreate the layout (defaults to {tag: 'div', cls: 'x-form-ct'})",
        "memberOf" : ""
      },
      {
        "name" : "clear",
        "type" : "Boolean",
        "desc" : "True to add a clearing element at the end of this layout, equivalent to CSS clear: both (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideLabels",
        "type" : "Boolean",
        "desc" : "True to suppress the display of field labels in this layout (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : "Valid values are \"left,\" \"top\" and \"right\" (defaults to \"left\")",
        "memberOf" : ""
      },
      {
        "name" : "labelSeparator",
        "type" : "String",
        "desc" : "The separator to use after field labels (defaults to ':')",
        "memberOf" : ""
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "Fixed width in pixels of all field labels (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "style",
        "type" : "String/Object/Function",
        "desc" : "A style specification string, e.g. \"width:100px\", or object in the form {width:\"100px\"}, or\na function which returns such a specification.",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addxtype",
        "type" : "function",
        "desc" : "Adds a object form elements (using the xtype property as the factory method.)\nValid xtypes are:  TextField, TextArea .... Button, Layout, FieldSet, Column",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.form.MonthField" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowLeadingSpace",
        "type" : "Boolean",
        "desc" : "True to prevent the stripping of leading white space",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "altFormats",
        "type" : "String",
        "desc" : "Multiple date formats separated by \"|\" to try when parsing a user input value and it doesn't match the defined\nformat (defaults to 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d').",
        "memberOf" : ""
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"10\", autocomplete: \"off\"})",
        "memberOf" : ""
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disabledDates",
        "type" : "Array",
        "desc" : "An array of \"dates\" to disable, as strings. These strings will be used to build a dynamic regular\nexpression so they are very powerful. Some examples:\n<ul>\n<li>[\"03/08/2003\", \"09/16/2003\"] would disable those exact dates</li>\n<li>[\"03/08\", \"09/16\"] would disable those days for every year</li>\n<li>[\"^03/08\"] would only match the beginning (useful if you are using short years)</li>\n<li>[\"03/../2006\"] would disable every day in March 2006</li>\n<li>[\"^03\"] would disable every day in every March</li>\n</ul>\nIn order to support regular expressions, if you are using a date format that has \".\" in it, you will have to\nescape the dot when restricting dates. For example: [\"03\\\\.08\\\\.03\"].",
        "memberOf" : ""
      },
      {
        "name" : "disabledDatesText",
        "type" : "String",
        "desc" : "The tooltip text to display when the date falls on a disabled date (defaults to 'Disabled')",
        "memberOf" : ""
      },
      {
        "name" : "disabledDays",
        "type" : "Array",
        "desc" : "An array of days to disable, 0 based. For example, [0, 6] disables Sunday and Saturday (defaults to null).",
        "memberOf" : ""
      },
      {
        "name" : "disabledDaysText",
        "type" : "String",
        "desc" : "The tooltip to display when the date falls on a disabled day (defaults to 'Disabled')",
        "memberOf" : ""
      },
      {
        "name" : "emptyText",
        "type" : "String",
        "desc" : "The default text to display in an empty field - placeholder... (defaults to null).",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the field (defaults to \"x-form-field\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "format",
        "type" : "String",
        "desc" : "The default date format string which can be overriden for localization support.  The format must be\nvalid according to {@link Date#parseDate} (defaults to 'm/d/y').",
        "memberOf" : ""
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideTrigger",
        "type" : "Boolean",
        "desc" : "True to hide the trigger element and display only the base text field (defaults to false)",
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to display when the date in the field is invalid (defaults to\n'{value} is not a valid date - it must be in the format {format}').",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxTextf",
        "type" : "String",
        "desc" : "The error text to display when the date in the cell is after maxValue (defaults to\n'The date in this field must be before {maxValue}').",
        "memberOf" : ""
      },
      {
        "name" : "maxValue",
        "type" : "Date/String",
        "desc" : "The maximum allowed date. Can be either a Javascript date object or a string date in a\nvalid format (defaults to null).",
        "memberOf" : ""
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minText",
        "type" : "String",
        "desc" : "The error text to display when the date in the cell is before minValue (defaults to\n'The date in this field must be after {minValue}').",
        "memberOf" : ""
      },
      {
        "name" : "minValue",
        "type" : "Date/String",
        "desc" : "The minimum allowed date. Can be either a Javascript date object or a string date in a\nvalid format (defaults to null).",
        "memberOf" : ""
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "triggerClass",
        "type" : "String",
        "desc" : "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-date-trigger'\nwhich displays a calendar icon).",
        "memberOf" : ""
      },
      {
        "name" : "useIso",
        "type" : "Boolean",
        "desc" : "if enabled, then the date field will use a hidden field to store the \nreal value as iso formated date. default (true)",
        "memberOf" : ""
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "autosize",
        "type" : "function",
        "desc" : "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.",
        "sig" : "function (_self, width)\n{\n\n}",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Fires when a date is selected",
        "sig" : "function (combo, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the current date value of the date field.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onTriggerClick",
        "type" : "function",
        "desc" : "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally-loaded value and clears any validation messages.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "selectText",
        "type" : "function",
        "desc" : "Selects text in this field",
        "sig" : "(start, end)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the value of the date field.  You can pass a date object or any string that can be parsed into a valid\ndate, using MonthField.format as the date format, according to the same rules as {@link Date#parseDate}\n(the default format used is \"m/d/y\").\n<br />Usage:\n<pre><code>\n//All of these calls set the same date value (May 4, 2006)\n\n//Pass a date object:\nvar dt = new Date('5/4/06');\nmonthField.setValue(dt);\n\n//Pass a date string (default format):\nmonthField.setValue('5/4/06');\n\n//Pass a date string (custom format):\nmonthField.format = 'Y-m-d';\nmonthField.setValue('2006-5-4');\n</code></pre>",
        "sig" : "(date)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      }
    ]
  },
  "Roo.form.NumberField" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "allowDecimals",
        "type" : "Boolean",
        "desc" : "False to disallow decimal values (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowLeadingSpace",
        "type" : "Boolean",
        "desc" : "True to prevent the stripping of leading white space",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "allowNegative",
        "type" : "Boolean",
        "desc" : "False to prevent entering a negative sign (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"20\", autocomplete: \"off\"})",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "decimalPrecision",
        "type" : "Number",
        "desc" : "The maximum precision to display after the decimal separator (defaults to 2)",
        "memberOf" : ""
      },
      {
        "name" : "decimalSeparator",
        "type" : "String",
        "desc" : "Character(s) to allow as the decimal separator (defaults to '.')",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "emptyText",
        "type" : "String",
        "desc" : "The default text to display in an empty field - placeholder... (defaults to null).",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the field (defaults to \"x-form-field x-form-num-field\")",
        "memberOf" : ""
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "grow",
        "type" : "Boolean",
        "desc" : "True if this field should automatically grow and shrink to its content",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "growMax",
        "type" : "Number",
        "desc" : "The maximum width to allow when grow = true (defaults to 800)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "growMin",
        "type" : "Number",
        "desc" : "The minimum width to allow when grow = true (defaults to 30)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxText",
        "type" : "String",
        "desc" : "Error text to display if the maximum value validation fails (defaults to \"The maximum value for this field is {maxValue}\")",
        "memberOf" : ""
      },
      {
        "name" : "maxValue",
        "type" : "Number",
        "desc" : "The maximum allowed value (defaults to Number.MAX_VALUE)",
        "memberOf" : ""
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minText",
        "type" : "String",
        "desc" : "Error text to display if the minimum value validation fails (defaults to \"The minimum value for this field is {minValue}\")",
        "memberOf" : ""
      },
      {
        "name" : "minValue",
        "type" : "Number",
        "desc" : "The minimum allowed value (defaults to Number.NEGATIVE_INFINITY)",
        "memberOf" : ""
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "nanText",
        "type" : "String",
        "desc" : "Error text to display if the value is not a valid number.  For example, this can happen\nif a valid character like '.' or '-' is left in the field with no number (defaults to \"{value} is not a valid number\")",
        "memberOf" : ""
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "autosize",
        "type" : "function",
        "desc" : "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.",
        "sig" : "function (_self, width)\n{\n\n}",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.\nThis only takes effect if grow = true, and fires the autosize event.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally-loaded value and clears any validation messages.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "selectText",
        "type" : "function",
        "desc" : "Selects text in this field",
        "sig" : "(start, end)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      }
    ]
  },
  "Roo.form.Radio" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"checkbox\", autocomplete: \"off\"})",
        "memberOf" : "Roo.form.Checkbox"
      },
      {
        "name" : "boxLabel",
        "type" : "String",
        "desc" : "The text that appears beside the checkbox",
        "memberOf" : "Roo.form.Checkbox"
      },
      {
        "name" : "checked",
        "type" : "Boolean",
        "desc" : "True if the the checkbox should render already checked (defaults to false)",
        "memberOf" : "Roo.form.Checkbox"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the checkbox (defaults to \"x-form-field\")",
        "memberOf" : "Roo.form.Checkbox"
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the checkbox receives focus (defaults to undefined)",
        "memberOf" : "Roo.form.Checkbox"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "inputValue",
        "type" : "String",
        "desc" : "The value that should go into the generated input element's value attribute",
        "memberOf" : "Roo.form.Checkbox"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valueOff",
        "type" : "String",
        "desc" : "The value that should go into the generated input element's value when unchecked.",
        "memberOf" : "Roo.form.Checkbox"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "check",
        "type" : "function",
        "desc" : "Fires when the checkbox is checked or unchecked.",
        "sig" : "function (_self, checked)\n{\n\n}",
        "memberOf" : "Roo.form.Checkbox"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getGroupValue",
        "type" : "function",
        "desc" : "If this radio is part of a group, it will return the selected value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the checked state of the checkbox.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Checkbox"
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the checked state of the checkbox.\nOn is always based on a string comparison between inputValue and the param.",
        "sig" : "(value, suppressEvent)",
        "static" : false,
        "memberOf" : "Roo.form.Checkbox"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      }
    ]
  },
  "Roo.form.Row" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec used to autocreate the layout (defaults to {tag: 'div', cls: 'x-form-ct'})",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "clear",
        "type" : "Boolean",
        "desc" : "True to add a clearing element at the end of this layout, equivalent to CSS clear: both (defaults to true)",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "height",
        "type" : "Number/String",
        "desc" : "The fixed height of the column in pixels or CSS value (defaults to \"auto\")",
        "memberOf" : ""
      },
      {
        "name" : "hideLabels",
        "type" : "Boolean",
        "desc" : "True to suppress the display of field labels in this layout (defaults to false)",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "labelAlign",
        "type" : "String",
        "desc" : "Valid values are \"left,\" \"top\" and \"right\" (defaults to \"left\")",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "labelSeparator",
        "type" : "String",
        "desc" : "The separator to use after field labels (defaults to ':')",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "labelWidth",
        "type" : "Number",
        "desc" : "Fixed width in pixels of all field labels (defaults to undefined)",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "style",
        "type" : "String/Object/Function",
        "desc" : "A style specification string, e.g. \"width:100px\", or object in the form {width:\"100px\"}, or\na function which returns such a specification.",
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "width",
        "type" : "Number/String",
        "desc" : "The fixed width of the column in pixels or CSS value (defaults to \"auto\")",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addxtype",
        "type" : "function",
        "desc" : "Adds a object form elements (using the xtype property as the factory method.)\nValid xtypes are:  TextField, TextArea .... Button, Layout, FieldSet, Column",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : "Roo.form.Layout"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.form.Select" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allQuery",
        "type" : "String",
        "desc" : "The text query to send to the server to return all records for the list with no filtering (defaults to '')",
        "memberOf" : ""
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowLeadingSpace",
        "type" : "Boolean",
        "desc" : "True to prevent the stripping of leading white space",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "alwaysQuery",
        "type" : "Boolean",
        "desc" : "Disable caching of results, and always send query",
        "memberOf" : ""
      },
      {
        "name" : "autoCreate",
        "type" : "Boolean/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to:\n{tag: \"input\", type: \"text\", size: \"24\", autocomplete: \"off\"})",
        "memberOf" : ""
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "blockFocus",
        "type" : "Boolean",
        "desc" : "Prevents all focus calls, so it can work with things like HTML edtor bar",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "defaultValue",
        "type" : "String",
        "desc" : "The value displayed after loading the store.",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableClear",
        "type" : "Boolean",
        "desc" : "Disable showing of clear button.",
        "memberOf" : ""
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "displayField",
        "type" : "String",
        "desc" : "The underlying data field name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'text' if mode = 'local')",
        "memberOf" : ""
      },
      {
        "name" : "editable",
        "type" : "Boolean",
        "desc" : "False to prevent the user from typing text directly into the field, just like a\ntraditional select (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "emptyText",
        "type" : "String",
        "desc" : "The default text to display in an empty field - placeholder... (defaults to null).",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the field (defaults to \"x-form-field\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "forceSelection",
        "type" : "Boolean",
        "desc" : "True to restrict the selected value to one of the values in the list, false to\nallow the user to set arbitrary text into the field (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "grow",
        "type" : "Boolean",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "growMax",
        "type" : "Number",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "growMin",
        "type" : "Number",
        "desc" : "",
        "memberOf" : ""
      },
      {
        "name" : "handleHeight",
        "type" : "Number",
        "desc" : "The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8)",
        "memberOf" : ""
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hiddenName",
        "type" : "String",
        "desc" : "If specified, a hidden form field with this name is dynamically generated to store the\nfield's data value (defaults to the underlying DOM element's name)",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideTrigger",
        "type" : "Boolean",
        "desc" : "True to hide the trigger element and display only the base text field (defaults to false)",
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "lazyRender",
        "type" : "Boolean",
        "desc" : "True to prevent the ComboBox from rendering until requested (should always be used when\nrendering into an Roo.Editor, defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "listAlign",
        "type" : "String",
        "desc" : "A valid anchor position value. See {@link Roo.Element#alignTo} for details on supported\nanchor positions (defaults to 'tl-bl')",
        "memberOf" : ""
      },
      {
        "name" : "listClass",
        "type" : "String",
        "desc" : "CSS class to apply to the dropdown list element (defaults to '')",
        "memberOf" : ""
      },
      {
        "name" : "listWidth",
        "type" : "Number",
        "desc" : "The width in pixels of the dropdown list (defaults to the width of the ComboBox field)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadingText",
        "type" : "String",
        "desc" : "The text to display in the dropdown list while data is loading.  Only applies\nwhen mode = 'remote' (defaults to 'Loading...')",
        "memberOf" : ""
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxHeight",
        "type" : "Number",
        "desc" : "The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)",
        "memberOf" : ""
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minChars",
        "type" : "Number",
        "desc" : "The minimum number of characters the user must type before autocomplete and typeahead activate\n(defaults to 4, does not apply if editable = false)",
        "memberOf" : ""
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minListWidth",
        "type" : "Number",
        "desc" : "The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if\nlistWidth has a higher value)",
        "memberOf" : ""
      },
      {
        "name" : "mode",
        "type" : "String",
        "desc" : "Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)",
        "memberOf" : ""
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "pageSize",
        "type" : "Number",
        "desc" : "If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the\nfilter queries will execute with page start and limit parameters.  Only applies when mode = 'remote' (defaults to 0)",
        "memberOf" : ""
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "queryDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds to delay between the start of typing and sending the\nquery to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local')",
        "memberOf" : ""
      },
      {
        "name" : "queryParam",
        "type" : "String",
        "desc" : "Name of the query as it will be passed on the querystring (defaults to 'query')",
        "memberOf" : ""
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "resizable",
        "type" : "Boolean",
        "desc" : "True to add a resize handle to the bottom of the dropdown list (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to select any existing text in the field immediately on focus.  Only applies\nwhen editable = true (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "selectedClass",
        "type" : "String",
        "desc" : "CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')",
        "memberOf" : ""
      },
      {
        "name" : "shadow",
        "type" : "Boolean/String",
        "desc" : "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right",
        "memberOf" : ""
      },
      {
        "name" : "store",
        "type" : "Roo.data.Store",
        "desc" : "The data store to which this combo is bound (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "title",
        "type" : "String",
        "desc" : "If supplied, a header element is created containing this text and added into the top of\nthe dropdown list (defaults to undefined, with no header element)",
        "memberOf" : ""
      },
      {
        "name" : "tpl",
        "type" : "String/Roo.Template",
        "desc" : "The template to use to render the output",
        "memberOf" : ""
      },
      {
        "name" : "transform",
        "type" : "String/HTMLElement/Element",
        "desc" : "The id, DOM node or element of an existing select to convert to a ComboBox",
        "memberOf" : ""
      },
      {
        "name" : "triggerAction",
        "type" : "String",
        "desc" : "The action to execute when the trigger field is activated.  Use 'all' to run the\nquery specified by the allQuery config option (defaults to 'query')",
        "memberOf" : ""
      },
      {
        "name" : "triggerClass",
        "type" : "String",
        "desc" : "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-arrow-trigger'\nwhich displays a downward arrow icon).",
        "memberOf" : ""
      },
      {
        "name" : "typeAhead",
        "type" : "Boolean",
        "desc" : "True to populate and autoselect the remainder of the text being typed after a configurable\ndelay (typeAheadDelay) if it matches a known value (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "typeAheadDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds to wait until the typeahead text is displayed\nif typeAhead = true (defaults to 250)",
        "memberOf" : ""
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valueField",
        "type" : "String",
        "desc" : "The underlying data value name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'value' if mode = 'local'). \nNote: use of a valueField requires the user make a selection\nin order for a value to be mapped.",
        "memberOf" : ""
      },
      {
        "name" : "valueNotFoundText",
        "type" : "String",
        "desc" : "When using a name/value combo, if the value passed to setValue is not found in\nthe store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "autosize",
        "type" : "function",
        "desc" : "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.",
        "sig" : "function (_self, width)\n{\n\n}",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "clearValue",
        "type" : "function",
        "desc" : "Clears any text/value currently set in the field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Hides the dropdown list if it is currently expanded. Fires the 'collapse' event on completion.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "doQuery",
        "type" : "function",
        "desc" : "Execute a query to filter the dropdown list.  Fires the beforequery event prior to performing the\nquery allowing the query action to be canceled if needed.",
        "sig" : "(query, forceAll)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expands the dropdown list if it is currently hidden. Fires the 'expand' event on completion.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the currently selected field value or empty string if no value is set.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isExpanded",
        "type" : "function",
        "desc" : "Returns true if the dropdown list is expanded, else false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onTriggerClick",
        "type" : "function",
        "desc" : "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.form.TriggerField"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally-loaded value and clears any validation messages.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue.",
        "sig" : "(index, scrollIntoView)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectByValue",
        "type" : "function",
        "desc" : "Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue.",
        "sig" : "(value, scrollIntoView)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectText",
        "type" : "function",
        "desc" : "Selects text in this field",
        "sig" : "(start, end)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setEditable",
        "type" : "function",
        "desc" : "Allow or prevent the user from directly editing the field text.  If false is passed,\nthe user will only be able to select from the items defined in the dropdown list.  This method\nis the runtime equivalent of setting the 'editable' config option at config time.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setFromData",
        "type" : "function",
        "desc" : "Sets the value of the field based on a object which is related to the record format for the store.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the specified value into the field.  If the value finds a match, the corresponding record text\nwill be displayed in the field.  If the value does not match the data value of an existing item,\nand the valueNotFoundText config option is defined, it will be displayed as the default field text.\nOtherwise the field will be blank (although the value will still be set).",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setWidth",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      }
    ]
  },
  "Roo.form.Signature" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"20\", autocomplete: \"off\"})",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the field (defaults to \"x-form-field\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "The signature panel height (defaults to 100)",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "labels",
        "type" : "Object",
        "desc" : "Label to use when rendering a form.\ndefaults to \nlabels : { \n     clear : \"Clear\",\n     confirm : \"Confirm\"\n }",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "The signature panel width (defaults to 300)",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "confirm",
        "type" : "function",
        "desc" : "Fires when the 'confirm' icon is pressed (add a listener to enable add button)",
        "sig" : "function (combo)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Fires when the 'edit' icon is pressed (add a listener to enable add button)",
        "sig" : "function (combo, record)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "createToolbar",
        "type" : "function",
        "desc" : "Protected method that will not generally be called directly. It\nis called when the editor creates its toolbar. Override this method if you need to\nadd custom toolbar buttons.",
        "sig" : "(editor)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getConfirmed",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getHeight",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getImageDataURI",
        "type" : "function",
        "desc" : "when user is clicked confirm then show this image.....",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getWidth",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally loaded value and clears any validation messages",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      }
    ]
  },
  "Roo.form.TextArea" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowLeadingSpace",
        "type" : "Boolean",
        "desc" : "True to prevent the stripping of leading white space",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"textarea\", style: \"width:300px;height:60px;\", autocomplete: \"off\"})",
        "memberOf" : ""
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "emptyText",
        "type" : "String",
        "desc" : "The default text to display in an empty field - placeholder... (defaults to null).",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the field (defaults to \"x-form-field\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "grow",
        "type" : "Boolean",
        "desc" : "True if this field should automatically grow and shrink to its content",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "growMax",
        "type" : "Number",
        "desc" : "The maximum height to allow when grow = true (defaults to 1000)",
        "memberOf" : ""
      },
      {
        "name" : "growMin",
        "type" : "Number",
        "desc" : "The minimum height to allow when grow = true (defaults to 60)",
        "memberOf" : ""
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "preventScrollbars",
        "type" : "Boolean",
        "desc" : "True to prevent scrollbars from appearing regardless of how much text is\nin the field (equivalent to setting overflow: hidden, defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "autosize",
        "type" : "function",
        "desc" : "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.",
        "sig" : "function (_self, width)\n{\n\n}",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "Automatically grows the field to accomodate the height of the text up to the maximum field height allowed.\nThis only takes effect if grow = true, and fires the autosize event if the height changes.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally-loaded value and clears any validation messages.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "selectText",
        "type" : "function",
        "desc" : "Selects text in this field",
        "sig" : "(start, end)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      }
    ]
  },
  "Roo.form.TextField" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowLeadingSpace",
        "type" : "Boolean",
        "desc" : "True to prevent the stripping of leading white space",
        "memberOf" : ""
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"20\", autocomplete: \"off\"})",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "emptyText",
        "type" : "String",
        "desc" : "The default text to display in an empty field - placeholder... (defaults to null).",
        "memberOf" : ""
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the field (defaults to \"x-form-field\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "grow",
        "type" : "Boolean",
        "desc" : "True if this field should automatically grow and shrink to its content",
        "memberOf" : ""
      },
      {
        "name" : "growMax",
        "type" : "Number",
        "desc" : "The maximum width to allow when grow = true (defaults to 800)",
        "memberOf" : ""
      },
      {
        "name" : "growMin",
        "type" : "Number",
        "desc" : "The minimum width to allow when grow = true (defaults to 30)",
        "memberOf" : ""
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : ""
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : ""
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : ""
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : ""
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : ""
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : ""
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
        "memberOf" : ""
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : ""
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : ""
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "autosize",
        "type" : "function",
        "desc" : "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.",
        "sig" : "function (_self, width)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.\nThis only takes effect if grow = true, and fires the autosize event.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally-loaded value and clears any validation messages.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "selectText",
        "type" : "function",
        "desc" : "Selects text in this field",
        "sig" : "(start, end)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.form.TextItem" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "html",
        "type" : "String",
        "desc" : "the content for this item",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "tag",
        "type" : "String",
        "desc" : "the tag for this item (default div)",
        "memberOf" : ""
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      }
    ]
  },
  "Roo.form.TriggerField" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowBlank",
        "type" : "Boolean",
        "desc" : "False to validate that the value length > 0 (defaults to true)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "allowLeadingSpace",
        "type" : "Boolean",
        "desc" : "True to prevent the stripping of leading white space",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "autoCreate",
        "type" : "String/Object",
        "desc" : "A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"16\", autocomplete: \"off\"})",
        "memberOf" : ""
      },
      {
        "name" : "blankText",
        "type" : "String",
        "desc" : "Error text to display if the allow blank validation fails (defaults to \"This field is required\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A CSS class to apply to the field's underlying element.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disableKeyFilter",
        "type" : "Boolean",
        "desc" : "True to disable input keystroke filtering (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "True to disable the field (defaults to false).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "emptyText",
        "type" : "String",
        "desc" : "The default text to display in an empty field - placeholder... (defaults to null).",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "fieldClass",
        "type" : "String",
        "desc" : "The default CSS class for the field (defaults to \"x-form-field\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "fieldLabel",
        "type" : "String",
        "desc" : "Label to use when rendering a form.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "focusClass",
        "type" : "String",
        "desc" : "The CSS class to use when the field receives focus (defaults to \"x-form-focus\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "height",
        "type" : "Number",
        "desc" : "height (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideTrigger",
        "type" : "Boolean",
        "desc" : "True to hide the trigger element and display only the base text field (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "inputType",
        "type" : "String",
        "desc" : "The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidClass",
        "type" : "String",
        "desc" : "The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "invalidText",
        "type" : "String",
        "desc" : "The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maskRe",
        "type" : "String",
        "desc" : "An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLength",
        "type" : "Number",
        "desc" : "Maximum input field length allowed (defaults to Number.MAX_VALUE)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "maxLengthText",
        "type" : "String",
        "desc" : "Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLength",
        "type" : "Number",
        "desc" : "Minimum input field length required (defaults to 0)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "minLengthText",
        "type" : "String",
        "desc" : "Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "msgFx",
        "type" : "String",
        "desc" : "<b>Experimental</b> The effect used when displaying a validation message under the field (defaults to 'normal').",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "msgTarget",
        "type" : "String",
        "desc" : "The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n</pre>",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "name",
        "type" : "String",
        "desc" : "The field's HTML name attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "Mouse over tip",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "readOnly",
        "type" : "Boolean",
        "desc" : "True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "regex",
        "type" : "RegExp",
        "desc" : "A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "regexText",
        "type" : "String",
        "desc" : "The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "selectOnFocus",
        "type" : "Boolean",
        "desc" : "True to automatically select any existing field text when the field receives input focus (defaults to false)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "tabIndex",
        "type" : "Number",
        "desc" : "The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "triggerClass",
        "type" : "String",
        "desc" : "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' by default and triggerClass will be <b>appended</b> if specified.",
        "memberOf" : ""
      },
      {
        "name" : "validateOnBlur",
        "type" : "Boolean",
        "desc" : "Whether the field should validate when it loses focus (defaults to true).",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationDelay",
        "type" : "Number",
        "desc" : "The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validationEvent",
        "type" : "String/Boolean",
        "desc" : "The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validator",
        "type" : "Function",
        "desc" : "A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "A value to initialize this field with.",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "vtype",
        "type" : "String",
        "desc" : "A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "width (optional) size of component",
        "memberOf" : "Roo.BoxComponent"
      }
    ],
    "events" : [
      {
        "name" : "autosize",
        "type" : "function",
        "desc" : "Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.",
        "sig" : "function (_self, width)\n{\n\n}",
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "blur",
        "type" : "function",
        "desc" : "Fires when this field loses input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "change",
        "type" : "function",
        "desc" : "Fires just before the field blurs if the field value has changed.",
        "sig" : "function (_self, newValue, oldValue)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Fires when this field receives input focus.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "invalid",
        "type" : "function",
        "desc" : "Fires after the field has been marked as invalid.",
        "sig" : "function (_self, msg)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "keyup",
        "type" : "function",
        "desc" : "Fires after the key up",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires after the component is moved.",
        "sig" : "function (_self, x, y)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fires after the component is resized.",
        "sig" : "function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}",
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "valid",
        "type" : "function",
        "desc" : "Fires after the field has been validated with no errors.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.form.Field"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "applyTo",
        "type" : "function",
        "desc" : "Apply the behaviors of this component to an existing element. <b>This is used instead of render().</b>",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearInvalid",
        "type" : "function",
        "desc" : "Clear any invalid styles/messages for this field",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getBox",
        "type" : "function",
        "desc" : "Gets the current box measurements of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getName",
        "type" : "function",
        "desc" : "Returns the name attribute of the field if available",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getPosition",
        "type" : "function",
        "desc" : "Gets the current XY position of the component's underlying element.",
        "sig" : "(local)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getRawValue",
        "type" : "function",
        "desc" : "Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "getSize",
        "type" : "function",
        "desc" : "Gets the current size of the component's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasChanged",
        "type" : "function",
        "desc" : "checks the current value against the 'loaded' value.\nNote - will return false if 'resetHasChanged' has not been called first.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isDirty",
        "type" : "function",
        "desc" : "Returns true if this field has been changed since it was originally loaded and is not disabled.\nDEPRICATED  - it never worked well - use hasChanged/resetHasChanged.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isValid",
        "type" : "function",
        "desc" : "Returns whether or not the field value is currently valid",
        "sig" : "(preventMark)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "markInvalid",
        "type" : "function",
        "desc" : "Mark this field as invalid",
        "sig" : "(msg)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onPosition",
        "type" : "function",
        "desc" : "Called after the component is moved, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a move occurs.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onResize",
        "type" : "function",
        "desc" : "Called after the component is resized, this method is empty by default but can be implemented by any\nsubclass that needs to perform custom logic after a resize occurs.",
        "sig" : "(adjWidth, adjHeight, rawWidth, rawHeight)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "onTriggerClick",
        "type" : "function",
        "desc" : "The function that should handle the trigger's click event.  This method does nothing by default until overridden\nby an implementing function.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "reset",
        "type" : "function",
        "desc" : "Resets the current field value to the originally-loaded value and clears any validation messages.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "resetHasChanged",
        "type" : "function",
        "desc" : "stores the current value in loadedValue",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "selectText",
        "type" : "function",
        "desc" : "Selects text in this field",
        "sig" : "(start, end)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setPagePosition",
        "type" : "function",
        "desc" : "Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\nThis method fires the move event.",
        "sig" : "(x, y)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setPosition",
        "type" : "function",
        "desc" : "Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\nThis method fires the move event.",
        "sig" : "(left, top)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setRawValue",
        "type" : "function",
        "desc" : "Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the width and height of the component.  This method fires the resize event.  This method can accept\neither width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "syncSize",
        "type" : "function",
        "desc" : "Force the component's size to recalculate based on the underlying element's current height and width.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "updateBox",
        "type" : "function",
        "desc" : "Sets the current box measurements of the component's underlying element.",
        "sig" : "(box)",
        "static" : false,
        "memberOf" : "Roo.BoxComponent"
      },
      {
        "name" : "validate",
        "type" : "function",
        "desc" : "Validates the field value",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.form.Field"
      },
      {
        "name" : "validateValue",
        "type" : "function",
        "desc" : "Validates a value according to the field's validation rules and marks the field as invalid\nif the validation fails",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.form.TextField"
      }
    ]
  },
  "Roo.form.VTypes" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "alpha'",
        "type" : "function",
        "desc" : "The function used to validate alpha values",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "alphanum'",
        "type" : "function",
        "desc" : "The function used to validate alphanumeric values",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "email'",
        "type" : "function",
        "desc" : "The function used to validate email addresses",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "url'",
        "type" : "function",
        "desc" : "The function used to validate URLs",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.grid" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.grid.AbstractGridView" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.grid.AbstractSelectionModel" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isLocked",
        "type" : "function",
        "desc" : "Returns true if the selections are locked.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "lock",
        "type" : "function",
        "desc" : "Locks the selections.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unlock",
        "type" : "function",
        "desc" : "Unlocks the selections.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.grid.Calendar" : {
    "props" : [
      {
        "name" : "eventStore",
        "type" : "Store",
        "desc" : "The store that loads events.",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "bodyscroll",
        "type" : "function",
        "desc" : "Fires when the body element is scrolled",
        "sig" : "function (scrollLeft, scrollTop)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "cellclick",
        "type" : "function",
        "desc" : "Fires when a cell is clicked",
        "sig" : "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "cellcontextmenu",
        "type" : "function",
        "desc" : "Fires when a cell is right clicked",
        "sig" : "function (_self, rowIndex, cellIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "celldblclick",
        "type" : "function",
        "desc" : "Fires when a cell is double clicked",
        "sig" : "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "The raw click event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "columnmove",
        "type" : "function",
        "desc" : "Fires when the user moves a column",
        "sig" : "function (oldIndex, newIndex)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "columnresize",
        "type" : "function",
        "desc" : "Fires when the user resizes a column",
        "sig" : "function (columnIndex, newSize)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "contextmenu",
        "type" : "function",
        "desc" : "The raw contextmenu event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "dblclick",
        "type" : "function",
        "desc" : "The raw dblclick event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "dragdrop",
        "type" : "function",
        "desc" : "Fires when dragged row(s) are dropped on a valid DD target",
        "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "dragenter",
        "type" : "function",
        "desc" : "Fires when the dragged row(s) first cross another DD target while being dragged",
        "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "dragout",
        "type" : "function",
        "desc" : "Fires when the dragged row(s) leave another DD target while being dragged",
        "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "dragover",
        "type" : "function",
        "desc" : "Fires while row(s) are being dragged. \"targetId\" is the id of the Yahoo.util.DD object the selected rows are being dragged over.",
        "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "enddrag",
        "type" : "function",
        "desc" : "Fires when a drag operation is complete",
        "sig" : "function (_self, dd, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "eventclick",
        "type" : "function",
        "desc" : "Fires when the mouse click an",
        "sig" : "function (_self, )\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "evententer",
        "type" : "function",
        "desc" : "Fires when mouse over an event",
        "sig" : "function (_self, Event)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "eventleave",
        "type" : "function",
        "desc" : "Fires when the mouse leaves an",
        "sig" : "function (_self, )\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "eventrender",
        "type" : "function",
        "desc" : "Fires before each cell is rendered, so you can modify the contents, like cls / title / qtip",
        "sig" : "function (_self, data)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "headerclick",
        "type" : "function",
        "desc" : "Fires when a header is clicked",
        "sig" : "function (_self, columnIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "headercontextmenu",
        "type" : "function",
        "desc" : "Fires when a header is right clicked",
        "sig" : "function (_self, columnIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "headerdblclick",
        "type" : "function",
        "desc" : "Fires when a header cell is double clicked",
        "sig" : "function (_self, columnIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "keydown",
        "type" : "function",
        "desc" : "The raw keydown event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "keypress",
        "type" : "function",
        "desc" : "The raw keypress event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "monthchange",
        "type" : "function",
        "desc" : "Fires when the displayed month changes",
        "sig" : "function (_self, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mousedown",
        "type" : "function",
        "desc" : "The raw mousedown event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mouseout",
        "type" : "function",
        "desc" : "The raw mouseout event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mouseover",
        "type" : "function",
        "desc" : "The raw mouseover event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mouseup",
        "type" : "function",
        "desc" : "The raw mouseup event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when the grid is rendered",
        "sig" : "function (grid)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "rowclass",
        "type" : "function",
        "desc" : "Fires when a row is rendered, so you can change add a style to it.",
        "sig" : "function (gridview, rowcfg)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "rowclick",
        "type" : "function",
        "desc" : "Fires when a row is clicked",
        "sig" : "function (_self, rowIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "rowcontextmenu",
        "type" : "function",
        "desc" : "Fires when a row is right clicked",
        "sig" : "function (_self, rowIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "rowdblclick",
        "type" : "function",
        "desc" : "Fires when a row is double clicked",
        "sig" : "function (_self, rowIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Fires when a date is selected",
        "sig" : "function (_self, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "startdrag",
        "type" : "function",
        "desc" : "Fires when row(s) start being dragged",
        "sig" : "function (_self, dd, e)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "getSelectionModel",
        "type" : "function",
        "desc" : "Returns the grid's SelectionModel.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.grid.CellSelectionModel" : {
    "props" : [
      {
        "name" : "enter_is_tab",
        "type" : "Boolean",
        "desc" : "Enter behaves the same as tab. (eg. goes to next cell) default: false",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "beforeeditnext",
        "type" : "function",
        "desc" : "Fires before the next editable sell is made active\nYou can use this to skip to another cell or fire the tabend\n   if you set cell to false",
        "sig" : "function (eventdata)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforerowselect",
        "type" : "function",
        "desc" : "Fires before a cell is selected.",
        "sig" : "function (_self, rowIndex, colIndex)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "cellselect",
        "type" : "function",
        "desc" : "Fires when a cell is selected.",
        "sig" : "function (_self, rowIndex, colIndex)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "selectionchange",
        "type" : "function",
        "desc" : "Fires when the active selection changes.",
        "sig" : "function (_self, selection)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "tabend",
        "type" : "function",
        "desc" : "Fires when the tab (or enter) was pressed on the last editable cell\nYou can use this to trigger add new row.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearSelections",
        "type" : "function",
        "desc" : "Clears all selections.",
        "sig" : "(true)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getSelectedCell",
        "type" : "function",
        "desc" : "Returns the currently selected cell,.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hasSelection",
        "type" : "function",
        "desc" : "Returns true if there is a selection.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isLocked",
        "type" : "function",
        "desc" : "Returns true if the selections are locked.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.AbstractSelectionModel"
      },
      {
        "name" : "lock",
        "type" : "function",
        "desc" : "Locks the selections.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.AbstractSelectionModel"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onEditorKey",
        "type" : "function",
        "desc" : "Selects a cell.",
        "sig" : "(field, e)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Selects a cell.",
        "sig" : "(rowIndex, collIndex)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unlock",
        "type" : "function",
        "desc" : "Unlocks the selections.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.AbstractSelectionModel"
      }
    ]
  },
  "Roo.grid.ColumnModel" : {
    "props" : [
      {
        "name" : "align",
        "type" : "String",
        "desc" : "(Optional) Set the CSS text-align property of the column.  Defaults to undefined.",
        "memberOf" : ""
      },
      {
        "name" : "cursor",
        "type" : "String",
        "desc" : "(Optional)",
        "memberOf" : ""
      },
      {
        "name" : "dataIndex",
        "type" : "String",
        "desc" : "(Optional) The name of the field in the grid's {@link Roo.data.Store}'s\n{@link Roo.data.Record} definition from which to draw the column's value. If not\nspecified, the column's index is used as an index into the Record's data Array.",
        "memberOf" : ""
      },
      {
        "name" : "editor",
        "type" : "Roo.grid.GridEditor",
        "desc" : "(Optional) For grid editors - returns the grid editor",
        "memberOf" : ""
      },
      {
        "name" : "fixed",
        "type" : "Boolean",
        "desc" : "(Optional) True if the column width cannot be changed.  Defaults to false.",
        "memberOf" : ""
      },
      {
        "name" : "header",
        "type" : "String",
        "desc" : "The header text to display in the Grid view.",
        "memberOf" : ""
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "(Optional) True to hide the column. Defaults to false.",
        "memberOf" : ""
      },
      {
        "name" : "lg",
        "type" : "Number",
        "desc" : "(Optional)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "locked",
        "type" : "Boolean",
        "desc" : "(Optional) True to lock the column in place while scrolling the Grid.  Defaults to false.",
        "memberOf" : ""
      },
      {
        "name" : "md",
        "type" : "Number",
        "desc" : "(Optional)",
        "memberOf" : ""
      },
      {
        "name" : "renderer",
        "type" : "Function",
        "desc" : "(Optional) A function used to generate HTML markup for a cell\ngiven the cell's data value. See {@link #setRenderer}. If not specified, the\ndefault renderer returns the escaped data value. If an object is returned (bootstrap only)\nthen it is treated as a Roo Component object instance, and it is rendered after the initial row is rendered",
        "memberOf" : ""
      },
      {
        "name" : "resizable",
        "type" : "Boolean",
        "desc" : "(Optional) False to disable column resizing. Defaults to true.",
        "memberOf" : ""
      },
      {
        "name" : "sm",
        "type" : "Number",
        "desc" : "(Optional)",
        "memberOf" : ""
      },
      {
        "name" : "sortable",
        "type" : "Boolean",
        "desc" : "(Optional) True if sorting is to be allowed on this column.\nDefaults to the value of the {@link #defaultSortable} property.\nWhether local/remote sorting is used is specified in {@link Roo.data.Store#remoteSort}.",
        "memberOf" : ""
      },
      {
        "name" : "tooltip",
        "type" : "String",
        "desc" : "(Optional)",
        "memberOf" : ""
      },
      {
        "name" : "valign",
        "type" : "String",
        "desc" : "(Optional) Set the CSS vertical-align property of the column (eg. middle, top, bottom etc).  Defaults to undefined.",
        "memberOf" : ""
      },
      {
        "name" : "width",
        "type" : "Number",
        "desc" : "(Optional) The initial width in pixels of the column. Using this\ninstead of {@link Roo.grid.Grid#autoSizeColumns} is more efficient.",
        "memberOf" : ""
      },
      {
        "name" : "xs",
        "type" : "Number",
        "desc" : "(Optional)",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "columlockchange",
        "type" : "function",
        "desc" : "Fires when a column's locked state is changed",
        "sig" : "function (_self, colIndex, locked)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "columnmoved",
        "type" : "function",
        "desc" : "Fires when a column is moved.",
        "sig" : "function (_self, oldIndex, newIndex)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "headerchange",
        "type" : "function",
        "desc" : "Fires when the text of a header changes.",
        "sig" : "function (_self, columnIndex, newText)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "hiddenchange",
        "type" : "function",
        "desc" : "Fires when a column is hidden or \"unhidden\".",
        "sig" : "function (_self, columnIndex, hidden)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "widthchange",
        "type" : "function",
        "desc" : "Fires when the width of a column changes.",
        "sig" : "function (_self, columnIndex, newWidth)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addColumn",
        "type" : "function",
        "desc" : "Add a column (experimental...) - defaults to adding to the end..",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "findColumnIndex",
        "type" : "function",
        "desc" : "Returns the index for a specified column dataIndex.",
        "sig" : "(dataIndex)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getCellEditor",
        "type" : "function",
        "desc" : "Returns the editor defined for the cell/column.\nreturn false or null to disable editing.",
        "sig" : "(colIndex, rowIndex)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getColumnByDataIndex",
        "type" : "function",
        "desc" : "Returns the column Object for a specified dataIndex.",
        "sig" : "(dataIndex)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getColumnById",
        "type" : "function",
        "desc" : "Returns the column for a specified id.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getColumnCount",
        "type" : "function",
        "desc" : "Returns the number of columns.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getColumnHeader",
        "type" : "function",
        "desc" : "Returns the header for the specified column.",
        "sig" : "(col)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getColumnId",
        "type" : "function",
        "desc" : "Returns the id of the column at the specified index.",
        "sig" : "(index)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getColumnTooltip",
        "type" : "function",
        "desc" : "Returns the tooltip for the specified column.",
        "sig" : "(col)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getColumnWidth",
        "type" : "function",
        "desc" : "Returns the width for the specified column.",
        "sig" : "(col)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getColumnsBy",
        "type" : "function",
        "desc" : "Returns the column configs that return true by the passed function that is called with (columnConfig, index)",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getDataIndex",
        "type" : "function",
        "desc" : "Returns the dataIndex for the specified column.",
        "sig" : "(col)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getIndexById",
        "type" : "function",
        "desc" : "Returns the index for a specified column id.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getRenderer",
        "type" : "function",
        "desc" : "Returns the rendering (formatting) function defined for the column.",
        "sig" : "(col)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getTotalWidth",
        "type" : "function",
        "desc" : "Returns the total width of all columns.",
        "sig" : "(includeHidden)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isCellEditable",
        "type" : "function",
        "desc" : "Returns true if the cell is editable.",
        "sig" : "(colIndex, rowIndex)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isFixed",
        "type" : "function",
        "desc" : "Returns true if the column width cannot be changed",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isHidden",
        "type" : "function",
        "desc" : "Returns true if the column is hidden.",
        "sig" : "(colIndex)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isResizable",
        "type" : "function",
        "desc" : "Returns true if the column can be resized",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isSortable",
        "type" : "function",
        "desc" : "Returns true if the specified column is sortable.",
        "sig" : "(col)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "setColumnHeader",
        "type" : "function",
        "desc" : "Sets the header for a column.",
        "sig" : "(col, header)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setColumnTooltip",
        "type" : "function",
        "desc" : "Sets the tooltip for a column.",
        "sig" : "(col, tooltip)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setColumnWidth",
        "type" : "function",
        "desc" : "Sets the width for a column.",
        "sig" : "(col, width)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDataIndex",
        "type" : "function",
        "desc" : "Sets the dataIndex for a column.",
        "sig" : "(col, dataIndex)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setEditable",
        "type" : "function",
        "desc" : "Sets if a column is editable.",
        "sig" : "(col, editable)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setEditor",
        "type" : "function",
        "desc" : "Sets the editor for a column.",
        "sig" : "(col, editor)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setHidden",
        "type" : "function",
        "desc" : "Sets if a column is hidden.",
        "sig" : "(colIndex, hidden)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setRenderer",
        "type" : "function",
        "desc" : "Sets the rendering (formatting) function for a column.",
        "sig" : "(col, fn)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.grid.EditorGrid" : {
    "props" : [
      {
        "name" : "autoExpandColumn",
        "type" : "String",
        "desc" : "The id (or dataIndex) of a column in this grid that should expand to fill unused space. This id can not be 0. Default is false.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "autoExpandMax",
        "type" : "Number",
        "desc" : "The maximum width the autoExpandColumn can have (if enabled). Default is 1000.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "autoExpandMin",
        "type" : "Number",
        "desc" : "The minimum width the autoExpandColumn can have (if enabled).\nDefault is 50.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "autoHeight",
        "type" : "Boolean",
        "desc" : "True to fit the height of the grid container to the height of the data. Default is false.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "autoSizeColumns",
        "type" : "Boolean",
        "desc" : "True to automatically resize the columns to fit their content\n<b>on initial render.</b> It is more efficient to explicitly size the columns\nthrough the ColumnModel's {@link Roo.grid.ColumnModel#width} config option.  Default is false.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "autoSizeHeaders",
        "type" : "Boolean",
        "desc" : "True to measure headers with column data when auto sizing columns. Default is true.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "autoWidth",
        "type" : "Boolean",
        "desc" : "True to set the grid's width to the default total width of the grid's columns instead\nof a fixed width. Default is false.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "clicksToEdit",
        "type" : "Number",
        "desc" : "The number of clicks on a cell required to display the cell's editor (defaults to 2)",
        "memberOf" : ""
      },
      {
        "name" : "ddGroup",
        "type" : "String",
        "desc" : "- drag drop group.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "ddText",
        "type" : "String",
        "desc" : "Configures the text is the drag proxy (defaults to \"%0 selected row(s)\").\n%0 is replaced with the number of selected rows.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "dragGroup",
        "type" : "String",
        "desc" : "- drag group (?? not sure if needed.)",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "dropTarget",
        "type" : "Roo.dd.DropTarget",
        "desc" : "An {@link Roo.dd.DropTarget} config",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "enableColumnHide",
        "type" : "Boolean",
        "desc" : "True to enable hiding of columns with the header context menu. Default is true.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "enableColumnMove",
        "type" : "Boolean",
        "desc" : "True to enable drag and drop reorder of columns. Default is true.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "enableDrag",
        "type" : "Boolean",
        "desc" : "True to enable drag of rows. Default is false. (double check if this is needed?)",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "enableDragDrop",
        "type" : "Boolean",
        "desc" : "True to enable drag and drop of rows. Default is false.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "enableDrop",
        "type" : "Boolean",
        "desc" : "True to enable drop of elements. Default is false. (double check if this is needed?)",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "enableRowHeightSync",
        "type" : "Boolean",
        "desc" : "True to manually sync row heights across locked and not locked rows. Default is false.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadMask",
        "type" : "Object",
        "desc" : "An {@link Roo.LoadMask} config or true to mask the grid while loading. Default is false.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "maxHeight",
        "type" : "Number",
        "desc" : "Sets the maximum height of the grid - ignored if autoHeight is not on.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "maxRowsToMeasure",
        "type" : "Boolean",
        "desc" : "If autoSizeColumns is on, maxRowsToMeasure can be used to limit the number of\nrows measured to get a columns size. Default is 0 (all rows).",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "minColumnWidth",
        "type" : "Number",
        "desc" : "The minimum width a column can be resized to. Default is 25.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "monitorWindowResize",
        "type" : "Boolean",
        "desc" : "True to autoSize the grid when the window resizes. Default is true.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "stripeRows",
        "type" : "Boolean",
        "desc" : "True to stripe the rows.  Default is true.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "trackMouseOver",
        "type" : "Boolean",
        "desc" : "True to highlight rows when the mouse is over. Default is true.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "view",
        "type" : "Object",
        "desc" : "The {@link Roo.grid.GridView} used by the grid. This can be set before a call to render().",
        "memberOf" : "Roo.grid.Grid"
      }
    ],
    "events" : [
      {
        "name" : "afteredit",
        "type" : "function",
        "desc" : "Fires after a cell is edited. <br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>grid - This grid</li>\n<li>record - The record being edited</li>\n<li>field - The field name being edited</li>\n<li>value - The value being set</li>\n<li>originalValue - The original value for the field, before the edit.</li>\n<li>row - The grid row index</li>\n<li>column - The grid column index</li>\n</ul>",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeedit",
        "type" : "function",
        "desc" : "Fires before cell editing is triggered. The edit event object has the following properties <br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>grid - This grid</li>\n<li>record - The record being edited</li>\n<li>field - The field name being edited</li>\n<li>value - The value for the field being edited.</li>\n<li>row - The grid row index</li>\n<li>column - The grid column index</li>\n<li>cancel - Set this to true to cancel the edit or return false from your handler.</li>\n</ul>",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "bodyscroll",
        "type" : "function",
        "desc" : "Fires when the body element is scrolled",
        "sig" : "function (scrollLeft, scrollTop)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "cellclick",
        "type" : "function",
        "desc" : "Fires when a cell is clicked",
        "sig" : "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "cellcontextmenu",
        "type" : "function",
        "desc" : "Fires when a cell is right clicked",
        "sig" : "function (_self, rowIndex, cellIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "celldblclick",
        "type" : "function",
        "desc" : "Fires when a cell is double clicked",
        "sig" : "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "The raw click event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "columnmove",
        "type" : "function",
        "desc" : "Fires when the user moves a column",
        "sig" : "function (oldIndex, newIndex)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "columnresize",
        "type" : "function",
        "desc" : "Fires when the user resizes a column",
        "sig" : "function (columnIndex, newSize)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "contextmenu",
        "type" : "function",
        "desc" : "The raw contextmenu event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "dblclick",
        "type" : "function",
        "desc" : "The raw dblclick event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "dragdrop",
        "type" : "function",
        "desc" : "Fires when dragged row(s) are dropped on a valid DD target",
        "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "dragenter",
        "type" : "function",
        "desc" : "Fires when the dragged row(s) first cross another DD target while being dragged",
        "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "dragout",
        "type" : "function",
        "desc" : "Fires when the dragged row(s) leave another DD target while being dragged",
        "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "dragover",
        "type" : "function",
        "desc" : "Fires while row(s) are being dragged. \"targetId\" is the id of the Yahoo.util.DD object the selected rows are being dragged over.",
        "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "enddrag",
        "type" : "function",
        "desc" : "Fires when a drag operation is complete",
        "sig" : "function (_self, dd, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "headerclick",
        "type" : "function",
        "desc" : "Fires when a header is clicked",
        "sig" : "function (_self, columnIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "headercontextmenu",
        "type" : "function",
        "desc" : "Fires when a header is right clicked",
        "sig" : "function (_self, columnIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "headerdblclick",
        "type" : "function",
        "desc" : "Fires when a header cell is double clicked",
        "sig" : "function (_self, columnIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "keydown",
        "type" : "function",
        "desc" : "The raw keydown event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "keypress",
        "type" : "function",
        "desc" : "The raw keypress event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "mousedown",
        "type" : "function",
        "desc" : "The raw mousedown event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "mouseout",
        "type" : "function",
        "desc" : "The raw mouseout event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "mouseover",
        "type" : "function",
        "desc" : "The raw mouseover event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "mouseup",
        "type" : "function",
        "desc" : "The raw mouseup event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when the grid is rendered",
        "sig" : "function (grid)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "rowclass",
        "type" : "function",
        "desc" : "Fires when a row is rendered, so you can change add a style to it.",
        "sig" : "function (gridview, rowcfg)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "rowclick",
        "type" : "function",
        "desc" : "Fires when a row is clicked",
        "sig" : "function (_self, rowIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "rowcontextmenu",
        "type" : "function",
        "desc" : "Fires when a row is right clicked",
        "sig" : "function (_self, rowIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "rowdblclick",
        "type" : "function",
        "desc" : "Fires when a row is double clicked",
        "sig" : "function (_self, rowIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "startdrag",
        "type" : "function",
        "desc" : "Fires when row(s) start being dragged",
        "sig" : "function (_self, dd, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "validateedit",
        "type" : "function",
        "desc" : "Fires after a cell is edited, but before the value is set in the record. \nYou can use this to modify the value being set in the field, Return false\nto cancel the change. The edit event object has the following properties <br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>editor - This editor</li>\n<li>grid - This grid</li>\n<li>record - The record being edited</li>\n<li>field - The field name being edited</li>\n<li>value - The value being set</li>\n<li>originalValue - The original value for the field, before the edit.</li>\n<li>row - The grid row index</li>\n<li>column - The grid column index</li>\n<li>cancel - Set this to true to cancel the edit or return false from your handler.</li>\n</ul>",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addColumns",
        "type" : "function",
        "desc" : "addColumns\nAdd's a column, default at the end..",
        "sig" : "(position, of)",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "Causes the grid to manually recalculate its dimensions. Generally this is done automatically,\nbut if manual update is required this method will initiate it.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroy this grid.",
        "sig" : "(removeEl)",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getColumnModel",
        "type" : "function",
        "desc" : "Returns the grid's ColumnModel.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "getDataSource",
        "type" : "function",
        "desc" : "Returns the grid's DataSource.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "getDragDropText",
        "type" : "function",
        "desc" : "Called to get grid's drag proxy text, by default returns this.ddText.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getGridEl",
        "type" : "function",
        "desc" : "Returns the grid's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "getSelectionModel",
        "type" : "function",
        "desc" : "Returns the grid's SelectionModel.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "getView",
        "type" : "function",
        "desc" : "Returns the grid's GridView object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "reconfigure",
        "type" : "function",
        "desc" : "Reconfigures the grid to use a different Store and Column Model.\nThe View will be bound to the new objects and refreshed.",
        "sig" : "(dataSource, The)",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Called once after all setup has been completed and the grid is ready to be rendered.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "startEditing",
        "type" : "function",
        "desc" : "Starts editing the specified for the specified row/column",
        "sig" : "(rowIndex, colIndex)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "stopEditing",
        "type" : "function",
        "desc" : "Stops any active editing",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.grid.Grid" : {
    "props" : [
      {
        "name" : "autoExpandColumn",
        "type" : "String",
        "desc" : "The id (or dataIndex) of a column in this grid that should expand to fill unused space. This id can not be 0. Default is false.",
        "memberOf" : ""
      },
      {
        "name" : "autoExpandMax",
        "type" : "Number",
        "desc" : "The maximum width the autoExpandColumn can have (if enabled). Default is 1000.",
        "memberOf" : ""
      },
      {
        "name" : "autoExpandMin",
        "type" : "Number",
        "desc" : "The minimum width the autoExpandColumn can have (if enabled).\nDefault is 50.",
        "memberOf" : ""
      },
      {
        "name" : "autoHeight",
        "type" : "Boolean",
        "desc" : "True to fit the height of the grid container to the height of the data. Default is false.",
        "memberOf" : ""
      },
      {
        "name" : "autoSizeColumns",
        "type" : "Boolean",
        "desc" : "True to automatically resize the columns to fit their content\n<b>on initial render.</b> It is more efficient to explicitly size the columns\nthrough the ColumnModel's {@link Roo.grid.ColumnModel#width} config option.  Default is false.",
        "memberOf" : ""
      },
      {
        "name" : "autoSizeHeaders",
        "type" : "Boolean",
        "desc" : "True to measure headers with column data when auto sizing columns. Default is true.",
        "memberOf" : ""
      },
      {
        "name" : "autoWidth",
        "type" : "Boolean",
        "desc" : "True to set the grid's width to the default total width of the grid's columns instead\nof a fixed width. Default is false.",
        "memberOf" : ""
      },
      {
        "name" : "ddGroup",
        "type" : "String",
        "desc" : "- drag drop group.",
        "memberOf" : ""
      },
      {
        "name" : "ddText",
        "type" : "String",
        "desc" : "Configures the text is the drag proxy (defaults to \"%0 selected row(s)\").\n%0 is replaced with the number of selected rows.",
        "memberOf" : ""
      },
      {
        "name" : "dragGroup",
        "type" : "String",
        "desc" : "- drag group (?? not sure if needed.)",
        "memberOf" : ""
      },
      {
        "name" : "dropTarget",
        "type" : "Roo.dd.DropTarget",
        "desc" : "An {@link Roo.dd.DropTarget} config",
        "memberOf" : ""
      },
      {
        "name" : "enableColumnHide",
        "type" : "Boolean",
        "desc" : "True to enable hiding of columns with the header context menu. Default is true.",
        "memberOf" : ""
      },
      {
        "name" : "enableColumnMove",
        "type" : "Boolean",
        "desc" : "True to enable drag and drop reorder of columns. Default is true.",
        "memberOf" : ""
      },
      {
        "name" : "enableDrag",
        "type" : "Boolean",
        "desc" : "True to enable drag of rows. Default is false. (double check if this is needed?)",
        "memberOf" : ""
      },
      {
        "name" : "enableDragDrop",
        "type" : "Boolean",
        "desc" : "True to enable drag and drop of rows. Default is false.",
        "memberOf" : ""
      },
      {
        "name" : "enableDrop",
        "type" : "Boolean",
        "desc" : "True to enable drop of elements. Default is false. (double check if this is needed?)",
        "memberOf" : ""
      },
      {
        "name" : "enableRowHeightSync",
        "type" : "Boolean",
        "desc" : "True to manually sync row heights across locked and not locked rows. Default is false.",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadMask",
        "type" : "Object",
        "desc" : "An {@link Roo.LoadMask} config or true to mask the grid while loading. Default is false.",
        "memberOf" : ""
      },
      {
        "name" : "maxHeight",
        "type" : "Number",
        "desc" : "Sets the maximum height of the grid - ignored if autoHeight is not on.",
        "memberOf" : ""
      },
      {
        "name" : "maxRowsToMeasure",
        "type" : "Boolean",
        "desc" : "If autoSizeColumns is on, maxRowsToMeasure can be used to limit the number of\nrows measured to get a columns size. Default is 0 (all rows).",
        "memberOf" : ""
      },
      {
        "name" : "minColumnWidth",
        "type" : "Number",
        "desc" : "The minimum width a column can be resized to. Default is 25.",
        "memberOf" : ""
      },
      {
        "name" : "monitorWindowResize",
        "type" : "Boolean",
        "desc" : "True to autoSize the grid when the window resizes. Default is true.",
        "memberOf" : ""
      },
      {
        "name" : "stripeRows",
        "type" : "Boolean",
        "desc" : "True to stripe the rows.  Default is true.",
        "memberOf" : ""
      },
      {
        "name" : "trackMouseOver",
        "type" : "Boolean",
        "desc" : "True to highlight rows when the mouse is over. Default is true.",
        "memberOf" : ""
      },
      {
        "name" : "view",
        "type" : "Object",
        "desc" : "The {@link Roo.grid.GridView} used by the grid. This can be set before a call to render().",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "bodyscroll",
        "type" : "function",
        "desc" : "Fires when the body element is scrolled",
        "sig" : "function (scrollLeft, scrollTop)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "cellclick",
        "type" : "function",
        "desc" : "Fires when a cell is clicked",
        "sig" : "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "cellcontextmenu",
        "type" : "function",
        "desc" : "Fires when a cell is right clicked",
        "sig" : "function (_self, rowIndex, cellIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "celldblclick",
        "type" : "function",
        "desc" : "Fires when a cell is double clicked",
        "sig" : "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "The raw click event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "columnmove",
        "type" : "function",
        "desc" : "Fires when the user moves a column",
        "sig" : "function (oldIndex, newIndex)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "columnresize",
        "type" : "function",
        "desc" : "Fires when the user resizes a column",
        "sig" : "function (columnIndex, newSize)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "contextmenu",
        "type" : "function",
        "desc" : "The raw contextmenu event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "dblclick",
        "type" : "function",
        "desc" : "The raw dblclick event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "dragdrop",
        "type" : "function",
        "desc" : "Fires when dragged row(s) are dropped on a valid DD target",
        "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "dragenter",
        "type" : "function",
        "desc" : "Fires when the dragged row(s) first cross another DD target while being dragged",
        "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "dragout",
        "type" : "function",
        "desc" : "Fires when the dragged row(s) leave another DD target while being dragged",
        "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "dragover",
        "type" : "function",
        "desc" : "Fires while row(s) are being dragged. \"targetId\" is the id of the Yahoo.util.DD object the selected rows are being dragged over.",
        "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "enddrag",
        "type" : "function",
        "desc" : "Fires when a drag operation is complete",
        "sig" : "function (_self, dd, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "headerclick",
        "type" : "function",
        "desc" : "Fires when a header is clicked",
        "sig" : "function (_self, columnIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "headercontextmenu",
        "type" : "function",
        "desc" : "Fires when a header is right clicked",
        "sig" : "function (_self, columnIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "headerdblclick",
        "type" : "function",
        "desc" : "Fires when a header cell is double clicked",
        "sig" : "function (_self, columnIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "keydown",
        "type" : "function",
        "desc" : "The raw keydown event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "keypress",
        "type" : "function",
        "desc" : "The raw keypress event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mousedown",
        "type" : "function",
        "desc" : "The raw mousedown event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mouseout",
        "type" : "function",
        "desc" : "The raw mouseout event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mouseover",
        "type" : "function",
        "desc" : "The raw mouseover event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mouseup",
        "type" : "function",
        "desc" : "The raw mouseup event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when the grid is rendered",
        "sig" : "function (grid)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "rowclass",
        "type" : "function",
        "desc" : "Fires when a row is rendered, so you can change add a style to it.",
        "sig" : "function (gridview, rowcfg)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "rowclick",
        "type" : "function",
        "desc" : "Fires when a row is clicked",
        "sig" : "function (_self, rowIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "rowcontextmenu",
        "type" : "function",
        "desc" : "Fires when a row is right clicked",
        "sig" : "function (_self, rowIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "rowdblclick",
        "type" : "function",
        "desc" : "Fires when a row is double clicked",
        "sig" : "function (_self, rowIndex, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "startdrag",
        "type" : "function",
        "desc" : "Fires when row(s) start being dragged",
        "sig" : "function (_self, dd, e)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addColumns",
        "type" : "function",
        "desc" : "addColumns\nAdd's a column, default at the end..",
        "sig" : "(position, of)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "Causes the grid to manually recalculate its dimensions. Generally this is done automatically,\nbut if manual update is required this method will initiate it.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroy this grid.",
        "sig" : "(removeEl)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getColumnModel",
        "type" : "function",
        "desc" : "Returns the grid's ColumnModel.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getDataSource",
        "type" : "function",
        "desc" : "Returns the grid's DataSource.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getDragDropText",
        "type" : "function",
        "desc" : "Called to get grid's drag proxy text, by default returns this.ddText.\nOverride this to put something different in the dragged text.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getGridEl",
        "type" : "function",
        "desc" : "Returns the grid's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getSelectionModel",
        "type" : "function",
        "desc" : "Returns the grid's SelectionModel.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getView",
        "type" : "function",
        "desc" : "Returns the grid's GridView object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "reconfigure",
        "type" : "function",
        "desc" : "Reconfigures the grid to use a different Store and Column Model.\nThe View will be bound to the new objects and refreshed.",
        "sig" : "(dataSource, The)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Called once after all setup has been completed and the grid is ready to be rendered.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.grid.GridEditor" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "alignment",
        "type" : "String",
        "desc" : "The position to align to (see {@link Roo.Element#alignTo} for more details, defaults to \"c-c?\").",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autosize",
        "type" : "Boolean/String",
        "desc" : "True for the editor to automatically adopt the size of the underlying field, \"width\" to adopt the width only,\nor \"height\" to adopt the height only (defaults to false)",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "cancelOnEsc",
        "type" : "Boolean",
        "desc" : "True to cancel the edit when the escape key is pressed (defaults to false)",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "completeOnEnter",
        "type" : "Boolean",
        "desc" : "True to complete the edit when the enter key is pressed (defaults to false)",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "constrain",
        "type" : "Boolean",
        "desc" : "True to constrain the editor to the viewport",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "field",
        "type" : "Roo.form.Field",
        "desc" : "Field to wrap (or xtyped)",
        "memberOf" : ""
      },
      {
        "name" : "hideEl",
        "type" : "Boolean",
        "desc" : "False to keep the bound element visible while the editor is displayed (defaults to true)",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "ignoreNoChange",
        "type" : "Boolean",
        "desc" : "True to skip the the edit completion process (no save, no events fired) if the user completes an edit and\nthe value has not changed (defaults to false).  Applies only to string values - edits for other data types\nwill never be ignored.",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "revertInvalid",
        "type" : "Boolean",
        "desc" : "True to automatically revert the field value and cancel the edit when the user completes an edit and the field\nvalidation fails (defaults to true)",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "shadow",
        "type" : "Boolean/String",
        "desc" : "\"sides\" for sides/bottom only, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"frame\")",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "updateEl",
        "type" : "Boolean",
        "desc" : "True to update the innerHTML of the bound element when the update completes (defaults to false)",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "The data value of the underlying field (defaults to \"\")",
        "memberOf" : "Roo.Editor"
      }
    ],
    "events" : [
      {
        "name" : "beforecomplete",
        "type" : "function",
        "desc" : "Fires after a change has been made to the field, but before the change is reflected in the underlying\nfield.  Saving the change to the field can be canceled by returning false from the handler of this event.\nNote that if the value has not changed and ignoreNoChange = true, the editing will still end but this\nevent will not fire since no edit actually occurred.",
        "sig" : "function (_self, value, startValue)\n{\n\n}",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforestartedit",
        "type" : "function",
        "desc" : "Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning\nfalse from the handler of this event.",
        "sig" : "function (_self, boundEl, value)\n{\n\n}",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "complete",
        "type" : "function",
        "desc" : "Fires after editing is complete and any changed value has been written to the underlying field.",
        "sig" : "function (_self, value, startValue)\n{\n\n}",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "startedit",
        "type" : "function",
        "desc" : "Fires when this editor is displayed",
        "sig" : "function (boundEl, value)\n{\n\n}",
        "memberOf" : "Roo.Editor"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "cancelEdit",
        "type" : "function",
        "desc" : "Cancels the editing process and hides the editor without persisting any changes.  The field value will be\nreverted to the original starting value.",
        "sig" : "(remainVisible)",
        "static" : false,
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "completeEdit",
        "type" : "function",
        "desc" : "Ends the editing process, persists the changed value to the underlying field, and hides the editor.",
        "sig" : "(remainVisible)",
        "static" : false,
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Gets the data value of the editor",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "realign",
        "type" : "function",
        "desc" : "Realigns the editor to the bound field based on the current alignment config value.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the height and width of this editor.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the data value of the editor",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "startEdit",
        "type" : "function",
        "desc" : "Starts the editing process and shows the editor.",
        "sig" : "(el, value)",
        "static" : false,
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.grid.GridView" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "autoSizeColumn",
        "type" : "function",
        "desc" : "Autofit a column to its content.",
        "sig" : "(colIndex, forceMinSize)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "autoSizeColumns",
        "type" : "function",
        "desc" : "Autofits all columns to their content and then expands to fit any extra space in the grid",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "ensureVisible",
        "type" : "function",
        "desc" : "Scrolls the specified cell into view",
        "sig" : "(row, col, hscroll)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "fitColumns",
        "type" : "function",
        "desc" : "Autofits all columns to the grid's width proportionate with their current size",
        "sig" : "(reserveScrollSpace)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "focusCell",
        "type" : "function",
        "desc" : "Focuses the specified cell.",
        "sig" : "(row, col, hscroll)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "focusRow",
        "type" : "function",
        "desc" : "Focuses the specified row.",
        "sig" : "(row)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getCell",
        "type" : "function",
        "desc" : "Gets the 'td' of the cell",
        "sig" : "(rowIndex, colIndex)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getFooterPanel",
        "type" : "function",
        "desc" : "Gets a panel in the footer of the grid that can be used for toolbars etc.\nAfter modifying the contents of this panel a call to grid.autoSize() may be\nrequired to register any changes in size.",
        "sig" : "(doShow)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getHeaderPanel",
        "type" : "function",
        "desc" : "Gets a panel in the header of the grid that can be used for toolbars etc.\nAfter modifying the contents of this panel a call to grid.autoSize() may be\nrequired to register any changes in size.",
        "sig" : "(doShow)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "refresh",
        "type" : "function",
        "desc" : "Refreshes the grid",
        "sig" : "(headersToo)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "scrollToTop",
        "type" : "function",
        "desc" : "Scrolls the grid to the top",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.grid.PropertyGrid" : {
    "props" : [
      {
        "name" : "autoExpandColumn",
        "type" : "String",
        "desc" : "The id (or dataIndex) of a column in this grid that should expand to fill unused space. This id can not be 0. Default is false.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "autoExpandMax",
        "type" : "Number",
        "desc" : "The maximum width the autoExpandColumn can have (if enabled). Default is 1000.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "autoExpandMin",
        "type" : "Number",
        "desc" : "The minimum width the autoExpandColumn can have (if enabled).\nDefault is 50.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "autoHeight",
        "type" : "Boolean",
        "desc" : "True to fit the height of the grid container to the height of the data. Default is false.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "autoSizeColumns",
        "type" : "Boolean",
        "desc" : "True to automatically resize the columns to fit their content\n<b>on initial render.</b> It is more efficient to explicitly size the columns\nthrough the ColumnModel's {@link Roo.grid.ColumnModel#width} config option.  Default is false.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "autoSizeHeaders",
        "type" : "Boolean",
        "desc" : "True to measure headers with column data when auto sizing columns. Default is true.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "autoWidth",
        "type" : "Boolean",
        "desc" : "True to set the grid's width to the default total width of the grid's columns instead\nof a fixed width. Default is false.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "clicksToEdit",
        "type" : "Number",
        "desc" : "The number of clicks on a cell required to display the cell's editor (defaults to 2)",
        "memberOf" : "Roo.grid.EditorGrid"
      },
      {
        "name" : "customEditors",
        "type" : "Object",
        "desc" : "map of colnames=> custom editors.\nthe custom editor can be one of the standard ones (date|string|number|int|boolean), or a\ngrid editor eg. Roo.grid.GridEditor(new Roo.form.TextArea({selectOnFocus:true})),\nfalse disables editing of the field.",
        "memberOf" : ""
      },
      {
        "name" : "ddGroup",
        "type" : "String",
        "desc" : "- drag drop group.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "ddText",
        "type" : "String",
        "desc" : "Configures the text is the drag proxy (defaults to \"%0 selected row(s)\").\n%0 is replaced with the number of selected rows.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "dragGroup",
        "type" : "String",
        "desc" : "- drag group (?? not sure if needed.)",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "dropTarget",
        "type" : "Roo.dd.DropTarget",
        "desc" : "An {@link Roo.dd.DropTarget} config",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "enableColumnHide",
        "type" : "Boolean",
        "desc" : "True to enable hiding of columns with the header context menu. Default is true.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "enableColumnMove",
        "type" : "Boolean",
        "desc" : "True to enable drag and drop reorder of columns. Default is true.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "enableDrag",
        "type" : "Boolean",
        "desc" : "True to enable drag of rows. Default is false. (double check if this is needed?)",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "enableDragDrop",
        "type" : "Boolean",
        "desc" : "True to enable drag and drop of rows. Default is false.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "enableDrop",
        "type" : "Boolean",
        "desc" : "True to enable drop of elements. Default is false. (double check if this is needed?)",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "enableRowHeightSync",
        "type" : "Boolean",
        "desc" : "True to manually sync row heights across locked and not locked rows. Default is false.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loadMask",
        "type" : "Object",
        "desc" : "An {@link Roo.LoadMask} config or true to mask the grid while loading. Default is false.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "maxHeight",
        "type" : "Number",
        "desc" : "Sets the maximum height of the grid - ignored if autoHeight is not on.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "maxRowsToMeasure",
        "type" : "Boolean",
        "desc" : "If autoSizeColumns is on, maxRowsToMeasure can be used to limit the number of\nrows measured to get a columns size. Default is 0 (all rows).",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "minColumnWidth",
        "type" : "Number",
        "desc" : "The minimum width a column can be resized to. Default is 25.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "monitorWindowResize",
        "type" : "Boolean",
        "desc" : "True to autoSize the grid when the window resizes. Default is true.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "propertyNames",
        "type" : "Object",
        "desc" : "map of property Names to their displayed value",
        "memberOf" : ""
      },
      {
        "name" : "stripeRows",
        "type" : "Boolean",
        "desc" : "True to stripe the rows.  Default is true.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "trackMouseOver",
        "type" : "Boolean",
        "desc" : "True to highlight rows when the mouse is over. Default is true.",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "view",
        "type" : "Object",
        "desc" : "The {@link Roo.grid.GridView} used by the grid. This can be set before a call to render().",
        "memberOf" : "Roo.grid.Grid"
      }
    ],
    "events" : [
      {
        "name" : "afteredit",
        "type" : "function",
        "desc" : "Fires after a cell is edited. <br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>grid - This grid</li>\n<li>record - The record being edited</li>\n<li>field - The field name being edited</li>\n<li>value - The value being set</li>\n<li>originalValue - The original value for the field, before the edit.</li>\n<li>row - The grid row index</li>\n<li>column - The grid column index</li>\n</ul>",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.EditorGrid"
      },
      {
        "name" : "beforeedit",
        "type" : "function",
        "desc" : "Fires before cell editing is triggered. The edit event object has the following properties <br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>grid - This grid</li>\n<li>record - The record being edited</li>\n<li>field - The field name being edited</li>\n<li>value - The value for the field being edited.</li>\n<li>row - The grid row index</li>\n<li>column - The grid column index</li>\n<li>cancel - Set this to true to cancel the edit or return false from your handler.</li>\n</ul>",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.EditorGrid"
      },
      {
        "name" : "beforepropertychange",
        "type" : "function",
        "desc" : "Fires before a property changes (return false to stop?)",
        "sig" : "function (grid, id, newval, oldval)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "bodyscroll",
        "type" : "function",
        "desc" : "Fires when the body element is scrolled",
        "sig" : "function (scrollLeft, scrollTop)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "cellclick",
        "type" : "function",
        "desc" : "Fires when a cell is clicked",
        "sig" : "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "cellcontextmenu",
        "type" : "function",
        "desc" : "Fires when a cell is right clicked",
        "sig" : "function (_self, rowIndex, cellIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "celldblclick",
        "type" : "function",
        "desc" : "Fires when a cell is double clicked",
        "sig" : "function (_self, rowIndex, columnIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "The raw click event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "columnmove",
        "type" : "function",
        "desc" : "Fires when the user moves a column",
        "sig" : "function (oldIndex, newIndex)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "columnresize",
        "type" : "function",
        "desc" : "Fires when the user resizes a column",
        "sig" : "function (columnIndex, newSize)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "contextmenu",
        "type" : "function",
        "desc" : "The raw contextmenu event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "dblclick",
        "type" : "function",
        "desc" : "The raw dblclick event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "dragdrop",
        "type" : "function",
        "desc" : "Fires when dragged row(s) are dropped on a valid DD target",
        "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "dragenter",
        "type" : "function",
        "desc" : "Fires when the dragged row(s) first cross another DD target while being dragged",
        "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "dragout",
        "type" : "function",
        "desc" : "Fires when the dragged row(s) leave another DD target while being dragged",
        "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "dragover",
        "type" : "function",
        "desc" : "Fires while row(s) are being dragged. \"targetId\" is the id of the Yahoo.util.DD object the selected rows are being dragged over.",
        "sig" : "function (_self, dd, targetId, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "enddrag",
        "type" : "function",
        "desc" : "Fires when a drag operation is complete",
        "sig" : "function (_self, dd, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "headerclick",
        "type" : "function",
        "desc" : "Fires when a header is clicked",
        "sig" : "function (_self, columnIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "headercontextmenu",
        "type" : "function",
        "desc" : "Fires when a header is right clicked",
        "sig" : "function (_self, columnIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "headerdblclick",
        "type" : "function",
        "desc" : "Fires when a header cell is double clicked",
        "sig" : "function (_self, columnIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "keydown",
        "type" : "function",
        "desc" : "The raw keydown event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "keypress",
        "type" : "function",
        "desc" : "The raw keypress event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "mousedown",
        "type" : "function",
        "desc" : "The raw mousedown event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "mouseout",
        "type" : "function",
        "desc" : "The raw mouseout event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "mouseover",
        "type" : "function",
        "desc" : "The raw mouseover event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "mouseup",
        "type" : "function",
        "desc" : "The raw mouseup event for the entire grid.",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "propertychange",
        "type" : "function",
        "desc" : "Fires after a property changes",
        "sig" : "function (grid, id, newval, oldval)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires when the grid is rendered",
        "sig" : "function (grid)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "rowclass",
        "type" : "function",
        "desc" : "Fires when a row is rendered, so you can change add a style to it.",
        "sig" : "function (gridview, rowcfg)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "rowclick",
        "type" : "function",
        "desc" : "Fires when a row is clicked",
        "sig" : "function (_self, rowIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "rowcontextmenu",
        "type" : "function",
        "desc" : "Fires when a row is right clicked",
        "sig" : "function (_self, rowIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "rowdblclick",
        "type" : "function",
        "desc" : "Fires when a row is double clicked",
        "sig" : "function (_self, rowIndex, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "startdrag",
        "type" : "function",
        "desc" : "Fires when row(s) start being dragged",
        "sig" : "function (_self, dd, e)\n{\n\n}",
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "validateedit",
        "type" : "function",
        "desc" : "Fires after a cell is edited, but before the value is set in the record. \nYou can use this to modify the value being set in the field, Return false\nto cancel the change. The edit event object has the following properties <br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>editor - This editor</li>\n<li>grid - This grid</li>\n<li>record - The record being edited</li>\n<li>field - The field name being edited</li>\n<li>value - The value being set</li>\n<li>originalValue - The original value for the field, before the edit.</li>\n<li>row - The grid row index</li>\n<li>column - The grid column index</li>\n<li>cancel - Set this to true to cancel the edit or return false from your handler.</li>\n</ul>",
        "sig" : "function (e)\n{\n\n}",
        "memberOf" : "Roo.grid.EditorGrid"
      }
    ],
    "methods" : [
      {
        "name" : "addColumns",
        "type" : "function",
        "desc" : "addColumns\nAdd's a column, default at the end..",
        "sig" : "(position, of)",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "autoSize",
        "type" : "function",
        "desc" : "Causes the grid to manually recalculate its dimensions. Generally this is done automatically,\nbut if manual update is required this method will initiate it.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroy this grid.",
        "sig" : "(removeEl)",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getColumnModel",
        "type" : "function",
        "desc" : "Returns the grid's ColumnModel.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "getDataSource",
        "type" : "function",
        "desc" : "Returns the grid's DataSource.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "getDragDropText",
        "type" : "function",
        "desc" : "Called to get grid's drag proxy text, by default returns this.ddText.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.EditorGrid"
      },
      {
        "name" : "getGridEl",
        "type" : "function",
        "desc" : "Returns the grid's underlying element.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "getSelectionModel",
        "type" : "function",
        "desc" : "Returns the grid's SelectionModel.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "getSource",
        "type" : "function",
        "desc" : "Gets all the data from the grid.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getView",
        "type" : "function",
        "desc" : "Returns the grid's GridView object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "reconfigure",
        "type" : "function",
        "desc" : "Reconfigures the grid to use a different Store and Column Model.\nThe View will be bound to the new objects and refreshed.",
        "sig" : "(dataSource, The)",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Called once after all setup has been completed and the grid is ready to be rendered.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.Grid"
      },
      {
        "name" : "setSource",
        "type" : "function",
        "desc" : "Sets the data for the Grid\naccepts a Key => Value object of all the elements avaiable.",
        "sig" : "(data)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "startEditing",
        "type" : "function",
        "desc" : "Starts editing the specified for the specified row/column",
        "sig" : "(rowIndex, colIndex)",
        "static" : false,
        "memberOf" : "Roo.grid.EditorGrid"
      },
      {
        "name" : "stopEditing",
        "type" : "function",
        "desc" : "Stops any active editing",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.EditorGrid"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.grid.RowSelectionModel" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "singleSelect",
        "type" : "Boolean",
        "desc" : "True to allow selection of only one row at a time (defaults to false)",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "afterselectionchange",
        "type" : "function",
        "desc" : "Fires after the selection changes (eg. by key press or clicking)",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforerowselect",
        "type" : "function",
        "desc" : "Fires when a row is selected being selected, return false to cancel.",
        "sig" : "function (_self, rowIndex, keepExisting)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "rowdeselect",
        "type" : "function",
        "desc" : "Fires when a row is deselected.",
        "sig" : "function (_self, rowIndex)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "rowselect",
        "type" : "function",
        "desc" : "Fires when a row is selected.",
        "sig" : "function (_self, rowIndex, r)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "selectionchange",
        "type" : "function",
        "desc" : "Fires when the selection changes",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearSelections",
        "type" : "function",
        "desc" : "Clears all selections.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "deselectRange",
        "type" : "function",
        "desc" : "Deselects a range of rows. All rows in between startRow and endRow are also deselected.",
        "sig" : "(startRow, endRow)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "deselectRow",
        "type" : "function",
        "desc" : "Deselects a row.",
        "sig" : "(row)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getCount",
        "type" : "function",
        "desc" : "Gets the number of selected rows.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getSelected",
        "type" : "function",
        "desc" : "Returns the first selected record.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getSelections",
        "type" : "function",
        "desc" : "Returns the selected records",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hasSelection",
        "type" : "function",
        "desc" : "Returns True if there is a selection.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isIdSelected",
        "type" : "function",
        "desc" : "Returns True if the specified record id is selected.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isLocked",
        "type" : "function",
        "desc" : "Returns true if the selections are locked.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.AbstractSelectionModel"
      },
      {
        "name" : "isSelected",
        "type" : "function",
        "desc" : "Returns True if the specified row is selected.",
        "sig" : "(record)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "lock",
        "type" : "function",
        "desc" : "Locks the selections.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.AbstractSelectionModel"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "selectAll",
        "type" : "function",
        "desc" : "Selects all rows.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectFirstRow",
        "type" : "function",
        "desc" : "Selects the first row in the grid.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectLastRow",
        "type" : "function",
        "desc" : "Select the last row.",
        "sig" : "(keepExisting)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectNext",
        "type" : "function",
        "desc" : "Selects the row immediately following the last selected row.",
        "sig" : "(keepExisting)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectPrevious",
        "type" : "function",
        "desc" : "Selects the row that precedes the last selected row.",
        "sig" : "(keepExisting)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectRange",
        "type" : "function",
        "desc" : "Selects a range of rows. All rows in between startRow and endRow are also selected.",
        "sig" : "(startRow, endRow, keepExisting)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectRecords",
        "type" : "function",
        "desc" : "Select records.",
        "sig" : "(records, keepExisting)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectRow",
        "type" : "function",
        "desc" : "Selects a row.",
        "sig" : "(row, keepExisting)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectRows",
        "type" : "function",
        "desc" : "Selects multiple rows.",
        "sig" : "(rows, keepExisting)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unlock",
        "type" : "function",
        "desc" : "Unlocks the selections.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.grid.AbstractSelectionModel"
      }
    ]
  },
  "Roo.grid.SplitDragZone" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addInvalidHandleClass",
        "type" : "function",
        "desc" : "Lets you specify a css class of elements that will not initiate a drag",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addInvalidHandleId",
        "type" : "function",
        "desc" : "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addInvalidHandleType",
        "type" : "function",
        "desc" : "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag.",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addToGroup",
        "type" : "function",
        "desc" : "Add this instance to a group of related drag/drop objects.  All\ninstances belong to at least one group, and can belong to as many\ngroups as needed.",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "alignElWithMouse",
        "type" : "function",
        "desc" : "Sets the element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is.",
        "sig" : "(el, iPageX, iPageY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "applyConfig",
        "type" : "function",
        "desc" : "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and\nDragDrop in order to get all of the parameters that are available in\neach object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "autoOffset",
        "type" : "function",
        "desc" : "Sets the pointer offset to the distance between the linked element's top\nleft corner and the location the element was clicked",
        "sig" : "(iPageX, iPageY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "cachePosition",
        "type" : "function",
        "desc" : "Saves the most recent position so that we can reset the constraints and\ntick marks on-demand.  We need to know this so that we can calculate the\nnumber of pixels the element is offset from its original position.",
        "sig" : "(iPageX, iPageY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearConstraints",
        "type" : "function",
        "desc" : "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "clearTicks",
        "type" : "function",
        "desc" : "Clears any tick interval defined for this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "createFrame",
        "type" : "function",
        "desc" : "Creates the proxy element if it does not yet exist",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DDProxy"
      },
      {
        "name" : "endDrag",
        "type" : "function",
        "desc" : "Fired when we are done dragging the object",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getDragEl",
        "type" : "function",
        "desc" : "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another\nelement. An example of this can be found in Roo.dd.DDProxy",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns a reference to the linked element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "init",
        "type" : "function",
        "desc" : "Sets up the DragDrop object.  Must be called in the constructor of any\nRoo.dd.DragDrop subclass",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "initFrame",
        "type" : "function",
        "desc" : "Initialization for the drag frame element.  Must be called in the\nconstructor of all subclasses",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DDProxy"
      },
      {
        "name" : "initTarget",
        "type" : "function",
        "desc" : "Initializes Targeting functionality only... the object does not\nget a mousedown handler.",
        "sig" : "(id, sGroup, config)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isLocked",
        "type" : "function",
        "desc" : "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag/drop is disabled on the page.)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isTarget",
        "type" : "function",
        "desc" : "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "isValidHandleChild",
        "type" : "function",
        "desc" : "Checks the tag exclusion list to see if this click should be ignored",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "lock",
        "type" : "function",
        "desc" : "Lock this instance",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "onAvailable",
        "type" : "function",
        "desc" : "Override the onAvailable method to do what is needed after the initial\nposition was determined.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDrag",
        "type" : "function",
        "desc" : "Abstract method called during the onMouseMove event while dragging an\nobject.",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on another DragDrop\nobj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragEnter",
        "type" : "function",
        "desc" : "Abstract method called when this element fist begins hovering over\nanother DragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragOut",
        "type" : "function",
        "desc" : "Abstract method called when we are no longer hovering over an element",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onDragOver",
        "type" : "function",
        "desc" : "Abstract method called when this element is hovering over another\nDragDrop obj",
        "sig" : "(e, id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onInvalidDrop",
        "type" : "function",
        "desc" : "Abstract method called when this item is dropped on an area with no\ndrop target",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onMouseDown",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mousedown",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "onMouseUp",
        "type" : "function",
        "desc" : "Event handler that fires when a drag/drop obj gets a mouseup",
        "sig" : "(e)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "padding",
        "type" : "function",
        "desc" : "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeFromGroup",
        "type" : "function",
        "desc" : "Remove's this instance from the supplied interaction group",
        "sig" : "(sGroup)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleClass",
        "type" : "function",
        "desc" : "Unsets an invalid css class",
        "sig" : "(cssClass)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleId",
        "type" : "function",
        "desc" : "Unsets an invalid handle id",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeInvalidHandleType",
        "type" : "function",
        "desc" : "Unsets an excluded tag name set by addInvalidHandleType",
        "sig" : "(tagName)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "resetConstraints",
        "type" : "function",
        "desc" : "resetConstraints must be called if you manually reposition a dd element.",
        "sig" : "(maintainOffset)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setDelta",
        "type" : "function",
        "desc" : "Sets the pointer offset.  You can call this directly to force the\noffset to be in a particular location (e.g., pass in 0,0 to set it\nto the center of the object)",
        "sig" : "(iDeltaX, iDeltaY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "setDragElId",
        "type" : "function",
        "desc" : "Allows you to specify that an element other than the linked element\nwill be moved with the cursor during a drag",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setDragElPos",
        "type" : "function",
        "desc" : "Sets the drag element to the location of the mousedown or click event,\nmaintaining the cursor location relative to the location on the element\nthat was clicked.  Override this if you want to place the element in a\nlocation other than where the cursor is.",
        "sig" : "(iPageX, iPageY)",
        "static" : false,
        "memberOf" : "Roo.dd.DD"
      },
      {
        "name" : "setHandleElId",
        "type" : "function",
        "desc" : "Allows you to specify a child of the linked element that should be\nused to initiate the drag operation.  An example of this would be if\nyou have a content div with text and links.  Clicking anywhere in the\ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element\nthat starts the drag operation.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setInitPosition",
        "type" : "function",
        "desc" : "Stores the initial placement of the linked element.",
        "sig" : "(diffX, diffY)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setOuterHandleElId",
        "type" : "function",
        "desc" : "Allows you to set an element outside of the linked element as a drag\nhandle",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setPadding",
        "type" : "function",
        "desc" : "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.\nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.",
        "sig" : "(iTop, iRight, iBot, iLeft)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setXConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Use\nthis method to limit the horizontal travel of the element.  Pass in\n0,0 for the parameters if you want to lock the drag to the y axis.",
        "sig" : "(iLeft, iRight, iTickSize)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "setYConstraint",
        "type" : "function",
        "desc" : "By default, the element can be dragged any place on the screen.  Set\nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis.",
        "sig" : "(iUp, iDown, iTickSize)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "startDrag",
        "type" : "function",
        "desc" : "Abstract method called after a drag/drop object is clicked\nand the drag or mousedown time thresholds have beeen met.",
        "sig" : "(X, Y)",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "toString",
        "type" : "function",
        "desc" : "toString method",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unlock",
        "type" : "function",
        "desc" : "Unlock this instace",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      },
      {
        "name" : "unreg",
        "type" : "function",
        "desc" : "Remove all drag and drop hooks for this element",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.dd.DragDrop"
      }
    ]
  },
  "Roo.lib" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.lib.Ajax" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "request",
        "type" : "function",
        "desc" : "",
        "sig" : "()\n{\n\n}",
        "static" : true,
        "memberOf" : ""
      }
    ]
  },
  "Roo.lib.Dom" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.menu" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.menu.Adapter" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "activeClass",
        "type" : "String",
        "desc" : "The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "canActivate",
        "type" : "Boolean",
        "desc" : "True if this item can be visually activated (defaults to false)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "handler",
        "type" : "Function",
        "desc" : "A function that will handle the click event of this menu item (defaults to undefined)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "True to prevent creation of this menu item (defaults to false)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hideDelay",
        "type" : "Number",
        "desc" : "Length of time in milliseconds to wait before hiding after a click (defaults to 100)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideOnClick",
        "type" : "Boolean",
        "desc" : "True to hide the containing menu after this item is clicked (defaults to true)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this item is activated",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this item is clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this item is deactivated",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.menu.BaseItem" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "activeClass",
        "type" : "String",
        "desc" : "The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "canActivate",
        "type" : "Boolean",
        "desc" : "True if this item can be visually activated (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "handler",
        "type" : "Function",
        "desc" : "A function that will handle the click event of this menu item (defaults to undefined)",
        "memberOf" : ""
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "True to prevent creation of this menu item (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "hideDelay",
        "type" : "Number",
        "desc" : "Length of time in milliseconds to wait before hiding after a click (defaults to 100)",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideOnClick",
        "type" : "Boolean",
        "desc" : "True to hide the containing menu after this item is clicked (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this item is activated",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this item is clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this item is deactivated",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.menu.CheckItem" : {
    "props" : [
      {
        "name" : "HTML",
        "type" : "String",
        "desc" : "to render in menu\nThe text to show on the menu item (HTML version).",
        "memberOf" : "Roo.menu.Item"
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "activeClass",
        "type" : "String",
        "desc" : "The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "canActivate",
        "type" : "Boolean",
        "desc" : "True if this item can be visually activated (defaults to true)",
        "memberOf" : "Roo.menu.Item"
      },
      {
        "name" : "checked",
        "type" : "Boolean",
        "desc" : "True to initialize this checkbox as checked (defaults to false).  Note that\nif this checkbox is part of a radio group (group = true) only the last item in the group that is\ninitialized with checked = true will be rendered as checked.",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "group",
        "type" : "String",
        "desc" : "All check items with the same group name will automatically be grouped into a single-select\nradio button group (defaults to '')",
        "memberOf" : ""
      },
      {
        "name" : "groupClass",
        "type" : "String",
        "desc" : "The default CSS class to use for radio group check items (defaults to \"x-menu-group-item\")",
        "memberOf" : ""
      },
      {
        "name" : "handler",
        "type" : "Function",
        "desc" : "A function that will handle the click event of this menu item (defaults to undefined)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "True to prevent creation of this menu item (defaults to false)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hideDelay",
        "type" : "Number",
        "desc" : "Length of time in milliseconds to wait before hiding after a click (defaults to 100)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideOnClick",
        "type" : "Boolean",
        "desc" : "True to hide the containing menu after this item is clicked (defaults to true)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : "The path to an icon to display in this menu item (defaults to Roo.BLANK_IMAGE_URL)",
        "memberOf" : "Roo.menu.Item"
      },
      {
        "name" : "itemCls",
        "type" : "String",
        "desc" : "The default CSS class to use for check items (defaults to \"x-menu-item x-menu-check-item\")",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "showDelay",
        "type" : "Number",
        "desc" : "Length of time in milliseconds to wait before showing this item (defaults to 200)",
        "memberOf" : "Roo.menu.Item"
      },
      {
        "name" : "text",
        "type" : "String",
        "desc" : "The text to show on the menu item.",
        "memberOf" : "Roo.menu.Item"
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this item is activated",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "beforecheckchange",
        "type" : "function",
        "desc" : "Fires before the checked value is set, providing an opportunity to cancel if needed",
        "sig" : "function (_self, checked)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "checkchange",
        "type" : "function",
        "desc" : "Fires after the checked value has been set",
        "sig" : "function (_self, checked)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this item is clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this item is deactivated",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setChecked",
        "type" : "function",
        "desc" : "Set the checked state of this item",
        "sig" : "(checked, suppressEvent)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setText",
        "type" : "function",
        "desc" : "Sets the text to display in this menu item",
        "sig" : "(text, isHTML)",
        "static" : false,
        "memberOf" : "Roo.menu.Item"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.menu.ColorItem" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "activeClass",
        "type" : "String",
        "desc" : "The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "canActivate",
        "type" : "Boolean",
        "desc" : "True if this item can be visually activated (defaults to false)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "handler",
        "type" : "Function",
        "desc" : "A function that will handle the click event of this menu item (defaults to undefined)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "True to prevent creation of this menu item (defaults to false)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hideDelay",
        "type" : "Number",
        "desc" : "Length of time in milliseconds to wait before hiding after a click (defaults to 100)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideOnClick",
        "type" : "Boolean",
        "desc" : "True to hide the containing menu after this item is clicked (defaults to true)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this item is activated",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this item is clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this item is deactivated",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.menu.ColorMenu" : {
    "props" : [
      {
        "name" : "allowOtherMenus",
        "type" : "Boolean",
        "desc" : "True to allow multiple menus to be displayed at the same time (defaults to false)",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "defaultAlign",
        "type" : "String",
        "desc" : "The default {@link Roo.Element#alignTo) anchor position value for this menu\nrelative to its element of origin (defaults to \"tl-bl?\")",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "minWidth",
        "type" : "Number",
        "desc" : "The minimum width of the menu in pixels (defaults to 120)",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "registerMenu",
        "type" : "Boolean",
        "desc" : "True (default) - means that clicking on screen etc. hides it.",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "shadow",
        "type" : "Boolean/String",
        "desc" : "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"sides\")",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "subMenuAlign",
        "type" : "String",
        "desc" : "The {@link Roo.Element#alignTo} anchor position value to use for submenus of\nthis menu (defaults to \"tl-tr?\")",
        "memberOf" : "Roo.menu.Menu"
      }
    ],
    "events" : [
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before this menu is hidden",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before this menu is displayed",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this menu is clicked (or when the enter key is pressed while it is active)",
        "sig" : "function (_self, menuItem, e)\n{\n\n}",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after this menu is hidden",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "itemclick",
        "type" : "function",
        "desc" : "Fires when a menu item contained in this menu is clicked",
        "sig" : "function (baseItem, e)\n{\n\n}",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "mouseout",
        "type" : "function",
        "desc" : "Fires when the mouse exits this menu",
        "sig" : "function (_self, e, menuItem)\n{\n\n}",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "mouseover",
        "type" : "function",
        "desc" : "Fires when the mouse is hovering over this menu",
        "sig" : "function (_self, e, menuItem)\n{\n\n}",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "",
        "sig" : "function (palette, color)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after this menu is displayed",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.Menu"
      }
    ],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Addds one or more items of any type supported by the Menu class, or that can be converted into menu items.\nAny of the following are valid:\n<ul>\n<li>Any menu item object based on {@link Roo.menu.Item}</li>\n<li>An HTMLElement object which will be converted to a menu item</li>\n<li>A menu item config object that will be created as a new menu item</li>\n<li>A string, which can either be '-' or 'separator' to add a menu separator, otherwise\nit will be converted into a {@link Roo.menu.TextItem} and added</li>\n</ul>\nUsage:\n<pre><code>\n// Create the menu\nvar menu = new Roo.menu.Menu();\n\n// Create a menu item to add by reference\nvar menuItem = new Roo.menu.Item({ text: 'New Item!' });\n\n// Add a bunch of items at once using different methods.\n// Only the last item added will be returned.\nvar item = menu.add(\n    menuItem,                // add existing item by ref\n    'Dynamic Item',          // new TextItem\n    '-',                     // new separator\n    { text: 'Config Item' }  // new item by config\n);\n</code></pre>",
        "sig" : "(args)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "addElement",
        "type" : "function",
        "desc" : "Adds an {@link Roo.Element} object to the menu",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addItem",
        "type" : "function",
        "desc" : "Adds an existing object based on {@link Roo.menu.Item} to the menu",
        "sig" : "(item)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addMenuItem",
        "type" : "function",
        "desc" : "Creates a new {@link Roo.menu.Item} based an the supplied config object and adds it to the menu",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "addSeparator",
        "type" : "function",
        "desc" : "Adds a separator bar to the menu",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "addText",
        "type" : "function",
        "desc" : "Creates a new {@link Roo.menu.TextItem} with the supplied text and adds it to the menu",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns this menu's underlying {@link Roo.Element} object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this menu and optionally all parent menus",
        "sig" : "(deep)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "insert",
        "type" : "function",
        "desc" : "Inserts an existing object based on {@link Roo.menu.Item} to the menu at a specified index",
        "sig" : "(index, item)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Read-only.  Returns true if the menu is currently displayed, else false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Removes an {@link Roo.menu.Item} from the menu and destroys the object",
        "sig" : "(item)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "removeAll",
        "type" : "function",
        "desc" : "Removes and destroys all items in the menu",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Displays this menu relative to another element",
        "sig" : "(element, position, parentMenu)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "showAt",
        "type" : "function",
        "desc" : "Displays this menu at a specific xy position",
        "sig" : "(xyPosition, parentMenu)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.menu.DateItem" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "activeClass",
        "type" : "String",
        "desc" : "The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "canActivate",
        "type" : "Boolean",
        "desc" : "True if this item can be visually activated (defaults to false)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "handler",
        "type" : "Function",
        "desc" : "A function that will handle the click event of this menu item (defaults to undefined)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "True to prevent creation of this menu item (defaults to false)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hideDelay",
        "type" : "Number",
        "desc" : "Length of time in milliseconds to wait before hiding after a click (defaults to 100)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideOnClick",
        "type" : "Boolean",
        "desc" : "True to hide the containing menu after this item is clicked (defaults to true)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this item is activated",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this item is clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this item is deactivated",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.menu.DateMenu" : {
    "props" : [
      {
        "name" : "allowOtherMenus",
        "type" : "Boolean",
        "desc" : "True to allow multiple menus to be displayed at the same time (defaults to false)",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "defaultAlign",
        "type" : "String",
        "desc" : "The default {@link Roo.Element#alignTo) anchor position value for this menu\nrelative to its element of origin (defaults to \"tl-bl?\")",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "minWidth",
        "type" : "Number",
        "desc" : "The minimum width of the menu in pixels (defaults to 120)",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "registerMenu",
        "type" : "Boolean",
        "desc" : "True (default) - means that clicking on screen etc. hides it.",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "shadow",
        "type" : "Boolean/String",
        "desc" : "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"sides\")",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "subMenuAlign",
        "type" : "String",
        "desc" : "The {@link Roo.Element#alignTo} anchor position value to use for submenus of\nthis menu (defaults to \"tl-tr?\")",
        "memberOf" : "Roo.menu.Menu"
      }
    ],
    "events" : [
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before this menu is hidden",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before this menu is displayed",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this menu is clicked (or when the enter key is pressed while it is active)",
        "sig" : "function (_self, menuItem, e)\n{\n\n}",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after this menu is hidden",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "itemclick",
        "type" : "function",
        "desc" : "Fires when a menu item contained in this menu is clicked",
        "sig" : "function (baseItem, e)\n{\n\n}",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "mouseout",
        "type" : "function",
        "desc" : "Fires when the mouse exits this menu",
        "sig" : "function (_self, e, menuItem)\n{\n\n}",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "mouseover",
        "type" : "function",
        "desc" : "Fires when the mouse is hovering over this menu",
        "sig" : "function (_self, e, menuItem)\n{\n\n}",
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "",
        "sig" : "function (picker, date)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after this menu is displayed",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.Menu"
      }
    ],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Addds one or more items of any type supported by the Menu class, or that can be converted into menu items.\nAny of the following are valid:\n<ul>\n<li>Any menu item object based on {@link Roo.menu.Item}</li>\n<li>An HTMLElement object which will be converted to a menu item</li>\n<li>A menu item config object that will be created as a new menu item</li>\n<li>A string, which can either be '-' or 'separator' to add a menu separator, otherwise\nit will be converted into a {@link Roo.menu.TextItem} and added</li>\n</ul>\nUsage:\n<pre><code>\n// Create the menu\nvar menu = new Roo.menu.Menu();\n\n// Create a menu item to add by reference\nvar menuItem = new Roo.menu.Item({ text: 'New Item!' });\n\n// Add a bunch of items at once using different methods.\n// Only the last item added will be returned.\nvar item = menu.add(\n    menuItem,                // add existing item by ref\n    'Dynamic Item',          // new TextItem\n    '-',                     // new separator\n    { text: 'Config Item' }  // new item by config\n);\n</code></pre>",
        "sig" : "(args)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "addElement",
        "type" : "function",
        "desc" : "Adds an {@link Roo.Element} object to the menu",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addItem",
        "type" : "function",
        "desc" : "Adds an existing object based on {@link Roo.menu.Item} to the menu",
        "sig" : "(item)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addMenuItem",
        "type" : "function",
        "desc" : "Creates a new {@link Roo.menu.Item} based an the supplied config object and adds it to the menu",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "addSeparator",
        "type" : "function",
        "desc" : "Adds a separator bar to the menu",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "addText",
        "type" : "function",
        "desc" : "Creates a new {@link Roo.menu.TextItem} with the supplied text and adds it to the menu",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns this menu's underlying {@link Roo.Element} object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this menu and optionally all parent menus",
        "sig" : "(deep)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "insert",
        "type" : "function",
        "desc" : "Inserts an existing object based on {@link Roo.menu.Item} to the menu at a specified index",
        "sig" : "(index, item)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Read-only.  Returns true if the menu is currently displayed, else false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Removes an {@link Roo.menu.Item} from the menu and destroys the object",
        "sig" : "(item)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "removeAll",
        "type" : "function",
        "desc" : "Removes and destroys all items in the menu",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Displays this menu relative to another element",
        "sig" : "(element, position, parentMenu)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "showAt",
        "type" : "function",
        "desc" : "Displays this menu at a specific xy position",
        "sig" : "(xyPosition, parentMenu)",
        "static" : false,
        "memberOf" : "Roo.menu.Menu"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.menu.Item" : {
    "props" : [
      {
        "name" : "HTML",
        "type" : "String",
        "desc" : "to render in menu\nThe text to show on the menu item (HTML version).",
        "memberOf" : ""
      },
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "activeClass",
        "type" : "String",
        "desc" : "The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "canActivate",
        "type" : "Boolean",
        "desc" : "True if this item can be visually activated (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "handler",
        "type" : "Function",
        "desc" : "A function that will handle the click event of this menu item (defaults to undefined)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "True to prevent creation of this menu item (defaults to false)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hideDelay",
        "type" : "Number",
        "desc" : "Length of time in milliseconds to wait before hiding after a click (defaults to 100)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideOnClick",
        "type" : "Boolean",
        "desc" : "True to hide the containing menu after this item is clicked (defaults to true)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : "The path to an icon to display in this menu item (defaults to Roo.BLANK_IMAGE_URL)",
        "memberOf" : ""
      },
      {
        "name" : "itemCls",
        "type" : "String",
        "desc" : "The default CSS class to use for menu items (defaults to \"x-menu-item\")",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "showDelay",
        "type" : "Number",
        "desc" : "Length of time in milliseconds to wait before showing this item (defaults to 200)",
        "memberOf" : ""
      },
      {
        "name" : "text",
        "type" : "String",
        "desc" : "The text to show on the menu item.",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this item is activated",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this item is clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this item is deactivated",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setText",
        "type" : "function",
        "desc" : "Sets the text to display in this menu item",
        "sig" : "(text, isHTML)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.menu.Menu" : {
    "props" : [
      {
        "name" : "allowOtherMenus",
        "type" : "Boolean",
        "desc" : "True to allow multiple menus to be displayed at the same time (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "defaultAlign",
        "type" : "String",
        "desc" : "The default {@link Roo.Element#alignTo) anchor position value for this menu\nrelative to its element of origin (defaults to \"tl-bl?\")",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "minWidth",
        "type" : "Number",
        "desc" : "The minimum width of the menu in pixels (defaults to 120)",
        "memberOf" : ""
      },
      {
        "name" : "registerMenu",
        "type" : "Boolean",
        "desc" : "True (default) - means that clicking on screen etc. hides it.",
        "memberOf" : ""
      },
      {
        "name" : "shadow",
        "type" : "Boolean/String",
        "desc" : "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"sides\")",
        "memberOf" : ""
      },
      {
        "name" : "subMenuAlign",
        "type" : "String",
        "desc" : "The {@link Roo.Element#alignTo} anchor position value to use for submenus of\nthis menu (defaults to \"tl-tr?\")",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before this menu is hidden",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before this menu is displayed",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this menu is clicked (or when the enter key is pressed while it is active)",
        "sig" : "function (_self, menuItem, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after this menu is hidden",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "itemclick",
        "type" : "function",
        "desc" : "Fires when a menu item contained in this menu is clicked",
        "sig" : "function (baseItem, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mouseout",
        "type" : "function",
        "desc" : "Fires when the mouse exits this menu",
        "sig" : "function (_self, e, menuItem)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mouseover",
        "type" : "function",
        "desc" : "Fires when the mouse is hovering over this menu",
        "sig" : "function (_self, e, menuItem)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after this menu is displayed",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Addds one or more items of any type supported by the Menu class, or that can be converted into menu items.\nAny of the following are valid:\n<ul>\n<li>Any menu item object based on {@link Roo.menu.Item}</li>\n<li>An HTMLElement object which will be converted to a menu item</li>\n<li>A menu item config object that will be created as a new menu item</li>\n<li>A string, which can either be '-' or 'separator' to add a menu separator, otherwise\nit will be converted into a {@link Roo.menu.TextItem} and added</li>\n</ul>\nUsage:\n<pre><code>\n// Create the menu\nvar menu = new Roo.menu.Menu();\n\n// Create a menu item to add by reference\nvar menuItem = new Roo.menu.Item({ text: 'New Item!' });\n\n// Add a bunch of items at once using different methods.\n// Only the last item added will be returned.\nvar item = menu.add(\n    menuItem,                // add existing item by ref\n    'Dynamic Item',          // new TextItem\n    '-',                     // new separator\n    { text: 'Config Item' }  // new item by config\n);\n</code></pre>",
        "sig" : "(args)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addElement",
        "type" : "function",
        "desc" : "Adds an {@link Roo.Element} object to the menu",
        "sig" : "(el)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addItem",
        "type" : "function",
        "desc" : "Adds an existing object based on {@link Roo.menu.Item} to the menu",
        "sig" : "(item)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addMenuItem",
        "type" : "function",
        "desc" : "Creates a new {@link Roo.menu.Item} based an the supplied config object and adds it to the menu",
        "sig" : "(config)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addSeparator",
        "type" : "function",
        "desc" : "Adds a separator bar to the menu",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addText",
        "type" : "function",
        "desc" : "Creates a new {@link Roo.menu.TextItem} with the supplied text and adds it to the menu",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns this menu's underlying {@link Roo.Element} object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hides this menu and optionally all parent menus",
        "sig" : "(deep)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "insert",
        "type" : "function",
        "desc" : "Inserts an existing object based on {@link Roo.menu.Item} to the menu at a specified index",
        "sig" : "(index, item)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Read-only.  Returns true if the menu is currently displayed, else false.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Removes an {@link Roo.menu.Item} from the menu and destroys the object",
        "sig" : "(item)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeAll",
        "type" : "function",
        "desc" : "Removes and destroys all items in the menu",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Displays this menu relative to another element",
        "sig" : "(element, position, parentMenu)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "showAt",
        "type" : "function",
        "desc" : "Displays this menu at a specific xy position",
        "sig" : "(xyPosition, parentMenu)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.menu.MenuMgr" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "get",
        "type" : "function",
        "desc" : "Returns a {@link Roo.menu.Menu} object",
        "sig" : "(menu)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hideAll",
        "type" : "function",
        "desc" : "Hides all menus that are currently visible",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.menu.Separator" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "activeClass",
        "type" : "String",
        "desc" : "The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "canActivate",
        "type" : "Boolean",
        "desc" : "True if this item can be visually activated (defaults to false)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "handler",
        "type" : "Function",
        "desc" : "A function that will handle the click event of this menu item (defaults to undefined)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "True to prevent creation of this menu item (defaults to false)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hideDelay",
        "type" : "Number",
        "desc" : "Length of time in milliseconds to wait before hiding after a click (defaults to 100)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideOnClick",
        "type" : "Boolean",
        "desc" : "True to hide the containing menu after this item is clicked (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "itemCls",
        "type" : "String",
        "desc" : "The default CSS class to use for separators (defaults to \"x-menu-sep\")",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this item is activated",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this item is clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this item is deactivated",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.menu.TextItem" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "activeClass",
        "type" : "String",
        "desc" : "The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "canActivate",
        "type" : "Boolean",
        "desc" : "True if this item can be visually activated (defaults to false)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "handler",
        "type" : "Function",
        "desc" : "A function that will handle the click event of this menu item (defaults to undefined)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hidden",
        "type" : "Boolean",
        "desc" : "True to prevent creation of this menu item (defaults to false)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hideDelay",
        "type" : "Number",
        "desc" : "Length of time in milliseconds to wait before hiding after a click (defaults to 100)",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hideOnClick",
        "type" : "Boolean",
        "desc" : "True to hide the containing menu after this item is clicked (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "itemCls",
        "type" : "String",
        "desc" : "The default CSS class to use for text items (defaults to \"x-menu-text\")",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "text",
        "type" : "String",
        "desc" : "Text to show on item.",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "activate",
        "type" : "function",
        "desc" : "Fires when this item is activated",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this item is clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "deactivate",
        "type" : "function",
        "desc" : "Fires when this item is deactivated",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.menu.BaseItem"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.state" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.state.CookieProvider" : {
    "props" : [
      {
        "name" : "domain",
        "type" : "String",
        "desc" : "The domain to save the cookie for.  Note that you cannot specify a different domain than\nyour page is on, but you can specify a sub-domain, or simply the domain itself like 'roojs.com' to include\nall sub-domains if you need to access cookies across different sub-domains (defaults to null which uses the same\ndomain the page is running on including the 'www' like 'www.roojs.com')",
        "memberOf" : ""
      },
      {
        "name" : "expires",
        "type" : "Date",
        "desc" : "The cookie expiration date (defaults to 7 days from now)",
        "memberOf" : ""
      },
      {
        "name" : "path",
        "type" : "String",
        "desc" : "The path for which the cookie is active (defaults to root '/' which makes it active for all pages in the site)",
        "memberOf" : ""
      },
      {
        "name" : "secure",
        "type" : "Boolean",
        "desc" : "True if the site is using SSL (defaults to false)",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "statechange",
        "type" : "function",
        "desc" : "Fires when a state change occurs.",
        "sig" : "function (_self, key, value)\n{\n\n}",
        "memberOf" : "Roo.state.Provider"
      }
    ],
    "methods" : [
      {
        "name" : "clear",
        "type" : "function",
        "desc" : "Clears a value from the state",
        "sig" : "(name)",
        "static" : false,
        "memberOf" : "Roo.state.Provider"
      },
      {
        "name" : "decodeValue",
        "type" : "function",
        "desc" : "Decodes a string previously encoded with {@link #encodeValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.state.Provider"
      },
      {
        "name" : "encodeValue",
        "type" : "function",
        "desc" : "Encodes a value including type information.  Decode with {@link #decodeValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.state.Provider"
      },
      {
        "name" : "get",
        "type" : "function",
        "desc" : "Returns the current value for a key",
        "sig" : "(name, defaultValue)",
        "static" : false,
        "memberOf" : "Roo.state.Provider"
      },
      {
        "name" : "set",
        "type" : "function",
        "desc" : "Sets the value for a key",
        "sig" : "(name, value)",
        "static" : false,
        "memberOf" : "Roo.state.Provider"
      }
    ]
  },
  "Roo.state.Manager" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "clear",
        "type" : "function",
        "desc" : "Clears a value from the state",
        "sig" : "(name)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "get",
        "type" : "function",
        "desc" : "Returns the current value for a key",
        "sig" : "(name, defaultValue)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getProvider",
        "type" : "function",
        "desc" : "Gets the currently configured state provider",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "set",
        "type" : "function",
        "desc" : "Sets the value for a key",
        "sig" : "(name, value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setProvider",
        "type" : "function",
        "desc" : "Configures the default state provider for your application",
        "sig" : "(stateProvider)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.state.Provider" : {
    "props" : [],
    "events" : [
      {
        "name" : "statechange",
        "type" : "function",
        "desc" : "Fires when a state change occurs.",
        "sig" : "function (_self, key, value)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "clear",
        "type" : "function",
        "desc" : "Clears a value from the state",
        "sig" : "(name)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "decodeValue",
        "type" : "function",
        "desc" : "Decodes a string previously encoded with {@link #encodeValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "encodeValue",
        "type" : "function",
        "desc" : "Encodes a value including type information.  Decode with {@link #decodeValue}.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "get",
        "type" : "function",
        "desc" : "Returns the current value for a key",
        "sig" : "(name, defaultValue)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "set",
        "type" : "function",
        "desc" : "Sets the value for a key",
        "sig" : "(name, value)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.tree" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.tree.AsyncTreeNode" : {
    "props" : [
      {
        "name" : "allowDrag",
        "type" : "Boolean",
        "desc" : "false to make this node undraggable if DD is on (defaults to true)",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "allowDrop",
        "type" : "Boolean",
        "desc" : "false if this node cannot be drop on",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "checked",
        "type" : "Boolean",
        "desc" : "True to render a checked checkbox for this node, false to render an unchecked checkbox\n(defaults to undefined with no checkbox rendered)",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A css class to be added to the node",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "true to start the node disabled",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "expanded",
        "type" : "Boolean",
        "desc" : "true to start the node expanded",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "href",
        "type" : "String",
        "desc" : "URL of the link used for the node (defaults to #)",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "hrefTarget",
        "type" : "String",
        "desc" : "target frame for the link",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : "The path to an icon for the node. The preferred way to do this",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "iconCls",
        "type" : "String",
        "desc" : "A css class to be added to the nodes icon element for applying css background images",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "id",
        "type" : "String",
        "desc" : "The id for this node. If one is not specified, one is generated.",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "leaf",
        "type" : "Boolean",
        "desc" : "true if this node is a leaf and does not have children",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loader",
        "type" : "TreeLoader",
        "desc" : "A TreeLoader to be used by this node (defaults to the loader defined on the tree)",
        "memberOf" : ""
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "An Ext QuickTip for the node",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "qtipCfg",
        "type" : "String",
        "desc" : "An Ext QuickTip config for the node (used instead of qtip)",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "singleClickExpand",
        "type" : "Boolean",
        "desc" : "True for single click expand on this node",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "text",
        "type" : "String",
        "desc" : "The text for this node",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "uiProvider",
        "type" : "Function",
        "desc" : "A UI <b>class</b> to use for this node (defaults to Roo.tree.TreeNodeUI)",
        "memberOf" : "Roo.tree.TreeNode"
      }
    ],
    "events" : [
      {
        "name" : "append",
        "type" : "function",
        "desc" : "Fires when a new child node is appended",
        "sig" : "function (tree, _self, node, index)\n{\n\n}",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "beforeappend",
        "type" : "function",
        "desc" : "Fires before a new child is appended, return false to cancel the append.",
        "sig" : "function (tree, _self, node)\n{\n\n}",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "beforechildrenrendered",
        "type" : "function",
        "desc" : "Fires right before the child nodes for this node are rendered",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "beforeclick",
        "type" : "function",
        "desc" : "Fires before click processing. Return false to cancel the default action.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "beforecollapse",
        "type" : "function",
        "desc" : "Fires before this node is collapsed, return false to cancel.",
        "sig" : "function (_self, deep, anim)\n{\n\n}",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "beforeexpand",
        "type" : "function",
        "desc" : "Fires before this node is expanded, return false to cancel.",
        "sig" : "function (_self, deep, anim)\n{\n\n}",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "beforeinsert",
        "type" : "function",
        "desc" : "Fires before a new child is inserted, return false to cancel the insert.",
        "sig" : "function (tree, _self, node, refNode)\n{\n\n}",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "beforeload",
        "type" : "function",
        "desc" : "Fires before this node is loaded, return false to cancel",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforemove",
        "type" : "function",
        "desc" : "Fires before this node is moved to a new location in the tree. Return false to cancel the move.",
        "sig" : "function (tree, _self, oldParent, newParent, index)\n{\n\n}",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "beforeremove",
        "type" : "function",
        "desc" : "Fires before a child is removed, return false to cancel the remove.",
        "sig" : "function (tree, _self, node)\n{\n\n}",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "checkchange",
        "type" : "function",
        "desc" : "Fires when a node with a checkbox's checked property changes",
        "sig" : "function (_self, checked)\n{\n\n}",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this node is clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Fires when this node is collapsed",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "contextmenu",
        "type" : "function",
        "desc" : "Fires when this node is right clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "dblclick",
        "type" : "function",
        "desc" : "Fires when this node is double clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "disabledchange",
        "type" : "function",
        "desc" : "Fires when the disabled status of this node changes",
        "sig" : "function (_self, disabled)\n{\n\n}",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Fires when this node is expanded",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "insert",
        "type" : "function",
        "desc" : "Fires when a new child node is inserted.",
        "sig" : "function (tree, _self, node, refNode)\n{\n\n}",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Fires when this node is loaded",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires when this node is moved to a new location in the tree",
        "sig" : "function (tree, _self, oldParent, newParent, index)\n{\n\n}",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Fires when a child node is removed",
        "sig" : "function (tree, _self, node)\n{\n\n}",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "textchange",
        "type" : "function",
        "desc" : "Fires when the text for this node is changed",
        "sig" : "function (_self, text, oldText)\n{\n\n}",
        "memberOf" : "Roo.tree.TreeNode"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "appendChild",
        "type" : "function",
        "desc" : "Insert node(s) as the last child node of this node.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "bubble",
        "type" : "function",
        "desc" : "Bubbles up the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe bubble is stopped.",
        "sig" : "(fn, scope, args)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "cascade",
        "type" : "function",
        "desc" : "Cascades down the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe cascade is stopped on that branch.",
        "sig" : "(fn, scope, args)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Collapse this node.",
        "sig" : "(deep, anim)",
        "static" : false,
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "collapseChildNodes",
        "type" : "function",
        "desc" : "Collapse all child nodes",
        "sig" : "(deep)",
        "static" : false,
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "contains",
        "type" : "function",
        "desc" : "Returns true if this node is an ancestor (at any point) of the passed node.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disables this node",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "eachChild",
        "type" : "function",
        "desc" : "Interates the child nodes of this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe iteration stops.",
        "sig" : "(fn, scope, args)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enables this node",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "ensureVisible",
        "type" : "function",
        "desc" : "Ensures all parent nodes are expanded",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expand this node.",
        "sig" : "(deep, anim, callback)",
        "static" : false,
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "expandChildNodes",
        "type" : "function",
        "desc" : "Expand all child nodes",
        "sig" : "(deep)",
        "static" : false,
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "findChild",
        "type" : "function",
        "desc" : "Finds the first child that has the attribute with the specified value.",
        "sig" : "(attribute, value)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "findChildBy",
        "type" : "function",
        "desc" : "Finds the first child by a custom function. The child matches if the function passed\nreturns true.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getDepth",
        "type" : "function",
        "desc" : "Returns depth of this node (the root node has a depth of 0)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "getOwnerTree",
        "type" : "function",
        "desc" : "Returns the tree this node is in.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "getPath",
        "type" : "function",
        "desc" : "Returns the path for this node. The path can be used to expand or select this node programmatically.",
        "sig" : "(attr)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "getUI",
        "type" : "function",
        "desc" : "Returns the UI object for this node",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "indexOf",
        "type" : "function",
        "desc" : "Returns the index of a child node",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "insertBefore",
        "type" : "function",
        "desc" : "Inserts the first node before the second node in this nodes childNodes collection.",
        "sig" : "(node, refNode)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "isAncestor",
        "type" : "function",
        "desc" : "Returns true if the passed node is an ancestor (at any point) of this node.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "isExpanded",
        "type" : "function",
        "desc" : "Returns true if this node is expanded",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "isFirst",
        "type" : "function",
        "desc" : "Returns true if this node is the first child of its parent",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "isLast",
        "type" : "function",
        "desc" : "Returns true if this node is the last child of its parent",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "isLeaf",
        "type" : "function",
        "desc" : "Returns true if this node is a leaf",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "isLoaded",
        "type" : "function",
        "desc" : "Returns true if this node has been loaded",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isLoading",
        "type" : "function",
        "desc" : "Returns true if this node is currently loading",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isSelected",
        "type" : "function",
        "desc" : "Returns true if this node is selected",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "item",
        "type" : "function",
        "desc" : "Returns the child node at the specified index.",
        "sig" : "(index)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "reload",
        "type" : "function",
        "desc" : "Trigger a reload for this node",
        "sig" : "(callback)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeChild",
        "type" : "function",
        "desc" : "Removes a child node from this node.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "replaceChild",
        "type" : "function",
        "desc" : "Replaces one child node in this node with another.",
        "sig" : "(newChild, oldChild)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Triggers selection of this node",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "setText",
        "type" : "function",
        "desc" : "Sets the text for this node",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "sort",
        "type" : "function",
        "desc" : "Sorts this nodes children using the supplied sort function",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "toggle",
        "type" : "function",
        "desc" : "Toggles expanded/collapsed state of the node",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.tree.TreeNode"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unselect",
        "type" : "function",
        "desc" : "Triggers deselection of this node",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.tree.TreeNode"
      }
    ]
  },
  "Roo.tree.ColumnTree" : {
    "props" : [
      {
        "name" : "borderWidth",
        "type" : "int",
        "desc" : "compined right/left border allowance",
        "memberOf" : ""
      },
      {
        "name" : "columns",
        "type" : "Object",
        "desc" : "Including width, header, renderer, cls, dataIndex",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "resize",
        "type" : "function",
        "desc" : "Fire this event on a container when it resizes",
        "sig" : "function (w, h)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : []
  },
  "Roo.tree.DefaultSelectionModel" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "beforeselect",
        "type" : "function",
        "desc" : "Fires before the selected node changes, return false to cancel the change",
        "sig" : "function (_self, node, node)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "selectionchange",
        "type" : "function",
        "desc" : "Fires when the selected node changes",
        "sig" : "function (_self, node)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearSelections",
        "type" : "function",
        "desc" : "Clear all selections",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getSelectedNode",
        "type" : "function",
        "desc" : "Get the selected node",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isSelected",
        "type" : "function",
        "desc" : "Returns true if the node is selected",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Select a node.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectNext",
        "type" : "function",
        "desc" : "Selects the node above the selected node in the tree, intelligently walking the nodes",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectPrevious",
        "type" : "function",
        "desc" : "Selects the node above the selected node in the tree, intelligently walking the nodes",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unselect",
        "type" : "function",
        "desc" : "Deselect a node.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.tree.MultiSelectionModel" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "selectionchange",
        "type" : "function",
        "desc" : "Fires when the selected nodes change",
        "sig" : "function (_self, nodes)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clearSelections",
        "type" : "function",
        "desc" : "Clear all selections",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getSelectedNodes",
        "type" : "function",
        "desc" : "Returns an array of the selected nodes",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "isSelected",
        "type" : "function",
        "desc" : "Returns true if the node is selected",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Select a node.",
        "sig" : "(node, e, keepExisting)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unselect",
        "type" : "function",
        "desc" : "Deselect a node.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.tree.TreeEditor" : {
    "props" : [
      {
        "name" : "actionMode",
        "type" : "String",
        "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el' for forms you probably want to set this to fieldEl",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "alignment",
        "type" : "String",
        "desc" : "The position to align to (see {@link Roo.Element#alignTo} for more details, defaults to \"l-l\").",
        "memberOf" : ""
      },
      {
        "name" : "allowDomMove",
        "type" : "Boolean",
        "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "autosize",
        "type" : "Boolean/String",
        "desc" : "True for the editor to automatically adopt the size of the underlying field, \"width\" to adopt the width only,\nor \"height\" to adopt the height only (defaults to false)",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "cancelOnEsc",
        "type" : "Boolean",
        "desc" : "True to cancel the edit when the escape key is pressed (defaults to false)",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "CSS class to apply to the editor (defaults to \"x-small-editor x-tree-editor\")",
        "memberOf" : ""
      },
      {
        "name" : "completeOnEnter",
        "type" : "Boolean",
        "desc" : "True to complete the edit when the enter key is pressed (defaults to false)",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "constrain",
        "type" : "Boolean",
        "desc" : "True to constrain the editor to the viewport",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "disableClass",
        "type" : "String",
        "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "field",
        "type" : "Roo.form.TextField|Object",
        "desc" : "The field configuration",
        "memberOf" : ""
      },
      {
        "name" : "hideEl",
        "type" : "Boolean",
        "desc" : "True to hide the bound element while the editor is displayed (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "hideMode",
        "type" : "String",
        "desc" : [
          "(display",
          "visibility)"
        ],
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "ignoreNoChange",
        "type" : "Boolean",
        "desc" : "True to skip the the edit completion process (no save, no events fired) if the user completes an edit and\nthe value has not changed (defaults to false).  Applies only to string values - edits for other data types\nwill never be ignored.",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "maxWidth",
        "type" : "Number",
        "desc" : "The maximum width in pixels of the editor field (defaults to 250).  Note that if the maxWidth would exceed\nthe containing tree element's size, it will be automatically limited for you to the container width, taking\nscroll and client offsets into account prior to each edit.",
        "memberOf" : ""
      },
      {
        "name" : "revertInvalid",
        "type" : "Boolean",
        "desc" : "True to automatically revert the field value and cancel the edit when the user completes an edit and the field\nvalidation fails (defaults to true)",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "shadow",
        "type" : "Boolean/String",
        "desc" : "\"sides\" for sides/bottom only, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"frame\")",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "shim",
        "type" : "Boolean",
        "desc" : "True to shim the editor if selects/iframes could be displayed beneath it (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "tree",
        "type" : "Roo.tree.TreePanel",
        "desc" : "The tree to bind to.",
        "memberOf" : ""
      },
      {
        "name" : "updateEl",
        "type" : "Boolean",
        "desc" : "True to update the innerHTML of the bound element when the update completes (defaults to false)",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "value",
        "type" : "Mixed",
        "desc" : "The data value of the underlying field (defaults to \"\")",
        "memberOf" : "Roo.Editor"
      }
    ],
    "events" : [
      {
        "name" : "beforecomplete",
        "type" : "function",
        "desc" : "Fires after a change has been made to the field, but before the change is reflected in the underlying\nfield.  Saving the change to the field can be canceled by returning false from the handler of this event.\nNote that if the value has not changed and ignoreNoChange = true, the editing will still end but this\nevent will not fire since no edit actually occurred.",
        "sig" : "function (_self, value, startValue)\n{\n\n}",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "beforedestroy",
        "type" : "function",
        "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforehide",
        "type" : "function",
        "desc" : "Fires before the component is hidden. Return false to stop the hide.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforenodeedit",
        "type" : "function",
        "desc" : "Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning\nfalse from the handler of this event.",
        "sig" : "function (_self, node)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforerender",
        "type" : "function",
        "desc" : "Fires before the component is rendered. Return false to stop the render.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforeshow",
        "type" : "function",
        "desc" : "Fires before the component is shown.  Return false to stop the show.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "beforestartedit",
        "type" : "function",
        "desc" : "Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning\nfalse from the handler of this event.",
        "sig" : "function (_self, boundEl, value)\n{\n\n}",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "complete",
        "type" : "function",
        "desc" : "Fires after editing is complete and any changed value has been written to the underlying field.",
        "sig" : "function (_self, value, startValue)\n{\n\n}",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Fires after the component is destroyed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Fires after the component is disabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Fires after the component is enabled.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Fires after the component is hidden.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Fires after the component is rendered.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Fires after the component is shown.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "specialkey",
        "type" : "function",
        "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "startedit",
        "type" : "function",
        "desc" : "Fires when this editor is displayed",
        "sig" : "function (boundEl, value)\n{\n\n}",
        "memberOf" : "Roo.Editor"
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "cancelEdit",
        "type" : "function",
        "desc" : "Cancels the editing process and hides the editor without persisting any changes.  The field value will be\nreverted to the original starting value.",
        "sig" : "(remainVisible)",
        "static" : false,
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "completeEdit",
        "type" : "function",
        "desc" : "Ends the editing process, persists the changed value to the underlying field, and hides the editor.",
        "sig" : "(remainVisible)",
        "static" : false,
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "destroy",
        "type" : "function",
        "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enable this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "focus",
        "type" : "function",
        "desc" : "Try to focus this component.",
        "sig" : "(selectText)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the underlying {@link Roo.Element}.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getId",
        "type" : "function",
        "desc" : "Returns the id of this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "getValue",
        "type" : "function",
        "desc" : "Gets the data value of the editor",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hide",
        "type" : "function",
        "desc" : "Hide this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "isVisible",
        "type" : "function",
        "desc" : "Returns true if this component is visible.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "realign",
        "type" : "function",
        "desc" : "Realigns the editor to the bound field based on the current alignment config value.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "If this is a lazy rendering component, render it to its container element.",
        "sig" : "(container)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setDisabled",
        "type" : "function",
        "desc" : "Convenience function for setting disabled/enabled by boolean.",
        "sig" : "(disabled)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "setSize",
        "type" : "function",
        "desc" : "Sets the height and width of this editor.",
        "sig" : "(width, height)",
        "static" : false,
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "setValue",
        "type" : "function",
        "desc" : "Sets the data value of the editor",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "setVisible",
        "type" : "function",
        "desc" : "Convenience function to hide or show this component by boolean.",
        "sig" : "(visible)",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "show",
        "type" : "function",
        "desc" : "Show this component.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.Component"
      },
      {
        "name" : "startEdit",
        "type" : "function",
        "desc" : "Starts the editing process and shows the editor.",
        "sig" : "(el, value)",
        "static" : false,
        "memberOf" : "Roo.Editor"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.tree.TreeFilter" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "clear",
        "type" : "function",
        "desc" : "Clears the current filter. Note: with the \"remove\" option\nset a filter cannot be cleared.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "filter",
        "type" : "function",
        "desc" : "Filter the data by a specific attribute.",
        "sig" : "(value, attr, startNode)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "filterBy",
        "type" : "function",
        "desc" : "Filter by a function. The passed function will be called with each\nnode in the tree (or from the startNode). If the function returns true, the node is kept\notherwise it is filtered. If a node is filtered, its children are also filtered.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.tree.TreeLoader" : {
    "props" : [
      {
        "name" : "baseAttrs",
        "type" : "Object",
        "desc" : "(optional) An object containing attributes to be added to all nodes\ncreated by this loader. If the attributes sent by the server have an attribute in this object,\nthey take priority.",
        "memberOf" : ""
      },
      {
        "name" : "baseParams",
        "type" : "Object",
        "desc" : "(optional) An object containing properties which\nspecify HTTP parameters to be passed to each request for child nodes.",
        "memberOf" : ""
      },
      {
        "name" : "clearOnLoad",
        "type" : "Boolean",
        "desc" : "(optional) Default to true. Remove previously existing\nchild nodes before loading.",
        "memberOf" : ""
      },
      {
        "name" : "dataUrl",
        "type" : "String",
        "desc" : "The URL from which to request a Json string which\nspecifies an array of node definition object representing the child nodes\nto be loaded.",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "queryParam",
        "type" : "String",
        "desc" : "(optional) \nName of the query as it will be passed on the querystring (defaults to 'node')\neg. the request will be ?node=[id]",
        "memberOf" : ""
      },
      {
        "name" : "requestMethod",
        "type" : "String",
        "desc" : "either GET or POST\ndefaults to POST (due to BC)\nto be loaded.",
        "memberOf" : ""
      },
      {
        "name" : "root",
        "type" : "String",
        "desc" : "(optional) Default to false. Use this to read data from an object \nproperty on loading, rather than expecting an array. (eg. more compatible to a standard\nGrid query { data : [ .....] }",
        "memberOf" : ""
      },
      {
        "name" : "uiProviders",
        "type" : "Object",
        "desc" : "(optional) An object containing properties which\n\nDEPRECATED - use 'create' event handler to modify attributes - which affect creation.\nspecify custom {@link Roo.tree.TreeNodeUI} implementations. If the optional\n<i>uiProvider</i> attribute of a returned child node is a string rather\nthan a reference to a TreeNodeUI implementation, this that string value\nis used as a property name in the uiProviders object. You can define the provider named\n'default' , and this will be used for all nodes (if no uiProvider is delivered by the node data)",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "beforeload",
        "type" : "function",
        "desc" : "Fires before a network request is made to retrieve the Json text which specifies a node's children.",
        "sig" : "function (This, node, callback)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "create",
        "type" : "function",
        "desc" : "Fires before a node is created, enabling you to return custom Node types",
        "sig" : "function (This, attr)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Fires when the node has been successfuly loaded.",
        "sig" : "function (This, node, response)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "loadexception",
        "type" : "function",
        "desc" : "Fires if the network request failed.",
        "sig" : "function (This, node, response)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Load an {@link Roo.tree.TreeNode} from the URL specified in the constructor.\nThis is called automatically when a node is expanded, but may be used to reload\na node (or append new children if the {@link #clearOnLoad} option is false.)",
        "sig" : "(node, callback)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.tree.TreeNode" : {
    "props" : [
      {
        "name" : "allowDrag",
        "type" : "Boolean",
        "desc" : "false to make this node undraggable if DD is on (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "allowDrop",
        "type" : "Boolean",
        "desc" : "false if this node cannot be drop on",
        "memberOf" : ""
      },
      {
        "name" : "checked",
        "type" : "Boolean",
        "desc" : "True to render a checked checkbox for this node, false to render an unchecked checkbox\n(defaults to undefined with no checkbox rendered)",
        "memberOf" : ""
      },
      {
        "name" : "cls",
        "type" : "String",
        "desc" : "A css class to be added to the node",
        "memberOf" : ""
      },
      {
        "name" : "disabled",
        "type" : "Boolean",
        "desc" : "true to start the node disabled",
        "memberOf" : ""
      },
      {
        "name" : "expanded",
        "type" : "Boolean",
        "desc" : "true to start the node expanded",
        "memberOf" : ""
      },
      {
        "name" : "href",
        "type" : "String",
        "desc" : "URL of the link used for the node (defaults to #)",
        "memberOf" : ""
      },
      {
        "name" : "hrefTarget",
        "type" : "String",
        "desc" : "target frame for the link",
        "memberOf" : ""
      },
      {
        "name" : "icon",
        "type" : "String",
        "desc" : "The path to an icon for the node. The preferred way to do this",
        "memberOf" : ""
      },
      {
        "name" : "iconCls",
        "type" : "String",
        "desc" : "A css class to be added to the nodes icon element for applying css background images",
        "memberOf" : ""
      },
      {
        "name" : "id",
        "type" : "String",
        "desc" : "The id for this node. If one is not specified, one is generated.",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "leaf",
        "type" : "Boolean",
        "desc" : "true if this node is a leaf and does not have children",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "qtip",
        "type" : "String",
        "desc" : "An Ext QuickTip for the node",
        "memberOf" : ""
      },
      {
        "name" : "qtipCfg",
        "type" : "String",
        "desc" : "An Ext QuickTip config for the node (used instead of qtip)",
        "memberOf" : ""
      },
      {
        "name" : "singleClickExpand",
        "type" : "Boolean",
        "desc" : "True for single click expand on this node",
        "memberOf" : ""
      },
      {
        "name" : "text",
        "type" : "String",
        "desc" : "The text for this node",
        "memberOf" : ""
      },
      {
        "name" : "uiProvider",
        "type" : "Function",
        "desc" : "A UI <b>class</b> to use for this node (defaults to Roo.tree.TreeNodeUI)",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "append",
        "type" : "function",
        "desc" : "Fires when a new child node is appended",
        "sig" : "function (tree, _self, node, index)\n{\n\n}",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "beforeappend",
        "type" : "function",
        "desc" : "Fires before a new child is appended, return false to cancel the append.",
        "sig" : "function (tree, _self, node)\n{\n\n}",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "beforechildrenrendered",
        "type" : "function",
        "desc" : "Fires right before the child nodes for this node are rendered",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeclick",
        "type" : "function",
        "desc" : "Fires before click processing. Return false to cancel the default action.",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforecollapse",
        "type" : "function",
        "desc" : "Fires before this node is collapsed, return false to cancel.",
        "sig" : "function (_self, deep, anim)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeexpand",
        "type" : "function",
        "desc" : "Fires before this node is expanded, return false to cancel.",
        "sig" : "function (_self, deep, anim)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeinsert",
        "type" : "function",
        "desc" : "Fires before a new child is inserted, return false to cancel the insert.",
        "sig" : "function (tree, _self, node, refNode)\n{\n\n}",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "beforemove",
        "type" : "function",
        "desc" : "Fires before this node is moved to a new location in the tree. Return false to cancel the move.",
        "sig" : "function (tree, _self, oldParent, newParent, index)\n{\n\n}",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "beforeremove",
        "type" : "function",
        "desc" : "Fires before a child is removed, return false to cancel the remove.",
        "sig" : "function (tree, _self, node)\n{\n\n}",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "checkchange",
        "type" : "function",
        "desc" : "Fires when a node with a checkbox's checked property changes",
        "sig" : "function (_self, checked)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when this node is clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Fires when this node is collapsed",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "contextmenu",
        "type" : "function",
        "desc" : "Fires when this node is right clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "dblclick",
        "type" : "function",
        "desc" : "Fires when this node is double clicked",
        "sig" : "function (_self, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "disabledchange",
        "type" : "function",
        "desc" : "Fires when the disabled status of this node changes",
        "sig" : "function (_self, disabled)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Fires when this node is expanded",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "insert",
        "type" : "function",
        "desc" : "Fires when a new child node is inserted.",
        "sig" : "function (tree, _self, node, refNode)\n{\n\n}",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires when this node is moved to a new location in the tree",
        "sig" : "function (tree, _self, oldParent, newParent, index)\n{\n\n}",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Fires when a child node is removed",
        "sig" : "function (tree, _self, node)\n{\n\n}",
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "textchange",
        "type" : "function",
        "desc" : "Fires when the text for this node is changed",
        "sig" : "function (_self, text, oldText)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "appendChild",
        "type" : "function",
        "desc" : "Insert node(s) as the last child node of this node.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "bubble",
        "type" : "function",
        "desc" : "Bubbles up the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe bubble is stopped.",
        "sig" : "(fn, scope, args)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "cascade",
        "type" : "function",
        "desc" : "Cascades down the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe cascade is stopped on that branch.",
        "sig" : "(fn, scope, args)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Collapse this node.",
        "sig" : "(deep, anim)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "collapseChildNodes",
        "type" : "function",
        "desc" : "Collapse all child nodes",
        "sig" : "(deep)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "contains",
        "type" : "function",
        "desc" : "Returns true if this node is an ancestor (at any point) of the passed node.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "disable",
        "type" : "function",
        "desc" : "Disables this node",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "eachChild",
        "type" : "function",
        "desc" : "Interates the child nodes of this node, calling the specified function with each node. The scope (<i>this</i>) of\nfunction call will be the scope provided or the current node. The arguments to the function\nwill be the args provided or the current node. If the function returns false at any point,\nthe iteration stops.",
        "sig" : "(fn, scope, args)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "enable",
        "type" : "function",
        "desc" : "Enables this node",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "ensureVisible",
        "type" : "function",
        "desc" : "Ensures all parent nodes are expanded",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Expand this node.",
        "sig" : "(deep, anim, callback)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "expandChildNodes",
        "type" : "function",
        "desc" : "Expand all child nodes",
        "sig" : "(deep)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "findChild",
        "type" : "function",
        "desc" : "Finds the first child that has the attribute with the specified value.",
        "sig" : "(attribute, value)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "findChildBy",
        "type" : "function",
        "desc" : "Finds the first child by a custom function. The child matches if the function passed\nreturns true.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getDepth",
        "type" : "function",
        "desc" : "Returns depth of this node (the root node has a depth of 0)",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "getOwnerTree",
        "type" : "function",
        "desc" : "Returns the tree this node is in.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "getPath",
        "type" : "function",
        "desc" : "Returns the path for this node. The path can be used to expand or select this node programmatically.",
        "sig" : "(attr)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "getUI",
        "type" : "function",
        "desc" : "Returns the UI object for this node",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "indexOf",
        "type" : "function",
        "desc" : "Returns the index of a child node",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "insertBefore",
        "type" : "function",
        "desc" : "Inserts the first node before the second node in this nodes childNodes collection.",
        "sig" : "(node, refNode)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "isAncestor",
        "type" : "function",
        "desc" : "Returns true if the passed node is an ancestor (at any point) of this node.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "isExpanded",
        "type" : "function",
        "desc" : "Returns true if this node is expanded",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "isFirst",
        "type" : "function",
        "desc" : "Returns true if this node is the first child of its parent",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "isLast",
        "type" : "function",
        "desc" : "Returns true if this node is the last child of its parent",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "isLeaf",
        "type" : "function",
        "desc" : "Returns true if this node is a leaf",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "isSelected",
        "type" : "function",
        "desc" : "Returns true if this node is selected",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "item",
        "type" : "function",
        "desc" : "Returns the child node at the specified index.",
        "sig" : "(index)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeChild",
        "type" : "function",
        "desc" : "Removes a child node from this node.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "replaceChild",
        "type" : "function",
        "desc" : "Replaces one child node in this node with another.",
        "sig" : "(newChild, oldChild)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "select",
        "type" : "function",
        "desc" : "Triggers selection of this node",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setText",
        "type" : "function",
        "desc" : "Sets the text for this node",
        "sig" : "(text)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "sort",
        "type" : "function",
        "desc" : "Sorts this nodes children using the supplied sort function",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : "Roo.data.Node"
      },
      {
        "name" : "toggle",
        "type" : "function",
        "desc" : "Toggles expanded/collapsed state of the node",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "unselect",
        "type" : "function",
        "desc" : "Triggers deselection of this node",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.tree.TreeNodeUI" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.tree.TreePanel" : {
    "props" : [
      {
        "name" : "animate",
        "type" : "Boolean",
        "desc" : "true to enable animated expand/collapse (defaults to the value of Roo.enableFx)",
        "memberOf" : ""
      },
      {
        "name" : "containerScroll",
        "type" : "Boolean",
        "desc" : "true to register this container with ScrollManager",
        "memberOf" : ""
      },
      {
        "name" : "ddAppendOnly",
        "type" : "String",
        "desc" : "True if the tree should only allow append drops (use for trees which are sorted)",
        "memberOf" : ""
      },
      {
        "name" : "ddGroup",
        "type" : "String",
        "desc" : "The DD group this TreePanel belongs to",
        "memberOf" : ""
      },
      {
        "name" : "ddScroll",
        "type" : "Boolean",
        "desc" : "true to enable YUI body scrolling",
        "memberOf" : ""
      },
      {
        "name" : "dragConfig",
        "type" : "Object",
        "desc" : "Custom config to pass to the {@link Roo.tree.TreeDragZone} instance",
        "memberOf" : ""
      },
      {
        "name" : "dropConfig",
        "type" : "Object",
        "desc" : "Custom config to pass to the {@link Roo.tree.TreeDropZone} instance",
        "memberOf" : ""
      },
      {
        "name" : "editor",
        "type" : "Object|Roo.tree.TreeEditor",
        "desc" : "The TreeEditor or xtype data to display when clicked.",
        "memberOf" : ""
      },
      {
        "name" : "enableDD",
        "type" : "Boolean",
        "desc" : "true to enable drag and drop",
        "memberOf" : ""
      },
      {
        "name" : "enableDrag",
        "type" : "Boolean",
        "desc" : "true to enable just drag",
        "memberOf" : ""
      },
      {
        "name" : "enableDrop",
        "type" : "Boolean",
        "desc" : "true to enable just drop",
        "memberOf" : ""
      },
      {
        "name" : "hlColor",
        "type" : "String",
        "desc" : "The color of the node highlight (defaults to C3DAF9)",
        "memberOf" : ""
      },
      {
        "name" : "hlDrop",
        "type" : "Boolean",
        "desc" : "false to disable node highlight on drop (defaults to the value of Roo.enableFx)",
        "memberOf" : ""
      },
      {
        "name" : "lines",
        "type" : "Boolean",
        "desc" : "false to disable tree lines (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "loader",
        "type" : "Boolean",
        "desc" : "A TreeLoader for use with this TreePanel",
        "memberOf" : ""
      },
      {
        "name" : "pathSeparator",
        "type" : "String",
        "desc" : "The token used to separate sub-paths in path strings (defaults to '/')",
        "memberOf" : ""
      },
      {
        "name" : "renderer",
        "type" : "Function",
        "desc" : "DEPRECATED - use TreeLoader:create event / Sets the rendering (formatting) function for the nodes. to return HTML markup for the tree view. The render function is called with  the following parameters:<ul><li>The {Object} The data for the node.</li></ul>",
        "memberOf" : ""
      },
      {
        "name" : "rendererTip",
        "type" : "Function",
        "desc" : "DEPRECATED - use TreeLoader:create event / Sets the rendering (formatting) function for the nodes hovertip to return HTML markup for the tree view. The render function is called with  the following parameters:<ul><li>The {Object} The data for the node.</li></ul>",
        "memberOf" : ""
      },
      {
        "name" : "rootVisible",
        "type" : "Boolean",
        "desc" : "false to hide the root node (defaults to true)",
        "memberOf" : ""
      },
      {
        "name" : "selModel",
        "type" : "Boolean",
        "desc" : "A tree selection model to use with this TreePanel (defaults to a {@link Roo.tree.DefaultSelectionModel})",
        "memberOf" : ""
      },
      {
        "name" : "singleExpand",
        "type" : "Boolean",
        "desc" : "true if only 1 node per branch may be expanded",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "append",
        "type" : "function",
        "desc" : "Fires when a new child node is appended to a node in this tree.",
        "sig" : "function (tree, parent, node, index)\n{\n\n}",
        "memberOf" : "Roo.data.Tree"
      },
      {
        "name" : "appendnode",
        "type" : "function",
        "desc" : "Fires when append node to the tree",
        "sig" : "function (_self, node, index)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeappend",
        "type" : "function",
        "desc" : "Fires before a new child is appended to a node in this tree, return false to cancel the append.",
        "sig" : "function (tree, parent, node)\n{\n\n}",
        "memberOf" : "Roo.data.Tree"
      },
      {
        "name" : "beforechildrenrendered",
        "type" : "function",
        "desc" : "Fires right before the child nodes for a node are rendered",
        "sig" : "function (node)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeclick",
        "type" : "function",
        "desc" : "Fires before click processing on a node. Return false to cancel the default action.",
        "sig" : "function (node, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforecollapse",
        "type" : "function",
        "desc" : "Fires before a node is collapsed, return false to cancel.",
        "sig" : "function (node, deep, anim)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeexpand",
        "type" : "function",
        "desc" : "Fires before a node is expanded, return false to cancel.",
        "sig" : "function (node, deep, anim)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeinsert",
        "type" : "function",
        "desc" : "Fires before a new child is inserted in a node in this tree, return false to cancel the insert.",
        "sig" : "function (tree, parent, node, refNode)\n{\n\n}",
        "memberOf" : "Roo.data.Tree"
      },
      {
        "name" : "beforeload",
        "type" : "function",
        "desc" : "Fires before a node is loaded, return false to cancel",
        "sig" : "function (node)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforemove",
        "type" : "function",
        "desc" : "Fires before a node is moved to a new location in the tree. Return false to cancel the move.",
        "sig" : "function (tree, node, oldParent, newParent, index)\n{\n\n}",
        "memberOf" : "Roo.data.Tree"
      },
      {
        "name" : "beforenodedrop",
        "type" : "function",
        "desc" : "Fires when a DD object is dropped on a node in this tree for preprocessing. Return false to cancel the drop. The dropEvent\npassed to handlers has the following properties:<br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>tree - The TreePanel</li>\n<li>target - The node being targeted for the drop</li>\n<li>data - The drag data from the drag source</li>\n<li>point - The point of the drop - append, above or below</li>\n<li>source - The drag source</li>\n<li>rawEvent - Raw mouse event</li>\n<li>dropNode - Drop node(s) provided by the source <b>OR</b> you can supply node(s)\nto be inserted by setting them on this object.</li>\n<li>cancel - Set this to true to cancel the drop.</li>\n</ul>",
        "sig" : "function (dropEvent)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "beforeremove",
        "type" : "function",
        "desc" : "Fires before a child is removed from a node in this tree, return false to cancel the remove.",
        "sig" : "function (tree, parent, node)\n{\n\n}",
        "memberOf" : "Roo.data.Tree"
      },
      {
        "name" : "checkchange",
        "type" : "function",
        "desc" : "Fires when a node with a checkbox's checked property changes",
        "sig" : "function (_self, checked)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires when a node is clicked",
        "sig" : "function (node, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "collapse",
        "type" : "function",
        "desc" : "Fires when a node is collapsed",
        "sig" : "function (node)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "contextmenu",
        "type" : "function",
        "desc" : "Fires when a node is right clicked",
        "sig" : "function (node, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "dblclick",
        "type" : "function",
        "desc" : "Fires when a node is double clicked",
        "sig" : "function (node, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "disabledchange",
        "type" : "function",
        "desc" : "Fires when the disabled status of a node changes",
        "sig" : "function (node, disabled)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "dragdrop",
        "type" : "function",
        "desc" : "Fires when a dragged node is dropped on a valid DD target",
        "sig" : "function (_self, node, dd, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "enddrag",
        "type" : "function",
        "desc" : "Fires when a drag operation is complete",
        "sig" : "function (_self, node, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "expand",
        "type" : "function",
        "desc" : "Fires when a node is expanded",
        "sig" : "function (node)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "insert",
        "type" : "function",
        "desc" : "Fires when a new child node is inserted in a node in this tree.",
        "sig" : "function (tree, parent, node, refNode)\n{\n\n}",
        "memberOf" : "Roo.data.Tree"
      },
      {
        "name" : "load",
        "type" : "function",
        "desc" : "Fires when a node is loaded",
        "sig" : "function (node)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "move",
        "type" : "function",
        "desc" : "Fires when a node is moved to a new location in the tree",
        "sig" : "function (tree, node, oldParent, newParent, index)\n{\n\n}",
        "memberOf" : "Roo.data.Tree"
      },
      {
        "name" : "nodedragover",
        "type" : "function",
        "desc" : "Fires when a tree node is being targeted for a drag drop, return false to signal drop not allowed. The dragOverEvent\npassed to handlers has the following properties:<br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>tree - The TreePanel</li>\n<li>target - The node being targeted for the drop</li>\n<li>data - The drag data from the drag source</li>\n<li>point - The point of the drop - append, above or below</li>\n<li>source - The drag source</li>\n<li>rawEvent - Raw mouse event</li>\n<li>dropNode - Drop node(s) provided by the source.</li>\n<li>cancel - Set this to true to signal drop not allowed.</li>\n</ul>",
        "sig" : "function (dragOverEvent)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "nodedrop",
        "type" : "function",
        "desc" : "Fires after a DD object is dropped on a node in this tree. The dropEvent\npassed to handlers has the following properties:<br />\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>tree - The TreePanel</li>\n<li>target - The node being targeted for the drop</li>\n<li>data - The drag data from the drag source</li>\n<li>point - The point of the drop - append, above or below</li>\n<li>source - The drag source</li>\n<li>rawEvent - Raw mouse event</li>\n<li>dropNode - Dropped node(s).</li>\n</ul>",
        "sig" : "function (dropEvent)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Fires when a child node is removed from a node in this tree.",
        "sig" : "function (tree, parent, node)\n{\n\n}",
        "memberOf" : "Roo.data.Tree"
      },
      {
        "name" : "startdrag",
        "type" : "function",
        "desc" : "Fires when a node starts being dragged",
        "sig" : "function (_self, node, e)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "textchange",
        "type" : "function",
        "desc" : "Fires when the text for a node is changed",
        "sig" : "function (node, text, oldText)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "collapseAll",
        "type" : "function",
        "desc" : "Collapse all nodes",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "expandAll",
        "type" : "function",
        "desc" : "Expand all nodes",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "expandPath",
        "type" : "function",
        "desc" : "Expands a specified path in this TreePanel. A path can be retrieved from a node with {@link Roo.data.Node#getPath}",
        "sig" : "(path, attr, callback)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "getChecked",
        "type" : "function",
        "desc" : "Retrieve an array of checked nodes, or an array of a specific attribute of checked nodes (e.g. \"id\")",
        "sig" : "(attribute, startNode)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getEl",
        "type" : "function",
        "desc" : "Returns the container element for this TreePanel",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getLoader",
        "type" : "function",
        "desc" : "Returns the default TreeLoader for this TreePanel",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getNodeById",
        "type" : "function",
        "desc" : "Gets a node in this tree by its id.",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : "Roo.data.Tree"
      },
      {
        "name" : "getRootNode",
        "type" : "function",
        "desc" : "Returns the root node for this tree.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.data.Tree"
      },
      {
        "name" : "getSelectionModel",
        "type" : "function",
        "desc" : "Returns the selection model used by this TreePanel",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "render",
        "type" : "function",
        "desc" : "Trigger rendering of this TreePanel",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "selectPath",
        "type" : "function",
        "desc" : "Selects the node in this tree at the specified path. A path can be retrieved from a node with {@link Roo.data.Node#getPath}",
        "sig" : "(path, attr, callback)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "setRootNode",
        "type" : "function",
        "desc" : "Sets the root node for this tree.",
        "sig" : "(node)",
        "static" : false,
        "memberOf" : "Roo.data.Tree"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.tree.TreeSorter" : {
    "props" : [
      {
        "name" : "caseSensitive",
        "type" : "Boolean",
        "desc" : "true for case sensitive sort (defaults to false)",
        "memberOf" : ""
      },
      {
        "name" : "dir",
        "type" : "String",
        "desc" : "The direction to sort (asc or desc) (defaults to asc)",
        "memberOf" : ""
      },
      {
        "name" : "folderSort",
        "type" : "Boolean",
        "desc" : "True to sort leaf nodes under non leaf nodes",
        "memberOf" : ""
      },
      {
        "name" : "leafAttr",
        "type" : "String",
        "desc" : "The attribute used to determine leaf nodes in folder sort (defaults to \"leaf\")",
        "memberOf" : ""
      },
      {
        "name" : "property",
        "type" : "String",
        "desc" : "The named attribute on the node to sort by (defaults to text)",
        "memberOf" : ""
      },
      {
        "name" : "sortType",
        "type" : "Function",
        "desc" : "A custom \"casting\" function used to convert node values before sorting",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : []
  },
  "Roo.util" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.util.CSS" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "createStyleSheet",
        "type" : "function",
        "desc" : "Very simple dynamic creation of stylesheets from a text blob of rules.  The text will wrapped in a style\ntag and appended to the HEAD of the document.",
        "sig" : "(cssText, id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getRule",
        "type" : "function",
        "desc" : "Gets an an individual CSS rule by selector(s)",
        "sig" : "(selector, refreshCache)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getRules",
        "type" : "function",
        "desc" : "Gets all css rules for the document",
        "sig" : "(refreshCache)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "refreshCache",
        "type" : "function",
        "desc" : "Refresh the rule cache if you have dynamically added stylesheets",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeStyleSheet",
        "type" : "function",
        "desc" : "Removes a style or link tag by id",
        "sig" : "(id)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "swapStyleSheet",
        "type" : "function",
        "desc" : "Dynamically swaps an existing stylesheet reference for a new one",
        "sig" : "(id, url)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "updateRule",
        "type" : "function",
        "desc" : "Updates a rule property",
        "sig" : "(selector, property, value)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.util.ClickRepeater" : {
    "props" : [
      {
        "name" : "accelerate",
        "type" : "Boolean",
        "desc" : "True if autorepeating should start slowly and accelerate.\n          \"interval\" and \"delay\" are ignored. \"immediate\" is honored.",
        "memberOf" : ""
      },
      {
        "name" : "delay",
        "type" : "Number",
        "desc" : "The initial delay before the repeating event begins firing.\nSimilar to an autorepeat key delay.",
        "memberOf" : ""
      },
      {
        "name" : "el",
        "type" : "String/HTMLElement/Element",
        "desc" : "The element to act as a button.",
        "memberOf" : ""
      },
      {
        "name" : "interval",
        "type" : "Number",
        "desc" : "The interval between firings of the \"click\" event. Default 10 ms.",
        "memberOf" : ""
      },
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "pressClass",
        "type" : "String",
        "desc" : "A CSS class name to be applied to the element while pressed.",
        "memberOf" : ""
      },
      {
        "name" : "preventDefault",
        "type" : "Boolean",
        "desc" : "True to prevent the default click event",
        "memberOf" : ""
      },
      {
        "name" : "stopDefault",
        "type" : "Boolean",
        "desc" : "True to stop the default click event",
        "memberOf" : ""
      }
    ],
    "events" : [
      {
        "name" : "click",
        "type" : "function",
        "desc" : "Fires on a specified interval during the time the element is pressed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mousedown",
        "type" : "function",
        "desc" : "Fires when the mouse button is depressed.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "mouseup",
        "type" : "function",
        "desc" : "Fires when the mouse key is released.",
        "sig" : "function (_self)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.util.Clipboard" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.util.DelayedTask" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.util.Format" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "capitalize",
        "type" : "function",
        "desc" : "Converts the first character only of a string to upper case",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "date",
        "type" : "function",
        "desc" : "Parse a value into a formatted date using the specified format pattern.",
        "sig" : "(value, format)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "dateRenderer",
        "type" : "function",
        "desc" : "Returns a date rendering function that can be reused to apply a date format multiple times efficiently",
        "sig" : "(format)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "ellipsis",
        "type" : "function",
        "desc" : "Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length",
        "sig" : "(value, length)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "htmlDecode",
        "type" : "function",
        "desc" : "Convert certain characters (&, <, >, and ') from their HTML character equivalents.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "htmlEncode",
        "type" : "function",
        "desc" : "Convert certain characters (&, <, >, and ') to their HTML character equivalents for literal display in web pages.",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "lowercase",
        "type" : "function",
        "desc" : "Converts a string to all lower case letters",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "number",
        "type" : "function",
        "desc" : "Format a number\neventually this should probably emulate php's number_format",
        "sig" : "(value, decimals, delimiter)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "size",
        "type" : "function",
        "desc" : "Size in Mb,Gb etc.",
        "sig" : "(value, decimals)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "stripTags",
        "type" : "function",
        "desc" : "Strips all HTML tags",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "substr",
        "type" : "function",
        "desc" : "Returns a substring from within an original string",
        "sig" : "(value, start, length)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "toFixed",
        "type" : "function",
        "desc" : "safer version of Math.toFixed..??/",
        "sig" : "(value, value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "trim",
        "type" : "function",
        "desc" : "Trims any whitespace from either side of a string",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "undef",
        "type" : "function",
        "desc" : "Checks a reference and converts it to empty string if it is undefined",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "uppercase",
        "type" : "function",
        "desc" : "Converts a string to all upper case letters",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "usMoney",
        "type" : "function",
        "desc" : "Format a number as US currency",
        "sig" : "(value)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.util.JSON" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "Roo.util.MixedCollection" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : "Roo.util.Observable"
      }
    ],
    "events" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Fires when an item is added to the collection.",
        "sig" : "function (index, o, key)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "clear",
        "type" : "function",
        "desc" : "Fires when the collection is cleared.",
        "sig" : "function ()\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Fires when an item is removed from the collection.",
        "sig" : "function (o, key)\n{\n\n}",
        "memberOf" : ""
      },
      {
        "name" : "replace",
        "type" : "function",
        "desc" : "Fires when an item is replaced in the collection.",
        "sig" : "function (key, old, new)\n{\n\n}",
        "memberOf" : ""
      }
    ],
    "methods" : [
      {
        "name" : "add",
        "type" : "function",
        "desc" : "Adds an item to the collection.",
        "sig" : "(key, o)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addAll",
        "type" : "function",
        "desc" : "Adds all elements of an Array or an Object to the collection.",
        "sig" : "(objs)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "clear",
        "type" : "function",
        "desc" : "Removes all items from the collection.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "clone",
        "type" : "function",
        "desc" : "Creates a duplicate of this collection",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "contains",
        "type" : "function",
        "desc" : "Returns true if the collection contains the passed Object as an item.",
        "sig" : "(o)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "containsKey",
        "type" : "function",
        "desc" : "Returns true if the collection contains the passed Object as a key.",
        "sig" : "(key)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "each",
        "type" : "function",
        "desc" : "Executes the specified function once for every item in the collection, passing each\nitem as the first and only parameter. returning false from the function will stop the iteration.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "eachKey",
        "type" : "function",
        "desc" : "Executes the specified function once for every key in the collection, passing each\nkey, and its associated item as the first two parameters.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "filter",
        "type" : "function",
        "desc" : "Filter the <i>objects</i> in this collection by a specific property. \nReturns a new collection that has been filtered.",
        "sig" : "(property, value)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "filterBy",
        "type" : "function",
        "desc" : "Filter by a function. * Returns a new collection that has been filtered.\nThe passed function will be called with each \nobject in the collection. If the function returns true, the value is included \notherwise it is filtered.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "find",
        "type" : "function",
        "desc" : "Returns the first item in the collection which elicits a true return value from the\npassed selection function.",
        "sig" : "(fn, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "first",
        "type" : "function",
        "desc" : "Returns the first item in the collection.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "get",
        "type" : "function",
        "desc" : "Returns the item associated with the passed key or index.",
        "sig" : "(key)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getCount",
        "type" : "function",
        "desc" : "Returns the number of items in the collection.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getKey",
        "type" : "function",
        "desc" : "MixedCollection has a generic way to fetch keys if you implement getKey.\n<pre><code>\n// normal way\nvar mc = new Roo.util.MixedCollection();\nmc.add(someEl.dom.id, someEl);\nmc.add(otherEl.dom.id, otherEl);\n//and so on\n\n// using getKey\nvar mc = new Roo.util.MixedCollection();\nmc.getKey = function(el){\n   return el.dom.id;\n};\nmc.add(someEl);\nmc.add(otherEl);\n\n// or via the constructor\nvar mc = new Roo.util.MixedCollection(false, function(el){\n   return el.dom.id;\n});\nmc.add(someEl);\nmc.add(otherEl);\n</code></pre>",
        "sig" : "(o)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "getRange",
        "type" : "function",
        "desc" : "Returns a range of items in this collection",
        "sig" : "(startIndex, endIndex)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "indexOf",
        "type" : "function",
        "desc" : "Returns index within the collection of the passed Object.",
        "sig" : "(o)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "indexOfKey",
        "type" : "function",
        "desc" : "Returns index within the collection of the passed key.",
        "sig" : "(key)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "insert",
        "type" : "function",
        "desc" : "Inserts an item at the specified index in the collection.",
        "sig" : "(index, key, o)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "item",
        "type" : "function",
        "desc" : "Returns the item associated with the passed key OR index. Key has priority over index.",
        "sig" : "(key)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "itemAt",
        "type" : "function",
        "desc" : "Returns the item at the specified index.",
        "sig" : "(index)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "key",
        "type" : "function",
        "desc" : "Returns the item associated with the passed key.",
        "sig" : "(key)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "keySort",
        "type" : "function",
        "desc" : "Sorts this collection by keys",
        "sig" : "(direction, fn)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "last",
        "type" : "function",
        "desc" : "Returns the last item in the collection.",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "remove",
        "type" : "function",
        "desc" : "Removed an item from the collection.",
        "sig" : "(o)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeAt",
        "type" : "function",
        "desc" : "Remove an item from a specified index in the collection.",
        "sig" : "(index)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeKey",
        "type" : "function",
        "desc" : "Removed an item associated with the passed key fom the collection.",
        "sig" : "(key)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      },
      {
        "name" : "replace",
        "type" : "function",
        "desc" : "Replaces an item in the collection.",
        "sig" : "(key, o)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "sort",
        "type" : "function",
        "desc" : "Sorts this collection with the passed comparison function",
        "sig" : "(direction, fn)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : "Roo.util.Observable"
      }
    ]
  },
  "Roo.util.Observable" : {
    "props" : [
      {
        "name" : "listeners",
        "type" : "Object",
        "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
        "memberOf" : ""
      }
    ],
    "events" : [],
    "methods" : [
      {
        "name" : "addEvents",
        "type" : "function",
        "desc" : "Used to define events on this Observable",
        "sig" : "(object)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "addListener",
        "type" : "function",
        "desc" : "Appends an event handler to this component",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "capture",
        "type" : "function",
        "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
        "sig" : "(o, fn, scope)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "fireEvent",
        "type" : "function",
        "desc" : "Fires the specified event with the passed parameters (minus the event name).",
        "sig" : "(eventName, args)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "hasListener",
        "type" : "function",
        "desc" : "Checks to see if this object has any listeners for a specified event",
        "sig" : "(eventName)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "on",
        "type" : "function",
        "desc" : "Appends an event handler to this element (shorthand for addListener)",
        "sig" : "(eventName, handler, scope, options)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "purgeListeners",
        "type" : "function",
        "desc" : "Removes all listeners for this object",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "releaseCapture",
        "type" : "function",
        "desc" : "Removes <b>all</b> added captures from the Observable.",
        "sig" : "(o)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "removeListener",
        "type" : "function",
        "desc" : "Removes a listener",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "un",
        "type" : "function",
        "desc" : "Removes a listener (shorthand for removeListener)",
        "sig" : "(eventName, handler, scope)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.util.TextMetrics" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "createInstance",
        "type" : "function",
        "desc" : "Return a unique TextMetrics instance that can be bound directly to an element and reused.  This reduces\nthe overhead of multiple calls to initialize the style properties on each measurement.",
        "sig" : "(el, fixedWidth)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "measure",
        "type" : "function",
        "desc" : "Measures the size of the specified text",
        "sig" : "(el, text, fixedWidth)",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "Roo.util.TextMetrics.Instance" : {
    "props" : [],
    "events" : [],
    "methods" : []
  },
  "String" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "escape",
        "type" : "function",
        "desc" : "Escapes the passed string for ' and \\",
        "sig" : "(string)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "format",
        "type" : "function",
        "desc" : "Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each\ntoken must be unique, and must increment in the format {0}, {1}, etc.  Example usage:\n<pre><code>\nvar cls = 'my-class', text = 'Some text';\nvar s = String.format('<div class=\"{0}\">{1}</div>', cls, text);\n// s now contains the string: '<div class=\"my-class\">Some text</div>'\n</code></pre>",
        "sig" : "(string, value1, value2)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "leftPad",
        "type" : "function",
        "desc" : "Pads the left side of a string with a specified character.  This is especially useful\nfor normalizing number and date strings.  Example usage:\n<pre><code>\nvar s = String.leftPad('123', 5, '0');\n// s now contains the string: '00123'\n</code></pre>",
        "sig" : "(string, size, char)",
        "static" : true,
        "memberOf" : ""
      },
      {
        "name" : "toggle",
        "type" : "function",
        "desc" : "Utility function that allows you to easily switch a string between two alternating values.  The passed value\nis compared to the current string, and if they are equal, the other value that was passed in is returned.  If\nthey are already different, the first value passed in is returned.  Note that this method returns the new value\nbut does not change the current string.\n<pre><code>\n// alternate sort directions\nsort = sort.toggle('ASC', 'DESC');\n\n// instead of conditional logic:\nsort = (sort == 'ASC' ? 'DESC' : 'ASC');\n</code></pre>",
        "sig" : "(value, other)",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "unicodeClean",
        "type" : "function",
        "desc" : "Remove invalid unicode characters from a string",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "_global_" : {
    "props" : [],
    "events" : [],
    "methods" : [
      {
        "name" : "InlineLexer",
        "type" : "function",
        "desc" : "Inline Lexer & Compiler",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "Lexer",
        "type" : "function",
        "desc" : "Block Lexer",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "Parser",
        "type" : "function",
        "desc" : "eval:var:Parser",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "Renderer",
        "type" : "function",
        "desc" : "eval:var:Renderer",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "escape",
        "type" : "function",
        "desc" : "Helpers",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "marked",
        "type" : "function",
        "desc" : "eval:var:marked",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "merge",
        "type" : "function",
        "desc" : "eval:var:merge",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      },
      {
        "name" : "noop",
        "type" : "function",
        "desc" : "eval:var:noop",
        "sig" : "()\n{\n\n}",
        "static" : false,
        "memberOf" : ""
      }
    ]
  },
  "this" : {
    "props" : [],
    "events" : [],
    "methods" : []
  }
}