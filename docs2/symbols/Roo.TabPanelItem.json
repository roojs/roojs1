{
  "name" : "Roo.TabPanelItem",
  "augments" : [
    "Roo.util.Observable"
  ],
  "desc" : "Represents an individual item (tab plus body) in a TabPanel.",
  "config" : [
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable",
      "values" : [
      ]
    }
  ],
  "methods" : [
    {
      "name" : "setUrl",
      "desc" : "Set a URL to be used to load the content for this TabPanelItem.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.TabPanelItem",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "url",
          "type" : "String/Function",
          "desc" : "The URL to load the content from, or a function to call to get the URL",
          "isOptional" : false
        },
        {
          "name" : "params",
          "type" : "String/Object",
          "desc" : "(optional) The string params for the update call or an object of the params. See {@link Roo.UpdateManager#update} for more details. (Defaults to null)",
          "isOptional" : false
        },
        {
          "name" : "loadOnce",
          "type" : "Boolean",
          "desc" : "(optional) Whether to only load the content once. If this is false it makes the Ajax call every time this TabPanelItem is activated. (Defaults to false)",
          "isOptional" : false
        }
      ],
      "returns" : "Roo.UpdateManager"
    },
    {
      "name" : "getText",
      "desc" : "Returns the text for this tab",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.TabPanelItem",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : "String"
    },
    {
      "name" : "isHidden",
      "desc" : "Returns true if this tab is \"hidden\"",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.TabPanelItem",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "setText",
      "desc" : "Sets the text for the tab (Note: this also sets the tooltip text)",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.TabPanelItem",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "text",
          "type" : "String",
          "desc" : "The tab's text and tooltip",
          "isOptional" : false
        }
      ],
      "returns" : ""
    },
    {
      "name" : "activate",
      "desc" : "Activates this TabPanelItem -- this <b>does</b> deactivate the currently active TabPanelItem.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.TabPanelItem",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "isActive",
      "desc" : "Returns true if this tab is the active tab.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.TabPanelItem",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "setContent",
      "desc" : "Sets the content for this TabPanelItem.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.TabPanelItem",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "content",
          "type" : "String",
          "desc" : "The content",
          "isOptional" : false
        },
        {
          "name" : "loadScripts",
          "type" : "Boolean",
          "desc" : "true to look for and load scripts",
          "isOptional" : false
        }
      ],
      "returns" : ""
    },
    {
      "name" : "refresh",
      "desc" : "Forces a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the setUrl method has not been called.\n  This does not activate the panel, just updates its content.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.TabPanelItem",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "setHidden",
      "desc" : "Show or hide the tab",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.TabPanelItem",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "hidden",
          "type" : "Boolean",
          "desc" : "True to hide or false to show.",
          "isOptional" : false
        }
      ],
      "returns" : ""
    },
    {
      "name" : "setTooltip",
      "desc" : "Set the tooltip for the tab.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.TabPanelItem",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "tooltip",
          "type" : "String",
          "desc" : "The tab's tooltip",
          "isOptional" : false
        }
      ],
      "returns" : ""
    },
    {
      "name" : "enable",
      "desc" : "Enables this TabPanelItem if it was previously disabled.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.TabPanelItem",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "getUpdateManager",
      "desc" : "Gets the {@link Roo.UpdateManager} for the body of this TabPanelItem. Enables you to perform Ajax updates.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.TabPanelItem",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : "Roo.UpdateManager"
    },
    {
      "name" : "disable",
      "desc" : "Disables this TabPanelItem -- this does nothing if this is the active TabPanelItem.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.TabPanelItem",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "hide",
      "desc" : "Hides this TabPanelItem -- if you don't activate another TabPanelItem this could look odd.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.TabPanelItem",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "show",
      "desc" : "Shows this TabPanelItem -- this <b>does not</b> deactivate the currently active TabPanelItem.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.TabPanelItem",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "purgeListeners",
      "desc" : "Removes all listeners for this object",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "on",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : ""
    },
    {
      "name" : "un",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addEvents",
      "desc" : "Used to define events on this Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined",
          "isOptional" : false
        }
      ],
      "returns" : ""
    },
    {
      "name" : "releaseCapture",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release",
          "isOptional" : false
        }
      ],
      "returns" : ""
    },
    {
      "name" : "removeListener",
      "desc" : "Removes a listener",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : ""
    },
    {
      "name" : "fireEvent",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers",
          "isOptional" : false
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "hasListener",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for",
          "isOptional" : false
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "capture",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture",
          "isOptional" : false
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn",
          "isOptional" : false
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addListener",
      "desc" : "Appends an event handler to this component",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>",
          "isOptional" : false
        }
      ],
      "returns" : ""
    }
  ],
  "events" : [
    {
      "name" : "*beforeclose",
      "desc" : "Fires before this tab is closed. To cancel the close, set cancel to true on e (e.cancel = true).",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.TabPanelItem",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Object",
          "desc" : "Set cancel to true on this object to cancel the close.",
          "isOptional" : false
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*close",
      "desc" : "Fires when this tab is closed.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.TabPanelItem",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*activate",
      "desc" : "Fires when this tab becomes the active tab.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "tabPanel",
          "type" : "Roo.TabPanel",
          "desc" : "The parent TabPanel",
          "isOptional" : false
        },
        {
          "name" : "this",
          "type" : "Roo.TabPanelItem",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*deactivate",
      "desc" : "Fires when this tab is no longer the active tab.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "tabPanel",
          "type" : "Roo.TabPanel",
          "desc" : "The parent TabPanel",
          "isOptional" : false
        },
        {
          "name" : "this",
          "type" : "Roo.TabPanelItem",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : ""
    }
  ]
}