{
  "name" : "Roo.Resizable",
  "augments" : [
    "Roo.util.Observable"
  ],
  "desc" : "<p>Applies drag handles to an element to make it resizable. The drag handles are inserted into the element\nand positioned absolute. Some elements, such as a textarea or image, don't support this. To overcome that, you can wrap\nthe textarea in a div and set \"resizeChild\" to true (or to the id of the element), <b>or</b> set wrap:true in your config and\nthe element will be wrapped for you automatically.</p>\n<p>Here is the list of valid resize handles:</p>\n<pre>\nValue   Description\n------  -------------------\n 'n'     north\n 's'     south\n 'e'     east\n 'w'     west\n 'nw'    northwest\n 'sw'    southwest\n 'se'    southeast\n 'ne'    northeast\n 'hd'    horizontal drag\n 'all'   all\n</pre>\n<p>Here's an example showing the creation of a typical Resizable:</p>\n<pre><code>\nvar resizer = new Roo.Resizable(\"element-id\", {\n    handles: 'all',\n    minWidth: 200,\n    minHeight: 100,\n    maxWidth: 500,\n    maxHeight: 400,\n    pinned: true\n});\nresizer.on(\"resize\", myHandler);\n</code></pre>\n<p>To hide a particular handle, set its display to none in CSS, or through script:<br>\nresizer.east.setDisplayed(false);</p>",
  "config" : [
    {
      "name" : "easing",
      "type" : "String",
      "desc" : "Animation easing if animate = true (defaults to 'easingOutStrong')",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable",
      "values" : [
      ]
    },
    {
      "name" : "maxWidth",
      "type" : "Number",
      "desc" : "The maximum width for the element (defaults to 10000)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "minWidth",
      "type" : "Number",
      "desc" : "The minimum width for the element (defaults to 5)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "dynamic",
      "type" : "Boolean",
      "desc" : "True to resize the element while dragging instead of using a proxy (defaults to false)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "pinned",
      "type" : "Boolean",
      "desc" : "True to ensure that the resize handles are always visible, false to display them only when the\nuser mouses over the resizable borders. This is only applied at config time. (defaults to false)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "enabled",
      "type" : "Boolean",
      "desc" : "False to disable resizing (defaults to true)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "handles",
      "type" : "String",
      "desc" : "String consisting of the resize handles to display (defaults to undefined)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "preserveRatio",
      "type" : "Boolean",
      "desc" : "True to preserve the original ratio between height and width during resize (defaults to false)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "minHeight",
      "type" : "Number",
      "desc" : "The minimum height for the element (defaults to 5)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "maxHeight",
      "type" : "Number",
      "desc" : "The maximum height for the element (defaults to 10000)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "widthIncrement",
      "type" : "Number",
      "desc" : "The increment to snap the width resize in pixels (dynamic must be true, defaults to 0)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "resizeChild",
      "type" : "Boolean/String/Element",
      "desc" : "True to resize the first child, or id/element to resize (defaults to false)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "width",
      "type" : "Number",
      "desc" : "The width of the element in pixels (defaults to null)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "transparent",
      "type" : "Boolean",
      "desc" : "True for transparent handles. This is only applied at config time. (defaults to false)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "minX",
      "type" : "Number",
      "desc" : "The minimum allowed page X for the element (only used for west resizing, defaults to 0)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "constrainTo",
      "type" : "String/HTMLElement/Element",
      "desc" : "Constrain the resize to a particular element",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "disableTrackOver",
      "type" : "Boolean",
      "desc" : "True to disable mouse tracking. This is only applied at config time. (defaults to false)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "minY",
      "type" : "Number",
      "desc" : "The minimum allowed page Y for the element (only used for north resizing, defaults to 0)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "adjustments",
      "type" : "Array/String",
      "desc" : "String \"auto\" or an array [width, height] with values to be <b>added</b> to the\nresize operation's new size (defaults to [0, 0])",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "wrap",
      "type" : "Boolean",
      "desc" : "True to wrap an element with a div if needed (required for textareas and images, defaults to false)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "height",
      "type" : "Number",
      "desc" : "The height of the element in pixels (defaults to null)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "duration",
      "type" : "Number",
      "desc" : "Animation duration if animate = true (defaults to .35)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "animate",
      "type" : "Boolean",
      "desc" : "True to animate the resize (not compatible with dynamic sizing, defaults to false)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "multiDirectional",
      "type" : "Boolean",
      "desc" : "<b>Deprecated</b>.  The old style of adding multi-direction resize handles, deprecated\nin favor of the handles config option (defaults to false)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "heightIncrement",
      "type" : "Number",
      "desc" : "The increment to snap the height resize in pixels (dynamic must be true, defaults to 0)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "draggable",
      "type" : "Boolean",
      "desc" : "Convenience to initialize drag drop (defaults to false)",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    },
    {
      "name" : "resizeRegion",
      "type" : "Roo.lib.Region",
      "desc" : "Constrain the resize to a particular region",
      "memberOf" : "Roo.Resizable",
      "values" : [
      ]
    }
  ],
  "methods" : [
    {
      "name" : "getEl",
      "desc" : "Returns the element this component is bound to.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Resizable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "getResizeChild",
      "desc" : "Returns the resizeChild element (or null).",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Resizable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : ""
        }
      ]
    },
    {
      "name" : "destroy",
      "desc" : "Destroys this resizable. If the element was wrapped and\nremoveEl is not true then the element remains.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Resizable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "removeEl",
          "type" : "Boolean",
          "desc" : "(optional) true to remove the element from the DOM",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "resizeTo",
      "desc" : "Perform a manual resize",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Resizable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "width",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "height",
          "type" : "Number",
          "desc" : "",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "purgeListeners",
      "desc" : "Removes all listeners for this object",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
      ]
    },
    {
      "name" : "on",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "un",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "addEvents",
      "desc" : "Used to define events on this Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "releaseCapture",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "removeListener",
      "desc" : "Removes a listener",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "fireEvent",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "returns false if any of the handlers return false otherwise it returns true"
        }
      ]
    },
    {
      "name" : "hasListener",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "True if the event is being listened for, else false"
        }
      ]
    },
    {
      "name" : "capture",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture",
          "isOptional" : false
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "addListener",
      "desc" : "Appends an event handler to this component",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    }
  ],
  "events" : [
    {
      "name" : "*resize",
      "desc" : "Fired after a resize.",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Resizable",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "width",
          "type" : "Number",
          "desc" : "The new width",
          "isOptional" : false
        },
        {
          "name" : "height",
          "type" : "Number",
          "desc" : "The new height",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "The mouseup event",
          "isOptional" : false
        }
      ]
    },
    {
      "name" : "*resizing",
      "desc" : "Fired a resizing.",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Resizable",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "x",
          "type" : "Number",
          "desc" : "The new x position",
          "isOptional" : false
        },
        {
          "name" : "y",
          "type" : "Number",
          "desc" : "The new y position",
          "isOptional" : false
        },
        {
          "name" : "w",
          "type" : "Number",
          "desc" : "The new w width",
          "isOptional" : false
        },
        {
          "name" : "h",
          "type" : "Number",
          "desc" : "The new h hight",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "The mouseup event",
          "isOptional" : false
        }
      ]
    },
    {
      "name" : "*beforeresize",
      "desc" : "Fired before resize is allowed. Set enabled to false to cancel resize.",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Resizable",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "The mousedown event",
          "isOptional" : false
        }
      ]
    }
  ]
}