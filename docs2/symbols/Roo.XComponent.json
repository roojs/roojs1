{
  "name" : "Roo.XComponent",
  "augments" : [
    "Roo.util.Observable"
  ],
  "desc" : "A delayed Element creator...\nOr a way to group chunks of interface together.\ntechnically this is a wrapper around a tree of Roo elements (which defines a 'module'),\n used in conjunction with XComponent.build() it will create an instance of each element,\n then call addxtype() to build the User interface.\n\nMypart.xyx = new Roo.XComponent({\n\n    parent : 'Mypart.xyz', // empty == document.element.!!\n    order : '001',\n    name : 'xxxx'\n    region : 'xxxx'\n    disabled : function() {} \n     \n    tree : function() { // return an tree of xtype declared components\n        var MODULE = this;\n        return \n        {\n            xtype : 'NestedLayoutPanel',\n            // technicall\n        }\n     ]\n})\n\n\nIt can be used to build a big heiracy, with parent etc.\nor you can just use this to render a single compoent to a dom element\nMYPART.render(Roo.Element | String(id) | dom_element )\n\n\nUsage patterns.\n\nClassic Roo\n\nRoo is designed primarily as a single page application, so the UI build for a standard interface will\nexpect a single 'TOP' level module normally indicated by the 'parent' of the XComponent definition being defined as false.\n\nEach sub module is expected to have a parent pointing to the class name of it's parent module.\n\nWhen the top level is false, a 'Roo.BorderLayout' is created and the element is flagged as 'topModule'\n- if mulitple topModules exist, the last one is defined as the top module.\n\nEmbeded Roo\n\nWhen the top level or multiple modules are to embedded into a existing HTML page,\nthe parent element can container '#id' of the element where the module will be drawn.\n\nBootstrap Roo\n\nUnlike classic Roo, the bootstrap tends not to be used as a single page.\nit relies more on a include mechanism, where sub modules are included into an outer page.\nThis is normally managed by the builder tools using Roo.apply( options, Included.Sub.Module )\n\nBootstrap Roo Included elements\n\nOur builder application needs the ability to preview these sub compoennts. They will normally have parent=false set,\nhence confusing the component builder as it thinks there are multiple top level elements. \n\nString Over-ride & Translations\n\nOur builder application writes all the strings as _strings and _named_strings. This is to enable the translation of elements,\nand also the 'overlaying of string values - needed when different versions of the same application with different text content\nare needed. @see Roo.XComponent.overlayString",
  "config" : [
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable",
      "values" : [
      ]
    },
    {
      "name" : "region",
      "type" : "String",
      "desc" : "Region to render component to (defaults to center)",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "disabled",
      "type" : "Function|boolean",
      "desc" : "If this module is disabled by some rule, return true from the funtion",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "order",
      "type" : "String",
      "desc" : "Used to set the order in which elements are created (usefull for multiple tabs)",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "items",
      "type" : "Array",
      "desc" : "A single item array - the first element is the root of the tree..\nIt's done this way to stay compatible with the Xtype system...",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "parent",
      "type" : "String",
      "desc" : "Name of parent element which it get xtype added to..",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "name",
      "type" : "String",
      "desc" : "String to display while loading.",
      "memberOf" : "",
      "values" : [
      ]
    }
  ],
  "methods" : [
    {
      "name" : "overlayStrings",
      "desc" : "Overlay a set of modified strings onto a component\nThis is dependant on our builder exporting the strings and 'named strings' elements.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "element",
          "type" : "Object",
          "desc" : "to overlay on - eg. Pman.Dialog.Login"
        },
        {
          "name" : "associative",
          "type" : "Object",
          "desc" : "array of 'named' string and it's new value."
        }
      ],
      "returns" : ""
    },
    {
      "name" : "preBuild",
      "desc" : "move modules into their correct place in the tree..",
      "static" : true,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "toObject",
      "desc" : "convert a string to an object..\neg. 'AAA.BBB' -> finds AAA.BBB",
      "static" : true,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "render",
      "desc" : "render\nrender element to dom or tree",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "optional",
          "type" : "Roo.Element|String|DomElement",
          "desc" : "render to if parent is not set."
        }
      ],
      "returns" : ""
    },
    {
      "name" : "buildOrder",
      "desc" : "make a list of modules to build.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "Array"
    },
    {
      "name" : "register",
      "desc" : "Register components to be built later.\n\nThis solves the following issues\n- Building is not done on page load, but after an authentication process has occured.\n- Interface elements are registered on page load\n- Parent Interface elements may not be loaded before child, so this handles that..\n\n\nexample:\n\nMyApp.register({\n          order : '000001',\n          module : 'Pman.Tab.projectMgr',\n          region : 'center',\n          parent : 'Pman.layout',\n          disabled : false,  // or use a function..\n        })\n* @param {Object} details about module",
      "static" : true,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "build",
      "desc" : "Build the registered modules.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "parent",
          "type" : "Object",
          "desc" : "element."
        },
        {
          "name" : "optional",
          "type" : "Function",
          "desc" : "method to call after module has been added."
        }
      ],
      "returns" : ""
    },
    {
      "name" : "purgeListeners",
      "desc" : "Removes all listeners for this object",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "un",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addEvents",
      "desc" : "Used to define events on this Observable",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "releaseCapture",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "removeListener",
      "desc" : "Removes a listener",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "fireEvent",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : ""
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers"
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "hasListener",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for"
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "capture",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture"
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addListener",
      "desc" : "Appends an event handler to this component",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context."
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>"
        }
      ],
      "returns" : ""
    }
  ],
  "events" : [
    {
      "name" : "*built",
      "desc" : "Fires when this the componnt is built",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "c",
          "type" : "Roo.XComponent",
          "desc" : "the component"
        }
      ],
      "returns" : ""
    }
  ]
}