{
  "name" : "Roo.state.CookieProvider",
  "augments" : [
    "Roo.state.Provider"
  ],
  "desc" : "The default Provider implementation which saves state via cookies.\n<br />Usage:\n <pre><code>\n   var cp = new Roo.state.CookieProvider({\n       path: \"/cgi-bin/\",\n       expires: new Date(new Date().getTime()+(1000*60*60*24*30)); //30 days\n       domain: \"roojs.com\"\n   })\n   Roo.state.Manager.setProvider(cp);\n </code></pre>",
  "config" : [
    {
      "name" : "path",
      "type" : "String",
      "desc" : "The path for which the cookie is active (defaults to root '/' which makes it active for all pages in the site)",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "secure",
      "type" : "Boolean",
      "desc" : "True if the site is using SSL (defaults to false)",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "domain",
      "type" : "String",
      "desc" : "The domain to save the cookie for.  Note that you cannot specify a different domain than\nyour page is on, but you can specify a sub-domain, or simply the domain itself like 'roojs.com' to include\nall sub-domains if you need to access cookies across different sub-domains (defaults to null which uses the same\ndomain the page is running on including the 'www' like 'www.roojs.com')",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "expires",
      "type" : "Date",
      "desc" : "The cookie expiration date (defaults to 7 days from now)",
      "memberOf" : "",
      "values" : [
      ]
    }
  ],
  "methods" : [
    {
      "name" : "clear",
      "desc" : "Clears a value from the state",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.state.Provider",
      "params" : [
        {
          "name" : "name",
          "type" : "String",
          "desc" : "The key name"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "decodeValue",
      "desc" : "Decodes a string previously encoded with {@link #encodeValue}.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.state.Provider",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The value to decode"
        }
      ],
      "returns" : "Mixed"
    },
    {
      "name" : "get",
      "desc" : "Returns the current value for a key",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.state.Provider",
      "params" : [
        {
          "name" : "name",
          "type" : "String",
          "desc" : "The key name"
        },
        {
          "name" : "defaultValue",
          "type" : "Mixed",
          "desc" : "A default value to return if the key's value is not found"
        }
      ],
      "returns" : "Mixed"
    },
    {
      "name" : "set",
      "desc" : "Sets the value for a key",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.state.Provider",
      "params" : [
        {
          "name" : "name",
          "type" : "String",
          "desc" : "The key name"
        },
        {
          "name" : "value",
          "type" : "Mixed",
          "desc" : "The value to set"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "encodeValue",
      "desc" : "Encodes a value including type information.  Decode with {@link #decodeValue}.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.state.Provider",
      "params" : [
        {
          "name" : "value",
          "type" : "Mixed",
          "desc" : "The value to encode"
        }
      ],
      "returns" : "String"
    }
  ],
  "events" : [
    {
      "name" : "*statechange",
      "desc" : "Fires when a state change occurs.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.state.Provider",
      "params" : [
        {
          "name" : "this",
          "type" : "Provider",
          "desc" : "This state provider"
        },
        {
          "name" : "key",
          "type" : "String",
          "desc" : "The state key which was changed"
        },
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The encoded value for the state"
        }
      ],
      "returns" : ""
    }
  ]
}