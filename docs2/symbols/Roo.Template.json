{
  "name" : "Roo.Template",
  "augments" : [
  ],
  "desc" : "Represents an HTML fragment template. Templates can be precompiled for greater performance.\nFor a list of available format functions, see {@link Roo.util.Format}.<br />\nUsage:\n<pre><code>\nvar t = new Roo.Template({\n    html :  '&lt;div name=\"{id}\"&gt;' + \n        '&lt;span class=\"{cls}\"&gt;{name:trim} {someval:this.myformat}{value:ellipsis(10)}&lt;/span&gt;' +\n        '&lt;/div&gt;',\n    myformat: function (value, allValues) {\n        return 'XX' + value;\n    }\n});\nt.append('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});\n</code></pre>\nFor more information see this blog post with examples:\n <a href=\"http://www.cnitblog.com/seeyeah/archive/2011/12/30/38728.html/\">DomHelper\n     - Create Elements using DOM, HTML fragments and Templates</a>.",
  "config" : [
    {
      "name" : "html",
      "type" : "String",
      "desc" : "The HTML fragment or an array of fragments to join(\"\") or multiple arguments to join(\"\")",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "url",
      "type" : "String",
      "desc" : "The Url to load the template from. beware if you are loading from a url, the data may not be ready if you use it instantly..\n                   it should be fixed so that template is observable...",
      "memberOf" : "",
      "values" : [
      ]
    }
  ],
  "methods" : [
    {
      "name" : "insertFirst",
      "desc" : "Applies the supplied values to the template and inserts the new node(s) as the first child of el.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "el",
          "type" : "String/HTMLElement/Roo.Element",
          "desc" : "The context element"
        },
        {
          "name" : "values",
          "type" : "Object",
          "desc" : "The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})"
        },
        {
          "name" : "returnElement",
          "type" : "Boolean",
          "desc" : "(optional) true to return a Roo.Element (defaults to undefined)"
        }
      ],
      "returns" : "HTMLElement/Roo.Element"
    },
    {
      "name" : "overwrite",
      "desc" : "Applies the supplied values to the template and overwrites the content of el with the new node(s).",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "el",
          "type" : "String/HTMLElement/Roo.Element",
          "desc" : "The context element"
        },
        {
          "name" : "values",
          "type" : "Object",
          "desc" : "The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})"
        },
        {
          "name" : "returnElement",
          "type" : "Boolean",
          "desc" : "(optional) true to return a Roo.Element (defaults to undefined)"
        }
      ],
      "returns" : "HTMLElement/Roo.Element"
    },
    {
      "name" : "insertBefore",
      "desc" : "Applies the supplied values to the template and inserts the new node(s) before el.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "el",
          "type" : "String/HTMLElement/Roo.Element",
          "desc" : "The context element"
        },
        {
          "name" : "values",
          "type" : "Object",
          "desc" : "The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})"
        },
        {
          "name" : "returnElement",
          "type" : "Boolean",
          "desc" : "(optional) true to return a Roo.Element (defaults to undefined)"
        }
      ],
      "returns" : "HTMLElement/Roo.Element"
    },
    {
      "name" : "applyTemplate",
      "desc" : "Returns an HTML fragment of this template with the specified values applied.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "values",
          "type" : "Object",
          "desc" : "The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})"
        }
      ],
      "returns" : "String"
    },
    {
      "name" : "compile",
      "desc" : "Compiles the template into an internal function, eliminating the RegEx overhead.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "Roo.Template"
    },
    {
      "name" : "set",
      "desc" : "Sets the HTML used as the template and optionally compiles it.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "html",
          "type" : "String",
          "desc" : ""
        },
        {
          "name" : "compile",
          "type" : "Boolean",
          "desc" : "(optional) True to compile the template (defaults to undefined)"
        }
      ],
      "returns" : "Roo.Template"
    },
    {
      "name" : "from",
      "desc" : "Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "el",
          "type" : "String/HTMLElement",
          "desc" : "A DOM element or its id"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "insertAfter",
      "desc" : "Applies the supplied values to the template and inserts the new node(s) after el.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "el",
          "type" : "String/HTMLElement/Roo.Element",
          "desc" : "The context element"
        },
        {
          "name" : "values",
          "type" : "Object",
          "desc" : "The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})"
        },
        {
          "name" : "returnElement",
          "type" : "Boolean",
          "desc" : "(optional) true to return a Roo.Element (defaults to undefined)"
        }
      ],
      "returns" : "HTMLElement/Roo.Element"
    },
    {
      "name" : "append",
      "desc" : "Applies the supplied values to the template and appends the new node(s) to el.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "el",
          "type" : "String/HTMLElement/Roo.Element",
          "desc" : "The context element"
        },
        {
          "name" : "values",
          "type" : "Object",
          "desc" : "The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})"
        },
        {
          "name" : "returnElement",
          "type" : "Boolean",
          "desc" : "(optional) true to return a Roo.Element (defaults to undefined)"
        }
      ],
      "returns" : "HTMLElement/Roo.Element"
    },
    {
      "name" : "apply",
      "desc" : "Alias for {@link #applyTemplate}",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : ""
    }
  ],
  "events" : [
  ]
}