{
  "name" : "Roo.util.MixedCollection",
  "augments" : [
    "Roo.util.Observable"
  ],
  "desc" : "A Collection class that maintains both numeric indexes and keys and exposes events.",
  "config" : [
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable"
    }
  ],
  "methods" : [
    {
      "name" : "remove",
      "desc" : "Removed an item from the collection.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Object",
          "desc" : "The item to remove."
        }
      ],
      "returns" : "Object"
    },
    {
      "name" : "get",
      "desc" : "Returns the item associated with the passed key or index.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "key",
          "type" : "String/Number",
          "desc" : "The key or index of the item."
        }
      ],
      "returns" : "Object"
    },
    {
      "name" : "itemAt",
      "desc" : "Returns the item at the specified index.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "The index of the item."
        }
      ],
      "returns" : "Object"
    },
    {
      "name" : "each",
      "desc" : "Executes the specified function once for every item in the collection, passing each\nitem as the first and only parameter. returning false from the function will stop the iteration.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to execute for each item."
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the function."
        }
      ],
      "returns" : ""
    },
    {
      "name" : "insert",
      "desc" : "Inserts an item at the specified index in the collection.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "The index to insert the item at."
        },
        {
          "name" : "key",
          "type" : "String",
          "desc" : "The key to associate with the new item, or the item itself."
        },
        {
          "name" : "o",
          "type" : "Object",
          "desc" : "(optional) If the second parameter was a key, the new item."
        }
      ],
      "returns" : "Object"
    },
    {
      "name" : "getCount",
      "desc" : "Returns the number of items in the collection.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "Number"
    },
    {
      "name" : "clear",
      "desc" : "Removes all items from the collection.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "keySort",
      "desc" : "Sorts this collection by keys",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "direction",
          "type" : "String",
          "desc" : "(optional) \"ASC\" or \"DESC\""
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "(optional) a comparison function (defaults to case insensitive string)"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "indexOf",
      "desc" : "Returns index within the collection of the passed Object.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Object",
          "desc" : "The item to find the index of."
        }
      ],
      "returns" : "Number"
    },
    {
      "name" : "clone",
      "desc" : "Creates a duplicate of this collection",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "MixedCollection"
    },
    {
      "name" : "containsKey",
      "desc" : "Returns true if the collection contains the passed Object as a key.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "key",
          "type" : "String",
          "desc" : "The key to look for in the collection."
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "getKey",
      "desc" : "MixedCollection has a generic way to fetch keys if you implement getKey.\n<pre><code>\n// normal way\nvar mc = new Roo.util.MixedCollection();\nmc.add(someEl.dom.id, someEl);\nmc.add(otherEl.dom.id, otherEl);\n//and so on\n\n// using getKey\nvar mc = new Roo.util.MixedCollection();\nmc.getKey = function(el){\n   return el.dom.id;\n};\nmc.add(someEl);\nmc.add(otherEl);\n\n// or via the constructor\nvar mc = new Roo.util.MixedCollection(false, function(el){\n   return el.dom.id;\n});\nmc.add(someEl);\nmc.add(otherEl);\n</code></pre>",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "",
          "desc" : "{Object} The item for which to find the key."
        }
      ],
      "returns" : "Object"
    },
    {
      "name" : "find",
      "desc" : "Returns the first item in the collection which elicits a true return value from the\npassed selection function.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The selection function to execute for each item."
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the function."
        }
      ],
      "returns" : "Object"
    },
    {
      "name" : "getRange",
      "desc" : "Returns a range of items in this collection",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "startIndex",
          "type" : "Number",
          "desc" : "(optional) defaults to 0"
        },
        {
          "name" : "endIndex",
          "type" : "Number",
          "desc" : "(optional) default to the last item"
        }
      ],
      "returns" : "Array"
    },
    {
      "name" : "eachKey",
      "desc" : "Executes the specified function once for every key in the collection, passing each\nkey, and its associated item as the first two parameters.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to execute for each item."
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the function."
        }
      ],
      "returns" : ""
    },
    {
      "name" : "indexOfKey",
      "desc" : "Returns index within the collection of the passed key.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "key",
          "type" : "String",
          "desc" : "The key to find the index of."
        }
      ],
      "returns" : "Number"
    },
    {
      "name" : "contains",
      "desc" : "Returns true if the collection contains the passed Object as an item.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Object",
          "desc" : "The Object to look for in the collection."
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "addAll",
      "desc" : "Adds all elements of an Array or an Object to the collection.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "objs",
          "type" : "Object/Array",
          "desc" : "An Object containing properties which will be added to the collection, or\nan Array of values, each of which are added to the collection."
        }
      ],
      "returns" : ""
    },
    {
      "name" : "key",
      "desc" : "Returns the item associated with the passed key.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "key",
          "type" : "String/Number",
          "desc" : "The key of the item."
        }
      ],
      "returns" : "Object"
    },
    {
      "name" : "item",
      "desc" : "Returns the item associated with the passed key OR index. Key has priority over index.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "key",
          "type" : "String/Number",
          "desc" : "The key or index of the item."
        }
      ],
      "returns" : "Object"
    },
    {
      "name" : "filterBy",
      "desc" : "Filter by a function. * Returns a new collection that has been filtered.\nThe passed function will be called with each \nobject in the collection. If the function returns true, the value is included \notherwise it is filtered.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to be called, it will receive the args o (the object), k (the key)"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope of the function (defaults to this)"
        }
      ],
      "returns" : "MixedCollection"
    },
    {
      "name" : "add",
      "desc" : "Adds an item to the collection.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "key",
          "type" : "String",
          "desc" : "The key to associate with the item"
        },
        {
          "name" : "o",
          "type" : "Object",
          "desc" : "The item to add."
        }
      ],
      "returns" : "Object"
    },
    {
      "name" : "removeAt",
      "desc" : "Remove an item from a specified index in the collection.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "The index within the collection of the item to remove."
        }
      ],
      "returns" : ""
    },
    {
      "name" : "removeKey",
      "desc" : "Removed an item associated with the passed key fom the collection.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "key",
          "type" : "String",
          "desc" : "The key of the item to remove."
        }
      ],
      "returns" : ""
    },
    {
      "name" : "filter",
      "desc" : "Filter the <i>objects</i> in this collection by a specific property. \nReturns a new collection that has been filtered.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "property",
          "type" : "String",
          "desc" : "A property on your objects"
        },
        {
          "name" : "value",
          "type" : "String/RegExp",
          "desc" : "Either string that the property values \nshould start with or a RegExp to test against the property"
        }
      ],
      "returns" : "MixedCollection"
    },
    {
      "name" : "last",
      "desc" : "Returns the last item in the collection.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "Object"
    },
    {
      "name" : "replace",
      "desc" : "Replaces an item in the collection.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "key",
          "type" : "String",
          "desc" : "The key associated with the item to replace, or the item to replace."
        },
        {
          "name" : "o",
          "type" : "",
          "desc" : "{Object} o (optional) If the first parameter passed was a key, the item to associate with that key."
        }
      ],
      "returns" : "Object"
    },
    {
      "name" : "first",
      "desc" : "Returns the first item in the collection.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "Object"
    },
    {
      "name" : "sort",
      "desc" : "Sorts this collection with the passed comparison function",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "direction",
          "type" : "String",
          "desc" : "(optional) \"ASC\" or \"DESC\""
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "(optional) comparison function"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "purgeListeners",
      "desc" : "Removes all listeners for this object",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "on",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context."
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "un",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addEvents",
      "desc" : "Used to define events on this Observable",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "releaseCapture",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "removeListener",
      "desc" : "Removes a listener",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "fireEvent",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : ""
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers"
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "hasListener",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for"
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "capture",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture"
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addListener",
      "desc" : "Appends an event handler to this component",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context."
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>"
        }
      ],
      "returns" : ""
    }
  ],
  "events" : [
    {
      "name" : "*remove",
      "desc" : "Fires when an item is removed from the collection.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Object",
          "desc" : "The item being removed."
        },
        {
          "name" : "key",
          "type" : "String",
          "desc" : "(optional) The key associated with the removed item."
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*add",
      "desc" : "Fires when an item is added to the collection.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "The index at which the item was added."
        },
        {
          "name" : "o",
          "type" : "Object",
          "desc" : "The item added."
        },
        {
          "name" : "key",
          "type" : "String",
          "desc" : "The key associated with the added item."
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*replace",
      "desc" : "Fires when an item is replaced in the collection.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "key",
          "type" : "String",
          "desc" : "he key associated with the new added."
        },
        {
          "name" : "old",
          "type" : "Object",
          "desc" : "The item being replaced."
        },
        {
          "name" : "new",
          "type" : "Object",
          "desc" : "The new item."
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*clear",
      "desc" : "Fires when the collection is cleared.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : ""
    }
  ]
}