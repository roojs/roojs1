{
  "name" : "Roo.menu.DateMenu",
  "augments" : [
    "Roo.menu.Menu",
    "Roo.util.Observable"
  ],
  "desc" : "A menu containing a {@link Roo.menu.DateItem} component (which provides a date picker).",
  "config" : [
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable",
      "values" : [
      ]
    },
    {
      "name" : "shadow",
      "type" : "Boolean/String",
      "desc" : "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"sides\")",
      "memberOf" : "Roo.menu.Menu",
      "values" : [
      ]
    },
    {
      "name" : "defaultAlign",
      "type" : "String",
      "desc" : "The default {@link Roo.Element#alignTo) anchor position value for this menu\nrelative to its element of origin (defaults to \"tl-bl?\")",
      "memberOf" : "Roo.menu.Menu",
      "values" : [
      ]
    },
    {
      "name" : "subMenuAlign",
      "type" : "String",
      "desc" : "The {@link Roo.Element#alignTo} anchor position value to use for submenus of\nthis menu (defaults to \"tl-tr?\")",
      "memberOf" : "Roo.menu.Menu",
      "values" : [
      ]
    },
    {
      "name" : "minWidth",
      "type" : "Number",
      "desc" : "The minimum width of the menu in pixels (defaults to 120)",
      "memberOf" : "Roo.menu.Menu",
      "values" : [
      ]
    },
    {
      "name" : "registerMenu",
      "type" : "Boolean",
      "desc" : "True (default) - means that clicking on screen etc. hides it.",
      "memberOf" : "Roo.menu.Menu",
      "values" : [
      ]
    },
    {
      "name" : "allowOtherMenus",
      "type" : "Boolean",
      "desc" : "True to allow multiple menus to be displayed at the same time (defaults to false)",
      "memberOf" : "Roo.menu.Menu",
      "values" : [
      ]
    }
  ],
  "methods" : [
    {
      "name" : "addMenuItem",
      "desc" : "Creates a new {@link Roo.menu.Item} based an the supplied config object and adds it to the menu",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "config",
          "type" : "Object",
          "desc" : "A MenuItem config object"
        }
      ],
      "returns" : "Roo.menu.Item"
    },
    {
      "name" : "addElement",
      "desc" : "Adds an {@link Roo.Element} object to the menu",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "el",
          "type" : "String/HTMLElement/Roo.Element",
          "desc" : "The element or DOM node to add, or its id"
        }
      ],
      "returns" : "Roo.menu.Item"
    },
    {
      "name" : "isVisible",
      "desc" : "Read-only.  Returns true if the menu is currently displayed, else false.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "add",
      "desc" : "Addds one or more items of any type supported by the Menu class, or that can be converted into menu items.\nAny of the following are valid:\n<ul>\n<li>Any menu item object based on {@link Roo.menu.Item}</li>\n<li>An HTMLElement object which will be converted to a menu item</li>\n<li>A menu item config object that will be created as a new menu item</li>\n<li>A string, which can either be '-' or 'separator' to add a menu separator, otherwise\nit will be converted into a {@link Roo.menu.TextItem} and added</li>\n</ul>\nUsage:\n<pre><code>\n// Create the menu\nvar menu = new Roo.menu.Menu();\n\n// Create a menu item to add by reference\nvar menuItem = new Roo.menu.Item({ text: 'New Item!' });\n\n// Add a bunch of items at once using different methods.\n// Only the last item added will be returned.\nvar item = menu.add(\n    menuItem,                // add existing item by ref\n    'Dynamic Item',          // new TextItem\n    '-',                     // new separator\n    { text: 'Config Item' }  // new item by config\n);\n</code></pre>",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "args",
          "type" : "Mixed",
          "desc" : "One or more menu items, menu item configs or other objects that can be converted to menu items"
        }
      ],
      "returns" : "Roo.menu.Item"
    },
    {
      "name" : "addSeparator",
      "desc" : "Adds a separator bar to the menu",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
      ],
      "returns" : "Roo.menu.Item"
    },
    {
      "name" : "removeAll",
      "desc" : "Removes and destroys all items in the menu",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "remove",
      "desc" : "Removes an {@link Roo.menu.Item} from the menu and destroys the object",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "item",
          "type" : "Roo.menu.Item",
          "desc" : "The menu item to remove"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "getEl",
      "desc" : "Returns this menu's underlying {@link Roo.Element} object",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
      ],
      "returns" : "Roo.Element"
    },
    {
      "name" : "insert",
      "desc" : "Inserts an existing object based on {@link Roo.menu.Item} to the menu at a specified index",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "The index in the menu's list of current items where the new item should be inserted"
        },
        {
          "name" : "item",
          "type" : "Roo.menu.Item",
          "desc" : "The menu item to add"
        }
      ],
      "returns" : "Roo.menu.Item"
    },
    {
      "name" : "hide",
      "desc" : "Hides this menu and optionally all parent menus",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "deep",
          "type" : "Boolean",
          "desc" : "(optional) True to hide all parent menus recursively, if any (defaults to false)"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "show",
      "desc" : "Displays this menu relative to another element",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "element",
          "type" : "String/HTMLElement/Roo.Element",
          "desc" : "The element to align to"
        },
        {
          "name" : "position",
          "type" : "String",
          "desc" : "(optional) The {@link Roo.Element#alignTo} anchor position to use in aligning to\nthe element (defaults to this.defaultAlign)"
        },
        {
          "name" : "parentMenu",
          "type" : "Roo.menu.Menu",
          "desc" : "(optional) This menu's parent menu, if applicable (defaults to undefined)"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addText",
      "desc" : "Creates a new {@link Roo.menu.TextItem} with the supplied text and adds it to the menu",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "text",
          "type" : "String",
          "desc" : "The text to display in the menu item"
        }
      ],
      "returns" : "Roo.menu.Item"
    },
    {
      "name" : "addItem",
      "desc" : "Adds an existing object based on {@link Roo.menu.Item} to the menu",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "item",
          "type" : "Roo.menu.Item",
          "desc" : "The menu item to add"
        }
      ],
      "returns" : "Roo.menu.Item"
    },
    {
      "name" : "showAt",
      "desc" : "Displays this menu at a specific xy position",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "xyPosition",
          "type" : "Array",
          "desc" : "Contains X & Y [x, y] values for the position at which to show the menu (coordinates are page-based)"
        },
        {
          "name" : "parentMenu",
          "type" : "Roo.menu.Menu",
          "desc" : "(optional) This menu's parent menu, if applicable (defaults to undefined)"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "purgeListeners",
      "desc" : "Removes all listeners for this object",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "on",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context."
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "un",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addEvents",
      "desc" : "Used to define events on this Observable",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "releaseCapture",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "removeListener",
      "desc" : "Removes a listener",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "fireEvent",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : ""
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers"
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "hasListener",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for"
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "capture",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture"
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addListener",
      "desc" : "Appends an event handler to this component",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context."
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>"
        }
      ],
      "returns" : ""
    }
  ],
  "events" : [
    {
      "name" : "*select",
      "desc" : "",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "picker",
          "type" : "DatePicker",
          "desc" : ""
        },
        {
          "name" : "date",
          "type" : "Date",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*mouseover",
      "desc" : "Fires when the mouse is hovering over this menu",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.menu.Menu",
          "desc" : ""
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : ""
        },
        {
          "name" : "menuItem",
          "type" : "Roo.menu.Item",
          "desc" : "The menu item that was clicked"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*mouseout",
      "desc" : "Fires when the mouse exits this menu",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.menu.Menu",
          "desc" : ""
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : ""
        },
        {
          "name" : "menuItem",
          "type" : "Roo.menu.Item",
          "desc" : "The menu item that was clicked"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*beforehide",
      "desc" : "Fires before this menu is hidden",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.menu.Menu",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*itemclick",
      "desc" : "Fires when a menu item contained in this menu is clicked",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "baseItem",
          "type" : "Roo.menu.BaseItem",
          "desc" : "The BaseItem that was clicked"
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*beforeshow",
      "desc" : "Fires before this menu is displayed",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.menu.Menu",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*hide",
      "desc" : "Fires after this menu is hidden",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.menu.Menu",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*click",
      "desc" : "Fires when this menu is clicked (or when the enter key is pressed while it is active)",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.menu.Menu",
          "desc" : ""
        },
        {
          "name" : "menuItem",
          "type" : "Roo.menu.Item",
          "desc" : "The menu item that was clicked"
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*show",
      "desc" : "Fires after this menu is displayed",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.menu.Menu",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.menu.Menu",
          "desc" : ""
        }
      ],
      "returns" : ""
    }
  ]
}