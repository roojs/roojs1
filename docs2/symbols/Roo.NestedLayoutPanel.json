{
  "name" : "Roo.NestedLayoutPanel",
  "augments" : [
    "Roo.ContentPanel",
    "Roo.util.Observable"
  ],
  "desc" : "Create a new NestedLayoutPanel.",
  "config" : [
    {
      "name" : "loadOnce",
      "type" : "Boolean",
      "desc" : "When used with {@link #url}, calls {@link #setUrl} with this value",
      "memberOf" : "Roo.ContentPanel"
    },
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable"
    },
    {
      "name" : "autoScroll",
      "type" : "Boolean",
      "desc" : "True to scroll overflow in this panel (use with {@link #fitToFrame})",
      "memberOf" : "Roo.ContentPanel"
    },
    {
      "name" : "fitToFrame",
      "type" : "Boolean",
      "desc" : "True for this panel to adjust its size to fit when the region resizes  (defaults to false)",
      "memberOf" : "Roo.ContentPanel"
    },
    {
      "name" : "background",
      "type" : "Boolean",
      "desc" : "True if the panel should not be activated when it is added (defaults to false)",
      "memberOf" : "Roo.ContentPanel"
    },
    {
      "name" : "toolbar",
      "type" : "Toolbar",
      "desc" : "A toolbar for this panel",
      "memberOf" : "Roo.ContentPanel"
    },
    {
      "name" : "region",
      "type" : "String",
      "desc" : [
        "(center",
        "north",
        "south",
        "east",
        "west)"
      ],
      "memberOf" : "Roo.ContentPanel"
    },
    {
      "name" : "content",
      "type" : "String",
      "desc" : "Raw content to fill content panel with (uses setContent on construction.)",
      "memberOf" : "Roo.ContentPanel"
    },
    {
      "name" : "title",
      "type" : "String",
      "desc" : "The title for this panel",
      "memberOf" : "Roo.ContentPanel"
    },
    {
      "name" : "autoCreate",
      "type" : "Boolean/Object",
      "desc" : "True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create",
      "memberOf" : "Roo.ContentPanel"
    },
    {
      "name" : "fitContainer",
      "type" : "Boolean",
      "desc" : "When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)",
      "memberOf" : "Roo.ContentPanel"
    },
    {
      "name" : "closable",
      "type" : "Boolean",
      "desc" : "True if the panel can be closed/removed",
      "memberOf" : "Roo.ContentPanel"
    },
    {
      "name" : "params",
      "type" : "String/Object",
      "desc" : "When used with {@link #url}, calls {@link #setUrl} with this value",
      "memberOf" : "Roo.ContentPanel"
    },
    {
      "name" : "adjustments",
      "type" : "Array",
      "desc" : "Values to <b>add</b> to the width/height when doing a {@link #fitToFrame} (default is [0, 0])",
      "memberOf" : "Roo.ContentPanel"
    },
    {
      "name" : "url",
      "type" : "String",
      "desc" : "Calls {@link #setUrl} with this value",
      "memberOf" : "Roo.ContentPanel"
    },
    {
      "name" : "resizeEl",
      "type" : "String/HTMLElement/Element",
      "desc" : "An element to resize if {@link #fitToFrame} is true (instead of this panel's element)",
      "memberOf" : "Roo.ContentPanel"
    }
  ],
  "methods" : [
    {
      "name" : "addxtype",
      "desc" : "Adds a xtype elements to the layout of the nested panel\n<pre><code>\n\npanel.addxtype({\n       xtype : 'ContentPanel',\n       region: 'west',\n       items: [ .... ]\n   }\n);\n\npanel.addxtype({\n        xtype : 'NestedLayoutPanel',\n        region: 'west',\n        layout: {\n           center: { },\n           west: { }   \n        },\n        items : [ ... list of content panels or nested layout panels.. ]\n   }\n);\n</code></pre>",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "cfg",
          "type" : "Object",
          "desc" : "Xtype definition of item to add."
        }
      ],
      "returns" : ""
    },
    {
      "name" : "getLayout",
      "desc" : "Returns the nested BorderLayout for this panel",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "Roo.BorderLayout"
    },
    {
      "name" : "load",
      "desc" : "Loads this content panel immediately with content from XHR. Note: to delay loading until the panel is activated, use {@link #setUrl}.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.ContentPanel",
      "params" : [
        {
          "name" : "url",
          "type" : "Object/String/Function",
          "desc" : "The url for this request or a function to call to get the url or a config object containing any of the following options:\n<pre><code>\npanel.load({\n    url: \"your-url.php\",\n    params: {param1: \"foo\", param2: \"bar\"}, // or a URL encoded string\n    callback: yourFunction,\n    scope: yourObject, //(optional scope)\n    discardUrl: false,\n    nocache: false,\n    text: \"Loading...\",\n    timeout: 30,\n    scripts: false\n});\n</code></pre>\nThe only required property is <i>url</i>. The optional properties <i>nocache</i>, <i>text</i> and <i>scripts</i>\nare shorthand for <i>disableCaching</i>, <i>indicatorText</i> and <i>loadScripts</i> and are used to set their associated property on this panel UpdateManager instance."
        },
        {
          "name" : "params",
          "type" : "String/Object",
          "desc" : "(optional) The parameters to pass as either a URL encoded string \"param1=1&amp;param2=2\" or an object {param1: 1, param2: 2}"
        },
        {
          "name" : "callback",
          "type" : "Function",
          "desc" : "(optional) Callback when transaction is complete -- called with signature (oElement, bSuccess, oResponse)"
        },
        {
          "name" : "discardUrl",
          "type" : "Boolean",
          "desc" : "(optional) By default when you execute an update the defaultUrl is changed to the last used URL. If true, it will not store the URL."
        }
      ],
      "returns" : "Roo.ContentPanel"
    },
    {
      "name" : "getUpdateManager",
      "desc" : "Get the {@link Roo.UpdateManager} for this panel. Enables you to perform Ajax updates.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.ContentPanel",
      "params" : [
      ],
      "returns" : "Roo.UpdateManager"
    },
    {
      "name" : "isClosable",
      "desc" : "Returns true is this panel was configured to be closable",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.ContentPanel",
      "params" : [
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "destroy",
      "desc" : "Destroys this panel",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.ContentPanel",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "getEl",
      "desc" : "Returns this panel's element - used by regiosn to add.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.ContentPanel",
      "params" : [
      ],
      "returns" : "Roo.Element"
    },
    {
      "name" : "setContent",
      "desc" : "Updates this panel's element",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.ContentPanel",
      "params" : [
        {
          "name" : "content",
          "type" : "String",
          "desc" : "The new content"
        },
        {
          "name" : "loadScripts",
          "type" : "Boolean",
          "desc" : "(optional) true to look for and process scripts"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "getId",
      "desc" : "Returns this panel's id",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.ContentPanel",
      "params" : [
      ],
      "returns" : "String"
    },
    {
      "name" : "refresh",
      "desc" : "Force a content refresh from the URL specified in the {@link #setUrl} method.\n  Will fail silently if the {@link #setUrl} method has not been called.\n  This does not activate the panel, just updates its content.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.ContentPanel",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "getTitle",
      "desc" : "Returns this panel's title",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.ContentPanel",
      "params" : [
      ],
      "returns" : "String"
    },
    {
      "name" : "setTitle",
      "desc" : "Set this panel's title",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.ContentPanel",
      "params" : [
        {
          "name" : "title",
          "type" : "String",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "getToolbar",
      "desc" : "Returns the toolbar for this Panel if one was configured.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.ContentPanel",
      "params" : [
      ],
      "returns" : "Roo.Toolbar"
    },
    {
      "name" : "setUrl",
      "desc" : "Set a URL to be used to load the content for this panel. When this panel is activated, the content will be loaded from that URL.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.ContentPanel",
      "params" : [
        {
          "name" : "url",
          "type" : "String/Function",
          "desc" : "The URL to load the content from or a function to call to get the URL"
        },
        {
          "name" : "params",
          "type" : "String/Object",
          "desc" : "(optional) The string params for the update call or an object of the params. See {@link Roo.UpdateManager#update} for more details. (Defaults to null)"
        },
        {
          "name" : "loadOnce",
          "type" : "Boolean",
          "desc" : "(optional) Whether to only load the content once. If this is false it makes the Ajax call every time this panel is activated. (Defaults to false)"
        }
      ],
      "returns" : "Roo.UpdateManager"
    },
    {
      "name" : "purgeListeners",
      "desc" : "Removes all listeners for this object",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "on",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context."
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "un",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addEvents",
      "desc" : "Used to define events on this Observable",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "releaseCapture",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "removeListener",
      "desc" : "Removes a listener",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "fireEvent",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : ""
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers"
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "hasListener",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for"
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "capture",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture"
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addListener",
      "desc" : "Appends an event handler to this component",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context."
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>"
        }
      ],
      "returns" : ""
    }
  ],
  "events" : [
    {
      "name" : "*deactivate",
      "desc" : "Fires when this panel is activated.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.ContentPanel",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.ContentPanel",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*resize",
      "desc" : "Fires when this panel is resized if fitToFrame is true.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.ContentPanel",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.ContentPanel",
          "desc" : ""
        },
        {
          "name" : "width",
          "type" : "Number",
          "desc" : "The width after any component adjustments"
        },
        {
          "name" : "height",
          "type" : "Number",
          "desc" : "The height after any component adjustments"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*render",
      "desc" : "Fires when this tab is created",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.ContentPanel",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.ContentPanel",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*activate",
      "desc" : "Fires when this panel is activated.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.ContentPanel",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.ContentPanel",
          "desc" : ""
        }
      ],
      "returns" : ""
    }
  ]
}