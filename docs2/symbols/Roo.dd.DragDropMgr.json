{
  "name" : "Roo.dd.DragDropMgr",
  "augments" : [
  ],
  "desc" : "DragDropMgr is a singleton that tracks the element interaction for\nall DragDrop items in the window.  Generally, you will not call\nthis class directly, but it does have helper methods that could\nbe useful in your DragDrop implementations.",
  "config" : [
  ],
  "methods" : [
    {
      "name" : "isDragDrop",
      "desc" : "Utility function to determine if a given element has been\nregistered as a drag drop item.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "String",
          "desc" : "the element id to check"
        }
      ],
      "returns" : "boolean"
    },
    {
      "name" : "getRelated",
      "desc" : "Returns the drag and drop instances that are in all groups the\npassed in instance belongs to.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "p_oDD",
          "type" : "DragDrop",
          "desc" : "the obj to get related data for"
        },
        {
          "name" : "bTargetsOnly",
          "type" : "boolean",
          "desc" : "if true, only return targetable objs"
        }
      ],
      "returns" : "DragDrop[]"
    },
    {
      "name" : "getScrollLeft",
      "desc" : "Gets the scrollLeft",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "int"
    },
    {
      "name" : "regDragDrop",
      "desc" : "Each DragDrop instance must be registered with the DragDropMgr.\nThis is executed in DragDrop.init()",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "oDD",
          "type" : "DragDrop",
          "desc" : "the DragDrop object to register"
        },
        {
          "name" : "sGroup",
          "type" : "String",
          "desc" : "the name of the group this element belongs to"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "handleWasClicked",
      "desc" : "Recursively searches the immediate parent and all child nodes for\nthe handle element in order to determine wheter or not it was\nclicked.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "node",
          "type" : "",
          "desc" : "the html element to inspect"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "refreshCache",
      "desc" : "Refreshes the cache of the top-left and bottom-right points of the\ndrag and drop objects in the specified group(s).  This is in the\nformat that is stored in the drag and drop instance, so typical\nusage is:\n<code>\nRoo.dd.DragDropMgr.refreshCache(ddinstance.groups);\n</code>\nAlternatively:\n<code>\nRoo.dd.DragDropMgr.refreshCache({group1:true, group2:true});\n</code>",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "groups",
          "type" : "Object",
          "desc" : "an associative array of groups to refresh"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "getCss",
      "desc" : "Returns the style property for the DOM element (i.e.,\ndocument.getElById(id).style)",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "String",
          "desc" : "the id of the elment to get"
        }
      ],
      "returns" : "Object"
    },
    {
      "name" : "swapNode",
      "desc" : "Swap two nodes.  In IE, we use the native method, for others we\nemulate the IE behavior",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "n1",
          "type" : "",
          "desc" : "the first node to swap"
        },
        {
          "name" : "n2",
          "type" : "",
          "desc" : "the other node to swap"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "stopEvent",
      "desc" : "Utility to stop event propagation and event default, if these\nfeatures are turned on.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "the event as returned by this.getEvent()"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "lock",
      "desc" : "Lock all drag and drop functionality",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "moveToEl",
      "desc" : "Sets the x/y position of an element to the location of the\ntarget element.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "moveEl",
          "type" : "HTMLElement",
          "desc" : "The element to move"
        },
        {
          "name" : "targetEl",
          "type" : "HTMLElement",
          "desc" : "The position reference element"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "unlock",
      "desc" : "Unlock all drag and drop functionality",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "getDDById",
      "desc" : "Returns the DragDrop instance for a given id",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "String",
          "desc" : "the id of the DragDrop object"
        }
      ],
      "returns" : "DragDrop"
    },
    {
      "name" : "isLegalTarget",
      "desc" : "Returns true if the specified dd target is a legal target for\nthe specifice drag obj",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "the",
          "type" : "DragDrop",
          "desc" : "drag obj"
        },
        {
          "name" : "the",
          "type" : "DragDrop",
          "desc" : "target"
        }
      ],
      "returns" : "boolean"
    },
    {
      "name" : "isTypeOfDD",
      "desc" : "My goal is to be able to transparently determine if an object is\ntypeof DragDrop, and the exact subclass of DragDrop.  typeof\nreturns \"object\", oDD.constructor.toString() always returns\n\"DragDrop\" and not the name of the subclass.  So for now it just\nevaluates a well-known variable in DragDrop.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "the",
          "type" : "Object",
          "desc" : "object to evaluate"
        }
      ],
      "returns" : "boolean"
    },
    {
      "name" : "startDrag",
      "desc" : "Fired when either the drag pixel threshol or the mousedown hold\ntime threshold has been met.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "x",
          "type" : "",
          "desc" : "{int} the X position of the original mousedown"
        },
        {
          "name" : "y",
          "type" : "",
          "desc" : "{int} the Y position of the original mousedown"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "getStyle",
      "desc" : "Returns the specified element style property",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "el",
          "type" : "HTMLElement",
          "desc" : "the element"
        },
        {
          "name" : "styleProp",
          "type" : "string",
          "desc" : "the style property"
        }
      ],
      "returns" : "string"
    },
    {
      "name" : "getPosX",
      "desc" : "Returns the X position of an html element",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "el",
          "type" : "",
          "desc" : "the element for which to get the position"
        }
      ],
      "returns" : "int"
    },
    {
      "name" : "getPosY",
      "desc" : "Returns the Y position of an html element",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "el",
          "type" : "",
          "desc" : "the element for which to get the position"
        }
      ],
      "returns" : "int"
    },
    {
      "name" : "isLocked",
      "desc" : "Is drag and drop locked?",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "boolean"
    },
    {
      "name" : "getBestMatch",
      "desc" : "Helper function for getting the best match from the list of drag\nand drop objects returned by the drag and drop events when we are\nin INTERSECT mode.  It returns either the first object that the\ncursor is over, or the object that has the greatest overlap with\nthe dragged element.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "dds",
          "type" : "DragDrop[]",
          "desc" : "The array of drag and drop objects\ntargeted"
        }
      ],
      "returns" : "DragDrop"
    },
    {
      "name" : "getLocation",
      "desc" : "Returns a Region object containing the drag and drop element's position\nand size, including the padding configured for it",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "oDD",
          "type" : "DragDrop",
          "desc" : "the drag and drop object to get the\n                      location for"
        }
      ],
      "returns" : "Roo.lib.Region"
    },
    {
      "name" : "isHandle",
      "desc" : "Utility function to determine if a given element has been\nregistered as a drag drop handle for the given Drag Drop object.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "String",
          "desc" : "the element id to check"
        }
      ],
      "returns" : "boolean"
    },
    {
      "name" : "getScrollTop",
      "desc" : "Gets the scrollTop",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "int"
    },
    {
      "name" : "numericSort",
      "desc" : "Numeric array sort function",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "regHandle",
      "desc" : "Each DragDrop handle element must be registered.  This is done\nautomatically when executing DragDrop.setHandleElId()",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "sDDId",
          "type" : "String",
          "desc" : "the DragDrop id this element is a handle for"
        },
        {
          "name" : "sHandleId",
          "type" : "String",
          "desc" : "the id of the element that is the drag\nhandle"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "getElement",
      "desc" : "Returns the actual DOM element",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "String",
          "desc" : "the id of the elment to get"
        }
      ],
      "returns" : "Object"
    },
    {
      "name" : "verifyEl",
      "desc" : "This checks to make sure an element exists and is in the DOM.  The\nmain purpose is to handle cases where innerHTML is used to remove\ndrag and drop objects from the DOM.  IE provides an 'unspecified\nerror' when trying to access the offsetParent of such an element",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "el",
          "type" : "HTMLElement",
          "desc" : "the element to check"
        }
      ],
      "returns" : "boolean"
    }
  ],
  "events" : [
  ]
}