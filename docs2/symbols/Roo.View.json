{
  "name" : "Roo.View",
  "augments" : [
    "Roo.util.Observable"
  ],
  "desc" : "Create a \"View\" for an element based on a data model or UpdateManager and the supplied DomHelper template. \nThis class also supports single and multi selection modes. <br>\nCreate a data model bound view:\n <pre><code>\n var store = new Roo.data.Store(...);\n\n var view = new Roo.View({\n    el : \"my-element\",\n    tpl : '&lt;div id=\"{0}\"&gt;{2} - {1}&lt;/div&gt;', // auto create template\n \n    singleSelect: true,\n    selectedClass: \"ydataview-selected\",\n    store: store\n });\n\n // listen for node click?\n view.on(\"click\", function(vw, index, node, e){\n alert('Node \"' + node.id + '\" at index: ' + index + \" was clicked.\");\n });\n\n // load XML data\n dataModel.load(\"foobar.xml\");\n </code></pre>\n For an example of creating a JSON/UpdateManager view, see {@link Roo.JsonView}.\n<br><br>\n<b>Note: The root of your template must be a single node. Table/row implementations may work but are not supported due to\nIE\"s limited insertion support with tables and Opera\"s faulty event bubbling.</b>\n\nNote: old style constructor is still suported (container, template, config)",
  "config" : [
    {
      "name" : "selectedClass",
      "type" : "String",
      "desc" : "The css class to add to selected nodes",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable",
      "values" : [
      ]
    },
    {
      "name" : "dataName",
      "type" : "String",
      "desc" : "the named area of the template to use as the data area\n                         Works with domtemplates roo-name=\"name\"",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "text",
      "type" : "String",
      "desc" : "to display on mask (default Loading)",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "multiSelect",
      "type" : "Boolean",
      "desc" : "Allow multiple selection",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "emptyText",
      "type" : "String",
      "desc" : "The empty text to show when nothing is loaded.",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "store",
      "type" : "Roo.data.Store",
      "desc" : "Data store to load data from.",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "toggleSelect",
      "type" : "Boolean",
      "desc" : "- selecting",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "singleSelect",
      "type" : "Boolean",
      "desc" : "Allow single selection",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "tickable",
      "type" : "Boolean",
      "desc" : "- selecting",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "el",
      "type" : "String|Roo.Element",
      "desc" : "The container element.",
      "memberOf" : "",
      "values" : [
      ]
    },
    {
      "name" : "tpl",
      "type" : "String|Roo.Template",
      "desc" : "The template used by this View",
      "memberOf" : "",
      "values" : [
      ]
    }
  ],
  "methods" : [
    {
      "name" : "getSelectedNodes",
      "desc" : "Get the currently selected nodes.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "Array"
    },
    {
      "name" : "getNodes",
      "desc" : "Gets a range template nodes.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "startIndex",
          "type" : "Number",
          "desc" : ""
        },
        {
          "name" : "endIndex",
          "type" : "Number",
          "desc" : ""
        }
      ],
      "returns" : "Array"
    },
    {
      "name" : "select",
      "desc" : "Selects nodes.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "nodeInfo",
          "type" : "Array/HTMLElement/String/Number",
          "desc" : "An HTMLElement template node, index of a template node, id of a template node or an array of any of those to select"
        },
        {
          "name" : "keepExisting",
          "type" : "Boolean",
          "desc" : "(optional) true to keep existing selections"
        },
        {
          "name" : "suppressEvent",
          "type" : "Boolean",
          "desc" : "(optional) true to skip firing of the selectionchange vent"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "clearSelections",
      "desc" : "Clear all selections",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "suppressEvent",
          "type" : "Boolean",
          "desc" : "(optional) true to skip firing of the selectionchange event"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "isSelected",
      "desc" : "Returns true if the passed node is selected",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "node",
          "type" : "HTMLElement/Number",
          "desc" : "The node or node index"
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "refresh",
      "desc" : "Refreshes the view. - called by datachanged on the store. - do not call directly.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "onBeforeLoad",
      "desc" : "onbeforeLoad - masks the loading area.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "getSelectedIndexes",
      "desc" : "Get the indexes of the selected nodes.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "Array"
    },
    {
      "name" : "indexOf",
      "desc" : "Finds the index of the passed node",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "nodeInfo",
          "type" : "HTMLElement/String/Number",
          "desc" : "An HTMLElement template node, index of a template node or the id of a template node"
        }
      ],
      "returns" : "Number"
    },
    {
      "name" : "getEl",
      "desc" : "Returns the element this view is bound to.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "Roo.Element"
    },
    {
      "name" : "setStore",
      "desc" : "Changes the data store this view uses and refresh the view.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "store",
          "type" : "Store",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "refreshNode",
      "desc" : "Refresh an individual node.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "index",
          "type" : "Number",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "prepareData",
      "desc" : "Function to override to reformat the data that is sent to\nthe template for each node.\nDEPRICATED - use the preparedata event handler.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "data",
          "type" : "Array/Object",
          "desc" : "The raw data (array of colData for a data model bound view or\na JSON object for an UpdateManager bound view)."
        }
      ],
      "returns" : ""
    },
    {
      "name" : "getSelectionCount",
      "desc" : "Get the number of selected nodes.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "Number"
    },
    {
      "name" : "findItemFromChild",
      "desc" : "Returns the template node the passed child belongs to or null if it doesn't belong to one.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "node",
          "type" : "HTMLElement",
          "desc" : ""
        }
      ],
      "returns" : "HTMLElement"
    },
    {
      "name" : "unselect",
      "desc" : "Unselects nodes.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "nodeInfo",
          "type" : "Array/HTMLElement/String/Number",
          "desc" : "An HTMLElement template node, index of a template node, id of a template node or an array of any of those to select"
        },
        {
          "name" : "keepExisting",
          "type" : "Boolean",
          "desc" : "(optional) true IGNORED (for campatibility with select)"
        },
        {
          "name" : "suppressEvent",
          "type" : "Boolean",
          "desc" : "(optional) true to skip firing of the selectionchange vent"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "getNode",
      "desc" : "Gets a template node.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "nodeInfo",
          "type" : "HTMLElement/String/Number",
          "desc" : "An HTMLElement template node, index of a template node or the id of a template node"
        }
      ],
      "returns" : "HTMLElement"
    },
    {
      "name" : "purgeListeners",
      "desc" : "Removes all listeners for this object",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "on",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context."
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "un",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addEvents",
      "desc" : "Used to define events on this Observable",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "releaseCapture",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "removeListener",
      "desc" : "Removes a listener",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "fireEvent",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : ""
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers"
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "hasListener",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for"
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "capture",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture"
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addListener",
      "desc" : "Appends an event handler to this component",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context."
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>"
        }
      ],
      "returns" : ""
    }
  ],
  "events" : [
    {
      "name" : "*dblclick",
      "desc" : "Fires when a template node is double clicked.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.View",
          "desc" : ""
        },
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "The index of the target node"
        },
        {
          "name" : "node",
          "type" : "HTMLElement",
          "desc" : "The target node"
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "The raw event object"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*preparedata",
      "desc" : "Fires on every row to render, to allow you to change the data.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.View",
          "desc" : ""
        },
        {
          "name" : "data",
          "type" : "Object",
          "desc" : "to be rendered (change this)"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*selectionchange",
      "desc" : "Fires when the selected nodes change.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.View",
          "desc" : ""
        },
        {
          "name" : "selections",
          "type" : "Array",
          "desc" : "Array of the selected nodes"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*beforeselect",
      "desc" : "Fires before a selection is made. If any handlers return false, the selection is cancelled.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.View",
          "desc" : ""
        },
        {
          "name" : "node",
          "type" : "HTMLElement",
          "desc" : "The node to be selected"
        },
        {
          "name" : "selections",
          "type" : "Array",
          "desc" : "Array of currently selected nodes"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*beforeclick",
      "desc" : "Fires before a click is processed. Returns false to cancel the default action.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.View",
          "desc" : ""
        },
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "The index of the target node"
        },
        {
          "name" : "node",
          "type" : "HTMLElement",
          "desc" : "The target node"
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "The raw event object"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*click",
      "desc" : "Fires when a template node is clicked.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.View",
          "desc" : ""
        },
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "The index of the target node"
        },
        {
          "name" : "node",
          "type" : "HTMLElement",
          "desc" : "The target node"
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "The raw event object"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*contextmenu",
      "desc" : "Fires when a template node is right clicked.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.View",
          "desc" : ""
        },
        {
          "name" : "index",
          "type" : "Number",
          "desc" : "The index of the target node"
        },
        {
          "name" : "node",
          "type" : "HTMLElement",
          "desc" : "The target node"
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "The raw event object"
        }
      ],
      "returns" : ""
    }
  ]
}