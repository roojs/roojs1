{
  "name" : "Roo.tree.TreeEditor",
  "augments" : [
    "Roo.Editor",
    "Roo.Component",
    "Roo.util.Observable"
  ],
  "desc" : "Provides editor functionality for inline tree node editing.  Any valid {@link Roo.form.Field} can be used\nas the editor field.",
  "config" : [
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable"
    },
    {
      "name" : "alignment",
      "type" : "String",
      "desc" : "The position to align to (see {@link Roo.Element#alignTo} for more details, defaults to \"l-l\").",
      "memberOf" : ""
    },
    {
      "name" : "hideEl",
      "type" : "Boolean",
      "desc" : "True to hide the bound element while the editor is displayed (defaults to false)",
      "memberOf" : ""
    },
    {
      "name" : "maxWidth",
      "type" : "Number",
      "desc" : "The maximum width in pixels of the editor field (defaults to 250).  Note that if the maxWidth would exceed\nthe containing tree element's size, it will be automatically limited for you to the container width, taking\nscroll and client offsets into account prior to each edit.",
      "memberOf" : ""
    },
    {
      "name" : "constrain",
      "type" : "Boolean",
      "desc" : "True to constrain the editor to the viewport",
      "memberOf" : "Roo.Editor"
    },
    {
      "name" : "shadow",
      "type" : "Boolean/String",
      "desc" : "\"sides\" for sides/bottom only, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"frame\")",
      "memberOf" : "Roo.Editor"
    },
    {
      "name" : "field",
      "type" : "Roo.form.TextField|Object",
      "desc" : "The field configuration",
      "memberOf" : ""
    },
    {
      "name" : "hideMode",
      "type" : "String",
      "desc" : [
        "(display",
        "visibility)"
      ],
      "memberOf" : "Roo.Component"
    },
    {
      "name" : "value",
      "type" : "Mixed",
      "desc" : "The data value of the underlying field (defaults to \"\")",
      "memberOf" : "Roo.Editor"
    },
    {
      "name" : "allowDomMove",
      "type" : "Boolean",
      "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
      "memberOf" : "Roo.Component"
    },
    {
      "name" : "cls",
      "type" : "String",
      "desc" : "CSS class to apply to the editor (defaults to \"x-small-editor x-tree-editor\")",
      "memberOf" : ""
    },
    {
      "name" : "shim",
      "type" : "Boolean",
      "desc" : "True to shim the editor if selects/iframes could be displayed beneath it (defaults to false)",
      "memberOf" : ""
    },
    {
      "name" : "cancelOnEsc",
      "type" : "Boolean",
      "desc" : "True to cancel the edit when the escape key is pressed (defaults to false)",
      "memberOf" : "Roo.Editor"
    },
    {
      "name" : "actionMode",
      "type" : "String",
      "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
      "memberOf" : "Roo.Component"
    },
    {
      "name" : "completeOnEnter",
      "type" : "Boolean",
      "desc" : "True to complete the edit when the enter key is pressed (defaults to false)",
      "memberOf" : "Roo.Editor"
    },
    {
      "name" : "revertInvalid",
      "type" : "Boolean",
      "desc" : "True to automatically revert the field value and cancel the edit when the user completes an edit and the field\nvalidation fails (defaults to true)",
      "memberOf" : "Roo.Editor"
    },
    {
      "name" : "tree",
      "type" : "Roo.tree.TreePanel",
      "desc" : "The tree to bind to.",
      "memberOf" : ""
    },
    {
      "name" : "disableClass",
      "type" : "String",
      "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
      "memberOf" : "Roo.Component"
    },
    {
      "name" : "ignoreNoChange",
      "type" : "Boolean",
      "desc" : "True to skip the the edit completion process (no save, no events fired) if the user completes an edit and\nthe value has not changed (defaults to false).  Applies only to string values - edits for other data types\nwill never be ignored.",
      "memberOf" : "Roo.Editor"
    },
    {
      "name" : "autosize",
      "type" : "Boolean/String",
      "desc" : "True for the editor to automatically adopt the size of the underlying field, \"width\" to adopt the width only,\nor \"height\" to adopt the height only (defaults to false)",
      "memberOf" : "Roo.Editor"
    },
    {
      "name" : "updateEl",
      "type" : "Boolean",
      "desc" : "True to update the innerHTML of the bound element when the update completes (defaults to false)",
      "memberOf" : "Roo.Editor"
    }
  ],
  "methods" : [
    {
      "name" : "cancelEdit",
      "desc" : "Cancels the editing process and hides the editor without persisting any changes.  The field value will be\nreverted to the original starting value.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Editor",
      "params" : [
        {
          "name" : "remainVisible",
          "type" : "Boolean",
          "desc" : "Override the default behavior and keep the editor visible after\ncancel (defaults to false)"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "setSize",
      "desc" : "Sets the height and width of this editor.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Editor",
      "params" : [
        {
          "name" : "width",
          "type" : "Number",
          "desc" : "The new width"
        },
        {
          "name" : "height",
          "type" : "Number",
          "desc" : "The new height"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "realign",
      "desc" : "Realigns the editor to the bound field based on the current alignment config value.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Editor",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "getValue",
      "desc" : "Gets the data value of the editor",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Editor",
      "params" : [
      ],
      "returns" : "Mixed"
    },
    {
      "name" : "completeEdit",
      "desc" : "Ends the editing process, persists the changed value to the underlying field, and hides the editor.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Editor",
      "params" : [
        {
          "name" : "remainVisible",
          "type" : "Boolean",
          "desc" : "Override the default behavior and keep the editor visible after edit (defaults to false)"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "setValue",
      "desc" : "Sets the data value of the editor",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Editor",
      "params" : [
        {
          "name" : "value",
          "type" : "Mixed",
          "desc" : "Any valid value supported by the underlying field"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "startEdit",
      "desc" : "Starts the editing process and shows the editor.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Editor",
      "params" : [
        {
          "name" : "el",
          "type" : "String/HTMLElement/Element",
          "desc" : "The element to edit"
        },
        {
          "name" : "value",
          "type" : "String",
          "desc" : "(optional) A value to initialize the editor with. If a value is not provided, it defaults\nto the innerHTML of el."
        }
      ],
      "returns" : ""
    },
    {
      "name" : "getId",
      "desc" : "Returns the id of this component.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
      ],
      "returns" : "String"
    },
    {
      "name" : "render",
      "desc" : "If this is a lazy rendering component, render it to its container element.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "container",
          "type" : "String/HTMLElement/Element",
          "desc" : "(optional) The element this component should be rendered into. If it is being applied to existing markup, this should be left off."
        }
      ],
      "returns" : ""
    },
    {
      "name" : "destroy",
      "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "isVisible",
      "desc" : "Returns true if this component is visible.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "setDisabled",
      "desc" : "Convenience function for setting disabled/enabled by boolean.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "disabled",
          "type" : "Boolean",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "hide",
      "desc" : "Hide this component.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
      ],
      "returns" : "Roo.Component"
    },
    {
      "name" : "focus",
      "desc" : "Try to focus this component.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "selectText",
          "type" : "Boolean",
          "desc" : "True to also select the text in this component (if applicable)"
        }
      ],
      "returns" : "Roo.Component"
    },
    {
      "name" : "show",
      "desc" : "Show this component.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
      ],
      "returns" : "Roo.Component"
    },
    {
      "name" : "enable",
      "desc" : "Enable this component.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
      ],
      "returns" : "Roo.Component"
    },
    {
      "name" : "setVisible",
      "desc" : "Convenience function to hide or show this component by boolean.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "visible",
          "type" : "Boolean",
          "desc" : "True to show, false to hide"
        }
      ],
      "returns" : "Roo.Component"
    },
    {
      "name" : "disable",
      "desc" : "Disable this component.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
      ],
      "returns" : "Roo.Component"
    },
    {
      "name" : "getEl",
      "desc" : "Returns the underlying {@link Roo.Element}.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
      ],
      "returns" : "Roo.Element"
    },
    {
      "name" : "purgeListeners",
      "desc" : "Removes all listeners for this object",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "on",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context."
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "un",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addEvents",
      "desc" : "Used to define events on this Observable",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "releaseCapture",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "removeListener",
      "desc" : "Removes a listener",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "fireEvent",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : ""
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers"
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "hasListener",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for"
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "capture",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture"
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addListener",
      "desc" : "Appends an event handler to this component",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context."
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>"
        }
      ],
      "returns" : ""
    }
  ],
  "events" : [
    {
      "name" : "*beforenodeedit",
      "desc" : "Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning\nfalse from the handler of this event.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Editor",
          "desc" : ""
        },
        {
          "name" : "node",
          "type" : "Roo.tree.Node",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*beforestartedit",
      "desc" : "Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning\nfalse from the handler of this event.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Editor",
      "params" : [
        {
          "name" : "this",
          "type" : "Editor",
          "desc" : ""
        },
        {
          "name" : "boundEl",
          "type" : "Roo.Element",
          "desc" : "The underlying element bound to this editor"
        },
        {
          "name" : "value",
          "type" : "Mixed",
          "desc" : "The field value being set"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*beforecomplete",
      "desc" : "Fires after a change has been made to the field, but before the change is reflected in the underlying\nfield.  Saving the change to the field can be canceled by returning false from the handler of this event.\nNote that if the value has not changed and ignoreNoChange = true, the editing will still end but this\nevent will not fire since no edit actually occurred.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Editor",
      "params" : [
        {
          "name" : "this",
          "type" : "Editor",
          "desc" : ""
        },
        {
          "name" : "value",
          "type" : "Mixed",
          "desc" : "The current field value"
        },
        {
          "name" : "startValue",
          "type" : "Mixed",
          "desc" : "The original field value"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*complete",
      "desc" : "Fires after editing is complete and any changed value has been written to the underlying field.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Editor",
      "params" : [
        {
          "name" : "this",
          "type" : "Editor",
          "desc" : ""
        },
        {
          "name" : "value",
          "type" : "Mixed",
          "desc" : "The current field value"
        },
        {
          "name" : "startValue",
          "type" : "Mixed",
          "desc" : "The original field value"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*specialkey",
      "desc" : "Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Editor",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.form.Field",
          "desc" : ""
        },
        {
          "name" : "e",
          "type" : "Roo.EventObject",
          "desc" : "The event object"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*startedit",
      "desc" : "Fires when this editor is displayed",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Editor",
      "params" : [
        {
          "name" : "boundEl",
          "type" : "Roo.Element",
          "desc" : "The underlying element bound to this editor"
        },
        {
          "name" : "value",
          "type" : "Mixed",
          "desc" : "The starting field value"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*beforerender",
      "desc" : "Fires before the component is rendered. Return false to stop the render.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*disable",
      "desc" : "Fires after the component is disabled.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*render",
      "desc" : "Fires after the component is rendered.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*destroy",
      "desc" : "Fires after the component is destroyed.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*hide",
      "desc" : "Fires after the component is hidden.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*beforehide",
      "desc" : "Fires before the component is hidden. Return false to stop the hide.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*show",
      "desc" : "Fires after the component is shown.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*beforeshow",
      "desc" : "Fires before the component is shown.  Return false to stop the show.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*enable",
      "desc" : "Fires after the component is enabled.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*beforedestroy",
      "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    }
  ]
}