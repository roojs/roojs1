{
  "name" : "Roo.util.Format",
  "augments" : [
  ],
  "desc" : "Reusable data formatting functions",
  "config" : [
  ],
  "methods" : [
    {
      "name" : "uppercase",
      "desc" : "Converts a string to all upper case letters",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The text to convert"
        }
      ],
      "returns" : "String"
    },
    {
      "name" : "date",
      "desc" : "Parse a value into a formatted date using the specified format pattern.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "Mixed",
          "desc" : "The value to format"
        },
        {
          "name" : "format",
          "type" : "String",
          "desc" : "(optional) Any valid date format string (defaults to 'm/d/Y')"
        }
      ],
      "returns" : "String"
    },
    {
      "name" : "lowercase",
      "desc" : "Converts a string to all lower case letters",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The text to convert"
        }
      ],
      "returns" : "String"
    },
    {
      "name" : "undef",
      "desc" : "Checks a reference and converts it to empty string if it is undefined",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "Mixed",
          "desc" : "Reference to check"
        }
      ],
      "returns" : "Mixed"
    },
    {
      "name" : "stripTags",
      "desc" : "Strips all HTML tags",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "Mixed",
          "desc" : "The text from which to strip tags"
        }
      ],
      "returns" : "String"
    },
    {
      "name" : "ellipsis",
      "desc" : "Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The string to truncate"
        },
        {
          "name" : "length",
          "type" : "Number",
          "desc" : "The maximum length to allow before truncating"
        }
      ],
      "returns" : "String"
    },
    {
      "name" : "htmlDecode",
      "desc" : "Convert certain characters (&, <, >, and ') from their HTML character equivalents.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The string to decode"
        }
      ],
      "returns" : "String"
    },
    {
      "name" : "htmlEncode",
      "desc" : "Convert certain characters (&, <, >, and ') to their HTML character equivalents for literal display in web pages.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The string to encode"
        }
      ],
      "returns" : "String"
    },
    {
      "name" : "toFixed",
      "desc" : "safer version of Math.toFixed..??/",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "Number/String",
          "desc" : "The numeric value to format"
        },
        {
          "name" : "value",
          "type" : "Number/String",
          "desc" : "Decimal places"
        }
      ],
      "returns" : "String"
    },
    {
      "name" : "substr",
      "desc" : "Returns a substring from within an original string",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The original text"
        },
        {
          "name" : "start",
          "type" : "Number",
          "desc" : "The start index of the substring"
        },
        {
          "name" : "length",
          "type" : "Number",
          "desc" : "The length of the substring"
        }
      ],
      "returns" : "String"
    },
    {
      "name" : "number",
      "desc" : "Format a number\neventually this should probably emulate php's number_format",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "Number/String",
          "desc" : "The numeric value to format"
        },
        {
          "name" : "decimals",
          "type" : "Number",
          "desc" : "number of decimal places"
        },
        {
          "name" : "delimiter",
          "type" : "String",
          "desc" : "for thousands (default comma)"
        }
      ],
      "returns" : "String"
    },
    {
      "name" : "usMoney",
      "desc" : "Format a number as US currency",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "Number/String",
          "desc" : "The numeric value to format"
        }
      ],
      "returns" : "String"
    },
    {
      "name" : "capitalize",
      "desc" : "Converts the first character only of a string to upper case",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The text to convert"
        }
      ],
      "returns" : "String"
    },
    {
      "name" : "trim",
      "desc" : "Trims any whitespace from either side of a string",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "value",
          "type" : "String",
          "desc" : "The text to trim"
        }
      ],
      "returns" : "String"
    },
    {
      "name" : "dateRenderer",
      "desc" : "Returns a date rendering function that can be reused to apply a date format multiple times efficiently",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "format",
          "type" : "String",
          "desc" : "Any valid date format string"
        }
      ],
      "returns" : "Function"
    }
  ],
  "events" : [
  ]
}