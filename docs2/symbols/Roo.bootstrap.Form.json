{
  "name" : "Roo.bootstrap.Form",
  "augments" : [
    "Roo.bootstrap.Component",
    "Roo.Component",
    "Roo.util.Observable"
  ],
  "desc" : "Bootstrap Form class",
  "config" : [
    {
      "name" : "labelAlign",
      "type" : "String",
      "desc" : "top | left (default top)",
      "memberOf" : ""
    },
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable"
    },
    {
      "name" : "fileUpload",
      "type" : "Boolean",
      "desc" : "Set to true if this form is a file upload.",
      "memberOf" : ""
    },
    {
      "name" : "tooltip",
      "type" : "string",
      "desc" : "Text for the tooltip",
      "memberOf" : "Roo.bootstrap.Component"
    },
    {
      "name" : "container_method",
      "type" : "string",
      "desc" : "method to fetch parents container element (used by NavHeaderbar -  getHeaderChildContainer)",
      "memberOf" : "Roo.bootstrap.Component"
    },
    {
      "name" : "visibilityEl",
      "type" : "string|object",
      "desc" : [
        "(el",
        "parent)"
      ],
      "memberOf" : "Roo.bootstrap.Component"
    },
    {
      "name" : "align",
      "type" : "String",
      "desc" : "left  | right - for navbars",
      "memberOf" : ""
    },
    {
      "name" : "can_build_overlaid",
      "type" : "Boolean",
      "desc" : "True if element can be rebuild from a HTML page",
      "memberOf" : "Roo.bootstrap.Component"
    },
    {
      "name" : "hideMode",
      "type" : "String",
      "desc" : [
        "(display",
        "visibility)"
      ],
      "memberOf" : "Roo.Component"
    },
    {
      "name" : "method",
      "type" : "String",
      "desc" : "GET | POST (default POST)",
      "memberOf" : ""
    },
    {
      "name" : "errorMask",
      "type" : "Boolean",
      "desc" : [
        "(true",
        "false)"
      ],
      "memberOf" : ""
    },
    {
      "name" : "style",
      "type" : "String",
      "desc" : "any extra css",
      "memberOf" : "Roo.bootstrap.Component"
    },
    {
      "name" : "allowDomMove",
      "type" : "Boolean",
      "desc" : "Whether the component can move the Dom node when rendering (defaults to true).",
      "memberOf" : "Roo.Component"
    },
    {
      "name" : "timeout",
      "type" : "Number",
      "desc" : "Timeout for form actions in seconds (default is 30 seconds).",
      "memberOf" : ""
    },
    {
      "name" : "cls",
      "type" : "String",
      "desc" : "css class",
      "memberOf" : "Roo.bootstrap.Component"
    },
    {
      "name" : "loadMask",
      "type" : "Boolean",
      "desc" : "load mask when submit (default true)",
      "memberOf" : ""
    },
    {
      "name" : "baseParams",
      "type" : "Object",
      "desc" : "Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.",
      "memberOf" : ""
    },
    {
      "name" : "xattr",
      "type" : "Object",
      "desc" : "extra attributes to add to 'element' (used by builder to store stuff.)",
      "memberOf" : "Roo.bootstrap.Component"
    },
    {
      "name" : "actionMode",
      "type" : "String",
      "desc" : "which property holds the element that used for  hide() / show() / disable() / enable()\ndefault is 'el'",
      "memberOf" : "Roo.Component"
    },
    {
      "name" : "maskBody",
      "type" : "Boolean",
      "desc" : "",
      "memberOf" : ""
    },
    {
      "name" : "dataId",
      "type" : "string",
      "desc" : "cutomer id",
      "memberOf" : "Roo.bootstrap.Component"
    },
    {
      "name" : "url",
      "type" : "String",
      "desc" : "The URL to use for form actions if one isn't supplied in the action options.",
      "memberOf" : ""
    },
    {
      "name" : "name",
      "type" : "string",
      "desc" : "Specifies name attribute",
      "memberOf" : "Roo.bootstrap.Component"
    },
    {
      "name" : "disableClass",
      "type" : "String",
      "desc" : "CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").",
      "memberOf" : "Roo.Component"
    },
    {
      "name" : "maskOffset",
      "type" : "Number",
      "desc" : "Default 100",
      "memberOf" : ""
    }
  ],
  "methods" : [
    {
      "name" : "doAction",
      "desc" : "Performs a predefined action (submit or load) or custom actions you define on this form.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "actionName",
          "type" : "String",
          "desc" : "The name of the action type"
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) The options to pass to the action.  All of the config options listed\nbelow are supported by both the submit and load actions unless otherwise noted (custom actions could also\naccept other config options):\n<pre>\nProperty          Type             Description\n----------------  ---------------  ----------------------------------------------------------------------------------\nurl               String           The url for the action (defaults to the form's url)\nmethod            String           The form method to use (defaults to the form's method, or POST if not defined)\nparams            String/Object    The params to pass (defaults to the form's baseParams, or none if not defined)\nclientValidation  Boolean          Applies to submit only.  Pass true to call form.isValid() prior to posting to\n                                   validate the form on the client (defaults to false)\n</pre>"
        }
      ],
      "returns" : "BasicForm"
    },
    {
      "name" : "setValues",
      "desc" : "Set values for fields in this form in bulk.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "values",
          "type" : "Array/Object",
          "desc" : "Either an array in the form [{id:'fieldId', value:'foo'},...] or an object hash of {id: value, id2: value2}"
        }
      ],
      "returns" : "BasicForm"
    },
    {
      "name" : "getFieldValues",
      "desc" : "Returns the fields in this form as an object with key/value pairs.\nThis differs from getValues as it calls getValue on each child item, rather than using dom data.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "Object"
    },
    {
      "name" : "markInvalid",
      "desc" : "Mark fields in this form invalid in bulk.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "errors",
          "type" : "Array/Object",
          "desc" : "Either an array in the form [{id:'fieldId', msg:'The message'},...] or an object hash of {id: msg, id2: msg2}"
        }
      ],
      "returns" : "BasicForm"
    },
    {
      "name" : "clearInvalid",
      "desc" : "Clears all invalid messages in this form.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "BasicForm"
    },
    {
      "name" : "findField",
      "desc" : "Find a Roo.form.Field in this form by id, dataIndex, name or hiddenName",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "id",
          "type" : "String",
          "desc" : "The value to search for"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "isDirty",
      "desc" : "Returns true if any fields in this form have changed since their original load.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "reset",
      "desc" : "Resets this form.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : "BasicForm"
    },
    {
      "name" : "getValues",
      "desc" : "Returns the fields in this form as an object with key/value pairs. If multiple fields exist with the same name\nthey are returned as an array.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "asString",
          "type" : "Boolean",
          "desc" : ""
        }
      ],
      "returns" : "Object"
    },
    {
      "name" : "isValid",
      "desc" : "Returns true if client-side validation on the form is successful.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "tooltipEl",
      "desc" : "Fetch the element to display the tooltip on.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.bootstrap.Component",
      "params" : [
      ],
      "returns" : "Roo.Element"
    },
    {
      "name" : "hide",
      "desc" : "Hide a component - adds 'hidden' class",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.bootstrap.Component",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "show",
      "desc" : "Show a component - removes 'hidden' class",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.bootstrap.Component",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "setVisibilityEl",
      "desc" : "Set the element that will be used to show or hide",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.bootstrap.Component",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "getVisibilityEl",
      "desc" : "Get the element that will be used to show or hide",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.bootstrap.Component",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "initEvents",
      "desc" : "Initialize Events for the element",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.bootstrap.Component",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "getChildContainer",
      "desc" : "Fetch the element to add children to",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.bootstrap.Component",
      "params" : [
      ],
      "returns" : "Roo.Element"
    },
    {
      "name" : "getId",
      "desc" : "Returns the id of this component.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
      ],
      "returns" : "String"
    },
    {
      "name" : "render",
      "desc" : "If this is a lazy rendering component, render it to its container element.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "container",
          "type" : "String/HTMLElement/Element",
          "desc" : "(optional) The element this component should be rendered into. If it is being applied to existing markup, this should be left off."
        }
      ],
      "returns" : ""
    },
    {
      "name" : "destroy",
      "desc" : "Destroys this component by purging any event listeners, removing the component's element from the DOM,\nremoving the component from its {@link Roo.Container} (if applicable) and unregistering it from {@link Roo.ComponentMgr}.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "isVisible",
      "desc" : "Returns true if this component is visible.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "setDisabled",
      "desc" : "Convenience function for setting disabled/enabled by boolean.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "disabled",
          "type" : "Boolean",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "focus",
      "desc" : "Try to focus this component.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "selectText",
          "type" : "Boolean",
          "desc" : "True to also select the text in this component (if applicable)"
        }
      ],
      "returns" : "Roo.Component"
    },
    {
      "name" : "enable",
      "desc" : "Enable this component.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
      ],
      "returns" : "Roo.Component"
    },
    {
      "name" : "setVisible",
      "desc" : "Convenience function to hide or show this component by boolean.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "visible",
          "type" : "Boolean",
          "desc" : "True to show, false to hide"
        }
      ],
      "returns" : "Roo.Component"
    },
    {
      "name" : "disable",
      "desc" : "Disable this component.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
      ],
      "returns" : "Roo.Component"
    },
    {
      "name" : "getEl",
      "desc" : "Returns the underlying {@link Roo.Element}.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
      ],
      "returns" : "Roo.Element"
    },
    {
      "name" : "purgeListeners",
      "desc" : "Removes all listeners for this object",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
      ],
      "returns" : ""
    },
    {
      "name" : "on",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context."
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "un",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addEvents",
      "desc" : "Used to define events on this Observable",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "releaseCapture",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "removeListener",
      "desc" : "Removes a listener",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "fireEvent",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : ""
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers"
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "hasListener",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for"
        }
      ],
      "returns" : "Boolean"
    },
    {
      "name" : "capture",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "static" : true,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture"
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "addListener",
      "desc" : "Appends an event handler to this component",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.util.Observable",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for"
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes"
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context."
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>"
        }
      ],
      "returns" : ""
    }
  ],
  "events" : [
    {
      "name" : "*actionfailed",
      "desc" : "Fires when an action fails.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Form",
          "desc" : ""
        },
        {
          "name" : "action",
          "type" : "Action",
          "desc" : "The action that failed"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*actioncomplete",
      "desc" : "Fires when an action is completed.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Form",
          "desc" : ""
        },
        {
          "name" : "action",
          "type" : "Action",
          "desc" : "The action that completed"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*beforeaction",
      "desc" : "Fires before any action is performed. Return false to cancel the action.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Form",
          "desc" : ""
        },
        {
          "name" : "action",
          "type" : "Action",
          "desc" : "The action to be performed"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*clientvalidation",
      "desc" : "If the monitorValid config option is true, this event fires repetitively to notify of valid state",
      "static" : false,
      "constructor" : false,
      "memberOf" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Form",
          "desc" : ""
        },
        {
          "name" : "valid",
          "type" : "Boolean",
          "desc" : "true if the form has passed client-side validation"
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*childrenrendered",
      "desc" : "Fires when the children have been rendered..",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.bootstrap.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.bootstrap.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*beforerender",
      "desc" : "Fires before the component is rendered. Return false to stop the render.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*disable",
      "desc" : "Fires after the component is disabled.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*render",
      "desc" : "Fires after the component is rendered.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*destroy",
      "desc" : "Fires after the component is destroyed.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*hide",
      "desc" : "Fires after the component is hidden.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*beforehide",
      "desc" : "Fires before the component is hidden. Return false to stop the hide.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*show",
      "desc" : "Fires after the component is shown.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*beforeshow",
      "desc" : "Fires before the component is shown.  Return false to stop the show.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*enable",
      "desc" : "Fires after the component is enabled.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    },
    {
      "name" : "*beforedestroy",
      "desc" : "Fires before the component is destroyed. Return false to stop the destroy.",
      "static" : false,
      "constructor" : false,
      "memberOf" : "Roo.Component",
      "params" : [
        {
          "name" : "this",
          "type" : "Roo.Component",
          "desc" : ""
        }
      ],
      "returns" : ""
    }
  ]
}