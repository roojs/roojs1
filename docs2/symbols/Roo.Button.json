{
  "name" : "Roo.Button",
  "augments" : [
    "Roo.util.Observable"
  ],
  "desc" : "Simple Button class",
  "config" : [
    {
      "name" : "listeners",
      "type" : "Object",
      "desc" : "list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  </code></pre>",
      "memberOf" : "Roo.util.Observable",
      "values" : [
      ]
    },
    {
      "name" : "tooltip",
      "type" : "String/Object",
      "desc" : "The tooltip for the button - can be a string or QuickTips config object",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "text",
      "type" : "String",
      "desc" : "The button text",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "renderTo",
      "type" : "String/HTMLElement/Element",
      "desc" : "The element to append the button to",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "hidden",
      "type" : "Boolean",
      "desc" : "True to start hidden (defaults to false)",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "toggleGroup",
      "type" : "String",
      "desc" : "The group this toggle button is a member of (only 1 per group can be pressed, only\n   applies if enableToggle = true)",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "handleMouseEvents",
      "type" : "Boolean",
      "desc" : "False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "menu",
      "type" : "Mixed",
      "desc" : "Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "enableToggle",
      "type" : "Boolean",
      "desc" : "True to enable pressed/not pressed toggling (defaults to false)",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "handler",
      "type" : "Function",
      "desc" : "A function called when the button is clicked (can be used instead of click event)",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "scope",
      "type" : "Object",
      "desc" : "The scope of the handler",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "minWidth",
      "type" : "Number",
      "desc" : "The minimum width for this button (used to give a set of buttons a common width)",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "disabled",
      "type" : "Boolean",
      "desc" : "True to start disabled (defaults to false)",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "pressed",
      "type" : "Boolean",
      "desc" : "True to start pressed (only if enableToggle = true)",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "template",
      "type" : "Roo.Template",
      "desc" : "(Optional)\nAn {@link Roo.Template} with which to create the Button's main element. This Template must\ncontain numeric substitution parameter 0 if it is to display the tRoo property. Changing the template could\nrequire code modifications if required elements (e.g. a button) aren't present.",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "cls",
      "type" : "String",
      "desc" : "A CSS class to apply to the button's main element.",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "tabIndex",
      "type" : "Number",
      "desc" : "The DOM tabIndex for this button (defaults to undefined)",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "iconCls",
      "type" : "String",
      "desc" : "A css class which sets a background image to be used as the icon for this button (defaults to undefined).",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "menuAlign",
      "type" : "String",
      "desc" : "The position to align the menu to (see {@link Roo.Element#alignTo} for more details, defaults to 'tl-bl?').",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "icon",
      "type" : "String",
      "desc" : "The path to an image to display in the button (the image will be set as the background-image\nCSS property of the button by default, so if you want a mixed icon/text button, set cls:\"x-btn-text-icon\")",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "tooltipType",
      "type" : "String",
      "desc" : "The type of tooltip to use. Either \"qtip\" (default) for QuickTips or \"title\" for title attribute.",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "clickEvent",
      "type" : "String",
      "desc" : "The type of event to map to the button's event handler (defaults to 'click')",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "repeat",
      "type" : "Boolean/Object",
      "desc" : "True to repeat fire the click event while the mouse is down. This can also be\n  an {@link Roo.util.ClickRepeater} config object (defaults to false).",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    },
    {
      "name" : "type",
      "type" : "String",
      "desc" : "The button's type, corresponding to the DOM input element type attribute.  Either \"submit,\" \"reset\" or \"button\" (default).",
      "memberOf" : "Roo.Button",
      "values" : [
      ]
    }
  ],
  "methods" : [
    {
      "name" : "show",
      "desc" : "Show this button",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Button",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
      ]
    },
    {
      "name" : "focus",
      "desc" : "Focus the button",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Button",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
      ]
    },
    {
      "name" : "setHandler",
      "desc" : "Assigns this button's click handler",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Button",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The function to call when the button is clicked",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) Scope for the function passed in",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "disable",
      "desc" : "Disable this button",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Button",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
      ]
    },
    {
      "name" : "enable",
      "desc" : "Enable this button",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Button",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
      ]
    },
    {
      "name" : "getEl",
      "desc" : "Returns the button's underlying element",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Button",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Roo.Element",
          "desc" : "The element"
        }
      ]
    },
    {
      "name" : "setDisabled",
      "desc" : "Convenience function for boolean enable/disable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Button",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "enabled",
          "type" : "Boolean",
          "desc" : "True to enable, false to disable",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "setVisible",
      "desc" : "Convenience function for boolean show/hide",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Button",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "visible",
          "type" : "Boolean",
          "desc" : "True to show, false to hide",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "destroy",
      "desc" : "Destroys this Button and removes any listeners.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Button",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
      ]
    },
    {
      "name" : "getText",
      "desc" : "Gets the text for this button",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Button",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "String",
          "desc" : "The button text"
        }
      ]
    },
    {
      "name" : "setText",
      "desc" : "Sets this button's text",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Button",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "text",
          "type" : "String",
          "desc" : "The button text",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "toggle",
      "desc" : "If a state it passed, it becomes the pressed state otherwise the current state is toggled.",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Button",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "state",
          "type" : "Boolean",
          "desc" : "(optional) Force a particular state",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "hide",
      "desc" : "Hide this button",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.Button",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
      ]
    },
    {
      "name" : "purgeListeners",
      "desc" : "Removes all listeners for this object",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
      ],
      "returns" : [
      ]
    },
    {
      "name" : "on",
      "desc" : "Appends an event handler to this element (shorthand for addListener)",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional)",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "un",
      "desc" : "Removes a listener (shorthand for removeListener)",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "addEvents",
      "desc" : "Used to define events on this Observable",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "object",
          "type" : "Object",
          "desc" : "The object with the events defined",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "releaseCapture",
      "desc" : "Removes <b>all</b> added captures from the Observable.",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to release",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "removeListener",
      "desc" : "Removes a listener",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The handler to remove",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the handler",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "fireEvent",
      "desc" : "Fires the specified event with the passed parameters (minus the event name).",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "args",
          "type" : "Object...",
          "desc" : "Variable number of parameters are passed to handlers",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "returns false if any of the handlers return false otherwise it returns true"
        }
      ]
    },
    {
      "name" : "hasListener",
      "desc" : "Checks to see if this object has any listeners for a specified event",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The name of the event to check for",
          "isOptional" : false
        }
      ],
      "returns" : [
        {
          "name" : "",
          "type" : "Boolean",
          "desc" : "True if the event is being listened for, else false"
        }
      ]
    },
    {
      "name" : "capture",
      "desc" : "Starts capture on the specified Observable. All events will be passed\nto the supplied function with the event name + standard signature of the event\n<b>before</b> the event is fired. If the supplied function returns false,\nthe event will not fire.",
      "isStatic" : true,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "o",
          "type" : "Observable",
          "desc" : "The Observable to capture",
          "isOptional" : false
        },
        {
          "name" : "fn",
          "type" : "Function",
          "desc" : "The function to call",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope (this object) for the fn",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    },
    {
      "name" : "addListener",
      "desc" : "Appends an event handler to this component",
      "isStatic" : false,
      "isConstructor" : false,
      "isPrivate" : false,
      "singleton" : "",
      "memberOf" : "Roo.util.Observable",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "eventName",
          "type" : "String",
          "desc" : "The type of event to listen for",
          "isOptional" : false
        },
        {
          "name" : "handler",
          "type" : "Function",
          "desc" : "The method the event invokes",
          "isOptional" : false
        },
        {
          "name" : "scope",
          "type" : "Object",
          "desc" : "(optional) The scope in which to execute the handler\nfunction. The handler function's \"this\" context.",
          "isOptional" : false
        },
        {
          "name" : "options",
          "type" : "Object",
          "desc" : "(optional) An object containing handler configuration\nproperties. This may contain any of the following properties:<ul>\n<li>scope {Object} The scope in which to execute the handler function. The handler function's \"this\" context.</li>\n<li>delay {Number} The number of milliseconds to delay the invocation of the handler after te event fires.</li>\n<li>single {Boolean} True to add a handler to handle just the next firing of the event, and then remove itself.</li>\n<li>buffer {Number} Causes the handler to be scheduled to run in an {@link Roo.util.DelayedTask} delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</li>\n</ul><br>\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)\n\t\t<pre><code>\n\t\tel.on('click', this.onClick, this, {\n \t\t\tsingle: true,\n    \t\tdelay: 100,\n    \t\tforumId: 4\n\t\t});\n\t\t</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<pre><code>\n\t\tel.on({\n\t\t\t'click': {\n        \t\tfn: this.onClick,\n        \t\tscope: this,\n        \t\tdelay: 100\n    \t\t}, \n    \t\t'mouseover': {\n        \t\tfn: this.onMouseOver,\n        \t\tscope: this\n    \t\t},\n    \t\t'mouseout': {\n        \t\tfn: this.onMouseOut,\n        \t\tscope: this\n    \t\t}\n\t\t});\n\t\t</code></pre>\n<p>\nOr a shorthand syntax which passes the same scope object to all handlers:\n     \t<pre><code>\n\t\tel.on({\n\t\t\t'click': this.onClick,\n    \t\t'mouseover': this.onMouseOver,\n    \t\t'mouseout': this.onMouseOut,\n    \t\tscope: this\n\t\t});\n\t\t</code></pre>",
          "isOptional" : false
        }
      ],
      "returns" : [
      ]
    }
  ],
  "events" : [
    {
      "name" : "*render",
      "desc" : "Fires when the button is rendered",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Button",
          "desc" : "",
          "isOptional" : false
        }
      ]
    },
    {
      "name" : "*click",
      "desc" : "Fires when this button is clicked",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Button",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "EventObject",
          "desc" : "The click event",
          "isOptional" : false
        }
      ]
    },
    {
      "name" : "*mouseover",
      "desc" : "Fires when the mouse hovers over the button",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Button",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event object",
          "isOptional" : false
        }
      ]
    },
    {
      "name" : "*toggle",
      "desc" : "Fires when the \"pressed\" state of this button changes (only if enableToggle = true)",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Button",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "pressed",
          "type" : "Boolean",
          "desc" : "",
          "isOptional" : false
        }
      ]
    },
    {
      "name" : "*mouseout",
      "desc" : "Fires when the mouse exits the button",
      "memberOf" : "",
      "example" : "",
      "deprecated" : "",
      "since" : "",
      "see" : "",
      "params" : [
        {
          "name" : "this",
          "type" : "Button",
          "desc" : "",
          "isOptional" : false
        },
        {
          "name" : "e",
          "type" : "Event",
          "desc" : "The event object",
          "isOptional" : false
        }
      ]
    }
  ]
}